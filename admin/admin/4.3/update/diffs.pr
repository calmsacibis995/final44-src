

Mar  5 14:24 1987  net1 Page 1


4.3BSD network bug (#1, tcp_output)
Index:	sys/netinet/tcp_output.c 4.3BSD FIX

Description:
The final change in the send code in TCP in 4.3 was made incorrectly.
In tcp_output (/sys/netinet/tcp_output.c), the output packet flags
are chosen before the packet length is adjusted to reflect the maximum
segment size.  Under some cirsumstances, this results in sending a FIN
with a packet which is not the last data packet.  This is most often
noticed when the connection implements a one-way transfer of data
and the sender closes while the data is still draining; the result is
unnoticed loss of data.

Fix:
Move the lines in tcp_output that look up the flags to be sent
to a location after the final length adjustment, as follows:

*** /nbsd/sys/netinet/tcp_output.c	Thu Jun  5 00:31:36 1986
--- tcp_output.c	Wed Aug 20 09:31:34 1986
***************
*** 5,7 ****
   *
!  *	@(#)tcp_output.c	7.1 (Berkeley) 6/5/86
   */
--- 5,7 ----
   *
!  *	@(#)tcp_output.c	7.2 (Berkeley) 8/20/86
   */
***************
*** 82,85 ****
  	flags = tcp_outflags[tp->t_state];
- 	if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
- 		flags &= ~TH_FIN;
  
--- 82,83 ----
***************
*** 118,119 ****
--- 116,119 ----
  	}
+ 	if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
+ 		flags &= ~TH_FIN;
  	win = sbspace(&so->so_rcv);





















Mar  9 12:52 1987  net2 Page 1


4.3BSD network bug (#2, in_pcbconnect)
Index:	sys/netinet/in_pcb.c 4.3BSD FIX

Description:
There is a logic error in the code to assign a local address to a socket
when it is unbound and is setting a destination address.  For a datagram
socket, this may result in the use of a suboptimal return address.
In the most serious case, the return address for a datagram could be
the address used for the loopback interface (if the loopback address
is set before the other interfaces).  The problem can result in failures
of the name resolution routines that use datagrams to communicate with
the name server.

(Note: the "primary" address of a 4.3BSD host is the address set with
the first "ifconfig" to set an internet address after boot time.
The primary address is used when an address must be chosen without context;
this is supposed to happen rarely, for example when no route exists yet
at bind time.  In general, the loopback address should not be the first
address set unless there is no hardware network interface.  Certain network
interfaces do not receive their own packets, however, and either must have
their addresses set by number, or have them set after some other interface.)

The problem is in the code in in_pcbconnect (/sys/netinet/in_pcb.c)
that checks the cached route held by the socket before routing the packet,
then reroutes if necessary.  Part of the interface lookup procedure is done
only if there is no correct cached route.  That part of the procedure
should be done each time a local address is chosen.

Fix:
The fix is to move the interface lookup code outside of the conditional
section which is run only to allocate a new route.  The diffs follow:

*** /nbsd/sys/netinet/in_pcb.c	Thu Jun  5 00:26:13 1986
--- netinet/in_pcb.c	Thu Sep  4 19:33:11 1986
***************
*** 5,7 ****
   *
!  *	@(#)in_pcb.c	7.1 (Berkeley) 6/5/86
   */
--- 5,7 ----
   *
!  *	@(#)in_pcb.c	7.2 (Berkeley) 9/4/86
   */
***************
*** 154,156 ****
  		    (ro->ro_rt == (struct rtentry *)0 ||
! 		    (ifp = ro->ro_rt->rt_ifp) == (struct ifnet *)0)) {
  			/* No route yet, so try to acquire one */
--- 154,156 ----
  		    (ro->ro_rt == (struct rtentry *)0 ||
! 		    ro->ro_rt->rt_ifp == (struct ifnet *)0)) {
  			/* No route yet, so try to acquire one */











Mar  9 12:52 1987  net2 Page 2



***************
*** 160,173 ****
  			rtalloc(ro);
- 			/*
- 			 * If we found a route, use the address
- 			 * corresponding to the outgoing interface
- 			 * unless it is the loopback (in case a route
- 			 * to our address on another net goes to loopback).
- 			 */
- 			if (ro->ro_rt && (ifp = ro->ro_rt->rt_ifp) &&
- 			    (ifp->if_flags & IFF_LOOPBACK) == 0)
- 				for (ia = in_ifaddr; ia; ia = ia->ia_next)
- 					if (ia->ia_ifp == ifp)
- 						break;
  		}
  		if (ia == 0) {
--- 160,173 ----
  			rtalloc(ro);
  		}
+ 		/*
+ 		 * If we found a route, use the address
+ 		 * corresponding to the outgoing interface
+ 		 * unless it is the loopback (in case a route
+ 		 * to our address on another net goes to loopback).
+ 		 */
+ 		if (ro->ro_rt && (ifp = ro->ro_rt->rt_ifp) &&
+ 		    (ifp->if_flags & IFF_LOOPBACK) == 0)
+ 			for (ia = in_ifaddr; ia; ia = ia->ia_next)
+ 				if (ia->ia_ifp == ifp)
+ 					break;
  		if (ia == 0) {































Mar  5 14:25 1987  net3 Page 1


4.3BSD network bug (#3, MCLGET/mbuf.h)
Index:	sys/h/mbuf.h 4.3BSD FIX

Description:
The macros for addition of page clusters to mbufs were revised in 4.3BSD.
A new macro, MCLGET, is called to add a single page cluster to an mbuf.
If there are no free clusters, the macro calls m_clalloc to attempt
to create a new cluster.  Unfortunately, the MCLGET macro does not run
at high priority, but m_clalloc may only be called from splimp to block
reentrance of the memory allocation routines.  The call to m_clalloc
should be made from MCLALLOC, which does run at high priority. Although
rare, the bug described in this report may cause unexplained crashes or
random failures.

Fix:
In the file /sys/h/mbuf.h, move the test of mclfree and call to m_clalloc
from the MCLGET macro to the MCLALLOC macro, as shown by the following diffs:

*** mbuf.h.old	Thu Sep 11 06:07:29 1986
--- mbuf.h	Thu Sep 11 06:20:07 1986
***************
*** 5,7 ****
   *
!  *	@(#)mbuf.h	7.1 (Berkeley) 6/4/86
   */
--- 5,7 ----
   *
!  *	@(#)mbuf.h	7.3 (Berkeley) 9/11/86
   */
***************
*** 97,98 ****
--- 97,100 ----
  	{ int ms = splimp(); \
+ 	  if (mclfree == 0) \
+ 		(void)m_clalloc((i), MPG_CLUSTERS, M_DONTWAIT); \
  	  if ((m)=mclfree) \
***************
*** 105,108 ****
  	{ struct mbuf *p; \
- 	  if (mclfree == 0) \
- 		(void)m_clalloc(1, MPG_CLUSTERS, M_DONTWAIT); \
  	  MCLALLOC(p, 1); \
--- 107,108 ----




















Mar  6 14:21 1987  net4 Page 1


4.3BSD network bug (#4, icmp_input)
Index:	sys/netinet/ip_icmp.c 4.3BSD FIX

Description:
ICMP Network Mask Replies are sent with the wrong type.

Fix:
*** /nbsd/sys/netinet/ip_icmp.c	Thu Jun  5 00:27:24 1986
--- ip_icmp.c	Tue Jan 13 14:09:37 1987
***************
*** 5,7 ****
   *
!  *	@(#)ip_icmp.c	7.1 (Berkeley) 6/5/86
   */
--- 5,7 ----
   *
!  *	@(#)ip_icmp.c	7.2 (Berkeley) 1/10/87
   */
***************
*** 251,253 ****
  			break;
! 		icp->icmp_type = ICMP_IREQREPLY;
  		icp->icmp_mask = ia->ia_netmask;
--- 251,253 ----
  			break;
! 		icp->icmp_type = ICMP_MASKREPLY;
  		icp->icmp_mask = ia->ia_netmask;




































Mar  6 14:22 1987  net5 Page 1


4.3BSD network bug (#5, icmp_stat)
Index:	sys/netinet/icmp_var.h 4.3BSD FIX

Description:
The system begins to act strangely (e.g., no longer responds to
input ICMP messages) after receiving an ICMP Mask Request.
This is caused by incrementing a counter in an array
with too small a dimension.

Fix:
*** /nbsd/sys/netinet/icmp_var.h	Thu Jun  5 00:24:15 1986
--- icmp_var.h	Tue Jan 13 14:11:10 1987
***************
*** 5,7 ****
   *
!  *	@(#)icmp_var.h	7.1 (Berkeley) 6/5/86
   */
--- 5,7 ----
   *
!  *	@(#)icmp_var.h	7.2 (Berkeley) 1/13/87
   */
***************
*** 17,19 ****
  	int	icps_oldicmp;		/* no error 'cuz old was icmp */
! 	int	icps_outhist[ICMP_IREQREPLY + 1];
  /* statistics related to input messages processed */
--- 17,19 ----
  	int	icps_oldicmp;		/* no error 'cuz old was icmp */
! 	int	icps_outhist[ICMP_MAXTYPE + 1];
  /* statistics related to input messages processed */
***************
*** 24,26 ****
  	int	icps_reflect;		/* number of responses */
! 	int	icps_inhist[ICMP_IREQREPLY + 1];
  };
--- 24,26 ----
  	int	icps_reflect;		/* number of responses */
! 	int	icps_inhist[ICMP_MAXTYPE + 1];
  };
























Mar  6 14:26 1987  net6 Page 1


4.3BSD network bug (#6, in_localaddr)
Index:	sys/netinet/in.c 4.3BSD FIX

Description:
A missing set of parentheses causes large packets to be sent
to non-local destinations.  Default-sized packets should be used
when sending to destinations not on the local network.

Fix:
*** in.c.7.1	Wed Mar  4 23:32:17 1987
--- in.c.7.2	Wed Mar  4 23:31:55 1987
***************
*** 5,7 ****
   *
!  *	@(#)in.c	7.1 (Berkeley) 6/5/86
   */
--- 5,7 ----
   *
!  *	@(#)in.c	7.2 (Berkeley) 11/23/86
   */
***************
*** 157,159 ****
  	for (ia = in_ifaddr; ia; ia = ia->ia_next)
! 		if (net == subnetsarelocal ? ia->ia_net : ia->ia_subnet)
  			return (1);
--- 157,159 ----
  	for (ia = in_ifaddr; ia; ia = ia->ia_next)
! 		if (net == (subnetsarelocal ? ia->ia_net : ia->ia_subnet))
  			return (1);


































Mar  9 12:53 1987  net7 Page 1


4.3BSD network bug (#7, arpresolve)
Index:	sys/netinet/if_ether.c 4.3BSD FIX

Description:
As several types of ethernet boards are unable to receive their own
transmissions, the loopback interface should be used for local packets
even before it is assigned an address.  This allows local traffic
to work normally while setting up interface addresses at boot time;
otherwise, ifconfig may hang when translating names to addresses.

The arpinput routine needs to protect itself from interruption
by ethernet interfaces that interrupt at higher priorities
than the one from which it received input.  This is rare,
but causes strange crashes in the ARP routines.

Fix:
*** if_ether.c.7.1	Wed Mar  4 23:42:36 1987
--- if_ether.c.7.1.1.1	Fri Feb 27 16:07:17 1987
***************
*** 5,7 ****
   *
!  *	@(#)if_ether.c	7.1 (Berkeley) 6/5/86
   */
--- 5,7 ----
   *
!  *	@(#)if_ether.c	7.1.1.1 (Berkeley) 2/27/87
   */
***************
*** 118,119 ****
--- 118,121 ----
  
+ int	useloopback = 1;	/* use loopback interface for local traffic */
+ 
  /*
***************
*** 154,156 ****
  	if (destip->s_addr == ac->ac_ipaddr.s_addr) {
! 		if (loif.if_flags & IFF_UP) {
  			sin.sin_family = AF_INET;
--- 156,158 ----
  	if (destip->s_addr == ac->ac_ipaddr.s_addr) {
! 		if (useloopback) {
  			sin.sin_family = AF_INET;
***************
*** 270,272 ****
  	struct in_addr isaddr, itaddr, myaddr;
! 	int proto, op;
  
--- 272,274 ----
  	struct in_addr isaddr, itaddr, myaddr;
! 	int proto, op, s;
  











Mar  9 12:53 1987  net7 Page 2



***************
*** 297,298 ****
--- 299,301 ----
  	}
+ 	s = splimp();
  	ARPTAB_LOOK(at, isaddr.s_addr);
***************
*** 317,318 ****
--- 320,322 ----
  	}
+ 	splx(s);
  reply:


















































Mar  9 12:53 1987  net8 Page 1


4.3BSD network bug (#8, exrecv)
Index:	sys/vaxif/if_ex.c 4.3BSD FIX

Description:
The ex driver must protect its enqueueing of data from ethernet boards
that interrupt at a higher priority.

Fix:
*** if_ex.c.7.1	Wed Mar  4 23:34:11 1987
--- if_ex.c.7.2	Mon Oct 13 16:57:19 1986
***************
*** 5,7 ****
   *
!  *	@(#)if_ex.c	7.1 (Berkeley) 6/5/86
   */
--- 5,7 ----
   *
!  *	@(#)if_ex.c	7.2 (Berkeley) 10/13/86
   */
***************
*** 29,30 ****
--- 29,31 ----
  #include "ioctl.h"
+ #include "syslog.h"
  #include "errno.h"
***************
*** 492,494 ****
  				xs->xs_if.if_oerrors++;
! 				printf("ex%d: transmit error=%b\n",
  					unit, bp->mb_rply, XMIT_BITS);
--- 493,495 ----
  				xs->xs_if.if_oerrors++;
! 				log(LOG_ERR, "ex%d: transmit error=%b\n",
  					unit, bp->mb_rply, XMIT_BITS);
***************
*** 557,558 ****
--- 558,560 ----
  	register struct ifqueue *inq;
+ 	int s;
  
***************
*** 562,564 ****
  		xs->xs_if.if_ierrors++;
! 		printf("ex%d: receive error=%b\n",
  			unit, bp->mb_rply, RECV_BITS);
--- 564,566 ----
  		xs->xs_if.if_ierrors++;
! 		log(LOG_ERR, "ex%d: receive error=%b\n",
  			unit, bp->mb_rply, RECV_BITS);
***************
*** 631,632 ****
--- 633,635 ----
  
+ 	s = splimp();
  	if (IF_QFULL(inq)) {








Mar  9 12:53 1987  net8 Page 2



***************
*** 634,638 ****
  		m_freem(m);
! 		return;
! 	}
! 	IF_ENQUEUE(inq, m);
  }
--- 637,641 ----
  		m_freem(m);
! 	} else
! 		IF_ENQUEUE(inq, m);
! 	splx(s);
  }
***************
*** 914,916 ****
  #ifdef	DEBUG
! 	printf("ex%d: reset addr %s\n", ui->ui_unit,
  		ether_sprintf(bp->mb_na.na_addrs));
--- 917,919 ----
  #ifdef	DEBUG
! 	log(LOG_DEBUG, "ex%d: reset addr %s\n", ui->ui_unit,
  		ether_sprintf(bp->mb_na.na_addrs));








































Mar  9 12:55 1987  libc1 Page 1


Subject: gethostbyname fails when using virtual circuits
Index: lib/libc/net/res_send.c 4.3BSD

Description:
	Programs that use virtual circuits to connect to the name
	daemon (that is they call `sethostent(1)'), do not properly
	fall back to using /etc/hosts when the name server is not
	running.
Repeat-By:
	This affects only `netstat' and `systat' on the standard
	distribution. Kill the name server and run netstat. Instead
	of printing symbolic names it will print net addresses.
	After installing this fix, it will properly resolve any
	addresses that are listed in /etc/hosts when the name
	server is not running.
Fix:
*** res_send.c.6.13	Wed Mar  4 14:19:56 1987
--- res_send.c.6.14	Wed Mar  4 14:19:35 1987
***************
*** 8,10 ****
  #if defined(LIBC_SCCS) && !defined(lint)
! static char sccsid[] = "@(#)res_send.c	6.13 (Berkeley) 5/7/86";
  #endif LIBC_SCCS and not lint
--- 8,10 ----
  #if defined(LIBC_SCCS) && !defined(lint)
! static char sccsid[] = "@(#)res_send.c	6.14 (Berkeley) 7/2/86";
  #endif LIBC_SCCS and not lint
***************
*** 47,48 ****
--- 47,49 ----
	struct iovec iov[2];
+ 	int terrno = ETIMEDOUT;
  
***************
*** 77,78 ****
--- 78,80 ----
				if (s < 0) {
+ 					terrno = errno;
  #ifdef DEBUG
***************
*** 85,86 ****
--- 87,89 ----
				   sizeof(struct sockaddr)) < 0) {
+ 					terrno = errno;
  #ifdef DEBUG
***************
*** 103,104 ****
--- 106,108 ----
			if (writev(s, iov, 2) != sizeof(len) + buflen) {
+ 				terrno = errno;
  #ifdef DEBUG












Mar  9 12:55 1987  libc1 Page 2



***************
*** 122,123 ****
--- 126,128 ----
			if (n <= 0) {
+ 				terrno = errno;
  #ifdef DEBUG
***************
*** 138,139 ****
--- 143,145 ----
			if (n <= 0) {
+ 				terrno = errno;
  #ifdef DEBUG
***************
*** 262,269 ****
	}
! 	(void) close(s);
! 	s = -1;
! 	if (v_circuit == 0 && gotsomewhere == 0)
! 		errno = ECONNREFUSED;
	else
! 		errno = ETIMEDOUT;
	return (-1);
--- 268,280 ----
	}
! 	if (s >= 0) {
! 		(void) close(s);
! 		s = -1;
! 	}
! 	if (v_circuit == 0)
! 		if (gotsomewhere == 0)
! 			errno = ECONNREFUSED;
! 		else
! 			errno = ETIMEDOUT;
	else
! 		errno = terrno;
	return (-1);


























Mar  9 12:55 1987  libc2 Page 1


Subject: setusershell does not reset correctly
Index:	lib/libc/gen/getusershell.c 4.3BSD FIX

Description:
Calling setusershell does not properly reset to the beginning of
/etc/shells. In addition, comments are not handled properly.

Fix:
*** getusershell.c.5.2	Thu Mar  5 01:39:23 1987
--- getusershell.c.5.4	Thu Mar  5 01:39:34 1987
***************
*** 7,9 ****
  #if defined(LIBC_SCCS) && !defined(lint)
! static char sccsid[] = "@(#)getusershell.c	5.2 (Berkeley) 3/9/86";
  #endif LIBC_SCCS and not lint
--- 7,9 ----
  #if defined(LIBC_SCCS) && !defined(lint)
! static char sccsid[] = "@(#)getusershell.c	5.4 (Berkeley) 7/25/86";
  #endif LIBC_SCCS and not lint
***************
*** 24,27 ****
  
- static int inprogress;
  static char **shells, *strings;
  extern char **initshells();
--- 24,27 ----
  
  static char **shells, *strings;
+ static char **curshell = NULL;
  extern char **initshells();
***************
*** 35,43 ****
  	char *ret;
- 	static char **shells;
  
! 	if (!inprogress)
! 		shells = initshells();
! 	ret = *shells;
! 	if (*shells != NULL)
! 		shells++;
  	return (ret);
--- 35,42 ----
  	char *ret;
  
! 	if (curshell == NULL)
! 		curshell = initshells();
! 	ret = *curshell;
! 	if (ret != NULL)
! 		curshell++;
  	return (ret);













Mar  9 12:55 1987  libc2 Page 2



***************
*** 54,56 ****
  	strings = NULL;
! 	inprogress = 0;
  }
--- 53,55 ----
  	strings = NULL;
! 	curshell = NULL;
  }
***************
*** 60,62 ****
  
! 	shells = initshells();
  }
--- 59,61 ----
  
! 	curshell = initshells();
  }
***************
*** 71,73 ****
  
- 	inprogress = 1;
  	if (shells != NULL)
--- 70,71 ----
***************
*** 98,102 ****
  	while (fgets(cp, MAXPATHLEN + 1, fp) != NULL) {
! 		while (*cp != '/' && *cp != '\0')
  			cp++;
! 		if (*cp == '\0')
  			continue;
--- 96,100 ----
  	while (fgets(cp, MAXPATHLEN + 1, fp) != NULL) {
! 		while (*cp != '#' && *cp != '/' && *cp != '\0')
  			cp++;
! 		if (*cp == '#' || *cp == '\0')
  			continue;























