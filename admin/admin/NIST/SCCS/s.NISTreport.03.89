h53980
s 00001/00001/00073
d D 1.4 89/05/24 14:22:50 sklower 4 3
c revise cover date
e
s 00001/00040/00073
d D 1.3 89/05/24 14:20:45 sklower 3 2
c split report into two quarterly reports
e
s 00038/00007/00075
d D 1.2 89/05/22 09:21:21 karels 2 1
c add dash, range of dates
e
s 00082/00000/00000
d D 1.1 89/05/18 15:10:48 mckusick 1 0
c date and time created 89/05/18 15:10:48 by mckusick
e
u
U
t
T
I 1
.\"	%W%	%E%
.\" *troff -me
.sp 2
.ce 100
\fB\s+2Interim Report on Operating Systems Research
in the DASH and Berkeley UNIX Projects\s-2\fP
.sp
D 2
March 31, 1989
E 2
I 2
D 4
October 1, 1988 \- March 31, 1989
E 4
I 4
January 1, 1989 \- March 31, 1989
E 4
E 2
.sp 2
Susan L. Graham
Domenico Ferrari
David P. Anderson
Marshall Kirk McKusick
Michael J. Karels
Keith Sklower
D 2
Marc Teitelbaum
E 2
.ce 0
.sp 2
.ce
\fB\s+2DASH Project\s0\fP
.pp
D 2
The DASH project was not funded by this grant during the period of
this report.
The funds were applied to a no-cost extension for the Berkeley UNIX Project
during the period January to March 1989.
E 2
I 2
D 3
Since September, 1988 the main research direction of the DASH project
has been integrated multimedia network communication
(i.e., the ability to redirect streams of digital audio/video
between I/O devices, processes, hosts, and permanent storage).
To this end, we designed an IPC abstraction called "channels" which
(unlike datagrams and virtual circuits) has performance,
reliability, and security parameters.
This has spawned three research efforts:
1) the design of a protocol hierarchy that uses channel parameters
to eliminate or optimize protocol functions such as flow control,
checksumming and encryption;
2) the design of an OS kernel that uses channel parameters to optimally
schedule local resources such as CPU time, buffers space, and network
transmission order;
3) the design of algorithms for implementing channels
(channel establishment and packet switching) in large networks.
.pp
The implementation of the DASH kernel has progressed significantly.
The major kernel components (virtual memory, network communication,
multiprocessor deadline scheduling) are now working.
The DASH kernel was ported to the Sequent Symmetry last fall.
E 3
We now have the ability to load files and programs from a UNIX-based server,
and have a DASH shell running.
We have demonstrated and measured two important system capabilities.
First, we illustrate the channel architecture
with demonstration in which two DASH hosts communicate streams of
full-motion video intermixed with other traffic, over a 10 Mbps Ethernet.
The correct video frame rate is maintained
while other communication gracefully degrades.
Second, the DASH VM system provides high-speed data movement
between virtual address spaces using remapping.
A study of its performance has shown that it can move data
at an effective speed of 40 MB/sec on a Sun 3/50,
an order of magnitude faster than Unix or MACH.
E 2
.sp 2
.ce
\fB\s+2Berkeley UNIX Project\s0\fP
.pp
D 3
During this period of time we finished implementing and testing a routing
table lookup algorithm suggested by Van Jacobsen which may greatly speed
up any system acting as a packet switch for CLNP packets.
.pp
We redesigned, implemented and tested a new interface for communicating
routing information between a user level process and the kernel, by
means of a special type of message based socket.
.pp
E 3
We received the Wisconsin implementation of TP4, CLNP, and ESIS, incorporated
them into the Berkeley Kernel revising the interface to TP4 to allow for
arbitrary length network and transport addresses in a single structure,
and provided new and uniform means for communicating record boundaries,
and ancillary data, such as user call data and user disconnect data.
The code now works well enough to establish a connection directly over
802.2-3/CLNP/TP4 between two unlike machines (a microvax and a CCI machine).
.pp
We completed an implementation begun at Wisconsin of encapsulating CLNP
packets in IP.  The encapsulation is documented in RFC1070.
This also has been tested and appears to be working to the same extent
as the TP code.
.pp
D 3
The results of the
additional performance experiments done by
Van Jacobson of the Lawrence Berkeley Laboratory,
and several additional performance improvements 
reported in the last quarter have been
merged into the Berkeley TCP.
These improvements along with
E 3
I 3
The performance improvements for TCP reported last quarter, along with
E 3
the revised networking delivered with the 4.3BSD Tahoe test release
have been extracted from the rest of the system and are now
available as a separate networking release.
Unlike the Tahoe release that is available only to sites with
an AT&T source license, the networking release is available
without any license.
This eased availability means that it can be used by many
companies building embedded systems that cannot afford to
pay UNIX licensing fees for their products.
.pp
We are continuing our participation in the IEEE P1003 standardization
efforts for portable operating systems, with particular attention to
networking.
D 3
We are continuing to convert the Berkeley UNIX system
D 2
to comply with the P1003.1 standard.
E 2
I 2
to comply with the P1003.1 (POSIX) standard.
The POSIX terminal interface and job control mechanism are now
fully operational, and are in daily use on our development system.
E 3
E 2
.pp
We also are participating in the IETF OSI interoperability working group.
.pp
The virtual filesystem interface has been constructed and is now running
on one of our test machines.
An early prototype of the interface is being used
by Rick Macklem at the University of Guelph
as a platform to build a public domain implementation of NFS.
We expect that a fully functional NFS will be available in
our next release.
E 1
