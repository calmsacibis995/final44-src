From sms@WLV.IMSD.CONTEL.COM  Thu Sep 14 01:10:04 1989
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.61/1.37)
	id AA03327; Thu, 14 Sep 89 01:10:04 -0700
Received: from WLV.IMSD.CONTEL.COM by ucbvax.Berkeley.EDU (5.61/1.37)
	id AA06996; Thu, 14 Sep 89 01:12:38 -0700
Received: by WLV.IMSD.CONTEL.COM (5.61/1.25)
	id AA03011; Wed, 13 Sep 89 22:38:14 -0700
Date: Wed, 13 Sep 89 22:38:14 -0700
From: sms@WLV.IMSD.CONTEL.COM (Steven M. Schultz)
Message-Id: <8909140538.AA03011@WLV.IMSD.CONTEL.COM>
Subject: pronet-10 driver is brain-dead
Index: 	sys/pdpif/if_vv.c 2.10BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Description:

	The Pronet-10 driver (pdpif/if_vv.c) distributed with 2.10.1BSD 
	is seriously flawed.  It will not even make it thru the C compiler,
	PLUS the changes to run in supervisor mode were never made AND
	the old 2.9BSD hacks were still present.  Do not even think of
	using this driver.

	Now, for the good news.  An operable version of if_vv.c has
	been successfully ported from 4.3BSD to 2.10.1BSD (THANK YOU
	Rene Nieuwboer reneni@psy.vu.nl for testing and finding the
	4 or 5 small errors/typos i made!).

Repeat-By:
	Just TRY to get the distributed pdpif/if_vv.c thru the compiler!

Fix:
	Replace the pdpif/if_vv.h and pdpif/if_vv.c files with the enclosed
	versions.  

	While i posted an announcement of the availability of these modules
	to the newsgroup, I did NOT include the sources - those are being
	included ONLY here.

#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create:
#	if_vv.h
#	if_vv.c
# This archive created: Wed Sep 13 22:31:02 1989
export PATH; PATH=/bin:/usr/bin:$PATH
if test -f 'if_vv.h'
then
	echo shar: "will not over-write existing file 'if_vv.h'"
else
sed 's/^X//' << \SHAR_EOF > 'if_vv.h'
X/*
X * Copyright (c) 1986 Regents of the University of California.
X * All rights reserved.  The Berkeley software License Agreement
X * specifies the terms and conditions for redistribution.
X *
X *	@(#)if_vv.h	2.0 (2.10.1BSD Berkeley) 8/25/89
X */
X
X/*
X * ECO 176-748 changed the braodcast address from 0 to 0xff, at
X * CTL (p1002) serial number around 150.
X * It was implemented in August, 1982. This is a field-installable ECO,
X * which improves net reliability. If the broadcast address has not been
X * changed, comment out the following line.
X */
X#define	NEW_BROADCAST		/* new chip for broadcast problem */
X
X/*
X * Local network header for proNET Ring
X * This is arbitrated by "jas@proteon"
X * (aka John Shriver, 617-655-3340)
X */
X
Xstruct vv_header {
X	 /* the first two fields are required by the hardware */
X	u_char	vh_dhost;	/* destination address */
X	u_char	vh_shost;	/* source address */
X	/* the next three fields are the local network header */
X	u_char	vh_version;	/* header version */
X	u_char	vh_type;	/* packet type => protocol number */
X	short	vh_info;	/* protocol-specific information */
X};
X
X#define	RING_VERSION	2	/* current version of v2lni header */
X
X/*
X * Packet types (protocol numbers) in proNET protocol header
X * Other types are defined, but are proprietary.
X */
X#define	RING_IP		1
X#define	RING_TRAILER	2	/* offset now in vh_info only */
X#define RING_ARP	3
X#define RING_HDLC	4
X#define RING_VAXDB	5
X#define RING_RINGWAY	6
X#define RING_RINGWAYM	8
X#define	RING_NOVELL	10
X#define RING_PUP	12
X#define RING_XNS	14
X#define	RING_DIAGNOSTICS 15	/* protocol type for testing */
X#define	RING_ECHO	16
X#define	RING_WHOAMI	0xa5	/* insure some bit transitions */
X
X#ifdef NEW_BROADCAST
X#define	VV_BROADCAST	0xff	/* hardware-defined broadcast address */
X#else
X#define	VV_BROADCAST	0x00	/* hardware-defined broadcast address */
X#endif
X
X/*
X * Proteon proNET Hardware definitions
X * register bit definitions
X */
X#define	VV_ENB	01		/* Enable Operation */
X#define	VV_DEN	02		/* Enable DMA */
X#define	VV_HEN	04		/* Host Relay Enable (Rcv) */
X#define	VV_CPB	04		/* Clear Packet Buffer (Xmit) */
X#define	VV_STE	010		/* Self Test Enable (Rcv) */
X#define	VV_UT1	010		/* Unused (Xmit) */
X#define	VV_LPB	020		/* Modem Disable (Rcv) */
X#define	VV_INR	020		/* Initialize Ring (Xmit) */
X#define	VV_RST	040		/* Reset */
X#define	VV_IEN	0100		/* Interrupt Enable */
X#define	VV_RDY	0200		/* Done */
X#define	VV_DPR	0400		/* Data Present (Rcv) */
X#define	VV_RFS	0400		/* Refused (Xmit) */
X#define	VV_NXM	01000		/* Non Existent Memory */
X#define	VV_OVR	02000		/* Overrun */
X#define	VV_ODB	04000		/* Odd Byte (Rcv) */
X#define	VV_UT2	04000		/* Unused (Xmit) */
X#define	VV_LDE	010000		/* Parity on 10 megabit (Rcv), */
X				/* Link Data Error on 80 megabit (Rcv) */
X#define	VV_OPT	010000		/* Output Timeout (Xmit) */
X#define	VV_NOK	020000		/* Ring Not OK */
X#define	VV_BDF	040000		/* Bad Format in Operation */
X#define	VV_NIR	0100000		/* Not in Ring */
X
X#define	VVXERR	(VV_NXM|VV_OVR|VV_OPT|VV_BDF)	/* Xmit errs */
X#define	VVRERR	(VV_NXM|VV_OVR|VV_ODB|VV_BDF|VV_DPR)	/* Rcv errs */
X#define	VVFE	(VV_NXM|VV_OVR)			/* Fatal errors */
X
X#define VV_IBITS \
X"\10\20NIR\17BDF\16NOK\15LDE\14ODB\13OVR\12NXM\11DPR\10RDY\7IEN\6RST\5LPB\4STE\3HEN\2DEN\1ENB"
X
X#define VV_OBITS \
X"\10\20NIR\17BDF\16NOK\15OPT\13OVR\12NXM\11RFS\10RDY\7IEN\6RST\5INR\3HEN\2DEN\1ENB"
X
X/* device registers */
Xstruct vvreg {
X	short	vvicsr;		/* input csr */
X	u_short	vviwc;		/* input word count */
X	u_short	vviba;		/* input addr lo */
X	u_short	vviea;		/* input addr hi */
X	short	vvocsr;		/* output csr */
X	u_short	vvowc;		/* output word count */
X	u_short	vvoba;		/* output addr lo */
X	u_short	vvoea;		/* output addr hi */
X};
X
X#define	VVRETRY	7		/* output retry limit */
X#define VVIDENTSUCC 5		/* number of successes required in self-test */
X#define VVIDENTRETRY 10		/* identify loop attempt limit */
X#define VVTIMEOUT 60		/* seconds before a transmit timeout */
SHAR_EOF
fi
if test -f 'if_vv.c'
then
	echo shar: "will not over-write existing file 'if_vv.c'"
else
sed 's/^X//' << \SHAR_EOF > 'if_vv.c'
X/*
X * Copyright (c) 1986 Regents of the University of California.
X * All rights reserved.  The Berkeley software License Agreement
X * specifies the terms and conditions for redistribution.
X *
X *	@(#)if_vv.c	2.0 (2.10.1BSD Berkeley) 8/25/89
X */
X
X#include "vv.h"
X#if NVV > 0
X
X/*
X * Proteon proNET-10 and proNET-80 token ring driver.
X * The name of this device driver derives from the old MIT
X * name of V2LNI for the proNET hardware, would would abbreviate
X * to "v2", but this won't work right. Thus the name is "vv".
X *
X * This driver is compatible with the proNET 10 meagbit and
X * 80 megabit token ring interfaces (models p1000 and p1080).
X * A unit may be marked as 80 megabit using "flags 1" in the
X * config file.
X *
X * TRAILERS: This driver has a new implementation of trailers that
X * is at least a tolerable neighbor on the ring. The offset is not
X * stored in the protocol type, but instead only in the vh_info
X * field. Also, the vh_info field, and the two shorts before the
X * trailing header, are in network byte order, not VAX byte order.
X *
X * Of course, nothing but BSD UNIX supports trailers on ProNET.
X * If you need interoperability with anything else, turn off
X * trailers using the -trailers option to /etc/ifconfig!
X *
X * HARDWARE COMPATABILITY: This driver prefers that the HSBU (p1001)
X * have a serial number >= 040, which is about March, 1982. Older
X * HSBUs do not carry across 64kbyte boundaries. They can be supported
X * by adding "| UBA_NEED16" to the vs_ifuba.ifu_flags initialization
X * in vvattach().
X *
X * The old warning about use without Wire Centers applies only to CTL
X * (p1002) cards with serial <= 057, which have not received ECO 176-743,
X * which was implemented in March, 1982. Most such CTLs have received
X * this ECO.
X */
X
X#include "param.h"
X#include "../machine/seg.h"
X#include "systm.h"
X#include "mbuf.h"
X#include "buf.h"
X#include "domain.h"
X#include "protosw.h"
X#include "socket.h"
X#include "ioctl.h"
X#include "pdpif/if_vv.h"
X#include "pdpif/if_uba.h"
X#include "errno.h"
X#include "pdpuba/ubavar.h"
X#include "net/if.h"
X#include "net/netisr.h"
X#include "net/route.h"
X
X#ifdef	INET
X#include "netinet/in.h"
X#include "netinet/in_systm.h"
X#include "netinet/in_var.h"
X#include "netinet/ip.h"
X#include "netinet/ip_var.h"
X#endif
X
X/*
X *    maximum transmission unit definition --
X *        you can set VVMTU at anything from 576 to 2024.
X *        1536 is a popular "large" value, because it is a multiple
X *	  of 512, which the trailer scheme likes.
X *        The absolute maximum size is 2024, which is enforced.
X */
X
X#define VVMTU (1536)
X
X#define VVMRU (VVMTU + 16)
X#define VVBUFSIZE (VVMRU + sizeof(struct vv_header))
X#if VVMTU>2024
X#undef VVMTU
X#undef VVMRU
X#undef VVBUFSIZE
X#define VVBUFSIZE (2046)
X#define VVMRU (VVBUFSIZE - sizeof (struct vv_header))
X#define VVMTU (VVMRU - 16)
X#endif
X
X/*
X *   debugging and tracing stuff
X */
Xint	vv_tracehdr = 0;	/* 1 => trace headers (slowly!!) */
X
X#define vvtracehdr  if (vv_tracehdr) vvprt_hdr
X#define vvprintf    if (vs->vs_if.if_flags & IFF_DEBUG) printf
X
X/*
X * externals, types, etc.
X */
Xint	vvprobe(), vvattach(), vvreset(), vvinit();
Xint	vvidentify(), vvstart(), vvxint(), vvwatchdog();
Xint	vvrint(), vvoutput(), vvioctl();
Xstruct	uba_device *vvinfo[NVV];
Xu_short vvstd[] = { 0 };
Xstruct	uba_driver vvdriver =
X	{ vvprobe, 0, vvattach, 0, vvstd, "vv", vvinfo };
X#define	VVUNIT(x)	minor(x)
X
X#define LOOPBACK		/* use loopback for packets meant for us */
X#ifdef	LOOPBACK
Xextern struct ifnet loif;
X#endif
X
X/*
X * Software status of each interface.
X *
X * Each interface is referenced by a network interface structure,
X * vs_if, which the routing code uses to locate the interface.
X * This structure contains the output queue for the interface, its address, ...
X * We also have, for each interface, a UBA interface structure, which
X * contains information about the UNIBUS resources held by the interface:
X * map registers, buffered data paths, etc.  Information is cached in this
X * structure for use by the if_uba.c routines in running the interface
X * efficiently.
X */
Xstruct	vv_softc {
X	struct	ifnet vs_if;		/* network-visible interface */
X	struct	ifuba vs_ifuba;		/* UNIBUS resources */
X	u_short	vs_host;		/* this interface address */
X	short	vs_oactive;		/* is output active */
X	short	vs_is80;		/* is 80 megabit version */
X	short	vs_olen;		/* length of last output */
X	u_short	vs_lastx;		/* address of last packet sent */
X	u_short	vs_lastr;		/* address of last packet received */
X	short	vs_tries;		/* transmit current retry count */
X	short	vs_init;		/* number of ring inits */
X	short	vs_refused;		/* number of packets refused */
X	short	vs_timeouts;		/* number of transmit timeouts */
X	short	vs_otimeout;		/* number of output timeouts */
X	short	vs_ibadf;		/* number of input bad formats */
X	short	vs_parity;		/* number of parity errors on 10 meg, */
X					/* link data errors on 80 meg */
X} vv_softc[NVV];
X
X#define	NOHOST	0xffff			/* illegal host number */
X
Xvvprobe(reg)
X	caddr_t reg;
X{
X#ifdef	notdef
X	register int br, cvec;
X	register struct vvreg *addr;
X
X#ifdef lint
X	br = 0; cvec = br; br = cvec;
X#endif
X	addr = (struct vvreg *)reg;
X	/* reset interface, enable, and wait till dust settles */
X	addr->vvicsr = VV_RST;
X	addr->vvocsr = VV_RST;
X	DELAY(100000L);
X
X	/* generate interrupt by doing 1 word DMA from 0 in uba space!! */
X	addr->vvoba = 0;		/* low 16 bits */
X	addr->vvoea = 0;		/* extended bits */
X	addr->vvowc = -1;		/* for 1 word */
X	addr->vvocsr = VV_IEN | VV_DEN;	/* start the DMA, with interrupt */
X	DELAY(100000L);
X	addr->vvocsr = VV_RST;		/* clear out the CSR */
X	if (cvec && cvec != 0x200)
X		cvec -= 4;		/* backup so vector => receive */
X#endif
X	return(1);
X}
X
X/*
X * Interface exists: make available by filling in network interface
X * record.  System will initialize the interface when it is ready
X * to accept packets.
X */
Xvvattach(ui)
X	struct uba_device *ui;
X{
X	register struct vv_softc *vs;
X
X	vs = &vv_softc[ui->ui_unit];
X	vs->vs_if.if_unit = ui->ui_unit;
X	vs->vs_if.if_name = "vv";
X	vs->vs_if.if_mtu = VVMTU;
X	vs->vs_if.if_flags = IFF_BROADCAST;
X	vs->vs_if.if_init = vvinit;
X	vs->vs_if.if_ioctl = vvioctl;
X	vs->vs_if.if_output = vvoutput;
X	vs->vs_if.if_reset = vvreset;
X	vs->vs_if.if_timer = 0;
X	vs->vs_if.if_watchdog = vvwatchdog;
X	vs->vs_ifuba.ifu_flags = UBA_CANTWAIT | UBA_NEEDBDP;
X
X	/* use flag to determine if this is proNET-80 */
X	vs->vs_is80 = (short)(ui->ui_flags & 01);
X
X#if defined(VAX750)
X	/* don't chew up 750 bdp's */
X	if (cpu == VAX_750 && ui->ui_unit > 0)
X		vs->vs_ifuba.ifu_flags &= ~UBA_NEEDBDP;
X#endif
X	if_attach(&vs->vs_if);
X}
X
X/*
X * Reset of interface after UNIBUS reset.
X * If interface is on specified uba, reset its state.
X */
Xvvreset(unit, uban)
X	int unit, uban;
X{
X	register struct uba_device *ui;
X
X	if (unit >= NVV || (ui = vvinfo[unit]) == 0 || ui->ui_alive == 0 ||
X	    ui->ui_ubanum != uban)
X		return;
X	printf(" vv%d", unit);
X	vvinit(unit);
X}
X
X/*
X * Initialization of interface; clear recorded pending
X * operations, and reinitialize UNIBUS usage.
X */
Xvvinit(unit)
X	int unit;
X{
X	register struct vv_softc *vs;
X	register struct uba_device *ui;
X	register struct vvreg *addr;
X	register int s;
X	ubadr_t ubainfo;
X
X	vs = &vv_softc[unit];
X	ui = vvinfo[unit];
X
X	if (vs->vs_if.if_addrlist == (struct ifaddr *)0)
X		return;
X
X	addr = (struct vvreg *)ui->ui_addr;
X	if (if_ubainit(&vs->vs_ifuba, ui->ui_ubanum,
X	    sizeof (struct vv_header), (int)btoc(VVMTU)) == 0) {
X		printf("vv%d: can't initialize, if_ubainit() failed\n", unit);
X		vs->vs_if.if_flags &= ~IFF_UP;
X		return;
X	}
X
X	/*
X	 * Now that the uba is set up, figure out our address and
X	 * update complete our host address.
X	 */
X	if ((vs->vs_host = vvidentify(unit)) == NOHOST) {
X		vs->vs_if.if_flags &= ~IFF_UP;
X		return;
X	}
X	printf("vv%d: host %u\n", unit, vs->vs_host);
X
X	/*
X	 * Reset the interface, and stay in the ring
X	 */
X	addr->vvocsr = VV_RST;			/* take over output */
X	addr->vvocsr = VV_CPB;			/* clear packet buffer */
X	addr->vvicsr = VV_RST | VV_HEN;		/* take over input, */
X						/* keep relay closed */
X	DELAY(500000L);				/* let contacts settle */
X
X	vs->vs_init = 0;			/* clear counters, etc. */
X	vs->vs_refused = 0;
X	vs->vs_timeouts = 0;
X	vs->vs_otimeout = 0;
X	vs->vs_ibadf = 0;
X	vs->vs_parity = 0;
X	vs->vs_lastx = 256;			/* an invalid address */
X	vs->vs_lastr = 256;			/* an invalid address */
X
X	/*
X	 * Hang a receive and start any
X	 * pending writes by faking a transmit complete.
X	 */
X	s = splimp();
X	ubainfo = vs->vs_ifuba.ifu_r.ifrw_info;
X	addr->vviba = (u_short)ubainfo;
X	addr->vviea = (u_short)(ubainfo >> 16);
X	addr->vviwc = -(VVBUFSIZE) >> 1;
X	addr->vvicsr = VV_IEN | VV_HEN | VV_DEN | VV_ENB;
X	vs->vs_oactive = 1;
X	vs->vs_if.if_flags |= IFF_RUNNING;
X	vvxint(unit);
X	splx(s);
X}
X
X/*
X * Return our host address.
X */
X
Xvvidentify(unit)
X	int unit;
X{
X	register struct vv_softc *vs;
X	register struct uba_device *ui;
X	register struct vvreg *addr;
X	register struct mbuf *m;
X	register struct vv_header *v;
X	register int attempts, waitcount;
X	ubadr_t ubainfo;
X	segm	seg5;
X	u_short	host;
X	u_char	type;
X
X	/*
X	 * Build a multicast message to identify our address
X	 */
X	vs = &vv_softc[unit];
X	ui = vvinfo[unit];
X	addr = (struct vvreg *)ui->ui_addr;
X	attempts = 0;		/* total attempts, including bad msg type */
X	m = m_get(M_DONTWAIT, MT_HEADER);
X	if (m == NULL) {
X		printf("vv%d: can't initialize, m_get() failed\n", unit);
X		return (NOHOST);
X	}
X	m->m_next = 0;
X	m->m_off = MMINOFF;
X	m->m_len = sizeof(struct vv_header);
X	v = mtod(m, struct vv_header *);
X	v->vh_dhost = VV_BROADCAST;	/* multicast destination address */
X	v->vh_shost = 0;		/* will be overwritten with ours */
X	v->vh_version = RING_VERSION;
X	v->vh_type = RING_WHOAMI;
X	v->vh_info = 0;
X	/* map xmit message into uba */
X	vs->vs_olen =  if_wubaput(&vs->vs_ifuba, m);
X	/*
X	 * Reset interface, establish Digital Loopback Mode, and
X	 * send the multicast (to myself) with Input Copy enabled.
X	 */
Xretry:
X	ubainfo = vs->vs_ifuba.ifu_r.ifrw_info;
X	addr->vvicsr = VV_RST;
X	addr->vviba = (u_short) ubainfo;
X	addr->vviea = (u_short) (ubainfo >> 16);
X	addr->vviwc = -(sizeof (struct vv_header) + VVMTU) >> 1;
X	addr->vvicsr = VV_STE | VV_DEN | VV_ENB | VV_LPB;
X
X	/* let flag timers fire so ring will initialize */
X	DELAY(2000000L);		/* about 2 SECONDS on a 780!! */
X
X	addr->vvocsr = VV_RST | VV_CPB;	/* clear packet buffer */
X	ubainfo = vs->vs_ifuba.ifu_w.ifrw_info;
X	addr->vvoba = (u_short) ubainfo;
X	addr->vvoea = (u_short) (ubainfo >> 16);
X	addr->vvowc = -((vs->vs_olen + 1) >> 1);
X	addr->vvocsr = VV_CPB | VV_DEN | VV_INR | VV_ENB;
X	/*
X	 * Wait for receive side to finish.
X	 * Extract source address (which will be our own),
X	 * and post to interface structure.
X	 */
X	DELAY(10000L);
X	for (waitcount = 0; (addr->vvicsr & VV_RDY) == 0; waitcount++) {
X		if (waitcount < 10) {
X			DELAY(1000L);
X			continue;
X		}
X		if (attempts++ < VVIDENTRETRY)
X			goto retry;
X		break;
X	}
X	/* deallocate mbuf used for send packet */
X	if (vs->vs_ifuba.ifu_xtofree) {
X		m_freem(vs->vs_ifuba.ifu_xtofree);
X		vs->vs_ifuba.ifu_xtofree = 0;
X	}
X	if (attempts >= VVIDENTRETRY) {
X		printf("vv%d: can't initialize after %d tries, icsr = %b\n",
X		    unit, VVIDENTRETRY, 0xffff&(addr->vvicsr), VV_IBITS);
X		return (NOHOST);
X	}
X	m = if_rubaget(&vs->vs_ifuba, sizeof(struct vv_header), 0, &vs->vs_if);
X	if (m != NULL)
X		m_freem(m);
X	/*
X	 * Check message type before we believe the source host address
X	 */
X	saveseg5(seg5);
X	mapseg5(vs->vs_ifuba.ifu_r.ifrw_click, 077406);
X	v = (struct vv_header *) SEG5;
X	type = v->vh_type;
X	host = (u_short)v->vh_shost;
X	restorseg5(seg5);
X	if (type != (u_char)RING_WHOAMI)
X		goto retry;
X	return(host);
X}
X
X/*
X * Start or restart output on interface.
X * If interface is active, this is a retransmit, so just
X * restuff registers and go.
X * If interface is not already active, get another datagram
X * to send off of the interface queue, and map it to the interface
X * before starting the output.
X */
Xvvstart(dev)
X	dev_t dev;
X{
X	register struct uba_device *ui;
X	register struct vv_softc *vs;
X	register struct vvreg *addr;
X	register struct mbuf *m;
X	register int unit, dest, s;
X	ubadr_t ubainfo;
X	segm save5;
X
X	unit = VVUNIT(dev);
X	ui = vvinfo[unit];
X	vs = &vv_softc[unit];
X	if (vs->vs_oactive)
X		goto restart;
X	/*
X	 * Not already active: dequeue another request
X	 * and map it to the UNIBUS.  If no more requests,
X	 * just return.
X	 */
X	s = splimp();
X	IF_DEQUEUE(&vs->vs_if.if_snd, m);
X	splx(s);
X	if (m == NULL) {
X		vs->vs_oactive = 0;
X		return;
X	}
X	dest = mtod(m, struct vv_header *)->vh_dhost;
X	vs->vs_olen = if_wubaput(&vs->vs_ifuba, m);
X	vs->vs_lastx = dest;
Xrestart:
X	/*
X	 * Have request mapped to UNIBUS for transmission.
X	 * Purge any stale data from this BDP, and start the output.
X	 *
X	 * Make sure this packet will fit in the interface.
X	 */
X	if (vs->vs_olen > VVBUFSIZE) {
X		printf("vv%d vs_olen: %d > VVBUFSIZE\n", unit, vs->vs_olen);
X		panic("vvdriver vs_olen botch");
X	}
X
X	vs->vs_if.if_timer = VVTIMEOUT;
X	vs->vs_oactive = 1;
X
X	/* ship it */
X	addr = (struct vvreg *)ui->ui_addr;
X	ubainfo = vs->vs_ifuba.ifu_w.ifrw_info;
X	addr->vvoba = (u_short) ubainfo;
X	addr->vvoea = (u_short) (ubainfo >> 16);
X	addr->vvowc = -((vs->vs_olen + 1) >> 1);
X	addr->vvowc = -((vs->vs_olen + 1) >> 1); /* extra byte is garbage */
X	if (addr->vvocsr & VV_NOK)
X		vs->vs_init++;			/* count ring inits */
X	addr->vvocsr = VV_IEN | VV_CPB | VV_DEN | VV_INR | VV_ENB;
X}
X
X/*
X * proNET transmit interrupt
X * Start another output if more data to send.
X */
Xvvxint(unit)
X	int unit;
X{
X	register struct uba_device *ui;
X	register struct vv_softc *vs;
X	register struct vvreg *addr;
X	register int oc;
X
X	ui = vvinfo[unit];
X	vs = &vv_softc[unit];
X	vs->vs_if.if_timer = 0;
X	addr = (struct vvreg *)ui->ui_addr;
X	oc = 0xffff & (addr->vvocsr);
X	if (vs->vs_oactive == 0) {
X		vvprintf("vv%d: stray interrupt vvocsr = %b\n", unit,
X		    oc, VV_OBITS);
X		return;
X	}
X
X	/*
X	 * we retransmit on soft error
X	 * TODO: sort retransmits to end of queue if possible!
X	 */
X	if (oc & (VV_OPT | VV_RFS)) {
X		if (vs->vs_tries++ < VVRETRY) {
X			if (oc & VV_OPT)
X				vs->vs_otimeout++;
X			if (oc & VV_RFS) {
X				vs->vs_if.if_collisions++;
X				vs->vs_refused++;
X			}
X			vvstart(unit);		/* restart this message */
X			return;
X		}
X	}
X	vs->vs_if.if_opackets++;
X	vs->vs_oactive = 0;
X	vs->vs_tries = 0;
X
X	if (oc & VVXERR) {
X		vs->vs_if.if_oerrors++;
X		vvprintf("vv%d: error vvocsr = %b\n", unit, 0xffff & oc,
X		    VV_OBITS);
X	}
X	if (vs->vs_ifuba.ifu_xtofree) {
X		m_freem(vs->vs_ifuba.ifu_xtofree);
X		vs->vs_ifuba.ifu_xtofree = 0;
X	}
X	vvstart(unit);
X}
X
X/*
X * Transmit watchdog timer routine.
X * This routine gets called when we lose a transmit interrupt.
X * The best we can do is try to restart output.
X */
Xvvwatchdog(unit)
X	int unit;
X{
X	register struct vv_softc *vs;
X	register int s;
X
X	vs = &vv_softc[unit];
X	vvprintf("vv%d: lost a transmit interrupt.\n", unit);
X	vs->vs_timeouts++;
X	s = splimp();
X	vvstart(unit);
X	splx(s);
X}
X
X/*
X * proNET interface receiver interrupt.
X * If input error just drop packet.
X * Otherwise purge input buffered data path and examine
X * packet to determine type.  If can't determine length
X * from type, then have to drop packet.  Otherwise decapsulate
X * packet based on type and pass to type specific higher-level
X * input routine.
X */
Xvvrint(unit)
X	int unit;
X{
X	register struct vv_softc *vs;
X	register struct vvreg *addr;
X	register struct vv_header *vv;
X	register struct ifqueue *inq;
X	register struct mbuf *m;
X	int len, off, s;
X	ubadr_t ubainfo;
X	segm save5;
X	short resid;
X	u_short	type, shost;
X
X	saveseg5(save5);
X	vs = &vv_softc[unit];
X	vs->vs_if.if_ipackets++;
X	addr = (struct vvreg *)vvinfo[unit]->ui_addr;
X	if (addr->vvicsr & VVRERR) {
X		vvprintf("vv%d: receive error, vvicsr = %b\n", unit,
X		    0xffff&(addr->vvicsr), VV_IBITS);
X		if (addr->vvicsr & VV_BDF)
X			vs->vs_ibadf++;
X		goto dropit;
X	}
X
X	/*
X	 * parity errors?
X	 */
X	if (addr->vvicsr & VV_LDE) {
X		/* we don't have to clear it because the receive command */
X		/* writes 0 to parity bit */
X		vs->vs_parity++;
X
X		/*
X		 * only on 10 megabit proNET is VV_LDE an end-to-end parity
X		 * bit. On 80 megabit, it returns to the intended use of
X		 * node-to-node parity. End-to-end parity errors on 80 megabit
X		 * give VV_BDF.
X		 */
X		if (vs->vs_is80 == 0)
X		    goto dropit;
X	}
X
X	/*
X	 * Get packet length from residual word count
X	 *
X	 * Compute header offset if trailer protocol
X	 *
X	 * Pull packet off interface.  Off is nonzero if packet
X	 * has trailing header; if_rubaget will then force this header
X	 * information to be at the front.  The vh_info field
X	 * carries the offset to the trailer data in trailer
X	 * format packets.
X	 */
X	mapseg5(vs->vs_ifuba.ifu_r.ifrw_click, (btoc(VVMRU) << 8) | RW);
X	vv = (struct vv_header *) SEG5;
X	vvtracehdr("vi", vv);
X	resid = addr->vviwc & 01777;		/* only low 10 bits valid */
X	if (resid)
X		resid |= 0176000;		/* high 6 bits are undefined */
X	len = ((VVBUFSIZE >> 1) + resid) << 1;
X	len -= sizeof(struct vv_header);
X
X	if ((addr->vvicsr & VV_DPR) || len > VVMRU || len <= 0) {
X		vvprintf("vv%d: len too long or short, \
Xlen = %d, vvicsr = %b\n",
X			unit, len, 0xffff&(addr->vvicsr), VV_IBITS);
X		goto dropit;
X	}
X
X	/* check the protocol header version */
X	if (vv->vh_version != RING_VERSION) {
X		vvprintf("vv%d: bad protocol header version %d\n",
X		    unit, vv->vh_version & 0xff);
X		goto dropit;
X	}
X
X#define	vvdataaddr(vv, off, type)	((type)(((caddr_t)((vv)+1)+(off))))
X	if (vv->vh_type == RING_TRAILER ) {
X		off = ntohs((u_short)vv->vh_info);
X		if (off > VVMTU) {
X			vvprintf("vv%d: off > VVMTU, off = %d, vvicsr = %b\n",
X				    unit, off, 0xffff&(addr->vvicsr), VV_IBITS);
X			goto dropit;
X		}
X		vv->vh_type = ntohs(*vvdataaddr(vv, off, u_short *));
X		resid = ntohs(*(vvdataaddr(vv, off+sizeof(u_short), u_short *)));
X		if (off + resid > len) {
X			vvprintf("vv%d: trailer packet too short\n", unit);
X			vvprintf("vv%d: off = %d, resid = %d, vvicsr = %b\n",
X				    unit, off, resid,
X				    0xffff&(addr->vvicsr), VV_IBITS);
X			goto dropit;
X		}
X		len = off + resid;
X	} else
X		off = 0;
X
X	if (len == 0) {
X		vvprintf("vv%d: len is zero, vvicsr = %b\n", unit,
X			    0xffff&(addr->vvicsr), VV_IBITS);
X		goto dropit;
X	}
X/*
X * have to restore the mapping before manipulating mbufs because
X * there may be mbufs in SEG5.  save the 'type' and 'shost' then
X * restore the mapping.
X*/
X	type = vv->vh_type;
X	shost = vv->vh_shost;
X	restorseg5(save5);
X	m = if_rubaget(&vs->vs_ifuba, len, off, &vs->vs_if);
X	if (m == NULL) {
X		vvprintf("vv%d: if_rubaget() failed, vvicsr = %b\n", unit,
X			    0xffff&(addr->vvicsr), VV_IBITS);
X		goto dropit;
X	}
X	if (off) {
X		struct ifnet *ifp;
X
X		ifp = *(mtod(m, struct ifnet **));
X		m->m_off += 2 * sizeof (u_short);
X		m->m_len -= 2 * sizeof (u_short);
X		*(mtod(m, struct ifnet **)) = ifp;
X	}
X
X	/* Keep track of source address of this packet */
X	vs->vs_lastr = shost;
X
X	/*
X	 * Demultiplex on packet type
X	 */
X	switch (type) {
X
X#ifdef INET
X	case RING_IP:
X		schednetisr(NETISR_IP);
X		inq = &ipintrq;
X		break;
X#endif
X	default:
X		vvprintf("vv%d: unknown pkt type 0x%x\n", unit, type);
X		m_freem(m);
X		goto setup;
X	}
X	s = splimp();
X	if (IF_QFULL(inq)) {
X		IF_DROP(inq);
X		m_freem(m);
X	} else
X		IF_ENQUEUE(inq, m);
X
X	splx(s);
X	/*
X	 * Reset for the next packet.
X	 */
Xsetup:
X	restorseg5(save5);
X	ubainfo = vs->vs_ifuba.ifu_r.ifrw_info;
X	addr->vviba = (u_short) ubainfo;
X	addr->vviea = (u_short) (ubainfo >> 16);
X	addr->vviwc = -(VVBUFSIZE) >> 1;
X	addr->vvicsr = VV_HEN | VV_IEN | VV_DEN | VV_ENB;
X	return;
X
X	/*
X	 * Drop packet on floor -- count them!!
X	 */
Xdropit:
X	vs->vs_if.if_ierrors++;
X	goto setup;
X}
X
X/*
X * proNET output routine.
X * Encapsulate a packet of type family for the local net.
X * Use trailer local net encapsulation if enough data in first
X * packet leaves a multiple of 512 bytes of data in remainder.
X */
Xvvoutput(ifp, m0, dst)
X	struct ifnet *ifp;
X	struct mbuf *m0;
X	struct sockaddr *dst;
X{
X	register struct mbuf *m;
X	register struct vv_header *vv;
X	register int off;
X	register int unit;
X	register struct vvreg *addr;
X	register struct vv_softc *vs;
X	register int s;
X	int type, error;
X	u_long dest;
X	segm save5;
X
X	saveseg5(save5);
X	m = m0;
X	unit = ifp->if_unit;
X	addr = (struct vvreg *)vvinfo[unit]->ui_addr;
X	vs = &vv_softc[unit];
X
X	/*
X	 * Check to see if the input side has wedged.
X	 *
X	 * We are lower than device ipl when we enter this routine,
X	 * so if the interface is ready with an input packet then
X	 * an input interrupt must have slipped through the cracks.
X	 *
X	 * Avoid the race with an input interrupt by watching to see
X	 * if any packets come in.
X	 */
X	s = vs->vs_if.if_ipackets;
X	if (addr->vvicsr & VV_RDY && s == vs->vs_if.if_ipackets) {
X		vvprintf("vv%d: lost a receive interrupt, icsr = %b\n",
X			    unit, 0xffff&(addr->vvicsr), VV_IBITS);
X		s = splimp();
X		vvrint(unit);
X		splx(s);
X	}
X
X	switch (dst->sa_family) {
X
X#ifdef INET
X	case AF_INET:
X		if (in_broadcast(((struct sockaddr_in *)dst)->sin_addr))
X			dest = VV_BROADCAST;
X		else
X			dest = in_lnaof(((struct sockaddr_in *)dst)->sin_addr);
X/* Rene Nieuwboer reneni@psy.vu.nl suggests a 'dest &= 0xff;' at this point */
X/*   dest is contrained in the 'if' a few lines down, i don't see why the & */
X#ifdef	LOOPBACK
X		if (dest == vs->vs_host && (loif.if_flags & IFF_UP))
X			return (looutput(&loif, m0, dst));
X#endif	LOOPBACK
X		if (dest >= 0x100) {
X			error = EPERM;
X			goto bad;
X		}
X		off = ntohs((u_short)mtod(m, struct ip *)->ip_len) - m->m_len;
X		/*
X		 * Trailerize, if the configuration allows it.
X		 * TODO: Need per host negotiation.
X		 */
X		if ((ifp->if_flags & IFF_NOTRAILERS) == 0)
X		if (off > 0 && (off & 0x1ff) == 0 &&
X		    m->m_off >= MMINOFF + 2 * sizeof (u_short)) {
X			type = RING_TRAILER;
X			m->m_off -= 2 * sizeof (u_short);
X			m->m_len += 2 * sizeof (u_short);
X			*mtod(m, u_short *) = htons((short)RING_IP);
X			*(mtod(m, u_short *) + 1) = htons((u_short)m->m_len);
X			goto gottrailertype;
X		}
X		type = RING_IP;
X		off = 0;
X		goto gottype;
X#endif
X	default:
X		printf("vv%d: can't handle af%d\n", unit, dst->sa_family);
X		error = EAFNOSUPPORT;
X		goto bad;
X	}
X
Xgottrailertype:
X	/*
X	 * Packet to be sent as trailer: move first packet
X	 * (control information) to end of chain.
X	 */
X	while (m->m_next)
X		m = m->m_next;
X	m->m_next = m0;
X	m = m0->m_next;
X	m0->m_next = 0;
X	m0 = m;
Xgottype:
X	/*
X	 * Add local net header.  If no space in first mbuf,
X	 * allocate another.
X	 */
X	if (m->m_off > MMAXOFF ||
X	    MMINOFF + sizeof (struct vv_header) > m->m_off) {
X		m = m_get(M_DONTWAIT, MT_HEADER);
X		if (m == NULL) {
X			error = ENOBUFS;
X			goto bad;
X		}
X		m->m_next = m0;
X		m->m_off = MMINOFF;
X		m->m_len = sizeof (struct vv_header);
X	} else {
X		m->m_off -= sizeof (struct vv_header);
X		m->m_len += sizeof (struct vv_header);
X	}
X	vv = mtod(m, struct vv_header *);
X	vv->vh_shost = vs->vs_host;
X	vv->vh_dhost = dest;
X	vv->vh_version = RING_VERSION;
X	vv->vh_type = type;
X	vv->vh_info = htons((u_short)off);
X	vvtracehdr("vo", vv);
X
X	/*
X	 * Queue message on interface, and start output if interface
X	 * not yet active.
X	 */
X	s = splimp();
X	if (IF_QFULL(&ifp->if_snd)) {
X		IF_DROP(&ifp->if_snd);
X		error = ENOBUFS;
X		goto qfull;
X	}
X	IF_ENQUEUE(&ifp->if_snd, m);
X	if (vs->vs_oactive == 0)
X		vvstart(unit);
X	splx(s);
X	return (0);
Xqfull:
X	m0 = m;
X	splx(s);
Xbad:
X	m_freem(m0);
X	return(error);
X}
X
X/*
X * Process an ioctl request.
X */
Xvvioctl(ifp, cmd, data)
X	register struct ifnet *ifp;
X	u_int cmd;
X	caddr_t data;
X{
X	struct ifaddr *ifa = (struct ifaddr *) data;
X	int s = splimp(), error = 0;
X
X	switch (cmd) {
X
X	case SIOCSIFADDR:
X		ifp->if_flags |= IFF_UP;
X		if ((ifp->if_flags & IFF_RUNNING) == 0)
X			vvinit(ifp->if_unit);
X		/*
X		 * Did self-test succeed?
X		 */
X		if ((ifp->if_flags & IFF_UP) == 0)
X			error = ENETDOWN;
X                /*
X                 * Attempt to check agreement of protocol address
X                 * and board address.
X                 */
X		switch (ifa->ifa_addr.sa_family) {
X                case AF_INET:
X/* Rene Nieuwboer reneni@psy.vu.nl suggests a '& 0xff;' below */
X			if ((u_short)(in_lnaof(IA_SIN(ifa)->sin_addr)) !=
X			    vv_softc[ifp->if_unit].vs_host)
X				error = EADDRNOTAVAIL;
X			break;
X		}
X		break;
X
X	default:
X		error = EINVAL;
X	}
X	splx(s);
X	return (error);
X}
X
X/*
X * vvprt_hdr(s, v) print the local net header in "v"
X *	with title is "s"
X */
Xvvprt_hdr(s, v)
X	char *s;
X	register struct vv_header *v;
X{
X	printf("%s: dsvti: 0x%x 0x%x 0x%x 0x%x 0x%x\n",
X		s,
X		0xff & (int)(v->vh_dhost), 0xff & (int)(v->vh_shost),
X		0xff & (int)(v->vh_version), 0xff & (int)(v->vh_type),
X		0xffff & (int)(v->vh_info));
X}
X#endif NVV
SHAR_EOF
fi
exit 0
#	End of shell archive
