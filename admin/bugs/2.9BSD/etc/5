From satz@sri-tsc  Mon May  7 01:43:01 1984
Date:  7 May 1984 0116-PDT (Monday)
From: Greg Satz <Satz@SRI-TSC>
Subject: 2.9 fsck bug with symbolic links
Subject: fsck will screw up symbolic links after a crash
Index:	etc/fsck.c 2.9BSD

Description:
	After a crash, and fsck has run, all symbolic links will point
	to garbage instead of the linked-to filename. This results in
	possibly hung processes if they try to access that inode.

	Fsck thinks symbolic links are special and frees its data
	block. Unallocated and dups usually result.

Repeat-By:
	Assuming you have some symbolic links on your file system, wait
	for your system to crash and run fsck. Do an ls -l on a symbolic
	link and watch your process hang or see that it points to random
	data instead of a file name.

Fix:
	Teach fsck to not treat symbolic links as special files but as
	normal data files. The fix is to remove the LNK from the SPECIAL
	definition (this should probably be true for QUOT).  The
	correct code segment follows:

#define MPB	((dp->di_mode & IFMT) == IFMPB)
#ifdef	UCB_SYMLINKS
#define	LNK	((dp->di_mode & IFMT) == IFLNK)
#endif
#ifdef	IFQUOT
#define	QUOT	((dp->di_mode & IFQUOT) == IFQUOT)
#define	SPECIAL	(BLK || CHR || MPC || MPB || QUOT)
#else
#define	SPECIAL	(BLK || CHR || MPC || MPB)
#endif	UCB_QUOTAS
