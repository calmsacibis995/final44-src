Return-Path: <mullen@nrl-css>
Date: Thu, 12 May 83 00:03:11 EDT
From: Preston Mullen <mullen@NRL-CSS>
Subject: c compiler evaluates (int)(i%j) as ((int)i % j) where i is unsigned

Index: bin/cc 4.1BSD

Description:
	If i is declared as "unsigned" then the compiler evaluates
	(int)(i % 19) as ((int)i) % 19.  This is at best
	counterintuitive and at worst incorrect if i is such that
	((int)i) < 0.  Of course, "19" is not a magic value --
	I imagine any int will do.

	I find it hard to believe that the vague caveats in "The
	C Programming Language" about order of expression evaluation
	can justify this completely counterintuitive interpretation.
	The cast operator (unsigned) is not distributive over % and
	should not be treated as if it were.
Repeat-By:
	Look at the results of and code generated for the following
	program.

	/* test program to demonstrate the problem */
	main() { unsigned int x; int r;

		x = 2269620549;
		printf("x\t\t%u\toctal %o\n",x,x);
		printf("x%%19\t\t%u\n",x%19);
		printf("(int)(x%%19)\t%d\n",(int)(x%19));
		printf("(int)x\t\t%d\toctal %o\n",(int)x,(int)x);
		printf("((int)x)%%19\t%d\n",((int)x)%19);
		r = (int)(x%19);
		printf("\nAfter r=(int)(x%%19);\n");
		printf("r\t\t%d\n",r);
		r = x % 19;
		printf("\nAfter r=x%%19;\n");
		printf("r\t\t%d\n",r);
		x %= 19;
		printf("\nAfter x%%=19;\n");
		printf("x\t\t%u\n",x);
		printf("(int)x\t\t%d\n",(int)x);
	}

(end of message)
