Return-Path: <allegra!lento!rdg>
Date: Tue, 19 Jul 83 20:19:39 PDT
From: allegra!lento!rdg

Date:	July 19, 1983
From:	allegra!rdg
Subject: deficiency in Berkeley system makefile
Index:	sys/makefile 4.1BSD

Description:
	the berkeley operating system is distributed with a makefile
	sys/conf/makefile which is used to create site dependent versions
	of the vmunix operating system.  this makefile includes an entry
	"depend" which executes a sequence of commands to construct
	a file dependency list.  that sequence of commands is not
	capable of properly handling the situation in which some
	#include statements are surrounded by conditional #if or
	#ifdef statements.  as a result, all files mentioned in
	#include statements are placed into the dependency list
	even though they may never be included because the
	surrounding conditional is NOT true given the current
	definitions.  

	For example, it is useful in some of our device drivers
	to say

	#ifdef ETHERNET
	#include <../h/ethernet.h>
	#endif

	or 

	#ifdef BADBLOCKS
	#include <../h/badblock.h>
	#endif

	or

	#ifdef BERK4.1C
	#include <../uba/reg.h>
	#else
	#include <../h/reg.h>
	#endif

	However, regardless of the CFLAGS which will be used
	to compile these .c files, all of the mentioned include
	files will be placed in the dependency list.

	This causes great grief because some of the .h files,
	those which indeed WON'T be included because the conditions
	are not true are NOT present on the system.  the make
	for the system then cannot proceed.  this causes a great
	hardship.

Repeat-By:
	Create the following dummy device file and call it out
	in the configuration file.

	#ifdef NOTDEFINED
	#include <../h/nonexistant.h>
	#endif

	NOTDEFINED should not be defined.   nonexistant.h should
	not exist.

	config this configuration file.
	go to the target system directory and
	"make depend"
	then "make"
	the make will abort because nonexistant.h does not exist.
Fix:
	a much more sophisticated shell script or program tool
	will be required to analyze the #if and #ifdef statements
	without expanding the #include statements.  it is suggested
	that cpp be modified to provide a "process #if #ifdef"
	mode which produces a processed output version which retains
	the original #include files.  notice that the #include statements
	will still have to be walked down so that other #defines will
	be set, however, the included text would not become part
	of the output file.


