Return-Path: <cbosgd!mark>
Date: 23 Aug 83 14:26:59 EDT (Tue)
From: cbosgd!mark (Mark Horton)
Subject: select

Index:	sys/select 4.1BSD

Description:
	The select system call, when used as a timer, returns too soon.
Repeat-By:
	Here is a program that illustrates the problem.  Run with
		a.out 500000
#include <time.h>

main(argc, argv)
char **argv;
{
	int del;
	struct timeval tv;
	struct timezone tz;
	struct timeval d;

	del = atoi(argv[1]);
	printf("delay %d ms\n", del);
	d.tv_sec = 0;
	d.tv_usec = del;

	for (;;) {
		gettimeofday(&tv, &tz);
		printf("%ld	%ld\n", tv.tv_sec, tv.tv_usec);
		fflush(stdout);
		select(20, 0, 0, 0, &d);
	}
}

On our 4.1c system, the first select pauses for the requested half second,
and most subsequent selects take 1/100th of a second.  (I suspected the
kernel might be clobbering my d structure, but re-initializing it each
time doesn't help.)

The manual leads me to believe that select will wait at least the
requested amount of time, and not much longer, thus making select
suitable for use as a timer.  However, it is not directly usable.

I suggest that either you fix this problem, or if this is difficult
or there isn't time, document the property in the BUGS section of
the manual page.  It IS possible to write a loop using gettimeofday
to call select until enough time has elapsed, but the need for this
isn't apparent from reading the manual.  (Note that, if you're going
to be consistently off in when you return from select, it's much
better to return too soon than too late - too soon allows such a loop
to be written, too late and you're in the same boat as with sleep.)

	Mark Horton
