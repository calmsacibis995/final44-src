Return-Path: <mazama!stew@su-shasta.arpa>
Date: Tue, 29 Jan 85 10:07:00 pst
From: mazama!stew (Stewart Levin) <mazama!stew@su-shasta.arpa>
Subject: cc file.c |& error -v -t ".c" removed file.c!
Index: ucb/error 4.1BSD
Apparently-To: Shasta!4bsd-bugs@BERKELEY

Description:
	Yesterday morning I ran a user written utility shell
	to compile a C program, bringing up the source under vi
	(with error -v) in case of error.  This time "error"
	could not find the source file and opened a new zero
	length version.  I was lucky that a system backup had
	been run on the filesystem just minutes before this
	disaster.
Repeat-By:
	Tough to do.  First, we're running 4.1 error under 4.2
	(with interrupt handling suitably modified) because 4.2
	error isn't honoring the -t flag.  Second, the source
	file I lost is about 800 lines long and includes another
	few hundred lines of locally written stuff.  Copies are
	available to serious requestors.  The bug is repeatable.
Fix:
	By experimentation I found that the bug occured when I
	piped the compiler messages into error:

		cc -c file.c |& error -v -t ".c"

	but did not occur when the compiler messages were stored
	in a file:

		cc -c file.c >& errlog ; error -v -t ".c" < errlog

	Thus the problem is one of unserialized access to
	file.c by either cc and error.  Later with a different
	version of file.c the unpiped sequence managed to clobber it.
	Examining the source to errortouch.c I find that 4.1 error
	massages the text from the source file and places it in
	a temp file.  The source file is then unlinked, the temp
	file linked to the source file name, and the temp file
	unlinked.  It might be a race condition.
