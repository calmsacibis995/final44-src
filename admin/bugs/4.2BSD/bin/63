Return-Path: <dlw@ucbopal.CC>
Date: Tue, 22 Nov 83 15:44:20 pst
From: dlw@ucbopal.CC (David L. Wasley)
Subject: extremely slow /bin/ls

Index:	bin/ls.c	4.2BSD	[Fix]
	/usr/src/ucb/lastcomm.c	4.2	[Fix]

Description:
	The name lookup algorithm is horribly slow for UIDs > 2047.
	It essentially reverts to rescanning the passwd file.

Repeat-By:
	Cd to the parent directory of a group of users who's UIDs
	are predominantly > 2047. Do 'ls -lg' and wait ...
	For example: A directory with 56 entries took
		11.0u 3.6s 1:18 18% 22+86k 34+7io 14pf+0w
	to list with the distributed /bin/ls. With the improved
	version (see below) it took
		1.2u 1.3s 0:12 21% 20+71k 5+4io 2pf+0w
	Roughly a factor of 6 !!

Fix:
	In rev 4.20 of /usr/src/bin/ls.c, replace lines 587-$
	with the following. The getname() section should be
	used also in /usr/src/ucb/lastcomm.c
	/usr/src/bin/ps.c already uses this algorithm.
	Wouldn't it be nice if this was in libc.a ??
	-----
#include <pwd.h>
#include <grp.h>
#include <utmp.h>

struct	utmp utmp;

#define NUID	2048	/* must not be a multiple of 5 */
#define NGID	301	/*   ''   */
#define	NMAX	(sizeof (utmp.ut_name))


struct nametable {
	char	nt_name[NMAX+1];
	int	nt_id;
};
struct nametable	unames[NUID];
struct nametable	gnames[NGID];


struct nametable *
findslot (id, tbl, len)
	unsigned short	id;
	struct nametable *tbl;
	int		len;
{
	register struct nametable	*nt, *nt_start;

	/*
	 * find the id or an empty slot.
	 * return NULL if neither found.
	 */

	nt = nt_start = tbl + (id % (len - 20));
	while (nt->nt_name[0] && nt->nt_id != id)
	{
		if ((nt += 5) >= &tbl[len])
			nt -= len;
		if (nt == nt_start)
			return((struct nametable *)NULL);
	}
	return(nt);
}

char *
getname(uid)
	unsigned short	uid;
{
	register struct passwd		*pw;
	static int			init = 0;
	struct passwd			*getpwent();
	register struct nametable	*n;

	/*
	 * find uid in hashed table; add it if not found.
	 * return pointer to name.
	 */

	if ((n = findslot(uid, unames, NUID)) == NULL)
		return((char *)NULL);

	if (n->nt_name[0])	/* occupied? */
		return(n->nt_name);

	switch (init)
	{
		case 0:
			setpwent();
			init = 1;
			/* intentional fall-thru */
		case 1:
			while (pw = getpwent())
			{
				if (pw->pw_uid < 0)
					continue;
				n = findslot(pw->pw_uid, unames, NUID);
				if (n == NULL)
				{
					endpwent();
					init = 2;
					return((char *)NULL);
				}
				if (n->nt_name[0])
					continue;	/* duplicate, not uid */
				strncpy(n->nt_name, pw->pw_name, NMAX);
				n->nt_id = pw->pw_uid;
				if (pw->pw_uid == uid)
					return (n->nt_name);
			}
			endpwent();
			init = 2;
			/* intentional fall-thru */
		case 2:
			return ((char *)NULL);
	}
}

char *
getgroup (gid)
	unsigned short	gid;
{
	register struct group	*gr;
	static int	init = 0;
	struct group	*getgrent();
	register struct nametable	*n;

	/*
	 * find gid in hashed table; add it if not found.
	 * return pointer to name.
	 */

	if ((n = findslot(gid, gnames, NGID)) == NULL)
		return((char *)NULL);

	if (n->nt_name[0])	/* occupied? */
		return(n->nt_name);

	switch (init)
	{
		case 0:
			setgrent();
			init = 1;
			/* intentional fall-thru */
		case 1:
			while (gr = getgrent())
			{
				if (gr->gr_gid < 0)
					continue;
				n = findslot(gr->gr_gid, gnames, NGID);
				if (n == NULL)
				{
					endgrent();
					init = 2;
					return((char *)NULL);
				}
				if (n->nt_name[0])
					continue;	/* duplicate, not gid */
				strncpy(n->nt_name, gr->gr_name, NMAX);
				n->nt_id = gr->gr_gid;
				if (gr->gr_gid == gid)
					return (n->nt_name);
			}
			endgrent();
			init = 2;
			/* intentional fall-thru */
		case 2:
			return ((char *)NULL);
	}
}
