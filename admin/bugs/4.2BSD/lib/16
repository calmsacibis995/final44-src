Return-Path: <donn@utah-cs>
Date: Mon, 17 Sep 84 19:50:11 mdt
From: donn@utah-cs (Donn Seeley)
To: 4bsd-bugs@BERKELEY
Subject: Bug in ffs() library routine?
Index:	lib/libc/vax/gen/ffs.s 4.2BSD

Description:
	The documentation for ffs() says it returns -1 if 0 is passed
	as an argument, but in fact it returns 0.

Repeat-By:
	Compile the following program:

	----------------------------------------------------------------
	main()
	{
		register int	i, j;

		for ( i = -1; i < 32; ++i ) {
			j = (i < 0 ? 0 : 1 << i);
			printf( "%#010x : %d\n", j, ffs( j ) );
		}
	}
	----------------------------------------------------------------

	When run it prints:

	----------------------------------------------------------------
	0000000000 : 0
	0x00000001 : 1
	0x00000002 : 2
	0x00000004 : 3
	0x00000008 : 4
	0x00000010 : 5
	0x00000020 : 6
	0x00000040 : 7
	...
	----------------------------------------------------------------

	Notice the misfeature of printf() that prevents zero operands
	from being converted the same way as other operands with "%#x"...
	What is the point of that?

Fix:
	It's pretty clear to me that the documentation is wrong.  The
	following trivial change in man3/ffs.3 would make it correspond
	properly with the actual function return values:

	----------------------------------------------------------------
	< starting at 1.  A return value of \-1 indicates the
	---
	> starting at 1.  A return value of 0 indicates the
	----------------------------------------------------------------

	The Sun documentation fixed one problem ('starting at 1' now
	reads 'starting at 1 from the right') but the '-1' is still
	there (and is wrong for the Sun, too, from what I can tell).

	If the function is wrong, I'd be very surprised,

Donn Seeley    University of Utah CS Dept    donn@utah-cs.arpa
40 46' 6"N 111 50' 34"W    (801) 581-5668    decvax!utah-cs!donn
