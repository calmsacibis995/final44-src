Return-Path: <amd!nsc!chongo>
Date: Sat, 22 Sep 84 21:38:37 pdt
From: amd!nsc!chongo (Landon C. Noll)
Subject: A better fix for crypt(3)

Subject: Better fix of the DES crypt(3), plus routines to alter the E table
Index:	lib/libc/gen/crypt.c 4.2BSD

Description:
	Encryption/Decryption via the encrypt(3)/setkey(3) system does
	not work.  The reason for this problem is that the E table
	is not setup prior to use.  Worse, crypt(3) loads the E table
	with the standard values and then perturbs the E table.  Calling
	crypt(3) between usage of encrypt(3) changes the E table.
Repeat-By:
	The following program with  fix  undefined will show the error
	with the standard crypt.c.  When you have applied the bug fix
	and installed the new crypt.c in libc.a, recompile with -Dfix.
--------------------------cut here for crypttest.c-----------------------------
/*
 * play with DES encryption
 *
 * usage:
 *	crypttest key block
 *
 * adopted from a program by: ihnp4!ihnet!tjr
 *
 * NOTE: when the fix is made to the crypt(3) routines, define fix and
 *	 recompile.
 */

#include <stdio.h>

main(argc,argv)
	int argc;
	char *argv[];
{
	register i;			/* index */
	char *crypt();
	char block[65];			/* block to encrypt */
	char block2[65];		/* copy of block */
	char key[64];			/* key to encrypt by */

	/* arg check */
	if(argc != 3)
		fprintf(stderr,"usage: %s key text\n",argv[0]);
	
	/* convert key to a binary bit per byte */
	for( i=1; i<64; ++i) {
		/* make the extra bits zero */
		if ( ! argv[1][i-1] ) {
			for ( ; i<64; ++i ) {
				key[i] = 0;
			}
			break;
		} else if ( argv[1][i-1] == '0' ) {
			key[i] = 0;
		} else {
			key[i] = 1;
		}
	}

	/* convert block to a binary bit per byte */
	for( i=1; i<64; ++i) {
		/* make the extra bits zero */
		if ( ! argv[2][i-1] ) {
			for ( ; i<64; ++i ) {
				block[i] = 0;
				block2[i] = 0;
			}
			break;
		} else if ( argv[2][i-1] == '0' ) {
			block[i] = 0;
			block2[i] = 0;
		} else {
			block[i] = 1;
			block2[i] = 1;
		}
	}

	/* set our key */
	setkey(key);
#ifdef fix
	load_etable(0);		/* preload the standard E table */
#endif fix

	/* show what we start with */
#ifdef fix
	printf("We will encrypt and decrypt back to the original\n\n");
#else
	printf("In this test, we shall encrypt/decrypt with encrypt(3).\n");
	printf("Note that we dont get the original back!\n\n");
#endif fix
	prt("original: ",block);

	/* encrypt it */
	encrypt(block,0);
	prt("encrypted: ",block);

	/* decrypt */
	encrypt(block,1);
	prt("original: ",block);

	/* encrypt it again */
	putchar('\n');
#ifdef fix
	printf("\nUsing crypt(3) does not change things\n\n");
#else
	printf("\nNext we will use crypt(3) and reload our key.  You will\n");
	printf("observe that crypt(3) disturbs encrypt(3)\n\n");
#endif fix
	prt("original:  ",block2);
	encrypt(block2,0);
	prt("encrypted: ",block2);

	/* now we use crypt and reset the key afterwards */
	crypt(block,"aA");
	setkey(key);

	/* decrypt */
	encrypt(block2,1);
	prt("original:  ",block2);
}

prt(s,block)
	char *s;
	char block[];
{
	int i;

	fputs(s,stdout);
	for(i=1; i<64; ++i)
		putchar(block[i]+'0');
	putchar('\n');
}
--------------------------end of crypttest.c-----------------------------
Fix:
	Previous bug fixes have had setkey(3) preload the E table.  This
	fix does not allow one to laod a non-standard E table as crypt(3)
	does but rather forces one to use the standard E table.

	The fix is to allow one to load the E table via the function
	load_etable(3).  read_etable(3) allows one to save the E table
	state and restore to later.  crypt(3) has been changed to do
	just that.

	In a few places, the bstring(3) routines have been used in place
	of for loops.

	Below you will find a new copy of crypt.c.  Below that
	is the new man page for crypt.
-------------------------cut here for /usr/src/lib/libc/gen/crypt.c------------
/* @(#)crypt.c	4.1 (Berkeley) 12/21/80 - MODIFIED */
/*
 * This program implements the
 * Proposed Federal Information Processing
 *  Data Encryption Standard.
 * See Federal Register, March 17, 1975 (40FR12134)
 */

/*
 * Initial permutation,
 */
static	char	IP[] = {
	58,50,42,34,26,18,10, 2,
	60,52,44,36,28,20,12, 4,
	62,54,46,38,30,22,14, 6,
	64,56,48,40,32,24,16, 8,
	57,49,41,33,25,17, 9, 1,
	59,51,43,35,27,19,11, 3,
	61,53,45,37,29,21,13, 5,
	63,55,47,39,31,23,15, 7,
};

/*
 * Final permutation, FP = IP^(-1)
 */
static	char	FP[] = {
	40, 8,48,16,56,24,64,32,
	39, 7,47,15,55,23,63,31,
	38, 6,46,14,54,22,62,30,
	37, 5,45,13,53,21,61,29,
	36, 4,44,12,52,20,60,28,
	35, 3,43,11,51,19,59,27,
	34, 2,42,10,50,18,58,26,
	33, 1,41, 9,49,17,57,25,
};

/*
 * Permuted-choice 1 from the key bits
 * to yield C and D.
 * Note that bits 8,16... are left out:
 * They are intended for a parity check.
 */
static	char	PC1_C[] = {
	57,49,41,33,25,17, 9,
	 1,58,50,42,34,26,18,
	10, 2,59,51,43,35,27,
	19,11, 3,60,52,44,36,
};

static	char	PC1_D[] = {
	63,55,47,39,31,23,15,
	 7,62,54,46,38,30,22,
	14, 6,61,53,45,37,29,
	21,13, 5,28,20,12, 4,
};

/*
 * Sequence of shifts used for the key schedule.
*/
static	char	shifts[] = {
	1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1,
};

/*
 * Permuted-choice 2, to pick out the bits from
 * the CD array that generate the key schedule.
 */
static	char	PC2_C[] = {
	14,17,11,24, 1, 5,
	 3,28,15, 6,21,10,
	23,19,12, 4,26, 8,
	16, 7,27,20,13, 2,
};

static	char	PC2_D[] = {
	41,52,31,37,47,55,
	30,40,51,45,33,48,
	44,49,39,56,34,53,
	46,42,50,36,29,32,
};

/*
 * The C and D arrays used to calculate the key schedule.
 */

static	char	C[28];
static	char	D[28];
/*
 * The key schedule.
 * Generated from the key.
 */
static	char	KS[16][48];

/*
 * Set up the key schedule from the key.
 */

setkey(key)
char *key;
{
	register i, j, k;
	int t;

	/*
	 * First, generate C and D by permuting
	 * the key.  The low order bit of each
	 * 8-bit char is not used, so C and D are only 28
	 * bits apiece.
	 */
	for (i=0; i<28; i++) {
		C[i] = key[PC1_C[i]-1];
		D[i] = key[PC1_D[i]-1];
	}
	/*
	 * To generate Ki, rotate C and D according
	 * to schedule and pick up a permutation
	 * using PC2.
	 */
	for (i=0; i<16; i++) {
		/*
		 * rotate.
		 */
		for (k=0; k<shifts[i]; k++) {
			t = C[0];
			for (j=0; j<28-1; j++)
				C[j] = C[j+1];
			C[27] = t;
			t = D[0];
			for (j=0; j<28-1; j++)
				D[j] = D[j+1];
			D[27] = t;
		}
		/*
		 * get Ki. Note C and D are concatenated.
		 */
		for (j=0; j<24; j++) {
			KS[i][j] = C[PC2_C[j]-1];
			KS[i][j+24] = D[PC2_D[j]-28-1];
		}
	}
}

/*
 * The E bit-selection table.
 */
static	char	E[48];
static	char	e[] = {
	32, 1, 2, 3, 4, 5,
	 4, 5, 6, 7, 8, 9,
	 8, 9,10,11,12,13,
	12,13,14,15,16,17,
	16,17,18,19,20,21,
	20,21,22,23,24,25,
	24,25,26,27,28,29,
	28,29,30,31,32, 1,
};

/*
 * The 8 selection functions.
 * For some reason, they give a 0-origin
 * index, unlike everything else.
 */
static	char	S[8][64] = {
	14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
	 0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
	 4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
	15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13,

	15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
	 3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
	 0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
	13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9,

	10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
	13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
	13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
	 1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12,

	 7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
	13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
	10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
	 3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14,

	 2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
	14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
	 4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
	11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3,

	12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
	10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
	 9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
	 4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13,

	 4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
	13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
	 1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
	 6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12,

	13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
	 1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
	 7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
	 2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11,
};

/*
 * P is a permutation on the selected combination
 * of the current L and key.
 */
static	char	P[] = {
	16, 7,20,21,
	29,12,28,17,
	 1,15,23,26,
	 5,18,31,10,
	 2, 8,24,14,
	32,27, 3, 9,
	19,13,30, 6,
	22,11, 4,25,
};

/*
 * The current block, divided into 2 halves.
 */
static	char	L[32], R[32];
static	char	tempL[32];
static	char	f[32];

/*
 * The combination of the key and the input, before selection.
 */
static	char	preS[48];

/*
 * The payoff: encrypt a block.
 */

encrypt(block, edflag)
char *block;
{
	register i, ii;
	register t, j, k;

	/*
	 * First, permute the bits in the input
	 */
	for (j=0; j<64; j++)
		L[j] = block[IP[j]-1];
	/*
	 * Perform an encryption operation 16 times.
	 */
	for (ii=0; ii<16; ii++) {
		/*
		 * Set direction
		 */
		if (edflag)
			i = 15-ii;
		else
			i = ii;
		/*
		 * Save the R array,
		 * which will be the new L.
		 */
		bcopy( R, tempL, 32 );
		/*
		 * Expand R to 48 bits using the E selector;
		 * exclusive-or with the current key bits.
		 */
		for (j=0; j<48; j++)
			preS[j] = R[E[j]-1] ^ KS[i][j];
		/*
		 * The pre-select bits are now considered
		 * in 8 groups of 6 bits each.
		 * The 8 selection functions map these
		 * 6-bit quantities into 4-bit quantities
		 * and the results permuted
		 * to make an f(R, K).
		 * The indexing into the selection functions
		 * is peculiar; it could be simplified by
		 * rewriting the tables.
		 */
		for (j=0; j<8; j++) {
			t = 6*j;
			k = S[j][(preS[t+0]<<5)+
				(preS[t+1]<<3)+
				(preS[t+2]<<2)+
				(preS[t+3]<<1)+
				(preS[t+4]<<0)+
				(preS[t+5]<<4)];
			t = 4*j;
			f[t+0] = (k>>3)&01;
			f[t+1] = (k>>2)&01;
			f[t+2] = (k>>1)&01;
			f[t+3] = (k>>0)&01;
		}
		/*
		 * The new R is L ^ f(R, K).
		 * The f here has to be permuted first, though.
		 */
		for (j=0; j<32; j++)
			R[j] = L[j] ^ f[P[j]-1];
		/*
		 * Finally, the new L (the original R)
		 * is copied back.
		 */
		for (j=0; j<32; j++)
			L[j] = tempL[j];
	}
	/*
	 * The output L and R are reversed.
	 */
	for (j=0; j<32; j++) {
		t = L[j];
		L[j] = R[j];
		R[j] = t;
	}
	/*
	 * The final output
	 * gets the inverse permutation of the very original.
	 */
	for (j=0; j<64; j++)
		block[j] = L[FP[j]-1];
}

char *
crypt(pw,salt)
char *pw;
char *salt;
{
	register i, j, c;
	int temp;
	static char block[66], iobuf[16];
	char old_etable[48];			/* previous E table state */
	char *read_etable();
	
	bzero( block, 66 );			/* clear the initial key */
	for(i=0; (c= *pw) && i<64; pw++){
		for(j=0; j<7; j++, i++)
			block[i] = (c>>(6-j)) & 01;
		i++;
	}
	
	setkey(block);
	
	bzero( block, 66 );		/* clear block - we will encrypt 0 */

	(void)read_etable( old_etable ); /* save the previous E table */
	load_etable( 0 );		 /* load the default E table */

	for(i=0;i<2;i++){
		c = *salt++;
		iobuf[i] = c;
		if(c>'Z') c -= 6;
		if(c>'9') c -= 7;
		c -= '.';
		for(j=0;j<6;j++){
			if((c>>j) & 01){
				temp = E[6*i+j];
				E[6*i+j] = E[6*i+j+24];
				E[6*i+j+24] = temp;
				}
			}
		}
	
	for(i=0; i<25; i++)
		encrypt(block,0);
	
	load_etable( old_etable );	/* reload the old E table state */

	for(i=0; i<11; i++){
		c = 0;
		for(j=0; j<6; j++){
			c <<= 1;
			c |= block[6*i+j];
			}
		c += '.';
		if(c>'9') c += 7;
		if(c>'Z') c += 6;
		iobuf[i+2] = c;
	}
	iobuf[i+2] = 0;
	if(iobuf[1]==0)
		iobuf[1] = iobuf[0];
	return(iobuf);
}

/*
 * load_etable - load the E table
 *
 * if etable is 0 then load_etable loads the standard etable.  if etable
 * is non-zero, load_etable copies 48 bytes from that location into
 * the E table.
 */
load_etable( etable )
	char *etable;	/* pointer to 48 E table entries */
{
	if ( etable ) {
		bcopy( etable, E, 48 );	/* copy non-std E table */
	} else {
		bcopy( e, E, 48 );	/* cpy standard E table */
	}
}

/*
 * read_etable - read the E table
 *
 * read_etable returns a pointer to the current E table.  if the parameter
 * etable is non-zero, etable_read copies the E table into that location.
 * this option is useful in saveing the previous E table state.
 *
 * the etable is altered each time the crypt routine is called thus making
 * it useless for the encrypt routine.  this routine allows one to
 * read the E table to standard or non-standard routines.
 */
char *
read_etable( etable )
	char *etable;	/* pointer to 48 etable entries */
{
	register i;	/* index */

	if ( etable ) {
		bcopy( E, etable, 48 );
	}
	return( E );
}
------------------------end of /usr/src/lib/libc/gen/crypt.c------------
------------------------cut here for /usr/man/man3/crypt.3--------------
.TH CRYPT 3  "25 February 1983 - MODIFIED"
.SH NAME
crypt, setkey, encrypt, load_etable, read_etable \- DES encryption
.SH SYNOPSIS
.nf
.B char *crypt(key, salt)
.B char *key, *salt;
.PP
.B setkey(key)
.B char *key;
.PP
.B encrypt(block, edflag)
.B char *block;
.PP
.B load_etable(etable)
.B char *etable;
.PP
.B char *read_etable(etable)
.B char *etable;
.fi
.SH DESCRIPTION
.I Crypt
is the password encryption routine.
It is based on the NBS Data Encryption Standard, with
variations intended (among other things) to frustrate use of hardware
implementations of the DES for key search.
.PP
The first argument to
.I crypt
is normally a user's typed password.
The second is a 2-character string chosen from the
set [a-zA-Z0-9./].
The
.I salt
string is used to perturb the DES algorithm in one of 4096
different ways, after which the password
is used as the key to encrypt repeatedly a constant string.
The returned value points to the encrypted password,
in the same alphabet as the salt.
The first two characters are the salt itself.
.PP
.I Setkey, encrypt, read_etable
and
.I load_etable
provide access to the actual DES algorithm.
The argument of
.I setkey
is a character array of length 64 containing only the characters
with numerical value 0 and 1.
If this string is divided into groups of 8,
the low-order value in each group is ignored,
leading to a 56-bit key which is set into the machine.
.PP
The E table controls the permutation of the text inside the encrypt routine.
For example,
.I crypt
uses a 2 character salt to scramble the E table and thus 
hamper brute force attacks designed for a standard DES system.
The functions
.I read_etable
and
.I load_etable
allow one
to adjust the E table.
.PP
The 
.I etable
argument to
.I load_etable
if non-zero points to an array of 48 characters containing values
which are loaded into the E table.
The integers 1 to 32 must be found in the table at least once to
prevent loss of information during encryption/decryption.  If
.I load_etable
is given a value of zero, the E table will be loaded with the
standard default values of:
.PP
.RS
.nf
static char E[] = {
	32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9,
	 8, 9,10,11,12,13,12,13,14,15,16,17,
	16,17,18,19,20,21,20,21,22,23,24,25,
	24,25,26,27,28,29,28,29,30,31,32, 1
};
.fi
.RE
.PP
.I Read_etable
returns a pointer to the E table static area of 48 characters.
If the pointer
.I etable
argument to
.I read_etable
is non-zero, the E table will be copied to that location.
.PP
The argument to the
.I encrypt
entry is likewise a character array of length 64
containing 0's and 1's.
The argument array is modified in place
to a similar array
representing the bits of the argument after having been
subjected to the DES algorithm using the key set by
.I setkey.
Prior to using
.I encrypt
one must use
.I setkey
and
.I load_etable.
If one is planning to use several forms of the DES at one time, then
is a good idea to save the state of the E table by using
.I read_etable
prior to loading the E table, and then restoring the E table
when the encryption/decryption is finished.
If
.I edflag
is 0, the argument is encrypted;
if non-zero,
it is decrypted.
.SH "SEE ALSO"
crypt(1), passwd(1), passwd(5), login(1), getpass(3)
.SH WARNING
The justification for the internal structure of NBS Data Encryption
Standard has not been been fully stated publicly.
It is not publicly known if a trapdoor to the standard DES,
or to variations of DES provided by these routines, exists.
These routines will provide a much higher degree of security than
is available with
.I crypt(1).
.SH BUGS
The return value
points to static data whose content is overwritten
by each call.
------------------------end of /usr/man/man3/crypt.3--------------
