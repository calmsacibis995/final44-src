Return-Path: <sjc@s1-c>
Date: 23 Sep 1983 18:56:16-PDT
From: sjc@s1-c
Subject: Bug in 4bsd Pascal
Index: lib 4.2BSD

Just for your information, the following program illustrates a bug in
the 4.1BSD Pascal compiler whose source header says "@(#)forop.c 1.9
6/1/81".

(The program is also an example of a poor programming practice, of
course, but it does not cause the compiler to produce any error or warning
message):

   program bug(output);

      var
	 j: integer;

      procedure foo(var i: integer);
	 begin
	 for i := 1 to 10 do
	    writeln(output, 'i=', i);
	 i := 111;
	 end (* foo *);

      begin
      foo(j);
      end.

The program produces incorrect results:

   i=1577632256
   i=-799143742
   i=-1362076152
   i= 145674334
   i=1846062800
   i=-1636955986
   i=-1365348856
   i= 212770414
   i=1343008414
   i=-800060242

The code from the compilation appears below.--Steve

	.stabs	"bug.p",0x30,0,0x1,0
	.data
	.align	2
	.comm	_j,4
	.text
	.stabs	"j",0x30,0,0x6,0x4
	.text
	.align	1
	.globl	___foo
	.globl	_foo
_foo:
	.stabs	"foo",0x30,0,0x8,0x7
	.word	L3
	jbr	L5
L4:
	moval	_UNWIND,0(fp)
	moval	__disply+16,-4(fp)
	movq	__disply+16,-12(fp)
	movq	ap,__disply+16
	movl	$1,r6
	movl	$10,-20(fp)
	cmpl	r6,-20(fp)
	jgtr	L7
L8:
	movl	r6,*4(ap)
	pushl	$_output
	calls	$1,_UNIT
	movl	r0,-16(fp)
	.data
L9:
	.byte	0151,075
	.byte	0
	.text
	pushl	-16(fp)
	movl	(sp)+,r1
	movl	12(r1),r0
	pushl	r0
	pushl	$1
	pushl	$2
	pushl	$L9
	calls	$4,_fwrite
	.data
L10:
	.byte	045,061,060,0104
	.byte	0
	.text
	pushl	(r6)
	pushl	$L10
	pushl	-16(fp)
	movl	(sp)+,r1
	movl	12(r1),r0
	pushl	r0
	calls	$3,_fprintf
	pushl	-16(fp)
	movl	(sp)+,r1
	movl	12(r1),r0
	pushl	r0
	cvtbl	$10,-(sp)
	sobgeq	*4(sp),1f
	calls	$2,__flsbuf
	jbr	2f
1:
	popr	$0x3
	movb	r0,*4(r1)
	incl	4(r1)
2:
	cmpl	r6,-20(fp)
	jgeq	L7
	addl3	$1,r6,r0
	movl	r0,r6
	jbr	L8
L7:
	cvtbl	$111,*4(ap)
	movq	-12(fp),__disply+16
	ret
	.set	L3, 0x40
L5:
	subl2	$LF2,sp
	.set	LF2,20
	jbr	L4
___foo:
	.word	L3
	pushl	8(ap)
	movl	(sp),r0
	ashl	$3,4(r0),r1
	movc3	r1,__disply+8,8(r0)[r1]
	movl	(sp)+,r0
	ashl	$3,4(r0),r1
	movc3	r1,8(r0),__disply+8
	jbr	L5
	.text
	.align	1
	.globl	_main
_main:
	.word	0
	calls	$0,_PCSTART
	movl	4(ap),__argc
	movl	8(ap),__argv
	calls	$0,_program
	calls	$0,_PCEXIT
	.text
	.align	1
	.globl	_program
_program:
	.word	L11
	jbr	L13
L12:
	moval	_UNWIND,0(fp)
	moval	__disply+8,-4(fp)
	movq	__disply+8,-12(fp)
	movq	ap,__disply+8
	pushl	$_j
	calls	$1,_foo
	movq	-12(fp),__disply+8
	ret
	.set	L11, 0x0
L13:
	subl2	$LF1,sp
	.set	LF1,16
	jbr	L12
