Return-Path: <mckusick@ucbmonet>
Date: Mon, 1 Oct 84 12:37:23 PDT
From: mckusick@ucbmonet (Kirk Mckusick)
Subject: Suboptimal strategy in fragment allocation
Index: 	sys/sys/ufs_alloc.c 4.2BSD

Description:
	There are two bugs in checking to see if a fragment can be
	incresed in size. The first bug always causes the check to fail,
	forcing a new fragment to be allocated. This failure causes a
	minor performance degredation, but is otherwise harmless. The
	second bug could potentially cause a system panic, but never
	occurs because of the first bug.
Repeat-By:
	Though generating a panic is possible in theory, constructing 
	an example is difficult.
Fix:
*** /sys/sys/ufs_alloc.c	Fri Sep 28 12:54:05 1984
--- /sys/sys/ufs_alloc.c	Fri Sep 28 15:52:17 1984
***************
*** 417,424
  	fs = ip->i_fs;
! 	if (fs->fs_cs(fs, cg).cs_nffree < nsize - osize)
  		return (NULL);
  	frags = numfrags(fs, nsize);
! 	bbase = fragoff(fs, bprev);
  	if (bbase > (bprev + frags - 1) % fs->fs_frag) {
  		/* cannot extend across a block boundry */
  		return (NULL);

--- 417,424 -----
  	fs = ip->i_fs;
! 	if (fs->fs_cs(fs, cg).cs_nffree < numfrags(fs, nsize - osize))
  		return (NULL);
  	frags = numfrags(fs, nsize);
! 	bbase = bprev % fs->fs_frag;
  	if (bbase > (bprev + frags - 1) % fs->fs_frag) {
  		/* cannot extend across a block boundry */
  		return (NULL);
