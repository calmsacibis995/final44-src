Date:  2 Mar 1983 0838-PST (Wednesday)
From: prindle@nadc
Subject: u.u_offset bug?
Index: sys 4.2BSD

Dear *bugs* experts:

We have a character special device which transfers *huge* amounts of data (dma).
After doing I/O for a long time, fp->f_un.f_offset (and thus u.u_offset) goes
negative (by going too positive) and we get an Invalid Argument error.  The
following block of code appears (once for read, once for write) in
/sys/sys/rdwri.c:

if (u.u_offset < 0 && ((ip->i_mode&IFMT) != IFCHR || mem_no != major(dev))) {
	u.u_error = EINVAL;
	return;
}

Was this intended to bypass the error (negative offset) for the *mem* devices
"and" for character special devices.  If so, it certainly is not doing so (the
|| would have to be &&).  If not, how is one supposed to cope with character
special devices which have no theoretical limit on the amount of data which may
be transferred without an intervening lseek?

My temporary workaround is to have user do periodic lseeks to reset the
offset.  While effective, this is not aestheticly acceptable.

I would like to change the || to &&, but await your wisdom on the true intent
of this statement (it is somewhat confusing, since the *mem* devices are all
character special anyway).  I am hoping this is a *bug*!  Could you please
shed some light?

					Thanks,
					Frank Prindle (prindle@nadc)
					Naval Air Development Center
					Warminster, Pa.
					215-441-3145
