Return-Path: <dlw@UCBTOPAZ.CC>
From: dlw@UCBTOPAZ.CC (David L. Wasley)
Date: 4 Aug 83 09:20:40 PDT (Thu)
Subject: interrupting open()
Index: sys 4.2BSD

There appears to be a bug whereby an interrupted open() will eat
a file descriptor. This happens in 4.1a (Topaz) and 4.2 (Monet).
It is a little complex to force, but ... if an open() is hung on
a tty dev, and is interrupted, it returns -1. That is fine, but
the file descriptor returned on the next open() will be 1 higher
that it would have been before the interrupt. After N interrupts
you get an error return saying "too many files open". The following
program demonstrates the problem. Put it in the background and
kill -INT it a number of times.
	David Wasley
----
#include <stdio.h>
#include <signal.h>

sigint()
{
	int	fd;
	signal(SIGINT, sigint);
	fprintf(stderr, "interrupt");
	if ((fd = open("/dev/null", 0)) >= 0)
	{
		fprintf(stderr, " (null fd=%d)", fd);
		close(fd);
	}
	fputc('\n', stderr);
}

char	*dev = "/dev/ttyp7";

main()
{
	int fd;
	signal(SIGINT, sigint);
	for(;;)
	{
		if ((fd = open(dev, 0)) >= 0)
		{
			fprintf(stderr, "fd=%d\n");
			close(fd);
			sleep(10);	/* otherwise ... */
		}
		else
			perror(dev);
	}
}
