Return-Path: <dlw@ucbopal.CC>
Date: Tue, 31 Jan 84 21:13:49 pst
From: dlw@ucbopal.CC (David L. Wasley)
To: 4bsd-bugs@BERKELEY
Subject: /usr/ucb/more

Index:	ucb/more/more.c	4.2	Fix

Description:
	'more' has a number of known bugs, among them:
	1) shell escapes, when stdin is a pipe, get the pipe on fd:0,
	2) underline mode is not turned off at the end of lines,
	3) the prompt is not fully erased on terminals with "standout mode
		glitch",
	4) underlining does not take advantage of white space for terminals
		with "underline mode glitch".

Repeat-by:
	Try 'man diff' on a Televideo 925. Note extra spaces around
	underlined words. Several screens down is a line that ends
	with an underlined word: note the underlining extend to the
	right edge of the screen. Try 'more /usr/dict/words'. Note
	that the prompt is not fully erased if the next word is 13
	characters. Etc ...

Fix:
	Below is a 'diff -c5 ...' showing the fixes for version 4.16
	of more.c (The version on our 4.2bsd system).

						David Wasley
						U.C.Berkeley
--------
*** /usr/src/ucb/more/more.c	Sun Sep 25 18:05:29 1983
--- more.c	Tue Jan 31 18:10:02 1984
***************
*** 80,89
  char		cursorhome[40];	/* contains cursor movement to home */
  char		*EodClr;	/* clear rest of screen */
  char		*tgetstr();
  int		Mcol = 80;	/* number of columns */
  int		Wrap = 1;	/* set if automargins */
  long		fseek();
  char		*getenv();
  struct {
      long chrctr, line;
  } context, screen_start;

--- 80,92 -----
  char		cursorhome[40];	/* contains cursor movement to home */
  char		*EodClr;	/* clear rest of screen */
  char		*tgetstr();
  int		Mcol = 80;	/* number of columns */
  int		Wrap = 1;	/* set if automargins */
+ int		soglitch;	/* terminal has standout mode glitch */
+ int		ulglitch;	/* terminal has underline mode glitch */
+ int		pstate = 0;	/* current UL state */
  long		fseek();
  char		*getenv();
  struct {
      long chrctr, line;
  } context, screen_start;
***************
*** 406,420
  	    /* is this needed?
  	     * if (clreol)
  	     *	cleareol();	/* must clear again in case we wrapped *
  	     */
  	    if (nchars < Mcol || !fold_opt)
! 		putchar('\n');
  	    if (nchars == STOP)
  		break;
  	    num_lines--;
  	}
  	fflush(stdout);
  	if ((c = Getc(f)) == EOF)
  	{
  	    if (clreol)
  		clreos ();

--- 409,427 -----
  	    /* is this needed?
  	     * if (clreol)
  	     *	cleareol();	/* must clear again in case we wrapped *
  	     */
  	    if (nchars < Mcol || !fold_opt)
! 		prbuf("\n", 1);	/* will turn off UL if necessary */
  	    if (nchars == STOP)
  		break;
  	    num_lines--;
  	}
+ 	if (pstate) {
+ 		tputs(ULexit, 1, putch);
+ 		pstate = 0;
+ 	}
  	fflush(stdout);
  	if ((c = Getc(f)) == EOF)
  	{
  	    if (clreol)
  		clreos ();
***************
*** 619,630
  	cleareol ();
      else if (promptlen > 0)
  	kill_line ();
      if (!hard) {
  	promptlen = 8;
!  	if (Senter && Sexit)
  	    tputs (Senter, 1, putch);
  	if (clreol)
  	    cleareol ();
  	pr("--More--");
  	if (filename != NULL) {
  	    promptlen += printf ("(Next file: %s)", filename);

--- 626,639 -----
  	cleareol ();
      else if (promptlen > 0)
  	kill_line ();
      if (!hard) {
  	promptlen = 8;
!  	if (Senter && Sexit) {
  	    tputs (Senter, 1, putch);
+ 	    promptlen += (2 * soglitch);
+ 	}
  	if (clreol)
  	    cleareol ();
  	pr("--More--");
  	if (filename != NULL) {
  	    promptlen += printf ("(Next file: %s)", filename);
***************
*** 795,807
  
  prbuf (s, n)
  register char *s;
  register int n;
  {
!     char c;				/* next ouput character */
      register int state;		/* next output char's UL state */
-     static int pstate = 0;		/* current terminal UL state (off) */
  
      while (--n >= 0)
  	if (!ul_opt)
  	    putchar (*s++);
  	else {

--- 804,817 -----
  
  prbuf (s, n)
  register char *s;
  register int n;
  {
!     register char c;			/* next ouput character */
      register int state;		/* next output char's UL state */
+ #define wouldul(s,n)	((n) >= 2 && (((s)[0] == '_' && (s)[1] == '\b') || \
+ 			((s)[1] == '\b' && (s)[2] == '_')))
  
      while (--n >= 0)
  	if (!ul_opt)
  	    putchar (*s++);
  	else {

***************
*** 804,832
    while (--n >= 0)
	if (!ul_opt)
	    putchar (*s++);
	else {
!	    if (n >= 2 && s[0] == '_' && s[1] == '\b') {
!		n -= 2;
!	        s += 2;
!		c = *s++;
!		state = 1;
!	    } else if (n >= 2 && s[1] == '\b' && s[2] == '_') {
!		n -= 2;
!		c = *s++;
!		s += 2;
!		state = 1;
!	    } else {
!		c = *s++;
!		state = 0;
!	    }
!	    if (state != pstate)
!		tputs(state ? ULenter : ULexit, 1, putch);
!	    pstate = state;
!	    putchar(c);
	    if (state && *chUL) {
		pr(chBS);
		tputs(chUL, 1, putch);
	    }
	}
}

--- 814,843 -----
    while (--n >= 0)
	if (!ul_opt)
	    putchar (*s++);
	else {
+	    if (*s == ' ' && pstate == 0 && ulglitch && wouldul(s+1, n-1)) {
+		s++;
+		continue;
+	    }
!	    if (state = wouldul(s, n)) {
!		c = (*s == '_')? s[2] : *s ;
!		n -= 2;
!		s += 3;
!	    } else
!		c = *s++;
!	    if (state != pstate) {
+		if (c == ' ' && state == 0 && ulglitch && wouldul(s, n-1))
+		    state = 1;
+		else
!		    tputs(state ? ULenter : ULexit, 1, putch);
+	    }
+	    if (c != ' ' || pstate == 0 || state != 0 || ulglitch == 0)
!	        putchar(c);
	    if (state && *chUL) {
		pr(chBS);
		tputs(chUL, 1, putch);
	    }
!	    pstate = state;
	}
}

***************
*** 1243,1252
  	fflush (stdout);
  	reset_tty ();
  	while ((id = fork ()) < 0)
  	    sleep (5);
  	if (id == 0) {
  	    execv (cmd, &args);
  	    write (2, "exec failed\n", 12);
  	    exit (1);
  	}
  	signal (SIGINT, SIG_IGN);

--- 1254,1267 -----
  	fflush (stdout);
  	reset_tty ();
  	while ((id = fork ()) < 0)
  	    sleep (5);
  	if (id == 0) {
+ 	    if (!isatty(0)) {
+ 		close(0);
+ 		open("/dev/tty", 0);
+ 	    }
  	    execv (cmd, &args);
  	    write (2, "exec failed\n", 12);
  	    exit (1);
  	}
  	signal (SIGINT, SIG_IGN);
***************
*** 1342,1351
  	    clearptr = clearbuf;
  	    eraseln = tgetstr("ce",&clearptr);
  	    Clear = tgetstr("cl", &clearptr);
  	    Senter = tgetstr("so", &clearptr);
  	    Sexit = tgetstr("se", &clearptr);
  
  	    /*
  	     *  Set up for underlining:  some terminals don't need it;
  	     *  others have start/stop sequences, still others have an
  	     *  underline char sequence which is assumed to move the

--- 1357,1368 -----
  	    clearptr = clearbuf;
  	    eraseln = tgetstr("ce",&clearptr);
  	    Clear = tgetstr("cl", &clearptr);
  	    Senter = tgetstr("so", &clearptr);
  	    Sexit = tgetstr("se", &clearptr);
+ 	    if ((soglitch = tgetnum("sg")) < 0)
+ 		soglitch = 0;
  
  	    /*
  	     *  Set up for underlining:  some terminals don't need it;
  	     *  others have start/stop sequences, still others have an
  	     *  underline char sequence which is assumed to move the
***************
*** 1355,1371
  
  	    if (tgetflag("ul") || tgetflag("os"))
  		ul_opt = 0;
  	    if ((chUL = tgetstr("uc", &clearptr)) == NULL )
  		chUL = "";
! 	    if ((ULenter = tgetstr("us", &clearptr)) == NULL &&
! 		(!*chUL) && (ULenter = tgetstr("so", &clearptr)) == NULL)
! 		ULenter = "";
! 	    if ((ULexit = tgetstr("ue", &clearptr)) == NULL &&
! 		(!*chUL) && (ULexit = tgetstr("se", &clearptr)) == NULL)
! 		ULexit = "";
! 	    
  	    if (padstr = tgetstr("pc", &clearptr))
  		PC = *padstr;
  	    Home = tgetstr("ho",&clearptr);
  	    if (Home == 0 || *Home == '\0')
  	    {

--- 1372,1393 -----
  
  	    if (tgetflag("ul") || tgetflag("os"))
  		ul_opt = 0;
  	    if ((chUL = tgetstr("uc", &clearptr)) == NULL )
  		chUL = "";
! 	    if (((ULenter = tgetstr("us", &clearptr)) == NULL ||
! 	         (ULexit = tgetstr("ue", &clearptr)) == NULL) && !*chUL) {
! 	        if ((ULenter = Senter) == NULL || (ULexit = Sexit) == NULL) {
! 			ULenter = "";
! 			ULexit = "";
! 		} else
! 			ulglitch = soglitch;
! 	    } else {
! 		if ((ulglitch = tgetnum("ug")) < 0)
! 		    ulglitch = 0;
! 	    }
! 
  	    if (padstr = tgetstr("pc", &clearptr))
  		PC = *padstr;
  	    Home = tgetstr("ho",&clearptr);
  	    if (Home == 0 || *Home == '\0')
  	    {
***************
*** 1572,1581
  	stty(2, &otty);
  }
  
  reset_tty ()
  {
      otty.sg_flags |= ECHO;
      otty.sg_flags &= ~MBIT;
      stty(2, &savetty);
  }
  

--- 1594,1608 -----
  	stty(2, &otty);
  }
  
  reset_tty ()
  {
+     if (pstate) {
+ 	tputs(ULexit, 1, putch);
+ 	fflush(stdout);
+ 	pstate = 0;
+     }
      otty.sg_flags |= ECHO;
      otty.sg_flags &= ~MBIT;
      stty(2, &savetty);
  }
  
