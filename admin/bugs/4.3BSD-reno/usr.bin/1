From chris@cs.UMD.EDU  Fri Jul 20 20:32:03 1990
Date: Fri, 20 Jul 90 18:59:35 -0400
From: chris@cs.UMD.EDU (Chris Torek)
To: reno43-bugs@okeeffe.Berkeley.EDU
Subject: ruptime limited to 100 hosts, contains lint
Index: usr.bin/ruptime/ruptime.c 4.3BSD-reno Fix

Description:
	1) ruptime conks out at 100 hosts (we just hit 106)
	2) ruptime contains much lint, violates various ANSI C thingies

Repeat-by:
	inspection

Fix:

RCS file: RCS/ruptime.c,v
retrieving revision 1.3
diff -c2 -r1.3 ruptime.c
*** /tmp/,RCSt1024558	Fri Jul 20 18:53:21 1990
--- ruptime.c	Fri Jul 20 18:44:23 1990
***************
*** 33,43 ****
  #include <protocols/rwhod.h>
  #include <stdio.h>
  
! #define	NHOSTS	100
! int	nhosts;
  struct hs {
  	struct	whod *hs_wd;
  	int	hs_nusers;
! } hs[NHOSTS];
  struct	whod awhod;
  
--- 33,44 ----
  #include <protocols/rwhod.h>
  #include <stdio.h>
+ #include <stdlib.h>
+ #include <string.h>
  
! size_t	nhosts, hspace;
  struct hs {
  	struct	whod *hs_wd;
  	int	hs_nusers;
! } *hs;
  struct	whod awhod;
  
***************
*** 55,59 ****
  	extern char *optarg;
  	extern int optind;
! 	register struct hs *hsp = hs;
  	register struct whod *wd;
  	register struct whoent *we;
--- 56,60 ----
  	extern char *optarg;
  	extern int optind;
! 	register struct hs *hsp;
  	register struct whod *wd;
  	register struct whoent *we;
***************
*** 64,68 ****
  	int (*cmp)() = hscmp;
  	time_t time();
! 	char *interval(), *malloc();
  
  	aflg = 0;
--- 65,69 ----
  	int (*cmp)() = hscmp;
  	time_t time();
! 	char *interval();
  
  	aflg = 0;
***************
*** 86,90 ****
  			break;
  		default: 
! 			fprintf(stderr, "usage: ruptime [-alrut]\n");
  			exit(1);
  		}
--- 87,91 ----
  			break;
  		default: 
! 			(void)fprintf(stderr, "usage: ruptime [-alrut]\n");
  			exit(1);
  		}
***************
*** 94,103 ****
  		exit(1);
  	}
  	while (dp = readdir(dirp)) {
  		if (dp->d_ino == 0 || strncmp(dp->d_name, "whod.", 5))
  			continue;
! 		if (nhosts == NHOSTS) {
! 			fprintf(stderr, "ruptime: too many hosts\n");
! 			exit(1);
  		}
  		f = open(dp->d_name, O_RDONLY, 0);
--- 95,106 ----
  		exit(1);
  	}
+ 	morehosts();
+ 	hsp = hs;
  	while (dp = readdir(dirp)) {
  		if (dp->d_ino == 0 || strncmp(dp->d_name, "whod.", 5))
  			continue;
! 		if (nhosts == hspace) {
! 			morehosts();
! 			hsp = hs + nhosts;
  		}
  		f = open(dp->d_name, O_RDONLY, 0);
***************
*** 106,112 ****
  			if (cc >= WHDRSIZE) {
  				/* NOSTRICT */
! 				hsp->hs_wd = (struct whod *)malloc(WHDRSIZE);
  				wd = (struct whod *)buf;
! 				bcopy(wd, hsp->hs_wd, WHDRSIZE);
  				hsp->hs_nusers = 0;
  				for (i = 0; i < 2; i++)
--- 109,116 ----
  			if (cc >= WHDRSIZE) {
  				/* NOSTRICT */
! 				hsp->hs_wd = malloc((size_t)WHDRSIZE);
  				wd = (struct whod *)buf;
! 				bcopy((char *)wd, (char *)hsp->hs_wd,
! 				    (size_t)WHDRSIZE);
  				hsp->hs_nusers = 0;
  				for (i = 0; i < 2; i++)
***************
*** 123,127 ****
  	}
  	if (!nhosts) {
! 		printf("ruptime: no hosts!?!\n");
  		exit(1);
  	}
--- 127,131 ----
  	}
  	if (!nhosts) {
! 		(void)printf("ruptime: no hosts!?!\n");
  		exit(1);
  	}
***************
*** 131,142 ****
  		hsp = &hs[i];
  		if (down(hsp)) {
! 			printf("%-12.12s%s\n", hsp->hs_wd->wd_hostname,
  			    interval(now - hsp->hs_wd->wd_recvtime, "down"));
  			continue;
  		}
! 		printf("%-12.12s%s,  %4d user%s  load %*.2f, %*.2f, %*.2f\n",
  		    hsp->hs_wd->wd_hostname,
! 		    interval(hsp->hs_wd->wd_sendtime -
! 			hsp->hs_wd->wd_boottime, "  up"),
  		    hsp->hs_nusers,
  		    hsp->hs_nusers == 1 ? ", " : "s,",
--- 135,147 ----
  		hsp = &hs[i];
  		if (down(hsp)) {
! 			(void)printf("%-12.12s%s\n", hsp->hs_wd->wd_hostname,
  			    interval(now - hsp->hs_wd->wd_recvtime, "down"));
  			continue;
  		}
! 		(void)printf(
! 		    "%-12.12s%s,  %4d user%s  load %*.2f, %*.2f, %*.2f\n",
  		    hsp->hs_wd->wd_hostname,
! 		    interval((time_t)hsp->hs_wd->wd_sendtime -
! 			(time_t)hsp->hs_wd->wd_boottime, "  up"),
  		    hsp->hs_nusers,
  		    hsp->hs_nusers == 1 ? ", " : "s,",
***************
*** 147,151 ****
  		    maxloadav >= 1000 ? 5 : 4,
  		        hsp->hs_wd->wd_loadav[2] / 100.0);
! 		cfree(hsp->hs_wd);
  	}
  	exit(0);
--- 152,156 ----
  		    maxloadav >= 1000 ? 5 : 4,
  		        hsp->hs_wd->wd_loadav[2] / 100.0);
! 		free((void *)hsp->hs_wd);
  	}
  	exit(0);
***************
*** 152,155 ****
--- 157,175 ----
  }
  
+ morehosts()
+ {
+ 
+ 	if (hs == NULL)
+ 		hs = malloc((hspace = 40) * sizeof(*hs));
+ 	else
+ 		hs = realloc((char *)hs, (hspace *= 2) * sizeof(*hs));
+ 	if (hs == NULL) {
+ 		(void)fprintf(stderr,
+ 		    "ruptime: cannot get memory for %u hosts\n",
+ 		    nhosts);
+ 		exit(1);
+ 	}
+ }
+ 
  char *
  interval(tval, updown)
***************
*** 176,182 ****
  }
  
! hscmp(h1, h2)
! 	struct hs *h1, *h2;
  {
  	return(rflg * strcmp(h1->hs_wd->wd_hostname, h2->hs_wd->wd_hostname));
  }
--- 196,204 ----
  }
  
! hscmp(a1, a2)
! 	void *a1, *a2;
  {
+ 	struct hs *h1 = a1, *h2 = a2;
+ 
  	return(rflg * strcmp(h1->hs_wd->wd_hostname, h2->hs_wd->wd_hostname));
  }
***************
*** 185,194 ****
   * Compare according to load average.
   */
! lcmp(h1, h2)
! 	struct hs *h1, *h2;
  {
  	if (down(h1))
  		if (down(h2))
! 			return(tcmp(h1, h2));
  		else
  			return(rflg);
--- 207,218 ----
   * Compare according to load average.
   */
! lcmp(a1, a2)
! 	void *a1, *a2;
  {
+ 	register struct hs *h1 = a1, *h2 = a2;
+ 
  	if (down(h1))
  		if (down(h2))
! 			return(tcmp(a1, a2));
  		else
  			return(rflg);
***************
*** 203,212 ****
   * Compare according to number of users.
   */
! ucmp(h1, h2)
! 	struct hs *h1, *h2;
  {
  	if (down(h1))
  		if (down(h2))
! 			return(tcmp(h1, h2));
  		else
  			return(rflg);
--- 227,238 ----
   * Compare according to number of users.
   */
! ucmp(a1, a2)
! 	void *a1, *a2;
  {
+ 	register struct hs *h1 = a1, *h2 = a2;
+ 
  	if (down(h1))
  		if (down(h2))
! 			return(tcmp(a1, a2));
  		else
  			return(rflg);
***************
*** 220,226 ****
   * Compare according to uptime.
   */
! tcmp(h1, h2)
! 	struct hs *h1, *h2;
  {
  	return(rflg * (
  		(down(h2) ? h2->hs_wd->wd_recvtime - now
--- 246,254 ----
   * Compare according to uptime.
   */
! tcmp(a1, a2)
! 	void *a1, *a2;
  {
+ 	register struct hs *h1 = a1, *h2 = a2;
+ 
  	return(rflg * (
  		(down(h2) ? h2->hs_wd->wd_recvtime - now
