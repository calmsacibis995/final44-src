From bin@primate.wisc.edu  Tue Jul 11 10:41:39 1989
Date: Tue, 11 Jul 89 10:39:22 -0700
From: Brain in Neutral <bin@primate.wisc.edu>
To: 4bsd-bugs@ucbvax.Berkeley.EDU
Subject: inetd typos/bug/problem
Index: etc/inetd 4.3BSD-tahoe

Greetings.

Below are diffs for two typos in inetd, one bug and one "perhaps wrong" thing.
The version to which this applies is:

#ifndef lint
static char sccsid[] = "@(#)inetd.c	5.14 (Berkeley) 1/23/89";
#endif /* not lint */

The two typos are minor and self-explanatory.

The bug occurs when inet fork/exec's a server if it is invoked with the
"-d" (debug) flag.  After the fork and right before the server is exec'd,
a debug message is printed to indicate what's getting exec'd.  Unfortunately,
the message goes into the stderr of the child!  The diff below moves the
debug statement into the parent code.  (This fprintf has evidently appeared
since version 5.6.)

The questionable thing is that an fprintf (stderr... is done in the
machtime() routine without being preceded by an if(debug).  I don't
know if it should be so preceded, but my guess is that is should, as that
seems to be the pattern throughout the rest of the code.

Yours,
Paul DuBois
dubois@primate.wisc.edu
608/263-3509


*** inetd.c~	Fri Jan 27 11:33:18 1989
--- inetd.c	Tue Jul 11 12:22:50 1989
***************
*** 47,53 ****
   * Inetd uses a configuration file which is read at startup
   * and, possibly, at some later time in response to a hangup signal.
   * The configuration file is ``free format'' with fields given in the
!  * order shown below.  Continuation lines for an entry must being with
   * a space or tab.  All fields must be present in each entry.
   *
   *	service name			must be in /etc/services
--- 47,53 ----
   * Inetd uses a configuration file which is read at startup
   * and, possibly, at some later time in response to a hangup signal.
   * The configuration file is ``free format'' with fields given in the
!  * order shown below.  Continuation lines for an entry must begin with
   * a space or tab.  All fields must be present in each entry.
   *
   *	service name			must be in /etc/services
***************
*** 136,142 ****
  	"discard",	SOCK_STREAM,	1, 0,	discard_stream,
  	"discard",	SOCK_DGRAM,	0, 0,	discard_dg,
  
! 	/* Return 32 bit time since 1970 */
  	"time",		SOCK_STREAM,	0, 0,	machtime_stream,
  	"time",		SOCK_DGRAM,	0, 0,	machtime_dg,
  
--- 136,142 ----
  	"discard",	SOCK_STREAM,	1, 0,	discard_stream,
  	"discard",	SOCK_DGRAM,	0, 0,	discard_dg,
  
! 	/* Return 32 bit time since 1900 */
  	"time",		SOCK_STREAM,	0, 0,	machtime_stream,
  	"time",		SOCK_DGRAM,	0, 0,	machtime_dg,
  
***************
*** 349,357 ****
  					initgroups(pwd->pw_name, pwd->pw_gid);
  					(void) setuid((uid_t)pwd->pw_uid);
  				}
- 				if (debug)
- 					fprintf(stderr, "%d execl %s\n",
- 					    getpid(), sep->se_server);
  				execv(sep->se_server, sep->se_argv);
  				if (sep->se_socktype != SOCK_STREAM)
  					recv(0, buf, sizeof (buf), 0);
--- 349,354 ----
***************
*** 359,364 ****
--- 356,363 ----
  				_exit(1);
  			}
  		}
+ 		if (!sep->se_bi && debug)
+ 			fprintf(stderr, "%d execl %s\n", pid, sep->se_server);
  		if (!sep->se_wait && sep->se_socktype == SOCK_STREAM)
  			close(ctrl);
  	    }
***************
*** 878,884 ****
  	struct timeval tv;
  
  	if (gettimeofday(&tv, (struct timezone *)0) < 0) {
! 		fprintf(stderr, "Unable to get time of day\n");
  		return (0L);
  	}
  	return (htonl((long)tv.tv_sec + 2208988800));
--- 877,884 ----
  	struct timeval tv;
  
  	if (gettimeofday(&tv, (struct timezone *)0) < 0) {
! 		if (debug)
! 			fprintf(stderr, "Unable to get time of day\n");
  		return (0L);
  	}
  	return (htonl((long)tv.tv_sec + 2208988800));

