From ulysses!ggs@ucbvax.Berkeley.EDU  Sat Oct 31 10:31:34 1987
From: ulysses!ggs@ucbvax.berkeley.edu
Subject: tahoe C optimizer error with emul
Date: Sat, 31 Oct 87 12:57:33 EST
Index: lib/c2 tahoe

Description:
	The 4.3BSD tahoe C optimizer sometimes deletes some of the instructions
	that follow an "emul".  It doesn't understand that a destination
	of rx implies that a result is also in rx+1.
Repeat-By:
	Try the following program:

	unsigned int foo(array, i, j)
	unsigned int array[][107], i, j;
	{
		return (array[i][j]);
	}

	When compiled without optimization I get:

	LL0:
		.data
		.text
		.align	1
		.globl	_foo
	_foo:
		.word	L12
		jbr 	L14
	L15:
		movl	12(fp),r0
		emul	$428,8(fp),$0,r2	# destination r2 also implies r3
		movl	r3,r2
		addl3	r2,4(fp),r1
		shll	$2,r0,r0
		addl2	r0,r1
		movl	(r1),r0
		ret#1
		ret#1
		.set	L12,0xc
	L14:
		jbr 	L15
		.data

	When compiled with the optimizer I get:

	.data
	.text
	LL0:.align	1
	.globl	_foo
	.set	L12,0xc
	.data
	.text
	_foo:.word	L12
	movl	12(fp),r0
	emul	$428,8(fp),$0,r2
	shll	$2,r0,r0		# two instructions vanished
	addl2	r0,r1
	movl	(r1),r0			# memory fault, core dumped
	ret#1
-----------------------------------------------------------------
From donn@cs.utah.edu Fri Jan 15 22:22:07 1988
Date: Fri, 15 Jan 88 23:20:11 MST
From: donn@cs.utah.edu (Donn Seeley)
Subject: Re:  tahoe C optimizer error with emul [tahoe/lib/9]

This is the bug that causes instructions following an emul to be
deleted if they use registers that the emul sets.  I'm not sure why
this deletion occurs, but it's definitely the case that the optimizer
fails to identify the destination register pair of an emul as being
written.  The following simple changes to bflow() in c21.c appear to
fix the problem:

***************
*** 571,577 ****
  	int flow= -1;
  	struct node *olduse=0, *olduse1=0;
  
! 	if (p->subop==QUAD || p->subop==DOUBLE || (p->subop&0xF0)==DOUBLE<<4)
  		dblflg |= 1;	/* double dest */
  	if ((p->subop&0xF)==DOUBLE || p->subop==QUAD)
  		dblflg |= 2;	/* double src */
--- 571,578 ----
  	int flow= -1;
  	struct node *olduse=0, *olduse1=0;
  
! 	if (p->subop==QUAD || p->subop==DOUBLE || (p->subop&0xF0)==DOUBLE<<4 ||
! 	    p->op==EMUL)
  		dblflg |= 1;	/* double dest */
  	if ((p->subop&0xF)==DOUBLE || p->subop==QUAD)
  		dblflg |= 2;	/* double src */
***************
*** 673,679 ****
  #ifndef EMOD
  		case EDIV:
  #endif EMOD
- 		case EMUL:
  		case AOBLEQ: case AOBLSS:
  			break;
  		default:
--- 674,679 ----

Note that you can't just mark EMUL as having type QUAD because that
implies a QUAD source as well as a QUAD destination.

Since the new compiler produces better code for indexing expressions
and the old optimizer doesn't botch the new code, it's hard to find
examples where this fix makes a difference...  It feels right but it's
hard to prove.  The new optimizer does handle the old compiler's code
correctly.

Donn

