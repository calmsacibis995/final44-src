From hpda!mindcrf!fred@uunet.UU.NET Wed Jan 31 05:32:29 1990
Date: Tue, 30 Jan 90 14:37:15 PST
From: hpda!mindcrf!fred@uunet.UU.NET (Fred Zlotnick)
To: bostic@uunet.UU.NET
Subject: Pass 2 of lint
Index: pgrm/lint 4.3BSD-tahoe

Keith,
	The version of lpass2.c which is represented in the following
diff output had the SCCS id:
  static char sccsid[] = "@(#)lpass2.c	1.6	(Berkeley)	2/21/86";
I don't know how old that is; you may already have found these problems.  Here
are the changes (< old version, > corrected version).  Explanation follows.

-----------------------------------------------------------------------------

212c212
< 	h = (int)r.l.name % NSZ;
---
> 	h = *(int *)r.l.name % NSZ;
219c219
< 			if (r.l.name == q->name)
---
> 			if (strcmp(r.l.name, q->name) == 0)
385c385
< 	if( !ISFTN(q->symty.t.aty) ){
---
> 	if ( 1 ) {

-----------------------------------------------------------------------------

The code at line 212 is supposed to create a hash value for the symbol name
in the case where FLEXNAMES is defined.  As written, the hash value uses
the address &r.l.name[0], not the contents of the name.  The change treats
the first n bytes (n = sizeof(int)) of the name as an int.  This is in
function find().

The code at line 219 is the worst problem.  This is supposed to be a
string comparison (it's part of the symbol table lookup) but is actually a
pointer comparison that will NEVER succeed.  Thus, symbols were put into the
symbol table more than once, with different characteristics.  Also in find().

The code at line 385 is there, I suspect, to hide the effects of the other
bugs.  It has the effect of suppressing the "not defined/not used" tests
for symbols that are names of functions.  The conditional should be eliminated;
I did it the lazy way.  This code is in function lastone().

Let me know if you have any questions, or if I've said something false.

						Fred Zlotnick


