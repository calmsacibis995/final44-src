From ulysses!ggs@ucbvax.Berkeley.EDU  Mon Jul 27 12:49:29 1987
From: ulysses!ggs@ucbvax.berkeley.edu
Subject: booting tahoe from non-default root
Date: Mon, 27 Jul 87 15:39:00 EDT
Index: sys tahoe

I have two problems booting my tahoe kernel from a non-default root:

1) With a generic kernel configured to recognize four disk controllers
instead of two I can't say the root device is dk14.  The code in
tahoe/swapgeneric.c:setconf() doesn't seem to know how to read devices
other than dk0 through dk7.  I am trying to do system testing on an SMD
drive that happens to be on controller 3.  The probe code correctly
reports that dk14 is at vd3 slave 2.

2) With a normal kernel configured for four disk controllers I get the
wrong root when I boot from either dk14 or dk7.  I am using the /boot
distributed with your beta tape; are there any other dependencies that
I am missing?  I notice that tahoestand/boot.c tests for B_DEVMAGIC
being set upon entry; is this a feature of the console command
interpreter?  My next step is to add some diagnostic printfs to
autoconf.c to see what is being mangled.  Have you actually gotten this
stuff to work?

(Sorry if I am missing something that is already in the install guide,
I misplaced mine when my office contents were moved to another building.)

	Griff Smith, AT&T Bell laboratories, ulysses!ggs
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
From ulysses!ggs@ucbvax.Berkeley.EDU  Tue Aug  4 06:57:51 1987
From: ulysses!ggs@ucbvax.berkeley.edu
To: ucbvax!okeeffe.berkeley.edu!tahoe-bugs
Subject: boot device problems, additional data
Index: sys tahoe

Now I know why I can't boot from drive 2, controller 3, but I'm not
sure what to do about it.  When "setroot" is entered, the variable
"bootdev" is set to a3020001, which breaks down to magic = B_DEVMAGIC,
majdev = 1, part = 0, unit = 2 and adaptor = 3.  These values satisfy
the initial validity checks, so setroot falls into the loop that scans
the "vbdinit" table.  Unfortunately, the line

	vbap->ui_vbanum == adaptor &&

doesn't hack it.  For all active devices ui_vbanum is 0, which probably
makes sense if the variable is referring to a vba number; I only have
one vba.  "adaptor", on the other hand is not a vba number, it's a
disk controller number.  Should I change the comparison to

	vbap->ui_ctlr == adaptor &&

(and probably also change the name of the variable from "adaptor" to
"controller") or is there a missing test?

One other note while I'm at it.  I think the test

	if (majdev > sizeof(devname) / sizeof(devname[0]))
		return;

is off by 1: majdev is 0 -> 2, the size is 3.

	Griff Smith, AT&T Bell Laboratories, ulysses!ggs

