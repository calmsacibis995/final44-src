From muller%sdcc7@ucsd.edu Fri Jun 10 16:30:55 1988
Date: Fri, 10 Jun 88 16:32:01 PDT
From: muller%sdcc7@ucsd.edu (Keith Muller)
Index: sys/tahoevba/mp.c 4.3BSD-tahoe
Subject: mpcc ports hang with TS_BUSY
#Subject: mpcc ports hang with TS_BUSY on an event that never occurs due to a
#	 firmware hang

Description:
	It is possible to put a mpcc port into an state where a EVCMD_WRITE
	command never completes and the port will not respond to any
	terminal data.
Repeat-By:
	(This will seem hard to believe, but it happened several times a day
	on both CCI's. it took forever to track down).

	This procedure worked on two different CCI's and 8 different MPCC
	boards. You need the port in raw or cbreak mode to see the problem,
	using rlogin is an easy way to repeat it.
	
	1) log into a mpcc port with a terminal that sends EVEN parity
	2) use the standard settings for line kill ... etc (as shown by 
	   stty everything) EXCEPT erase is set to backspace and <delete>
	   is not set to anything.

	% stty evrything
	new tty, speed 9600 baud, 60 rows, 80 columns
	even odd -raw -nl echo -lcase -tandem -tabs -cbreak 
	crt: (crtbs crterase crtkill ctlecho) -tostop 
	-tilde -flusho -mdmbuf -litout -pass8 -nohang 
	-pendin decctlq -noflsh 
	erase kill  werase rprnt  flush  lnext  susp   intr   quit   stop eof
	^H    ^U    ^W     ^R     ^O     ^V     ^Z/^Y  ^C     ^\    ^S/^Q  ^D 

	3) rlogin into another machine (like a vax). 
	4) on the remote machine (the vax) use the standard setting for line
	   kill ... etc (as shown by stty everything) EXCEPT erase is set
	   to backspace and <delete> is not set to anything.
	5) on the remote machine type a few characters then a <delete>,
	   port is now wedged on the mpcc. The only way to clear it
	   is to download the microcode for the entire board.
Fix:
	Setting the data size and parity correctly for the terminal mode
	in mpparem() fixed the problem. No side effects have occurred on
	a heavily used system.  I have alerted CCI to the firmware weirdness
	on handling an character with 8 ones in a row (a delete with even 
	parity).

		Keith Muller
		University of California, San Diego

*** /tmp/,RCSt1005691	Fri Jun 10 15:36:22 1988
--- mp.c	Thu Jun  9 15:57:23 1988
***************
*** 365,376 ****
  	asp->ap_xoff = tp->t_stopc;
  	asp->ap_xena = ((tp->t_flags & RAW) ? MPA_DIS : MPA_ENA);
  	asp->ap_xany = ((tp->t_flags & DECCTQ) ? MPA_DIS : MPA_ENA);
- #ifdef notnow
  	if (tp->t_flags & (RAW|LITOUT|PASS8)) {
- #endif
  		asp->ap_data = MPCHAR_8;
  		asp->ap_parity = MPPAR_NONE;
- #ifdef notnow
  	} else {
  		asp->ap_data = MPCHAR_7;
  		if ((tp->t_flags & (EVENP|ODDP)) == ODDP)
--- 367,375 ----
***************
*** 378,384 ****
  		else
  			asp->ap_parity = MPPAR_EVEN;
  	}
- #endif
  	if (tp->t_ospeed == B110)
  		asp->ap_stop = MPSTOP_2;
  	else
--- 377,382 ----

========================================================================
From: muller%sdcc7@ucsd.edu (Keith Muller)
Subject: Tracked down the real bug in mp.c


I wasn't happy with that fix I sent in before. THe problem is NOT firmware,
but is as follows. What the prvious fix did was work around the problem and
not really fix it. Sorry for sending that other one to you.

Subject: mpcc ports wedge with even parity terminal (supercedes previous fix)
Index: sys/tahoevba/mp.c 4.3BSD-tahoe

Description:
	When on a terminal that generates even parity, and you are rlogged
	into another machine typing a delete wedges the port.
Repeat-By:
	Set a terminal to even parity, log into a CCI, then rlogin to another
	machine. Type a few characters and then hit delete. The port is wedged.
Fix:
	The problem was due to the order of different ioctl() calls
	that rlogin uses to set up the terminal. At one point the local
	terminal is in raw mode and both t_startc and t_stopc are -1. rlogin
	then sets the local terminal to CBREAK with a TIOCSETN. Then rlogin
	sets the t_stopc to control-s and t_startc to control-q with a
	TIOCSETC ioclt(). This change of the stop and start characters
	does NOT cause a change in the mpcc board as mpioctl() incorrectly
	fails to call mpparam() when it was called with TIOCSETC ioctl().

	The wedging was due to the fact that when cbreak was set, both
	t_stopc and t_startc where -1 and that is what was set in the board.
	When put into the unsigned char of asp->ap_xoff this became all ones
	which is the SAME AS a <delete> WITH EVEN PARITY. So typing the 
	<delete> character would wedge the board in the stop state.

	The code fragment in rlogin that caused the problem is (entered with
	both stop and start set to -1):

		(void) ioctl(0, TIOCGETP, (char *)&sb);
		sb.sg_flags &= ~RAW;
		sb.sg_flags |= CBREAK;
		(void) ioctl(0, TIOCSETN, (char *)&sb);
		notc.t_stopc = deftc.t_stopc;
		notc.t_startc = deftc.t_startc;
		(void) ioctl(0, TIOCSETC, (char *)&notc);
	
	The provious fix I sent in to mp.c to remove the #ifdef notnow
	around the code in mpparam() that sets the parity and data size
	is not needed (the #ifdef notnow can be put back).

	One thing that is a problem is what should happen when you are
	in CBREAK with t_stopc or t_startc set to -1?  TTY(4) states that
	a character value of -1 eliminates the effect of the character. In
	this case it seems much safer to turn off the board level flow control
	when either t_stopc or t_startc is a -1 and let the software in tty.c
	handle flow control.

		Keith Muller
		University of California
		
		The following diff fixes the problem (diff done with the
		#ifdef notnow IN the source).

RCS file: RCS/mp.c,v
retrieving revision 1.1
diff -c -r1.1 mp.c
*** /tmp/,RCSt1000149	Wed Jun 15 15:51:18 1988
--- mp.c	Wed Jun 15 15:37:02 1988
***************
*** 320,326 ****
  	error = ttioctl(tp, cmd, data, flag);
  	if (error >= 0) {
  		if (cmd == TIOCSETP || cmd == TIOCSETN || cmd == TIOCLBIS ||
! 		    cmd == TIOCLBIC || cmd == TIOCLSET) {
  			ev = mpparam(unit);
  			if (ev == 0)
  				error = ENOBUFS;
--- 320,326 ----
  	error = ttioctl(tp, cmd, data, flag);
  	if (error >= 0) {
  		if (cmd == TIOCSETP || cmd == TIOCSETN || cmd == TIOCLBIS ||
! 		    cmd == TIOCLBIC || cmd == TIOCLSET || cmd == TIOCSETC) {
  			ev = mpparam(unit);
  			if (ev == 0)
  				error = ENOBUFS;
***************
*** 378,386 ****
  	tp = &mp_tty[unit];
  	/* YUCK */
  	asp = &ms->ms_async[port][mp->mp_on?mp->mp_on-1:MPINSET-1];
! 	asp->ap_xon = tp->t_startc;
! 	asp->ap_xoff = tp->t_stopc;
! 	asp->ap_xena = ((tp->t_flags & RAW) ? MPA_DIS : MPA_ENA);
  	asp->ap_xany = ((tp->t_flags & DECCTQ) ? MPA_DIS : MPA_ENA);
  #ifdef notnow
  	if (tp->t_flags & (RAW|LITOUT|PASS8)) {
--- 378,389 ----
  	tp = &mp_tty[unit];
  	/* YUCK */
  	asp = &ms->ms_async[port][mp->mp_on?mp->mp_on-1:MPINSET-1];
! 	asp->ap_xon = (u_char)tp->t_startc;
! 	asp->ap_xoff = (u_char)tp->t_stopc;
! 	if ((tp->t_flags & RAW) || (tp->t_stopc == -1) || (tp->t_startc == -1))
! 		asp->ap_xena = MPA_DIS;
! 	else
! 		asp->ap_xena = MPA_ENA;
  	asp->ap_xany = ((tp->t_flags & DECCTQ) ? MPA_DIS : MPA_ENA);
  #ifdef notnow
  	if (tp->t_flags & (RAW|LITOUT|PASS8)) {

