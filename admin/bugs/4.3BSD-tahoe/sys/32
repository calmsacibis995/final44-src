From mbr@brokaw.LCS.MIT.EDU  Fri Jan  6 05:56:32 1989
To: 4bsd-bugs@ucbvax.Berkeley.EDU
Cc: allspice-mtg@ALLSPICE.LCS.MIT.EDU
Subject: vax standalone tmscp driver broken for ubaN, N > 0
Index: sys 4.3BSD-tahoe
Date: Fri, 06 Jan 89 08:55:40 -0500
From: Mark Reinhold <mbr@brokaw.LCS.MIT.EDU>

Description:
	The vax standalone support code can't deal with a tmscp drive through
	a unibus adaptor other than uba0.

Repeat-By:
	Find an 8600 or a 780 with more than one unibus adaptor and a tape
	drive on uba1.  Load either the copy or boot standalone programs.
	Type "tms(1,0,0,0)" to the prompt.  Nothing happens.

Fix:
	Apply the following patch to /sys/vaxstand/tmscp.c.  The ubamem call in
	tmscpopen had already been fixed, but the ctmscpbuf io structure was
	not being properly initialized, causing ubasetup to not see the correct
	adaptor number.

*** /tmp/,RCSt1000625	Thu Jan  5 17:51:04 1989
--- /tmp/,RCSt2000625	Thu Jan  5 17:51:05 1989
***************
*** 104,110 ****
  		if (tmscpaddr == 0)
  			tmscpaddr = (struct tmscpdevice *)ubamem(io->i_adapt, tmscpstd[0]);
  		if (tmscp_ubaddr == 0) {
! 			ctmscpbuf.i_unit = io->i_unit;
  			ctmscpbuf.i_ma = (caddr_t)&tmscp;
  			ctmscpbuf.i_cc = sizeof(tmscp);
  			tmscp_ubaddr = (struct tmscp *)ubasetup(&ctmscpbuf, 2);
--- 104,110 ----
  		if (tmscpaddr == 0)
  			tmscpaddr = (struct tmscpdevice *)ubamem(io->i_adapt, tmscpstd[0]);
  		if (tmscp_ubaddr == 0) {
! 			ctmscpbuf = *io;
  			ctmscpbuf.i_ma = (caddr_t)&tmscp;
  			ctmscpbuf.i_cc = sizeof(tmscp);
  			tmscp_ubaddr = (struct tmscp *)ubasetup(&ctmscpbuf, 2);


(My previous report neglected to mention the exact name of the file to patch,
 so I'm sending this one to set the record straight.)

Mark Reinhold                            mbr@lcs.mit.edu
MIT Laboratory for Computer Science      (617)-253-3538
