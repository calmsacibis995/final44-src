From jerry@csd4.milw.wisc.edu  Wed May 25 23:46:07 1988
Date: Thu, 26 May 88 01:46:03 CDT
From: Jerry Lieberthal <jerry@csd4.milw.wisc.edu>
To: tahoe-bugs@okeeffe.berkeley.edu
Subject: Compiler error for Opcode =
Index: ucb/pascal/pc 4.3BSD-tahoe

Description:
	When attempting to compile the following program, pc generates
	a "compiler error for Opcode = at line 104".
Repeat-By:
	The problem *appears* to be a scoping problem when a subfield
	of a record is duplicated as a local variable in a procedure or
	function.  For example, the assignment statement causing the 
	problem in /lib/f1 was:

	Prob := Pos^.Prob ;

	where Prob is an elementary local variable, and a subfield name
	in record pointed to by Pos.

Program:
	
program		ShutBox(input,output);

{author:	Andrew Staniszewski
Date:		5/3/88

This program causes compiler error for Opcode = at around line 104} 

{this program creates a directed graph for the best probability
to win the game shutbox. To create this graph, a tree of all the
combinations of the numbers 1..9 (including the nil case) is built.
In order to Optimize, the tree is built such that the probibility to win 
and the graph for the game can be worked out as the tree is being built.
This is accomplished by first starting with the empty set and building
the tree such that the each leval down adds one to the sets cardinality.
Further the elements 9 descending to one are always added to the set from left 
to right. This method of building the tree means that all of the subsets of the
set being built are already in the tree !!!. Further, given the elements of
a set, it can immeadiatly be found in the tree ( see procedure search).
Because of the properties of the tree as it is being built, the t may be
connected to the graph and its probibility calculated as the tree is built}

const
	ZERO			=	0;
	ONE			=	1;
	TWO			=	2;
	THREE			=	3;
	NINE			=	9;
	TWELVE			=	12;
	LINEMAX			=	3;
	BLANK			=	' ';

type
	Line			=	packed array[ONE..LINEMAX] of char;

	ComboPtr		=	^ComboRecord;	
	ComboLink		=	^LinkRecord;
	LinkRecord		=	record
		Roll			:	integer;
		Link			:	ComboPtr;
		Next			:	ComboLink;
		end;

	RollRecord		=	record
		Prob			:	real;
		Combos			:	ComboLink;
		end;
	
	RollMat			=	array[TWO..TWELVE] of RollRecord;

	ValidNumbers		=	ONE..NINE;
	ComboSet		=	set of ValidNumbers;

	ComboRecord		=	record
		Prob			:	real;
		Sum			:	integer;
		Num			:	ComboSet;
		Choices			:	ComboLink;
		Tree			:	ComboLink;
		end;

var
	audit		:	text;
	TopNode		:	ComboPtr;
	ThisNode	:	ComboPtr;
	OldNode		:	ComboPtr;
	NewRoll		:	integer;
	Done		:	boolean;


procedure	LinkNode(
	Root		:	ComboPtr;
	var	Curr		:	ComboPtr;
	Rolls		:	RollMat);

{link the new node to the rest of the graph by finding the nodes
with the best probability of winning that are possible from this node
and linking it to them}

var
	Loop		:	integer;
	Choice		:	ComboLink;
	Prob		:	real;
	RollPos		:	ComboLink;
	Pos		:	ComboPtr;

begin	{LinkNode}

for Loop := TWELVE downto TWO do
	begin
	Prob := ZERO;
	Choice := nil;
	RollPos := Rolls[Loop].Combos;

	while (RollPos <> nil) do
		begin
		if (Curr^.Num >= RollPos^.Link^.Num) then
			begin
			if (Choice = nil) then new(Choice);
			
			{Search(Root,Curr^.Num - RollPos^.Link^.Num,Pos);}
			
			if (Pos^.Prob >= Prob) then
				begin
				Prob := Pos^.Prob;
				Choice^.Link := Pos;
				end;
			end;
		RollPos := RollPos^.Next;
		end;	{while}
	if (Choice <> nil) then
		begin
		Choice^.Roll := Loop;
		Choice^.Next := Curr^.Choices;
		Curr^.Choices := Choice;
		Curr^.Prob := Curr^.Prob + Rolls[Loop].Prob * Prob;
		end;	{Choice <> nil}
	end;	{for Loop}
end;	{LinkNode}


begin	{mainline}
Done := false;
OldNode := TopNode;
ThisNode := TopNode;

while not Done do
	begin
	writeln ('moved') ;
	if not Done then
		writeln ('called GetNode') ;
	if (ThisNode = nil) and not Done then
		begin
		writeln(output,'YOU HAVE LOST');
		Done := true
		end;
	end;
end.

