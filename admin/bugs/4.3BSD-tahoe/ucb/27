From donn@cs.utah.edu Wed Oct 26 19:58:45 1988
Date: Wed, 26 Oct 88 20:59:37 MDT
From: donn@cs.utah.edu (Donn Seeley)
To: bostic@okeeffe.berkeley.edu
Subject: nasty dbx bug on vaxen
Index: ucb/dbx 4.3BSD-tahoe

I just fixed a VAX dbx bug which caused statement tracing to screw up
mysteriously and instruction decoding to look rather strange.  I believe
this bug affects the 4.3-tahoe distributed dbx, although of course it's
only the VAX version of the debugger that has trouble...  I installed
the fixed code in the sources on okeeffe; here's an official bug report:

Subject: VAX dbx instruction decoding and statement tracing broken +FIX
Index:	ucb/dbx/{vax.c,ops.vax.c} 4.3BSD-tahoe

Description:
	The VAX flavor of dbx as distributed on the 4.3-tahoe tape does
	not perform instruction decoding correctly; for example, it
	misunderstands 'cvtwl' as 'cvtdh'.  Since tracing depends on
	correct instruction decoding, it's possible for tracing to
	act mysteriously when continuing through an instruction that is
	improperly decoded.  More specifically, the debugger's
	instruction table (stolen from adb) contains both ordinary
	opcodes and 'extended' opcodes, but the decoder doesn't know
	about 'extended' opcodes and screws up when the high part of an
	'extended' opcode is the same as an ordinary opcode.

Repeat-By:
	Here's the old behavior, as represented by an edited typescript
	(sample program thanks to Jeff Forys and Jay Lepreau); note how
	the call to a() fails to get traced, and the decoder prints a
	ridiculous instruction in place of the call:

	Script started on Wed Oct 26 19:40:18 1988
	% cat confused.c
	main()
	{
		printf("Started\n");
		a(256);
		printf("Finished\n");
	}

	a(len)
	int len;
	{
		printf("%d) we are here!\n", len);
	}
	% cc -g confused.c -o confused
	% /usr/src/ucb/dbx/odbx confused
	dbx version 3.4 of 10/26/88 19:30 (cs.utah.edu).
	Type 'help' for help.
	reading symbolic information ...
	(odbx) trace
	[1] trace 
	(odbx) run

	entering function main
	trace:      3   	printf("Started\n");
	Started
	trace:      4   	a(256);
	256) we are here!
	trace:      5   	printf("Finished\n");
	Finished
	trace:      6   }
	leaving function main

	trace:     12   }

	execution completed
	(odbx) &main,&main+40/i
	00000056  brb	7f
	00000058  pushl	$1408
	0000005e  calls	$1,printf
	00000065  cvtdh	$fb7e010011ef01,$0
	00000070  halt
	00000071  pushl	$1411
	00000077  calls	$1,printf
	0000007e  ret
	(odbx) quit
	% exit
	% 
	script done on Wed Oct 26 19:41:12 1988

Fix:
	It's not that hard to persuade dbx to handle extended opcodes.
	I added new code for this, and fixed some minor bugs as well.
	Here's what the example does under the new dbx:

	Script started on Wed Oct 26 20:24:48 1988
	% dbx confused
	dbx version 3.4 of 10/26/88 20:20 (cs.utah.edu).
	Type 'help' for help.
	reading symbolic information ...
	(dbx) &main,&main+40/i
	00000056  brb	7f
	00000058  pushl	$1408
	0000005e  calls	$1,printf
	00000065  cvtwl	$100,-(sp)
	0000006a  calls	$1,a
	00000071  pushl	$1411
	00000077  calls	$1,printf
	0000007e  ret
	(dbx) trace
	[1] trace 
	(dbx) run

	entering function main
	trace:      3   	printf("Started\n");
	Started
	trace:      4   	a(256);

	entering function a
	trace:     11   	printf("%d) we are here!\n", len);
	256) we are here!
	trace:     12   }
	leaving function a

	trace:      5   	printf("Finished\n");
	Finished
	trace:      6   }
	leaving function main

	trace:     12   }

	execution completed
	(dbx) quit
	% exit
	script done on Wed Oct 26 20:25:16 1988

	I made fixes to two files; first, ops.vax.c:

	----------------------------------------------------------------
	*** /tmp/d04936	Wed Oct 26 19:52:17 1988
	--- ops.vax.c	Wed Oct 26 18:17:42 1988
	***************
	*** 5,14 ****
	   */
	  
	  #ifndef lint
	! static char sccsid[] = "%W% (Berkeley) %G%";
	  #endif not lint
	  
	! static char rcsid[] = "$Header: ops.c,v 1.5 84/12/26 10:41:07 linton Exp $";
	  
	  /*
	   * Machine operators.
	--- 5,14 ----
	   */
	  
	  #ifndef lint
	! static char sccsid[] = "@(#)ops.vax.c	5.5 (Berkeley) 10/26/88";
	  #endif not lint
	  
	! static char rcsid[] = "$Header: ops.vax.c,v 1.3 88/10/26 19:12:17 donn Exp $";
	  
	  /*
	   * Machine operators.
	***************
	*** 299,305 ****
	  #define LONGDISPDEF 0xF /* *LD(r) */
	  
	  #define is_branch_disp(arg) ((arg & ACCB) != 0)
	! #define typelen(arg)        (arg & 07)
	  #define regnm(mode)	    (mode & 0xF)
	  #define addrmode(mode)      (mode >> 4)
	  
	--- 299,305 ----
	  #define LONGDISPDEF 0xF /* *LD(r) */
	  
	  #define is_branch_disp(arg) ((arg & ACCB) != 0)
	! #define typelen(arg)        (arg & 0xF)
	  #define regnm(mode)	    (mode & 0xF)
	  #define addrmode(mode)      (mode >> 4)
	  
	***************
	*** 309,316 ****
	  
	  typedef struct {
	      char *iname;
	!     char format;
	!     char val;
	      char numargs;
	      char argtype[6];
	  } Optab;
	--- 309,316 ----
	  
	  typedef struct {
	      char *iname;
	!     unsigned char format;
	!     unsigned char val;
	      char numargs;
	      char argtype[6];
	  } Optab;
	----------------------------------------------------------------

	More extensive changes were made in vax.c:

	----------------------------------------------------------------
	*** /tmp/d04930	Wed Oct 26 19:52:09 1988
	--- vax.c	Wed Oct 26 17:58:36 1988
	***************
	*** 5,14 ****
	   */
	  
	  #ifndef lint
	! static char sccsid[] = "%W% (Berkeley) %G%";
	  #endif not lint
	  
	! static char rcsid[] = "$Header: machine.c,v 1.2 87/03/26 14:54:55 donn Exp $";
	  
	  /*
	   * Target machine dependent stuff.
	--- 5,14 ----
	   */
	  
	  #ifndef lint
	! static char sccsid[] = "@(#)vax.c	5.5 (Berkeley) 10/26/88";
	  #endif not lint
	  
	! static char rcsid[] = "$Header: vax.c,v 1.2 88/10/26 18:50:53 donn Exp $";
	  
	  /*
	   * Target machine dependent stuff.
	***************
	*** 83,88 ****
	--- 83,89 ----
	  private Address printop();
	  
	  private Optab *ioptab[256];	/* index by opcode to optab */
	+ private Optab *esctab[256];	/* for extended opcodes */
	  
	  /*
	   * Initialize the opcode lookup table.
	***************
	*** 89,98 ****
	   */
	  public optab_init()
	  {
	! 	register Optab *p;
	  
	! 	for (p = optab; p->iname; p++)
	! 		ioptab[p->val & 0xff] = p;
	  }
	  
	  /*
	--- 90,104 ----
	   */
	  public optab_init()
	  {
	!     register Optab *p;
	  
	!     for (p = optab; p->iname; p++) {
	! 	if (p->format == O_ESCD) {
	! 	    esctab[p->val] = p;
	! 	} else if (p->format != O_ESCD && p->format != O_ESCE) {
	! 	    ioptab[p->val] = p;
	! 	}
	!     }
	  }
	  
	  /*
	***************
	*** 556,562 ****
	      printf("%08x  ", addr);
	      iread(&ins, addr, sizeof(ins));
	      addr += 1;
	!     op = ioptab[ins];
	      printf("%s", op->iname);
	      for (argno = 0; argno < op->numargs; argno++) {
		if (indexf == true) {
	--- 562,582 ----
	      printf("%08x  ", addr);
	      iread(&ins, addr, sizeof(ins));
	      addr += 1;
	!     if (ins == O_ESCF) {
	! 	iread(&ins, addr, sizeof(ins));
	! 	addr += 1;
	! 	op = ioptab[ins];
	!     } else if (ins == O_ESCD) {
	! 	iread(&ins, addr, sizeof(ins));
	! 	addr += 1;
	! 	op = esctab[ins];
	!     } else {
	! 	op = ioptab[ins];
	!     }
	!     if (op == nil) {
	! 	printf("[unrecognized opcode %#0x]\n", ins);
	! 	return addr;
	!     }
	      printf("%s", op->iname);
	      for (argno = 0; argno < op->numargs; argno++) {
		if (indexf == true) {
	***************
	*** 580,586 ****
		    case LITUPTO31:
		    case LITUPTO47:
		    case LITUPTO63:
	! 		if (typelen(argtype) == TYPF || typelen(argtype) ==TYPD)
			    printf("$%s", fltimm[mode]);
			else
			    printf("$%x", mode);
	--- 600,607 ----
		    case LITUPTO31:
		    case LITUPTO47:
		    case LITUPTO63:
	! 		if (typelen(argtype) == TYPF || typelen(argtype) == TYPD ||
	! 		    typelen(argtype) == TYPG || typelen(argtype) == TYPH)
			    printf("$%s", fltimm[mode]);
			else
			    printf("$%x", mode);
	***************
	*** 628,645 ****
	  
				case TYPF:
				    iread(&argval, addr, sizeof(argval));
	! 			    printf("%06x", argval);
				    addr += 4;
				    break;
	  
	- 			case TYPQ:
				case TYPD:
				    iread(&argval, addr, sizeof(argval));
	! 			    printf("%06x", argval);
				    iread(&argval, addr+4, sizeof(argval));
	! 			    printf("%06x", argval);
				    addr += 8;
				    break;
			    }
			}
			break;
	--- 649,694 ----
	  
				case TYPF:
				    iread(&argval, addr, sizeof(argval));
	! 			    if ((argval & 0xffff007f) == 0x8000) {
	! 				printf("[reserved operand]");
	! 			    } else {
	! 				printf("%g", *(float *)&argval);
	! 			    }
				    addr += 4;
				    break;
	  
				case TYPD:
	+ 			    /* XXX this bags the low order bits */
				    iread(&argval, addr, sizeof(argval));
	! 			    if ((argval & 0xffff007f) == 0x8000) {
	! 				printf("[reserved operand]");
	! 			    } else {
	! 				printf("%g", *(float *)&argval);
	! 			    }
	! 			    addr += 8;
	! 			    break;
	! 
	! 			case TYPG:
	! 			case TYPQ:
				    iread(&argval, addr+4, sizeof(argval));
	! 			    printf("%08x", argval);
	! 			    iread(&argval, addr, sizeof(argval));
	! 			    printf("%08x", argval);
				    addr += 8;
				    break;
	+ 
	+ 			case TYPH:
	+ 			case TYPO:
	+ 			    iread(&argval, addr+12, sizeof(argval));
	+ 			    printf("%08x", argval);
	+ 			    iread(&argval, addr+8, sizeof(argval));
	+ 			    printf("%08x", argval);
	+ 			    iread(&argval, addr+4, sizeof(argval));
	+ 			    printf("%08x", argval);
	+ 			    iread(&argval, addr, sizeof(argval));
	+ 			    printf("%08x", argval);
	+ 			    addr += 16;
	+ 			    break;
			    }
			}
			break;
	***************
	*** 808,814 ****
	  {
	      register Address addr;
	      register Optab *op;
	!     VaxOpcode ins;
	      unsigned char mode;
	      int argtype, amode, argno, argval;
	      String r;
	--- 857,863 ----
	  {
	      register Address addr;
	      register Optab *op;
	!     VaxOpcode ins, ins2;
	      unsigned char mode;
	      int argtype, amode, argno, argval;
	      String r;
	***************
	*** 889,894 ****
	--- 938,945 ----
		case O_BBCCI: case O_BLBS: case O_BLBC:
		case O_ACBL: case O_AOBLSS: case O_AOBLEQ:
		case O_SOBGEQ: case O_SOBGTR:
	+ 	case O_ESCF: /* bugchecks */
	+ 	branches:
		    addrstatus = KNOWN;
		    stepto(addr);
		    pstep(process, DEFSIG);
	***************
	*** 899,904 ****
	--- 950,962 ----
		    }
		    break;
	  
	+ 	case O_ESCD:
	+ 	    iread(&ins2, addr+1, sizeof(ins2));
	+ 	    if (ins2 == O_ACBF || ins2 == O_ACBD)
	+ 		/* actually ACBG and ACBH */
	+ 		goto branches;
	+ 	    /* fall through */
	+ 
		default:
		    addrstatus = SEQUENTIAL;
		    break;
	***************
	*** 905,911 ****
	      }
	      if (addrstatus != KNOWN) {
		addr += 1;
	! 	op = ioptab[ins];
		for (argno = 0; argno < op->numargs; argno++) {
		    if (indexf == true) {
			indexf = false;
	--- 963,983 ----
	      }
	      if (addrstatus != KNOWN) {
		addr += 1;
	! 	if (ins == O_ESCD) {
	! 	    ins = ins2;
	! 	    addr += 1;
	! 	    op = esctab[ins];
	! 	    if (op == nil) {
	! 		printf("[bad extended opcode %#x in findnextaddr]\n", ins);
	! 		return addr;
	! 	    }
	! 	} else {
	! 	    op = ioptab[ins];
	! 	    if (op == nil) {
	! 		printf("[bad opcode %#x in findnextaddr]\n", ins);
	! 		return addr;
	! 	    }
	! 	}
		for (argno = 0; argno < op->numargs; argno++) {
		    if (indexf == true) {
			indexf = false;
	***************
	*** 962,969 ****
	--- 1034,1048 ----
	  
				    case TYPQ:
				    case TYPD:
	+ 			    case TYPG:
					iread(&argval, addr+4, sizeof(argval));
					addr += 8;
	+ 				break;
	+ 
	+ 			    case TYPO:
	+ 			    case TYPH:
	+ 				iread(&argval, addr+12, sizeof(argval));
	+ 				addr += 16;
					break;
				}
			    }
	----------------------------------------------------------------

	Have fun,

	Donn Seeley    University of Utah CS Dept    donn@cs.utah.edu
	40 46' 6"N 111 50' 34"W    (801) 581-5668    utah-cs!donn

