From steve@umiacs.UMD.EDU  Tue Jul 18 13:08:43 1989
Date: Tue, 18 Jul 89 16:04:56 -0400
From: steve@umiacs.UMD.EDU (Steven D. Miller)
To: 4bsd-bugs@okeeffe.Berkeley.EDU, sunbugs@sun.com
Subject: Troff environment switching problem
Index: usr.bin/roff/common_source/n5.c 4.3BSD-tahoe

Description:
	*roff's method of switching environments is hideously gross, and
	non-portable besides.

Repeat-By:
	Port the BSD troff to a machine (i.e., the DECstation 3100) whose
	compiler doesn't allocate things together merely because they've
	been declared together.  (*roff depends a lot on having all the
	variables in the 'troff environment block' (see ni.c) declared
	together, and in the given order.)  Run troff, and watch it core
	dump as unrelated variables get clobbered.

Fix:
	Install the patches in the following shar file.  Most of the line
	numbers should be identical to what's on okeeffe; I think your n1.c
	may have one more line in it somewhere, but it doesn't make it any
	harder to patch.  (Note to Sun: these fixes are relative to the
	Berkeley version of troff.  I don't know what your stuff looks
	like these days.)

	There's probably lots of ways to do this that are as good or better
	than what's below.  The new-style environment switch time is, for
	all its ugliness, faster than the old-style temp file switch time,
	on all the systems (DECstation 3100, VAX 8250, Sun-3/60) I tested,
	for whatever that's worth...

Spoken: Steve Miller    Domain: steve@mimsy.umd.edu    UUCP: uunet!mimsy!steve
Phone: +1-301-454-1808  USPS: UMIACS, Univ. of Maryland, College Park, MD 20742

: Run this shell script with "sh" not "csh"
PATH=/bin:/usr/bin:/usr/ucb:/etc:$PATH
export PATH
all=false
if [ x$1 = x-a ]; then
	all=true
fi
echo Extracting n1.c.diff
sed 's/^X//' <<'//go.sysin dd *' >n1.c.diff
X*** /tmp/,RCSt1a16981	Tue Jul 11 08:30:19 1989
X--- n1.c	Mon Jul 10 17:04:30 1989
X***************
X*** 115,121 ****
X--- 115,123 ----
X  extern int *olinep;
X  extern int dpn;
X  extern int noscale;
X+ #ifndef VMUNIX
X  extern char *unlkp;
X+ #endif
X  extern int pts;
X  extern int level;
X  extern int ttysave;
X***************
X*** 339,351 ****
X--- 341,356 ----
X  init1(a)
X  char a;
X  {
X+ #ifndef VMUNIX
X  	register char *p;
X  	char *mktemp();
X+ #endif
X  	register i;
X  
X  #ifndef NROFF
X  	acctg();/*open troff actg file while mode 4755*/
X  #endif
X+ #ifndef VMUNIX
X  	p = mktemp("/tmp/taXXXXX");
X  	if(a == 'a')p = &p[5];
X  	if((close(creat(p, 0600))) < 0){
X***************
X*** 353,362 ****
X--- 358,370 ----
X  		exit(-1);
X  	}
X  	ibf = open(p, 2);
X+ #endif
X  	for(i=256; --i;)trtab[i]=i;
X  	trtab[UNPAD] = ' ';
X  	mchbits();
X+ #ifndef VMUNIX
X  	if(a != 'a')unlkp = p;
X+ #endif
X  }
X  init2()
X  {
X***************
X*** 380,386 ****
X--- 388,398 ----
X  		}
X  	}
X  	ptinit();
X+ #ifdef VMUNIX
X+ 	initroffenv();
X+ #else
X  	for(i=NEV; i--;)write(ibf, (char *)&block, EVS*sizeof(int));
X+ #endif
X  	olinep = oline;
X  	ibufp = eibuf = ibuf;
X  	v.hp = init = 0;
//go.sysin dd *
if [ `wc -c < n1.c.diff` != 1137 ]; then
	made=false
	echo error transmitting n1.c.diff --
	echo length should be 1137, not `wc -c < n1.c.diff`
else
	made=true
fi
if $all; then
	echo '	Changing owner to bin'
	chown bin n1.c.diff
else
	echo '	Original owner was bin'
fi
if $made; then
	chmod 644 n1.c.diff
	echo -n '	'; ls -ld n1.c.diff
fi
echo Extracting n2.c.diff
sed 's/^X//' <<'//go.sysin dd *' >n2.c.diff
X*** /tmp/,RCSt1a16986	Tue Jul 11 08:30:20 1989
X--- n2.c	Mon Jul 10 17:12:48 1989
X***************
X*** 61,67 ****
X--- 61,69 ----
X  extern int ralss;
X  extern int paper;
X  extern int gflag;
X+ #ifndef VMUNIX
X  extern char *unlkp;
X+ #endif
X  extern char nextf[];
X  extern int pipeflg;
X  extern int ejf;
X***************
X*** 273,279 ****
X--- 275,283 ----
X  	error |= x;
X  	signal(SIGINT, SIG_IGN);
X  	signal(SIGTERM, SIG_IGN);
X+ #ifndef VMUNIX
X  	unlink(unlkp);
X+ #endif
X  #ifdef NROFF
X  	twdone();
X  #endif
//go.sysin dd *
if [ `wc -c < n2.c.diff` != 501 ]; then
	made=false
	echo error transmitting n2.c.diff --
	echo length should be 501, not `wc -c < n2.c.diff`
else
	made=true
fi
if $all; then
	echo '	Changing owner to bin'
	chown bin n2.c.diff
else
	echo '	Original owner was bin'
fi
if $made; then
	chmod 644 n2.c.diff
	echo -n '	'; ls -ld n2.c.diff
fi
echo Extracting n3.c.diff
sed 's/^X//' <<'//go.sysin dd *' >n3.c.diff
X*** /tmp/,RCSt1a16991	Tue Jul 11 08:30:21 1989
X--- n3.c	Mon Jul 10 17:06:16 1989
X***************
X*** 27,33 ****
X--- 27,35 ----
X  extern char *enda;
X  
X  extern int ch;
X+ #ifndef VMUNIX
X  extern int ibf;
X+ #endif
X  extern int lgf;
X  extern int copyf;
X  extern int ch0;
//go.sysin dd *
if [ `wc -c < n3.c.diff` != 268 ]; then
	made=false
	echo error transmitting n3.c.diff --
	echo length should be 268, not `wc -c < n3.c.diff`
else
	made=true
fi
if $all; then
	echo '	Changing owner to bin'
	chown bin n3.c.diff
else
	echo '	Original owner was bin'
fi
if $made; then
	chmod 644 n3.c.diff
	echo -n '	'; ls -ld n3.c.diff
fi
echo Extracting n5.c.diff
sed 's/^X//' <<'//go.sysin dd *' >n5.c.diff
X*** /tmp/,RCSt1a17777	Tue Jul 11 12:10:37 1989
X--- n5.c	Tue Jul 11 12:10:19 1989
X***************
X*** 3,8 ****
X--- 3,11 ----
X  #endif lint
X  
X  #include "tdef.h"
X+ #ifdef VMUNIX
X+ #include "roffenv.h"
X+ #endif
X  #include <sgtty.h>
X  extern
X  #include "d.h"
X***************
X*** 59,65 ****
X--- 62,70 ----
X  extern int em;
X  extern int evlist[EVLSZ];
X  extern int evi;
X+ #ifndef VMUNIX
X  extern int ibf;
X+ #endif
X  extern int ev;
X  extern int ch;
X  extern int nflush;
X***************
X*** 106,111 ****
X--- 111,149 ----
X  int iflist[NIF];
X  int ifx;
X  
X+ #ifdef VMUNIX
X+ /* begin environment kludge */
X+ 
X+ extern int block;
X+ extern int spbits;
X+ extern int sps;
X+ extern int spacesz;
X+ extern int lss1;
X+ extern int hyoff;
X+ extern int adsp;
X+ extern int adrem;
X+ extern int lastl;
X+ extern int nel;
X+ extern int *wordp;
X+ extern int spflg;
X+ extern int *linep;
X+ extern int *wdend;
X+ extern int *wdstart;
X+ extern int wne;
X+ extern int ne;
X+ extern int nwd;
X+ extern int wch;
X+ extern int pendt;
X+ extern int *pendw;
X+ extern int spread;
X+ extern int *hyptr[];
X+ extern int line[];
X+ extern int word[];
X+ extern struct roffenv *curev, env[];
X+ 
X+ /* end environment kludge */
X+ #endif VMUNIX
X+ 
X  casead(){
X  	register i;
X  
X***************
X*** 407,413 ****
X--- 445,455 ----
X  }
X  caseev(){
X  	register nxev;
X+ #ifdef VMUNIX
X+ 	register int i;
X+ #else
X  	extern int block;
X+ #endif
X  
X  	if(skip()){
X  e0:
X***************
X*** 428,437 ****
X--- 470,643 ----
X  	evlist[evi++] = ev;
X  e1:
X  	if(ev == nxev)return;
X+ #ifdef VMUNIX
X+ 	/*
X+ 	Hold on to your hats, folks...  We update
X+ 	the variables in the current environment from
X+ 	their more simply-named counterparts, switch
X+ 	environments, and update the simple variables
X+ 	from the new environment.  XXX
X+ 	*/
X+ 
X+ 	curev->re_block = block;
X+ 	curev->re_ics = ics;
X+ 	curev->re_ic = ic;
X+ 	curev->re_icf = icf;
X+ 	curev->re_chbits = chbits;
X+ 	curev->re_spbits = spbits;
X+ 	curev->re_nmbits = nmbits;
X+ 	curev->re_apts = apts;
X+ 	curev->re_apts1 = apts1;
X+ 	curev->re_pts = pts;
X+ 	curev->re_pts1 = pts1;
X+ 	curev->re_font = font;
X+ 	curev->re_font1 = font1;
X+ 	curev->re_sps = sps;
X+ 	curev->re_spacesz = spacesz;
X+ 	curev->re_lss = lss;
X+ 	curev->re_lss1 = lss1;
X+ 	curev->re_ls = ls;
X+ 	curev->re_ls1 = ls1;
X+ 	curev->re_ll = ll;
X+ 	curev->re_ll1 = ll1;
X+ 	curev->re_lt = lt;
X+ 	curev->re_lt1 = lt1;
X+ 	curev->re_ad = ad;
X+ 	curev->re_nms = nms;
X+ 	curev->re_ndf = ndf;
X+ 	curev->re_fi = fi;
X+ 	curev->re_cc = cc;
X+ 	curev->re_c2 = c2;
X+ 	curev->re_ohc = ohc;
X+ 	curev->re_tdelim = tdelim;
X+ 	curev->re_hyf = hyf;
X+ 	curev->re_hyoff = hyoff;
X+ 	curev->re_un1 = un1;
X+ 	curev->re_tabc = tabc;
X+ 	curev->re_dotc = dotc;
X+ 	curev->re_adsp = adsp;
X+ 	curev->re_adrem = adrem;
X+ 	curev->re_lastl = lastl;
X+ 	curev->re_nel = nel;
X+ 	curev->re_admod = admod;
X+ 	curev->re_wordp = wordp;
X+ 	curev->re_spflg = spflg;
X+ 	curev->re_linep = linep;
X+ 	curev->re_wdend = wdend;
X+ 	curev->re_wdstart = wdstart;
X+ 	curev->re_wne = wne;
X+ 	curev->re_ne = ne;
X+ 	curev->re_nc = nc;
X+ 	curev->re_nb = nb;
X+ 	curev->re_lnmod = lnmod;
X+ 	curev->re_nwd = nwd;
X+ 	curev->re_nn = nn;
X+ 	curev->re_ul = ul;
X+ 	curev->re_cu = cu;
X+ 	curev->re_ce = ce;
X+ 	curev->re_in = in;
X+ 	curev->re_in1 = in1;
X+ 	curev->re_un = un;
X+ 	curev->re_wch = wch;
X+ 	curev->re_pendt = pendt;
X+ 	curev->re_pendw = pendw;
X+ 	curev->re_pendnf = pendnf;
X+ 	curev->re_spread = spread;
X+ 	curev->re_it = it;
X+ 	curev->re_itmac = itmac;
X+ 	curev->re_lnsize = lnsize;
X+ 	for (i = 0 ; i < NHYP ; i++)
X+ 		curev->re_hyptr[i] = hyptr[i];
X+ 	for (i = 0 ; i < NTAB ; i++)
X+ 		curev->re_tabtab[i] = tabtab[i];
X+ 	for (i = 0 ; i < LNSIZE ; i++)
X+ 		curev->re_line[i] = line[i];
X+ 	for (i = 0 ; i < WDSIZE ; i++)
X+ 		curev->re_word[i] = word[i];
X+ 	/* we've saved current state */
X+ 	curev = &env[nxev];
X+ 	block = curev->re_block;
X+ 	ics = curev->re_ics;
X+ 	ic = curev->re_ic;
X+ 	icf = curev->re_icf;
X+ 	chbits = curev->re_chbits;
X+ 	spbits = curev->re_spbits;
X+ 	nmbits = curev->re_nmbits;
X+ 	apts = curev->re_apts;
X+ 	apts1 = curev->re_apts1;
X+ 	pts = curev->re_pts;
X+ 	pts1 = curev->re_pts1;
X+ 	font = curev->re_font;
X+ 	font1 = curev->re_font1;
X+ 	sps = curev->re_sps;
X+ 	spacesz = curev->re_spacesz;
X+ 	lss = curev->re_lss;
X+ 	lss1 = curev->re_lss1;
X+ 	ls = curev->re_ls;
X+ 	ls1 = curev->re_ls1;
X+ 	ll = curev->re_ll;
X+ 	ll1 = curev->re_ll1;
X+ 	lt = curev->re_lt;
X+ 	lt1 = curev->re_lt1;
X+ 	ad = curev->re_ad;
X+ 	nms = curev->re_nms;
X+ 	ndf = curev->re_ndf;
X+ 	fi = curev->re_fi;
X+ 	cc = curev->re_cc;
X+ 	c2 = curev->re_c2;
X+ 	ohc = curev->re_ohc;
X+ 	tdelim = curev->re_tdelim;
X+ 	hyf = curev->re_hyf;
X+ 	hyoff = curev->re_hyoff;
X+ 	un1 = curev->re_un1;
X+ 	tabc = curev->re_tabc;
X+ 	dotc = curev->re_dotc;
X+ 	adsp = curev->re_adsp;
X+ 	adrem = curev->re_adrem;
X+ 	lastl = curev->re_lastl;
X+ 	nel = curev->re_nel;
X+ 	admod = curev->re_admod;
X+ 	wordp = curev->re_wordp;
X+ 	spflg = curev->re_spflg;
X+ 	linep = curev->re_linep;
X+ 	wdend = curev->re_wdend;
X+ 	wdstart = curev->re_wdstart;
X+ 	wne = curev->re_wne;
X+ 	ne = curev->re_ne;
X+ 	nc = curev->re_nc;
X+ 	nb = curev->re_nb;
X+ 	lnmod = curev->re_lnmod;
X+ 	nwd = curev->re_nwd;
X+ 	nn = curev->re_nn;
X+ 	ul = curev->re_ul;
X+ 	cu = curev->re_cu;
X+ 	ce = curev->re_ce;
X+ 	in = curev->re_in;
X+ 	in1 = curev->re_in1;
X+ 	un = curev->re_un;
X+ 	wch = curev->re_wch;
X+ 	pendt = curev->re_pendt;
X+ 	pendw = curev->re_pendw;
X+ 	pendnf = curev->re_pendnf;
X+ 	spread = curev->re_spread;
X+ 	it = curev->re_it;
X+ 	itmac = curev->re_itmac;
X+ 	lnsize = curev->re_lnsize;
X+ 	for (i = 0 ; i < NHYP ; i++)
X+ 		hyptr[i] = curev->re_hyptr[i];
X+ 	for (i = 0 ; i < NTAB ; i++)
X+ 		tabtab[i] = curev->re_tabtab[i];
X+ 	for (i = 0 ; i < LNSIZE ; i++)
X+ 		line[i] = curev->re_line[i];
X+ 	for (i = 0 ; i < WDSIZE ; i++)
X+ 		word[i] = curev->re_word[i];
X+ 	/* All done.  Now that wasn't that bad... */
X+ #else
X  	lseek(ibf, (long)(ev*EVS*sizeof(int)), 0);
X  	write(ibf,(char *)&block, EVS*sizeof(int));
X  	lseek(ibf, (long)(nxev*EVS*sizeof(int)), 0);
X  	read(ibf,(char *)&block, EVS*sizeof(int));
X+ #endif
X  	ev = nxev;
X  }
X  caseel(){
//go.sysin dd *
if [ `wc -c < n5.c.diff` != 6051 ]; then
	made=false
	echo error transmitting n5.c.diff --
	echo length should be 6051, not `wc -c < n5.c.diff`
else
	made=true
fi
if $all; then
	echo '	Changing owner to bin'
	chown bin n5.c.diff
else
	echo '	Original owner was bin'
fi
if $made; then
	chmod 644 n5.c.diff
	echo -n '	'; ls -ld n5.c.diff
fi
echo Extracting ni.c.diff
sed 's/^X//' <<'//go.sysin dd *' >ni.c.diff
X*** /tmp/,RCSt1a17715	Tue Jul 11 12:08:10 1989
X--- ni.c	Tue Jul 11 12:07:32 1989
X***************
X*** 3,8 ****
X--- 3,12 ----
X  #endif lint
X  
X  #include "tdef.h"
X+ #ifdef VMUNIX
X+ #include "roffenv.h"
X+ #endif
X+ 
X  char obuf[OBUFSZ];
X  char *obufp = obuf;
X  int r[NN] = {
X***************
X*** 178,184 ****
X  };
X  
X  /*
X! troff environment block
X  */
X  
X  int block = 0;
X--- 182,188 ----
X  };
X  
X  /*
X! Troff environment block.
X  */
X  
X  int block = 0;
X***************
X*** 254,259 ****
X--- 258,359 ----
X  	DTAB*9,DTAB*10,DTAB*11,DTAB*12,DTAB*13,DTAB*14,DTAB*15,0};
X  int line[LNSIZE] = {0};
X  int word[WDSIZE] = {0};
X+ #ifndef VMUNIX
X  int blockxxx[EVS-68-NHYP-NTAB-WDSIZE-LNSIZE] = {0};
X+ #endif
X+ 
X+ #ifdef VMUNIX
X+ struct roffenv env[NEV], *curev = &env[0];
X+ #endif
X+ 
X  /*spare 5 words*/
X  int oline[LNSIZE+1];
X+ 
X+ #ifdef VMUNIX
X+ initroffenv()
X+ {
X+ 	register int i;
X+ 
X+ 	curev->re_block = block;
X+ 	curev->re_ics = ics;
X+ 	curev->re_ic = ic;
X+ 	curev->re_icf = icf;
X+ 	curev->re_chbits = chbits;
X+ 	curev->re_spbits = spbits;
X+ 	curev->re_nmbits = nmbits;
X+ 	curev->re_apts = apts;
X+ 	curev->re_apts1 = apts1;
X+ 	curev->re_pts = pts;
X+ 	curev->re_pts1 = pts1;
X+ 	curev->re_font = font;
X+ 	curev->re_font1 = font1;
X+ 	curev->re_sps = sps;
X+ 	curev->re_spacesz = spacesz;
X+ 	curev->re_lss = lss;
X+ 	curev->re_lss1 = lss1;
X+ 	curev->re_ls = ls;
X+ 	curev->re_ls1 = ls1;
X+ 	curev->re_ll = ll;
X+ 	curev->re_ll1 = ll1;
X+ 	curev->re_lt = lt;
X+ 	curev->re_lt1 = lt1;
X+ 	curev->re_ad = ad;
X+ 	curev->re_nms = nms;
X+ 	curev->re_ndf = ndf;
X+ 	curev->re_fi = fi;
X+ 	curev->re_cc = cc;
X+ 	curev->re_c2 = c2;
X+ 	curev->re_ohc = ohc;
X+ 	curev->re_tdelim = tdelim;
X+ 	curev->re_hyf = hyf;
X+ 	curev->re_hyoff = hyoff;
X+ 	curev->re_un1 = un1;
X+ 	curev->re_tabc = tabc;
X+ 	curev->re_dotc = dotc;
X+ 	curev->re_adsp = adsp;
X+ 	curev->re_adrem = adrem;
X+ 	curev->re_lastl = lastl;
X+ 	curev->re_nel = nel;
X+ 	curev->re_admod = admod;
X+ 	curev->re_wordp = wordp;
X+ 	curev->re_spflg = spflg;
X+ 	curev->re_linep = linep;
X+ 	curev->re_wdend = wdend;
X+ 	curev->re_wdstart = wdstart;
X+ 	curev->re_wne = wne;
X+ 	curev->re_ne = ne;
X+ 	curev->re_nc = nc;
X+ 	curev->re_nb = nb;
X+ 	curev->re_lnmod = lnmod;
X+ 	curev->re_nwd = nwd;
X+ 	curev->re_nn = nn;
X+ 	curev->re_ul = ul;
X+ 	curev->re_cu = cu;
X+ 	curev->re_ce = ce;
X+ 	curev->re_in = in;
X+ 	curev->re_in1 = in1;
X+ 	curev->re_un = un;
X+ 	curev->re_wch = wch;
X+ 	curev->re_pendt = pendt;
X+ 	curev->re_pendw = pendw;
X+ 	curev->re_pendnf = pendnf;
X+ 	curev->re_spread = spread;
X+ 	curev->re_it = it;
X+ 	curev->re_itmac = itmac;
X+ 	curev->re_lnsize = lnsize;
X+ 	/* XXX almost certainly unnecessary */
X+ 	for (i = 0 ; i < NHYP ; i++)
X+ 		curev->re_hyptr[i] = hyptr[i];
X+ 	for (i = 0 ; i < NTAB ; i++)
X+ 		curev->re_tabtab[i] = tabtab[i];
X+ 	/* XXX almost certainly unnecessary */
X+ 	for (i = 0 ; i < LNSIZE ; i++)
X+ 		curev->re_line[i] = line[i];
X+ 	for (i = 0 ; i < WDSIZE ; i++)
X+ 		curev->re_word[i] = word[i];
X+ 	/*
X+ 	 * Now that we've built one, let's clone it onto all the others.
X+ 	 */
X+ 	env[1] = env[2] = env[0];
X+ }
X+ #endif
//go.sysin dd *
if [ `wc -c < ni.c.diff` != 3055 ]; then
	made=false
	echo error transmitting ni.c.diff --
	echo length should be 3055, not `wc -c < ni.c.diff`
else
	made=true
fi
if $all; then
	echo '	Changing owner to bin'
	chown bin ni.c.diff
else
	echo '	Original owner was bin'
fi
if $made; then
	chmod 644 ni.c.diff
	echo -n '	'; ls -ld ni.c.diff
fi
echo Extracting nii.c.diff
sed 's/^X//' <<'//go.sysin dd *' >nii.c.diff
X*** /tmp/,RCSt1a17006	Tue Jul 11 08:30:24 1989
X--- nii.c	Mon Jul 10 17:13:20 1989
X***************
X*** 58,64 ****
X--- 58,66 ----
X  int mflg;
X  int ch = 0;
X  int cps;
X+ #ifndef VMUNIX
X  int ibf;
X+ #endif
X  int ttyod;
X  struct sgttyb ttys;
X  int iflg;
//go.sysin dd *
if [ `wc -c < nii.c.diff` != 249 ]; then
	made=false
	echo error transmitting nii.c.diff --
	echo length should be 249, not `wc -c < nii.c.diff`
else
	made=true
fi
if $all; then
	echo '	Changing owner to bin'
	chown bin nii.c.diff
else
	echo '	Original owner was bin'
fi
if $made; then
	chmod 644 nii.c.diff
	echo -n '	'; ls -ld nii.c.diff
fi
echo Extracting roffenv.h
sed 's/^X//' <<'//go.sysin dd *' >roffenv.h
Xstruct roffenv {
X	int re_block;
X	int re_ics;
X	int re_ic;
X	int re_icf;
X	int re_chbits;
X	int re_spbits;
X	int re_nmbits;
X	int re_apts;
X	int re_apts1;
X	int re_pts;
X	int re_pts1;
X	int re_font;
X	int re_font1;
X	int re_sps;
X	int re_spacesz;
X	int re_lss;
X	int re_lss1;
X	int re_ls;
X	int re_ls1;
X	int re_ll;
X	int re_ll1;
X	int re_lt;
X	int re_lt1;
X	int re_ad;
X	int re_nms;
X	int re_ndf;
X	int re_fi;
X	int re_cc;
X	int re_c2;
X	int re_ohc;
X	int re_tdelim;
X	int re_hyf;
X	int re_hyoff;
X	int re_un1;
X	int re_tabc;
X	int re_dotc;
X	int re_adsp;
X	int re_adrem;
X	int re_lastl;
X	int re_nel;
X	int re_admod;
X	int *re_wordp;
X	int re_spflg;
X	int *re_linep;
X	int *re_wdend;
X	int *re_wdstart;
X	int re_wne;
X	int re_ne;
X	int re_nc;
X	int re_nb;
X	int re_lnmod;
X	int re_nwd;
X	int re_nn;
X	int re_ni;
X	int re_ul;
X	int re_cu;
X	int re_ce;
X	int re_in;
X	int re_in1;
X	int re_un;
X	int re_wch;
X	int re_pendt;
X	int *re_pendw;
X	int re_pendnf;
X	int re_spread;
X	int re_it;
X	int re_itmac;
X	int re_lnsize;
X	int *re_hyptr[NHYP];
X	int re_tabtab[NTAB];
X	int re_line[LNSIZE];
X	int re_word[WDSIZE];
X};
//go.sysin dd *
if [ `wc -c < roffenv.h` != 1044 ]; then
	made=false
	echo error transmitting roffenv.h --
	echo length should be 1044, not `wc -c < roffenv.h`
else
	made=true
fi
if $all; then
	echo '	Changing owner to bin'
	chown bin roffenv.h
else
	echo '	Original owner was bin'
fi
if $made; then
	chmod 444 roffenv.h
	echo -n '	'; ls -ld roffenv.h
fi
