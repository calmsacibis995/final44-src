From leres@ee.lbl.gov  Fri Feb 21 13:18:15 1992
Received: from ace.ee.lbl.gov by okeeffe.CS.Berkeley.EDU (5.79/1.42)
	id AA10146; Fri, 21 Feb 92 13:18:15 -0800
Received: by ace.ee.lbl.gov for bugs@okeeffe.cs.berkeley.edu (5.65/1.43)
	id AA12153; Fri, 21 Feb 92 13:19:01 -0800
Resent-Message-Id: <9202212119.AA12153@ace.ee.lbl.gov>
Message-Id: <9202212119.AA12153@ace.ee.lbl.gov>
To: bugs@okeeffe.CS.Berkeley.EDU (Bugs BSD Bunny)
Subject: broken \r\n to \n mapping logic in more
Index: usr.bin/more 4.3BSD-tahoe +FIX
Date: Sat, 28 Dec 91 20:55:21 PST
From: Craig Leres <leres@ee.lbl.gov>
Resent-To: bugs@okeeffe.CS.Berkeley.EDU (Bugs BSD Bunny)
Resent-Date: Fri, 21 Feb 92 13:18:59 PST
Resent-From: Craig Leres <leres@ee.lbl.gov>

Description:
	The version of more on vangogh has trouble with files
	containing lines ending with \r (only when not using -u).

Repeat-By:
	Create such a file, more it and notice the extra garbage lines:

	    vangogh 29 % cat > lose
	    test: a^M
	    test: b^M
	    test: c^M
	    vangogh 30 % more lose
	    test: a
	    test: b
	    test: c
	    c

	    vangogh 31 % 

	Also notice that a \r\n sequence that space a block boundry
	isn't mapped correctly:

	    vangogh 32 % repeat 1020 glob 0 > lose2
	    vangogh 33 % cat >> lose2
	    1
	    a^M
	    22222
	    vangogh 34 % more lose2
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    00000000000000000000000000000000000000000000000000000000000000000000
	    1
	    a^M
	    22222

Fix:
	The whole idea of of mapping \r\n to \n in fch_get() is broken.
	Not only does it not deal with block boundries but since more
	knows about file offsets, you really can't strip characters
	from its buffers; when you do, it later lseek's and outputs
	garbage.

	My fix is to nuke the \r\n to \n code in fch_get() and replace
	it with some in ch_forw_get(). A context diff is appended.

	Note that I didn't change ch_back_get(). I couldn't find any
	test cases for it...
------
*** ch.c.virgin	Sat Dec 28 20:54:09 1991
--- ch.c	Sat Dec 28 20:54:01 1991
***************
*** 33,39 ****
   */
  
  #ifndef lint
! static char sccsid[] = "@(#)ch.c	5.10 (Berkeley) 3/1/91";
  #endif /* not lint */
  
  /*
--- 33,39 ----
   */
  
  #ifndef lint
! static char sccsid[] = "@(#)ch.c	5.10+ (Berkeley) 3/1/91";
  #endif /* not lint */
  
  /*
***************
*** 178,185 ****
  	/*
  	 * Set an EOI marker in the buffered data itself.  Then ensure the
  	 * data is "clean": there are no extra EOI chars in the data and
! 	 * that the "meta" bit (the 0200 bit) is reset in each char;
! 	 * also translate \r\n sequences to \n if -u flag not set.
  	 */
  	if (n == 0) {
  		ch_fsize = pos;
--- 178,184 ----
  	/*
  	 * Set an EOI marker in the buffered data itself.  Then ensure the
  	 * data is "clean": there are no extra EOI chars in the data and
! 	 * that the "meta" bit (the 0200 bit) is reset in each char.
  	 */
  	if (n == 0) {
  		ch_fsize = pos;
***************
*** 186,214 ****
  		bp->data[bp->datasize++] = EOI;
  	}
  
! 	if (bs_mode) {
! 		for (p = &bp->data[bp->datasize]; --n >= 0;) {
! 			*--p &= 0177;
! 			if (*p == EOI)
! 				*p = 0200;
! 		}
  	}
- 	else {
- 		for (t = p; --n >= 0; ++p) {
- 			ch = *p & 0177;
- 			if (ch == '\r' && n && (p[1] & 0177) == '\n') {
- 				++p;
- 				*t++ = '\n';
- 			}
- 			else
- 				*t++ = (ch == EOI) ? 0200 : ch;
- 		}
- 		if (p != t) {
- 			bp->datasize -= p - t;
- 			if (ispipe)
- 				last_piped_pos -= p - t;
- 		}
- 	}
  
  found:
  	if (buf_head != bp) {
--- 185,195 ----
  		bp->data[bp->datasize++] = EOI;
  	}
  
! 	for (p = &bp->data[bp->datasize]; --n >= 0;) {
! 		*--p &= 0177;
! 		if (*p == EOI)
! 			*p = 0200;
  	}
  
  found:
  	if (buf_head != bp) {
***************
*** 348,353 ****
--- 329,335 ----
  ch_forw_get()
  {
  	register int c;
+ 	extern int bs_mode;
  
  	c = ch_get();
  	if (c != EOI && ++ch_offset >= BUFSIZ) {
***************
*** 354,359 ****
--- 336,351 ----
  		ch_offset = 0;
  		++ch_block;
  	}
+ 
+ 	/* Map "\r\n" to "\n" if -u flag not set */
+ 	if (c == '\r' && !bs_mode && ch_get() == '\n') {
+ 		if (++ch_offset >= BUFSIZ) {
+ 			ch_offset = 0;
+ 			++ch_block;
+ 		}
+ 		return('\n');
+ 	}
+ 
  	return(c);
  }
