Date: Wed, 4 Sep 85 19:53:39 PDT
From: serge@MONET.BERKELEY (Serge Granik)
Subject: ps doesn't use the dbm'ed version of /etc/passwd
Index: 	bin/ps.c 4.3BSD

Description:
	Ps does not use the dbm'ed version of /etc/passwd.  Instead,
	it does a linear search of the ascii version, saving all
	intermediate entries, until it gets the desired entry.

	The following fix (similar to that of ls), changes ps to use
	the dbm'ed version of /etc/passwd.  Performance improvement
	(when -u option is given) are 50% user time and 50% real time.
Fix:
*** /usr/src/bin/ps.c	Wed Aug 28 18:05:56 1985
--- ps.c	Wed Sep  4 13:18:09 1985
***************
*** 1401,1484 ****
  	return (vp->v_swrss + (ap->a_xccount ? 0 : vp->v_txtswrss));
  }
  
! #define	NMAX	8	/* sizeof loginname (should be sizeof (utmp.ut_name)) */
! #define NUID	2048	/* must not be a multiple of 5 */
  
! struct nametable {
! 	char	nt_name[NMAX+1];
! 	int	nt_uid;
! } nametable[NUID];
  
! struct nametable *
! findslot(uid)
! int	uid;
! {
! 	register struct nametable	*n, *start;
  
! 	/*
! 	 * find the uid or an empty slot.
! 	 * return NULL if neither found.
! 	 */
  
! 	n = start = nametable + (uid % (NUID - 20));
! 	while (n->nt_name[0] && n->nt_uid != uid) {
! 		if ((n += 5) >= &nametable[NUID])
! 			n -= NUID;
! 		if (n == start)
! 			return((struct nametable *)NULL);
! 	}
! 	return(n);
! }
! 
  char *
  getname(uid)
  {
! 	register struct passwd		*pw;
! 	static				init = 0;
! 	struct passwd			*getpwent();
! 	register struct nametable	*n;
! 	extern int			_pw_stayopen;
  
! 	/*
! 	 * find uid in hashed table; add it if not found.
! 	 * return pointer to name.
! 	 */
  
! 	if ((n = findslot(uid)) == NULL)
! 		return((char *)NULL);
! 
! 	if (n->nt_name[0])	/* occupied? */
! 		return(n->nt_name);
! 
! 	switch (init) {
! 		case 0:
! 			setpwent();
! 			_pw_stayopen = 1;
! 			init = 1;
! 			/* intentional fall-thru */
! 		case 1:
! 			while (pw = getpwent()) {
! 				if (pw->pw_uid < 0)
! 					continue;
! 				if ((n = findslot(pw->pw_uid)) == NULL) {
! 					endpwent();
! 					init = 2;
! 					return((char *)NULL);
! 				}
! 				if (n->nt_name[0])
! 					continue;	/* duplicate, not uid */
! 				strncpy(n->nt_name, pw->pw_name, NMAX);
! 				n->nt_uid = pw->pw_uid;
! 				if (pw->pw_uid == uid)
! 					return (n->nt_name);
! 			}
! 			endpwent();
! 			init = 2;
! 			/* intentional fall-thru */
! 		case 2:
! 			return ((char *)NULL);
! 	}
! 	/* NOTREACHED */
  }
  
  char *
--- 1401,1449 ----
  	return (vp->v_swrss + (ap->a_xccount ? 0 : vp->v_txtswrss));
  }
  
! #include <utmp.h>
  
! struct	utmp utmp;
! #define	NMAX	(sizeof (utmp.ut_name))
! #define SCPYN(a, b)	strncpy(a, b, NMAX)
  
! #define NUID	64
! #define NGID	300
  
! struct ncache {
! 	int	uid;
! 	char	name[NMAX+1];
! } nc[NUID];
  
! /*
!  * This function assumes that the password file is hashed
!  * (or some such) to allow fast access based on a uid key.
!  */
  char *
  getname(uid)
  {
! 	register struct passwd *pw;
! 	struct passwd *getpwent();
! 	register int cp;
! #ifndef	NO_PW_STAYOPEN
! 	extern int _pw_stayopen;
  
! 	_pw_stayopen = 1;
! #endif
  
! #if	((NUID) & ((NUID) - 1) != 0)
! 	cp = uid % (NUID);
! #else
! 	cp = uid & ((NUID) - 1);
! #endif
! 	if (uid >= 0 && nc[cp].uid == uid && nc[cp].name[0])
! 		return (nc[cp].name);
! 	pw = getpwuid(uid);
! 	if (!pw)
! 		return (0);
! 	nc[cp].uid = uid;
! 	SCPYN(nc[cp].name, pw->pw_name);
! 	return (nc[cp].name);
  }
  
  char *
