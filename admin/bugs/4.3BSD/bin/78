From ulysses!msf@ucbvax.Berkeley.EDU  Fri Aug 28 00:19:07 1987
From: ulysses!msf@ucbvax.Berkeley.EDU
Date: Wed, 26 Aug 87 15:40:07 EDT
Subject: cc -c fails to compile multiple files after first cpp error
Index: bin/cc.c	4.3BSD

Description:
	When cc -c is given a list of .c files, and there is a preprocessor
	error in one of them (e.g. #include <nonexistent file>), then it
	continues to preprocess the remaining files, but not compile them.

	This is extremely confusing at best, since the command continues
	to list the .c files (followed by colons, as if it were going to
	give possible compilation errors).  There is no indication that
	the files are *not* being compiled, though they are being preprocessed.

	Either the command should stop after the first such bug (but notice
	that it continues on compilation errors; just not on cpp errors),
	or it should continue compiling all .c files (a la Sys V).

Repeat-By:
	Create files x.c, y.c, z.c -
	x.c :
		#include <foo.h>

	y.c :
		main() {}

	z.c :
		#include <foo.h>

	Execute cc -c x.c y.c z.c; notice that z.c is flagged for #including
	a nonexistent file, but there is no y.o generated.  The cc output
	makes it appear as though y.c were being compiled.

	Replace z.c with the file -
		intt i;

	Repeat cc -c x.c y.c z.c; notice that no syntax errors are generated
	for z.c.

	Finally, replace x.c with the a copy of z.c (i.e. intt i;), and
	notice that cc -c x.c y.c z.c *does* generate syntax errors for x.c and
	z.c; the compilation continues after the first file has errors.  It is
	only with cpp errors that the compilation (but not preprocessing) stops.

