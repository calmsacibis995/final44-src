From jason@violet.berkeley.edu Thu Aug 27 09:34:54 1987
To: bostic@okeeffe.Berkeley.EDU
Notice: (C) Copyright Jason Venner Thu Aug 27 09:30:53 1987
Subject: fix to bin/passwd so chfn works correctly in all cases (4.3Beta)
Date: Thu, 27 Aug 87 09:33:07 PDT
From: Jason Venner <jason@violet.berkeley.edu>
Index: bin/passwd.c 4.3BSD

[Should I mail stuff like this to you?]
chfn will allow you to put ',' into your gecos field, and this
confuses the meanings of the fields (as ','s are the field
separators).

The following diff listing modifies passwd to add ','s to the list or
rejected characters (currently ':' and '\n').

Jason
*** passwd.c	Thu Aug 27 09:15:56 1987
--- passwd.c.~4~	Thu Jul 23 15:38:02 1987
***************
*** 465,474
  }
  
  /*
!  * Prints an error message if a ':' or ',' or a newline is found in the
!  * string.  The gcos feild uses ','s to separate feilds, so are also
!  * disallowed. A message is also printed if the input string is too long.  The
!  * password file uses :'s as seperators, and are not allowed in the "gcos"
   * field.  Newlines serve as delimiters between users in the password file,
   * and so, those too, are checked for.  (I don't think that it is possible to
   * type them in, but better safe than sorry)

--- 465,473 -----
  }
  
  /*
!  * Prints an error message if a ':' or a newline is found in the string.
!  * A message is also printed if the input string is too long.
!  * The password file uses :'s as seperators, and are not allowed in the "gcos"
   * field.  Newlines serve as delimiters between users in the password file,
   * and so, those too, are checked for.  (I don't think that it is possible to
   * type them in, but better safe than sorry)
***************
*** 473,480
   * and so, those too, are checked for.  (I don't think that it is possible to
   * type them in, but better safe than sorry)
   *
!  * Returns '1' if a colon or newline or comma is found or the input line is
!  * too long.
   */
  illegal_input(input_str)
  	char *input_str;

--- 472,478 -----
   * and so, those too, are checked for.  (I don't think that it is possible to
   * type them in, but better safe than sorry)
   *
!  * Returns '1' if a colon or newline is found or the input line is too long.
   */
  illegal_input(input_str)
  	char *input_str;
***************
*** 485,494
  
  	if (index(input_str, ':')) {
  		printf("':' is not allowed.\n");
- 		error_flag = 1;
- 	}
- 	if( index(input_str, ',') ) {
- 		printf( "',' is not allowed.\n");
  		error_flag = 1;
  	}
  	if (input_str[length-1] != '\n') {

--- 483,488 -----
  
  	if (index(input_str, ':')) {
  		printf("':' is not allowed.\n");
  		error_flag = 1;
  	}
  	if (input_str[length-1] != '\n') {
