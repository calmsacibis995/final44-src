Return-Path: <conrad@cgl.ucsf.edu>
Date: Mon, 18 Aug 86 13:57:49 PDT
From: conrad@cgl.ucsf.edu
Subject: service entries after first built-in
Index: etc/inetd.c 4.3BSD

Description:
	/etc/inetd thinks any service entries appearing after the first
	built-in service is internal.  When we added our local services
	at the end of /etc/inetd.conf, they were not handled properly.
Repeat-By:
	Add a service (or move one) to the end of inetd.conf, after all
	the internal services.  Then try to connect to that service.
Fix:
	The fix is to clear the built-in flag when reading in the
	configuration file.  A context diff follows:

	RCS file: RCS/inetd.c,v
	retrieving revision 1.1
	diff -c -r1.1 inetd.c
	*** /tmp/,RCSt1016455	Mon Aug 18 13:56:44 1986
	--- inetd.c	Mon Aug 18 13:20:39 1986
	***************
	*** 394,400
					SWAP(sep->se_argv[i], cp->se_argv[i]);
				sigsetmask(omask);
				freeconfig(cp);
	! 		} else
				sep = enter(cp);
			sep->se_checked = 1;
			sp = getservbyname(sep->se_service, sep->se_proto);

	--- 394,402 -----
					SWAP(sep->se_argv[i], cp->se_argv[i]);
				sigsetmask(omask);
				freeconfig(cp);
	! 			if (debug)
	! 				print_service("REDO", sep);
	! 		} else {
				sep = enter(cp);
				if (debug)
					print_service("ADD ", sep);
	***************
	*** 396,401
				freeconfig(cp);
			} else
				sep = enter(cp);
			sep->se_checked = 1;
			sp = getservbyname(sep->se_service, sep->se_proto);
			if (sp == 0) {

	--- 398,406 -----
					print_service("REDO", sep);
			} else {
				sep = enter(cp);
	+ 			if (debug)
	+ 				print_service("ADD ", sep);
	+ 		}
			sep->se_checked = 1;
			sp = getservbyname(sep->se_service, sep->se_proto);
			if (sp == 0) {
	***************
	*** 429,434
				nsock--;
				(void) close(sep->se_fd);
			}
			freeconfig(sep);
			free((char *)sep);
		}

	--- 434,441 -----
				nsock--;
				(void) close(sep->se_fd);
			}
	+ 		if (debug)
	+ 			print_service("FREE", sep);
			freeconfig(sep);
			free((char *)sep);
		}
	***************
	*** 576,581
			sep->se_bi = bi;
			sep->se_wait = bi->bi_wait;
		}
		argc = 0;
		for (arg = skip(&cp); cp; arg = skip(&cp))
			if (argc < MAXARGV)

	--- 583,590 -----
			sep->se_bi = bi;
			sep->se_wait = bi->bi_wait;
		}
	+ 	else
	+ 		sep->se_bi = NULL;
		argc = 0;
		for (arg = skip(&cp); cp; arg = skip(&cp))
			if (argc < MAXARGV)
	***************
	*** 917,920
			return;
		sprintf(buffer, "%s\r", ctime(&clock));
		(void) sendto(s, buffer, strlen(buffer), 0, &sa, sizeof(sa));
	  }

	--- 926,943 -----
			return;
		sprintf(buffer, "%s\r", ctime(&clock));
		(void) sendto(s, buffer, strlen(buffer), 0, &sa, sizeof(sa));
	+ }
	+ 
	+ /*
	+  * print_service:
	+  *	Dump relavant information to stderr
	+  */
	+ print_service(action, sep)
	+ char		*action;
	+ struct servtab	*sep;
	+ {
	+ 	fprintf(stderr,
	+ 	"%s: %s proto=%s, wait=%d, user=%s builtin=%x server=%s\n",
	+ 	action, sep->se_service, sep->se_proto,
	+ 	sep->se_wait, sep->se_user, sep->se_bi, sep->se_server);
	  }
