From chris@mimsy.umd.edu  Thu Sep 10 21:10:48 1987
Date: Thu, 10 Sep 87 23:07:30 EST
From: Chris Torek <chris@mimsy.umd.edu>
Subject: finger daemon is full of lint
Index: etc/fingerd.c 4.3BSD Fix

Description:
	The finger daemon needs linting.

Repeat-By:
	% lint -h fingerd.c

Fix:
RCS file: RCS/fingerd.c,v
retrieving revision 1.1
retrieving revision 1.2
diff -c2 -r1.1 -r1.2
*** /tmp/,RCSt1016719	Thu Sep 10 23:56:14 1987
--- /tmp/,RCSt2016719	Thu Sep 10 23:56:15 1987
***************
*** 19,22 ****
--- 19,24 ----
   */
  #include <sys/types.h>
+ #include <sys/socket.h>
+ #include <sys/wait.h>
  #include <netinet/in.h>
  
***************
*** 24,28 ****
--- 26,32 ----
  #include <ctype.h>
  
+ /*ARGSUSED*/
  main(argc, argv)
+ 	int argc;
  	char *argv[];
  {
***************
*** 30,34 ****
  	char line[512];
  	struct sockaddr_in sin;
! 	int i, p[2], pid, status;
  	FILE *fp;
  	char *av[4];
--- 34,39 ----
  	char line[512];
  	struct sockaddr_in sin;
! 	int i, p[2], pid;
! 	union wait status;
  	FILE *fp;
  	char *av[4];
***************
*** 35,42 ****
  
  	i = sizeof (sin);
! 	if (getpeername(0, &sin, &i) < 0)
  		fatal(argv[0], "getpeername");
  	line[0] = '\0';
! 	gets(line);
  	sp = line;
  	av[0] = "finger";
--- 40,47 ----
  
  	i = sizeof (sin);
! 	if (getpeername(0, (struct sockaddr *)&sin, &i) < 0)
  		fatal(argv[0], "getpeername");
  	line[0] = '\0';
! 	(void) gets(line);
  	sp = line;
  	av[0] = "finger";
***************
*** 62,69 ****
  		fatal(argv[0], "pipe");
  	if ((pid = fork()) == 0) {
! 		close(p[0]);
  		if (p[1] != 1) {
! 			dup2(p[1], 1);
! 			close(p[1]);
  		}
  		execv("/usr/ucb/finger", av);
--- 67,74 ----
  		fatal(argv[0], "pipe");
  	if ((pid = fork()) == 0) {
! 		(void) close(p[0]);
  		if (p[1] != 1) {
! 			(void) dup2(p[1], 1);
! 			(void) close(p[1]);
  		}
  		execv("/usr/ucb/finger", av);
***************
*** 72,76 ****
  	if (pid == -1)
  		fatal(argv[0], "fork");
! 	close(p[1]);
  	if ((fp = fdopen(p[0], "r")) == NULL)
  		fatal(argv[0], "fdopen");
--- 77,81 ----
  	if (pid == -1)
  		fatal(argv[0], "fork");
! 	(void) close(p[1]);
  	if ((fp = fdopen(p[0], "r")) == NULL)
  		fatal(argv[0], "fdopen");
***************
*** 77,84 ****
  	while ((i = getc(fp)) != EOF) {
  		if (i == '\n')
! 			putchar('\r');
! 		putchar(i);
  	}
! 	fclose(fp);
  	while ((i = wait(&status)) != pid && i != -1)
  		;
--- 82,89 ----
  	while ((i = getc(fp)) != EOF) {
  		if (i == '\n')
! 			(void) putchar('\r');
! 		(void) putchar(i);
  	}
! 	(void) fclose(fp);
  	while ((i = wait(&status)) != pid && i != -1)
  		;
