From zz1ra%sdcc7@sdcsvax.ucsd.edu  Thu Mar 19 14:28:29 1987
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.58/1.14)
	id AA13257; Thu, 19 Mar 87 14:28:29 PST
Received: by ucbvax.Berkeley.EDU (5.57/1.23)
	id AA06974; Thu, 19 Mar 87 14:29:20 PST
Received: by sdcsvax.UCSD.EDU (5.57/5.0)
	id AA16189 for 4bsd-bugs@berkeley.edu; Thu, 19 Mar 87 10:17:49 PST
Received: by sdcc7.ucsd.edu (5.57/5.0)
	id AA04635; Thu, 19 Mar 87 10:17:46 PST
Date: Thu, 19 Mar 87 10:17:46 PST
From: zz1ra%sdcc7@sdcsvax.ucsd.edu (Rick Accurso)
Message-Id: <8703191817.AA04635@sdcc7.ucsd.edu>
Subject: ditroff functions fail if the device has large character set
Index: 	ideas 4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Description:

	[Sending this for your information eventhough ditroff is not
	part of BSD.]

	In the case of devices which have large character sets such as
	the Apple LaserWriter (psc) the troff requests cc, c2, hc, tc,
	lc and ec do not work properly when given certain characters as
	arguments.

	The chget routine which is involved in identifying the argument
	of those requests masks its return value with 0377 (the low
	order eight bits).  If the device's character set is large
	(nchtab > 128), the troff internal encoding of some characters
	requires more than eight bits.

	This problem came to our attention when someone attempted to
	set the leader repeat character to the rule character, \(ru.
	The output contained sevens (7) in place of rule characters.


Repeat-By:

	Make a troff input file "doc":

		.lc \(ru
		^A
	
	Where ^A is the ASCII SOH character (control-a).

	Process the file with device independent troff (troff_p)
	using the psc device type (-Tpsc) as defined by Adobe's
	TranScript package:

		troff_p -Tpsc doc

	The leader (^A) will be expanded to a row of sevens (77777)
	instead of repeated \(ru characters.

Fix:

----------------------------cut-----------------------------------
*** /tmp/,RCSt1000544	(old)
--- n5.c	Thu Jan 15 15:00:01 1987 (fixed)
***************
*** 96,102 ****
  		ch = i;
  		return(c);
  	} else 
! 		return(i & BMASK);
  }
  
  
--- 96,102 ----
  		ch = i;
  		return(c);
  	} else 
! 		return(cbits(i));
  }
  
  
----------------------------cut-----------------------------------

Rick Accurso
Academic Computing Center
UCSD

(619) 534-4056
Internet:	accurso@ucsd.edu
UUCP:		...!ucbvax!sdcsvax!accurso

