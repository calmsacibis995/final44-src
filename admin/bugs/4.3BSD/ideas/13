From bostic@okeeffe.Berkeley.EDU  Sat Mar 28 10:30:06 1987
Date: Sat, 28 Mar 87 10:29:53 PST
From: bostic@okeeffe.Berkeley.EDU (Keith Bostic)
Message-Id: <8703281829.AA06420@okeeffe.Berkeley.EDU>
Subject: additional functionality for passwd interface
Index: ideas 4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Path: seismo!husc6!yale!cmcl2!philabs!micomvax!musocs!mcgill-vision!mouse
From: mouse@mcgill-vision.UUCP (der Mouse)
Newsgroups: comp.unix.wizards
Subject: Re: File System Kudzu
In article <14909@sun.uucp>, guy%gorodish@Sun.COM (Guy Harris) writes:
>> I would like the POSIX committee (or somebody equivalent) to address
>> this issue [re /etc/passwd]

> I would like the POSIX committee to stay the heck away from this
> issue, as it's not its business to say where various files live.
> [...]
> (E.g., there IS no "/etc/passwd" in POSIX; there are "getpwent",
> "getwpuid", and "getpwnam" functions, which is as it should be.  It
> is not the business of any standard to say anything whatsoever about
> a file named "/etc/passwd" or any file like it.)

I agree with you in principle, Guy, but in this case I disagree, since
there is no putpwent() or analogous function.  If you completely hide
the internal structure you then must provide an interface with full
functionality.  Given just the getpw* functions, there's no way to
change the passwd database, which is clearly necessary for any real
system.

Don't just say that providing chsh, passwd, and chfn programs (or
equivalents) is enough; it isn't.  We wanted a chsh/chfn/passwd suite
of programs with functionality somewhat different from the provided
versions.  It is unacceptable to be unable to do this sort of thing.

					der Mouse

Smart mailers: mouse@mcgill-vision.uucp
USA: {ihnp4,decvax,akgua,utzoo,etc}!utcsri!musocs!mcgill-vision!mouse
     think!mosart!mcgill-vision!mouse
ARPAnet: think!mosart!mcgill-vision!mouse@harvard.harvard.edu

Path: seismo!lll-lcc!unisoft!mtxinu!ed
From: ed@mtxinu.UUCP (Ed Gould)
Newsgroups: comp.unix.wizards
Subject: Re: File System Kudzu
>> Given just the getpw* functions, there's no way to change the passwd
>> database, which is clearly necessary for any real system.
>Yes.  But is it necessary to provide a *portable* way to write
>applications to change it?

Yes, it is.

>> Don't just say that providing chsh, passwd, and chfn programs (or
>> equivalents) is enough; it isn't.  We wanted a chsh/chfn/passwd suite
>> of programs with functionality somewhat different from the provided
>> versions.
>You may be able to do it; you may just have to write different code
>to do it on different systems.  There is a tradeoff here; by
>specifying more characteristics of the POSIX interface, you increase
>the number of applications that can be written to the POSIX
>interface, and thus the number of portable applications - but you
>also *de*crease the number of possible implementations of the POSIX
>interface.  Is it worth reducing the number of possible POSIX
>interface implementations by, say, 10% in order to increase the
>number of portable applications by .1%?

I don't see how specifying a procedural interface to the password file
(which I expect would do the job) that is complete - i.e. includes routines
for writing the file as well as reading it - limits the number of
implementations.  It does make them somewhat more complex, but it
also makes them more robust.

What's wrong with putpwent(), and others like it?

-- 
Ed Gould                    mt Xinu, 2560 Ninth St., Berkeley, CA  94710  USA
{ucbvax,decvax}!mtxinu!ed   +1 415 644 0146

"A man of quality is not threatened by a woman of equality."
----------------------------------------------------------------------
