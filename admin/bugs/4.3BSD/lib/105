From ulysses!ggs@ucbvax.Berkeley.EDU  Wed Jan 13 11:51:44 1988
From: ulysses!ggs@ucbvax.Berkeley.EDU
To: okeeffe.berkeley.edu!tahoe-bugs@ucbvax.Berkeley.EDU
Subject: inconsistent results when using casts with % in cc
Date: Wed, 13 Jan 88 14:02:41 EST
Index: lib/ccom 4.3BSD

Description:
	The tahoe C compiler reacts strangely when casts are applied
	to the arguments of the % operator.
Repeat-By:
	Run the following program:

#include <stdio.h>
main()
{
    unsigned int x;
    int q;
    unsigned int temp;

    q=500;
    x=0xe4275185;

    printf("(int)(%lu %% %ld) = %ld\n", x, q, (int)(x%q) );
    printf("(%lu %% %ld) = %ld\n", x, q, (x%q) );
    printf("((int) %lu) %% %ld = %ld\n", x, q, ((int) x)%q );
    printf("temp = %lu %% %ld, temp = %ld\n", x, q, temp = x%q, temp);
}

	My version of the output is:

(int)(3827782021 % 500) = -275
(3827782021 % 500) = 21
((int) 3827782021) % 500 = -275
temp = 3827782021 % 500, temp = 21

	The different values depend on whether or not the compiler decides
	to sign-extend "x" before doing the division.  My theory is that
	21 is the correct result; it seems strange that (int)(x%q) would be
	interpreted as ((int) x)%q.  The VAX C compiler agrees with the
	theory: the only expression yielding -275 is ((int) x)%q.  

-------------------------------------------------------
From donn@cs.utah.edu  Wed Jan 13 12:43:08 1988
Date: Wed, 13 Jan 88 13:42:39 MST
From: donn@cs.utah.edu (Donn Seeley)
To: ulysses!ggs@cs.utah.edu
Subject: Re:  inconsistent results when using casts with % in cc
Cc: tahoe-bugs@okeeffe.berkeley.edu, ulysses!gsf@cs.utah.edu

	The tahoe C compiler reacts strangely when casts are applied
	to the arguments of the % operator.  ...

This one's easy -- it's fixed in the new compiler, which is (finally)
installed in /usr/src/lib/pcc on okeeffe, although it's (alas) not yet
installed in /lib due to the pending tahoe distribution.  The new
compiler will go into alpha test after the distribution.  If you want
to be in the alpha test, let me know.

BTW, I really am saving up all those optimizer bug reports.  It's such
a joy to work on the optimizer :-).  At some point I will make an
effort to fix the bugs.

Donn

