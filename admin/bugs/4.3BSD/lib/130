From mjb@j.cc.purdue.edu  Wed Aug 17 14:53:47 1988
Date: Wed, 17 Aug 88 16:45:48 EST
From: mjb@j.cc.purdue.edu (MatthewBradburn)
Subject: arguments to syslog(3)
Index: lib/syslog.c 4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Description:
	The man page for syslog(3) states that it accepts a printf-like
	format string and arguments.  However, only 5 percent escapes
	and corresponding arguments, with the exception of '%m' are used.
	Additional arguments cause garbage to be logged.
Repeat-By:
	Try 'syslog("%d %d %d %d %d %d", 1, 2, 3, 4, 5, 6);'.  The '6' will
	be replaced by whatever happens to be on the stack, and that will
	be logged.
Fix:
	The following diff should be applied to /usr/src/lib/libc/gen/syslog.c.
	What I've done is used _doprnt instead of putting a limited number
	of arguments in the function's argument list.  Syslog(3) is the only
	function I changed; the rest from that file are the same as before.
	
*** /usr/src/lib/libc/gen/syslog.c	Thu Jul  7 16:56:05 1988
--- syslog.c	Wed Aug 17 16:19:56 1988
***************
*** 31,36 ****
--- 31,37 ----
   * Modified to use UNIX domain IPC by Ralph Campbell
   */
  
+ #include <stdio.h>
  #include <sys/types.h>
  #include <sys/socket.h>
  #include <sys/file.h>
***************
*** 40,46 ****
  #include <strings.h>
  
  #define	MAXLINE	1024			/* max message size */
! #define NULL	0			/* manifest */
  
  #define PRIMASK(p)	(1 << ((p) & LOG_PRIMASK))
  #define PRIFAC(p)	(((p) & LOG_FACMASK) >> 3)
--- 41,47 ----
  #include <strings.h>
  
  #define	MAXLINE	1024			/* max message size */
! /* #define NULL	0			/* manifest */
  
  #define PRIMASK(p)	(1 << ((p) & LOG_PRIMASK))
  #define PRIFAC(p)	(((p) & LOG_FACMASK) >> 3)
***************
*** 60,66 ****
  extern	int errno, sys_nerr;
  extern	char *sys_errlist[];
  
! syslog(pri, fmt, p0, p1, p2, p3, p4)
  	int pri;
  	char *fmt;
  {
--- 61,67 ----
  extern	int errno, sys_nerr;
  extern	char *sys_errlist[];
  
! syslog(pri, fmt, args)
  	int pri;
  	char *fmt;
  {
***************
*** 120,126 ****
  	}
  	*b++ = '\n';
  	*b = '\0';
! 	sprintf(o, buf, p0, p1, p2, p3, p4);
  	c = strlen(outline);
  	if (c > MAXLINE)
  		c = MAXLINE;
--- 121,140 ----
  	}
  	*b++ = '\n';
  	*b = '\0';
! 	{
! 		/* we trick _doprnt into being sprintf: this code is
! 		 * equivalent to:
! 		 * sprintf(o, buf, args ... );
! 		 * See the source to sprintf(2) for more.
! 		 */
! 		struct _iobuf _strbuf;
! 
! 		_strbuf._flag = _IOWRT+_IOSTRG;
! 		_strbuf._ptr = o;
! 		_strbuf._cnt = 32767;  		/* some big number */
! 		_doprnt(buf, & args, &_strbuf);
! 		putc('\0', &_strbuf);
! 	}
  	c = strlen(outline);
  	if (c > MAXLINE)
  		c = MAXLINE;

