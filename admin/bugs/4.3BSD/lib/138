From blia!irving@uunet.UU.NET  Mon Nov  7 20:42:20 1988
Date: Mon, 7 Nov 88 17:41:20 PST
From: blia!irving@uunet.UU.NET (Irving Reid)
Subject: 4.3 BSD Vax C Compiler generates signed comparisons of char pointers
Index: lib/pcc 4.3BSD

Description:
	The 4.3 C compiler generates signed comparisons of char *
	variables.  Normally this isn't a problem, since Vax 4.3 doesn't
	let programs into negative addresses.  However, I got bit when I
	tried to scan the stack for a garbage collector.  The following
	code is a bit twisted, because the original needed to be portable to
	systems which can put pointers on 2 byte boundaries (like Suns).

	I can work around the problem by changing the way I calculate
	the top of memory, but that won't help the next person.

Repeat-By:

	#define MEM_TOP	0x80000000
	#define ALIGNMENT	4
	#define WORDSIZE	4

	main()
	{
		register char *sweep, *top;

		top = MEM_TOP - WORDSIZE;

		/* normally sweep would start at the bottom of the stack */
		for(sweep = 0x7ffffff0; sweep <= top; sweep += ALIGNMENT)
		{
			printf("sweep = %lx, top = %lx\n", sweep, top);
			/* do things with *sweep */
		}
		exit(0);
	}

=============================================
From: donn@cs.utah.edu (Donn Seeley)
To: uunet!blia!irving@cs.utah.edu
Subject: 4.3 BSD Vax C Compiler generates signed comparisons of char pointers

Actually the top of the user stack on 4.3 machines isn't at 0x800000000
anyway, it's at 0x80000000 - ctob(UPAGES); this was one of the reasons
why signed comparisons of pointers 'didn't matter'.  In any case the
new 4.3-tahoe compiler has unsigned comparisons of pointers.

Donn

