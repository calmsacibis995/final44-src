From jak@okeeffe.Berkeley.EDU  Thu Jul 20 08:58:13 1989
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.61/1.29)
	id AA15717; Thu, 20 Jul 89 08:58:13 -0700
Received: from okeeffe.Berkeley.EDU by ucbvax.Berkeley.EDU (5.61/1.37)
	id AA14777; Thu, 20 Jul 89 08:56:56 -0700
Received: by okeeffe.Berkeley.EDU (5.61/1.29)
	id AA15712; Thu, 20 Jul 89 08:58:08 -0700
Date: Thu, 20 Jul 89 08:58:08 -0700
From: jak@okeeffe.Berkeley.EDU (John A. Kunze)
Message-Id: <8907201558.AA15712@okeeffe.Berkeley.EDU>
Subject: C compiler uses movl to move bytes
Index: lib 4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Description:
	The C compiler generates movl instructions when you only want to move
	bytes at a time.  Maybe there's a way to tell the compiler not to use
	movl, but I don't know it.  If the data you're moving is unaligned
	and the architecture cares, you get a bus error.

Repeat-By:
	I was trying to copy an un-aligned long into aligned storage, so I
	tried using bcopy(src, dst, 4) to copy 4 bytes.  Bcopy correctly
	checks to see if the src and dst are aligned and branches to C code
	that will hopefully copy bytes instead of longs.  The compiler uses
	movl in either case.

	To see this, just cc -S /usr/src/lib/libc/string/bcopy.c and compare
	the C code with the assembler output.

 	orl3	r11,r12,r0	if (((int)src | (int)dst | length) & 3)
 	orl2	r10,r0			do	/* copy by bytes */
 	bitl	$3,r0				*dst++ = *src++;
 	jeql	L18			while (--length);
 L21:				else {
 	movl	(r12),(r11)		length >>= 2;
 	addl2	$4,r12			do	/* copy by longs */
 	addl2	$4,r11			  *((long *)dst)++ = *((long *)src)++;
 L20:					while (--length);
 	decl	r10		}
 	jneq	L21
 L19:
 	jbr 	L22
 L18:
 	shar	$2,r10,r10
 L25:
 	movl	(r12),(r11)
 	addl2	$4,r12
 	addl2	$4,r11
 L24:
 	decl	r10
 	jneq	L25

