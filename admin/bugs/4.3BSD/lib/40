From casey@vangogh.berkeley.edu  Wed Jan 21 01:35:02 1987
Date: Wed, 21 Jan 87 01:34:37 PST
From: casey@vangogh.berkeley.edu (Casey Leedom)
Subject: C versions of insque and remque
Index: lib/libc/gen 4.3BSD

Description: 
	Seeing as there aren't any C versions of insque and remque in the
	standard library and seeing as I had some laying about ...
Fix: 

#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create:
#	insque.c
#	remque.c
# This archive created: Wed Jan 21 01:33:58 1987
export PATH; PATH=/bin:/usr/bin:$PATH
if test -f 'insque.c'
then
	echo shar: "will not over-write existing file 'insque.c'"
else
cat << \SHAR_EOF > 'insque.c'
/*
 * Copyright (c) 1980 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@(#)insque.c	1.1 (Berkeley) 1/19/87";
#endif LIBC_SCCS and not lint

/*
 * insque -- vax insque instruction
 *
 * NOTE: this implementation is non-atomic!!
 */

struct vaxque {		/* queue format expected by VAX queue instructions */
	struct vaxque	*vq_next;
	struct vaxque	*vq_prev;
};

insque(e, prev)
	register struct vaxque *e, *prev;
{
	e->vq_prev = prev;
	e->vq_next = prev->vq_next;
	prev->vq_next->vq_prev = e;
	prev->vq_next = e;
}
SHAR_EOF
fi
if test -f 'remque.c'
then
	echo shar: "will not over-write existing file 'remque.c'"
else
cat << \SHAR_EOF > 'remque.c'
/*
 * Copyright (c) 1980 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@(#)remque.c	1.1 (Berkeley) 1/19/87";
#endif LIBC_SCCS and not lint

/*
 * remque -- vax remque instruction
 *
 * NOTE: this implementation is non-atomic!!
 */

struct vaxque {		/* queue format expected by VAX queue instructions */
	struct vaxque	*vq_next;
	struct vaxque	*vq_prev;
};

remque(e)
	register struct vaxque *e;
{
	e->vq_prev->vq_next = e->vq_next;
	e->vq_next->vq_prev = e->vq_prev;
}
SHAR_EOF
fi
exit 0
#	End of shell archive
