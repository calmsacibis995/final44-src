From elsie!ado@seismo.CSS.GOV Sun Jun 14 17:09:13 1987
Date: Sun, 14 Jun 87 14:10:26 EDT
From: elsie!ado@seismo.CSS.GOV (Arthur David Olson)
Subject: Re:  further info on C compiler bug
Index: lib 4.3BSD

The simplest code I've been able to find that shows up the problem is:

	double *	p;

	double
	func()
	{
		return (*p)++;
	}

(Look Ma, no structures.)  Feed the above through /lib/ccom and you get
(in part) this output:

	L17:
		.double	0d1.00000000000000000000e+00
		.text
		movd	*_p,r0
		addd2	L17,r0
		subd2	L17,r0
		ret
		ret

Note that p doesn't get set at all!

The cheap way out might be to make this addition to the function "setincr" in
the file "pcc/order.c":

	setincr( p ) register NODE *p; {
		p = p->in.left;
	#ifndef ASWAS
		if (p->in.type == FLOAT || p->in.type == DOUBLE)
			return 0;
	#endif /* !ASWAS */
		if( p->in.op == UNARY MUL ){
			offstar( p );
			return( 1 );
			}
		return( 0 );
		}

With the above change in place, this code is produced by "ccom":

	L17:
		.double	0d1.00000000000000000000e+00
		.text
		addd2	L17,*_p
		movd	*_p,r0
		subd2	L17,r0
		ret
		ret

Which is right but suboptimal.  To get the "right" code here--where something
such as
		movd	*_p,r0
		addd2	L17,*_p
or
		movd	*_p,r0
		addd3	L17,r0,*_p
or
		movd	*_p,r0
		addd3	r0,L17,*_p

is what's "right"--I think you'd have to add a "ZD" template to "table.c" for
floating point incrementation, and also teach zzzcode to spit out one of the
three "right" second lines.

Note well:  I've yet to test the above change to "setincr" to see if it
introduces other, new bugs.
-- 
	UUCP: ..seismo!elsie!ado	   ARPA: elsie!ado@seismo.CSS.GOV
	     Elsie and Ado are trademarks of Borden, Inc. and Ampex.

