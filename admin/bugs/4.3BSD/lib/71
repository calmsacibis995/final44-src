From @relay.cs.net,@tektronix.tek.com:richl@tektronix.tek.com  Thu Jun 25 04:31:15 1987
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.58/1.14)
	id AA07246; Thu, 25 Jun 87 04:31:15 PDT
Received: by ucbvax.Berkeley.EDU (5.57/1.26)
	id AA17922; Thu, 25 Jun 87 03:52:28 PDT
Received: from relay2.cs.net by RELAY.CS.NET id aa02370; 25 Jun 87 6:45 EDT
Received: from tektronix.tek.com by RELAY.CS.NET id aa18366; 25 Jun 87 6:40 EDT
Received: by tektronix.TEK.COM (5.51/6.23)
	id AA04016; Thu, 25 Jun 87 03:29:20 PDT
Date: Thu, 25 Jun 87 03:29:20 PDT
From: richl <@relay.cs.net,@tektronix.tek.com:richl@tektronix.tek.com (Rick Lindsley)>
Message-Id: <8706251029.AA04016@tektronix.TEK.COM>
Subject: libmp.a has some major shortcomings which makes it virtually unusable
Index: 	lib/libmp 4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU
Source-Info:  From (or Sender) name not authenticated.

Description:
	The multiple precision library (mp) does not consistently represent
	numbers in the same way. Several of the routines assume that they
	ARE represented in a coherent fashion, and this leads to such
	amusing (!) actions as discovering that 0 != 0, and having a
	negative zero.

	In addition, the routine itom() can only handle numbers up to
	32767, contrary to the documentation, which states that it can
	handle an int.

	Lastly, I include code which tightens up the input routine m_in()
	a bit, and also allows m_in() and m_out() both to use hex.

	I've also an updated man page, if you are interested. (Not included
	here.) It just describes the new input restrictions. In brief:

		<optional white space><optional sign><digits>
	
	A number is immediately terminated by any non-digit, non-digit
	being relative to the current radix. New options to m_in() and
	m_out() allow a more flexible use and interpretation of newlines.

Repeat-By:
	Try the following:

	#include <mp.h>

	main()
	{
		MINT *a, *b;

		a = itom(1); b = itom(0);
		msub(a,a,a);				/* a is now zero */
		printf("Enter b: "); min(b);
		printf("b is "); mout(b);
		if (mcmp(a,b)) printf("Heh heh\n");

		/* now confuse itom() */
		a = itom(40000);
		mout(a);				/* heh heh */
	}

	Enter 0 at the indicated point. Better yet, enter -0. Also, note the
	output of mout() with a number > 32767.

Fix:
	Here are diffs to madd.c, mdiv.c, mout.c, and util.c:

*** /usr/src/usr.lib/libmp/madd.c	Tue Apr 30 12:02:54 1985
--- /usr/tek/src/lib/libmp/madd.c	Thu Jun 25 01:18:09 1987
***************
*** 6,11 ****
--- 6,12 ----
  
  #ifndef lint
  static char sccsid[] = "@(#)madd.c	5.1 (Berkeley) 4/30/85";
+ static char *RCSid = "$Header: madd.c,v 1.1 87/06/25 01:18:08 richl Exp $";
  #endif not lint
  
  #include <mp.h>
***************
*** 41,48 ****
  	}
  	else c->len=a->len;
  	c->val=cval;
! 	if(c->len==0) shfree(cval);
! 	return;
  }
  madd(a,b,c) struct mint *a,*b,*c;
  {	struct mint x,y,z;
--- 42,48 ----
  	}
  	else c->len=a->len;
  	c->val=cval;
! 	mcan(c);
  }
  madd(a,b,c) struct mint *a,*b,*c;
  {	struct mint x,y,z;
***************
*** 113,119 ****
  					else c->len= -i-1;
  					return;
  				}
! 	shfree(c->val);
  	return;
  }
  msub(a,b,c) struct mint *a,*b,*c;
--- 113,119 ----
  					else c->len= -i-1;
  					return;
  				}
! 	shfree(c->val); c->val = (short *) 0;
  	return;
  }
  msub(a,b,c) struct mint *a,*b,*c;

*** /usr/src/usr.lib/libmp/mdiv.c	Tue Apr 30 12:02:55 1985
--- /usr/tek/src/lib/libmp/mdiv.c	Thu Jun 25 01:18:10 1987
***************
*** 6,11 ****
--- 6,12 ----
  
  #ifndef lint
  static char sccsid[] = "@(#)mdiv.c	5.1 (Berkeley) 4/30/85";
+ static char *RCSid = "$Header: mdiv.c,v 1.1 87/06/25 01:18:10 richl Exp $";
  #endif not lint
  
  #include <mp.h>
***************
*** 74,80 ****
  		sdiv(a,b->val[0],q,r->val);
  		if(r->val[0]==0)
  		{	shfree(r->val);
! 			r->len=0;
  		}
  		else r->len=1;
  		return;
--- 75,81 ----
  		sdiv(a,b->val[0],q,r->val);
  		if(r->val[0]==0)
  		{	shfree(r->val);
! 			r->len=0; r->val=(short *)0;
  		}
  		else r->len=1;
  		return;
***************
*** 110,116 ****
  	qq=a->len-n+1;
  	if(qq>0 && qval[qq-1]==0) qq -= 1;
  	q->len=qq;
! 	if(qq==0) shfree(qval);
  	if(x.len!=0) xfree(&u);
  	xfree(&v);
  	return;
--- 111,120 ----
  	qq=a->len-n+1;
  	if(qq>0 && qval[qq-1]==0) qq -= 1;
  	q->len=qq;
! 	if(qq==0)
! 	{	shfree(qval);
! 		q->val=(short *)0;
! 	}
  	if(x.len!=0) xfree(&u);
  	xfree(&v);
  	return;

*** /usr/src/usr.lib/libmp/mout.c	Thu Mar 13 18:59:21 1986
--- /usr/tek/src/lib/libmp/mout.c	Thu Jun 25 02:01:38 1987
***************
*** 6,19 ****
  
  #ifndef lint
  static char sccsid[] = "@(#)mout.c	5.2 (Berkeley) 3/13/86";
  #endif not lint
  
  #include <stdio.h>
  #include <mp.h>
! m_in(a,b,f) MINT *a; FILE *f;
  {	MINT x,y,ten;
  	int sign,c;
! 	short qten,qy;
  	xfree(a);
  	sign=1;
  	ten.len=1;
--- 6,21 ----
  
  #ifndef lint
  static char sccsid[] = "@(#)mout.c	5.2 (Berkeley) 3/13/86";
+ static char *RCSid = "$Header: mout.c,v 1.1 87/06/25 01:18:11 richl Exp $";
  #endif not lint
  
  #include <stdio.h>
  #include <mp.h>
! m_in(a,b,f,flag) MINT *a; FILE *f;
  {	MINT x,y,ten;
  	int sign,c;
! 	short qten,qy,started=0;
! 	if(b<2 || b>16) return(1);
  	xfree(a);
  	sign=1;
  	ten.len=1;
***************
*** 25,56 ****
  	while((c=getc(f))!=EOF)
  	switch(c)
  	{
! 	case '\\':	(void)getc(f);
! 		continue;
! 	case '\t':
! 	case '\n': a->len *= sign;
! 		xfree(&x);
! 		return(0);
  	case ' ':
! 		continue;
! 	case '-': sign = -sign;
! 		continue;
! 	default: if(c>='0' && c<= '9')
  		{	qy=c-'0';
! 			mult(&x,&ten,a);
  			madd(a,&y,a);
  			move(a,&x);
  			continue;
  		}
  		else
  		{	VOID ungetc(c,stdin);
! 			a->len *= sign;
! 			return(0);
  		}
  	}
  	return(EOF);
  }
! m_out(a,b,f) MINT *a; FILE *f;
  {	int sign,xlen,i;
  	short r;
  	MINT x;
--- 27,81 ----
  	while((c=getc(f))!=EOF)
  	switch(c)
  	{
! 	case '-': if(!started)
! 		{	sign = -sign;
! 			continue;
! 		}
! 		/* else fall through */
  	case ' ':
! 	case '\t':
! 		if(!started) continue;
! 		/* else fall through */
! 	case '\n':
! 		if(started) goto ret;
! 		if(!flag)
! 		{	a->len=0;
! 			a->val=(short *)0;
! 		}
! 		else continue;
! 	case 'a': case 'b':
! 	case 'c': case 'd':
! 	case 'e': case 'f':
! 		if(c-'a'+10>=b)
! 		    goto ret;
! 		qy=c-'a'+10;
! 		goto addit;
! 	case 'A': case 'B':
! 	case 'C': case 'D':
! 	case 'E': case 'F':
! 		if(c-'A'+10>=b)
! 		    goto ret;
! 		qy=c-'A'+10;
! 		goto addit;
! 	default: if(c>='0' && c<= '9' && c-'0'<b)
  		{	qy=c-'0';
! 		addit:	mult(&x,&ten,a);
  			madd(a,&y,a);
  			move(a,&x);
+ 			started++;
  			continue;
  		}
  		else
  		{	VOID ungetc(c,stdin);
! 			goto ret;
  		}
  	}
  	return(EOF);
+ ret:	a->len *= sign;
+ 	xfree(&x);
+ 	return(0);
  }
! m_out(a,b,f,nl) MINT *a; FILE *f;
  {	int sign,xlen,i;
  	short r;
  	MINT x;
***************
*** 57,62 ****
--- 82,88 ----
  	char *obuf, *malloc();
  	register char *bp;
  	sign=1;
+ 	if (b<2||b>16) return;
  	xlen=a->len;
  	if(xlen<0)
  	{	xlen= -xlen;
***************
*** 63,69 ****
  		sign= -1;
  	}
  	if(xlen==0)
! 	{	fprintf(f,"0\n");
  		return;
  	}
  	x.len=xlen;
--- 89,96 ----
  		sign= -1;
  	}
  	if(xlen==0)
! 	{	putc('0',f);
! 		if(nl) putc('\n',f);
  		return;
  	}
  	x.len=xlen;
***************
*** 75,86 ****
  	while(x.len>0)
  	{	for(i=0;i<10&&x.len>0;i++)
  		{	sdiv(&x,(short)b,&x,&r);
! 			*bp--=r+'0';
  		}
  		if(x.len>0) *bp--=' ';
  	}
  	if(sign==-1) *bp--='-';
! 	fprintf(f,"%s\n",bp+1);
  	free(obuf);
  	FREE(x)
  	return;
--- 102,115 ----
  	while(x.len>0)
  	{	for(i=0;i<10&&x.len>0;i++)
  		{	sdiv(&x,(short)b,&x,&r);
! 			if (r>9) *bp--=r+'A'-10;
! 			else *bp--=r+'0';
  		}
  		if(x.len>0) *bp--=' ';
  	}
  	if(sign==-1) *bp--='-';
! 	fprintf(f,"%s",bp+1);
! 	if(nl) putc('\n',f);
  	free(obuf);
  	FREE(x)
  	return;
***************
*** 123,151 ****
  	if(qlen && qval[qlen-1]==0) qlen--;
  	q->len=qlen;
  	q->val=qval;
! 	if(qlen==0) shfree(qval);
  	return;
  }
  min(a) MINT *a;
  {
! 	return(m_in(a,10,stdin));
  }
  omin(a) MINT *a;
  {
! 	return(m_in(a,8,stdin));
  }
  mout(a) MINT *a;
  {
! 	m_out(a,10,stdout);
  }
  omout(a) MINT *a;
  {
! 	m_out(a,8,stdout);
  }
  fmout(a,f) MINT *a; FILE *f;
! {	m_out(a,10,f);
  }
  fmin(a,f) MINT *a; FILE *f;
  {
! 	return(m_in(a,10,f));
  }
--- 152,183 ----
  	if(qlen && qval[qlen-1]==0) qlen--;
  	q->len=qlen;
  	q->val=qval;
! 	if(qlen==0)
! 	{	shfree(qval);
! 		q->val=(short *)0;
! 	}
  	return;
  }
  min(a) MINT *a;
  {
! 	return(m_in(a,10,stdin,0));
  }
  omin(a) MINT *a;
  {
! 	return(m_in(a,8,stdin,0));
  }
  mout(a) MINT *a;
  {
! 	m_out(a,10,stdout,1);
  }
  omout(a) MINT *a;
  {
! 	m_out(a,8,stdout,1);
  }
  fmout(a,f) MINT *a; FILE *f;
! {	m_out(a,10,f,1);
  }
  fmin(a,f) MINT *a; FILE *f;
  {
! 	return(m_in(a,10,f,0));
  }

*** /usr/src/usr.lib/libmp/util.c	Tue Apr 30 12:02:58 1985
--- /usr/tek/src/lib/libmp/util.c	Thu Jun 25 01:18:15 1987
***************
*** 6,11 ****
--- 6,12 ----
  
  #ifndef lint
  static char sccsid[] = "@(#)util.c	5.1 (Berkeley) 4/30/85";
+ static char *RCSid = "$Header: util.c,v 1.1 87/06/25 01:18:14 richl Exp $";
  #endif not lint
  
  char *malloc();
***************
*** 50,56 ****
  #endif
  	if(c->len==0) return;
  	shfree(c->val);
! 	c->len=0;
  	return;
  }
  mcan(a) MINT *a;
--- 51,57 ----
  #endif
  	if(c->len==0) return;
  	shfree(c->val);
! 	c->len=0; c->val = (short *) 0;
  	return;
  }
  mcan(a) MINT *a;
***************
*** 63,90 ****
  	{	xfree(a);
  		return;
  	}
  	if(a->len > 0) a->len=j;
  	else a->len = -j;
  }
  MINT *itom(n)
  {	MINT *a;
  	a=(MINT *)xalloc(2,"itom");
! 	if(n>0)
! 	{	a->len=1;
! 		a->val=xalloc(1,"itom1");
! 		*a->val=n;
! 		return(a);
! 	}
! 	else if(n<0)
! 	{	a->len = -1;
! 		a->val=xalloc(1,"itom2");
! 		*a->val= -n;
! 		return(a);
! 	}
  	else
  	{	a->len=0;
! 		return(a);
  	}
  }
  mcmp(a,b) MINT *a,*b;
  {	MINT c;
--- 64,98 ----
  	{	xfree(a);
  		return;
  	}
+ 	a->val = (short *)realloc(a->val,j*sizeof(short));
  	if(a->len > 0) a->len=j;
  	else a->len = -j;
  }
  MINT *itom(n)
  {	MINT *a;
+ 	int negative=0;
  	a=(MINT *)xalloc(2,"itom");
! 	if (n)
! 	{	if(n<0)
! 		{	negative++;
! 			n = -n;
! 		}
! 		if(n&0xc0000000) a->len=3;
! 		else if(n&0x3fff8000) a->len=2;
! 		else a->len=1;
! 
! 		a->val=xalloc(a->len,"itom1");
! 
! 		a->val[0] = n & 0x7fff;
! 		if(a->len > 1) a->val[1] = (n >> 15) & 0x7fff;
! 		if(a->len > 2) a->val[2] = (n >> 30) & 0x3;
! 		if(negative) a->len = -a->len;
! 		}
  	else
  	{	a->len=0;
! 		a->val=(short *)0;
  	}
+ 	return(a);
  }
  mcmp(a,b) MINT *a,*b;
  {	MINT c;
