From ulysses!ggs@ucbvax.Berkeley.EDU  Fri Aug 21 10:49:46 1987
From: ulysses!ggs@ucbvax.berkeley.edu
To: ucbvax!okeeffe.berkeley.edu!tahoe-bugs
Subject: Register use conventions in tahoe ccom output
Date: Fri, 21 Aug 87 13:38:56 EDT
Index:	lib/pcc 4.3BSD

Description:
	Register use conventions may be confused in the tahoe C
	compiler and/or some of the assembly language code in libc.a.
Repeat-By:
	Code inspection.  I note that most of the assembly language
	code in /usr/src/lib/libc/tahoe/gen sets a procedure entry
	mask of zero, which differs from the values used in the
	CCI 4.2BSD distribution.  I also note that the following
	C program

		struct foo
		{
			char	a[100];
		};

		main()
		{
			struct foo bar, baz;
			bar = baz;
		}

	generates the following assembly language

		LL0:
			.data
			.text
			.align	1
			.globl	_main
		_main:
			.word	L12
			jbr 	L14
		L15:
			subl3	$252,fp,r0
			movab	-152(fp),r1
			movab	(r0),r0
			movl	$100,r2
			movblk
			ret#2
			.set	L12,0x4
		L14:
			subl3	$252,fp,sp
			jbr 	L15
			.data

	Note that the entry mask saves r2, which is the old CCI
	convention.  Help!  What do I believe?  I know that the
	VAX compiler assumes r0 through r5 are scratch and that
	the CCI 4.2BSD compiler assumes that r0 and r1 are the
	only scratch registers.  Have you taught the 4.3BSD tahoe
	compiler to assume that r2 through r5 are destroyed by
	function calls, have you just missed a few cases where
	registers used to be preserved and no longer need to be,
	or are most of the assembly language functions in libc.a
	broken?

	If you are taking votes, I prefer the r0 -> r5 scratch
	convention.
