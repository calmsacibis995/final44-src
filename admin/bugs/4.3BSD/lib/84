From uwvax!seismo!pilchuck!dataio!braman@ucbvax.Berkeley.EDU  Mon Aug 31 18:27:16 1987
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.58/1.14)
	id AA05249; Mon, 31 Aug 87 18:27:16 PDT
Received: by ucbvax.Berkeley.EDU (5.58/1.27)
	id AA07362; Mon, 31 Aug 87 18:26:42 PDT
Received: from seismo.UUCP by spool.wisc.edu; Mon, 31 Aug 87 20:22:29 CDT
Received: from pilchuck!dataio.UUCP by seismo.CSS.GOV (5.54/1.14) with UUCP 
	id AA08682; Mon, 31 Aug 87 21:14:31 EDT
Received: from pilchuck.UUCP by uunet.UU.NET (5.54/1.14) with UUCP 
	id AA10996; Mon, 31 Aug 87 21:09:14 EDT
Received: by pilchuck.Data-IO.COM (smail2.3)
	id AA24591; 31 Aug 87 13:02:13 PDT (Mon)
Received: by dataio.Data-IO.COM (5.51/UUCP-Project/rel-1.0/11-14-86)
	id AA22715; Mon, 31 Aug 87 12:51:40 PDT
Date: Mon, 31 Aug 87 12:51:40 PDT
From: uwvax!seismo!dataio.data-io.com!braman@ucbvax.Berkeley.EDU (Rick Braman)
Message-Id: <8708311951.AA22715@dataio.Data-IO.COM>
Subject: fscanf no longer works with the following syntax: %[^\0
Index: 	lib/libc/stdio/scanf.c   4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU
To: uwvax!berkeley.edu!4bsd-bugs

Description:
	
	 We were using the left bracket '[' to read NULL terminated 
	 strings from binary files.  "%[^\0" used to scan until a 
	 NULL was encountered.  This is no longer working using 
	 fscanf, but appears to work fine in sscanf.
	 fscanf reads past the NULL until a newline is found.
	 Since there are no newlines in the binary file, the
	 scan buffer is overrun.

Repeat-By:
	
	#include <stdio.h>
	
	char *s = " this ok\0bad\0newline\n9";
					/* data to be scanned */
	main()
    	{
    	int i;
    	FILE *fp;
    	char *b;
	
    	fprintf(stdout,"Using sscanf to read a NULL terminated string\n");
    	b = "abcdefghijklmnopqrstuvwxyz";
					/* initialize the buffer to detect */
					/* any over flows		   */
    	sscanf(s," %[^\0]",b);	/* scan upto the NULL skipping */
				/* any leading white space */
    	fprintf(stdout,"number of chars (should be 7) %d\n", strlen(b));
    	fprintf(stdout,"resulting string (this ok) %s\n",b);
    	fprintf(stdout,"buffer should contain letters i-z\n");
    	for(i=0;i<26;i++)		/* verify the buffer has not be */
		{			/* been over written */
		if(b[i] == '\0')
	    	{
	    	fputc('\\',stdout);
	    	fputc('0',stdout);
	    	}
		else
	    	fputc(b[i],stdout);	/* over written */
		};
    	fputc('\n',stdout);
	
    	fprintf(stdout,"\nUsing fscanf to read a NULL terminated string\n");
    	b = "abcdefghijklmnopqrstuvwxyz";
					/* initialize the buffer to detect */
					/* any over flows		   */
    	fp = fopen("test.f","w");	/* open a file to scan from */	
    	fwrite(s,1,20,fp);		/* output the data to be scanned */
    	fclose(fp);
    	fopen("test.f","r");	/* reopen the file to scan it */
    	fscanf(fp," %[^\0]",b);	/* scan upto a NULL skipping */
				/* any leading white space */
    	fprintf(stdout,"number of chars (should be 7) %d\n", strlen(b));
    	fprintf(stdout,"resulting string (this ok) %s\n",b);
    	fprintf(stdout,"buffer should contain letters i-z\n");
    	for(i=0;i<26;i++)		/* check the contents of the buffer */
		{			/* to see if over written */
		if(b[i] == '\0')
	    	{
	    	fputc('\\',stdout);
	    	fputc('0',stdout);
	    	}
		else
	    	fputc(b[i],stdout);
		};
    	fputc('\n',stdout);
    	};
	
