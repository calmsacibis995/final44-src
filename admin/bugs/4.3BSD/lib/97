From uwvax!lll-winken!uunet!mnetor!maccs!dan@ucbvax.Berkeley.EDU  Fri Nov 13 03:12:08 1987
Date: Thu, 12 Nov 87 10:47:05 EST
From: uwvax!uunet!maccs!dan@ucbvax.Berkeley.EDU (Dan Trottier)
Subject: Short summary of the problem
Index: lib/libc/getusershell.c 4.3BSD
#Index: /usr/src/lib/libC/getusershell.c 4.3BSD   (After updates)
#Index:  /usr/src/bin/passwd.c 4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU
To: uwvax!BERKELEY.EDU!4bsd-bugs

Description:
	The chsh (passwd -s) will crash when a user other than
	root tries to change his default shell. Actually a segmentation
	fault occurs.
Repeat-By:
	As a normal user type "chsh".
Fix:
	I have included the patches to both passwd.c and getusershell.c
that have fixed the problem at my site. You are better able to determine
any unforseen side effects from these changes than I am. The change I made
to getusershell is obvious what is not obvious is what is really going on
here???

*** getusershell.c	Thu Nov 12 10:22:42 1987
--- getusershell.c.old	Thu Nov 12 10:35:53 1987
***************
*** 34,40 ****
  {
  	char *ret;
  
! 	if (curshell == NULL)
  		curshell = initshells();
  	ret = *curshell;
  	if (ret != NULL)
--- 34,40 ----
  {
  	char *ret;
  
! 	if (curshell != NULL)
  		curshell = initshells();
  	ret = *curshell;
  	if (ret != NULL)


*** passwd.c	Thu Nov 12 10:20:34 1987
--- passwd.c.old	Thu Nov 12 10:37:19 1987
***************
*** 50,61 ****
  char	*getusershell();
  extern	int errno;
  
- /*
-  * added global pointer "curshell" to fix bug with changing default user
-  * shell. Getusershell needs to know what this variable contains!!!
-  */
- char	*curshell;
- 
  main(argc, argv)
  	char *argv[];
  {
--- 50,55 ----
***************
*** 379,390 ****
  	if (u == 0) {
  		valid = newshell;
  	} else {
- 		/*
- 		 * curshell gets incremented to never never land in call to
- 		 * getusershell. This makes it reasonable again!
- 		 */
- 		curshell == NULL;
- 
  		for (valid = getusershell(); valid; valid = getusershell()) {
  			if (newshell[0] == '/') {
  				cp = valid;
--- 373,378 ----
------------------------------------------------------------------
Date: Sun, 15 Nov 87 18:49:07 EST
From: uwvax!uunet!maccs!dan@ucbvax.Berkeley.EDU (Dan Trottier)
Subject: Short summary of the problem
Index: 	/usr/src/lib/libC/gen/getusershell.c 4.3BSD
Index: 	/usr/src/bin/passwd.c 4.3BSD

Description:
	This bug report is an update to a previous bug report I sent.
	
	The command "passwd -s" will produce segmentation error when
	run by anyone other than root. In the previous bug report I
	failed to redefine "static char *curshell = NULL" in getuser-
	shell.c as "extern char *curshell". The following set of diffs
	are correct and should be used instead of my last ones.

Repeat-By:
	type "passwd -s" as a regular user

Fix:

	The following are patches to getusershell.c and passwd.c. The
	fixes I think are fairly understandable so I will not try to
	explain them here. Since getusershell.c is part of the standard
	C library I have not tracked down any side effect to other
	commands calling getusershell.c. I leave it up to you to find
	and correct any side effects.

*** getusershell.c.old	Thu Nov 12 10:35:53 1987
--- getusershell.c	Sun Nov 15 18:27:10 1987
***************
*** 23,29 ****
      { "/bin/sh", "/bin/csh", 0 };
  
  static char **shells, *strings;
! static char **curshell = NULL;
  extern char **initshells();
  
  /*
--- 23,29 ----
      { "/bin/sh", "/bin/csh", 0 };
  
  static char **shells, *strings;
! extern char **curshell; 
  extern char **initshells();
  
  /*
***************
*** 34,40 ****
  {
  	char *ret;
  
! 	if (curshell != NULL)
  		curshell = initshells();
  	ret = *curshell;
  	if (ret != NULL)
--- 34,40 ----
  {
  	char *ret;
  
! 	if (curshell == NULL)
  		curshell = initshells();
  	ret = *curshell;
  	if (ret != NULL)

*** passwd.c.old	Thu Nov 12 10:37:19 1987
--- passwd.c	Sun Nov 15 18:09:57 1987
***************
*** 50,55 ****
--- 50,61 ----
  char	*getusershell();
  extern	int errno;
  
+ /*
+  * added global pointer "curshell" to fix bug with changing default user
+  * shell
+  */
+ char	*curshell;
+ 
  main(argc, argv)
  	char *argv[];
  {
***************
*** 373,378 ****
--- 379,390 ----
  	if (u == 0) {
  		valid = newshell;
  	} else {
+ 		/*
+ 		 * curshell gets incremented to never never land in call to
+ 		 * getusershell. This makes it reasonable again!
+ 		 */
+ 		curshell = NULL;
+ 
  		for (valid = getusershell(); valid; valid = getusershell()) {
  			if (newshell[0] == '/') {
  				cp = valid;

