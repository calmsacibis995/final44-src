From aho@j.cc.purdue.edu  Thu Jan  5 19:30:09 1989
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.61/1.29)
	id AA02156; Thu, 5 Jan 89 19:30:09-0800
Received: from j.cc.purdue.edu by ucbvax.Berkeley.EDU (5.61/1.33)
	id AA29209; Thu, 5 Jan 89 19:28:18 PST
Received: by j.cc.purdue.edu (5.54/1.14)
	id AA21759; Thu, 5 Jan 89 22:28:37 EST
Date: Thu, 5 Jan 89 22:28:37 EST
From: aho@j.cc.purdue.edu (Scott Guthridge)
Message-Id: <8901060328.AA21759@j.cc.purdue.edu>
Subject: clearer man page for scandir(3)
Index: 	man/man3/scandir.3 4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Description:
	I revised the scandir(3) man page because I've had several
	questions from people about how to use it.  The old one is
	basically correct, but contains misleading declarations
	and no examples.  I don't think I've increased the length
	much compared to the increased usefulness to novice C
	programmers.

Fix:
	*** /tmp/,RCSt1008356	Thu Jan  5 15:11:34 1989
	--- scandir.3	Thu Jan  5 15:01:12 1989
	***************
	*** 12,23 ****
	  .nf
	  .B #include <sys/types.h>
	  .B #include <sys/dir.h>
	  .PP
	! .B scandir(dirname, namelist, select, compar)
	  .B char *dirname;
	! .B struct direct *(*namelist[]);
	! .B int (*select)();
	! .B int (*compar)();
	  .PP
	  .B alphasort(d1, d2)
	  .B struct direct **d1, **d2;
	--- 17,30 ----
	  .nf
	  .B #include <sys/types.h>
	  .B #include <sys/dir.h>
	+ .B extern int scandir();
	+ .B extern int alphasort();
	  .PP
	! .B scandir(dirname, namelist, Select, Compare)
	  .B char *dirname;
	! .B struct direct ***namelist;
	! .B int (*Select)();
	! .B int (*Compare)();
	  .PP
	  .B alphasort(d1, d2)
	  .B struct direct **d1, **d2;
	***************
	*** 29,58 ****
	  and builds an array of pointers to directory
	  entries using
	  .IR malloc (3).
	! It returns the number of entries in the array and a pointer to the
	! array through
	! .IR namelist .
	  .PP
	  The
	! .I select
	! parameter is a pointer to a user supplied subroutine which is called by
	  .I scandir
	  to select which entries are to be included in the array.
	  The select routine is passed a
	! pointer to a directory entry and should return a non-zero
	  value if the directory entry is to be included in the array.
	  If
	! .I select
	! is null, then all the directory entries will be included.
	  .PP
	  The
	! .I compar
	! parameter is a pointer to a user supplied subroutine which is passed to
	  .IR qsort (3)
	! to sort the completed array. If this pointer is null, the array is not sorted.
	  .I Alphasort
	  is a routine which can be used for the
	! .I compar
	  parameter to sort the array alphabetically.
	  .PP
	  The memory allocated for the array can be deallocated with
	--- 36,76 ----
	  and builds an array of pointers to directory
	  entries using
	  .IR malloc (3).
	! .I Scandir
	! fills in the pointer
	! .IR namelist
	! so that it points to the first element of the array, and
	! returns the number of entries in the array.  You must define
	! a pointer to pointer to
	! .I "struct direct"
	! and pass the address to
	! .I Scandir
	! for this to work.
	  .PP
	  The
	! .I Select
	! parameter is a pointer to a user supplied function called by
	  .I scandir
	  to select which entries are to be included in the array.
	  The select routine is passed a
	! pointer to a directory entry (see
	! .IR /usr/include/sys/dir.h)
	! and should return a non-zero
	  value if the directory entry is to be included in the array.
	  If
	! .I Select
	! is the null function pointer ((int (*)())0), then all the directory
	! entries will be included.
	  .PP
	  The
	! .I Compare
	! parameter is a pointer to a user supplied function which is passed to
	  .IR qsort (3)
	! to sort the completed array. If this pointer is the null function pointer
	! ((int (*)()0), the array is not sorted.
	  .I Alphasort
	  is a routine which can be used for the
	! .I Compare
	  parameter to sort the array alphabetically.
	  .PP
	  The memory allocated for the array can be deallocated with
	***************
	*** 60,71 ****
	  (see
	  .IR malloc (3))
	  by freeing each pointer in the array and the array itself.
	  .SH "SEE ALSO"
	  directory(3),
	  malloc(3),
	  qsort(3),
	  dir(5)
	- .SH DIAGNOSTICS
	- Returns \-1 if the directory cannot be opened for reading or if
	- .IR malloc (3)
	- cannot allocate enough memory to hold all the data structures.
	--- 78,143 ----
	  (see
	  .IR malloc (3))
	  by freeing each pointer in the array and the array itself.
	+ .SH DIAGNOSTICS
	+ .I Scandir
	+ returns \-1 if the directory cannot be opened for reading or if
	+ .IR malloc (3)
	+ cannot allocate enough memory to hold all the data structures.
	+ .SH "EXAMPLES"
	+ .PP
	+ The following program takes a single argument and lists all files
	+ in the current directory (in alphabetical order) that are
	+ prefixed with the given argument.  If you give it the empty string
	+ e.g. "", it will list all the files in the current directory.
	+ .br
	+ .sp 1
	+ .nf
	+ #include <sys/types.h>
	+ #include <sys/dir.h>
	+ #include <stdio.h>
	+ extern int scandir(), alphasort();
	+ 
	+ static char *pcPrefix;     /* select only files with this prefix   */
	+ 
	+ /*
	+  * select only files that begin with the prefix specified by pcPrefix
	+  */
	+ static int
	+ SelectFiles(pSD)
	+         struct direct *pSD;
	+ {
	+         return 0 == strncmp(pcPrefix, pSD->d_name, strlen(pcPrefix));
	+ }
	+ 
	+ int
	+ main(argc, argv)
	+         int argc;
	+         char **argv;
	+ {
	+         register int i;
	+         auto struct direct **ppSD;
	+         static char acFileName[] = ".";
	+         int iCount;
	+ 
	+         if (2 != argc) {
	+                 fprintf(stderr, "Usage: %s fileprefix\en", argv[0]);
	+                 exit(1);
	+         }
	+         pcPrefix = argv[1];
	+         if (-1 == (iCount = scandir(acFileName, & ppSD, SelectFiles, alphasort))) {
	+                 perror(acFileName);
	+                 exit(2);
	+         }
	+         for (i = 0; i < iCount; ++i) {  /* print and free each entry    */
	+                 printf("%s\en", ppSD[i]->d_name);
	+                 free((char *)ppSD[i]);
	+         }
	+         free((char *)ppSD);             /* free the array               */
	+         exit(0);
	+ }
	+ .fi
	  .SH "SEE ALSO"
	  directory(3),
	  malloc(3),
	  qsort(3),
	  dir(5)
