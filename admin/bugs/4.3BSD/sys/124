Path: seismo!rutgers!mit-eddie!uw-beaver!tektronix!tekcrl!terryl
From: terryl@tekcrl.TEK.COM
Newsgroups: comp.bugs.4bsd
Subject: Re: Bug in sys/vm_proc:expand with shrink
Index: sys/vm_proc.c 4.3BSD

In article <405@isieng.UUCP> chris@isieng.UUCP (Chris Horne) writes:
+In the kernel, the call to "newptes" at the end of "sys/vm_proc.c:expand" has 
+the wrong virtual address(page) when expand is called to do a shrink.
+This results in not invalidating the appropriate translation buffer entries.
+Based on hardware implementation, this can prevent bus errors from occuring 
+when a user program references the memory that was just released.
+
+Fix:
+
+*** vm_proc.c	Fri May 29 09:54:04 1987
+--- vm_proc.new.c	Fri May 29 09:56:27 1987
+***************
+*** 221,229 ****
+  	 * initialize zero fill on demand pte's.
+  	 */
+  	*(int *)&proto = PG_UW;
+! 	if (change < 0)
+  		change = -change;
+! 	else {
+  		proto.pg_fod = 1;
+  		((struct fpte *)&proto)->pg_fileno = PG_FZERO;
+  		cnt.v_nzfod += change;
+--- 221,230 ----
+  	 * initialize zero fill on demand pte's.
+  	 */
+  	*(int *)&proto = PG_UW;
+! 	if (change < 0) {
+  		change = -change;
+! 		v -= change;
+! 	} else {
+  		proto.pg_fod = 1;
+  		((struct fpte *)&proto)->pg_fileno = PG_FZERO;
+  		cnt.v_nzfod += change;

     Mea culpa, mea culpa!!! He is so right. We knew about this bug and fixed
it in June of 1984!!!! How did we find this??? Just like Mr Horne suggested:
weird virtual memory hardware. BUT, just for your grins, there's another bug
in the 4.2 version of expand: There is a check to see if the expand of one
segment would spill ptes into a page of ptes for the other segment. However,
the check is wrong. Below is a diff(NOTE: Your line numbers will NOT BE THE
SAME):

2c2
<  * $Header: vm_proc.c,v 1.3 84/03/17 15:28:39 terryl Exp $
---
>  * $Header: vm_proc.c,v 1.2 84/03/08 15:50:24 toddb Exp $
5,10d4
<  * Revision 1.3  84/03/17  15:28:39  terryl
<  * Fixed bug in expand. The check for whether an expand would overwrite ptes
<  * in the other segment was wrong. The old check was >= for data expansions
<  * and <= for stack expansions. It should have been > for data and < for
<  * stack expansions.
<  * 
195,199a189
< 	/*
< 	 * p0 now points to the next pte that would be allocated for data.
< 	 * p1 now points to the last pte in the stack (i.e. the one that
< 	 * contains the current user stack pointer.
< 	 */
219c210
< 		 * expand if p0+change would overwrite p1.
---
> 		 * expand if p0+change would spill into page containing p1.
221c212
< 		if (p0 + change > p1) {
---
> 		if (p0 + change >= p1) {
235c228
< 		 * expand if p1-change would overwrite p0.
---
> 		 * expand if p1-change would spill into page containing p0-1.
237c230
< 		if (p1 - change < p0) {
---
> 		if (p1 - change <= p0) {

     Next time, I'll try and remember to post our bug fixes.

				Terry Laskodi
				     of
				Tektronix

