From unido!gmdzi!mies@seismo.css.gov  Sun Jul 12 09:30:44 1987
Date: Sun, 12 Jul 87 15:44:17 -0100
From: unido!gmdzi!mies@seismo.css.gov (P. Mies )
Subject: panic: out of mbufs: map full
Index:  sys/sys/uipc_mbuf.c 4.3BSD

Description:
	Several times a day the System (VAX-11/780 with 4MB) crashes with
	"panic: out of mbufs: map full".
Repeat-By:
	using some large pipes (formatting a long text with "tbl | troff)
	or executing the following program several times:
	--------------------------------------------------------
	#include <stdio.h>

	#define NREAD  255
	#define NWRITE 257
	#define NBUFF  512
	#define NCOUNT 100

	main() {
		int i, pid, pip[2];
		char buff[NBUFF];
		if(pipe(pip)) {
		    fprintf(stderr, "Cannot open pipe\n");
		    exit(1);
		}
		if((pid=fork()) != 0) {
		    close(pip[1]);
		    if(pid < 0) {
			fprintf(stderr, "Cannot Fork(1)\n");
			exit(1);
		    }
		    i = 0;
		    while(read(pip[0], buff, NREAD) > 0) {
			i++;
			if((pid=fork()) != 0) {
			    if(pid < 0) fprintf(stderr, "Cannot Fork(2)\n");
			    else fprintf(stderr, "child %d\n", i);
			    exit(0);
			}
		    }
		    fprintf(stderr, "Father does exit\n");
		    exit(0);
		}
		close(pip[0]);
		i = 0;
		while(++i <= NCOUNT && write(pip[1], buff, NWRITE) == NWRITE) {
		}
		fprintf(stderr, "Child does exit\n");
		exit(0);
	}
	----------------------------------------------------------
Fix:
	???
	We tried to fix it with the following changes in uipc_mbuf.c:
	-------------------------------------------------------------
	97a98,112
	> /*
	>  * Must be called at splimp.
	>  */
	> m_expand(canwait)
	> 	int canwait;
	> {
	> 
	> 	if (m_clalloc(1, MPG_MBUFS, canwait) == 0)
	> 		goto steal;
	> 	return (1);
	> steal:
	> 	/* should ask protocols to free code */
	> 	return (0);
	> }
	> 
	149,150c164,171
	< 	if (m_clalloc(1, MPG_MBUFS, M_DONTWAIT) == 0) {
	< 		/* should ask protocols to free code */
	---
	> 	while (m_expand(canwait) == 0) {
	> 		if (canwait == M_WAIT) {
	> 			m_want++;
	> 			sleep((caddr_t)&mfree, PZERO - 1);
	> 		} else {
	> 			mbstat.m_drops++;
	> 			return (NULL);
	> 		}
	152,156c173
	< 	if (canwait == M_WAIT) while (mfree == NULL) {
	< 		m_want++;
	< 		sleep((caddr_t)&mfree, PZERO - 1);
	< 	}
	< #define m_more(x,y) (mbstat.m_drops++, (struct mbuf *)0)
	---
	> #define m_more(x,y) (panic("m_more"), (struct mbuf *)0)
	-------------------------------------------------------------
	but with this the system sometimes hangs in a deadlock when all
	mbufs are in use and no process can exit because exit needs an
	mbuf.
	This can be fixed too, but Ithink its not the best way.
	IS THERE ANY GENERAL FIX AVAILABLE?

Paul Mies, GMD, St.Augustin (Germany); mies@gmdzi.uucp
