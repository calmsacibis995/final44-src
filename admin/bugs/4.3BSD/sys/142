From chris@gyre.umd.edu  Tue Jul 21 06:58:31 1987
Date: Tue, 21 Jul 87 09:57:59 EDT
From: Chris Torek <chris@gyre.umd.edu>
Subject: traps before startup() cause int-stack-invalid aborts
Index: sys/vax/{locore.s,machdep.c},/sys/sys/subr_prf.c 4.3BSD

Description:
	Because the message buffer is mapped in startup(), an early
	trap (usually a hardware glitch; VMS bootstrap path on 8200s
	leaves a BI bus error waiting, though) causes an infinite
	recursion of traps until finally the interrupt stack rams into
	the rpb.  printf() calls putchar() which attempts to check
	msgbuf.msg_magic which traps which calls printf() . . . .

Repeat-By:
	It is very easy on an 8200, using VMB.EXE.  Other than that,
	forget it.

Fix:
	Oh lots.  One trick would be to check the valid bit in
	msgbufmap[0] inside putchar(), but this would be grotesque---
	as bad as the `#ifdef vax' that is already in there for this
	purpose, but does not work anyway.  Another possibility is to
	map msgbuf before turning on mapping: still gross.  Probably
	the best is to add one kernel global telling putchar that it is
	OK to write to msgbuf.  Drop it in msgbuf.h and set it to 1 in
	startup() after setting msgbufmap and zapping the TLB.

	(In the meantime, it suffices for me to ignore the one BI bus
	error that leaps out as soon as the `rei' in the startup code
	lowers the IPL....)

Chris
