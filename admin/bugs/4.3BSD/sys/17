Return-Path: <john@renoir.berkeley.edu>
Date: Tue, 13 May 86 18:10:31 PDT
From: john@renoir.berkeley.edu (John Coker)
Subject: strangeness with group/other permissions
Index: 	sys/sys/ufs_fio.c 4.3BSD

Description:
	   If group access fails on a file, other access is not even
	checked.  For example, if I, in the group of a file, try
	to read a file that isn't readable to the group, but is to
	everyone else, I am denied permission.

Repeat-By:
	> Script started on Tue May 13 17:54:30 1986
	> renoir <1> ls -lgs /usr/adm/wtmp
	>  372 --w----r--  1 root    staff   375372 May 13 17:54 /usr/adm/wtmp
	> renoir <2> cat !$
	> cat /usr/adm/wtmp
	> /usr/adm/wtmp: Permission denied
	> renoir <3> groups
	> tex wheel kmem staff imagen postscript
	> renoir <4> 
	> script done on Tue May 13 17:55:01 1986

Fix:
	Add code to access() to allow ``other'' access even if group
	access fails.  I read what the comment above access() says,
	but I think it's not the right way to do things, because of
	the above situation.  Now, I know that those are silly permissions,
	for the file to have, but one might as well do the right thing,
	it seems to me.


>>>>> Comment <<<<<
Return-Path: <munnari!kre@seismo.css.gov>
Date: 14 May 86 20:58:31 +1000 (Wed)
To: john@renoir.berkeley.edu
Subject: Re: strangeness with group/other permissions
Index: sys/sys/ufs_fio.c 4.3BSD
From: Robert Elz <munnari!kre@seismo.css.gov>

Description:
	What you want is ABSOLUTELY COMPLETELY TOTALLY the wrong
	thing to do.  The kernel does the right thing now.

Repeat-By:
	The permissions you showed on wtmp indicate that root can
	write the file, staff group has no access, and others have
	read access.  If the owner was anyone but root, they would
	have no read access.

	That's the way it shold be, it allows groups of people to be
	created who are restricted to not be able to access some file.
	We do that a lot, and there's no reason at all to remove that
	facility.

	There'd be no point in having the orthognal encodings for
	user/group/others if this wasn't the case, the protections
	could be encoded in many less bits (for an axample of how this
	can be done see the kernel/supervisor/executive/user read/write
	encodings of vax page table entries).

Fix:
	Leave it alone.
