From ddavis@monet.berkeley.edu  Sun Nov 15 16:09:09 1987
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.58/1.26)
	id AA12829; Sun, 15 Nov 87 16:09:09 PST
Received: from monet.Berkeley.EDU by ucbvax.Berkeley.EDU (5.58/1.26)
	id AA04743; Sun, 15 Nov 87 16:08:54 PST
Received: by monet.Berkeley.EDU (5.58/1.23)
	id AA00732; Sun, 15 Nov 87 16:08:49 PST
Date: Sun, 15 Nov 87 16:08:49 PST
From: ddavis@monet.berkeley.edu (ddavis)
Message-Id: <8711160008.AA00732@monet.Berkeley.EDU>
Subject: cltom() macro calculates wrong virtual address when CLBYTES > 1024
Index: sys 4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Description:
	In h/mbuf.h, when CLBYTES > 1024, MCLSHIFT is set such that macros
	using it calculate an incorrect virtual address.  Also I think that
	the calculation of NMBCLUSTERS should be based on the machine page
	size for portability.

Repeat-By:
	When m_clalloc() is called for the first time in sys/uipc_mbuf.c, an
	Mbmap pte index is allocated, then used in a call to cltom().  If
	CLBYTES > 1024, then the pte indexed is for a different page than
	what cltom() will calculate.  When the first mbuf is initialized a
	bit later in m_clalloc(), a panic will occur (MMU will fault).
Fix:
	I removed the #ifdefs and #defines that force MCL{SHIFT,OFSET,BYTES}
	to be the same as CL{SHIFT,OFSET,BYTES}.  For NMBCLUSTERS I changed
	the define so that a reasonable number of clusters are allocated on
	machines with pagesizes > 1K:

	#define	NMBCLUSTERS	(256*1024/CLBYTES)

