From chris@gyre.umd.edu  Thu Dec 24 18:16:34 1987
Date: Thu, 24 Dec 87 21:15:29 EST
From: Chris Torek <chris@gyre.umd.edu>
To: 4bsd-bugs@ucbvax.Berkeley.EDU, rad%puffin.uss.tek.com@relay.cs.net
Subject: Re:  standalone code doesn't work on microvaxen
Index: sys/vaxstand 4.3BSD

Now that I have a Microvax to play with (well, sort of), I have been
looking over these changes.  I have not yet tested anything, but I
think the diffs for srt0.c were wrong.  In particular, if I understand
it correctly, the code to do the relocation has some problems.  The
amount of code it moves is (loadbase+size) instead of just (size);
since VMB loads in at 10000, and movc3 ignores all but the low word,
this happens not to change anything.  You cannot just remove the add to
`aedata', however, since this affects the first bss clearing loop,
which would otherwise overwrite the code that is about to be moved!  It
seems better just to use a pc-relative addressing mode to find `entry',
so that the movc moves the running code no matter where it is, and
drop the first loop entirely.

Here is what I did.  I put the string routines in srt0.c since I can
make them shorter than cc can, and some of the boot code is dangerously
close to 7680 bytes.  I also dropped tpsrt0.o: since -DTP no longer
means anything to srt0.c, tpcopy can use relsrt0.o (in case on uVax)
and tpformat srt0.o.

RCS file: RCS/srt0.c,v
retrieving revision 1.2
diff -c2 -r1.2 srt0.c
*** /tmp/,RCSt1010591	Thu Dec 24 21:01:06 1987
--- srt0.c	Thu Dec 24 21:01:03 1987
***************
*** 30,36 ****
  
  entry:	.globl	entry
! 	.word	0x0
  	mtpr	$HIGH,$IPL		# just in case
  #ifdef REL
  	movl	$RELOC,sp
  #else
--- 30,52 ----
  
  entry:	.globl	entry
! 	nop; nop			# .word	0x0101
  	mtpr	$HIGH,$IPL		# just in case
+ 
  #ifdef REL
+ 	# we need to do special stuff on microvax II
+ 	mfpr	$SID,r0
+ 	extzv	$24,$8,r0,r0
+ 	cmpl	r0,$VAX_630
+ 	bneq	1f
+ 
+ 	/*
+ 	 * We were booted by VMB.  Use the physical address at
+ 	 * which we were loaded, not 0, as the origin for the
+ 	 * movc3 below.  We also need to pick up the boot flags from
+ 	 * the `Extended RPB' (see KA630 User's Manual, pp. 3-21).
+ 	 */
+ 	movl	0x30(r11),r11
+ 	movl	$9,r10			# device = ra(0,0)
+ 1:
  	movl	$RELOC,sp
  #else
***************
*** 38,41 ****
--- 54,61 ----
  #endif
  start:
+ #ifndef REL
+ 	/*
+ 	 * Clear bss segment
+ 	 */
  	movl	aedata,r0
  clr:
***************
*** 43,52 ****
  	cmpl	r0,sp
  	jlss	clr
! #ifdef REL
! 	movc3	aedata,*$0,(sp)
! /*
!  * Reclear bss segment separately from text and data
!  * since movc3 can't move more than 64K bytes
!  */
  dclr:
  	clrl	(r3)+
--- 63,73 ----
  	cmpl	r0,sp
  	jlss	clr
! #else
! 	/*
! 	 * `entry' below generates a pc-relative reference to the
! 	 * code, so this works no matter where we are now.
! 	 * Clear bss segment *after* moving text and data.
! 	 */
! 	movc3	aedata,entry,(sp)
  dclr:
  	clrl	(r3)+
***************
*** 119,123 ****
  	.word	1f-0b		# 6 is 8800
  	.word	1f-0b		# 7 is 610
! 	.word	1f-0b		# 8 is 630
  5:
  	mtpr	$0xf,$MCESR
--- 140,144 ----
  	.word	1f-0b		# 6 is 8800
  	.word	1f-0b		# 7 is 610
! 	.word	5f-0b		# 8 is 630
  5:
  	mtpr	$0xf,$MCESR
***************
*** 132,133 ****
--- 153,190 ----
  	movab	2b,(sp)
  	rei
+ 
+ # short assembly versions of strcmp, strcpy, and strlen
+ # that do not use special instructions
+ 	.globl	_strcmp
+ _strcmp:
+ 	.word	0
+ 	movq	4(ap),r0
+ 0:	cmpb	(r0),(r1)+
+ 	bneq	1f
+ 	tstb	(r0)+
+ 	bneq	0b
+ 	clrl	r0
+ 	ret
+ 1:	cvtbl	(r0),r0
+ 	cvtbl	-(r1),r1
+ 	subl2	r1,r0
+ 	ret
+ 
+ 	.globl	_strcpy
+ _strcpy:
+ 	.word	0
+ 	movq	4(ap),r0
+ 0:	movb	(r0)+,(r1)+
+ 	bneq	0b
+ 	movl	4(ap),r0
+ 	ret
+ 
+ 	.globl	_strlen
+ _strlen:
+ 	.word	0
+ 	movl	4(ap),r0
+ 0:	tstb	(r0)+
+ 	bneq	0b
+ 	decl	r0
+ 	subl2	4(ap),r0
+ 	ret
