Subject: shared text reference count
Index: sys 4.3BSD

Description:

Note 13       shared text reference count         
murphy@alberto                               4:09 pm  Jul  8, 1985

/* Written  8:43 am  Mar 27, 1985 by willcox@alberto in alberto:87bug */
/* ---------- "Nasties in reference counts in share" ---------- */
SHORT BUT DESCRIPTIVE ONE LINE TITLE:  (Don't type on this line)
	Nasties in reference counts in shared text.

DESCRIPTION OF PROBLEM:
	The kernel's "text" structure contains a pair of reference
	counts to record how many process are using that shared text.
	(One, x_count, counts total processes, one, x_ccount, counts
	how many are actually swapped in right now.)  There are two
	problems with them:

	First, they are declared as characters.  This means that no
	more than 255 processes can share a shared text image without
	there being trouble.  (That sounds like a lot, at least one
	benchmark program we have seems to be exceeding that.)

	Second, what checking for overflow that there is is flawed.
	The following appears in xalloc:

		if ((xp->x_count > 0 || (xp->x_iptr->i_mode&ISVTX)) && xp->x_iptr == ip) {

	On the vax, this means that no more than 128 processes will
	attach to the same non-sticky shared text.  The 129'th process
	to be execed will create its own image of the shared text
	segment.  However, since the Concept uses unsigned characters,
	even this safety net doesn't function.  Also, sticky text still
	has the potential of wrapping around on both machines.
	Furthermore, the routine procdup() increments x_count without
	any checks.

SAMPLE BROKEN OUTPUT:

HOW TO REPRODUCE THE PROBLEM:  (preferably a shell script)

SUGGESTED FIX:
	Simplest thing seems to be to change x_count and x_ccount to
	shorts.  We'd better check if there are any other one-byte
	reference counts lying around.

OTHER COMMENTS:

CURRENT WORKING DIRECTORY:
	/sys/sys

PATH:
	.:/mnt/willcox/.bin:/usr/new:/project/cell/bin:/usr/local:/usr/ucb:/bin:/usr/bin:/usr/games
/* End of text from alberto:87bug */

