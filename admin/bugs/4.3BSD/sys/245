From mccanne@helios.ee.lbl.gov  Sat Jul 14 14:02:15 1990
Received: from surf.ee.lbl.gov by okeeffe.Berkeley.EDU (5.63/1.41)
	id AA06024; Sat, 14 Jul 90 14:02:15 -0700
Received: by helios.ee.lbl.gov (5.64/1.39)
	id AA01953; Sat, 14 Jul 90 14:02:26 -0700
From: mccanne@helios.ee.lbl.gov (Steven McCanne)
Message-Id: <9007142102.AA01953@helios.ee.lbl.gov>
To: bugs@okeeffe.Berkeley.EDU
Cc: mccanne@helios.ee.lbl.gov, leres@helios.ee.lbl.gov
Index: sys/net/if.c 4.3BSD +FIX
Subject: bug in ifconf()
Date: Sat, 14 Jul 90 14:02:25 PDT


Description:
	The SIOCGIFCONF ioctl (ifconf()) terminates when the remaining
	buffer is exactly the size of an ifreq.  It should continue in 
	this case.

Repeat-By:
	struct ifreq ifr;
	struct ifconf ifc;

	ifc.ifc_len = sizeof(ifr);
	ifc.ifc_buf = (caddr_t)&ifr;
	ioctl(fd, SIOCGIFCONF, (char *)&ifc);

	/* Now ifc.ifc_len == 0 */

Fix:
	The loop condition in ifconf() "space > sizeof(ifr)" should
	be changed to "space >= sizeof(ifr)".

------
*** if.c.orig	Sat Jul 14 13:18:04 1990
--- if.c	Sat Jul 14 13:20:21 1990
***************
*** 16,22 ****
   * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
   *
!  *	@(#)if.c	7.13 (Berkeley) 6/28/90
   */
  
  #include "param.h"
--- 16,22 ----
   * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
   *
!  *	@(#)if.c	7.13++ (Berkeley) 6/28/90
   */
  
  #include "param.h"
***************
*** 550,556 ****
  
  	ifrp = ifc->ifc_req;
  	ep = ifr.ifr_name + sizeof (ifr.ifr_name) - 2;
! 	for (; space > sizeof (ifr) && ifp; ifp = ifp->if_next) {
  		bcopy(ifp->if_name, ifr.ifr_name, sizeof (ifr.ifr_name) - 2);
  		for (cp = ifr.ifr_name; cp < ep && *cp; cp++)
  			;
--- 550,556 ----
  
  	ifrp = ifc->ifc_req;
  	ep = ifr.ifr_name + sizeof (ifr.ifr_name) - 2;
! 	for (; space >= sizeof (ifr) && ifp; ifp = ifp->if_next) {
  		bcopy(ifp->if_name, ifr.ifr_name, sizeof (ifr.ifr_name) - 2);
  		for (cp = ifr.ifr_name; cp < ep && *cp; cp++)
  			;


