Return-Path: <casey@monet.berkeley.edu>
Date: Mon, 8 Sep 86 12:28:45 PDT
From: casey@monet.berkeley.edu (Casey Leedom)
Message-Id: <8609081928.AA12210@monet.Berkeley.EDU>
Subject: kill(2) doesn't allow SIGCONT to setuid children
Index: 	sys/sys/kern_sig.c 4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Description:  I'm implementing the 4.3 signal facilities in the 2.9 kernel.
	While I was looking at kill() in kern_sig.c I noticed a discrepancy
	between the protection checking for kill(), killpg1() and the manual
	page kill(2).

	Specifically the manual page states:

	     The sending and receiving processes must have the same
	     effective user ID, otherwise this call is restricted to the
	     super-user.  A single exception is the signal SIGCONT, which
	     may always be sent to any descendant of the current process.

	It's that last sentence which has my attention.  In kill() the
	following protection check is made:

		if (u.uid && u.uid != p->p_uid)
			u.u_error = EPERM;
		else
			psignal(p, uap->signo);

	However, in killpg1() the protection check is somewhat different:

		if (u.uid != 0 && u.uid != p->p_uid &&
		    (signo != SIGCONT || !inferior(p))) {
		    	if (!all)
				u.u_error = EPERM;
			continue;
		}

Repeat-By:  The following program demonstrates the problem (a non-root
	parent sending SIGCONT to a setuid child).

	main()
	{
		int	pid, status;

		if ((pid = fork()) == 0)
		{
			execl("/bin/mail", "mail", "casey", 0);
			puts("Can't execl");
			exit(1);
		}
		if (pid < 0)
		{
			puts("Can't fork");
			exit(1);
		}
		/*
		 * Wait for child to execute setuid object and assume new p->p_uid by
		 * sleeping for 10 seconds (not guaranteed to work, but easiest thing
		 * to do)
		 */
		sleep(10);
		status = kill(pid, 19);
		printf("kill(%d, SIGCONT) = %d\n", pid, status);
		if (status < 0)
			perror("kill");
		wait((int *)0);
		exit(0);
	}

Fix: Make the following change to sys/sys/kern_sig.c:

	*** kern_sig-bad.c	Mon Sep  8 12:23:23 1986
	--- kern_sig-good.c	Mon Sep  8 12:26:21 1986
	***************
	*** 206,212 ****
	  			u.u_error = ESRCH;
	  			return;
	  		}
	! 		if (u.u_uid && u.u_uid != p->p_uid)
	  			u.u_error = EPERM;
	  		else if (uap->signo)
	  			psignal(p, uap->signo);
	--- 206,213 ----
	  			u.u_error = ESRCH;
	  			return;
	  		}
	! 		if (u.u_uid && u.u_uid != p->p_uid &&
	! 		    (signo != SIGCONT || !inferior(p)))
	  			u.u_error = EPERM;
	  		else if (uap->signo)
	  			psignal(p, uap->signo);
