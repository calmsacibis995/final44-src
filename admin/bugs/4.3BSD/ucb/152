From jerry@csd4.milw.wisc.edu  Thu Dec  3 01:41:23 1987
From: Jerry Lieberthal <jerry@csd4.milw.wisc.edu>
To: tahoe-bugs@okeeffe.Berkeley.EDU
Subject: program generates an illegal upper address error
Index: ucb/pascal 4.3BSD

Description:
	The following program was compiled and generates an illegal upper
	address error.
Repeat-By:
	Just attempt to compile the source..

program assign2a (input,output);
{ Generates upper address compiler error at line 476}

     {This program reads in data about the employees of a company.
     This data consists of the sex of the person, their age, height,
     and weight.  This information is supposed to be given after
     the name of the department the person is working in.  This program
     takes this data and prints a table for each department telling
     the average height and weight for males and females in given age
     groups (1-16,17-29,30-39,40-49,and over 50).
       If there is an error in the data, the program gives an error
     message telling what the error was, and what line it was on.
     If there was an error in a line, that line of data is not used.

     Some errors may be, no department name given, age not between
     12 and 100, height not beigh between 62 and 100, or weight not
     between 80 and 350.

     program written by: Karen Bollmann
     Started on:March 10,1987
     input form: a data file
     written on: evax                            }


   const
	one             =1;
	zero            =0;
	LowCount        =1;
	HighCount       =10;
	MaxCharDept     =20;
	MinAge1         =0;
	MaxAge1         =16;
	MinAge2         =17;
	MaxAge2         =29;
	MinAge3         =30;
	MaxAge3         =39;
	MinAge4         =40;
	MaxAge4         =49;
	MinAge5         =50;
	MaxAge5         =90;
	Empty10         ='          ';
	Empty20         ='                    ';
	Blank           =' ';
	m               ='m';
	f               ='f';
        d               ='d';
	four            =4;



   type
	Department      =packed array[LowCount..MaxCharDept] of char;
			  {stores dept. name}
	Storage         =packed array[LowCount..HighCount] of char;
			  {stores sex,age, height,and weight}
	Number          =array[one..6]of integer;
	Average         =array[one..4] of real;
	List            =record
			   intage   :integer;
			   intheight   :integer;
			   intweight   :integer;
                         end;  {record}
     


   var
       ch               :char;
       Sex              :Storage;
       Height           :Storage;
       Weight           :Storage;
       Age              :Storage;
       IntegerAge       :integer;
       IntegerHeight    :integer;
       IntegerWeight    :integer;
       DepartmentName   :Department;
       ErrorCount       :integer;     {counts number of errors}
       LineCount        :integer;
       DeptGood         :boolean;
       EndOfFile        :boolean;
       NullFile         :boolean;
       GoodData         :boolean;
       Error            :boolean;

       AgeGroup1        :Number;
       AgeGroup2        :Number;
       AgeGroup3        :Number;
       AgeGroup4        :Number;
       AgeGroup5        :Number;

       Average1         :Average;
       Average2         :Average;
       Average3         :Average;
       Average4         :Average;
       Average5         :Average;

       x                :integer; {loop variable}
       WholeList        :List;




   procedure GetDeptName (var ch:char; var DeptName:Department;  var Error:boolean);
          {This procedure gets the name of a department and stores
	  it in DepartmentName}

      const
	   colon       =':';
	   four        =4;

      var 
	   i           :integer; {loop variables}
	   j           :integer;

      begin
	 for i:=one to four do
	     read(ch);
         if ch=colon then
	    begin
		j:=one;
		read(DeptName[j]);
		while not eoln and (DeptName[j] <> Blank ) do
		begin
		     j:=j+one;
		     read(DeptName[j])
                end  {while}
              end
	  else
	    Error:=true
      end;  {procedure GetDeptName}



   procedure DeptError  (var ch:char;  line:integer );
	{this procedure prints out error messages for lines
	 that should contain a department name, but don't.}
      const
	  four      =4;

      begin
	    write ('error in line ',line:four,' a department name was not given');
	    writeln(', it needs to be in the form dept:<dept name>.');
	       write(ch);
	       while not eoln do
		 begin
		   read(ch);
		   write(ch)
               end; {eoln}
	       writeln
      end; {procedure DeptError}



procedure GetCode (var ch:char; var Store: Storage);
        {This procedure reads the information from the data
	into seperate arrays according to the order the information
	is supposed to be in.}

    const
	ten  =10;

    var
       i     :integer;


    begin
       i:=one;
       read(ch);
       while ch = Blank do
	 read(ch);
       Store[i]:= ch;
       if ch<> d then
	  begin
	    while (not eoln) and (ch <> Blank) and ( i < ten ) do
	       begin
		 read (ch);
		 i:=i+one;
		 Store[i]:=ch
             end  {while}
        end  {if}
    end;  {procedure GetCode}



  procedure Convert (var number:integer;var error:boolean; measure:Storage);
       {This procedure converts the char form of input into the
       binary form (into integer form)}

    const
	zero    =0;
	one     =1;
	ten     =10;
	dot     ='.';
	Zero    ='0';

    var
        x            :integer;   {loop variable}

   begin
     x:=one;
     number:=zero;
     while(x<ten) and(not error) and (measure[x]<> Blank)do
       begin
	 if measure[x]=dot then 
	    error:=true
     else
       begin
	 number:=10*number+ord(measure[x])-ord(Zero);
	 x:=x+one
       end  {else}
     end;  {while}
   end;  {procedure Convert}






procedure Seperate (var ageGroup:Number; sex:Storage; list:List);
     {This procedure separates the heights and weights into
     separate arrays, and it keeps track of the total number
     of items in each age group}


    begin
      if sex[one] = f then
	begin
	  ageGroup[1]:=ageGroup[1] + list.intheight;
	  ageGroup[2]:=ageGroup[2] + list.intweight;
	  ageGroup[3]:=ageGroup[3] + one;
        end  {if}
     else
       begin
	 ageGroup[4]:=ageGroup[4] + list.intheight;
	 ageGroup[5]:=ageGroup[5] + list.intweight;
	 ageGroup[6]:=ageGroup[6] + one;
      end  {else}
   end;   {procedure Seperate}









procedure GetAverage (var ave:Average;  ageGroup:Number);
      {This procedure finds the average height and weight for
      each age group, and for each sex,and stores it in an array}

   begin
     if ageGroup[3] <> zero then
	begin
	  ave[1]:= ageGroup[1]/ageGroup[3];
	  ave[2]:= ageGroup[2]/ageGroup[3]
        end;  {if}
     if ageGroup[6] <> zero then
       begin
	 ave[3]:= ageGroup[4]/ageGroup[6];
	 ave[4]:= ageGroup[5]/ageGroup[6]
       end  {if}
    end;   {procedure GetAverage}






   begin   {mainline}
      LineCount:=zero;
      NullFile:=true;

      while not eof do
	begin
	  Age:=Empty10;
	  Height:=Empty10;
	  Weight:=Empty10;
	  ErrorCount:=zero;
	  Error:=false;
	  NullFile:=false;
	  DeptGood:=true;
	  GoodData:=true;

	  while not eoln and GoodData do
	    begin
	      EndOfFile:=false;
              read(ch);
	      if ch = d then
	       begin
		 GetDeptName(ch,DepartmentName,Error);
		 readln;
		 LineCount:=LineCount+one
               end {if}
              else
		 Error:=true;

                 {if there was and error in the dept name}
             if Error then
	       begin
		 if ch = '<' then
		   begin
		     EndOfFile:=true;
		     GoodData:=false
                   end {if}
             else
	       begin

		 DeptError(ch,LineCount);
		 ErrorCount:=ErrorCount+one;
		 DeptGood:=false
              end  {else}
            end;  {if}     

	      {This part gets the sexcode and checks for wrong data
	      in the sexcode, if there was a department name given}
             
	     if DeptGood then
	       begin
		 
		 while not EndOfFile do
		   begin
		     WholeList.intage:=zero;
		     WholeList.intheight:=zero;
		     WholeList.intweight:=zero;
		     GetCode (ch,Sex);
		     if Sex[one] = '<' then
		       begin
			 EndOfFile:=true;
			 GoodData:=false;
			   if not eoln then
			     begin
                           end {if}
                      end {if Sex[one]}
                     
		     else
		       begin
			 if not(Sex[one] in [m,f]) then
			   begin
			     write('Error in line ',LineCount:four);
			     writeln(' it needs to begin with an m or f.');
			     ErrorCount:=ErrorCount +one;
			     write(Sex);
			     while not eoln do
			       begin
				 read(ch);
				 write(ch)
                               end; {while}
			       readln;
			       LineCount:=LineCount+one;
                             GoodData:=false
                          end {if not}

                      {If the sexcode was correct, this part gets the
		      values for age, height, and weight}

		      else
			begin
			  GetCode(ch,Age);
			  GetCode(ch,Height);
			  GetCode(ch,Weight);
			     {if not enough information}
                          if Weight=Empty10 then
			    begin
			      write('Error in line ',LineCount:four);
			      writeln(' not enough information given.');
			      writeln(Sex,Age,Height,Weight);
			      ErrorCount:=ErrorCount+one;
			      GoodData:=false
                           end {if Weight}

			   {If enough information was given}
                       else
			 begin
                           Convert(IntegerAge,Error,Age);
			    WholeList.intage:=IntegerAge;
			   Convert(IntegerHeight,Error,Height);
			    WholeList.intheight:=IntegerHeight;
			   Convert(IntegerWeight,Error,Weight);
			    WholeList.intweight:=IntegerWeight;
			   if Error then
			     begin
			       write('Error in line ',LineCount:four);
			       writeln(' data must be of type integer.');
			       ErrorCount:=ErrorCount + one;
			       GoodData:=false;
			       writeln(Sex,Age,Height,Weight)
                             end  {if Error}
                       else
			 if(WholeList.intage<12) or (WholeList.intage>100)then
			   begin
			     write('Error in line ',LineCount:four);
			     writeln(' the age is out of the limits.');
			     writeln(Sex,Age,Height,Weight);
			     ErrorCount:=ErrorCount+one;
			     GoodData:=false
                           end {if}
                     else
			    
                         if(WholeList.intheight<62)or(WholeList.intheight>100)then
			   begin
			     write('Error in line ',LineCount:four);
			     writeln(' the height is out of the limits.');
			     writeln(Sex,Age,Height,Weight);
			     ErrorCount:=ErrorCount+one;
			     GoodData:=false
                           end {if}
                    
		    else
                         if(WholeList.intweight<80) or (WholeList.intweight>350) then
			   begin
			     write('Error in line ',LineCount:four);
			     writeln(' the weight is out of the limits.');
			     writeln(Sex,Age,Height,Weight);
			     ErrorCount:=ErrorCount+one;
			     GoodData:=false
                           end {if}
                       end;  {else}
			
			readln;
			LineCount:=LineCount+one
                    end
		    
                  end;

		  {If the information was correct, the information will
		  be separated into age groups and averaged.}
                if GoodData then
		  begin
		    if WholeList.intage in [MinAge1..MaxAge1] then
		      begin
			Seperate(AgeGroup1,Sex,WholeList);
			GetAverage(Average1,AgeGroup1)
                      end; {if}
                    
		    if WholeList.intage in [MinAge2..MaxAge2] then
		      begin
			Seperate(AgeGroup2,Sex,WholeList);
			GetAverage(Average2,AgeGroup2)
                      end; {if}
                    if WholeList.intage in [MinAge3..MaxAge3] then
		      begin
			Seperate(AgeGroup3,Sex,WholeList);
			GetAverage(Average3,AgeGroup3);
                      end; {if}
                    
		    if WholeList.intage in [MinAge4..MaxAge4] then
		      begin
			Seperate(AgeGroup4,Sex,WholeList);
			GetAverage(Average4,AgeGroup4)
                      end; {if}

                    if WholeList.intage in [MinAge5..MaxAge5] then
		      begin
			Seperate(AgeGroup5,Sex,WholeList);
			GetAverage(Average5,AgeGroup5)
                      end {if}
                end; {while GoodData}
		GoodData:=true
               end; {while not EndOfFile}
	       readln;
	       LineCount:=LineCount+one;

           {prints out the report to standard output}

	   writeln;
	   writeln('Department:',DepartmentName);
	   writeln('------------------------------');
	   writeln;
	   write('          Average Height   Average Height  ');
	   writeln('Average Weight   Average Weight');
	   write('Age             Men             Women');
	   writeln('            Men            Women');
	   write('----------------------------------------------');
	   writeln('-----------------------');
	   writeln;
	   write('0 - 16       ',Average1[3]:6:2,'              ',Average1[1]:6:2);
	   writeln('            ',Average1[4]:6:2,'             ',Average1[2]:6:2);
	   write('17 - 29      ',Average2[3]:6:2,'              ',Average2[1]:6:2);
	   writeln('            ',Average2[4]:6:2,'             ',Average2[2]:6:2);
	   write('30 - 39      ',Average3[3]:6:2,'              ',Average3[1]:6:2);
	   writeln('            ',Average3[4]:6:2,'             ',Average3[2]:6:2);
	   write('40 - 49      ',Average4[3]:6:2,'              ',Average4[1]:6:2);
	   writeln('            ',Average4[4]:6:2,'             ',Average4[2]:6:2);
	   write('over 50      ',Average5[3]:6:2,'              ',Average5[1]:6:2);
	   writeln('            ',Average5[4]:6:2,'             ',Average5[2]:6:2);
	   writeln;
	   writeln;
	   writeln('There were ',ErrorCount:four,' errors in dept:',DepartmentName);
	   page(output);

	   {reinitializes the values}

	   Sex:=Empty10;
	   Age:=Empty10;
	   Height:=Empty10;
	   Weight:=Empty10;
	   DepartmentName:=Empty20;
	   for x:=1 to 6 do
	     begin
	       AgeGroup1[x]:=zero;
	       AgeGroup2[x]:=zero;
	       AgeGroup3[x]:=zero;
	       AgeGroup4[x]:=zero;
	       AgeGroup5[x]:=zero;
            end; {for}
           for x:=one to 4 do
	     begin
	       Average1[x]:=zero;
	       Average2[x]:=zero;
	       Average3[x]:=zero;
	       Average4[x]:=zero;
	       Average5[x]:=zero
             end;  {for}
          ErrorCount:=zero
	  end
        end;  {if DeptGood}
	readln;
	LineCount:=LineCount+one
	end;  {while not eof}
     if NullFile = true then    
	writeln('There was no information given.')
   end.  {mainline}

