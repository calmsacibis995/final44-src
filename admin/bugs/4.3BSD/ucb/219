From elsie!ado@ncifcrf.gov  Thu Jun  9 11:00:09 1988
Received: from FCS280S.NCIFCRF.GOV by okeeffe.berkeley.edu (5.59/1.28)
	id AA08311; Thu, 9 Jun 88 11:00:09 PDT
Received: by fcs280s.ncifcrf.gov (4.0/NCIFCRF-1.0)
	id AA20439; Thu, 9 Jun 88 13:49:41 EDT
Received: by elsie.UUCP (5.51/4.7)
	id AA20169; Thu, 9 Jun 88 13:53:30 EDT
Date: Thu, 9 Jun 88 13:53:30 EDT
From: elsie!ado@ncifcrf.gov (Arthur David Olson)
Message-Id: <8806091753.AA20169@elsie.UUCP>
Cc: emoryu1!arnold@emory.arpa
Cc: bugs@okeeffe.berkeley.edu
Cc: rms@prep.ai.mit.edu
Subject: MORE/bsd 4.3 (10/5/87) dbx muffs multiple blocks (with fix)
Index: 	ucb/dbx/mappings.c 4.3BSD

Description:
	Dbx can get confused and report that variables are not active
	if multiple blocks start with the same instruction.

	[I'm sending a copy of this bug report to rms@prep.ai.mit.edu
	since the Gnu C compiler generates code that trips over this bug
	more frequently than does cc.  In part this is because gcc waits
	until after the
		.word whatever
		subl2 $howevermuch,sp
	instructions at the beginning of a function before putting out the
	"beginning of function" stab.  Moving the stab up would help in this
	particular case (thus potentially eliminating a case where two blocks
	start at the same place), though there would still be problems
	elsewhere.]

Repeat-By:
	Script started on Thu Jun  9 13:41:22 1988
	$ cat four.c
	main()
	{
		int	i;
		{
			int	j;
			{
				int	k;
				{
					int	l;
					l = 5;
					return l;
				}
			}
		}
	}
	$ cc -g four.c -o four
	$ dbx four
	dbx version 3.22 of 6/8/88 21:48 (elsie).
	Type 'help' for help.
	reading symbolic information ...
	(dbx) /return l/
	   11   				return l;
	(dbx) stop at 11
	[1] stop at 11
	(dbx) run
	[1] stopped in $b1 at line 11
	   11   				return l;
	(dbx) print l
	"l" is not active
	(dbx) quit
	$ exit

	script done on Thu Jun  9 13:42:10 1988

Fix:
	*** 3.1/mappings.c	Thu Jun  9 13:40:56 1988
	--- 3.2/mappings.c	Thu Jun  9 13:41:00 1988
	***************
	*** 252,257 ****
	--- 252,260 ----
	  typedef struct {
	      Symbol func;
	      Address addr;
	+ #ifndef ASWAS
	+     int nfunc;
	+ #endif /* !defined ASWAS */
	  } AddrOfFunc;
	  
	  private AddrOfFunc *functab;
	***************
	*** 285,290 ****
	--- 288,296 ----
	      af = &functab[nfuncs];
	      af->func = f;
	      af->addr = addr;
	+ #ifndef ASWAS
	+     af->nfunc = nfuncs;
	+ #endif /* !defined ASWAS */
	      ++nfuncs;
	  }
	  
	***************
	*** 337,343 ****
	--- 343,357 ----
	  
	      a1 = (*f1).addr;
	      a2 = (*f2).addr;
	+ #ifdef ASWAS
	      return ( (a1 < a2) ? -1 : ( (a1 == a2) ? 0 : 1 ) );
	+ #else /* !defined ASWAS */
	+     if (a1 < a2)
	+ 	return -1;
	+     if (a1 > a2)
	+ 	return 1;
	+     return f1->nfunc - f2->nfunc;
	+ #endif /* !defined ASWAS */
	  }
	  
	  public ordfunctab()
-- 
    "Only external identifiers and macro names described in the Standard
    as reserved shall be reserved" must go in.  This is non-negotiable.
	ado@ncifcrf.gov			ADO is a trademark of Ampex.
