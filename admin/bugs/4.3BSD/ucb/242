From ksb@s.cc.purdue.edu  Sun Sep 18 20:23:01 1988
From: ksb@s.cc.purdue.edu (Kevin Braunsdorf)
To: Ideas <4bsd-ideas@ucbvax.Berkeley.EDU>
Subject: what about adding file locking to vi(1)
Date: Sun, 18 Sep 88 22:19:29 -0500
Index: ucb/vi 4.3BSD


This modification (to vi) keeps co-operating users from editing the
same file, or from a suspended editor from sitting around while the
user starts another.  I use it all time.  I used to use flock(1l)
for this, bit vi -t is to useful.

Something like this?

kayessbee

RCS file: RCS/ex_io.c,v
retrieving revision 4.3.1.2
diff -c -r4.3.1.2 ex_io.c
*** /tmp/,RCSt1012163	Sun Sep 18 22:14:14 1988
--- ex_io.c	Sun Sep 18 15:21:10 1988
***************
*** 6,12 ****
  
  #ifndef lint
  static char *sccsid = "@(#)ex_io.c	7.11 (Berkeley) 6/7/85";
! static char *rcsid = "$Id: ex_io.c,v 4.3.1.2 86/12/16 17:32:37 mjs Local $";
  #endif not lint
  
  #include "ex.h"
--- 6,12 ----
  
  #ifndef lint
  static char *sccsid = "@(#)ex_io.c	7.11 (Berkeley) 6/7/85";
! static char *rcsid = "$Id: ex_io.c,v 4.3.1.4 88/09/18 15:21:02 ksb Exp $";
  #endif not lint
  
  #include "ex.h"
***************
*** 14,19 ****
--- 14,22 ----
  #include "ex_temp.h"
  #include "ex_tty.h"
  #include "ex_vis.h"
+ #include <fcntl.h>
+ #include <sys/file.h>
+ extern char *sys_errlist[];
  
  /*
   * File input/output, source, preserve and recover
***************
*** 81,86 ****
--- 84,97 ----
  				altdot = lineDOT();
  				CP(altfile, savedfile);
  			}
+ 			/* PUCC locking code (ksb) */
+ 			switch (adjlock(file, value(LOCK), -1)) {
+ 			case 0:	break;
+ 			case 1: serror("Locked| Warning `%s' is locked ", file);
+ 				break;
+ 			case 2: serror("Cannot lock: open: %s", sys_errlist[errno]);
+ 				break;
+ 			}
  			CP(savedfile, file);
  			break;
  
***************
*** 100,105 ****
--- 111,118 ----
  		if (comm == 'f') {
  			if (value(READONLY))
  				printf(" [Read only]");
+ 			if (value(LOCK))
+ 				printf(" [Locked]");
  			if (!edited)
  				printf(" [Not edited]");
  			if (tchng)
***************
*** 306,312 ****
--- 319,390 ----
  	CP(file, str);
  }
  
+ static int fd_locking = -1;
  /*
+  * adjust the file locking stuff, pc is the file to lock, fset tells	(ksb)
+  * (1) the get a lock, (0) to release the locks, fd (if != -1) is
+  * a file descriptor we can dup to lock.  return 0 for success, 1 for
+  * "we need a lock we cannot get", 2 for "cannot open|stat" (syserror)
+  */
+ int
+ adjlock(pc, fset, fd)
+ char *pc;
+ int fset, fd;
+ {
+ 	register int fd_temp;
+ 	auto struct stat stat_lock;
+ 
+ 	if (!fset || pc[0] == '\000') {
+ 		fd_temp = -1;
+ 	} else {
+ 		if (-1 != fd) {
+ 			fd_temp = dup(fd);
+ 		} else if( -1 == (fd_temp = open(pc, O_RDONLY, 0666)) &&
+ 		   -1 == (fd_temp = open(pc, O_RDWR, 0666))) {
+ 			return 2;
+ 		}
+ 		/* what would we do if fcntl failed?
+ 		 */
+ 		(void)fcntl(fd_temp, F_SETFD, 1);
+ 		/* we might already have it locked */
+ 		if (-1 != fd_locking) {
+ 			if (-1 == fstat(fd_locking, & stat_lock)) {
+ 				return 2;
+ 			}
+ 			if (samei(& stat_lock, pc)) {
+ 				close(fd_temp);
+ 				return 0;
+ 			}
+ 		}
+ 		if (-1 == flock(fd_temp, LOCK_NB|LOCK_EX)) {
+ 			close(fd_temp);
+ 			return 1;	/* caller will complain */
+ 		}
+ 	}
+ 	if (-1 != fd_locking) {
+ 		close(fd_locking);
+ 	}
+ 	fd_locking = fd_temp;
+ 	return 0;
+ }
+ 
+ /*
+  * do we have a lock on this fd ?  (same file, that is)			(ksb)
+  */
+ int
+ havelock(fd)
+ int fd;
+ {
+ 	auto struct stat st_lock, st_fd;
+ 
+ 	if (fd_locking == -1 || fd == -1)
+ 		return 0;
+ 	(void) fstat(fd_locking, & st_lock);
+ 	(void) fstat(fd, & st_fd);
+ 	return st_lock.st_dev == st_fd.st_dev && st_lock.st_ino == st_fd.st_ino;
+ }
+ 
+ /*
   * Read a file from the world.
   * C is command, 'e' if this really an edit (or a recover).
   */
***************
*** 339,344 ****
--- 417,429 ----
  		}
  		syserror();
  	}
+ 	if (value(LOCK) && 'r' != c) {
+ 		switch (adjlock(file, value(LOCK), io)) {
+ 		case 0:	break;
+ 		case 1: serror(" Locked| is locked - use `set nolock' to edit");
+ 		case 2: serror(" Cannot lock: open: %s", sys_errlist[errno]);
+ 		}
+ 	}
  	if (fstat(io, &stbuf))
  		syserror();
  	switch (stbuf.st_mode & S_IFMT) {
***************
*** 533,539 ****
  	struct stat stbuf;
  
  	c = 0;
! 	exclam = 0;
  	if (dofname) {
  		if (peekchar() == '!')
  			exclam++, ignchar();
--- 618,624 ----
  	struct stat stbuf;
  
  	c = 0;
! 	exclam = value(WRITEANY);
  	if (dofname) {
  		if (peekchar() == '!')
  			exclam++, ignchar();
***************
*** 540,551 ****
  		ignore(skipwh());
  		while (peekchar() == '>')
  			ignchar(), c++, ignore(skipwh());
- 		if (c != 0 && c != 2)
- 			error("Write forms are 'w' and 'w>>'");
  		filename('w');
  	} else {
- 		if (savedfile[0] == 0)
- 			error("No file|No current filename");
  		saddr1=addr1;
  		saddr2=addr2;
  		addr1=one;
--- 625,634 ----
  		ignore(skipwh());
  		while (peekchar() == '>')
  			ignchar(), c++, ignore(skipwh());
  		filename('w');
+ 	} else if (savedfile[0] == 0) {
+ 		error("No file|No current filename");
  	} else {
  		saddr1=addr1;
  		saddr2=addr2;
  		addr1=one;
***************
*** 559,607 ****
  	}
  	nonexist = stat(file, &stbuf);
  	switch (c) {
! 
  	case 0:
- 		if (!exclam && (!value(WRITEANY) || value(READONLY)))
  		switch (edfile()) {
- 		
  		case NOTEDF:
  			if (nonexist)
! 				break;
  			if ((stbuf.st_mode & S_IFMT) == S_IFCHR) {
  				if (samei(&stbuf, "/dev/null"))
! 					break;
  				if (samei(&stbuf, "/dev/tty"))
! 					break;
  			}
! 			io = open(file, 1);
! 			if (io < 0)
  				syserror();
! 			if (!isatty(io))
! 				serror(" File exists| File exists - use \"w! %s\" to overwrite", file);
! 			close(io);
  			break;
  
  		case EDF:
! 			if (value(READONLY))
! 				error(" File is read only");
! 			break;
! 
! 		case PARTBUF:
! 			if (value(READONLY))
! 				error(" File is read only");
! 			error(" Use \"w!\" to write partial buffer");
! 		}
  cre:
- /*
- 		synctmp();
- */
  #ifdef V6
! 		io = creat(file, 0644);
  #else
! 		io = creat(file, 0666);
  #endif
! 		if (io < 0)
! 			syserror();
  		writing = 1;
  		if (hush == 0)
  			if (nonexist)
--- 642,712 ----
  	}
  	nonexist = stat(file, &stbuf);
  	switch (c) {
! 	default:
! 		error("Write forms are 'w' 'w!' and 'w>>'");
! 		/*NOTREACHED*/
  	case 0:
  		switch (edfile()) {
  		case NOTEDF:
  			if (nonexist)
! 				goto cre;
  			if ((stbuf.st_mode & S_IFMT) == S_IFCHR) {
  				if (samei(&stbuf, "/dev/null"))
! 					goto cre;
  				if (samei(&stbuf, "/dev/tty"))
! 					goto cre;
  			}
! 			io = open(file, O_WRONLY|O_APPEND);
! 			if (io < 0) {
! 				/* can happen?  modes are changing... */
! 				if (exclam)
! 					goto cre;
  				syserror();
! 			}
! 			if (value(LOCK)) {
! 				if (!havelock(io) && -1 == flock(io, LOCK_NB|LOCK_EX)) {
! 					merror(" File is locked@- use `set nolock' to %s", "overwrite");
! 					close(io);
! 					return;
! 				}
! 			}
! 			if (!exclam && !isatty(io)) {
! 				serror(" File exists@- use \"w! %s\" to overwrite", file);
! 			}
! 			(void)ftruncate(io, (off_t)0L);
  			break;
  
  		case EDF:
! 			if (!exclam && value(READONLY)) {
! 				serror(" Readonly|File is read only");
! 			}
  cre:
  #ifdef V6
! 			io = creat(file, 0644);
  #else
! 			io = creat(file, 0666);
  #endif
! 			if (io < 0)
! 				syserror();
! 			/* flock file if we are locking and file didn't
! 			 * lock before... */
! 			if (value(LOCK) && -1 == fd_locking) {
! 				switch (adjlock(file, 1, -1)) {
! 				case 0:	merror(" [Locked]");
! 					break;
! 				case 1: serror(" Locked| is locked - use `set nolock' to write");
! 				case 2: serror(" Cannot lock: open: %s", sys_errlist[errno]);
! 				}
! 			}
! 			break;
! 
! 		case PARTBUF:
! 			if (!exclam && value(READONLY)) {
! 				serror(" Readonly|File is read only");
! 			}
! 			error(" Partial?|Use \"w!\" to write partial buffer");
! 			/*NOTREACHED*/
! 		}
  		writing = 1;
  		if (hush == 0)
  			if (nonexist)
***************
*** 610,623 ****
  				printf(" [Existing file]");
  		break;
  
! 	case 2:
! 		io = open(file, 1);
  		if (io < 0) {
! 			if (exclam || value(WRITEANY))
  				goto cre;
  			syserror();
  		}
  		lseek(io, 0l, 2);
  		break;
  	}
  	putfile(0);
--- 715,737 ----
  				printf(" [Existing file]");
  		break;
  
! 	case 2: /* append */
! 		io = open(file, O_WRONLY|O_APPEND);
  		if (io < 0) {
! 			if (exclam) {
  				goto cre;
+ 			}
  			syserror();
  		}
+ 		if (value(LOCK)) {
+ 			if (!havelock(io) && -1 == flock(io, LOCK_NB|LOCK_EX)) {
+ 				merror(" File is locked@- use `set nolock' to %s", "append");
+ 				close(io);
+ 				return;
+ 			}
+ 		}
  		lseek(io, 0l, 2);
+ 		writing = 1;
  		break;
  	}
  	putfile(0);
===================================================================
RCS file: RCS/ex_set.c,v
retrieving revision 4.3.1.2
diff -c -r4.3.1.2 ex_set.c
*** /tmp/,RCSt1012163	Sun Sep 18 22:14:22 1988
--- ex_set.c	Sun Sep 18 15:21:15 1988
***************
*** 6,12 ****
  
  #ifndef lint
  static char *sccsid = "@(#)ex_set.c	7.4 (Berkeley) 6/7/85";
! static char *rcsid = "$Id: ex_set.c,v 4.3.1.2 86/12/17 16:54:01 mjs Local $";
  #endif not lint
  
  #include "ex.h"
--- 6,12 ----
  
  #ifndef lint
  static char *sccsid = "@(#)ex_set.c	7.4 (Berkeley) 6/7/85";
! static char *rcsid = "$Id: ex_set.c,v 4.3.1.4 88/09/18 15:21:11 ksb Exp $";
  #endif not lint
  
  #include "ex.h"
***************
*** 98,103 ****
--- 98,114 ----
  			goto next;
  		}
  		if (op->otype == ONOFF) {
+ 			/* PUCC locking code (ksb) */
+ 			if (op == &options[LOCK] && savedfile[0] != '\000') {
+ 				switch (adjlock(savedfile, 1-no, -1)) {
+ 					extern char *sys_errlist[];
+ 				case 0:	break;
+ 				case 1: merror("Lock failed@`%s' is locked by another process", savedfile);
+ 					break;
+ 				case 2: merror("Cannot lock: open: %s", sys_errlist[errno]);
+ 					break;
+ 				}
+ 			}
  			op->ovalue = 1 - no;
  			if (op == &options[PROMPT])
  				oprompt = 1 - no;
===================================================================
RCS file: RCS/ex_unix.c,v
retrieving revision 4.3.1.2
diff -c -r4.3.1.2 ex_unix.c
*** /tmp/,RCSt1012163	Sun Sep 18 22:14:26 1988
--- ex_unix.c	Sun Sep 18 15:21:19 1988
***************
*** 6,12 ****
  
  #ifndef lint
  static char *sccsid = "@(#)ex_unix.c	7.6 (Berkeley) 10/22/85";
! static char *rcsid = "$Id: ex_unix.c,v 4.3.1.2 86/12/17 17:13:29 mjs Local $";
  #endif not lint
  
  #include <sys/file.h>
--- 6,12 ----
  
  #ifndef lint
  static char *sccsid = "@(#)ex_unix.c	7.6 (Berkeley) 10/22/85";
! static char *rcsid = "$Id: ex_unix.c,v 4.3.1.4 88/09/18 15:21:16 ksb Exp $";
  #endif not lint
  
  #include <sys/file.h>
***************
*** 365,368 ****
--- 365,376 ----
  		edited = 0;
  	else
  		change();
+ 	switch (adjlock(savedfile, value(LOCK), -1)) {
+ 		extern char *sys_errlist[];
+ 	case 0:	break;
+ 	case 1: merror(" Locked| Warning %s is locked", savedfile);
+ 		break;
+ 	case 2: merror(" Cannot lock: open: %s", sys_errlist[errno]);
+ 		break;
+ 	}
  }
===================================================================
RCS file: RCS/ex_vars.h,v
retrieving revision 4.3.1.2
diff -c -r4.3.1.2 ex_vars.h
*** /tmp/,RCSt1012163	Sun Sep 18 22:14:30 1988
--- ex_vars.h	Thu Sep 15 18:21:39 1988
***************
*** 4,10 ****
   * specifies the terms and conditions for redistribution.
   *
   *	@(#)ex_vars.h	7.5 (Berkeley) 8/29/85
!  *	$Id: ex_vars.h,v 4.3.1.2 86/12/17 17:38:29 mjs Local $
   */
  
  #define AUTOINDENT      0
--- 4,10 ----
   * specifies the terms and conditions for redistribution.
   *
   *	@(#)ex_vars.h	7.5 (Berkeley) 8/29/85
!  *	$Id: ex_vars.h,v 4.3.1.3 88/09/15 18:21:32 ksb Exp $
   */
  
  #define AUTOINDENT      0
***************
*** 18,54 ****
  #define IGNORECASE      8
  #define LISP            9
  #define LIST            10
! #define MAGIC           11
! #define MESG            12
! #define MODELINE        13
! #define NUMBER          14
! #define OPEN            15
! #define OPTIMIZE        16
! #define PARAGRAPHS      17
! #define PROMPT          18
! #define READONLY        19
! #define REDRAW          20
! #define REMAP           21
! #define REPORT          22
! #define SCROLL          23
! #define SECTIONS        24
! #define SHELL           25
! #define SHIFTWIDTH      26
! #define SHOWMATCH       27
! #define SLOWOPEN        28
! #define SOURCEANY       29
! #define TABSTOP         30
! #define TAGLENGTH       31
! #define TAGS            32
! #define TERM            33
! #define TERSE           34
! #define TIMEOUT         35
! #define TTYTYPE         36
! #define VARIABLETAB	37
! #define WARN            38
! #define WINDOW          39
! #define WRAPSCAN        40
! #define WRAPMARGIN      41
! #define WRITEANY        42
  
! #define	NOPTS	43
--- 18,55 ----
  #define IGNORECASE      8
  #define LISP            9
  #define LIST            10
! #define LOCK		11
! #define MAGIC           12
! #define MESG            13
! #define MODELINE        14
! #define NUMBER          15
! #define OPEN            16
! #define OPTIMIZE        17
! #define PARAGRAPHS      18
! #define PROMPT          19
! #define READONLY        20
! #define REDRAW          21
! #define REMAP           22
! #define REPORT          23
! #define SCROLL          24
! #define SECTIONS        25
! #define SHELL           26
! #define SHIFTWIDTH      27
! #define SHOWMATCH       28
! #define SLOWOPEN        29
! #define SOURCEANY       30
! #define TABSTOP         31
! #define TAGLENGTH       32
! #define TAGS            33
! #define TERM            34
! #define TERSE           35
! #define TIMEOUT         36
! #define TTYTYPE         37
! #define VARIABLETAB	38
! #define WARN            39
! #define WINDOW          40
! #define WRAPSCAN        41
! #define WRAPMARGIN      42
! #define WRITEANY        43
  
! #define	NOPTS	44
RCS file: RCS/ex_data.c,v
retrieving revision 4.3.1.2
diff -c -r4.3.1.2 ex_data.c
*** /tmp/,RCSt1012237	Sun Sep 18 22:16:56 1988
--- ex_data.c	Thu Sep 15 18:17:29 1988
***************
*** 6,12 ****
  
  #ifndef lint
  static char *sccsid = "@(#)ex_data.c	7.5 (Berkeley) 8/29/85";
! static char *rcsid = "$Id: ex_data.c,v 4.3.1.2 86/12/16 17:02:58 mjs Local $";
  #endif not lint
  
  #include "ex.h"
--- 6,12 ----
  
  #ifndef lint
  static char *sccsid = "@(#)ex_data.c	7.5 (Berkeley) 8/29/85";
! static char *rcsid = "$Id: ex_data.c,v 4.3.1.3 88/09/15 18:17:18 ksb Exp $";
  #endif not lint
  
  #include "ex.h"
***************
*** 62,67 ****
--- 62,68 ----
  	"ignorecase",	"ic",	ONOFF,		0,	0,	0,
  	"lisp",		0,	ONOFF,		0,	0,	0,
  	"list",		0,	ONOFF,		0,	0,	0,
+ 	"lock",		"lk",	ONOFF,		0,	0,	0,
  	"magic",	0,	ONOFF,		1,	1,	0,
  	"mesg",		0,	ONOFF,		1,	1,	0,
  	"modeline",	0,	ONOFF,		0,	0,	0,
