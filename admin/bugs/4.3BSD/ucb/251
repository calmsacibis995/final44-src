From rick@seismo.CSS.GOV Sat Oct 29 20:29:22 1988
Date: Sat, 29 Oct 88 23:28:25 EDT
From: rick@seismo.CSS.GOV (Rick Adams)
To: bostic@seismo.CSS.GOV
Subject: horrible ftpd security bug
Index: ucb/ftpd 4.3BSD

Gaak.

--rick

>From glenn@wheaties.ai.mit.edu Sat Oct 29 17:02:06 1988
Date: Sat, 29 Oct 88 17:00:29 EDT
From: glenn@wheaties.ai.mit.edu (Glenn A. Adams)
Message-Id: <8810292100.AA03269@frosted-flakes.ai.mit.edu>
To: karels@ucbarpa.berkeley.edu, fair@ucbarpa.berkeley.edu,
        adams@seismo.CSS.GOV, pleasant@rutgers.edu, chris@cs.columbia.edu,
        mrc@score.stanford.edu, mills@huey.udel.edu
Subject: serious unix ftp security bug
Status: R


I'm not sure if you know about this, but the following bug
exists in the BSD ftp server which allows root access to
random network users.

To reproduce, do the following:

ftp -n loser.anywhere
quote user ftp
cd ~root
quote pass guest

When the pathname for CWD is parsed, glob() bashes
the static pwent saved by USER; since guest!=0, PASS
succeeds, and, you guessed it, you are now root.

I was informed of this last week by a grad student
at Harvard and am trying to spread the word to the
appropriate people.  I would suggest removing the
ftp entry in your passwd file as a first step.

I have at least three fixes depending on what you
think is broken.  If you need one, let me know.

Glenn Adams
MIT AI Laboratory

===============================================================================
From chris@gyre.umd.edu Sat Oct 29 21:00:43 1988
Date: Sat, 29 Oct 88 23:59:56 EDT
From: Chris Torek <chris@gyre.umd.edu>
To: bostic@okeeffe.berkeley.edu
Subject: hole in ftpd
Status: RO

You have probably already been told what it is.  Here is my patch
(with free delinting :-) that saved 20 bytes of text space too ...
[lint in checklogin() and dologin(), fix in ftpcmd.y and the new
routines it calls]).

Chris

RCS file: RCS/ftpcmd.y,v
retrieving revision 1.2
diff -c2 -r1.2 ftpcmd.y
*** /tmp/,RCSt1026617	Sat Oct 29 23:52:42 1988
--- ftpcmd.y	Sat Oct 29 23:16:59 1988
***************
*** 87,91 ****
  cmd:		USER SP username CRLF
  		= {
! 			extern struct passwd *getpwnam();
  
  			logged_in = 0;
--- 87,91 ----
  cmd:		USER SP username CRLF
  		= {
! 			extern struct passwd *sgetpwnam();
  
  			logged_in = 0;
***************
*** 92,96 ****
  			if (strcmp((char *) $3, "ftp") == 0 ||
  			  strcmp((char *) $3, "anonymous") == 0) {
! 				if ((pw = getpwnam("ftp")) != NULL) {
  					guest = 1;
  					reply(331,
--- 92,96 ----
  			if (strcmp((char *) $3, "ftp") == 0 ||
  			  strcmp((char *) $3, "anonymous") == 0) {
! 				if ((pw = sgetpwnam("ftp")) != NULL) {
  					guest = 1;
  					reply(331,
***************
*** 102,106 ****
  			} else if (checkuser((char *) $3)) {
  				guest = 0;
! 				pw = getpwnam((char *) $3);
  				if (pw == NULL) {
  					reply(530, "User %s unknown.", $3);
--- 102,106 ----
  			} else if (checkuser((char *) $3)) {
  				guest = 0;
! 				pw = sgetpwnam((char *) $3);
  				if (pw == NULL) {
  					reply(530, "User %s unknown.", $3);
===================================================================
RCS file: RCS/ftpd.c,v
retrieving revision 1.3
diff -c2 -r1.3 ftpd.c
*** /tmp/,RCSt1026617	Sat Oct 29 23:52:48 1988
--- ftpd.c	Sat Oct 29 23:49:01 1988
***************
*** 194,202 ****
  }
  
  pass(passwd)
  	char *passwd;
  {
! 	char *xpasswd, *savestr();
! 	static struct passwd save;
  
  	if (logged_in || pw == NULL) {
--- 194,258 ----
  }
  
+ /*
+  * Helper function for sgetpwnam().
+  */
+ char *
+ sgetsave(s)
+ 	char *s;
+ {
+ #ifdef notdef
+ 	char *new = strdup(s);
+ #else
+ 	char *malloc();
+ 	char *new = malloc((unsigned) strlen(s) + 1);
+ #endif
+ 	
+ 	if (new == NULL) {
+ 		reply(553, "Local resource failure");	/* ??? */
+ 		dologout(1);
+ 	}
+ #ifndef notdef
+ 	(void) strcpy(new, s);
+ #endif
+ 	return (new);
+ }
+ 
+ /*
+  * Save the result of a getpwnam.  Used for USER command, since
+  * the data returned must not be clobbered by any other command
+  * (e.g., globbing).
+  */
+ struct passwd *
+ sgetpwnam(name)
+ 	char *name;
+ {
+ 	static struct passwd save;
+ 	register struct passwd *p;
+ 	char *sgetsave();
+ 
+ 	if ((p = getpwnam(name)) == NULL)
+ 		return (p);
+ 	if (save.pw_name) {
+ 		free(save.pw_name);
+ 		free(save.pw_passwd);
+ 		free(save.pw_comment);
+ 		free(save.pw_gecos);
+ 		free(save.pw_dir);
+ 		free(save.pw_shell);
+ 	}
+ 	save = *p;
+ 	save.pw_name = sgetsave(p->pw_name);
+ 	save.pw_passwd = sgetsave(p->pw_passwd);
+ 	save.pw_comment = sgetsave(p->pw_comment);
+ 	save.pw_gecos = sgetsave(p->pw_gecos);
+ 	save.pw_dir = sgetsave(p->pw_dir);
+ 	save.pw_shell = sgetsave(p->pw_shell);
+ 	return (&save);
+ }
+ 
  pass(passwd)
  	char *passwd;
  {
! 	char *xpasswd;
  
  	if (logged_in || pw == NULL) {
***************
*** 238,253 ****
  	dologin(pw);
  	seteuid(pw->pw_uid);
- 	/*
- 	 * Save everything so globbing doesn't
- 	 * clobber the fields.
- 	 */
- 	save = *pw;
- 	save.pw_name = savestr(pw->pw_name);
- 	save.pw_passwd = savestr(pw->pw_passwd);
- 	save.pw_comment = savestr(pw->pw_comment);
- 	save.pw_gecos = savestr(pw->pw_gecos);
- 	save.pw_dir = savestr(pw->pw_dir);
- 	save.pw_shell = savestr(pw->pw_shell);
- 	pw = &save;
  	home = pw->pw_dir;		/* home dir for globbing */
  	return;
--- 294,297 ----
***************
*** 257,272 ****
  }
  
- char *
- savestr(s)
- 	char *s;
- {
- 	char *malloc();
- 	char *new = malloc((unsigned) strlen(s) + 1);
- 	
- 	if (new != NULL)
- 		(void) strcpy(new, s);
- 	return (new);
- }
- 
  retrieve(cmd, name)
  	char *cmd, *name;
--- 301,304 ----
***************
*** 785,790 ****
   * Record login in wtmp file.
   */
! dologin(pw)
! 	struct passwd *pw;
  {
  	char line[32];
--- 817,822 ----
   * Record login in wtmp file.
   */
! dologin(p)
! 	struct passwd *p;
  {
  	char line[32];
***************
*** 794,798 ****
  		(void) sprintf(line, "ftp%d", getpid());
  		SCPYN(utmp.ut_line, line);
! 		SCPYN(utmp.ut_name, pw->pw_name);
  		SCPYN(utmp.ut_host, remotehost);
  		utmp.ut_time = (long) time((time_t *) 0);
--- 826,830 ----
  		(void) sprintf(line, "ftp%d", getpid());
  		SCPYN(utmp.ut_line, line);
! 		SCPYN(utmp.ut_name, p->pw_name);
  		SCPYN(utmp.ut_host, remotehost);
  		utmp.ut_time = (long) time((time_t *) 0);
***************
*** 948,963 ****
  {
  	register char *cp;
- 	char line[BUFSIZ], *index(), *getusershell();
  	FILE *fd;
! 	struct passwd *pw;
  	int found = 0;
  
! 	pw = getpwnam(name);
! 	if (pw == NULL)
  		return (0);
! 	if (pw ->pw_shell == NULL || pw->pw_shell[0] == NULL)
! 		pw->pw_shell = "/bin/sh";
  	while ((cp = getusershell()) != NULL)
! 		if (strcmp(cp, pw->pw_shell) == 0)
  			break;
  	endusershell();
--- 980,995 ----
  {
  	register char *cp;
  	FILE *fd;
! 	struct passwd *p;
! 	char *shell;
  	int found = 0;
+ 	char line[BUFSIZ], *index(), *getusershell();
  
! 	if ((p = getpwnam(name)) == NULL)
  		return (0);
! 	if ((shell = p->pw_shell) == NULL || *shell == 0)
! 		shell = "/bin/sh";
  	while ((cp = getusershell()) != NULL)
! 		if (strcmp(cp, shell) == 0)
  			break;
  	endusershell();
***************
*** 964,973 ****
  	if (cp == NULL)
  		return (0);
! 	fd = fopen(FTPUSERS, "r");
! 	if (fd == NULL)
  		return (1);
  	while (fgets(line, sizeof (line), fd) != NULL) {
! 		cp = index(line, '\n');
! 		if (cp)
  			*cp = '\0';
  		if (strcmp(line, name) == 0) {
--- 996,1003 ----
  	if (cp == NULL)
  		return (0);
! 	if ((fd = fopen(FTPUSERS, "r")) == NULL)
  		return (1);
  	while (fgets(line, sizeof (line), fd) != NULL) {
! 		if ((cp = index(line, '\n')) != NULL)
  			*cp = '\0';
  		if (strcmp(line, name) == 0) {

===============================================================================
From chris@gyre.umd.edu Sat Oct 29 21:03:27 1988
Date: Sun, 30 Oct 88 00:02:46 EDT
From: Chris Torek <chris@gyre.umd.edu>
To: bostic@okeeffe.berkeley.edu
Subject: about that patch

Someone should check the reply code in sgetsave(); 553 is probably
wrong.  I made it up by guess, not by looking at the FTP spec.

===============================================================================
From rick@seismo.CSS.GOV Sat Oct 29 21:41:47 1988
Date: Sun, 30 Oct 88 00:41:27 EDT
From: rick@seismo.CSS.GOV (Rick Adams)
To: bostic@seismo.CSS.GOV
Subject: ftpd fix
Status: RO


The correct fix seems to be to move the "save" code out
of the end of pass() in ftpd.c into the yacc code that
handles the USER command.

I've done that on my systems and it seems to work

--rick

