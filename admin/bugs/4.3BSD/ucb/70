From chris@gyre.umd.edu  Mon Mar  9 09:33:34 1987
Date: Mon, 9 Mar 87 12:32:05 EST
From: Chris Torek <chris@gyre.umd.edu>
Subject: vi fsync()s readonly file; kernel *does* it

Index: ucb/ex/ex_io.c 4.3BSD Fix

Description:
	vi fsync()s its file descriptors on both read and write.
	The former is certainly unnecessary, and quite possibly
	should be illegal (but is not; see /sys/sys/ufs_syscalls.c).

Repeat-By:
	% date > xx
	% stat xx
	... ctime=<time>
	% cat xx >/dev/null
	% stat xx
	... ctime=<unchanged>
	% ex +:q xx
	% stat xx
	... ctime=<updated>
	% rm xx

Fix:
	The easy one is to move the fsync() out of iostats() and
	into wop().  Too, though, someone should think about whether
	fsync on readonly descriptors should be allowed.

(Hi Kirk.  Reading code again....  Actually, someone asked why vi
updates ctimes, and I came up with a bogus reason; later realising
it was bogus, I had to find the real reason.  Ah well.  Explanations
take all the glory out of fixes.)

[Hi Keith (B.).  Do you read these too?  Another bug in that mess
called vi.]

Chris
=======================================
From: mckusick (Kirk McKusick)
Subject: Re: fsync question 

As I recall the bug report came about because fsync() always set the
ctime field, even for read-only files. This has been eliminated in 4.3BSD.
So, I see no reason to disallow fsync calls on RONLY files. In the case of
a single user, they could not have made modifications, so it will be a
no-op. In the case of a shared file, where the other process is modifying
the file, then a process could legitimately want to insure that the file
was sync'ed. I see little to be gained to making the fsync() an error, 
and potential problems for programs that indiscriminately fsync() files
when they close them.

	~Kirk
