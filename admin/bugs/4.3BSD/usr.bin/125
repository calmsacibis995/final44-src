From chris@gyre.umd.edu  Sat Mar 26 19:11:59 1988
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.59/1.26)
	id AA13489; Sat, 26 Mar 88 19:11:59 PST
Received: from gyre.umd.edu by ucbvax.Berkeley.EDU (5.58/1.26)
	id AA05993; Sat, 26 Mar 88 19:12:28 PST
Received: by gyre.umd.edu (5.58/4.7)
	id AA03006; Sat, 26 Mar 88 22:11:29 EST
Date: Sat, 26 Mar 88 22:11:29 EST
From: Chris Torek <chris@gyre.umd.edu>
Message-Id: <8803270311.AA03006@gyre.umd.edu>
To: 4bsd-bugs@ucbvax.Berkeley.EDU
Subject: find does not support `-prune'

Index: usr.bin/find/find.c 4.3BSD Fix

Description:
	Not a bug, but this gets the change filed properly....

	SunOS find has a -prune option to trim away unwanted
	subtrees.  E.g.,

		find . \( -type d -name SCCS -prune \) -o -print

	finds and prints everything except SCCS directories and files
	within them.

Repeat-by:
	*thud*

Fix:
	Below.  I took the liberty of replacing all `(struct anode *)0's
	with NILNODE, while I was at it.

	Find needs a fair bit more work to make it type-correct.  Maybe
	later....

Chris

RCS file: RCS/find.c,v
retrieving revision 1.1
diff -c2 -r1.1 find.c
*** /tmp/,RCSt1002983	Sat Mar 26 22:05:19 1988
--- find.c	Sat Mar 26 22:04:05 1988
***************
*** 20,23 ****
--- 20,26 ----
  	struct anode *L, *R;
  } Node[MAXNODES];
+ 
+ #define	NILNODE	((struct anode *)0)
+ 
  int Nn;  /* number of nodes */
  char	*Fname;
***************
*** 37,40 ****
--- 40,44 ----
  int	Xdev = 1;	/* true if SHOULD cross devices (file systems) */
  struct	stat Devstat;	/* stats of each argument path's file system */
+ int	pruneit;	/* set when -prune executes: prune a subtree */
  
  struct stat Statb;
***************
*** 191,195 ****
  	Randlast++;
  	if(EQ(nxtarg(), "!"))
! 		return(mk(not, e3(), (struct anode *)0));
  	else if(Ai <= Argc) --Ai;
  	return(e3());
--- 195,199 ----
  	Randlast++;
  	if(EQ(nxtarg(), "!"))
! 		return(mk(not, e3(), NILNODE));
  	else if(Ai <= Argc) --Ai;
  	return(e3());
***************
*** 199,203 ****
  		group(), size(), perm(), links(), print(),
  		type(), ino(), cpio(), newer(),
! 		nouser(), nogroup(), ls(), dummy();
  	struct anode *p1;
  	int i;
--- 203,207 ----
  		group(), size(), perm(), links(), print(),
  		type(), ino(), cpio(), newer(),
! 		nouser(), nogroup(), ls(), prune(), dummy();
  	struct anode *p1;
  	int i;
***************
*** 214,232 ****
  	}
  	else if(EQ(a, "-print")) {
! 		return(mk(print, (struct anode *)0, (struct anode *)0));
  	}
  	else if (EQ(a, "-nouser")) {
! 		return (mk(nouser, (struct anode *)0, (struct anode *)0));
  	}
  	else if (EQ(a, "-nogroup")) {
! 		return (mk(nogroup, (struct anode *)0, (struct anode *)0));
  	}
  	else if (EQ(a, "-ls")) {
! 		return (mk(ls, (struct anode *)0, (struct anode *)0));
  	}
  	else if (EQ(a, "-xdev")) {
  		Xdev = 0;
! 		return (mk(dummy, (struct anode *)0, (struct anode *)0));
  	}
  	b = nxtarg();
  	s = *b;
--- 218,239 ----
  	}
  	else if(EQ(a, "-print")) {
! 		return(mk(print, NILNODE, NILNODE));
  	}
  	else if (EQ(a, "-nouser")) {
! 		return (mk(nouser, NILNODE, NILNODE));
  	}
  	else if (EQ(a, "-nogroup")) {
! 		return (mk(nogroup, NILNODE, NILNODE));
  	}
  	else if (EQ(a, "-ls")) {
! 		return (mk(ls, NILNODE, NILNODE));
  	}
  	else if (EQ(a, "-xdev")) {
  		Xdev = 0;
! 		return (mk(dummy, NILNODE, NILNODE));
  	}
+ 	else if (EQ(a, "-prune")) {
+ 		return (mk(prune, NILNODE, NILNODE));
+ 	}
  	b = nxtarg();
  	s = *b;
***************
*** 233,237 ****
  	if(s=='+') b++;
  	if(EQ(a, "-name"))
! 		return(mk(glob, (struct anode *)b, (struct anode *)0));
  	else if(EQ(a, "-mtime"))
  		return(mk(mtime, (struct anode *)atoi(b), (struct anode *)s));
--- 240,244 ----
  	if(s=='+') b++;
  	if(EQ(a, "-name"))
! 		return(mk(glob, (struct anode *)b, NILNODE));
  	else if(EQ(a, "-mtime"))
  		return(mk(mtime, (struct anode *)atoi(b), (struct anode *)s));
***************
*** 277,281 ****
  		    s=='s' ? S_IFSOCK :
  		    0;
! 		return(mk(type, (struct anode *)i, (struct anode *)0));
  	}
  	else if (EQ(a, "-exec")) {
--- 284,288 ----
  		    s=='s' ? S_IFSOCK :
  		    0;
! 		return(mk(type, (struct anode *)i, NILNODE));
  	}
  	else if (EQ(a, "-exec")) {
***************
*** 282,286 ****
  		i = Ai - 1;
  		while(!EQ(nxtarg(), ";"));
! 		return(mk(exeq, (struct anode *)i, (struct anode *)0));
  	}
  	else if (EQ(a, "-ok")) {
--- 289,293 ----
  		i = Ai - 1;
  		while(!EQ(nxtarg(), ";"));
! 		return(mk(exeq, (struct anode *)i, NILNODE));
  	}
  	else if (EQ(a, "-ok")) {
***************
*** 287,291 ****
  		i = Ai - 1;
  		while(!EQ(nxtarg(), ";"));
! 		return(mk(ok, (struct anode *)i, (struct anode *)0));
  	}
  	else if(EQ(a, "-cpio")) {
--- 294,298 ----
  		i = Ai - 1;
  		while(!EQ(nxtarg(), ";"));
! 		return(mk(ok, (struct anode *)i, NILNODE));
  	}
  	else if(EQ(a, "-cpio")) {
***************
*** 296,300 ****
  		Buf = (short *)sbrk(512);
  		Wp = Dbuf = (short *)sbrk(5120);
! 		return(mk(cpio, (struct anode *)0, (struct anode *)0));
  	}
  	else if(EQ(a, "-newer")) {
--- 303,307 ----
  		Buf = (short *)sbrk(512);
  		Wp = Dbuf = (short *)sbrk(5120);
! 		return(mk(cpio, NILNODE, NILNODE));
  	}
  	else if(EQ(a, "-newer")) {
***************
*** 304,308 ****
  		}
  		Newer = Statb.st_mtime;
! 		return mk(newer, (struct anode *)0, (struct anode *)0);
  	}
  err:	fprintf(stderr, "find: bad option < %s >\n", a);
--- 311,315 ----
  		}
  		Newer = Statb.st_mtime;
! 		return mk(newer, NILNODE, NILNODE);
  	}
  err:	fprintf(stderr, "find: bad option < %s >\n", a);
***************
*** 528,531 ****
--- 535,545 ----
  	return (1);
  }
+ prune(p)
+ struct anode *p;
+ {
+ 
+ 	pruneit = 1;
+ 	return (1);
+ }
  dummy(p)
  struct anode *p;
***************
*** 639,645 ****
  		return(0);
  	}
  	(*exlist->F)(exlist);
! 	if((Statb.st_mode&S_IFMT)!=S_IFDIR ||
! 	   !Xdev && Devstat.st_dev != Statb.st_dev)
  		return(1);
  
--- 653,661 ----
  		return(0);
  	}
+ 	pruneit = 0;
  	(*exlist->F)(exlist);
! 	if ((Statb.st_mode & S_IFMT) != S_IFDIR ||
! 	    !Xdev && Devstat.st_dev != Statb.st_dev ||
! 	    pruneit)
  		return(1);
  
