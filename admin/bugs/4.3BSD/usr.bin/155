Subject: nroff -Tnec causes segmentation fault and core dump
Index: usr.bin/roff/nroff 4.3BSD

Description:

Note 51       nroff -Tnec causes segmentation faul   4 responses
hapke@alberto                                4:20 pm  Oct 14, 1985

SHORT BUT DESCRIPTIVE ONE LINE TITLE:  (Type on next line)
nroff -Tnec causes segmentation fault and core dump

Operating System:  	UTX/32
Release:  		1.1
Patch Level:  		C
Product Name:           UTX/32
Hardware Environment:   9080 
Organization:		Gould-CSD/Urbana      (217) 384-8500 
                        1101 E. University, Urbana, Il 61801

MODULE NAME:
/usr/lib/term/tabnec
SPR TYPE:  (Software/Doc/ER)
Software
PRIORITY:  (1 = High, 5 = Low)
4
DESCRIPTION OF PROBLEM:
The -T option to nroff allows a user to format output for a specific printer.
Including -Tnec on a command line causes a core dump.
SAMPLE BROKEN OUTPUT:

None.
HOW TO REPRODUCE THE PROBLEM:  (preferably a shell script)
Type nroff -Tnec -man /usr/man/man1/cc.1 and see what happens.
SUGGESTED FIX:
This used to work.  Pat Kane says that the /usr/lib/term files are
the VAX versions, and need to be updated for UTX/32.
OTHER COMMENTS:

CURRENT WORKING DIRECTORY:
	/mnt/hapke

PATH:
	.:/mnt/hapke/bin:/usr/local:/usr/ucb:/bin:/usr/bin:/usr/new:/project/cell/bin:/usr/games:/mnt/kane/Bin:/usr/hosts

==== ==== ====
Response 1    to Note 51  
	kane@alberto                            2:09 pm  Oct 15, 1985  

Some of the term tables were never ported  they were just copied.

Here is a fixed version of  "tabnec.c".  Some of the others need to be
fixed too.

Pat
---

/*	tabnec.c	4.1	83/08/05	*/
#define INCH 240
/*
 * NEC Spinwriter 5500 or 7700 10 Pitch
 * nroff driving table
 * Courier - 72/Manifold thimble
 * by Skip Walker, ucbvax!c:bodega, 21nov82
 * fixed: P.Kane  alberto!kane   25mar85
 */
struct termtable tnec = {
/*bset*/	0,
/*breset*/	0,
/*Hor*/		INCH/120,
/*Vert*/	INCH/48,
/*Newline*/	INCH/6,
/*Char*/	INCH/10,
/*Em*/		INCH/10,
/*Halfline*/	INCH/12,
/*Adj*/		INCH/10,
/*twinit*/	"",
/*twrest*/	"",
/*twnl*/	"\n",
/*hlr*/		"\033]S\0339\033]W",
/*hlf*/		"\033]S\033ZA\033]W",
/*flr*/		"\0339",
/*bdon*/	"\033+",
/*bdoff*/	"\033,",
/*iton*/	"",

/*itoff*/	"",
/*ploton*/	"\033]A\033]P",
/*plotoff*/	"\033]L\033]W",
/*up*/		"\0339",
/*down*/	"\033ZA",
/*right*/	" ",
/*left*/	"\b",
/*codetab*/
#include "code.nec"

==== ==== ====
Response 2    to Note 51  
	kane@alberto                            2:11 pm  Oct 15, 1985  

Here is the fixed "Makefile" (It is much shorter than the broken one).

Pat
---

#
#	Makefile for nroff terminal driving tables 	Compion 10/14/83
#

CFLAGS = -O
DESTDIR =
INSDIR = ${DESTDIR}/usr/lib/term

FILES = tab2631 tab2631-c tab2631-e tab300 tab300-12 tab300s \
	tab300s-12 tab37 tab382 tab4000a tab450 \
	tab450-12 tab832 taba1 tablp tabtn300 tabX \
	tabnec tabnec12 tabnec-t
B03 =

maketerms :
	cc -DPART1 ${B03} -o maketerms maketerms.c
	./maketerms
	cc -DPART2 ${B03} -o maketerms maketerms.c
	./maketerms
	cc -DPART3 ${B03} -o maketerms maketerms.c
	./maketerms
install:  
	-mkdir ${INSDIR}
	cp ${FILES} ${INSDIR}
	cd ${INSDIR}; rm -f tab300S tab300S-12 tab4000A
	cd ${INSDIR}; ln tab300s tab300S; ln tab300s-12 tab300S-12; \
			ln tab4000a tab4000A
	cd ${INSDIR}; chmod 644 ${FILES}

clean:
	rm -f maketerms
	rm -f ${FILES}

==== ==== ====
Response 3    to Note 51  
	berlinr@alberto                         5:09 pm  Oct 24, 1985  

You will also want to change the usr.bin/troff/terms.d/maketerms.c file
so that it is as follows:

-----------------------------------------------------------------------------

static char *UTHwhat_string = "@(#) UTX-32 nroff, version 1.2 of maketerms.c.";
/*	maketerms.c - make terminal driving tables for nroff */
/*	@(#)maketerms.c	1.3	*/

#include "terms.hd"	/* terminal table structure */
#include "stdio.h"

#ifndef unix
#define tso
#endif

#ifdef tso
#include "tab37.c"
#include "tablp.c"
#include "tabX.c"
#endif

#ifdef PART1
#include "tab300.c"	/* terminal table initializations */
#include "tab300-12.c"
#include "tab300s.c"
#include "tab300s-12.c"
#include "tab37.c"
#include "tab382.c"
#include "tab4000a.c"
#endif
#ifdef PART2
#include "tab450.c"
#include "tab450-12.c"
#include "tab832.c"
#include "taba1.c"
#include "tablp.c"
#include "tabtn300.c"
#include "tabX.c"
#endif
#ifdef PART3
#include "tab2631.c"
#include "tab2631-c.c"
#include "tab2631-e.c"
#include "tabnec.c"
#include "tabnec-t.c"
#include "tabnec12.c"
#endif

#define SSIZE 2000	/* string output buffer size */
#ifdef unix
#define mkterm(pname, tname)	file = fopen("pname","w"); \
				puttab(file, &tname); \
				fclose(file); \
				fprintf (stderr, "made: tname\n");
#endif
#ifdef tso
#define mkterm(pname, tname)	file = fopen("pname.t","w,BINARY"); \
				puttab(file, &tname); \
				fclose(file);
#endif

extern char *putstr();	/* it's down below */

struct termtable tbuf;	/* terminal structure output buffer */
char sbuf[SSIZE];	/* structure string output buffer */
int sbp;		/* string buffer pointer */
FILE *file;		/* file descriptor */

main()
{
#ifdef PART1
	mkterm(tab300, t300)
	mkterm(tab300-12, t30012)
	mkterm(tab300s, t300s)
	mkterm(tab300s-12, t300s12)
	mkterm(tab37, t37)
	mkterm(tab382, t382)
	mkterm(tab4000a, t4000a)
#endif
#ifdef PART2
	mkterm(tab450, t450)
	mkterm(tab450-12, t45012)
	mkterm(tab832, t832)
	mkterm(taba1, ta1)
	mkterm(tablp, tlp)
	mkterm(tabtn300, ttn300)
	mkterm(tabX, tX)
#endif
#ifdef PART3
	mkterm(tab2631, t2631)
	mkterm(tab2631-c, t2631c)
	mkterm(tab2631-e, t2631e)
	mkterm(tabnec, tnec)
	mkterm(tabnec-t, tnect)
	mkterm(tabnec12, tnec12)
#endif
#ifdef tso
	mkterm(tab37, t37)
	mkterm(tablp, tlp)
	mkterm(tabX, tX)

#endif
}

puttab(fc, tab)
FILE *fc;
struct termtable *tab;
{	int i;

	sbp = 0;		/* reset string pointer */

	tbuf.bset = tab->bset;	/* copy values to output structure */
	tbuf.breset = tab->breset;
	tbuf.Hor = tab->Hor;
	tbuf.Vert = tab->Vert;
	tbuf.Newline = tab->Newline;
	tbuf.Char = tab->Char;
	tbuf.Em = tab->Em;
	tbuf.Halfline = tab->Halfline;
	tbuf.Adj = tab->Adj;

	tbuf.twinit = putstr(tab->twinit,0);	/* copy strings and pointers */
	tbuf.twrest = putstr(tab->twrest,0);
	tbuf.twnl = putstr(tab->twnl,0);
	tbuf.hlr = putstr(tab->hlr,0);
	tbuf.hlf = putstr(tab->hlf,0);
	tbuf.flr = putstr(tab->flr,0);
	tbuf.bdon = putstr(tab->bdon,0);
	tbuf.bdoff = putstr(tab->bdoff,0);
	tbuf.iton = putstr(tab->iton,0);
	tbuf.itoff = putstr(tab->itoff,0);
	tbuf.ploton = putstr(tab->ploton,0);
	tbuf.plotoff = putstr(tab->plotoff,0);
	tbuf.up = putstr(tab->up,0);
	tbuf.down = putstr(tab->down,0);
	tbuf.right = putstr(tab->right,0);
	tbuf.left = putstr(tab->left,0);

	for (i=0; i<(256-32); i++)	/* do the same for codetab */

		tbuf.codetab[i] = putstr(tab->codetab[i],2);

	tbuf.zzz = tab->zzz;	/* ??? */

	fwrite((char *)&sbp,sizeof(sbp),1,fc);
	fwrite((char *)&tbuf,sizeof(tbuf),1,fc);
	fwrite((char *)sbuf,sbp,1,fc);
}

char *putstr(pt, cnt)
char *pt;
int cnt;
{	char *p;
	register int i, j, k;

	if (pt == (char *)0) return (0);	/* null pointer */
	for (i=0;  i<sbp;  i++)	{	/* check for string in buffer */

	    for (p=pt,k=cnt,j=i;
		  ((j<sbp) && (sbuf[j]==*p) && ((k-->0) || *p));
		    j++,p++)  ;

	    if ((j<sbp) && !sbuf[j] && !*p)
		return ((char *)i);	}

	/* not in table now - add it */

	i = sbp;

	for (k=cnt,p=pt;  ((sbp<SSIZE) && ((k-->0) || *p)); p++)

		sbuf[sbp++] = *p;	/* put string */

	sbuf[sbp++] = 0;		/* terminate string */

	if (sbp >= SSIZE)	{

		fputs("? string area overflow\n",23);
		exit(-1);	}

	return ((char *)i);
}

