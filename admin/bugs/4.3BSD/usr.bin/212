From serge@okeeffe.Berkeley.EDU  Wed Aug 23 18:53:03 1989
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.61/1.29)
	id AA10988; Wed, 23 Aug 89 18:53:03 -0700
Received: from okeeffe.Berkeley.EDU by ucbvax.Berkeley.EDU (5.61/1.37)
	id AA06445; Wed, 23 Aug 89 18:53:48 -0700
Received: by okeeffe.Berkeley.EDU (5.61/1.37)
	id AA10983; Wed, 23 Aug 89 18:52:56 -0700
Date: Wed, 23 Aug 89 18:52:56 -0700
From: serge@okeeffe.Berkeley.EDU (serge)
Message-Id: <8908240152.AA10983@okeeffe.Berkeley.EDU>
Subject: passwd crypt salt is not sufficiently random
Index: usr.bin/passwd/passwd.c 4.3BSD
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Fix:
*** /usr/src/usr.bin/passwd/passwd.c	Wed May 10 14:24:36 1989
--- passwd.c	Fri Aug  4 19:17:12 1989
***************
*** 214,220 ****
  {
  	register char *p, *t;
  	char buf[10], salt[2], *crypt(), *getpass();
! 	time_t time();
  
  	if (uid && pw->pw_passwd &&
  	    strcmp(crypt(getpass("Old password:"), pw->pw_passwd),
--- 214,223 ----
  {
  	register char *p, *t;
  	char buf[10], salt[2], *crypt(), *getpass();
! 	struct timeval tv;
! 	extern long random();
! 	static char alphabet[] = /* crypt salt alphabet: a-zA-Z0-9./ */
! 	"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./";
  
  	if (uid && pw->pw_passwd &&
  	    strcmp(crypt(getpass("Old password:"), pw->pw_passwd),
***************
*** 245,254 ****
  			break;
  		printf("Mismatch; try again, EOF to quit.\n");
  	}
! 	/* grab a random printable character that isn't a colon */
! 	(void)srandom((int)time((time_t *)NULL));
! 	while ((salt[0] = random() % 93 + 33) == ':');
! 	while ((salt[1] = random() % 93 + 33) == ':');
  	return(crypt(buf, salt));
  }
  
--- 248,264 ----
  			break;
  		printf("Mismatch; try again, EOF to quit.\n");
  	}
! 
! 	if (gettimeofday(&tv, (struct timezone *) NULL) == -1) {
! 		fprintf(stderr, "passwd: gettimeofday: %s\n", strerror(errno));
! 		exit(1);
! 	}
! 
! 	(void)srandom(tv.tv_sec + tv.tv_usec + getpid() + gethostid());
! 	salt[0] = alphabet[(unsigned long)random() %
! 			((sizeof (alphabet) / sizeof (alphabet[0])) - 1)];
! 	salt[1] = alphabet[(unsigned long)random() %
! 			((sizeof (alphabet) / sizeof (alphabet[0])) - 1)];
  	return(crypt(buf, salt));
  }
  
