From ADM%TAURUS.BITNET@jade.berkeley.edu  Tue Nov 25 12:28:14 1986
Return-Path: <leonid%taunop.tau.ac.il@taurus.BITNET>
Date: Tue, 25 Nov 86 21:07:29 +0200
From: leonid%taunop.tau.ac.il%taurus.BITNET@jade.berkeley.edu (Leonid Rosenboim)
Subject: libm:infnan
Index:  usr.lib/libm/VAX/infnan.s 4.3BSD
Apparently-From: Leonid Rosenboim <leonid@taurus.BITNET>,
                 Pini Gartenberg  <pini@taurus.BITNET>

Description:
        Whenever this function is called, an"Illegal Instruction" trap
        is generated. (SIGILL #4). This oposes both the previous BSD
        convention (generate the Floating Point Exception signal - SIGFPE
        #8), and the IEEE concept (to let computation continue).
Repeat-By:
        sqrt(-1.0) in C, (sqrt -1.0) in Lisp (which can only catch SIGFPE),
        ...
Fix:
        As a temporary measure, I wrote a small infnan in C, and loaded
        it into the machine-dependent part of Franz Lisp.
        /usr/src/ucb/lisp/franz/vax/infnan.c :

                #include <signal.h>
                infnan(iarg)
                int iarg ;
                {
                        extern int errno ;
                        errno = iarg ;
                        kill(0,SIGFPE);
                }

        You guys should decide whether you want to return values or to
        send signals, and then change all the dumb software that uses
        SIGFPE :-)
--------------------------------------------------------------------------
