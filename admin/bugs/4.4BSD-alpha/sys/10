From trk@palm.cray.com Thu Jun 10 13:31:42 1993
From: trk@palm.cray.com (Tim Kirby)
Subject: Just what you wanted to hear...
To: sklower@vangogh.CS.Berkeley.EDU (Keith Sklower),
        bostic@vangogh.CS.Berkeley.EDU (Keith Bostic)
Date: Thu, 10 Jun 93 15:31:40 CDT
X-Mailer: ELM [version 2.3 PL11b-CRI]
Index: sys/netiso/tp_usrreq.c 4.4BSD-alpha

Greetings, Keith(s)...

    This is probably relatively minor, but I thought I'd pass it along anyway.

I have been fighting with some stress tests on our multithreaded BSD44 iso code
and appear to have found an mbuf leak in the recipt of OOB data...

In tp_usrreq.c, the routine tp_rcvoob has the following code:

        if ((inflags & MSG_PEEK) == 0) {
                n = *nn;
                *nn = n->m_act;
                sb->sb_cc -= m->m_len;
        }

which is excising the mbuf from the so receive queue. As a point of passing
interest, our code was previously updated (possibly by Jim Mostek) to use
sbfree instead of the line

		sb->sb_cc -= m->m_len;

but in any event, n is now the only pointer to the mbuf that we have copied
data from but ... there is never any other reference to it before tp_rcvoob
returns control to the caller... hence the mbuf(s) that n points at appear to
be... um... dropped on the floor, for want of a better term.

Given that not many people use TP OOB directly, this is probably an annoyance
more than anything else... but I thought you might like to know...

Cheers

Tim
-- 
Tim Kirby --------- Cray Research Inc., Eagan, MN, USA ----------- trk@cray.com
Disclaimer: I disclaim, therefore I am. Be warned ...
-------------------------------------------------------------------------------
When all else fails, Immortality may always be assured by spectacular error(JKG)

