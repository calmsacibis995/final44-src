From bigbug@cs.huji.ac.il  Sat Feb 27 20:04:54 1993
Date: Sun, 28 Feb 93 06:05:51 +0200
From: Yuval Yarom <yval@CS.HUJI.AC.IL>
To: 4bsd-bugs@okeeffe.CS.Berkeley.EDU
Subject: Several bugs in receive from socket
Index: sys/kern/uipc_syscalls.c 4.4BSD-alpha

Shalom,
  Here is a patch for the following problems in socket handling:
1. If access rights are sent on a pipe read(2) may return end-of-file
   even though the pipe is not widowed.
2. recv(2) with MSG_WAITALL may sleep with the socket in a very bad
   state causing a panic in sbdrop.
3. A process may receive access rights without asking for them.
4. MSG_TRUNC is not returned when using recvmsg(2) with MSG_PEEK.
5. recv(2) with MSG_WAITALL blocks when reading from atomic sockets if
   there is only one message in the pipe.
The following program demonstrates the 5 problems.


#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>
#include <stdio.h>

char buf[100];

main(c, v)
	int c;
	char **v;
{
	int p[2];
	struct msghdr mh;
	char cmsgbuf[sizeof(struct cmsghdr) + sizeof(int)];
	struct cmsghdr *cmhp = (struct cmsghdr *)cmsgbuf;
	struct iovec aiov;
	int bugnum;


	if (c != 2 || (bugnum = atoi(v[1])) < 1 || bugnum > 5) {
		fprintf(stderr, "usage: %s [1 | 2 | 3 | 4 | 5]\n", *v);
		exit(1);
	}

	bzero(&mh, sizeof(mh));


	if (bugnum >= 4) {
		socketpair(PF_UNIX, SOCK_DGRAM, 0, p);

		aiov.iov_base = "ab";
		aiov.iov_len = 2;

		mh.msg_iov = &aiov;
		mh.msg_iovlen = 1;
	} else {
		cmhp->cmsg_len = sizeof(cmsgbuf);
		cmhp->cmsg_level = SOL_SOCKET;
		cmhp->cmsg_type = SCM_RIGHTS;

		mh.msg_control = (caddr_t)cmhp;
		mh.msg_controllen = cmhp->cmsg_len;


		pipe(p);

		if (bugnum == 2)
			write(p[1], "a", 1);
		*(int *)CMSG_DATA(cmhp) = p[0];
	}
	if (sendmsg(p[1], &mh, 0) < 0) {
		perror("sendmsg");
		exit(1);
	}
	switch(bugnum) {
	case 1:
		printf("Should block now.\n");
		if (read(p[0], &buf, sizeof(buf)) == 0)
			printf("oops\n");
		break;
	case 2:
		sync();
		sleep(1);
		sync();		/* I hope the fs is synced... */
		recv(p[0], buf, sizeof(buf), MSG_WAITALL);
		break;
	case 3:
		write(p[1], "a", 1);
		close(0);
		recv(p[0], buf, sizeof(buf), 0);
		if (close(0) == 0)
			printf("oops\n");
		break;
	case 4:
		aiov.iov_base = buf;
		aiov.iov_len = 1;

		recvmsg(p[0], &mh, MSG_PEEK);
		if ((mh.msg_flags & MSG_TRUNC) == 0)
			printf("oops\n");
		break;
	case 5:
		printf("Should not block now\n");
		recv(p[0], buf, sizeof(buf), MSG_WAITALL);
		break;
	}
}


And here is the patch...


				Yuval

-----------------------------------------------------------------

*** uipc_syscalls.c.orig	Sat Feb 27 21:44:24 1993
--- uipc_syscalls.c	Sun Feb 28 02:59:04 1993
***************
*** 784,790 ****
  #endif
  	len = auio.uio_resid;
  	if (error = soreceive((struct socket *)fp->f_data, &from, &auio,
! 	    (struct mbuf **)0, &control, &mp->msg_flags)) {
  		if (auio.uio_resid != len && (error == ERESTART ||
  		    error == EINTR || error == EWOULDBLOCK))
  			error = 0;
--- 784,791 ----
  #endif
  	len = auio.uio_resid;
  	if (error = soreceive((struct socket *)fp->f_data, &from, &auio,
! 	    (struct mbuf **)0, mp->msg_control ? &control : (struct mbuf **)0,
! 	    &mp->msg_flags)) {
  		if (auio.uio_resid != len && (error == ERESTART ||
  		    error == EINTR || error == EWOULDBLOCK))
  			error = 0;
*** uipc_socket.c.orig	Sat Feb 27 21:52:16 1993
--- uipc_socket.c	Sun Feb 28 02:58:50 1993
***************
*** 479,484 ****
--- 479,485 ----
  	struct protosw *pr = so->so_proto;
  	struct mbuf *nextrecord;
  	int moff, type;
+ 	int orig_resid = uio->uio_resid;
  
  	mp = mp0;
  	if (paddr)
***************
*** 530,536 ****
  	while (m == 0 || so->so_rcv.sb_cc < uio->uio_resid &&
  	    (so->so_rcv.sb_cc < so->so_rcv.sb_lowat ||
  	    ((flags & MSG_WAITALL) && uio->uio_resid <= so->so_rcv.sb_hiwat)) &&
! 	    m->m_nextpkt == 0) {
  #ifdef DIAGNOSTIC
  		if (m == 0 && so->so_rcv.sb_cc)
  			panic("receive 1");
--- 531,537 ----
  	while (m == 0 || so->so_rcv.sb_cc < uio->uio_resid &&
  	    (so->so_rcv.sb_cc < so->so_rcv.sb_lowat ||
  	    ((flags & MSG_WAITALL) && uio->uio_resid <= so->so_rcv.sb_hiwat)) &&
! 	    m->m_nextpkt == 0 && (pr->pr_flags & PR_ATOMIC) == 0) {
  #ifdef DIAGNOSTIC
  		if (m == 0 && so->so_rcv.sb_cc)
  			panic("receive 1");
***************
*** 580,585 ****
--- 581,587 ----
  		if (m->m_type != MT_SONAME)
  			panic("receive 1a");
  #endif
+ 		orig_resid = 0;
  		if (flags & MSG_PEEK) {
  			if (paddr)
  				*paddr = m_copy(m, 0, m->m_len);
***************
*** 618,625 ****
  				m = so->so_rcv.sb_mb;
  			}
  		}
! 		if (controlp)
  			controlp = &(*controlp)->m_next;
  	}
  	if (m) {
  		if ((flags & MSG_PEEK) == 0)
--- 620,629 ----
  				m = so->so_rcv.sb_mb;
  			}
  		}
! 		if (controlp) {
! 			orig_resid = 0;
  			controlp = &(*controlp)->m_next;
+ 		}
  	}
  	if (m) {
  		if ((flags & MSG_PEEK) == 0)
***************
*** 712,718 ****
  		 * Keep sockbuf locked against other readers.
  		 */
  		while (flags & MSG_WAITALL && m == 0 && uio->uio_resid > 0 &&
! 		    !sosendallatonce(so)) {
  			if (so->so_error || so->so_state & SS_CANTRCVMORE)
  				break;
  			error = sbwait(&so->so_rcv);
--- 716,722 ----
  		 * Keep sockbuf locked against other readers.
  		 */
  		while (flags & MSG_WAITALL && m == 0 && uio->uio_resid > 0 &&
! 		    !sosendallatonce(so) && !nextrecord) {
  			if (so->so_error || so->so_state & SS_CANTRCVMORE)
  				break;
  			error = sbwait(&so->so_rcv);
***************
*** 725,742 ****
  				nextrecord = m->m_nextpkt;
  		}
  	}
  	if ((flags & MSG_PEEK) == 0) {
  		if (m == 0)
  			so->so_rcv.sb_mb = nextrecord;
- 		else if (pr->pr_flags & PR_ATOMIC) {
- 			flags |= MSG_TRUNC;
- 			(void) sbdroprecord(&so->so_rcv);
- 		}
  		if (pr->pr_flags & PR_WANTRCVD && so->so_pcb)
  			(*pr->pr_usrreq)(so, PRU_RCVD, (struct mbuf *)0,
  			    (struct mbuf *)flags, (struct mbuf *)0,
  			    (struct mbuf *)0);
  	}
  	if (flagsp)
  		*flagsp |= flags;
  release:
--- 729,755 ----
  				nextrecord = m->m_nextpkt;
  		}
  	}
+ 
+ 	if (m && pr->pr_flags & PR_ATOMIC) {
+ 		flags |= MSG_TRUNC;
+ 		if ((flags & MSG_PEEK) == 0)
+ 			(void) sbdroprecord(&so->so_rcv);
+ 	}
  	if ((flags & MSG_PEEK) == 0) {
  		if (m == 0)
  			so->so_rcv.sb_mb = nextrecord;
  		if (pr->pr_flags & PR_WANTRCVD && so->so_pcb)
  			(*pr->pr_usrreq)(so, PRU_RCVD, (struct mbuf *)0,
  			    (struct mbuf *)flags, (struct mbuf *)0,
  			    (struct mbuf *)0);
  	}
+ 	if (orig_resid == uio->uio_resid && orig_resid &&
+ 	    (flags & MSG_EOR) == 0 && (so->so_state & SS_CANTRCVMORE) == 0) {
+ 		sbunlock(&so->so_rcv);
+ 		splx(s);
+ 		goto restart;
+ 	}
+ 		
  	if (flagsp)
  		*flagsp |= flags;
  release:
