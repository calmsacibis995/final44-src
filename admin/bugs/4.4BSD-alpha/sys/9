From hgv@herring.network.com Sun May 30 11:53:50 1993
Newsgroups: comp.protocols.tcp-ip
From: hgv@herring.network.com (Harry G. Varnis)
Subject: Rare (but nasty) BSD TCP problem
Originator: hgv@herring
Nntp-Posting-Host: herring
Organization: Network Systems Corporation
Date: Fri, 28 May 93 19:13:00 GMT
Index: sys 4.4BSD-alpha

I recently stumbled across an admittedly weird case of socket misuse
that locks up SunOS 4.1 tighter than a drum.  It happens when an application
connects through a local interface to the same port to which it is bound.
From experimentation on another platform it appears that the TCP is mangling
the tcb state in such a way as to induce a hard loop doing tcp_output-s.

If someone knows of a fix to this problem I would appreciate hearing
of it.

Here is the program.  Execute at your own risk.

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

main()
{
    struct sockaddr_in server;
    int     s, length;

    s = socket(AF_INET, SOCK_STREAM, 0);
    if (s < 0) {
        perror("socket");
        exit(1);
    }
    bzero(&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(0);

    if (bind(s, &server, sizeof(server)) < 0) {
        perror("bind");
        exit(1);
    }
    length = sizeof(server);
    if (getsockname(s, &server, &length) < 0) {
        perror("getsockname");
        exit(1);
    }
    printf("local: addr %s port %d\n", inet_ntoa(server.sin_addr),
      ntohs(server.sin_port));

    server.sin_addr.s_addr = inet_addr("127.0.0.1");
    printf("connecting: addr %s port %d\n", inet_ntoa(&server.sin_addr),
      ntohs(server.sin_port));

    if (connect(s, &server, sizeof(server)) < 0) {
        perror("connect");
    }
    exit(0);
}
- -- 
Harry Varnis         <hgv@anubis.network.com>          +1 612 493 1042

