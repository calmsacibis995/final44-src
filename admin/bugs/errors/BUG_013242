From steve@umiacs.UMD.EDU  Fri Aug 10 12:50:32 1990
Received: from fnord.umiacs.umd.edu by okeeffe.Berkeley.EDU (5.63/1.41)
	id AA13238; Fri, 10 Aug 90 12:50:32 -0700
Received: by fnord.umiacs.UMD.EDU (5.61/UMIACS-0.9/04-05-88)
	id AA01957; Fri, 10 Aug 90 15:59:55 -0400
Date: Fri, 10 Aug 90 15:59:55 -0400
From: steve@umiacs.UMD.EDU (Steve D. Miller)
Message-Id: <9008101959.AA01957@fnord.umiacs.UMD.EDU>
To: 4bsd-bugs@okeeffe.Berkeley.EDU, jb@cs.brown.edu, louie@trantor.umd.edu
Subject: 4.3-reno nslookup dumps core
Cc: steve@umiacs.UMD.EDU

Subject: BIND 4.8.3.1 nslookup dumps core
Index:	/usr/src/usr.sbin/named/tools/nslookup/skip.c 4.3reno [FIX]

Description:
	If you look up something with (say) answers in the additional
	record section of a DNS packet, nslookup will blow its cookies.

Repeat-By:
	Run nslookup, and look up the MX for something that's likely
	to put an answer in the additional-record section.  (I used
	zippy.cs.umd.edu.)  Nslookup will print the MX, but will die
	with a segmentation fault when it tries to print the additional
	records.  For example:

	(54) pronto.cs.umd.edu > nslookup
	Default Server:  rhodes.cs.umd.edu
	Address:  128.8.128.1

	> set q=MX
	> fnord.umiacs.umd.edu
	Server:  rhodes.cs.umd.edu
	Address:  128.8.128.1

	fnord.umiacs.umd.edu    preference = 10, mail exchanger = \
	    fnord.umiacs.UMD.EDU
	Segmentation fault

Fix:
	The problem is that between BIND 4.8.2.2 and 4.8.3.1, someone
	put some bounds checking into skip.c, and didn't do so quite
	correctly.  So res_skip_rr returns NULL, and (in the GetAnswer
	routine, we check to be sure that cp (== NULL) < eom, which of
	course it is...)

	-Steve

Spoken: Steve Miller    Domain: steve@umiacs.umd.edu    UUCP: uunet!mimsy!steve
Phone: +1-301-454-1808  USPS: UMIACS, Univ. of Maryland, College Park, MD 20742
               New phone (August 6thish, 1990): (301) 405-6736

*** /tmp/,RCSt1a01144	Fri Aug 10 15:50:22 1990
--- /tmp/,RCSt2a01144	Fri Aug 10 15:50:22 1990
***************
*** 166,172 ****
  	dlen = _getshort(cp);
  	cp += sizeof(u_short);	/* 	dlen 	*/
  	cp += dlen;
! 	if ((cp + dlen) > eom)
  		return (NULL);
  	return (cp);
  }
--- 166,172 ----
  	dlen = _getshort(cp);
  	cp += sizeof(u_short);	/* 	dlen 	*/
  	cp += dlen;
! 	if (cp > eom)
  		return (NULL);
  	return (cp);
  }
