From ado@elsie.nci.nih.gov  Thu Oct  4 17:34:56 1990
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.65/1.41)
	id AA27896; Thu, 4 Oct 90 17:34:56 -0700
Received: from elsie.nci.nih.gov by ucbvax.Berkeley.EDU (5.63/1.42)
	id AA21122; Thu, 4 Oct 90 17:35:04 -0700
Received: by elsie.nci.nih.gov (4.1/SMI-4.1)
	id AA24988; Thu, 4 Oct 90 20:35:04 EDT
Date: Thu, 4 Oct 90 20:35:04 EDT
From: ado@elsie.nci.nih.gov (Arthur David Olson)
Message-Id: <9010050035.AA24988@elsie.nci.nih.gov>
To: 4bsd-ideas@ucbvax.Berkeley.EDU
Subject: df
Cc: more-ideas@mtxinu.com

Here's a change to "df.c" that adds a -l option, which asks that df list, in
the "avail" column, the size of the largest file that can be created on a
system.  Since a file can contain at most one block worth of fragments, this
"largest file" number must exclude fragments.

				--ado

SCCS/s.df.c: 1.2 vs. 1.3
*** 1.2/df.c	Thu Oct  4 20:28:18 1990
--- 1.3/df.c	Thu Oct  4 20:28:18 1990
***************
*** 32,37 ****
--- 32,38 ----
  char	*mpath();
  
  int	iflag;
+ int	lflag;
  
  union {
  	struct fs iu_fs;
***************
*** 56,63 ****
  			iflag++;
  			break;
  
  		default:
! 			fprintf(stderr, "usage: df [ -i ] [ filsys... ]\n");
  			exit(0);
  		}
  		argc--, argv++;
--- 57,68 ----
  			iflag++;
  			break;
  
+ 		case 'l':
+ 			lflag++;
+ 			break;
+ 
  		default:
! 			fprintf(stderr, "usage: df [ -il ] [ filsys... ]\n");
  			exit(0);
  		}
  		argc--, argv++;
***************
*** 96,101 ****
--- 101,107 ----
  	int infsent;
  {
  	long totalblks, availblks, avail, free, used;
+ 	long filled;
  	struct stat stbuf;
  	struct fstab *fsp;
  
***************
*** 136,145 ****
  	free = sblock.fs_cstotal.cs_nbfree * sblock.fs_frag +
  	    sblock.fs_cstotal.cs_nffree;
  	used = totalblks - free;
  	availblks = totalblks * (100 - sblock.fs_minfree) / 100;
  	avail = availblks > used ? availblks - used : 0;
  	printf("%8d%8d%8d", totalblks * sblock.fs_fsize / 1024,
! 	    used * sblock.fs_fsize / 1024, avail * sblock.fs_fsize / 1024);
  	printf("%6.0f%%",
  	    availblks == 0 ? 0.0 : (double) used / (double) availblks * 100.0);
  	if (iflag) {
--- 142,154 ----
  	free = sblock.fs_cstotal.cs_nbfree * sblock.fs_frag +
  	    sblock.fs_cstotal.cs_nffree;
  	used = totalblks - free;
+ 	filled = used;
+ 	if (lflag)
+ 		used += sblock.fs_cstotal.cs_nffree;
  	availblks = totalblks * (100 - sblock.fs_minfree) / 100;
  	avail = availblks > used ? availblks - used : 0;
  	printf("%8d%8d%8d", totalblks * sblock.fs_fsize / 1024,
! 	    filled * sblock.fs_fsize / 1024, avail * sblock.fs_fsize / 1024);
  	printf("%6.0f%%",
  	    availblks == 0 ? 0.0 : (double) used / (double) availblks * 100.0);
  	if (iflag) {
