From jik@PIT-MANAGER.MIT.EDU  Wed Jun 20 13:13:13 1990
Received: from ucbvax.Berkeley.EDU by okeeffe.Berkeley.EDU (5.63/1.41)
	id AA29674; Wed, 20 Jun 90 13:13:13 -0700
Received: from PIT-MANAGER.MIT.EDU by ucbvax.Berkeley.EDU (5.63/1.41)
	id AA14166; Wed, 20 Jun 90 13:13:24 -0700
Received:  by PIT-MANAGER.MIT.EDU (5.61/2.0JIK) id <AA24897@PIT-MANAGER.MIT.EDU>; Wed, 20 Jun 90 16:13:09 -0400
Date: Wed, 20 Jun 90 16:13:09 -0400
Message-Id: <9006202013.AA24897@PIT-MANAGER.MIT.EDU>
From: "Jonathan I. Kamens" <jik@pit-manager.MIT.EDU>
Sender: jik@PIT-MANAGER.MIT.EDU
To: bugs@ucbvax.Berkeley.EDU
Subject: find "-depth" option
Index: usr.bin 4.3BSD-tahoe


Description:
	Find doesn't have a "-depth" option.

Repeat-By:
	Take a look at it.

Fix:
	Add a -depth option.  Credit to Richard Basch
(probe@athena.mit.edu).

Jonathan Kamens			              USnail:
MIT Project Athena				11 Ashford Terrace
jik@Athena.MIT.EDU				Allston, MA  02134
Office: 617-253-8495			      Home: 617-782-0710

*** /mit/4.3tahoe/man/man1/find.1	Thu Jul 21 21:32:30 1988
--- find.1	Wed Jun 20 16:11:05 1990
***************
*** 207,212 ****
--- 207,219 ----
  .I argument
  pathname resides.
  .TP
+ .B \-depth
+ Always true;
+ causes find to process directories depth-first (the contents of
+ directories are processed
+ .I before
+ the directories themselves).
+ .TP
  .B \-follow
  Always true;
  causes find to traverse symbolic links to directories.
*** /mit/4.3tahoe/usr.bin/find/find.c	Mon Sep 28 19:50:46 1987
--- find.c	Wed Jun 20 16:10:01 1990
***************
*** 35,40 ****
--- 35,41 ----
  long	Newer;
  
  int	Xdev = 1;	/* true if SHOULD cross devices (file systems) */
+ int	Depth = 0;	/* true if process dir. contents prior to the dir. */
  int	follow;		/* true if SHOULD descend symlinked directories */
  struct	stat Devstat;	/* stats of each argument path's file system */
  
***************
*** 233,238 ****
--- 234,243 ----
  		follow=1;
  		return mk(dummy, (struct anode *)0, (struct anode *)0);
  	}
+ 	else if (EQ(a, "-depth")) {
+ 		Depth = 1;
+ 		return (mk(dummy, (struct anode *)0, (struct anode *)0));
+ 	}
  	b = nxtarg();
  	s = *b;
  	if(s=='+') b++;
***************
*** 643,652 ****
  		fprintf(stderr, "find: bad status < %s >\n", name);
  		return(0);
  	}
! 	(*exlist->F)(exlist);
  	if((Statb.st_mode&S_IFMT)!=S_IFDIR ||
! 	   !Xdev && Devstat.st_dev != Statb.st_dev)
  		return(1);
  
  	if (Statb.st_nlink == 2 && exlist->F == and &&
  		exlist->L->F == type && ((int) (exlist->L->L)) == S_IFDIR)
--- 648,659 ----
  		fprintf(stderr, "find: bad status < %s >\n", name);
  		return(0);
  	}
! 	if (!Depth || ((Statb.st_mode&S_IFMT)!=S_IFDIR))
! 		(*exlist->F)(exlist);
  	if((Statb.st_mode&S_IFMT)!=S_IFDIR ||
! 	   !Xdev && Devstat.st_dev != Statb.st_dev) {
  		return(1);
+ 	}
  
  	if (Statb.st_nlink == 2 && exlist->F == and &&
  		exlist->L->F == type && ((int) (exlist->L->L)) == S_IFDIR)
***************
*** 689,695 ****
--- 696,705 ----
  		*endofname = '\0';
  		fprintf(stderr, "find: bad directory <%s>\n", name);
  		rv = 1;
+ 	} else if (Depth) {
+ 		(*exlist->F)(exlist);
  	}
+ 		
  	return(rv);
  }
  
