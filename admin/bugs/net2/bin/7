From ossi!ossi.com!sparker@uunet.UU.NET Mon Jul 20 23:23:54 1992
To: bostic@okeeffe.CS.Berkeley.EDU
Subject: Null dereference bug in ash, function evalbackcmd()
Date: Mon, 20 Jul 92 22:05:38 PDT
From: sparker@ossi.com
Index: bin/sh net2

The context diff below applies to the file eval.c.  The bug is reproduced
with something like:

echo ``

What happens is evalbackcmd() is called with a command tree of null.
The code in evalbackcmd procedes to dereference the pointer, without
checking to see if a command tree exists.  I don't know ash's internals
well enough to know if a fix above this level is more reasonable.
(For example, when one notices that one has a `string`, it might be
possible to test for a null string there and avoid calling down to
evaluate the back-quoted string.  I ran out of gumption before
reaching a high enough understanding of how the parser/evaluator
worked.  Besides, this fix seems to work.  :^)

Cheers,

	~sparker

eval.c: evalbackcmd()
*** /tmp/geta7909	Mon Jul 20 21:57:43 1992
--- /tmp/getb7909	Mon Jul 20 21:57:43 1992
***************
*** 495,500 ****
--- 495,503 ----
        result->buf = NULL;
        result->nleft = 0;
        result->jp = NULL;
+       if (n == NULL) {
+ 		goto out;
+       }
        if (n->type == NCMD) {
  	    evalcommand(n, EV_BACKCMD, result);
        } else {
***************
*** 515,520 ****
--- 518,524 ----
  	    result->fd = pip[0];
  	    result->jp = jp;
        }
+ out:
        popstackmark(&smark);
        TRACE(("evalbackcmd done: fd=%d buf=0x%x nleft=%d jp=0x%x\n",
  	    result->fd, result->buf, result->nleft, result->jp));

