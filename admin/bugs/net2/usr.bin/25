From guy@auspex.com  Wed May 13 22:07:07 1992
Received: from ucbvax.Berkeley.EDU by okeeffe.CS.Berkeley.EDU (5.79/1.42)
	id AA26614; Wed, 13 May 92 22:07:07 -0700
Received: from AUSPEX-GW.AUSPEX.COM by ucbvax.Berkeley.EDU (5.63/1.43)
	id AA19496; Wed, 13 May 92 22:07:10 -0700
Received: from auspex.com (auspex.auspex.com) by auspex-gw.Auspex.COM (4.1/SMI-4.1)
	id AA13222; Wed, 13 May 92 22:07:32 PDT
Received: by auspex.com (4.1/SMI-4.1)
	id AA10591; Wed, 13 May 92 22:07:30 PDT
Date: Wed, 13 May 92 22:07:30 PDT
From: guy@auspex.com (Guy Harris)
Message-Id: <9205140507.AA10591@auspex.com>
Subject: BSD "make" doesn't grok the "include" that other "make"s (improved fix)
Index: usr.bin net2
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Description:
	The System III "make" added a feature wherein a line of the form

		include <filename>

	in a Makefile, where <filename> is the pathname of a file with
	no special characters around it, causes the file to be included
	into the Makefile at that point.

	The System V "make" continued to support that feature.

	The Sun "SunPro 'make'" picked it up, as it was intended to be a
	superset of the SV "make".

	The GNU "make" picked it up.

	The Sprite/BSD "make" *didn't* pick it up.

	Get with the program, folks....
Repeat-By:
	Try using a Makefile with such an "include" line, and watch the
	BSD "make" barf.
Fix:
	This is for the 4.3-reno "make"; it should work with the net-2
	"make" as well, albeit with different line numbers.

	This fix, unlike the previous fix, requires a space character
	after the "include" (as the other "make"s cited do), so that
	lines that begin with "include:" aren't treated as include lines.

*** parse.c.orig	Wed May 13 18:51:17 1992
--- parse.c	Wed May 13 22:02:03 1992
***************
*** 1622,1627 ****
--- 1622,1768 ----
  
  /*-
   *---------------------------------------------------------------------
+  * ParseTraditionalInclude  --
+  *	Push to another file.
+  *	
+  *	The input is the line minus the "include".  The file name is
+  *	the string following the "include".
+  *
+  * Results:
+  *	None
+  *
+  * Side Effects:
+  *	A structure is added to the includes Lst and readProc, lineno,
+  *	fname and curFILE are altered for the new file
+  *---------------------------------------------------------------------
+  */
+ static void
+ ParseTraditionalInclude (file)
+     char          *file;	/* file specification */
+ {
+     char          *fullname;	/* full pathname of file */
+     IFile         *oldFile;	/* state associated with current file */
+     Lst           path;	    	/* the path to use to find the file */
+     char          *cp;		/* current position in file spec */
+     char	  *prefEnd;
+ 
+     /*
+      * Skip over whitespace
+      */
+     while ((*file == ' ') || (*file == '\t')) {
+ 	file++;
+     }
+ 
+     if (*file == '\0') {
+ 	Parse_Error (PARSE_FATAL,
+ 		     "Filename missing from \"include\"");
+ 	return;
+     }
+ 
+     /*
+      * Skip to end of line or next whitespace
+      */
+     for (cp = file; *cp && *cp != '\n' && *cp != '\t' && *cp != ' '; cp++) {
+ 	continue;
+     }
+ 
+     *cp = '\0';
+ 
+     /*
+      * Substitute for any variables in the file name before trying to
+      * find the thing.
+      */
+     file = Var_Subst (file, VAR_CMD, FALSE);
+ 
+     /*
+      * Now we know the file's name, we attempt to find the durn thing.
+      * A return of NULL indicates the file don't exist.
+      *
+      * Include files are first searched for relative to the including
+      * file's location. We don't want to cd there, of course, so we
+      * just tack on the old file's leading path components and call
+      * Dir_FindFile to see if we can locate the beast.
+      * XXX - this *does* search in the current directory, right?
+      */
+ 
+     prefEnd = rindex (fname, '/');
+     if (prefEnd != (char *)NULL) {
+ 	char  	*newName;
+ 	    
+ 	*prefEnd = '\0';
+ 	newName = str_concat (fname, file, STR_ADDSLASH);
+ 	fullname = Dir_FindFile (newName, parseIncPath);
+ 	if (fullname == (char *)NULL) {
+ 	    fullname = Dir_FindFile(newName, dirSearchPath);
+ 	}
+ 	free (newName);
+ 	*prefEnd = '/';
+     } else {
+ 	fullname = (char *)NULL;
+     }
+ 
+     if (fullname == (char *)NULL) {
+ 	/*
+ 	 * System makefile or makefile wasn't found in same directory as
+ 	 * included makefile. Search for it first on the -I search path,
+ 	 * then on the .PATH search path, if not found in a -I directory.
+ 	 * XXX: Suffix specific?
+ 	 */
+ 	fullname = Dir_FindFile (file, parseIncPath);
+ 	if (fullname == (char *)NULL) {
+ 	    fullname = Dir_FindFile(file, dirSearchPath);
+ 	}
+     }
+ 
+     if (fullname == (char *)NULL) {
+ 	/*
+ 	 * Still haven't found the makefile. Look for it on the system
+ 	 * path as a last resort.
+ 	 */
+ 	fullname = Dir_FindFile(file, sysIncPath);
+     }
+ 
+     if (fullname == (char *) NULL) {
+ 	Parse_Error (PARSE_FATAL, "Could not find %s", file);
+ 	return;
+     }
+ 
+     /*
+      * Once we find the absolute path to the file, we get to save all the
+      * state from the current file before we can start reading this
+      * include file. The state is stored in an IFile structure which
+      * is placed on a list with other IFile structures. The list makes
+      * a very nice stack to track how we got here...
+      */
+     oldFile = (IFile *) emalloc (sizeof (IFile));
+     oldFile->fname = fname;
+ 
+     oldFile->F = curFILE;
+     oldFile->lineno = lineno;
+ 
+     (void) Lst_AtFront (includes, (ClientData)oldFile);
+ 
+     /*
+      * Once the previous state has been saved, we can get down to reading
+      * the new file. We set up the name of the file to be the absolute
+      * name of the include file so error messages refer to the right
+      * place. Naturally enough, we start reading at line number 0.
+      */
+     fname = fullname;
+     lineno = 0;
+ 
+     curFILE = fopen (fullname, "r");
+     if (curFILE == (FILE * ) NULL) {
+ 	Parse_Error (PARSE_FATAL, "Cannot open %s", fullname);
+ 	/*
+ 	 * Pop to previous file
+ 	 */
+ 	(void) ParseEOF();
+     }
+ }
+ 
+ /*-
+  *---------------------------------------------------------------------
   * ParseEOF  --
   *	Called when EOF is reached in the current file. If we were reading
   *	an include file, the includes stack is popped and things set up
***************
*** 2045,2050 ****
--- 2186,2198 ----
  				     cp);
  		    }
  		}
+ 	    } else if (strncmp (line, "include", 7) == 0
+ 	      && isspace (*(line + 7))) {
+ 		/*
+ 		 * It's an S3/S5-style "include".
+ 		 */
+ 		ParseTraditionalInclude (line + 7);
+ 		goto nextLine;
  	    } else if (Parse_IsVar (line)) {
  		ParseFinishLine();
  		Parse_DoVar (line, VAR_GLOBAL);
