From guy@auspex.com  Thu May 14 00:13:56 1992
Received: from ucbvax.Berkeley.EDU by okeeffe.CS.Berkeley.EDU (5.79/1.42)
	id AA26727; Thu, 14 May 92 00:13:56 -0700
Received: from AUSPEX-GW.AUSPEX.COM by ucbvax.Berkeley.EDU (5.63/1.43)
	id AA26980; Thu, 14 May 92 00:13:59 -0700
Received: from auspex.com (auspex.auspex.com) by auspex-gw.Auspex.COM (4.1/SMI-4.1)
	id AA14442; Thu, 14 May 92 00:14:20 PDT
Received: by auspex.com (4.1/SMI-4.1)
	id AA21293; Thu, 14 May 92 00:14:19 PDT
Date: Thu, 14 May 92 00:14:19 PDT
From: guy@auspex.com (Guy Harris)
Message-Id: <9205140714.AA21293@auspex.com>
Subject: BSD "make" is a Mutant Make From Hell
Index: usr.bin net2
Apparently-To: 4bsd-bugs@BERKELEY.EDU

Description:
	The BSD "make" seems to lack many of the useful features of the
	SunOS 4.x "make" and the GNU "make".  It also seems to have invented
	its own solutions to many problems, rather than picking up many
	solutions from other "make"s as the GNU "make" did, and in some
	cases where it *does* support features from e.g. the SV "make",
	it deprecates them (and even deprecates some stuff from V7's
	"make"!).

	For example:

		it did "include" differently (until I sent in my fix for
		that);

		it either doesn't do VPATH, or doesn't document it;

		it either doesn't import variables from the environment, or
		doesn't document it;

		it doesn't support "pattern rules", e.g.:

			%.o: %.c
				$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

		it doesn't support the use of a pattern-rule inspired
		syntax for doing substitution in variable expansion,
		e.g. $(FOO:%.c=%.o);

		it does conditionals differently from GNU "make", using
		a syntax that I consider a bit over the top
		(".elifndef"?  C lacks "#elifndef", which I consider a
		feature - you can do "#elif !defined(xxx)").

	The above are all in GNU "make" and SunOS 4.x "make", and many
	of them are in the SV "make" as well.  (They're probably in some
	PC "make" product that somebody did as well, because that
	product was advertised as being compatible with SunOS 4.x
	"make".)  "Pattern rules" were, I think, originally cooked up
	by Stu Feldman, and may have appeared in some "make" he did.
Repeat-By:
	Read the 4.3-reno "make" manual page (after perhaps making
	massive editing changes so that you can actually format it on
	your SunOS 4.1.1 machine, speaking of massive "creative" changes
	to things...).  Then read the GNU "make.info-N" files, paying
	special attention to the "Features of GNU `make'" section in
	"make.info-5":

Features of GNU `make'
**********************

   Here is a summary of the features of GNU `make', for comparison
with and credit to other versions of `make'.  We consider the features
of `make' in BSD 4.2 systems as a baseline.

   Many features come from the version of `make' in System V.

   * The `VPATH' variable and its special meaning.  *Note Directory
     Search::.  This feature exists in System V `make', but is
     undocumented.  It is documented in 4.3 BSD `make' (which says it
     mimics System V's `VPATH' feature).

   * Included makefiles.  *Note Include::.

   * Variables are read from and communicated via the environment. 
     *Note Environment::.

   * Options passed through the variable `MAKEFLAGS' to recursive
     invocations of `make'.  *Note Options/Recursion::.

   * The automatic variable `$%' is set to the member name in an
     archive reference.  *Note Automatic::.

   * The automatic variables `$@', `$*', `$<' and `$%' have
     corresponding forms like `$(@F)' and `$(@D)'.  *Note Automatic::.

   * Substitution variable references.  *Note Reference::.

   * The command-line options `-b' and `-m', accepted and ignored.

   * Execution of recursive commands to run `make' via the variable
     `MAKE' even if `-n', `-q' or `-t' is specified.  *Note
     Recursion::.

   * Support for suffix `.a' in suffix rules.  In GNU `make', this is
     actually implemented by chaining with one pattern rule for
     installing members in an archive.  *Note Chained Rules::.

   * The arrangement of lines and backslash-newline combinations in
     commands is retained when the commands are printed, so they
     appear as they do in the makefile, except for the stripping of
     initial whitespace.

   The following features were inspired by various other versions of
`make'.  In some cases it is unclear exactly which versions inspired
which others.

   * Pattern rules using `%'.  This has been implemented in several
     versions of `make'.  We're not sure who invented it first, but
     it's been spread around a bit.  *Note Pattern Rules::.

   * Rule chaining and implicit intermediate files.  This was
     implemented by Stu Feldman in his version of `make' for AT&T
     Eighth Edition Research Unix, and later by Andrew Hume of AT&T
     Bell Labs in his `mk' program.  We don't really know if we got
     this from either of them or thought it up ourselves at the same
     time.  *Note Chained Rules::.

   * The automatic variable `$^' containing a list of all dependencies
     of the current target.  We didn't invent this, but we have no
     idea who did.  *Note Automatic::.

   * The "what if" flag (`-W' in GNU `make') was (as far as we know)
     invented by Andrew Hume in `mk'.  *Note Instead of Execution::.

   * The concept of doing several things at once (parallelism) exists
     in many incarnations of `make' and similar programs, though not
     in the System V or BSD implementations.  *Note Execution::.

   * Modified variable references using pattern substitution come from
     SunOS 4.0.  *Note Reference::.  This functionality was provided
     in GNU `make' by the `patsubst' function before the alternate
     syntax was implemented for compatibility with SunOS 4.0.  It is
     not altogether clear who inspired whom, since GNU `make' had
     `patsubst' before SunOS 4.0 was released.

   * The special significance of `+' characters preceding command lines
     (*note Instead of Execution::.) is mandated by draft 8 of IEEE
     Std 1003.2 (POSIX).

   The remaining features are inventions new in GNU `make':

   * The `-v' option to print version and copyright information.

   * Simply-expanded variables.  *Note Flavors::.

   * Passing command-line variable assignments automatically through
     the variable `MAKE' to recursive `make' invocations.  *Note
     Recursion::.

   * The `-C' command option to change directory.  *Note Options::.

   * Verbatim variable definitions made with `define'.  *Note
     Defining::.

   * Phony targets declared with the special target `.PHONY'.  A
     similar feature with a different syntax was implemented by Andrew
     Hume of AT&T Bell Labs in his `mk' program.  This seems to be a
     case of parallel discovery.  *Note Phony Targets::.

   * Text manipulation by calling functions.  *Note Functions::.

   * The `-o' option to pretend a file's modification-time is old. 
     *Note Avoiding Compilation::.

   * Conditional execution.  This has been implemented numerous times
     in various versions of `make'; it seems a natural extension
     derived from the features of the C preprocessor and similar macro
     languages and is not a revolutionary concept.  *Note
     Conditionals::.

   * The included makefile search path.  *Note Include::.

   * Specifying extra makefiles to read.  *Note MAKEFILES Variable::.

   * Stripping leading sequences of `./' from file names, so that
     `./FILE' and `FILE' are considered to be the same file.

   * Special search method for library dependencies written in the form
     `-lNAME'.  *Note Libraries/Search::.

   * Allowing suffixes for suffix rules (*note Suffix Rules::.) to
     contain any characters.  In other version of `make', they must
     begin with `.' and not contain any `/' characters.

   * The variable `MAKELEVEL' which keeps track of the current level
     of `make' recursion.  *Note Recursion::.

   * Static pattern rules.  *Note Static Pattern::.

   * Selective `vpath' search.  *Note Directory Search::.

   * Recursive variable references.  *Note Reference::.

   * Updated makefiles.  *Note Remaking Makefiles::.  System V `make'
     has a very, very limited form of this functionality in that it
     will check out SCCS files for makefiles.

   * Several new built-in implicit rules.  *Note Catalogue of Rules::.

Missing Features in GNU `make'
******************************

   The `make' programs in various other systems support a few features
that are not implemented in GNU `make'.  Draft 11.1 of the POSIX.2
standard which specifies `make' does not require any of these features.

   * A target of the form `FILE((ENTRY))' stands for a member of
     archive file FILE.  The member is chosen, not by name, but by
     being an object file which defines the linker symbol ENTRY.

     This feature was not put into GNU `make' because of the
     nonmodularity of putting knowledge into `make' of the internal
     format of archive file symbol directories.  *Note Archive
     Symbols::.

   * Suffixes (used in suffix rules) that end with the character `~'
     have a special meaning; they refer to the SCCS file that
     corresponds to the file one would get without the `~'.  For
     example, the suffix rule `.c~.o' would make the file `N.o' file
     from the SCCS file `s.N.c'.  For complete coverage, a whole
     series of such suffix rules is required.  *Note Suffix Rules::.

     In GNU `make', this entire series of cases is handled by two
     pattern rules for extraction from SCCS, in combination with the
     general feature of rule chaining.  *Note Chained Rules::.

   * In System V `make', the string `$$@' has the strange meaning
     that, in the dependencies of a rule with multiple targets, it
     stands for the particular target that is being processed.

     This is not defined in GNU `make' because `$$' should always
     stand for an ordinary `$'.

     It is possible to get this functionality through the use of
     static pattern rules (*note Static Pattern::.).  The System V
     `make' rule:

          $(targets): $$@.o lib.a

          can be replaced with the GNU `make' static pattern rule:

          $(targets): %: %.o lib.a

   * In System V and 4.3 BSD `make', files found by `VPATH' search
     (*note Directory Search::.) have their names changed inside
     command strings.  We feel it is much cleaner to always use
     automatic variables and thus make this feature obsolete.

   * In some Unix `make's, implicit rule search (*note Implicit::.) is
     apparently done for *all* targets, not just those without
     commands.  This means you can do:

          foo.o:
                  cc -c foo.c

          and Unix `make' will intuit that `foo.o' depends on `foo.c'.

     We feel that such usage is broken.  The dependency properties of
     `make' are well-defined (for GNU `make', at least), and doing
     such a thing simply does not fit the model.

Fix:
	Swallow your dislike of GNU software, torch the current BSD
	"make", and drop the GNU one in place of it, thus reducing the
	number of different incompatible "make"s out there in the world
	by one (and by one 20-sigma outlier, at that).

	Or go whack up the current "make" to match the GNU one; I stopped
	considering that, though, after seeing how closely the GNU
	"make" resembled the SunOS 4.x "make", and how a number of
	features it had but the BSD "make" (and, in many cases the SunOS
	4.x "make") didn't have appeared to be potentially useful (e.g.,
	"chained rules":

   A chain of implicit rules can apply in sequence; for example, `make'
will remake a `.o' file from a `.y' file by way of a `.c' file.

	which is something lacking from many "make"s (although not from the
	V8 "make" or Andrew Hume's "mk").  Fixing "include"
	in the BSD "make" to work the way lots of other "make"s do it is
	barely a start on the fix-up process....

	If you really want to do a Mutant Make From Hell, bite the
	bullet, make it *completely* incompatible if that's necessary,
	and call it something else.  (Cf. "nmake" and "mk".)
