From iand@labtam.labtam.oz.au  Sat Sep 12 02:08:44 1992
Received: from ucbvax.Berkeley.EDU by vangogh.CS.Berkeley.EDU (5.113/2.7) id AA10016; Sat, 12 Sep 92 02:08:44 -0700
Received: from munnari.OZ.AU by ucbvax.Berkeley.EDU (5.63/1.43)
	id AA16869; Sat, 12 Sep 92 02:09:03 -0700
Received: from labtam.labtam.oz by munnari.oz.au with SunIII (5.83--+1.3.1+0.50)
	id AA08876; Sat, 12 Sep 1992 19:09:15 +1000 (from iand@labtam.labtam.oz.au)
Received: from localhost by labtam.labtam.oz.au (5.64/1.13)
	id AA02667; Sat, 12 Sep 92 18:28:13 +1000
Date: Sat, 12 Sep 92 18:28:13 +1000
From: iand@labtam.labtam.oz.au (Ian Donaldson)
Message-Id: <9209120828.AA02667@labtam.labtam.oz.au>
To: 4bsd-bugs@ucbvax.Berkeley.EDU
Subject: script(1) lacks unbuffered output + running arbitrary commands

Index: usr.bin/script net2

Description:
	If the system crashes, any buffered output from script(1) is lost,
	even though the last output may be sent by the command under
	script several hours before the crash.

	This is most serious for me as it occurs too often when 
	I'm doing backups and the last part of the backup log is
	lost when the system(s) crash overnight.

	Also, there is no way to have script(1) run an arbitrary command.
	You always get an interactive shell.
	(BTW newgrp(1) has the same problem; thats why I wrote a replacement
	called setgid(1)).
Repeat-By:
	RTFM
Fix:
	Suggest new options added:

		-b           causes output to be unbuffered (cf: cat -b)
		   
		-c cmd       runs an arbitrary commmand
			     eg: script -c 'ls -l' outputfile

	Below is a copy of a 4.3bsd-tahoe origined script.c that has been
	ported (by myself) to SVR3.2 with STREAM's pty's (if -DUSG) is defined.
	(the context diff is bigger than the source)

	In it is an implementation of the above new options plus a few
	other fixes.

	I note that 4.3bsd-net2 script(1) is essentially the same
	as tahoe in this regard, minus ioctl changes.

|#ident "@(#)local:usr/src/ucb/ucb/script.c 1.5 92/09/12 Labtam Limited"
|/*
| * Copyright (c) 1980 Regents of the University of California.
| * All rights reserved.
| *
| * Redistribution and use in source and binary forms are permitted
| * provided that the above copyright notice and this paragraph are
| * duplicated in all such forms and that any documentation,
| * advertising materials, and other materials related to such
| * distribution and use acknowledge that the software was developed
| * by the University of California, Berkeley.  The name of the
| * University may not be used to endorse or promote products derived
| * from this software without specific prior written permission.
| * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
| * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
| * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
| */
|
|#ifndef lint
|char copyright[] =
|"@(#) Copyright (c) 1980 Regents of the University of California.\n\
| All rights reserved.\n";
|#endif /* not lint */
|
|#ifndef lint
|static char sccsid[] = "@(#)script.c	5.6 (Berkeley) 6/29/88";
|#endif /* not lint */
|
|/*
| * script
| */
|#include <sys/types.h>
|#include <sys/stat.h>
|#include <sys/ioctl.h>
|#include <sys/time.h>
|#include <sys/file.h>
|#include <stdio.h>
|#include <signal.h>
|#include <errno.h>
|#ifdef USG
|#include <termio.h>
|#include <unistd.h>
|#include <fcntl.h>
|#include <sys/stream.h>
|#include <sys/ptem.h>
|#include <sys/stropts.h>
|#endif
|
|char	*shell;
|FILE	*fscript;
|int	master;
|int	slave;
|int	child;
|int	subchild;
|char	*fname;
|
|#ifdef USG
|struct	termio b;
|#else
|struct	sgttyb b;
|struct	tchars tc;
|struct	ltchars lc;
|#endif
|struct	winsize win;
|int	lb;
|int	l;
|#ifndef USG
|char	*line = "/dev/ptyXX";
|#endif
|int	aflg;
|int	bflg;
|char	*cmd;
|
|extern char *malloc();
|
|main(argc, argv)
|	int argc;
|	char *argv[];
|{
|	extern char *optarg;
|	extern int optind;
|	int ch;
|	int finish();
|	char *getenv();
|
|	while ((ch = getopt(argc, argv, "abc:")) != EOF)
|		switch((char)ch) {
|		case 'a':
|			aflg++;
|			break;
|		case 'b':		/* unbuffered -- Labtam extension */
|			bflg++;
|			break;
|		case 'c':		/* specify command - Labtam extension */
|			cmd = malloc(strlen(optarg)+1);
|			if(cmd == 0) {
|				perror("script: malloc");
|				exit(1);
|				/*NOTREACHED*/
|			}
|			(void) strcpy(cmd, optarg);
|			break;
|		case '?':
|		default:
|			fprintf(stderr, "usage: script [-a] [-b] [-c cmd] [file]\n");
|			exit(1);
|		}
|	argc -= optind;
|	argv += optind;
|
|	if (argc > 0)
|		fname = argv[0];
|	else
|		fname = "typescript";
|	if ((fscript = fopen(fname, aflg ? "a" : "w")) == NULL) {
|		perror(fname);
|		exit(1);
|		/*NOTREACHED*/
|	}
|
|	shell = getenv("SHELL");
|	if (shell == NULL)
|		shell = "/bin/sh";
|
|	getmaster();
|	printf("Script started, file is %s\n", fname);
|	fixtty();
|
|	(void) signal(SIGCHLD, finish);
|	child = fork();
|	if (child < 0) {
|		perror("fork");
|		exit(1);
|		/*NOTREACHED*/
|	}
|	if (child == 0) {
|		subchild = child = fork();
|		if (child < 0) {
|			perror("fork");
|			exit(1);
|			/*NOTREACHED*/
|		}
|		if (child)
|			dooutput();
|		else
|			doshell();
|	}
|	doinput();
|}
|
|doinput()
|{
|	register int cc;
|	char ibuf[BUFSIZ];
|
|	(void) fclose(fscript);
|	while ((cc = read(0, ibuf, BUFSIZ)) > 0)
|		(void) write(master, ibuf, cc);
|	done();
|}
|
|#include <sys/wait.h>
|
|finish()
|{
|	union wait status;
|	register int pid;
|	register int die = 0;
|
|	while ((pid = wait3(&status, WNOHANG, 0)) > 0)
|		if (pid == child)
|			die = 1;
|
|	if (die)
|		done();
|}
|
|lightfuse()
|{
|	signal(SIGALRM, done);
|	alarm(2);	/* 2 seconds to read last of data from pty */
|}
|
|dooutput()
|{
|	register int cc;
|	time_t tvec, time();
|	char obuf[BUFSIZ], *ctime();
|
|	/*
|	 * give us time between when child exits to read last
|	 * of the data it sent us before we exit
|	 */
|#ifdef USG
|	(void) sigset(SIGCHLD, lightfuse);
|#else
|	(void) signal(SIGCHLD, lightfuse);
|#endif
|
|	(void) close(0);
|	tvec = time((time_t *)NULL);
|	fprintf(fscript, "Script started on %s", ctime(&tvec));
|	for (;;) {
|		cc = read(master, obuf, sizeof (obuf));
|		if (cc < 0 && errno == EINTR)
|			continue;
|		if (cc <= 0)
|			break;
|		(void) write(1, obuf, cc);
|		(void) fwrite(obuf, 1, cc, fscript);
|		if(bflg)
|			(void) fflush(fscript);
|	}
|	done();
|}
|
|doshell()
|{
|#ifdef USG
|	(void) setpgrp();
|	(void) signal(SIGCHLD, SIG_DFL);	/* grantpt() forks pt_chmod */
|#else
|	int t;
|
|	t = open("/dev/tty", O_RDWR);
|	if (t >= 0) {
|		(void) ioctl(t, TIOCNOTTY, (char *)0);
|		(void) close(t);
|	}
|#endif
|	getslave();
|	(void) close(master);
|	(void) fclose(fscript);
|	(void) dup2(slave, 0);
|	(void) dup2(slave, 1);
|	(void) dup2(slave, 2);
|	(void) close(slave);
|	if(cmd)
|		execl(shell, "sh", "-c", cmd, 0);
|	else
|		execl(shell, "sh", "-i", 0);
|	perror(shell);
|	exit(1);
|	/*NOTREACHED*/
|}
|
|fixtty()
|{
|#ifdef USG
|	struct termio sbuf;
|
|	sbuf = b;
|	sbuf.c_iflag &= ~(INLCR|IGNCR|ICRNL|IUCLC);
|	sbuf.c_oflag &= ~(OPOST);
|	sbuf.c_lflag &= ~(ICANON|ECHO|ECHOE|ECHOK|ISIG);
|	sbuf.c_cc[VMIN] = 1;
|	sbuf.c_cc[VTIME] = 0;
|	(void) ioctl(0, TCSETAW, (char *)&sbuf);
|#else
|	struct sgttyb sbuf;
|
|	sbuf = b;
|	sbuf.sg_flags |= RAW;
|	sbuf.sg_flags &= ~ECHO;
|	(void) ioctl(0, TIOCSETP, (char *)&sbuf);
|#endif
|}
|
|done()
|{
|	time_t tvec, time();
|	char *ctime();
|
|	if (subchild) {
|		tvec = time((time_t *)NULL);
|		fprintf(fscript,"\nScript done on %s", ctime(&tvec));
|		(void) fclose(fscript);
|		(void) close(master);
|	} else {
|#ifdef USG
|		(void) ioctl(0, TCSETAW, (char *)&b);
|#else
|		(void) ioctl(0, TIOCSETP, (char *)&b);
|#endif
|		printf("Script done, file is %s\n", fname);
|	}
|	exit(0);
|}
|
|getmaster()
|{
|	char *pty, *bank, *cp;
|	struct stat stb;
|
|#ifdef USG
|	master = open("/dev/ptmx", O_RDWR);
|	if(master == -1) {
|		perror("/dev/ptmx");
|		exit(1);
|		/*NOTREACHED*/
|	}
|	(void) ioctl(0, TCGETA, (char *)&b);
|	(void) ioctl(0, TIOCGWINSZ, (char *)&win);
|#else /* USG */
|	pty = &line[strlen("/dev/ptyp")];
|	for (bank = "pqrs"; *bank; bank++) {
|		line[strlen("/dev/pty")] = *bank;
|		*pty = '0';
|		if (stat(line, &stb) < 0)
|			break;
|		for (cp = "0123456789abcdef"; *cp; cp++) {
|			*pty = *cp;
|			master = open(line, O_RDWR);
|			if (master >= 0) {
|				char *tp = &line[strlen("/dev/")];
|				int ok;
|
|				/* verify slave side is usable */
|				*tp = 't';
|				ok = access(line, R_OK|W_OK) == 0;
|				*tp = 'p';
|				if (ok) {
|#ifdef USG
|				    (void) ioctl(0, TCGETA, (char *)&b);
|#else
|				    (void) ioctl(0, TIOCGETP, (char *)&b);
|				    (void) ioctl(0, TIOCGETC, (char *)&tc);
|				    (void) ioctl(0, TIOCGETD, (char *)&l);
|				    (void) ioctl(0, TIOCGLTC, (char *)&lc);
|				    (void) ioctl(0, TIOCLGET, (char *)&lb);
|#endif
|				    (void) ioctl(0, TIOCGWINSZ, (char *)&win);
|					return;
|				}
|				(void) close(master);
|			}
|		}
|	}
|	fprintf(stderr, "Out of pty's\n");
|	exit(1);
|	/*NOTREACHED*/
|#endif /* USG */
|}
|
|getslave()
|{
|
|#ifdef USG
|	grantpt(master);
|	unlockpt(master);
|	slave = open(ptsname(master), O_RDWR);
|	if (slave < 0) {
|		perror(ptsname(master));
|		exit(1);
|		/*NOTREACHED*/
|	}
|	if(ioctl(slave, I_PUSH, "ptem") == -1) {
|		perror("I_PUSH ptem");
|		exit(1);
|		/*NOTREACHED*/
|	}
|	if(ioctl(slave, I_PUSH, "ldterm") == -1) {
|		perror("I_PUSH ldterm");
|		exit(1);
|		/*NOTREACHED*/
|	}
|	(void) ioctl(slave, TCSETA, (char *)&b);
|#else
|	line[strlen("/dev/")] = 't';
|	slave = open(line, O_RDWR);
|	if (slave < 0) {
|		perror(line);
|		exit(1);
|		/*NOTREACHED*/
|	}
|	(void) ioctl(slave, TIOCSETP, (char *)&b);
|	(void) ioctl(slave, TIOCSETC, (char *)&tc);
|	(void) ioctl(slave, TIOCSLTC, (char *)&lc);
|	(void) ioctl(slave, TIOCLSET, (char *)&lb);
|	(void) ioctl(slave, TIOCSETD, (char *)&l);
|#endif
|	(void) ioctl(slave, TIOCSWINSZ, (char *)&win);
|}
