Subject: 2.10 boot for large kernels
Index: sys/pdpstand/M.s 2.10BSD

Description:
	It's been noted that the 2.10 boot has problems booting kernels larger
	than 192Kb since the loaded programs over-write boot (boot lives at
	192K when it loads programs).  For technical reasons, it's basically
	almost impossible to move boot up any further than 192K by any simple,
	straight-forward method (boot has to live on a 64Kb boundary and its
	top address must stay under 248Kb).

	There is however an extremely gross hack that can be used to move most
	of boot up in memory.  Simply insert a large amount of empty space
	after the initial jump to start and the vectors (both of which are
	only used at boot startup).  This moves the critical portion of boot
	up far enough to avoid being over-written by a large kernel.

	The addition of the "bic $100000,r0" is necessary because adding 20Kb
	of empty space increases the [virtual] size of boot over 32Kb.  The
	addition of the bic makes the shift an unsigned divide by 2 ...
	The bic clear should be added to M.s IN ANY CASE, since we do want
	an unsigned division by 2.  Its omission was a bug brought out by
	the above gross hack.

	Don't make this change if you're not loading large kernels since it
	slows down the load of boot considerably.

Repeat-By:
	Try and boot a very large kernel.
Fix:
	Apply the following fix:

	*** M.s.orig	Sat Sep  5 14:31:04 1987
	--- M.s	Tue Oct 13 16:35:49 1987
	***************
	*** 54,60 ****
	  	trap;345	/ EMT
	  tvec:
	  	start;346	/ TRAP
	! .=400^.
	  
	  start:
	  	reset
	--- 54,60 ----
	  	trap;345	/ EMT
	  tvec:
	  	start;346	/ TRAP
	! .=20480.^.
	  
	  start:
	  	reset
	***************
	*** 228,233 ****
	--- 228,234 ----
	  / copy program to user I space
	  	mov	$_end,r0
	  	asr	r0
	+ 	bic	$100000,r0
	  	clr	r1
	  1:
	  	mov	(r1),-(sp)

