h31897
s 00001/00001/00313
d D 1.14 95/04/28 15:39:51 bostic 14 13
c externs.h -> extern.h
e
s 00017/00016/00297
d D 1.13 94/04/02 05:33:55 bostic 13 12
c minro cleanup
e
s 00001/00001/00312
d D 1.12 94/03/18 06:07:34 bostic 12 11
c typo
e
s 00110/00044/00203
d D 1.11 94/03/17 08:50:53 bostic 11 10
c update, minor changes
e
s 00012/00005/00235
d D 1.10 92/02/11 10:19:37 bostic 10 9
c update for ANSI functions, minor cleanups
e
s 00011/00001/00229
d D 1.9 91/12/10 10:25:11 bostic 9 8
c add a numerical argument example
e
s 00003/00003/00227
d D 1.8 91/07/18 19:15:40 mckusick 8 7
c fix minor typos
e
s 00002/00041/00228
d D 1.7 91/06/29 10:41:07 bostic 7 6
c break out error routine, don't init variables in declarations
e
s 00010/00008/00259
d D 1.6 91/06/24 09:16:00 bostic 6 5
c minor cleanups
e
s 00006/00003/00261
d D 1.5 91/05/28 19:57:42 bostic 5 4
c minor clarifications
e
s 00019/00009/00245
d D 1.4 91/05/21 14:00:59 bostic 4 3
c getopt stuff gets sorted, second level indents are four spaces
e
s 00129/00042/00125
d D 1.3 91/05/20 17:53:09 bostic 3 2
c pass #2, lots more stuff, add operator, error, usage stuff
e
s 00072/00032/00095
d D 1.2 91/05/20 10:20:43 mckusick 2 1
c revisions to reflect my style
e
s 00127/00000/00000
d D 1.1 91/05/20 09:43:00 mckusick 1 0
c date and time created 91/05/20 09:43:00 by mckusick
e
u
U
t
T
I 1
/*
D 3
 * This is the style guide for BSD's KNF or Kernel Normal Form.
E 3
I 3
D 4
 * This is the style guide for BSD's KNF (Kernel Normal Form).
E 4
I 4
D 11
 * Style guide for BSD's KNF (Kernel Normal Form).
E 11
I 11
 * Style guide for the 4BSD KNF (Kernel Normal Form).
E 11
E 4
E 3
 *
D 3
 * Multi-line comments look like this.  Make them real sentences.  Fill them
 * so they look like real paragraphs.
E 3
I 3
D 4
 * Multi-line comments look like this.  Make them real sentences.  Fill
 * them so they look like real paragraphs.
E 3
 *
E 4
D 3
 * 	%W%	(Berkeley)	%G%
E 3
I 3
 *	%W% (Berkeley) %G%
E 3
 */

D 2
/* Single-line comments look like this. */
E 2
I 2
/*
D 3
 * Important single-line comments look like this.
E 3
I 3
 * VERY important single-line comments look like this.
E 3
 */
E 2

I 2
D 3
/* Minor single-line comments look like this. */
E 3
I 3
/* Most single-line comments look like this. */
E 3

I 4
/*
 * Multi-line comments look like this.  Make them real sentences.  Fill
 * them so they look like real paragraphs.
 */

E 4
E 2
D 3
/* Include files go at top of source module. */
E 3
I 3
D 11
/* Include files go at the top of the source module. */
E 3
D 2
#include <stdio.h>			/* Non-local includes in brackets. */
E 2
I 2
#include <stdio.h>		/* Non-local includes in brackets. */
E 11
I 11
/*
 * Kernel include files come first; normally, you'll need <sys/types.h>
 * OR <sys/param.h>, but not both!  <sys/types.h> includes <sys/cdefs.h>,
 * and it's okay to depend on that.
 */
#include <sys/types.h>		/* Non-local includes in brackets. */
E 11
E 2

I 11
/* If it's a network program, put the network include files next. */
#include <net/if.h>
#include <net/if_dl.h>
#include <net/route.h>
#include <netinet/in.h>
#include <protocols/rwhod.h>

E 11
D 2
/* All pathnames go in paths.h in local directory. */
#include "paths.h"			/* Local includes in quotes. */		
E 2
I 2
/*
I 11
 * Then there's a blank line, followed by the /usr include files.
 * The /usr include files should be sorted!
 */
#include <stdio.h>

/*
E 11
D 3
 * Global pathnames are defined in /usr/include/paths.h.
 * Pathnames local to the program go in pathnames.h in local directory.
E 3
I 3
 * Global pathnames are defined in /usr/include/paths.h.  Pathnames local
 * to the program go in pathnames.h in the local directory.
E 3
 */
D 3
#include <paths.h>		/* Non-local includes in quotes */
#include "pathnames.h"		/* Local includes in quotes */		
E 3
I 3
D 11
#include <paths.h>		/* Non-local includes in brackets. */
#include "pathnames.h"		/* Local includes in quotes. */		
E 11
I 11
#include <paths.h>
E 11
E 3
E 2

I 11
/* Then, there's a blank line, and the user include files. */
#include "pathnames.h"		/* Local includes in double quotes. */		

E 11
/*
D 11
 * All ANSI function decls go at the top of the source module.  Use the
 * __P macro from include file <sys/cdefs.h>.  Only the kernel has a name
D 3
 * associated with the types.
E 3
I 3
D 5
 * associated with the types, i.e. unless you're in the kernel use:
E 5
I 5
 * associated with the types, i.e. in the kernel use:
E 11
I 11
D 13
 * ANSI function declarations for private functions (i.e. functions not used
 * elsewhere) go at the top of the source module.  Use the __P macro from
 * the include file <sys/cdefs.h>.  Only the kernel has a name associated with
 * the types, i.e. in the kernel use:
E 11
E 5
 *
D 8
 *	void function __P((int));
E 8
I 8
 *	void function __P((int a));
E 8
D 5
 * not:
E 5
I 5
 *
 * in user land use:
 *
E 5
D 8
 *	void function __P((int a));
E 8
I 8
 *	void function __P((int));
E 8
E 3
 */
D 3
void f1 __P((int, const char *));
E 3
I 3
D 11
void function __P((int, const char *));
E 11
I 11
static char	*function __P((int, const char *));
static void	 usage __P((void));
E 11
E 3

/*
E 13
 * Macros are capitalized, parenthesized, and should avoid side-effects.
D 2
 * If more than a single line, use braces.
E 2
I 2
 * If they are an inline expansion of a function, the function is defined
 * all in lowercase, the macro has the same name all in uppercase. If the
D 3
 * macro needs more than a single line, use braces.
E 3
I 3
D 11
 * macro needs more than a single line, use braces.  Put a space before
 * the backslashes.
E 11
I 11
 * macro needs more than a single line, use braces.  Right-justify the
 * backslashes, it makes it easier to read.
E 11
E 3
E 2
 */
D 11
#define	MACRO(x, y) { \
	variable = (x) + (y); \
D 2
	line two;
E 2
I 2
	line two; \
E 11
I 11
#define	MACRO(x, y) {							\
	variable = (x) + (y);						\
	(y) += 2;							\
E 11
E 2
}

/* Enum types are capitalized. */
enum enumtype { ONE, TWO } et;

/*
 * When declaring variables in structures, declare them sorted by use, then
 * by size, and then by alphabetical order.  The first category normally
 * doesn't apply, but there are exceptions.  Each one gets its own line.
D 2
 * Put a tab after the type, i.e. use "int^Ix;" and "char *^Ix;".
E 2
I 2
 * Put a tab after the first word, i.e. use "int^Ix;" and "struct^Ifoo *x;".
 *
D 11
 * Major structures should be declared at the top of the file they are
 * used in, or in separate header files, if they are used in multiple
 * source files. Use of the structures should be by separate declarations
E 11
I 11
 * Major structures should be declared at the top of the file in which they
 * are used, or in separate header files, if they are used in multiple
 * source files.  Use of the structures should be by separate declarations
E 11
 * and should be "extern" if they are declared in a header file.
E 2
 */
struct foo {
D 2
	struct one	two;			/* Comment for two. */
	struct one	three;			/* Comment for three. */
E 2
I 2
	struct	foo *next;	/* List of active foo */
	struct	mumble amumble;	/* Comment for mumble */
E 2
	int	bar;
D 2
} actual_space;
E 2
I 2
};
struct foo *foohead;		/* Head of global foo list */
I 11

/* Make the structure name match the typedef. */
typedef struct _bar {
	int	level;
} BAR;
E 11
E 2
	
I 2
/*
I 13
 * ANSI function declarations for private functions (i.e. functions not used
 * elsewhere) go at the top of the first source module.  Use the __P macro
 * from the include file <sys/cdefs.h>.  Only the kernel has a name associated
 * with the types, i.e. in the kernel use:
 *
 *	void function __P((int fd));
 *
 * in user land use:
 *
 *	void function __P((int));
 */
static char	*function __P((int, const char *));
static void	 usage __P((void));

/*
E 13
 * All major routines should have a comment briefly describing what
D 11
 * they do. The comment before the "main" routine should describe
E 11
I 11
 * they do.  The comment before the "main" routine should describe
E 11
 * what the program does.
 */
I 11
int
E 11
E 2
main(argc, argv)
	int argc;
D 2
	char **argv;
E 2
I 2
	char *argv[];
E 2
{
	extern char *optarg;
	extern int optind;
I 9
	long num;
E 9
	int ch;
I 9
	char *ep;
E 9

I 2
D 3
	/*
	 * For consistency, getopt should be used to parse options.
	 */
E 3
I 3
D 4
	/* For consistency, getopt should be used to parse options. */
E 3
E 2
	while ((ch = getopt(argc, argv, "")) != EOF)
E 4
I 4
	/*
D 11
	 * For consistency, getopt should be used to parse options.
	 * Options should be sorted in the getopt call and the switch
D 6
	 * statment, unless they fall through.
E 6
I 6
	 * statement, unless they fall through.  Elements in a switch
	 * statement that fall through should have a FALLTHROUGH comment.
I 9
	 * Numerical arguments should be checked for accuracy.
E 11
I 11
	 * For consistency, getopt should be used to parse options.  Options
	 * should be sorted in the getopt call and the switch statement, unless
	 * parts of the switch cascade.  Elements in a switch statement that
	 * cascade should have a FALLTHROUGH comment.  Numerical arguments
	 * should be checked for accuracy.  Code that cannot be reached should
	 * have a NOTREACHED comment.
E 11
E 9
E 6
	 */
D 9
	while ((ch = getopt(argc, argv, "ab")) != EOF)
E 9
I 9
	while ((ch = getopt(argc, argv, "abn")) != EOF)
E 9
E 4
		switch (ch) {		/* Indent the switch. */
D 4
		case '':		/* Don't indent the case. */
E 4
I 4
		case 'a':		/* Don't indent the case. */
I 9
			aflag = 1;
E 9
E 4
D 6
			break;
E 6
I 6
			/* FALLTHROUGH */
E 6
I 4
		case 'b':
I 9
			bflag = 1;
			break;
		case 'n':
			num = strtol(optarg, &ep, 10);
D 11
                        if (num <= 0 || *ep)
E 11
I 11
                        if (num <= 0 || *ep != '\0')
E 11
                                err("illegal number -- %s", optarg);
E 9
			break;
E 4
		case '?':
		default:
			usage();
I 11
			/* NOTREACHED */
E 11
		}
	argc -= optind;
	argv += optind;

D 2
	/* Space after keywords (while, for, return, switch) */
	for (;;)			/* Forever loop. */
		block;			/* No parens for single line block. */
E 2
I 2
	/*
D 3
	 * Space after keywords (while, for, return, switch)
	 * No parenthesis for single statement block.
E 3
I 3
D 6
	 * Space after keywords (while, for, return, switch).  No parenthesis
	 * for single statement block.
E 6
I 6
	 * Space after keywords (while, for, return, switch).  No braces are
D 11
	 * used for single statement block.
E 11
I 11
	 * used for control statements with zero or only a single statement.
E 11
E 6
E 3
	 *
D 6
	 * Forever loop.
E 6
I 6
	 * Forever loops are done with for's, not while's.
E 6
	 */
I 11
	for (p = buf; *p != '\0'; ++p);
E 11
	for (;;)
		stmt;
E 2
	
D 2
	for (; cnt < 15; ++cnt) {	/* Okay to leave for parts empty. */
		block1;			/* Avoid variable decls in blocks. */
		block2;
E 2
I 2
	/*
D 3
	 * Parts of a for loop may be left empty.
	 * Avoid declarations in blocks.
E 3
I 3
D 11
	 * Parts of a for loop may be left empty.  Avoid declarations in
D 6
	 * blocks.
E 6
I 6
	 * blocks unless the routine is unusually complicated.
E 11
I 11
	 * Parts of a for loop may be left empty.  Don't put declarations
	 * inside blocks unless the routine is unusually complicated.
E 11
E 6
E 3
	 */
	for (; cnt < 15; cnt++) {
		stmt1;
		stmt2;
E 2
	}

D 11
	while (cnt < 20) {
D 2
		block1;
		block2;
E 2
I 2
D 4
		stmt1;
		stmt2;
E 4
I 4
		stmt1;		/* Second level indents are four spaces. */
E 11
I 11
	/* Second level indents are four spaces. */
	while (cnt < 20)
E 11
		z = a + really + long + statment + that + needs + two lines +
		    gets + indented + four + spaces + on + the + second +
		    and + subsequent + lines.
E 4
E 2
D 11
	}
E 11

I 2
D 3
	/* Try to put shorter part first. */
E 3
I 3
	/*
D 11
	 * Try to put shorter part first.  The closing and opening braces
	 * go on the same line as the else.
E 11
I 11
	 * Closing and opening braces go on the same line as the else.
	 * Don't add braces that aren't necessary.
E 11
	 */
E 3
E 2
D 6
	if (test) {
E 6
I 6
	if (test)
E 6
D 2
		block;
	} else if (bar) {		/* If on same line as else. */
		block;
	} else				/* Close paren on same line as else. */
		block;			/* No parens for single line block. */
E 2
I 2
		stmt;
D 6
	} else if (bar) {
E 6
I 6
	else if (bar) {
		stmt;
E 6
		stmt;
	} else
		stmt;
E 2
		
D 2
	if (result = f1(a1, a2))	/* No space on function call. */
		exit(1);		/* Exit 1 on error. */
	exit(0);			/* Exit 0 on success. */
	
E 2
I 2
D 3
	/* No space on function call. */
	if (error = f1(a1, a2))
E 3
I 3
D 11
	/* No space after function names. */
E 11
I 11
	/* No spaces after function names. */
E 11
	if (error = function(a1, a2))
E 3
		exit(error);
D 3
	doit(a1);
E 3
I 3

	/*
D 11
	 * Unary operators do not require spaces, binary operators do.
	 * Try not to use too many parenthesis unless the statement is
	 * really confusing without them.
E 11
I 11
D 12
	 * Unary operators dno't require spaces, binary operators do. Don't
E 12
I 12
	 * Unary operators don't require spaces, binary operators do. Don't
E 12
	 * use parenthesis unless they're required for precedence, or the
	 * statement is really confusing without them.
E 11
	 */
	a = b->c[0] + ~d == (e || f) || g && h ? i : j >> 1;
D 11
	k = l & FLAGS;
E 11
I 11
	k = !(l & FLAGS);
E 11

	/*
	 * Exits should be 0 on success, and 1 on failure.  Don't denote
	 * all the possible exit points, using the integers 1 through 300.
	 */
E 3
	exit(0);    /* Avoid obvious comments such as "Exit 0 on success." */
E 2
}

I 2
/*
 * If a function type is declared, it should be on a line
 * by itself preceeding the function.
 */
D 3
char *
E 2
f2(a1, a2, f1)
D 2
	int a1, a2;			/* Declare ints too. */
	float f1;			/* List in order declared. */
E 2
I 2
	int a1, a2;	/* Declare ints too. */
	float f1;	/* List in order declared. */
E 3
I 3
static char *
D 11
function(a1, a2, a3, a4)
	int a1, a2, a4;	/* Declare ints too. */
	float a3;	/* List in order declared, as much as possible. */
E 11
I 11
function(a1, a2, fl, a4)
	int a1, a2, a4;	/* Declare ints, too, don't default them. */
	float fl;	/* List in order declared, as much as possible. */
E 11
E 3
E 2
{
	/*
	 * When declaring variables in functions declare them sorted by size,
	 * then in alphabetical order; multiple ones per line are okay.  Old
	 * style function declarations can go on the same line.  ANSI style
D 3
	 * function declarations should be in the include file "externs.h".
	 * If a line overflows, just reuse the type keyword.
E 3
I 3
D 14
	 * function declarations should go in the include file "externs.h".
E 14
I 14
	 * function declarations should go in the include file "extern.h".
E 14
	 * If a line overflows reuse the type keyword.
I 7
	 *
D 10
	 * In general, don't initialize variables in the declarations.
E 10
I 10
D 11
	 * Try not to initialize variables in the declarations.
E 11
I 11
	 * DO NOT initialize variables in the declarations.
E 11
E 10
E 7
E 3
	 */
	extern u_char one;
	extern char two;
D 3
	struct foo three, four;
E 3
I 3
	struct foo three, *four;
E 3
	double five;
D 3
	int six, seven;
	char eight, nine();
E 3
I 3
	int *six, seven, eight();
	char *nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen;
E 3
D 2
	char overflow();
E 2
I 2
D 10
	char *overflow();
I 3
	void *malloc();
E 10
I 10
	char *overflow __P((void));
	void *mymalloc __P((u_int));
E 10
E 3
E 2

D 2
	return (bad ? 1 : 0);
E 2
I 2
D 3
	return (bad ? (char *)0 : overflow());
E 3
I 3
	/*
	 * Casts and sizeof's are not followed by a space.  NULL is any
D 5
	 * pointer type, and doesn't need to be cast.  Also, test pointers
E 5
I 5
	 * pointer type, and doesn't need to be cast, so use NULL instead
	 * of (struct foo *)0 or (struct foo *)NULL.  Also, test pointers
E 5
	 * against NULL, i.e. use:
	 *
	 * 	(p = f()) == NULL
	 * not:
	 *	!(p = f())
I 11
	 *
	 * Don't use '!' for tests unless it's a boolean, e.g. use
	 * "if (*p == '\0')", not "if (!*p)".
E 11
 	 *
	 * Routines returning void * should not have their return values cast
	 * to any pointer type.
I 11
	 *
	 * Use err/warn(3), don't roll your own!
E 11
	 */
	if ((four = malloc(sizeof(struct foo))) == NULL)
D 11
		return (NULL);
E 11
I 11
		err(1, NULL);
E 11
	if ((six = (int *)overflow()) == NULL)
D 11
		return (NULL);
E 11
I 11
		errx(1, "Number overflowed.");
E 11
	return (eight);
E 3
E 2
}

I 10
D 11
/* ANSI function braces look like regular function braces. */
E 11
I 11
/*
 * Don't use ANSI function declarations unless you absolutely have too,
 * i.e. you're declaring functions with variable numbers of arguments.
 *
D 13
 * ANSI function braces look like regular function braces.
E 13
I 13
 * ANSI function return values and braces look like regular functions.
E 13
 */
I 13
int
E 13
E 11
function(int a1, int a2)
{
	...
I 11
}

/* Variable numbers of arguments should look like this. */
#if __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif

void
#if __STDC__
vaf(const char *fmt, ...)
#else
vaf(fmt, va_alist)
	char *fmt;
	va_dcl
#endif
{
	va_list ap;
#if __STDC__
	va_start(ap, fmt);
#else
	va_start(ap);
#endif
	STUFF;

	va_end(ap);		/* No return needed for void functions. */
E 11
}

E 10
D 3
f3()
{
					/* Empty line if no variables. */
	return (1);
E 3
I 3
static void
usage()
D 10
{	/* Insert an empty line if the function has no variables. */
E 10
I 10
{	/* Insert an empty line if the function has no local variables. */
E 10

	/*
D 10
	 * Use printf(3), not fputs/puts/putchar/whatever.
E 10
I 10
	 * Use printf(3), not fputs/puts/putchar/whatever, it's faster and
	 * usually cleaner, not to mention avoiding stupid bugs.
E 10
	 *
	 * Usage statements should look like the manual pages.  Options w/o
	 * operands come first, in alphabetical order inside a single set of
	 * braces.  Followed by options with operands, in alphabetical order,
	 * each in braces.  Followed by required arguments in the order they
	 * are specified, followed by optional arguments in the order they
	 * are specified.  A bar ('|') separates either/or options/arguments,
D 8
	 * and multiple options/arguments wwhich are specified together are
E 8
I 8
	 * and multiple options/arguments which are specified together are
E 8
	 * placed in a single set of braces.
	 *
	 * "usage: f [-ade] [-b b_arg] [-m m_arg] req1 req2 [opt1 [opt2]]\n"
	 * "usage: f [-a | -b] [-c [-de] [-n number]]\n"
	 */
	(void)fprintf(stderr, "usage: f [-ab]\n");
	exit(1);
E 3
D 7
}

D 3
usage()
{					/* use printf(3), not puts/putchar */
	(void)fprintf(stderr, "usage: X:\n");
E 3
I 3
/*
 * Error routines can be tricky.  The following works in most cases, and
 * can be easily adapted per program.  It allows both:
 *
 *	if ((fp = fopen(file, "r")) == NULL)
 *		err("%s: %s", file, strerror(errno));
 * and:
 *	if ((p = malloc(sizeof(int))) == NULL)
 *		err("%s", strerror(errno));
 *
 * Never use perror(3).
 */
#if __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif

void
#if __STDC__
err(const char *fmt, ...)
#else
err(fmt, va_alist)
	char *fmt;
        va_dcl
#endif
{
	va_list ap;
#if __STDC__
	va_start(ap, fmt);
#else
	va_start(ap);
#endif
	(void)fprintf(stderr, "program_name: ");
	(void)vfprintf(stderr, fmt, ap);
	va_end(ap);
	(void)fprintf(stderr, "\n");
E 3
	exit(1);
I 3
	/* NOTREACHED */
E 7
E 3
}
E 1
