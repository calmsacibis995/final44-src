h50193
s 00009/00000/00313
d D 8.2 94/01/13 12:10:28 bostic 13 12
c Mike Karels at BSDI's changes for osync, to make output padding work
c correctly (this is not POSIX.2, but POSIX.2 is wrong)
e
s 00002/00002/00311
d D 8.1 93/06/30 09:53:36 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00009/00013/00304
d D 6.8 93/06/30 09:53:23 mckusick 11 9
c typesetting nits
e
s 00002/00002/00315
d R 8.1 93/05/31 14:22:40 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00046/00014/00271
d D 6.7 91/08/07 01:20:12 cael 9 8
c place uppercase string in small caps (.Tn)
e
s 00018/00006/00267
d D 6.6 91/07/29 18:25:40 bostic 8 7
c bring man page up to date with latest round of fixes
e
s 00226/00128/00047
d D 6.5 91/07/27 13:49:49 bostic 7 6
c POSIX version
e
s 00048/00062/00127
d D 6.4 91/04/24 18:56:23 cael 6 5
c mdoc version three/bds copyright
e
s 00016/00014/00173
d D 6.3 90/07/24 22:43:44 cael 5 4
c .Xr botch fix
e
s 00181/00221/00006
d D 6.2 90/06/24 19:00:16 cael 4 3
c converted man page
e
s 00017/00001/00210
d D 6.1 85/04/29 14:21:46 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00009/00003/00202
d D 5.1 85/04/29 14:21:36 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00205/00000/00000
d D 4.1 85/04/29 14:21:29 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 12
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 12
I 12
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 12
E 4
.\"
I 7
.\" This code is derived from software contributed to Berkeley by
.\" Keith Muller of the University of California, San Diego.
.\"
E 7
D 4
.\"	%W% (Berkeley) %G%
E 4
I 4
D 6
.\" %sccs.include.redist.man%
E 6
I 6
.\" %sccs.include.redist.roff%
E 6
E 4
.\"
D 2
.TH DD 1 
E 2
I 2
D 3
.TH DD 1  "18 January 1983"
E 3
I 3
D 4
.TH DD 1 "%Q%"
E 3
E 2
.UC 4
.SH NAME
dd \- convert and copy a file
.SH SYNOPSIS
.B dd
[option=value] ...
.SH DESCRIPTION
.I Dd
copies the specified input file
to the specified output with
possible conversions.
The standard input and output are used by default.
The input and output block size may be
specified to take advantage of raw physical I/O.
.PP
.br
.ns
.TP 15
.I option
.I values
.br
.ns
.TP 
if=
input file name; standard input is default
.br
.ns
.TP 
of=
output file name; standard output is default
.br
.ns
.TP 
.RI ibs= n
input block size
.I n
bytes (default 512)
.br
.ns
.TP 
.RI obs= n
output block size (default 512)
.br
.ns
.TP 
.RI bs= n
set both input and output block size,
E 4
I 4
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt DD 1
D 6
.Os BSD 4.4
E 6
I 6
.Os
E 6
.Sh NAME
.Nm dd
.Nd convert and copy a file
.Sh SYNOPSIS
.Nm dd
D 6
.Op options \&...
E 6
I 6
D 7
.Op options ...
E 7
I 7
.Op operands ...
E 7
E 6
.Sh DESCRIPTION
D 5
The dd utility copies the specified input file to the specified
E 5
I 5
The
.Nm
D 7
utility copies the specified input file to the specified
E 5
output with possible conversions.
E 7
I 7
utility copies the standard input to the standard output.
Input data is read and written in 512-byte blocks.
If input reads are short, input from multiple reads are aggregated
to form the output block.
When finished,
.Nm dd
displays the number of complete and partial input and output blocks
and truncated input records to the standard error output.
E 7
.Pp
D 7
The following options are available:
E 7
I 7
The following operands are available:
E 7
D 6
.Tw Fl
.Tc Ic if=
.Ar file
.Cx
E 6
I 6
.Bl -tag -width of=file
D 7
.It Cm if= Ns Ar file
E 6
Input pathname; standard input is
default.
D 6
.Tc Ic of=
.Ar file
.Cx
E 6
I 6
.It Cm of= Ns Ar file
E 6
Output pathname; standard output is
default.
D 6
.Tc Ic ibs=
.Ar n
.Cx
E 6
I 6
.It Cm ibs= Ns Ar n
E 6
D 5
Input block size.
E 5
I 5
Input block size
E 5
.Va n
bytes (default is
512 bytes).
D 6
.Tc Ic obs=
.Ar n
.Cx
E 6
I 6
.It Cm obs= Ns Ar n
E 6
Output block size (default is 512 bytes).
E 7
D 6
.Tc Ic bs=
.Ar n
.Cx
E 6
I 6
.It Cm bs= Ns Ar n
E 6
D 7
Set both input and output block size,
E 4
superseding
E 7
I 7
Set both input and output block size, superseding the
E 7
D 4
.I ibs
E 4
I 4
D 6
.Ic ibs
E 6
I 6
.Cm ibs
E 6
E 4
and
D 4
.I obs;
also, if no conversion is specified,
it is particularly efficient since no copy need be done
.br
.ns
.TP 
.RI cbs= n
conversion buffer size
.br
.ns
.TP 
.RI skip= n
skip
.IR n ""
input records before starting copy
.br
.ns
.TP
.RI files= n
D 2
skip
E 2
I 2
copy
E 2
.I n
D 2
input files before starting copy
E 2
I 2
input files before terminating (makes sense only
where input is a magtape or similar device).
E 2
.br
.ns
.TP 
.RI seek= n
seek
.I n
records from beginning of output file before copying
.br
.ns
.TP 
count=\fIn\fR
copy only
.IR n ""
input records
.br
.ns
.TP 
conv=ascii
.ds h \h'\w'conv='u'
convert EBCDIC to ASCII
.br
.ns
.IP \*hebcdic
convert ASCII to EBCDIC
.br
.ns
.IP \*hibm
slightly different map of ASCII to EBCDIC
.br
.ns
.IP \*hblock
convert variable length records to fixed length
.br
.ns
.IP \*hunblock
convert fixed length records to variable length
.br
.ns
.IP \*hlcase
map alphabetics to lower case
.br
.ns
.IP \*hucase
map alphabetics to upper case
.br
.ns
.IP \*hswab
swap every pair of bytes
.br
.ns
.IP \*hnoerror
do not stop processing on an error
.br
.ns
.IP \*hsync
pad every input record to
.I  ibs
.br
.ns
.IP "\*h... , ..."
several comma-separated conversions
.PP
.fi
Where sizes are specified,
a number of bytes is expected.
A number may end with
.B "k, b"
E 4
I 4
D 6
.Ic obs .
.Tc Ic cbs=
.Ar n
.Cx
E 6
I 6
D 7
.Cm obs .
E 7
I 7
.Cm obs
operands.
If no conversion values other than
.Cm noerror ,
D 8
.Cm notrunc ,
.Cm swab
E 8
I 8
.Cm notrunc
E 8
or
.Cm sync
are specified, then each input block is copied to the output as a
single block without any aggregation of short blocks.
E 7
.It Cm cbs= Ns Ar n
E 6
D 7
Conversion buffer size
D 6
.Tc Ic skip=
.Ar n
.Cx
E 6
I 6
.It Cm skip= Ns Ar n
E 6
Skip
E 7
I 7
Set the conversion record size to
E 7
.Va n
D 7
input blocks (each block is the
size of
D 6
.Ic ibs )
E 6
I 6
.Cm ibs )
E 6
before starting copy.
D 6
.Tc Ic seek=
E 6
I 6
.It Cm seek= Ns Ar n
Seek
E 6
.Ar n
D 6
.Cx
Seek n blocks (each block is the size of
E 6
I 6
blocks (each block is the size of
E 6
obs) from beginning of output file before
copying.
E 7
I 7
bytes.
The conversion record size is required by the record oriented conversion
values.
E 7
D 6
.Tc Ic count=
.Ar n
.Cx
E 6
I 6
.It Cm count= Ns Ar n
E 6
Copy only
.Va n
input blocks.
I 7
.It Cm files= Ns Ar n
Copy
.Va n
input files before terminating.
This operand is only applicable when the input device is a tape.
.It Cm ibs= Ns Ar n
Set the input block size to
.Va n
bytes instead of the default 512.
.It Cm if= Ns Ar file
Read input from
.Ar file
instead of the standard input.
.It Cm obs= Ns Ar n
Set the output block size to
.Va n
bytes instead of the default 512.
.It Cm of= Ns Ar file
Write output to
.Ar file
instead of the standard output.
Any regular output file is truncated unless the
.Cm notrunc
conversion value is specified.
If an initial portion of the output file is skipped (see the
.Cm seek
operand)
the output file is truncated at that point.
.It Cm seek= Ns Ar n
Seek
.Va n
blocks from the beginning of the output before copying.
On non-tape devices, a
.Xr lseek 2
operation is used.
Otherwise, existing blocks are read and the data discarded.
If the user does not have read permission for the tape, it is positioned
using the tape
.Xr ioctl 2
function calls.
If the seek operation is past the end of file, space from the current
D 9
end of file to the specified offset is filled with blocks of NUL bytes.
E 9
I 9
end of file to the specified offset is filled with blocks of
.Tn NUL
bytes.
E 9
.It Cm skip= Ns Ar n
Skip
.Va n
blocks from the beginning of the input before copying.
On input which supports seeks, a
.Xr lseek 2
operation is used.
Otherwise, input data is read and discarded.
For pipes, the correct number of bytes is read.
For all other devices, the correct number of blocks is read without
distinguishing between a partial or complete block being read.
E 7
D 6
.Tc Ic conv=
.Ar value
.Oo
.Op \&, Ar value \&...
.Cx
.Oo
E 6
I 6
.It Xo
.Cm conv=
D 7
.Ns Ar value Ns Op \&, Ar value \&...
E 7
I 7
.Ns Cm value Ns Op \&, Cm value \&...
E 7
.Xc
E 6
D 7
Where values are comma-separated symbols
from the following list.
E 7
I 7
Where
.Cm value
is one of the symbols from the following list.
E 7
D 6
.Tw Fl
.Tp Ic block
E 6
I 6
.Bl -tag -width unblock
D 7
.It Ar block
E 6
Convert variable length records to fixed
length.
Read characters into the
D 6
.Ic cbs
E 6
I 6
.Ar cbs
E 6
buffer, delete a trailing <newline>, and
pad to the length of the
D 6
.Ic cbs
E 6
I 6
.Ar cbs
E 6
buffer with
<space>s.
D 6
.Ic block
E 6
I 6
Both
.Ar block
E 7
I 7
.It Cm ascii , oldascii
The same as the
.Cm unblock
D 9
value except that characters are translated from ECBDIC to ASCII before the
E 9
I 9
value except that characters are translated from
.Tn ECBDIC
to
.Tn ASCII
before the
E 9
records are converted.
I 8
(These values imply
.Cm unblock
if the operand
.Cm cbs
is also specified.)
E 8
D 9
There are two conversion maps for ASCII.
E 9
I 9
There are two conversion maps for
.Tn ASCII .
E 9
The value
.Cm ascii
specifies the recommended one which is compatible with System V.
The value
.Cm oldascii
D 9
specifies the one used in historic AT&T and pre-4.4BSD systems.
E 9
I 9
specifies the one used in historic
.Tn AT&T
D 11
and
.Pf pre- Bx 4.3 reno
systems.
E 11
I 11
and pre-4.3BSD-reno systems.
E 11
E 9
.It Cm block
Treats the input as a sequence of newline or end-of-file terminated variable
length records independent of input and output block boundaries.
Any trailing newline character is discarded.
Each input record is converted to a fixed length output record where the
length is specified by the
.Cm cbs
operand.
Input records shorter than the conversion record size are padded with spaces.
Input records longer than the conversion record size are truncated.
The number of truncated input records, if any, are reported to the standard
D 11
error at the completion of the copy.
E 11
I 11
error output at the completion of the copy.
E 11
.It Cm ebcdic , ibm , oldebcdic , oldibm
The same as the
.Cm block
D 9
value except that characters are translated from ASCII to EBCDIC after the
E 9
I 9
value except that characters are translated from
.Tn ASCII
to
.Tn EBCDIC
after the
E 9
records are converted.
I 8
(These values imply
.Cm block
if the operand
.Cm cbs
is also specified.)
E 8
D 9
There are four conversion maps for EBCDIC.
E 9
I 9
There are four conversion maps for
.Tn EBCDIC .
E 9
The value
.Cm ebcdic
D 9
specifies the recommended one which is compatible with System V.
E 9
I 9
specifies the recommended one which is compatible with
.At V .
E 9
The value
.Cm ibm
D 9
is a slightly different mapping, which is compatible with the System V
E 9
I 9
is a slightly different mapping, which is compatible with the
.At V
E 9
.Cm ibm
value.
The values
.Cm oldebcdic
E 7
E 6
and
D 6
.Ic unblock
E 6
I 6
D 7
.Ar unblock
E 6
are mutually
exclusive.
D 6
.Tp Ic unblock
E 6
I 6
.It Ar unblock
E 6
Convert fixed length records to variable
length.
Read a number of characters
equal to the size of the
D 6
.Ic cbs
E 6
I 6
.Ar cbs
E 6
buffer,
delete all trailing <blank>s, and append
a <newline>.
D 6
.Tp Ic lcase
E 6
I 6
.It Ar lcase
E 6
Map characters in the alpha character
classification from class upper to the
corresponding value in class lower.
D 6
.Ic lcase
E 6
I 6
Both
.Ar lcase
E 6
and
D 6
.Ic ucase
E 6
I 6
.Ar ucase
E 6
are mutually exclusive.
D 6
.Tp Ic ucase
E 6
I 6
.It Ar ucase
E 6
Map characters in the alpha character
classification from class lower to the
corresponding value in class upper.
D 6
.Tp Ic swab
E 6
I 6
.It Ar swab
E 6
Swap every pair of bytes
D 6
.Tp Ic noerror
E 6
I 6
.It Ar noerror
E 6
Do not stop processing on an error.
D 6
.Tp Ic sync
E 6
I 6
.It Ar sync
E 6
Pad every input block to the size of
D 6
.Ic ibs
E 6
I 6
.Ar ibs
E 6
buffer, appending <space> characters.
E 7
I 7
.Cm oldibm
D 9
are maps used in historic AT&T and pre-4.4BSD systems.
E 9
I 9
are maps used in historic
.Tn AT&T
D 11
and
.Pf pre- Bx 4.3 reno
systems.
E 11
I 11
and pre-4.3BSD-reno systems.
E 11
E 9
.It Cm lcase
Transform uppercase characters into lowercase characters.
.It Cm noerror
Do not stop processing on an input error.
When an input error occurs, a diagnostic message followed by the current
D 11
input and output block counts will be written to standard error in the
same format as the standard completion message.
E 11
I 11
input and output block counts will be written to the standard error output
in the same format as the standard completion message.
E 11
If the
.Cm sync
conversion is also specified, any missing input data will be replaced
D 9
with NUL bytes (or with spaces if a block oriented conversion value was
E 9
I 9
with
.Tn NUL
bytes (or with spaces if a block oriented conversion value was
E 9
specified) and processed as a normal input buffer.
If the
.Cm sync
conversion is not specified, the input block is omitted from the output.
On input files which are not tapes or pipes, the file offset
will be positioned past the block in which the error occurred using
.Xr lseek 2 .
.It Cm notrunc
Do not truncate the output file.
This will preserve any blocks in the output file not explicitly written
by
.Nm dd .
The
.Cm notrunc
value is not supported for tapes.
I 13
.It Cm osync
Pad the final output block to the full output block size.
If the input file is not a multiple of the output block size
after conversion, this conversion forces the final output block
to be the same size as preceding blocks for use on devices that require
regularly sized blocks to be written.
This option is incompatible with use of the
.Cm bs= Ns Ar n
block size specification.
E 13
.It Cm swab
Swap every pair of input bytes.
If an input buffer has an odd number of bytes, the last byte will be
ignored during swapping.
.It Cm sync
Pad every input block to the input buffer size.
Spaces are used for pad bytes if a block oriented conversion value is
D 9
specified, otherwise NUL bytes are used.
E 9
I 9
specified, otherwise
.Tn NUL
bytes are used.
E 9
.It Cm ucase
Transform lowercase characters into uppercase characters.
.It Cm unblock
Treats the input as a sequence of fixed length records independent of input
and output block boundaries.
The length of the input records is specified by the
.Cm cbs
operand.
Any trailing space characters are discarded and a newline character is
appended.
E 7
D 6
.Tp
.Tp
E 6
I 6
.El
.El
E 6
.Pp
D 7
Where sizes are specified, a decimal number of bytes is
expected.
A size can end with
.Cm k
E 4
or
D 4
.B w
to specify multiplication by
1024, 512, or 2 respectively;
a pair of numbers may be separated by
.B x
E 4
I 4
.Cm b
to specify multiplication
by 1024 or 512, respectively.
A pair of sizes can be
separated by
.Cm x
E 4
to indicate a product.
E 7
I 7
Where sizes are specified, a decimal number of bytes is expected.
If the number ends with a ``b'', ``k'', ``m'' or ``w'', the number
is multiplied by 512, 1024 (1K), 1048576 (1M) or the number of bytes
in an integer, respectively.
Two or more numbers may be separated by an ``x'' to indicate a product.
E 7
D 4
.PP
.I Cbs
is used only if
.I ascii,
.I unblock,
.I ebcdic,
.I ibm,
or
.I block
conversion is specified.
In the first two cases,
.I cbs
characters are placed into the conversion buffer, any specified
character mapping is done,
trailing blanks trimmed and new-line added
before sending the line to the output.
In the latter three cases, characters are read into the
conversion buffer, and blanks added
to make up an
output record of size
.IR cbs .
.PP
After completion,
.I dd
reports the number of whole and partial input and output
blocks.
.PP
For example, to read an EBCDIC tape blocked ten 80-byte
EBCDIC card images per record into the ASCII file
.I x:
.IP
.nf
dd if=/dev/rmt0 of=x ibs=800 cbs=80 conv=ascii,lcase
.fi
.PP
Note the use of raw magtape.
.I Dd
is especially suited to I/O on the raw
physical devices because it allows reading
and writing in arbitrary record sizes.
.SH "SEE ALSO"
cp(1), tr(1)
.SH DIAGNOSTICS
f+p records in(out): numbers of full and partial records read(written)
.SH BUGS
The ASCII/EBCDIC conversion tables are
taken
from the 256 character standard in
the CACM Nov, 1968.
The `ibm' conversion, while less blessed as a standard,
corresponds better to certain IBM print train conventions.
There is no universal solution.
I 2
.br
One must specify ``conv=noerror,sync'' when copying
raw disks with bad sectors to insure 
.I dd
stays synchronized.
I 3
.PP
Certain combinations of arguments to 
.I conv=
are permitted.
However, the
.I block
or
.I unblock
option cannot be combined with
.IR ascii ,
.IR ebcdic ""
or
.IR ibm .
Invalid combinations
.I "silently ignore"
all but the last mutually-exclusive keyword.
E 4
I 4
.Pp
D 7
If the option
D 6
.Ic if=
E 6
I 6
.Cm if=
E 6
is not specified, the standard input is used.
E 7
I 7
When finished,
.Nm dd
D 8
displays the number of complete and partial input and output blocks
and truncated input records to the standard error output.
E 8
I 8
displays the number of complete and partial input and output blocks,
truncated input records and odd-length byte-swapping blocks to the
standard error output.
E 8
A partial input block is one where less than the input block size
was read.
A partial output block is one where less than the output block size
was written.
Partial output blocks to tape devices are considered fatal errors.
Otherwise, the rest of the block will be written.
Partial output blocks to character devices will produce a warning message.
A truncated input block is one where a variable length record oriented
conversion value was specified and the input line was too long to
fit in the conversion record or was not newline terminated.
E 7
.Pp
D 7
The input files can be any file type and
D 5
on completion, dd writes the number of input and output
E 5
I 5
on completion,
.Nm
writes the number of input and output
E 5
blocks, full and partial counts, to the standard error.
E 7
I 7
Normally, data resulting from input or conversion or both are aggregated
into output blocks of the specified size.
After the end of input is reached, any remaining output is written as
a block.
This means that the final output block may be shorter than the output
block size.
E 7
.Pp
D 7
A partial block may be caused by a read or write operation
transferring less than
D 6
.Ic ibs
E 6
I 6
.Cm ibs
E 6
bytes.
Only bytes read
have conversions, as specified by the options, applied to
them.
E 7
I 7
If
.Nm dd
D 8
receives a SIGINFO signal, the current input and output block counts will
E 8
I 8
D 9
receives a SIGINFO (see the ``status'' argument for
E 9
I 9
receives a
.Dv SIGINFO
(see the ``status'' argument for
E 9
.Xr stty 1 )
signal, the current input and output block counts will
E 8
D 11
be written to standard error in the same format as the standard completion
message.
E 11
I 11
be written to the standard error output
in the same format as the standard completion message.
E 11
If
.Nm dd
D 9
receives a SIGINT signal, the current input and output block counts will
E 9
I 9
receives a
.Dv SIGINT
signal, the current input and output block counts will
E 9
D 11
be written to standard error in the same format as the standard completion
message and
E 11
I 11
be written to the standard error output
in the same format as the standard completion message and
E 11
.Nm dd
will exit.
E 7
.Pp
D 7
For
D 6
.Li SIGINT ,
E 6
I 6
.Dv SIGINT ,
E 6
D 5
the dd utility writes status information to
E 5
I 5
the
.Nm
utility writes status information to
E 5
standard error before exiting.
It takes the default action
for all other signals.
.Pp
E 7
The
D 5
.Nm dd
E 5
I 5
D 7
.Nm
E 5
utility exits 0 on success, and >0 if an error occurs.
.Pp
D 5
If an error is detected, and the noerror opption has not
been supplied, the cause is reported and the dd utility
E 5
I 5
If an error is detected, and the noerror option has not
been supplied, the cause is reported and the
.Nm
utility
E 5
aborts the copy of the file.
E 7
I 7
.Nm dd
D 8
utility exits 0 on success an >0 if an error occurred.
E 8
I 8
utility exits 0 on success and >0 if an error occurred.
E 8
E 7
D 5
.\" .Pp
.\" The following environment variables affect the execution of
.\" dd:
.\" .Tp
.\" LC_TYPE
.\" The locale for character classification.
E 5
.Sh SEE ALSO
I 7
.Xr cp 1 ,
.Xr mt 1 ,
E 7
.Xr tr 1
.Sh STANDARDS
The
D 5
.Nm dd
E 5
I 5
D 7
.Nm
E 5
D 6
function is expected to be POSIX 1003.2 compatible.
E 6
I 6
utility is expected to be
E 7
I 7
.Nm dd
utility is expected to be a superset of the
E 7
.St -p1003.2
D 7
compatible.
E 7
I 7
standard.
The
.Cm files
operand and the
.Cm ascii ,
.Cm ebcdic ,
.Cm ibm ,
.Cm oldascii ,
.Cm oldebcdic
and
.Cm oldibm
D 9
values are extensions to the POSIX standard.
E 9
I 9
values are extensions to the
.Tn POSIX
standard.
E 9
E 7
E 6
E 4
E 3
E 2
E 1
