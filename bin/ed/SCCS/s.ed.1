h45487
s 00001/00024/00940
d D 6.9.1.1 94/06/27 17:52:11 mckusick 15 14
c delete decryption for the foreign sites (4.4BSD-Lite SPARC update)
e
s 00009/00014/00955
d D 6.9 93/12/30 15:38:39 mckusick 14 12
c copyediting for Usenix manuals
e
s 00001/00024/00945
d D 6.8.1.1 93/08/19 15:13:15 mckusick 13 12
c delete decryption for the foreign sites (4.4BSD)
e
s 00438/00583/00531
d D 6.8 92/12/05 23:30:18 cael 12 11
c clean up macros
e
s 00005/00004/01109
d D 6.7 91/04/08 14:40:33 bostic 11 10
c new copyright; att/bsd/shared
e
s 00001/00002/01112
d D 6.6 91/03/13 20:13:49 cael 10 8
c add .Vx (invokes tmac.doc.old)
e
s 00000/00024/01090
d D 6.5.1.1 90/10/21 14:49:34 mckusick 9 8
c delete decryption for the foreign sites
e
s 00007/00004/01107
d D 6.5 90/07/24 22:44:25 cael 8 7
c .Xr botch fix
e
s 00003/00004/01108
d D 6.4 90/06/26 00:59:12 cael 7 6
c converted man page
e
s 00750/00380/00362
d D 6.3 90/06/11 05:55:56 cael 6 5
c converted man page
e
s 00001/00000/00741
d D 6.2 86/08/12 18:39:27 mckusick 5 3
c missing .TP 5
e
s 00000/00026/00715
d D 6.1.1.1 86/08/12 18:33:39 mckusick 4 3
c delete decryption for the foreign sites
e
s 00001/00005/00740
d D 6.1 85/04/29 20:05:07 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00003/00021/00742
d D 5.1 85/04/29 20:04:33 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00763/00000/00000
d D 4.1 85/04/29 20:04:08 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
f b 
t
T
I 1
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
D 7
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 6
.\"
D 2
.TH ED 1 9/14/79
E 2
I 2
D 3
.TH ED 1 "14 September 1979"
E 3
I 3
D 6
.TH ED 1 "%Q%"
E 3
E 2
.AT 3
E 6
I 6
.\" %sccs.include.redist.man%
E 7
I 7
D 11
.\" Copyright (c) 1990 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 11
I 11
.\" Copyright (c) 1980, 1991 The Regents of the University of California.
.\" All rights reserved.
E 11
E 7
.\"
D 11
.\"     %W% (Berkeley) %G%
E 11
I 11
.\" %sccs.include.proprietary.man%
.\"
.\"	%W% (Berkeley) %G%
E 11
.\"
I 10
D 12
.Vx
E 12
E 10
.Dd %Q%
.Dt ED 1
.Os ATT 7th
E 6
D 10
.if t .ds q \(aa
.if n .ds q '
E 10
D 6
.SH NAME
ed \- text editor
.SH SYNOPSIS
.B ed
[
.B \-
D 4
] [
D 2
.BR \-p [prompt]
] [
.B \-u
] [
E 2
.B \-x
E 4
] [ name ]
.SH DESCRIPTION
.I Ed
E 6
I 6
.Sh NAME
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
.Nd text editor
.Sh SYNOPSIS
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
.Op Fl
D 9
D 12
.Op Fl x
E 12
I 12
D 13
D 15
.Op Fl \&x
E 15
E 13
E 12
E 9
.Op Ar file
.Sh DESCRIPTION
D 12
.Nm Ed
E 6
is the standard text editor.
E 12
I 12
.Nm \&Ed
once was
the standard text editor in the early days of
.Ux .
While its life as a line editor is dated,
.Nm \&ed
still resides on systems produced
by a variety of vendors for good reason.
Because of its
small size and simplicity,
D 14
.Nm \&ed,
E 14
I 14
.Nm \&ed
E 14
is found on the root partition
.Pq Pa /bin/ed
for emergency editing when normal system
reboots fail or single user tasks
are performed and
.Pa /usr
is not mounted.
.Nm \&Ed
is also useful for script editing tasks,
and although there is nothing which can
be done by
.Nm \&ed
that cannot be performed by
.Xr sed 1 ,
.Xr ex 1
or
.Em Gnu Emacs ,
.Nm \&ed
remains the simplest and easiest to use.
E 12
D 6
.PP
E 6
I 6
.Pp
E 6
If a
D 6
.I name
E 6
I 6
.Ar file
E 6
argument is given,
D 6
.I ed
E 6
I 6
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
E 6
simulates an
D 6
.I e
command (see below)\| on the named file; that is to say,
E 6
I 6
D 12
.Ic e
E 12
I 12
.Cm \&e
E 12
command (see below) on the named file; that is to say,
E 6
the file is read into
D 6
.I ed's
E 6
I 6
D 12
.Nm ed 's
E 12
I 12
.Nm \&ed Ns 's
E 12
E 6
buffer so that it can be edited.
I 8
D 12
.Tw Ds
E 8
D 2
If
.B \-p
is present,
.I ed
prompts for commands
with `* '
(or
.I prompt
if given.)
If
.B \-u
is present,
all lower case text in the buffer
is converted to upper case.
E 2
D 4
D 6
If 
.B \-x
is present, an
.I x
E 6
I 6
D 9
.Tp Fl x
E 12
I 12
.Pp
Available options:
.Bl -tag -width Ds
D 13
D 15
.It Fl \&x
E 12
An
D 12
.Ic x
E 12
I 12
.Cm \&x
E 12
E 6
command is simulated first to handle an encrypted file.
E 15
E 13
E 9
E 4
D 6
The optional
.B \-
suppresses the printing
E 6
I 6
D 12
.Tp Fl
E 12
I 12
.It Fl
E 12
Suppresses the printing
E 6
of explanatory output
and should be used
when the standard input is
an editor script.
D 6
.PP
.I Ed
E 6
I 6
D 12
.Tp
E 12
I 12
.El
E 12
.Pp
D 12
.Nm Ed
E 12
I 12
.Nm \&Ed
E 12
E 6
operates on a copy of any file it is editing; changes made
in the copy have no effect on the file until a
D 6
.IR w ""
(write)\|
command is given.
E 6
I 6
D 12
.Ic w
E 12
I 12
.Cm \&w
E 12
(write) command is given.
E 6
The copy of the text being edited resides
D 6
in a temporary file called the 
.IR buffer .
.PP
E 6
I 6
in a temporary file called the
.Ar buffer  .
.Pp
E 6
Commands to
D 6
.I ed
E 6
I 6
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
E 6
have a simple and regular structure: zero or
more
D 6
.I addresses
E 6
I 6
D 12
.Ar addresses
E 12
I 12
.Ad addresses
E 12
E 6
followed by a single character
D 6
.I command,
E 6
I 6
D 12
.Ar command ,
E 12
I 12
.Cm command ,
E 12
E 6
possibly
followed by parameters to the command.
These addresses specify one or more lines in the buffer.
Missing addresses are supplied by default.
D 6
.PP
E 6
I 6
.Pp
E 6
In general, only one command may appear on a line.
D 6
Certain commands allow the 
E 6
I 6
Certain commands allow the
E 6
addition of text to the buffer.
While
D 6
.I ed
E 6
I 6
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
E 6
is accepting text, it is said
to be in
D 6
.I  "input mode."
E 6
I 6
.Ar input mode .
E 6
In this mode, no commands are recognized;
all input is merely collected.
D 6
Input mode is left by typing a period `\fB.\fR' alone at the
E 6
I 6
Input mode is left by typing a period
D 12
.Sq Ic \&.
E 12
I 12
.Sq Ad \&.
E 12
alone at the
E 6
beginning of a line.
D 6
.PP
.I Ed
E 6
I 6
.Pp
D 12
.Nm Ed
E 12
I 12
.Nm \&Ed
E 12
E 6
supports a limited form of
D 6
.I "regular expression"
E 6
I 6
.Ar regular expression
E 6
notation.
A regular expression specifies
a set of strings of characters.
A member of this set of strings is said to be
D 6
.I matched
E 6
I 6
.Ar matched
E 6
by the regular expression.
In the following specification for regular expressions
the word `character' means any character but newline.
D 6
.IP 1.
E 6
I 6
D 12
.Tw Ds
.Tp 1.
E 12
I 12
.Bl -enum
.It
E 12
E 6
Any character except a special character
matches itself.
Special characters are
the regular expression delimiter plus
D 6
.RB \e\|[\| .
and sometimes ^\|*\|$.
.IP 2.
E 6
I 6
D 8
.Sq Li \e\[
E 8
I 8
D 12
.Sq Cm \e\[.
E 12
I 12
.Ql \e\&[.
E 12
E 8
and sometimes
D 8
.Sq Li ^*$ .
E 8
I 8
D 12
.Sq Cm ^*$ .
E 8
.Tp 2.
E 12
I 12
.Ql ^*$ .
.It
E 12
E 6
A
D 6
.B .
E 6
I 6
D 8
.Sq Ic \&.
E 8
I 8
D 12
.Sq Cm \&.
E 12
I 12
.Sq Ql \&.
E 12
E 8
E 6
matches any character.
D 6
.IP 3.
A \e followed by any character except a digit or (\|) matches that character.
.IP 4.
E 6
I 6
D 12
.Tp 3.
E 12
I 12
.It
E 12
A
D 12
.Sq Li \e
E 12
I 12
.Ql \e
E 12
followed by any character except a digit or
.Li (\)
matches that character.
D 12
.Tp 4.
E 12
I 12
.It
E 12
E 6
A nonempty string
D 6
.I s
bracketed
.RI [ \|s\| ]
(or
.RI [^ s\| ])
E 6
I 6
D 12
.Op Ar s
or
I 8
.Oo
E 8
.Cx \&(
D 8
.Op \&^ Ar s
E 8
I 8
.Op Cm \&^ Ar s
E 8
.Cx \&)
.Cx
I 8
.Oo
E 12
I 12
.Ar \&s
bracketed
.Bq Ar \&s
(or
.Bq Ar \&^s )
E 12
E 8
E 6
matches any character in (or not in)
D 6
.I s.
In 
.I s,
\e has no special meaning, and ] may only appear as
E 6
I 6
D 12
.Ar s .
E 12
I 12
.Ar \&s.
E 12
In
D 12
.Ar s ,
.Sq Li \e
E 12
I 12
.Ar \&s,
.Ql \e
E 12
has no special meaning, and
may only appear as
E 6
the first letter.
D 6
A substring 
.I a\-b,
E 6
I 6
A substring
D 12
.Ar a\-b ,
E 12
I 12
.Ar \&a\-b ,
E 12
E 6
with
D 6
.I a
E 6
I 6
D 12
.Ar a
E 12
I 12
.Ar \&a
E 12
E 6
and
D 6
.I b
E 6
I 6
D 12
.Ar b
E 6
in ascending ASCII order, stands for the inclusive
range of ASCII characters.
D 6
.IP 5.
A regular expression of form 1-4 followed by * matches a sequence of
E 6
I 6
.Tp 5.
A regular expression of form 1\-4 followed by * matches a sequence of
E 12
I 12
.Ar \&b
in ascending
.Tn ASCII
order, stands for the inclusive
range of
.Tn ASCII
characters.
.It
A regular expression of form 1\-4 followed by
.Ql \&*
matches a sequence of
E 12
E 6
0 or more matches of the regular expression.
D 6
.IP 6.
E 6
I 6
D 12
.Tp 6.
E 12
I 12
.It
E 12
E 6
A regular expression,
D 6
.I x,
of form 1-8, bracketed
.RI \e( \|x\| \e)
E 6
I 6
D 12
.Ar x ,
E 12
I 12
.Ar \&x ,
E 12
of form 1\-8, bracketed
D 12
.Cx Li \e(
.Ar x
.Li \e)
.Cx
E 12
I 12
.No \e( Ar \&x Ns \e)
E 12
E 6
matches what
D 6
.I x
E 6
I 6
D 12
.Ar x
E 12
I 12
.Ar \&x
E 12
E 6
matches.
D 6
.IP 7.
A \e followed by a digit 
.I n
E 6
I 6
D 12
.Tp 7.
E 12
I 12
.It
E 12
A \e followed by a digit
D 12
.Ar n
E 12
I 12
.Ar \&n
E 12
E 6
matches a copy of the string that the
bracketed regular expression beginning with the
D 6
.IR n th
\e( matched.
.IP 8.
A regular expression of form 1-8,
.I x,
followed by a regular expression of form 1-7,
.I y
E 6
I 6
D 12
.Cx Ar n
.Cx \'th
.Cx
.Li \e(
E 12
I 12
.Ar \&n Ns \&th
.No \e(
E 12
matched.
D 12
.Tp 8.
E 12
I 12
.It
E 12
A regular expression of form 1\-8,
D 12
.Ar x ,
E 12
I 12
.Ar \&x ,
E 12
followed by a regular expression of form 1\-7,
D 12
.Ar y
E 12
I 12
D 14
.Ar \&y
E 14
I 14
.Ar \&y,
E 14
E 12
E 6
matches a match for
D 6
.I x
E 6
I 6
D 12
.Ar x
E 12
I 12
.Ar \&x
E 12
E 6
followed by a match for
D 6
.I y,
E 6
I 6
D 12
.Ar y ,
E 12
I 12
.Ar \&y ,
E 12
E 6
with the
D 6
.I x
E 6
I 6
D 12
.Ar x
E 12
I 12
.Ar \&x
E 12
E 6
match being as long as possible while still permitting a
D 6
.I y
E 6
I 6
D 12
.Ar y
E 12
I 12
.Ar \&y
E 12
E 6
match.
D 6
.IP 9.
A regular expression of form 1-8 preceded by ^
(or followed by $), is constrained to matches that
E 6
I 6
D 12
.Tp 9.
E 12
I 12
.It
E 12
A regular expression of form 1\-8 preceded by
.Sq Li ^
(or followed by
.Sq Li $ ) ,
is constrained to matches that
E 6
begin at the left (or end at the right) end of a line.
D 6
.IP 10.
A regular expression of form 1-9 picks out the
E 6
I 6
D 12
.Tp 10.
E 12
I 12
.It
E 12
A regular expression of form 1\-9 picks out the
E 6
longest among the leftmost matches in a line.
D 6
.IP 11.
E 6
I 6
D 12
.Tp 11.
E 12
I 12
.It
E 12
E 6
An empty regular expression stands for a copy of the
last regular expression encountered.
D 6
.PP
E 6
I 6
D 12
.Tp
E 12
I 12
.El
E 12
.Pp
E 6
Regular expressions are used in addresses to specify
lines and in one command
(see
D 6
.I s
below)\|
E 6
I 6
D 12
.Ar s
E 12
I 12
.Ar \&s
E 12
below)
E 6
to specify a portion of a line which is to be replaced.
If it is desired to use one of
the regular expression metacharacters as an ordinary
D 6
character, that character may be preceded by `\e'.
E 6
I 6
character, that character may be preceded by
.Sq Li \e .
E 6
This also applies to the character bounding the regular
D 6
expression (often `/')\| and to `\e' itself.
.PP
E 6
I 6
expression (often
.Sq Li \&/ )
and to
.Sq Li \e
itself.
.Pp
E 6
To understand addressing in
D 6
.I ed
E 6
I 6
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
E 6
it is necessary to know that at any time there is a
D 6
.I  "current line."
E 6
I 6
.Ar current line.
E 6
Generally speaking, the current line is
the last line affected by a command; however,
the exact effect on the current line
is discussed under the description of
the command.
Addresses are constructed as follows.
D 6
.TP
1.
The character `\fB.\fR' addresses the current line.
.TP
2.
The character `$' addresses the last line of the buffer.
.TP
3.
E 6
I 6
D 12
.Tw Ds
.Tp 1.
E 12
I 12
.Bl -enum
.It
E 12
The character
D 12
.Sq Ic \&.
E 12
I 12
.Sq Ad \&.
E 12
addresses the current line.
D 12
.Tp 2.
E 12
I 12
.It
E 12
The character
D 12
.Cx `
.Ic $
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&$
E 12
addresses the last line of the buffer.
D 12
.Tp 3.
E 12
I 12
.It
E 12
E 6
A decimal number
D 6
.I n
E 6
I 6
D 12
.Ar n
E 12
I 12
.Ar \&n
E 12
E 6
addresses the
D 6
.IR n -th
E 6
I 6
D 12
.Cx Ar n
.Cx \'th
.Cx
E 12
I 12
.Ar \&n Ns \&th
E 12
E 6
line of the buffer.
D 6
.TP
4.
`\(fm\fIx\fR' addresses the line marked with the name
.IR x ,
E 6
I 6
D 12
.Tp 4.
.Cx `\(fm
.Ar x
.Cx \'
.Cx
E 12
I 12
.It
.Sq \(fm Ns Ar \&x
E 12
addresses the line marked with the name
D 12
.Ar x  ,
E 12
I 12
.Ar \&x  ,
E 12
E 6
which must be a lower-case letter.
Lines are marked with the
D 6
.I k
E 6
I 6
D 12
.Ar k
E 12
I 12
.Ar \&k
E 12
E 6
command described below.
D 6
.TP
5.
A regular expression enclosed in slashes `/' addresses
E 6
I 6
D 12
.Tp 5.
E 12
I 12
.It
E 12
A regular expression enclosed in slashes
D 12
.Cx `
.Li /
.Cx \'
.Cx
E 12
I 12
.Ql \&/
E 12
addresses
E 6
the line found by searching forward from the current line
and stopping at the first line containing a
string that matches the regular expression.
If necessary the search wraps around to the beginning of the
buffer.
D 6
.TP
6.
A regular expression enclosed in queries `?' addresses
E 6
I 6
D 12
.Tp 6.
A regular expression enclosed in queries 
.Cx `
.Li ?
.Cx \'
.Cx
E 12
I 12
.It
A regular expression enclosed in queries
.Ql ?
E 12
addresses
E 6
the line found by searching backward from the current line
and stopping at the first line containing
a string that matches the regular expression.
If necessary
the search wraps around to the end of the buffer.
D 6
.TP
7.
An address followed by a plus sign `+'
or a minus sign `\-' followed by a decimal number specifies that address plus
(resp. minus)\| the indicated number of lines.
E 6
I 6
D 12
.Tp 7.
E 12
I 12
.It
E 12
An address followed by a plus sign
D 12
.Cx `
.Li +
.Cx \'
.Cx
E 12
I 12
.Ql \&+
E 12
or a minus sign
D 12
.Cx `
.Li \-
.Cx \'
.Cx
E 12
I 12
.Ql \-
E 12
followed by a decimal number specifies that address plus
(resp. minus) the indicated number of lines.
E 6
The plus sign may be omitted.
D 6
.TP
8.
If an address begins with `+' or `\-'
E 6
I 6
D 12
.Tp 8.
E 12
I 12
.It
E 12
If an address begins with
D 12
.Cx `
.Li +
.Cx \'
.Cx
E 12
I 12
.Ql \&+
E 12
or
D 12
.Cx `
.Li \-
.Cx \'
.Cx
E 12
I 12
.Ql \-
E 12
E 6
the addition or subtraction is taken with respect to the current line;
D 6
e.g. `\-5' is understood to mean `\fB.\fR\-5'.
.TP
9.
If an address ends with `+' or `\-',
E 6
I 6
e.g.
D 12
.Cx `
.Li \-5
.Cx \'
.Cx
E 12
I 12
.Ql \-5
E 12
is understood to mean
D 12
.Cx `
.Li .\-5
.Cx \'
.Cx
.Nm .
.Tp 9.
E 12
I 12
.Ql .\-5 .
.It
E 12
If an address ends with
D 12
.Cx `
.Li +
.Cx \'
.Cx
.Cx `
.Li \-
.Cx \',
.Cx
E 12
I 12
.Ql \&+
or
.Ql \&\-
E 12
E 6
then 1 is added (resp. subtracted).
As a consequence of this rule and rule 8,
D 6
the address `\-' refers to the line before the current line.
E 6
I 6
the address
D 12
.Cx `
.Li \-
.Cx \'
.Cx
E 12
I 12
.Ql \&\-
E 12
refers to the line before the current line.
E 6
Moreover,
trailing
D 6
`+' and `\-' characters
have cumulative effect, so `\-\-' refers to the current
E 6
I 6
D 12
.Cx `
.Li +
.Cx \'
.Cx
E 12
I 12
.Ql \&+
E 12
and
D 12
.Cx `
.Li \-
.Cx \'
.Cx
E 12
I 12
.Ql \&\-
E 12
characters
have cumulative effect, so
D 12
.Cx `
.Li \-\-
.Cx \'
.Cx
E 12
I 12
.Ql \&\-\-
E 12
refers to the current
E 6
line less 2.
D 6
.TP
10.
E 6
I 6
D 12
.Tp 10.
E 12
I 12
.It
E 12
E 6
To maintain compatibility with earlier versions of the editor,
D 6
the character `^' in addresses is 
equivalent to `\-'.
.PP
E 6
I 6
the character
D 12
.Cx `
.Li ^
.Cx \'
.Cx
E 12
I 12
.Ql \&^
E 12
in addresses is
equivalent to
D 12
.Cx `
.Li \-
.Cx \'.
.Cx
.Tp
E 12
I 12
.Ql \&\-
.El
E 12
.Pp
E 6
Commands may require zero, one, or two addresses.
Commands which require no addresses regard the presence
of an address as an error.
Commands which accept one or two addresses
D 14
assume default addresses when insufficient are given.
E 14
I 14
assume default addresses when insufficient ones are given.
E 14
If more addresses are given than such a command requires,
D 6
the last one or two (depending on what is accepted)\| are used.
.PP
E 6
I 6
the last one or two (depending on what is accepted) are used.
.Pp
E 6
Addresses are separated from each other typically by a comma
D 6
`\fB,\fR'.
E 6
I 6
D 12
.Cx `
.Li ,
.Cx \'
.Cx
E 12
I 12
D 14
.Ql \&,
E 14
I 14
.Ql \&, .
E 14
E 12
E 6
They may also be separated by a semicolon
D 6
`\fB;\fR'.
In this case the current line `\fB.\fR' is set to
E 6
I 6
D 12
.Cx `
.Li ;
.Cx \'
.Cx
In this case the current line 
.Cx `
.Li .
.Cx \'
.Cx
.Nm .
E 12
I 12
D 14
.Ql \&;
E 14
I 14
.Ql \&; .
E 14
In this case the current line
.Ql \&.
E 12
is set to
E 6
the previous address before the next address is interpreted.
This feature can be used to determine the starting
D 6
line for forward and backward searches (`/', `?')\|.
E 6
I 6
line for forward and backward searches
D 12
.Cx \&(`
.Li /
.Cx \'
.Cx
.Cx `
.Li ?
.Cx \').
.Cx
E 12
I 12
.Pf ( Ql \&/ ,
D 14
.Ql \&? )
E 14
I 14
.Ql \&? ).
E 14
E 12
E 6
The second address of any two-address sequence
must correspond to a line following the line corresponding to the first address.
D 6
The special form `%'
is an abbreviation for the address pair `1,$'.
.PP
E 6
I 6
The special form
D 12
.Cx `
.Li \&%
.Cx \'
.Cx
E 12
I 12
.Ql \&%
E 12
is an abbreviation for the address pair
D 12
.Cx `
.Li 1,$
.Cx \'.
.Cx
E 12
I 12
.Ql \&1,$ .
E 12
.Pp
E 6
In the following list of
D 6
.I ed
E 6
I 6
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
E 6
commands, the default addresses
are shown in parentheses.
The parentheses are not part of
the address, but are used to show that the given addresses are
the default.
D 6
.PP
E 6
I 6
.Pp
E 6
As mentioned, it is generally illegal for more than one
command to appear on a line.
D 12
However, most commands may be suffixed by `p'
or by `l', in which case
E 12
I 12
However, most commands may be suffixed by
.Ql \&p
or by
.Ql \&l ,
in which case
E 12
the current line is either
printed or listed respectively
in the way discussed below.
D 12
Commands may also be suffixed by `n',
E 12
I 12
Commands may also be suffixed by
.Ql \&n ,
E 12
meaning the output of the command is to
be line numbered.
These suffixes may be combined in any order.
D 6
.TP 5
.RB (\| .\| )\|a
.br
.ns
.TP 5
<text>
.br
.ns
.TP 5
.B .
.br
E 6
I 6
D 12
.Tw Ds
.Tp Cx \&(
.Ic .
.Cx \&)
.Ic a
.Cx
.Tp <text>
.Tp Ic \&.
E 12
I 12
.Pp
.Bl -tag -width four -compact
.It Xo
.Po Ad \&.
.Pc Ns Cm \&a
.Xc
.It <text>
.It Cm \&.
.br
E 12
E 6
The append command reads the given text
and appends it after the addressed line.
D 6
`\fB.\fR' is left
E 6
I 6
D 12
.Sq Ic \&.
E 12
I 12
.Sq Ad \&.
E 12
is left
E 6
on the last line input, if there
were any, otherwise at the addressed line.
Address `0' is legal for this command; text is placed
at the beginning of the buffer.
D 6
.TP 5
.RB (\| .\| ,\  .\| )\|c
.br
.ns
.TP 5
<text>
.br
.ns
.TP 5
.B .
.br
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.
.Cx \&)
.Ic \&c
.Cx
.Tp <text>
.Tp Ic \&.
E 12
I 12
.Pp
.It Xo
.Po Ad \&. , Ns Ad \&.
.Pc Ns Cm \&c
.Xc
.It <text>
.It Cm \&.
.br
E 12
E 6
The change
command deletes the addressed lines, then accepts input
text which replaces these lines.
D 6
`\fB.\fR' is left at the last line input; if there were none,
E 6
I 6
D 12
.Sq Ic \&.
E 12
I 12
.Sq Ad \&.
E 12
is left at the last line input; if there were none,
E 6
it is left at the line preceding the deleted lines.
D 6
.TP 5
.RB (\| .\| ,\  .\| )\|d
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.
.Cx \&)
.Ic \&d
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&. , Ns Ad \&.
.Pc Ns Cm \&d
.Xc
.It <text>
.It Cm \&.
.br
E 12
E 6
The delete command deletes the addressed lines from the buffer.
The line originally after the last line deleted becomes the current line;
if the lines deleted were originally at the end,
the new last line becomes the current line.
D 6
.TP 5
e filename
E 6
I 6
D 12
.Tp Cx Ic \&e
.Cx \&\ \&
.Ar filename
.Cx
E 12
I 12
.Pp
.It Cm \&e Ar filename
E 12
E 6
The edit
command causes the entire contents of the buffer to be deleted,
and then the named file to be read in.
D 6
`\fB.\fR' is set to the last line of the buffer.
E 6
I 6
D 12
.Sq Ic \&.
E 12
I 12
.Sq Ad \&.
E 12
is set to the last line of the buffer.
E 6
The number of characters read is typed.
D 6
`filename' is remembered for possible use as a default file name
E 6
I 6
.Ar filename
is remembered for possible use as a default file name
E 6
in a subsequent
D 6
.I r
E 6
I 6
D 12
.Ic r
E 12
I 12
.Cm \&r
E 12
E 6
or
D 6
.I w
E 6
I 6
D 12
.Ic w
E 12
I 12
.Cm \&w
E 12
E 6
command.
D 6
If `filename' is missing, the remembered name is used.
.TP 5
E filename
E 6
I 6
If
.Ar filename
is missing, the remembered name is used.
D 12
.Tp Cx Ic E
.Cx \&\ \&
.Ar filename
.Cx
E 12
I 12
.Pp
.It Cm \&E Ar filename
E 12
E 6
This command is the same as
D 6
.I e,
E 6
I 6
D 12
.Ic e ,
E 12
I 12
.Cm \&e ,
E 12
E 6
except that no diagnostic results when no
D 6
.I w
E 6
I 6
D 12
.Ic w
E 12
I 12
.Cm \&w
E 12
E 6
has been given since the last buffer alteration.
D 6
.TP 5
f filename
E 6
I 6
D 12
.Tp Cx Ic f
.Cx \&\ \&
.Ar filename
.Cx
E 12
I 12
.Pp
.It Cm \&f Ar filename
E 12
E 6
The filename command prints the currently remembered file name.
D 6
If `filename' is given,
the currently remembered file name is changed to `filename'.
.TP 5
(1,$)\|g/regular expression/command list
E 6
I 6
If
.Ar filename
is given,
the currently remembered file name is changed to
.Ar filename .
D 12
.Tp Cx \&(
.Ic \&1
.Cx \&,
.Ic \&$
.Cx \&)
.Ic \&g
.Ar/regular expression/command list
.Cx
E 12
I 12
.Sm off
.Pp
.It Xo
.Po Ad \&1 , Ns Ad \&$
.Pc Cm \&g Ar "/regular\ expression/" Cm "command\ list"
.Xc
.Sm on
E 12
E 6
In the global
command, the first step is to mark every line which matches
the given regular expression.
Then for every such line, the
D 6
given command list is executed with `\fB.\fR' initially set to that line.
E 6
I 6
given command list is executed with
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
D 14
In the global
command, the first step is to mark every line which matches
the given regular expression.
Then for every such line, the
given command list is executed with
E 14
.Sq Ad \&.
E 12
initially set to that line.
E 6
A single command or the first of multiple commands
appears on the same line with the global command.
D 6
All lines of a multi-line list except the last line must be ended with `\e'.
.I A,
.I i,
E 6
I 6
All lines of a multi-line list except the last line must be ended with
D 12
.Cx `
.Ic \&\e
.Cx \'.
.Cx
.Ic A ,
.Ic i,
E 12
I 12
D 14
.Sq Cm \&\e
E 14
I 14
.Sq Cm \&\e .
E 14
.Cm \&A ,
.Cm \&i ,
E 12
E 6
and
D 6
.I c
E 6
I 6
D 12
.Ic c
E 12
I 12
.Cm \&c
E 12
E 6
commands and associated input are permitted;
D 6
the `\fB.\fR' terminating input mode may be omitted if it would be on the
E 6
I 6
the
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
terminating input mode may be omitted if it would be on the
E 6
last line of the command list.
The commands
D 6
.I g
E 6
I 6
D 12
.Ic g
E 12
I 12
.Cm \&g
E 12
E 6
and
D 6
.I v
E 6
I 6
D 12
.Ic v
E 12
I 12
.Cm \&v
E 12
E 6
are not permitted in the command list.
D 6
.TP 5
.RB (\| .\| )\|i
.ns
.TP 5
<text>
.br
.ns
.TP 5
.B .
.br
E 6
I 6
D 12
.Tp Cx \&(
.Ic .
.Cx \&)
.Ic i
.Cx
.Tp <text>
.Tp Ic \&.
E 12
I 12
.Pp
.It Xo
.Po Ad \&.
.Pc Ns Cm \&i
.Xc
.It <text>
.It Cm \&.
.br
E 12
E 6
This command inserts the given text before the addressed line.
D 6
`\fB.\fR' is left at the last line input, or, if there were none,
E 6
I 6
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
is left at the last line input, or, if there were none,
E 6
at the line before the addressed line.
This command differs from the
D 6
.I a
E 6
I 6
D 12
.Ic a
E 12
I 12
.Cm \&a
E 12
E 6
command only in the placement of the
text.
D 6
.TP 5
.RB (\| .\| ,\  . +1)\|j
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.+1
.Cx \&)
.Ic \&j
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&. , Ns Ad \&.+1
.Pc Ns Cm \&j
.Xc
E 12
E 6
This command joins the addressed lines into a single line;
intermediate newlines simply disappear.
D 6
`\fB.\fR' is left at the resulting line.
.TP 5
( \fB. \fR)\|k\fIx\fR
E 6
I 6
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
is left at the resulting line.
D 12
.Tp Cx \&(
.Ic .
.Cx \&)
.Ic k
.Ar x
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&.
.Pc Ns Cm k Ns Ar \&x
.Xc
E 12
E 6
The mark command marks the addressed line with
name
D 6
.I x,
E 6
I 6
D 12
.Ar x ,
E 12
I 12
.Ar \&x ,
E 12
E 6
which must be a lower-case letter.
D 6
The address form `\(fm\fIx\fR' then addresses this line.
.ne 2.5
.TP 5
.RB (\| .\| ,\  .\| )\|l
E 6
I 6
The address form
D 12
.Cx `\(fm
.Ar x
.Cx \'
.Cx
E 12
I 12
.Ar \(fmx
E 12
then addresses this line.
D 12
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.
.Cx \&)
.Ic \&l
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&. , Ns Ad \&.
.Pc Ns Cm \&l
.Xc
E 12
E 6
The list command
prints the addressed lines in an unambiguous way:
non-graphic characters are
printed in two-digit octal,
and long lines are folded.
The
D 6
.I l
E 6
I 6
D 12
.Ar l
E 12
I 12
.Ar \&l
E 12
E 6
command may be placed on the same line after any non-i/o
command.
D 6
.TP 5
.RB (\| .\| ,\  .\| )\|m\fIa
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.
.Cx \&)
.Ic \&m
.Ar a
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&. , Ns Ad \&.
.Pc Ns Cm \&m Ns Ar \&a
.Xc
E 12
E 6
The move command repositions the addressed lines after the line
addressed by
D 6
.IR a .
E 6
I 6
D 12
.Ar a  .
E 12
I 12
.Ql Ad \&a  .
E 12
E 6
The last of the moved lines becomes the current line.
D 3
.TP 5
.RB (\| .\| ,\  .\| )\|n
The number command prints the addressed lines
with line numbers and a tab at the left.
E 3
D 6
.TP 5
.RB (\| .\| ,\  .\| )\|p
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.
.Cx \&)
.Ic \&p
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&. , Ns Ad \&.
.Pc Ns Cm \&p
.Xc
E 12
E 6
The print command prints the addressed lines.
D 6
`\fB.\fR'
E 6
I 6
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
E 6
is left at the last line printed.
The
D 6
.I p
E 6
I 6
D 12
.Ic p
E 12
I 12
.Cm \&p
E 12
E 6
command
may
be placed on the same line after any non-i/o command.
D 6
.TP
.RB (\| .\| ,\  .\| )\|P
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.
.Cx \&)
.Ic \&P
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&. , Ns Ad \&.
.Pc Ns Cm \&P
.Xc
E 12
E 6
This command is a synonym for
D 6
.I p.
.TP 5
q
E 6
I 6
D 12
.Ic p .
.Tp Ic q
E 12
I 12
.Cm \&p .
.Pp
.It Cm \&q
E 12
E 6
The quit command causes
D 6
.I ed
E 6
I 6
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
E 6
to exit.
No automatic write
of a file is done.
D 6
.TP 5
Q
E 6
I 6
D 12
.Tp Ic Q
E 12
I 12
.Pp
.It Cm \&Q
E 12
E 6
This command is the same as
D 6
.I q,
E 6
I 6
D 12
.Ic q ,
E 12
I 12
.Cm \&q ,
E 12
E 6
except that no diagnostic results when no
D 6
.I w
E 6
I 6
D 12
.Ic w
E 12
I 12
.Cm \&w
E 12
E 6
has been given since the last buffer alteration.
D 6
.TP 5
($)\|r filename
E 6
I 6
D 12
.Tp Cx \&(
.Ic $
.Cx \&)
.Ic r
.Cx \&\ \&
.Ar filename
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&$ , Ns Ad \&.
.Pc Ns Cm \&r Ar filename
.Xc
E 12
E 6
The read command
reads in the given file after the addressed line.
If no file name is given,
the remembered file name, if any, is used
(see
D 6
.I e
E 6
I 6
D 12
.Ic e
E 12
I 12
.Cm \&e
E 12
E 6
and
D 6
.I f
commands)\|.
E 6
I 6
D 12
.Ic f
E 12
I 12
.Cm \&f
E 12
commands).
E 6
The file name is remembered if there was no
remembered file name already.
Address `0' is legal for
D 6
.I r
E 6
I 6
D 12
.Ic r
E 12
I 12
.Cm \&r
E 12
E 6
and causes the
file to be read at the beginning of the buffer.
If the read is successful, the number of characters
read is typed.
D 6
`\fB.\fR' is left at the last line read in from the file.
.TP 5
(\| \fB.\fR\|, \fB.\fR\|)\|s/regular expression/replacement/       or,
.br
.ns
.TP 5
(\| \fB.\fR\|, \fB.\fR\|)\|s/regular expression/replacement/g
E 6
I 6
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
is left at the last line read in from the file.
D 12
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.
.Cx \&)
.Ic \&s
.Ar/regular expression/replacement/
.Cx \&\tor
.Cx
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.
.Cx \&)
.Ic \&s
.Ar/regular expression/replacement/
.Ic \&g
.Cx
E 12
I 12
.Sm off
.Pp
.It Xo
.Po Ad \&1 , Ns Ad \&$
.Pc Cm \&g Ar "/regular\ expression/" Cm "replacement\ list"
.No "	or,"
.Xc
.Sm on
.Sm off
.It Xo
.Po Ad \&1 , Ns Ad \&$
.Pc Cm \&g Ar "/regular\ expression/" Cm "replacement\ list/"
.Ns Cm \&g
.Xc
.Sm on
E 12
E 6
The substitute command searches each addressed
line for an occurrence of the specified regular expression.
On each line in which a match is found,
all matched strings are replaced by the replacement specified,
D 6
if the global replacement indicator `g' appears after the command.
E 6
I 6
if the global replacement indicator
D 12
.Ic \&g
E 12
I 12
.Cm \&g
E 12
appears after the command.
E 6
If the global indicator does not appear, only the first occurrence
of the matched string is replaced.
It is an error for the substitution to fail on all addressed lines.
Any punctuation character
D 6
may be used instead of `/' to delimit the regular expression
E 6
I 6
may be used instead of
D 12
.Cx `
.Ic \&/
.Cx \'
.Cx
E 12
I 12
.Sq Cm \&/
E 12
to delimit the regular expression
E 6
and the replacement.
D 6
`\fB.\fR' is left at the last line substituted.
.IP
An ampersand `&' appearing in the replacement
E 6
I 6
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
is left at the last line substituted.
An ampersand
D 12
.Cx `
.Ic \&&
.Cx \'
.Cx
E 12
I 12
.Sq Cm \&&
E 12
appearing in the replacement
E 6
is replaced by the string matching the regular expression.
D 6
The special meaning of `&' in this context may be
suppressed by preceding it by `\e'.
E 6
I 6
The special meaning of
D 12
.Cx `
.Ic \&&
.Cx \'
.Cx
E 12
I 12
.Sq Cm \&&
E 12
in this context may be
suppressed by preceding it by
D 12
.Cx `
.Ic \&\e
.Cx \'.
.Cx
E 12
I 12
.Sq Cm \&\e
E 12
E 6
The characters
D 6
.I `\|\en'
E 6
I 6
D 12
.Cx `
.Ic \&\e
.Ar n
.Cx \'
.Cx
E 12
I 12
.Sq Cm \&\e Ns Ar \&n
E 12
E 6
where
D 6
.I n
E 6
I 6
D 12
.Ar n
E 12
I 12
.Ar \&n
E 12
E 6
is a digit,
are replaced by the text matched by the
D 6
.IR n -th
E 6
I 6
D 12
.Cx Ar n
.Cx \'th
.Cx
E 12
I 12
.Ar \&n Ns
E 12
E 6
regular subexpression
D 6
enclosed between `\e(' and `\e)'.
E 6
I 6
enclosed between
D 12
.Cx `
.Ic \&\e\&(
.Cx \'.
.Cx
E 12
I 12
.Sq Cm \&\e\&(
E 12
and
D 12
.Cx `
.Ic \&\e\&)
.Cx \'.
.Cx
E 12
I 12
.Sq Cm \&\e\&)
E 12
E 6
When
nested, parenthesized subexpressions
are present,
D 6
.I n
is determined by counting occurrences of `\e(' starting from the left.
.IP
E 6
I 6
D 12
.Ar n
E 12
I 12
.Ar \&n
E 12
is determined by counting occurrences of
D 12
.Cx `
.Ic \&\e\&(
.Cx \'.
.Cx
E 12
I 12
.Sq Cm \&\e\&(
E 12
starting from the left.
E 6
Lines may be split by substituting new-line characters into them.
The new-line in the
replacement string
D 6
must be escaped by preceding it by `\e'.
.IP
E 6
I 6
must be escaped by preceding it by
D 12
.Cx `
.Ic \&\e
.Cx \'.
.Cx
E 12
I 12
.Sq Cm \&\e
E 12
E 6
One or two trailing delimiters may be omitted,
D 6
implying the `p' suffix.
The special form `s' followed by
.I no
E 6
I 6
implying the
D 12
.Ic p
E 12
I 12
.Cm \&p
E 12
suffix.
The special form
D 12
.Ic s
E 12
I 12
.Cm \&s
E 12
followed by
D 12
.Ar no
E 12
I 12
.Ar \&no
E 12
E 6
delimiters
repeats the most recent substitute command
on the addressed lines.
D 6
The `s' may be followed by the letters
.B r
E 6
I 6
The
D 12
.Ic s
E 12
I 12
.Cm \&s
E 12
may be followed by the letters
D 12
.Ic r
E 12
I 12
.Cm \&r
E 12
E 6
(use the most recent regular expression for the
left hand side, instead of the most recent
left hand side of a substitute command),
D 6
.B p
E 6
I 6
D 12
.Ic p
E 12
I 12
.Cm \&p
E 12
E 6
(complement the setting of the
D 6
.I p
E 6
I 6
D 12
.Ic p
E 12
I 12
.Cm \&p
E 12
E 6
suffix from the previous substitution), or
D 6
.B g
E 6
I 6
D 12
.Ic g
E 12
I 12
.Cm \&g
E 12
E 6
(complement the setting of the
D 6
.I g
E 6
I 6
D 12
.Ic g
E 12
I 12
.Cm \&g
E 12
E 6
suffix).
These letters may be combined in any order.
D 6
.TP 5
.RB (\| .\| ,\  .\| )\|t\|\fIa
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.
.Cx \&)
.Ic \&t
.Ar a
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&. , Ns Ad \&.
.Pc Ns Cm \&t Ns Ar \&a
.Xc
E 12
E 6
This command acts just like the
D 6
.I m
E 6
I 6
D 12
.Ic m
E 12
I 12
.Cm \&m
E 12
E 6
command, except that a copy of the addressed lines is placed
after address
D 6
.I a
E 6
I 6
D 12
.Ad a
E 12
I 12
.Ad \&a
E 12
E 6
(which may be 0).
D 6
`\fB.\fR' is left on the last line of the copy.
.TP 5
.RB (\| .\| ,\  .\| )\|u
E 6
I 6
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
is left on the last line of the copy.
D 12
.Tp Cx \&(
.Ic \&.
.Cx \&,
.Ic \&.
.Cx \&)
.Ic \&u
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&. , Ns Ad \&.
.Pc Ns Cm \&u
.Xc
E 12
E 6
The undo command restores the buffer to it's state
before the most recent buffer modifying command.
The current line is also restored.
Buffer modifying commands are
D 6
.I a, c, d, g, i, k, m, r, s, t,
E 6
I 6
D 12
.Ic a , c , d , g , i , k , m , r , s , t ,
E 12
I 12
.Cm \&a , \&c , \&d , \&g ,
.Cm \&i , \&k , \&m , \&r ,
.Cm \&s , \&t ,
E 12
E 6
and
D 6
.I v.
E 6
I 6
D 12
.Ic v .
E 12
I 12
.Cm \&v .
E 12
E 6
For purposes of undo,
D 6
.I g
E 6
I 6
D 12
.Ic g
E 12
I 12
.Cm \&g
E 12
E 6
and
D 6
.I v
E 6
I 6
D 12
.Ic v
E 12
I 12
.Cm \&v
E 12
E 6
are considered to be a single buffer modifying command.
Undo is its own inverse.
D 6
.IP
E 6
When
D 6
.I ed
E 6
I 6
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
E 6
runs out of memory
(at about 8000 lines on any 16 bit mini-computer
such as the PDP-11)
D 14
This full undo is not possible, and
E 14
I 14
this full undo is not possible, and
E 14
D 6
.I u
E 6
I 6
D 12
.Ic u
E 12
I 12
.Cm \&u
E 12
E 6
can only undo the effect of the most recent
substitute on the current line.
This restricted undo also applies to editor scripts
when
D 6
.I ed
E 6
I 6
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
E 6
is invoked with the
D 6
.B -
E 6
I 6
.Fl
E 6
option.
D 6
.TP 5
(1, $)\|v/regular expression/command list
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&1
.Cx \&,
.Ic \&$
.Cx \&)
.Ic \&v
.Ar/regular expression/command list
.Cx
E 12
I 12
.Sm off
.Pp
.It Xo
.Po Ad \&1 , Ns Ad \&$
.Pc Cm \&v Ar "/regular\ expression/" Cm "command\ list"
.Xc
.Sm on
E 12
E 6
This command is the same as the global command
D 6
.I g
E 6
I 6
D 12
.Ic g
E 12
I 12
.Cm \&g
E 12
E 6
except that the command list is executed
D 6
.I g
with `\fB.\fR' initially set to every line
.I except
E 6
I 6
D 12
.Ic g
E 12
I 12
.Cm \&g
E 12
with
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
initially set to every line
.Em except
E 6
those
matching the regular expression.
D 6
.TP 5
(1, $)\|w filename
.br
E 6
I 6
D 12
(1, $)\w filename
.Tp Cx \&(
.Ic \&1
.Cx \&,
.Ic \&$
.Cx \&)
.Ic \&w
.Cx \&\ \&
.Ar filename
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&1 , Ns Ad \&$
.Pc Ns Cm \&w Ar filename
.Xc
E 12
E 6
The write command writes the addressed lines onto
the given file.
If the file does not exist,
it is created.
D 6
The file name is remembered if there was no 
E 6
I 6
The file name is remembered if there was no
E 6
remembered file name already.
If no file name is given,
the remembered file name, if any, is used
(see
D 6
.I e
E 6
I 6
D 12
.Ic e
E 12
I 12
.Cm \&e
E 12
E 6
and
D 6
.I f
commands)\|.
`\fB.\fR' is unchanged.
E 6
I 6
D 12
.Ic f
E 12
I 12
.Cm \&f
E 12
commands).
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
is unchanged.
E 6
If the command is successful, the number of characters written is
printed.
D 6
.TP
(1, $)\|W filename
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&1
.Cx \&,
.Ic \&$
.Cx \&)
.Ic \&W
.Cx \&\ \&
.Ar filename
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&1 , Ns Ad \&$
.Pc Ns Cm \&W Ar filename
.Xc
E 12
E 6
This command is the same as
D 6
.I w,
E 6
I 6
D 12
.Ic w ,
E 12
I 12
.Cm \&w ,
E 12
E 6
except that the addressed lines are appended to the file.
D 6
.TP 5
(1, $)\|wq filename
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&1
.Cx \&,
.Ic \&$
.Cx \&)
.Ic \&wq
.Cx \&\ \&
.Ar filename
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&1 , Ns Ad \&$
.Pc Ns Cm \&wq Ar filename
.Xc
E 12
E 6
This command is the same as
D 6
.I w
E 6
I 6
D 12
.Ic w
E 12
I 12
.Cm \&w
E 12
E 6
except that afterwards a
D 6
.I q
E 6
I 6
D 12
.Ic q
E 12
I 12
.Cm \&q
E 12
E 6
command is done,
exiting the editor
after the file is written.
D 6
.TP 5
D 4
x
E 6
I 6
D 9
D 12
.Tp x
E 12
I 12
.Pp
D 13
D 15
.It \&x
E 12
E 6
A key string is demanded from the standard input.
Later
D 6
.I r, e
E 6
I 6
D 12
.Ic r , e
E 12
I 12
.Cm \&r , \&e
E 12
E 6
and
D 6
.I w
commands will encrypt and decrypt the text 
with this key by the algorithm of 
.IR crypt (1).
E 6
I 6
D 12
.Ic w
E 12
I 12
.Cm \&w
E 12
commands will encrypt and decrypt the text
with this key by the algorithm of
.Xr crypt  1  .
E 6
An explicitly empty key turns off encryption.
E 9
I 5
D 6
.TP 5
E 5
E 4
.RB (\| .\| +1)\|z	or,
.br
.ns
.TP 5
.RB (\| .\| +1)\|z\fIn
E 6
I 6
D 12
.Ic \&1
.Ic \&+1
.Cx \&)
.Ic \&z
.Cx \&\ \ \&or,
.Cx
.Tp Cx \&(
.Ic \&1
.Ic \&+1
.Cx \&)
.Ic \&z
.Ar n
.Cx
E 12
I 12
.Pp
E 15
E 13
.It Xo
.Po Ad \&.+1
.Pc Ns Cm \&z
.No "	or,"
.Xc
.It Xo
.Po Ad \&.+1
.Pc Ns Cm \&z Ns Ar \&n
.Xc
E 12
E 6
This command scrolls through the buffer starting at the addressed line.
22 (or
D 6
.I n,
E 6
I 6
D 12
.Ar n ,
E 12
I 12
.Ar \&n ,
E 12
E 6
if given)
lines are printed.
The last line printed becomes the current line.
The value
D 6
.I n
E 6
I 6
D 12
.Ar n
E 12
I 12
.Ar \&n
E 12
E 6
is sticky, in that it becomes the default for
future
D 6
.I z
E 6
I 6
D 12
.Ic z
E 12
I 12
.Cm \&z
E 12
E 6
commands.
D 6
.TP 5
($)\|=
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&$
.Cx \&)
.Ic \&=
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&$
.Pc Ns Cm \&=
.Xc
E 12
E 6
The line number of the addressed line is typed.
D 6
`\fB.\fR' is unchanged by this command.
.TP 5
!<shell command>
E 6
I 6
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
is unchanged by this command.
D 12
.Tp Cx Ic \&!
.Cx <shell\ command>
.Cx
E 6
The remainder of the line after the `!' is sent
E 12
I 12
.Pp
.It Xo
.Ad \&! Ns Aq shell\ command
.Xc
The remainder of the line after the
.Ql Cm \&!
is sent
E 12
to
D 6
.IR sh (1)
E 6
I 6
D 12
.Xr sh  1
E 12
I 12
.Xr sh 1
E 12
E 6
to be interpreted as a command.
D 6
.RB ` . '
E 6
I 6
D 12
.Cx `
.Ic \&.
.Cx \'
.Cx
E 12
I 12
.Sq Ad \&.
E 12
E 6
is unchanged.
D 6
.TP 5
.RB (\| . +1,\| . +1)\|<newline>
E 6
I 6
D 12
.Tp Cx \&(
.Ic \&.+1
.Cx \&,
.Ic \&.+1
.Cx \&)
.Cx <newline>
.Cx
E 12
I 12
.Pp
.It Xo
.Po Ad \&.+1 , Ns Ad \&.+1
.Pc Ns Aq newline
.Xc
E 12
E 6
An address alone on a line causes the addressed line to be printed.
D 6
A blank line alone is equivalent to `.+1p'; it is useful
E 6
I 6
A blank line alone is equivalent to
D 12
.Ic .+1
E 12
I 12
.Ad .+1
E 12
it is useful
E 6
for stepping through text.
If two addresses are present with no
intervening semicolon,
D 6
.I ed
E 6
I 6
D 12
.Nm ed
E 12
I 12
.Nm \&ed
E 12
E 6
prints the range of lines.
If they are separated by a semicolon,
the second line is printed.
D 6
.PP
If an interrupt signal (ASCII DEL)\| is sent,
.I ed
prints `?interrupted'
E 6
I 6
D 12
.Tp
E 12
I 12
.El
E 12
.Pp
D 12
If an interrupt signal (ASCII DEL) is sent,
.Nm ed
E 12
I 12
If an interrupt signal
.Pq Tn ASCII DEL
is sent,
.Nm \&ed
E 12
prints
.Sq Li ?interrupted
E 6
and returns to its command level.
D 6
.PP
E 6
I 6
.Pp
E 6
Some size limitations:
512 characters per line,
256 characters per global command list,
64 characters per file name,
and, on mini computers,
128K characters in the temporary file.
The limit on the number of lines depends on the amount of core:
each line takes 2 words.
D 6
.PP
E 6
I 6
.Pp
E 6
When reading a file,
D 6
.I ed
E 6
I 6
D 12
.Nm ed
E 6
discards ASCII NUL characters
E 12
I 12
.Nm \&ed
discards
.Tn ASCII NUL
characters
E 12
and all characters after the last newline.
D 12
It refuses to read files containing non-ASCII characters.
E 12
I 12
It refuses to read files containing
.Ns non- Tn ASCII
characters.
E 12
D 6
.SH FILES
/tmp/e*
E 6
I 6
.Sh FILES
D 12
.Dw edhup
.Di L
.Dp Pa /tmp/e*
.Dp Pa edhup
E 12
I 12
.Bl -tag -compact -width "/tmp/ed*"
.It Pa /tmp/e*
.It Pa edhup
E 12
work is saved here if terminal hangs up
D 12
.Dp
E 12
I 12
.El
E 12
.Sh SEE ALSO
D 12
.Xr ex 1 ,
E 12
I 12
.Xr \&ex 1 ,
E 12
.Xr sed 1 ,
.Xr crypt 1
E 6
.br
D 6
edhup: work is saved here if terminal hangs up
.SH "SEE ALSO"
E 6
B. W. Kernighan,
D 6
.I
A Tutorial Introduction to the ED Text Editor
E 6
I 6
.Em A Tutorial Introduction to the ED Text Editor
E 6
.br
B. W. Kernighan,
D 6
.I Advanced editing on UNIX
.br
D 2
sed(1), crypt(1)
E 2
I 2
ex(1), sed(1), crypt(1)
E 2
.SH DIAGNOSTICS
`?name' for inaccessible file;
D 2
`?self-explanitory message'
E 2
I 2
`?self-explanatory message'
E 6
I 6
.Em Ar Advanced editing on UNIX
.Sh HISTORY
The
D 12
.Nm ed
command appeared in Version 6 AT&T UNIX.
E 12
I 12
.Nm \&ed
command appeared in
D 14
.At 6
E 14
I 14
.At v6 .
E 14
E 12
.Sh DIAGNOSTICS
.Sq Li name
for inaccessible file;
.Sq Li ?self-explanatory message
E 6
E 2
for other errors.
D 6
.PP
E 6
I 6
.Pp
E 6
To protect against throwing away valuable work,
a
D 6
.I q
E 6
I 6
D 12
.Ic q
E 12
I 12
.Cm \&q
E 12
E 6
or
D 6
.I e
E 6
I 6
D 12
.Ic e
E 12
I 12
.Cm \&e
E 12
E 6
command is considered to be in error, unless a
D 6
.I w
E 6
I 6
D 12
.Ic w
E 12
I 12
.Cm \&w
E 12
E 6
has occurred since the last buffer change.
A second
D 6
.I q
E 6
I 6
D 12
.Ic q
E 12
I 12
.Cm \&q
E 12
E 6
or
D 6
.I e
E 6
I 6
D 12
.Ic e
E 12
I 12
.Cm \&e
E 12
E 6
will be obeyed regardless.
D 6
.SH BUGS
The 
.I l
command mishandles DEL.
E 6
I 6
.Sh BUGS
The
D 12
.Ic l
E 12
I 12
.Cm \&l
E 12
command mishandles
.Li DEL .
E 6
.br
The
D 6
.I undo
E 6
I 6
D 12
.Ic undo
E 12
I 12
.Cm \&undo
E 12
E 6
command causes marks to be lost on affected lines.
D 4
D 9
.br
D 13
D 15
The
D 6
.I x
E 6
I 6
D 12
.Ic x
E 12
I 12
.Cm \&x
E 12
E 6
command,
D 6
.B -x
E 6
I 6
D 12
.Fl x
E 12
I 12
.Fl \&x
E 12
E 6
option,
and
special treatment of hangups
D 12
only work on UNIX.
E 12
I 12
only work on
E 15
I 15
The special treatment of hangups only works on
E 15
E 13
I 13
The special treatment of hangups only works on
E 13
.Ux .
E 12
E 9
E 4
E 1
