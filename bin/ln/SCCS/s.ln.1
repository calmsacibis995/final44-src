h14325
s 00001/00001/00104
d D 8.2 93/12/30 15:38:50 mckusick 19 18
c copyediting for Usenix manuals
e
s 00002/00002/00103
d D 8.1 93/05/31 17:17:48 bostic 18 17
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/00103
d D 6.14 92/07/27 13:49:04 bostic 17 16
c on second thought, make it symlink(7)
e
s 00001/00134/00104
d D 6.13 92/07/27 13:37:26 bostic 16 15
c give symlink handling its own man page
e
s 00027/00019/00211
d D 6.12 92/07/27 13:30:53 elan 15 14
c integrate Steve McCanne's commets
e
s 00109/00065/00121
d D 6.11 92/06/02 13:19:58 elan 14 13
c Made the symlink handling section much more comprehensive.
e
s 00003/00003/00183
d D 6.10 92/06/01 12:17:18 elan 13 12
c Added new sym-link following conventions section.
e
s 00100/00018/00086
d D 6.9 92/05/27 18:28:15 elan 12 11
c Revised sym-link followng rules section.
e
s 00007/00007/00097
d D 6.8 91/07/27 20:13:00 cael 11 10
c mdoc version three
e
s 00003/00001/00101
d D 6.7 91/06/27 17:19:17 bostic 10 9
c add POSIX/IEEE contribution notice
e
s 00002/00000/00100
d D 6.6 91/03/14 00:20:31 cael 9 7
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00001/00000/00100
d R 6.6 91/03/13 20:34:37 cael 8 7
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00020/00015/00080
d D 6.5 90/07/24 22:47:20 cael 7 6
c .Xr botch fix
e
s 00065/00051/00030
d D 6.4 90/06/24 19:08:30 cael 6 5
c converted man page
e
s 00003/00002/00078
d D 6.3 86/11/26 12:18:44 bostic 5 4
c documented (slightly) the directory linking capability 
c of ln
e
s 00012/00007/00068
d D 6.2 86/04/10 19:06:20 mckusick 4 3
c clarifications from sechrest
e
s 00001/00001/00074
d D 6.1 85/04/29 14:31:20 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00036/00013/00039
d D 5.1 85/04/29 14:31:07 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00052/00000/00000
d D 4.1 85/04/29 14:30:58 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 18
.\" Copyright (c) 1980, 1990 The Regents of the University of California.
.\" All rights reserved.
E 18
I 18
.\" Copyright (c) 1980, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 18
E 6
.\"
I 10
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
E 10
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
D 11
.\" %sccs.include.redist.man%
E 11
I 11
.\" %sccs.include.redist.roff%
E 11
E 6
.\"
D 2
.TH LN 1 11/16/79
E 2
I 2
D 3
.TH LN 1 "17 March 1982"
E 3
I 3
D 6
.TH LN 1 "%Q%"
E 3
E 2
.UC 4
.SH NAME
ln \- make links
.SH SYNOPSIS
.B ln
I 2
[
.B \-s
]
E 2
D 4
name1 [ name2 ]
E 4
I 4
sourcename [ targetname ]
E 4
.br
.B ln
D 4
name ... directory
E 4
I 4
[
.B \-s
]
sourcename1 sourcename2 [ sourcename3 ... ] targetdirectory
E 4
.SH DESCRIPTION
A link is a directory entry referring
to a file; the same file (together with
its size, all its protection
information, etc.)
may have several links to it.
E 6
I 6
D 11
.\"     %W% (Berkeley) %G%
E 11
I 11
.\"	%W% (Berkeley) %G%
E 11
.\"
I 9
D 10
.Vx
E 10
D 11
.Vx
E 11
E 9
.Dd %Q%
.Dt LN 1
.Os BSD 4
.Sh NAME
.Nm ln
.Nd make links
.Sh SYNOPSIS
.Nm ln
D 7
.Op Fl s Ar source_file
.Op  target_file
E 7
I 7
D 12
.Op Fl s
E 12
I 12
.Op Fl fs
E 12
.Ar source_file
.Op target_file
E 7
.Nm ln
D 12
.Op Fl s
E 12
I 12
.Op Fl fs
E 12
D 7
.Ar source_file ... target_dir
E 7
I 7
.Ar source_file ...
.Op target_dir
E 7
.Sh DESCRIPTION
The
.Nm ln
D 12
utility creates a new
D 7
directory entry (a link)
for a file which
inherits the same modes.
The entry behaves in most cases as if it were the
original file.
It is useful for keeping groups of files together
in directories, but with out multiple copies of the same file.
E 6
D 2
There is no way to distinguish a link to a file
from its original directory entry;
any changes in the
file are effective
independently of the name by which the file is known.
E 2
I 2
There are two kinds of links: hard links and symbolic links.
E 7
I 7
directory entry (linked file)
which inherits the same modes as the orginal
file.
It is useful for maintaining multiple copies of a file in
many places at once - without the `copies'; instead,
a link `points' to the original copy.
E 12
I 12
utility creates a new directory entry (linked file) which has the
D 19
same modes as the orginal file.
E 19
I 19
same modes as the original file.
E 19
It is useful for maintaining multiple copies of a file in many places
at once without using up storage for the
.Dq copies ;
instead, a link
.Dq points
to the original copy.
E 12
There are two types of links; hard links and symbolic links.
D 12
How a link `points' to a file is one of the differences
between a hard or symbolic link.
E 12
I 12
How a link
.Dq points
to a file is one of the differences between a hard or symbolic link.
E 12
E 7
E 2
D 6
.PP
E 6
I 6
.Pp
I 7
D 12
Option available:
E 12
I 12
The options are as follows:
E 12
D 11
.Tw Ds
.Tp Fl s
E 11
I 11
.Bl -tag -width flag
I 12
.It Fl f
Unlink any already existing file, permitting the link to occur.
E 12
.It Fl s
E 11
Create a symbolic link.
D 11
.Tp
E 11
I 11
.El
E 11
.Pp
E 7
E 6
I 2
By default
D 6
.I ln
makes hard links.
E 6
I 6
.Nm ln
makes
.Em hard
links.
E 6
D 12
A hard link to a file is indistinguishable from the
original directory entry; any changes to a
file are effective independent of the name used
D 5
to reference the file.
Hard links may not span file systems and may not refer to directories.
E 5
I 5
to reference the file.  Hard links may not refer to directories
(unless the proper incantations are supplied) and may not span
file systems.
E 12
I 12
A hard link to a file is indistinguishable from the original directory entry;
any changes to a file are effective independent of the name used to reference
the file.
Hard links may not normally refer to directories and may not span file systems.
E 12
E 5
D 6
.PP
The
.B \-s
option causes
.I ln
to create symbolic links.
E 6
I 6
.Pp
D 7
Options:
.Tp Fl s
Create symbolic links.
E 7
E 6
A symbolic link contains the name of the file to
which it is linked.  The referenced file is used when an
D 6
.IR open (2)
E 6
I 6
.Xr open  2
E 6
operation is performed on the link.
A
D 6
.IR stat (2)
E 6
I 6
.Xr stat  2
E 6
on a symbolic link will return the linked-to file; an
D 6
.IR lstat (2)
E 6
I 6
.Xr lstat  2
E 6
must be done to obtain information about the link.
The
D 6
.IR readlink (2)
E 6
I 6
.Xr readlink  2
E 6
call may be used to read the contents of a symbolic link.
Symbolic links may span file systems and may refer to directories.
D 6
.PP
E 6
I 6
D 7
.Tp
E 7
.Pp
E 6
E 2
Given one or two arguments,
D 6
.I ln
E 6
I 6
.Nm ln
E 6
creates a link to an existing file
D 4
.IR name1 .
E 4
I 4
D 6
.IR sourcename .
E 6
I 6
.Ar source_file  .
E 6
E 4
If
D 4
.I name2
E 4
I 4
D 6
.I targetname
E 6
I 6
.Ar target_file
E 6
E 4
is given, the link has that name;
D 4
.I name2
E 4
I 4
D 6
.I targetname
E 6
I 6
.Ar target_file
E 6
E 4
may also be a directory in which to place the link;
otherwise it is placed in the current directory.
D 2
If only the directory is specified, the link will be made with
its name the same as the last component
of
E 2
I 2
If only the directory is specified, the link will be made
to the last component of
E 2
D 4
.IR name1 .
E 4
I 4
D 6
.IR sourcename .
E 4
.PP
E 6
I 6
.Ar source_file  .
.Pp
E 6
Given more than two arguments,
D 6
.I ln
D 4
makes links to all the named files in the named directory.
E 4
I 4
makes links in 
.I targetdirectory
E 6
I 6
.Nm ln
makes links in
.Ar target_dir
E 6
to all the named source files.
E 4
The links made will have the same name as the files being linked to.
I 12
D 14
.Sh SYMBOLIC LINK FOLLOWING
Many file system traversal utilities and system calls
have the option of traversing the file system in a physical traversal, i.e., 
treating a symbolic link as a link rather than its target, or in a logical
traversal, i.e., following the symbolic link whenever one is encountered.
The following rules summarize the conventions of symbolic link following in 
utilities and system calls.
E 14
I 14
D 16
.Sh SYMBOLIC LINK HANDLING
D 15
There are two issues involved in symbolic link handling.
The first issue is whether or not the utility or system call operates
on the symbolic link itself or if it operates on the object to which
the symbolic link refers.
The following rules summarize the conventions of symbolic link handling
in the system.
Operating on the object referenced by the symbolic link or indirecting
through symbolic links to directories is termed ``following'' the link.
E 15
E 14
.Pp
I 15
Due to the fact that a symbolic link and its referenced object coexist 
in the file system
name space, confusion can arise in distinguishing between the link itself
and the referenced object.  Traditionally, utilities and system calls
have adopted their own link following conventions in an ad-hoc fashion.
Rules for more a uniform approach are outlined here.
.Pp
Symbolic links are handled either by operating on the link itself, or by
operating on the object referenced by the link.  In the latter case,
an application or system call is said to ``follow'' the link.  Symbolic
links may reference other symbolic links, in which case links are
dereferenced until an atomic object is found.  Cycles are avoided by
placing an upper limit on the number of links that may be followed.
An error results if this limit is exceeded.
.Pp
There are three domains for which symbolic link policy is established:
system calls that take file name arguments,
utilities that take file name arguments, and
utilities that traverse file hierarchies.
.Pp
E 15
D 14
The only system calls that operate on symbolic links are 
.Xr unlink 2 ,
.Xr rename 2 ,
E 14
I 14
The system calls that do not follow symbolic links are
E 14
.Xr lstat 2 ,
I 14
.Xr readlink 2 ,
.Xr rename 2 ,
E 14
and
D 14
.Xr readlink 2 .
D 13
All other system calls follow the symbolic link and operate on the object to
E 13
I 13
All other system calls follow the symbolic link and operate on the object
E 13
which the link points to.
E 14
I 14
.Xr unlink 2 .
All other system calls follow the symbolic link.
E 14
.Pp
D 14
Utilities that do not recurse over trees always
follow symbolic links on the command line.  The rest of the utilities
D 13
.Xr (chown 1 ,
E 13
I 13
.Xr (chown 8 ,
E 13
.Xr chmod 1 ,
.Xr chgrp 1 ,
E 14
I 14
The utilities that do not follow symbolic links are
.Xr mv 1
and
.Xr rm 1 .
For compatibility with historic systems, the 
D 15
.Xr ls
E 15
I 15
.Xr ls 1
E 15
utility follows symbolic links listed on the command line, unless the
.Fl F ,
.Fl d
or
.Fl l 
options are specified.
However, if the
.Fl L
option is specified,
D 15
.Xr ls
E 15
I 15
.Xr ls 1
E 15
always follows symbolic links.
All other utilities follow symbolic links.
.Pp
D 15
The second issue in symbolic link handling is traversal of a file hierarchy.
There are two ways for file hierarchy oriented utilities to traverse a
file hierarchy.
The first is a physical traversal, where the utility does not indirect
through symbolic links to directories.
The second is a logical traversal, where the utility does indirect
through symbolic links to directories.
E 15
I 15
Another issue in symbolic link handling is traversal of a file hierarchy.
File hierarchies can be traversed either ``logically'', by following
symbolic links that point to directories, or ``physically'', by not
following such links.  
E 15
.Pp
D 15
The utilities that work with file hierarchies, either optionally or by
default, are
E 15
I 15
The following utilities can perform traversals:
E 15
E 14
.Xr chflags 1 ,
I 14
.Xr chgrp 1 ,
.Xr chmod 1 ,
.Xr chown 8 ,
E 14
.Xr cp 1 ,
.Xr du 1 ,
.Xr find 1 ,
I 14
.Xr ls 1 ,
.Xr rm 1
E 14
and
D 14
.Xr tar 1 )
treat symbolic links in three distinct ways.  The first option, the default,
is to never follow any symbolic link.  The second, specified by the
E 14
I 14
.Xr tar 1 .
All of these utilities, except for
.Xr cp ,
.Xr ls
and
.Xr rm ,
operate according to the following rules.
.Pp
By default, these utilities do a physical traversal, never following any
symbolic links.
If the
E 14
.Fl H 
D 14
flag, causes the utility to follow symbolic links only on the command line
but not in the tree of traversal (if recursive).  The third option, specified
by the 
E 14
I 14
option is specified, the utility will follow symbolic links specified
on the command line.
If the
E 14
.Fl h
D 14
flag, causes the utility to follow any symbolic link encountered on the command
line and in the tree of traversal (if recursive).
.Pp
The purpose of the 
E 14
I 14
option is specified, the utilities do a logical traversal, following all
symbolic links whether specified on the command line or encountered while
descending the file hierarchy.
The
E 14
.Fl H
D 14
flag is to make the command line name space look like the logical name space,
i.e., make all names on the command line appear as hard links, whereas the
purpose of the
E 14
I 14
flag is intended to make the command line name space look like the logical
name space and the
E 14
.Fl h
D 14
flag is to make the entire hierarchy look like the logical name space. i.e., 
make all names in the hierarchy appear as hard links.
E 14
I 14
flag is intended to make the entire hierarchy look like the logical name
space.
E 14
.Pp
D 14
Exceptions to these rules are the behaviors of 
.Xr rm  1 ,
.Xr mv 1 ,
E 14
I 14
The utilities
.Xr cp , 
.Xr ls
E 14
and
D 14
.Xr ls  1 .
E 14
I 14
.Xr rm
are exceptions to these rules.
E 14
.Pp
D 14
.Xr Rm 1 
and
.Xr mv 1
operate on the name, not the object it points to, and therefore always operate
on the symbolic link itself and do not follow it.
E 14
I 14
To maintain compatibility with historic systems,
.Xr cp
always follows symbolic links on the command line.
The 
.Fl H
and 
.Fl h
options have the effects described above only when the
.Fl R 
flag is specified.
E 14
.Pp
D 14
For historical reasons,
.Xr ls 1
follows symbolic links in the entire hierarchy (including command line)
only when the 
E 14
I 14
.Xr Rm
operates on the name, not the object it points to, and therefore never
follows a symbolic link.
The
.Xr rm
utility does not support the
.Fl H
or
.Fl h
options.
.Pp
To maintain compatibility with historic systems, the
.Xr ls
utility follows all symbolic links in the file hierarchy, including ones
listed on the command line, only when the 
E 14
.Fl L 
D 14
option is specified, and follows only on the command line only 
when neither of the 
.Fl F, d, 
or 
.Fl l
options are specified. In all other cases, 
.Xr ls 1 
does not follow symbolic links.
E 14
I 14
option is specified.
The
.Xr ls
utility does not support the
.Fl H
or
.Fl h
options.
E 16
E 14
E 12
D 2
.PP
It is forbidden to link to a directory
or to link across file systems.
E 2
D 6
.SH "SEE ALSO"
D 2
rm(1), cp(1), mv(1)
E 2
I 2
rm(1), cp(1), mv(1), link(2), readlink(2), stat(2), symlink(2)
E 6
I 6
.Sh SEE ALSO
I 16
D 17
.Xr symlink 1 ,
E 17
E 16
D 14
.Xr rm 1 ,
.Xr cp 1 ,
.Xr mv 1 ,
I 12
.Xr ls 1 ,
.Xr tar 1 ,
D 13
.Xr chown 1 ,
E 13
I 13
.Xr chown 8 ,
E 13
.Xr chmod 1 ,
.Xr chgrp 1 ,
.Xr chflags 1 ,
.Xr du 1 ,
.Xr find 1 ,
E 14
E 12
.Xr link 2 ,
I 14
.Xr lstat 2 ,
E 14
.Xr readlink 2 ,
.Xr stat 2 ,
D 17
.Xr symlink 2
E 17
I 17
.Xr symlink 2 ,
.Xr symlink 7
E 17
.Sh HISTORY
A
.Nm ln
D 11
command appeared in Version 6 AT&T Unix.
E 11
I 11
command appeared in
.At v6 .
E 11
E 6
E 2
E 1
