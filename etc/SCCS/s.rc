h03754
s 00008/00007/00163
d D 8.2 94/03/17 06:04:54 bostic 37 36
c make some error messages clearer
c From: "Chris G. Demetriou" <cgd@vangogh.CS.Berkeley.EDU>
e
s 00000/00000/00170
d D 8.1 93/06/10 17:40:47 bostic 36 35
c 4.4BSD snapshot (revision 8.1)
e
s 00001/00002/00169
d D 5.33 93/06/10 17:40:38 bostic 35 33
c fix amd
e
s 00000/00000/00171
d R 8.1 93/06/09 12:55:34 bostic 34 33
c 4.4BSD snapshot (revision 8.1)
e
s 00008/00001/00163
d D 5.32 92/07/15 14:11:27 bostic 33 32
c add amd, fix nfsd
e
s 00001/00001/00163
d D 5.31 92/04/24 14:43:22 bostic 32 31
c kvm_mkdb defaults to /vmunix
e
s 00004/00003/00160
d D 5.30 92/04/07 16:02:29 bostic 31 30
c don't visit a directory after removing it; bug report net2/etc/0
e
s 00001/00001/00162
d D 5.29 92/02/24 11:01:20 mckusick 30 29
c new nfsd syntax
e
s 00001/00001/00162
d D 5.28 92/02/24 11:00:41 karels 29 28
c install utmp in rc script
e
s 00005/00003/00158
d D 5.27 91/06/05 09:43:25 karels 28 27
c I liked the savecore echo (it explained the delay and funny messages);
c start inetd last; enable ^T for debugging hangs.
e
s 00001/00000/00160
d D 5.26 91/05/09 16:45:24 karels 27 26
c for now, need to ignore QUIT during fsck
e
s 00000/00001/00160
d D 5.25 91/04/08 08:28:10 bostic 26 24
c savecore will print out core message
e
s 00002/00002/00159
d R 5.25 91/03/15 12:18:29 bostic 25 24
c remove editor temps regardless of expreserve succeeding
e
s 00001/00002/00160
d D 5.24 91/02/12 22:03:33 bostic 24 23
c build dev database with dev_mkdb instead of a script
e
s 00004/00002/00158
d D 5.23 91/01/31 21:38:27 bostic 23 22
c add /dev database fro ps
e
s 00002/00002/00158
d D 5.22 91/01/02 09:27:58 karels 22 21
c watch out for funny filenames
e
s 00012/00012/00148
d D 5.21 90/12/29 18:22:47 karels 21 20
c don't remove the world if /tmp doesn't exist; don't remove editor
c temps unless expreserve succeeds; mount nfs stuff as early as possible,
c in case stuff is remote (but there's still a race)
e
s 00006/00003/00154
d D 5.20 90/08/07 20:28:14 karels 20 19
c gated config
e
s 00001/00002/00156
d D 5.19 90/06/30 23:15:33 karels 19 18
c format glitch
e
s 00007/00005/00151
d D 5.18 90/06/30 22:56:59 karels 18 17
c keep down the noise now that all the error messages print
e
s 00045/00037/00111
d D 5.17 90/06/30 21:22:26 bostic 17 16
c update for June tape
e
s 00014/00003/00134
d D 5.16 90/06/30 15:21:08 karels 16 15
c shell shouldn't die on SIGINT; quit rc on SIGQUIT; add comments
e
s 00001/00001/00136
d D 5.15 90/06/04 21:37:16 mckusick 15 14
c quotacheck no longer takes -p
e
s 00001/00001/00136
d D 5.14 90/05/31 12:16:50 karels 14 13
c ": > foo" doesn't work in current sh!
e
s 00003/00002/00134
d D 5.13 90/04/06 13:31:37 karels 13 12
c rm /fastboot after making root writable; redirect "echo" to console
e
s 00001/00000/00135
d D 5.12 90/03/23 11:43:25 karels 12 11
c remove leftover ex temporaries
e
s 00002/00002/00133
d D 5.11 90/03/07 14:53:45 marc 11 10
c ps -U -> kvm_mkdb
e
s 00016/00005/00119
d D 5.10 90/02/28 16:54:45 karels 10 9
c nfs, move timed before most other daemons
e
s 00001/00001/00123
d D 5.9 90/01/23 11:29:41 sklower 9 8
c editor temporaries now kept in /var/tmp
e
s 00001/00001/00123
d D 5.8 89/10/26 22:01:22 bostic 8 7
c quotaon should point at the console, too.
e
s 00011/00011/00113
d D 5.7 89/09/05 15:41:25 bostic 7 6
c move syslog after file removal; don't touch mtab, it's gone
e
s 00016/00016/00108
d D 5.6 89/08/28 16:14:17 bostic 6 5
c rearrange so savecore is sooner, "ps -U" is after /var/run removal
e
s 00015/00008/00109
d D 5.5 89/08/26 20:12:59 karels 5 4
c more robust if reboot fails after fixing root; faster preen of /tmp;
c log existence of /etc/ptmp
e
s 00025/00029/00092
d D 5.4 89/08/15 09:49:13 karels 4 3
c *really* reorg, and sync with what's actually in use
e
s 00012/00004/00108
d D 5.3 89/04/17 22:21:30 bostic 3 2
c reorg, minor cleanups
e
s 00004/00014/00108
d D 5.2 89/04/12 12:19:37 bostic 2 1
c don't attempt to recover the password file!
e
s 00122/00000/00000
d D 5.1 89/04/11 17:19:38 bostic 1 0
c date and time created 89/04/11 17:19:38 by bostic
e
u
U
t
T
I 3
D 17
#
E 17
#	%W% (Berkeley) %G%
D 17
#
E 17

I 16
# System startup script run by init on autoboot
# or after single-user.
# Output and error are redirected to console by init,
# and the console is the controlling terminal.

I 28
stty status '^T'

E 28
# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user after fsck.
trap : 2
I 27
D 28
trap : 3
E 28
I 28
trap : 3	# shouldn't be needed
E 28
E 27

E 16
E 3
I 1
HOME=/; export HOME
D 2
PATH=/etc:/bin:/usr/ucb:/usr/bin; export PATH
E 2
I 2
D 3
PATH=/bin:/sbin:/usr/sbin:/usr/bin
E 3
I 3
D 4
PATH=/bin:/sbin:/usr/sbin:/usr/bin:/usr/ucb
E 4
I 4
PATH=/sbin:/bin:/usr/sbin:/usr/bin
E 4
E 3
export PATH
E 2

if [ -r /fastboot ]
then
D 16
	rm -f /fastboot
E 16
D 17
	echo Fast boot ... skipping disk checks >/dev/console
E 17
I 17
D 37
	echo Fast boot ... skipping disk checks
E 37
I 37
	echo "Fast boot: skipping disk checks."
E 37
E 17
elif [ $1x = autobootx ]
then
D 17
	echo Automatic reboot in progress... 		>/dev/console
D 4
	date						>/dev/console
E 4
	fsck -p						>/dev/console 2>&1
E 17
I 17
D 37
	echo Automatic reboot in progress...
E 37
I 37
	echo "Automatic boot in progress: starting file system checks."
E 37
	fsck -p
E 17
	case $? in
	0)
D 4
		date >/dev/console
E 4
		;;
	2)
		exit 1
		;;
	4)
I 37
		echo "Rebooting..."
E 37
D 16
		reboot -n
I 5
		echo "reboot -n failed... help!" >/dev/console
E 16
I 16
		reboot
D 17
		echo "reboot failed... help!" >/dev/console
E 17
I 17
D 37
		echo "reboot failed... help!"
E 37
I 37
		echo "Reboot failed; help!"
E 37
E 17
E 16
		exit 1
E 5
		;;
	8)
D 5
		echo "Automatic reboot failed... help!" >/dev/console
E 5
I 5
D 17
		echo "Automatic file system check failed... help!" >/dev/console
E 17
I 17
D 37
		echo "Automatic file system check failed... help!"
E 37
I 37
		echo "Automatic file system check failed; help!"
E 37
E 17
E 5
		exit 1
		;;
	12)
D 17
		echo "Reboot interrupted" >/dev/console
E 17
I 17
D 37
		echo "Reboot interrupted"
E 37
I 37
		echo "Boot interrupted."
E 37
E 17
		exit 1
		;;
I 5
	130)
		# interrupt before catcher installed
		exit 1
		;;
E 5
	*)
D 17
		echo "Unknown error in reboot" > /dev/console
E 17
I 17
D 37
		echo "Unknown error in reboot"
E 37
I 37
		echo "Unknown error; help!"
E 37
E 17
		exit 1
		;;
	esac
D 4
else
	date >/dev/console
E 4
fi

I 16
D 37
trap "echo 'Reboot interrupted'; exit 1" 3
E 37
I 37
trap "echo 'Boot interrupted.'; exit 1" 3
E 37

E 16
D 3
# attempt to rationally recover the passwd file if needed
E 3
I 3
D 5
# check the password file
E 3
D 2
if [ -s /etc/ptmp ]
E 2
I 2
if [ -f /etc/ptmp ]
E 2
then
D 2
	if [ -s /etc/passwd ]
	then
		ls -l /etc/passwd /etc/ptmp >/dev/console
		rm -f /etc/ptmp		# should really remove the shorter
	else
		echo 'passwd file recovered from ptmp' >/dev/console
		mv /etc/ptmp /etc/passwd
	fi
elif [ -r /etc/ptmp ]
then
	echo 'removing passwd lock file' >/dev/console
	rm -f /etc/ptmp
E 2
I 2
D 3
	echo 'password file may be incorrect' > /dev/console
E 3
I 3
D 4
	echo '/etc/ptmp -- password file may be incorrect' > /dev/console
E 4
I 4
	echo 'password file may be incorrect -- /etc/ptmp exists' \
	    > /dev/console
E 4
E 3
E 2
fi

E 5
D 7
umount -a
: >/etc/mtab
E 7
D 17
swapon -a						>/dev/console 2>&1
E 17
I 17
swapon -a
E 17
I 7

D 18
umount -a
E 18
I 18
umount -a >/dev/null 2>&1
E 18
E 7
D 10
mount -a						>/dev/console 2>&1
E 10
I 10
D 17
mount -a -t nonfs					>/dev/console 2>&1
E 17
I 17
mount -a -t nonfs
E 17
I 13
D 21
rm -f /fastboot		# XXX
E 21
I 21
rm -f /fastboot		# XXX (root now writeable)
E 21
E 13
E 10

I 7
D 21
# clean up left-over files
rm -f /etc/nologin
D 10
rm -f /usr/spool/uucp/LCK.*
rm -f /usr/spool/uucp/STST/*
(cd /var/run; rm -rf *)
E 10
I 10
rm -f /var/spool/uucp/LCK.*
rm -f /var/spool/uucp/STST/*
D 14
(cd /var/run; rm -rf *; : > utmp)
E 14
I 14
(cd /var/run; rm -rf *; cp /dev/null utmp; chmod 644 utmp)
E 14
E 10

E 21
E 7
D 6
			echo -n 'checking quotas:'	>/dev/console
quotacheck -a -p					>/dev/console 2>&1
			echo ' done.'			>/dev/console
quotaon -a

I 3
# build ps data base
E 3
ps -U							>/dev/console 2>&1
I 3

# clean up left-over files
E 3
rm -f /etc/nologin
rm -f /usr/spool/uucp/LCK.*
rm -f /usr/spool/uucp/STST/*
I 4
(cd /var/run; rm -rf *)
E 4
I 3

E 3
chmod 666 /dev/tty[pqrs]*

E 6
# set hostname, turn on network
I 18
D 19
echo -n 'starting network'
E 19
I 19
echo 'starting network'
E 19
E 18
. /etc/netstart
I 18
D 19
echo '.'
E 19
E 18

D 4
			echo 'starting system logger'	>/dev/console
E 4
I 4
D 7
echo 'starting system logger'	>/dev/console
E 7
I 7
D 10
echo 'starting system logger'				>/dev/console
E 10
I 10
D 18
mount -a -t nfs &	# XXX shouldn't need background
E 18
I 18
mount -a -t nfs >/dev/null 2>&1 &	# XXX shouldn't need background
E 18

I 21
# clean up left-over files
rm -f /etc/nologin
rm -f /var/spool/uucp/LCK.*
rm -f /var/spool/uucp/STST/*
D 22
(cd /var/run && { rm -rf *; cp /dev/null utmp; chmod 644 utmp; })
E 22
I 22
D 29
(cd /var/run && { rm -rf -- *; cp /dev/null utmp; chmod 644 utmp; })
E 29
I 29
(cd /var/run && { rm -rf -- *; install -c -m 664 -g utmp /dev/null utmp; })
E 29
E 22

E 21
D 13
echo -n 'starting system logger'				>/dev/console
E 13
I 13
D 17
echo -n 'starting system logger'			>/dev/console
E 17
I 17
echo -n 'starting system logger'
E 17
E 13
E 10
E 7
E 4
rm -f /dev/log
syslogd

I 10
# $timedflags is imported from /etc/netstart;
# if $timedflags == NO, timed isn't run.
if [ X${timedflags} != X"NO" ]; then
D 17
    echo -n ', time daemon'	>/dev/console;	timed $timedflags
E 17
I 17
	echo -n ', time daemon'; timed $timedflags
E 17
fi
D 13
echo ""
E 13
I 13
D 17
echo    '.'						>/dev/console
E 17
I 17
echo '.'
E 17
E 13

E 10
D 4
# /var/crash should be a symbolic link to the crash directory
# if core dumps are to be saved.
E 4
I 4
# /var/crash should be a directory or a symbolic link
# to the crash directory if core dumps are to be saved.
E 4
if [ -d /var/crash ]; then
I 28
	echo checking for core dump...
E 28
D 4
	echo		'checking for core dump... '	>/dev/console
	savecore /var/crash				>/dev/console 2>&1
E 4
I 4
D 7
	echo 'checking for core dump... '	>/dev/console
 	savecore /var/crash			>/dev/console 2>&1
E 7
I 7
D 17
	echo 'checking for core dump... '		>/dev/console
 	savecore /var/crash				>/dev/console 2>&1
E 17
I 17
D 26
				echo 'checking for core dump... '
E 26
	savecore /var/crash
E 17
E 7
E 4
fi
I 6
D 7

# clean up left-over files
rm -f /etc/nologin
rm -f /usr/spool/uucp/LCK.*
rm -f /usr/spool/uucp/STST/*
(cd /var/run; rm -rf *)
E 7

D 17
			echo -n 'checking quotas:'	>/dev/console
D 15
quotacheck -a -p					>/dev/console 2>&1
E 15
I 15
quotacheck -a						>/dev/console 2>&1
E 15
			echo ' done.'			>/dev/console
D 8
quotaon -a
E 8
I 8
quotaon -a						>/dev/console 2>&1
E 17
I 17
				echo -n 'checking quotas:'
quotacheck -a
				echo ' done.'
quotaon -a
E 17
E 8

D 11
# build ps data base
ps -U							>/dev/console 2>&1
E 11
I 11
D 23
# build kvm database
D 17
kvm_mkdb						>/dev/console 2>&1
E 17
I 17
kvm_mkdb
E 23
I 23
# build ps databases
D 32
kvm_mkdb /vmunix
E 32
I 32
kvm_mkdb
E 32
D 24
ls -l /dev | awk '/^[bc]/ { print substr($1, 1, 1), $4, $5, $9 }' > \
	/var/run/devdatabase
E 24
I 24
dev_mkdb
E 24
E 23
E 17
E 11

chmod 666 /dev/tty[pqrs]*
E 6

I 5
# check the password temp/lock file
if [ -f /etc/ptmp ]
then
	logger -s -p auth.err \
D 17
	'password file may be incorrect -- /etc/ptmp exists' >/dev/console 2>&1
E 17
I 17
	'password file may be incorrect -- /etc/ptmp exists'
E 17
fi

E 5
D 4
			echo preserving editor files 	>/dev/console
(cd /tmp; /usr/lib/ex3.7preserve -a)
			echo clearing /tmp 		>/dev/console
E 4
I 4
D 17
echo preserving editor files  >/dev/console
E 17
I 17
echo preserving editor files
E 17
D 9
(cd /tmp; /usr/libexec/ex3.7preserve -a)
E 9
I 9
D 21
(cd /var/tmp; /usr/libexec/ex3.7preserve -a)
I 12
D 18
(cd /var/tmp; rm Ex[0-9][0-9][0-9][0-9][0-9] Rx[0-9][0-9][0-9][0-9][0-9])
E 18
I 18
(cd /var/tmp; rm -f Ex[0-9][0-9][0-9][0-9][0-9] Rx[0-9][0-9][0-9][0-9][0-9])
E 21
I 21
(cd /var/tmp && /usr/libexec/ex3.7preserve -a &&
     rm -f Ex[0-9][0-9][0-9][0-9][0-9] Rx[0-9][0-9][0-9][0-9][0-9])
E 21
E 18
E 12
I 10

E 10
E 9
D 17
echo clearing /tmp 	>/dev/console
E 17
I 17
echo clearing /tmp

E 17
I 10
D 31
# prune quickly with one rm, then use find to clean up /tmp/[lq]*
I 16
# (not needed with mfs /tmp, but doesn't hurt there...)
E 31
I 31
# Prune quickly with one rm, then use find to clean up /tmp/[lq]* (this
# is not needed with mfs /tmp, but doesn't hurt anything).
E 31
E 16
E 10
I 5
D 21
(cd /tmp; rm -rf [a-km-pr-zA-Z]* )
E 5
E 4
D 18
(cd /tmp; find . ! -name . ! -name lost+found ! -name quotas -exec rm -r {} \; )
E 18
I 18
(cd /tmp; find . ! -name . ! -name lost+found ! -name quotas -exec rm -rf {} \;)
E 21
I 21
(cd /tmp && rm -rf [a-km-pr-zA-Z]* &&
D 22
    find . ! -name . ! -name lost+found ! -name quotas -exec rm -rf {} \;)
E 22
I 22
D 31
    find . ! -name . ! -name lost+found ! -name quotas -exec rm -rf -- {} \;)
E 31
I 31
    find . ! -name . ! -name lost+found ! -name quotas -type d -prune \
	-exec rm -rf -- {} \;)
E 31
E 22
E 21
E 18
I 3
D 4
			echo clearing /var/run
(cd /var/run; rm -rf *)
E 4
E 3

D 4
			echo -n standard daemons:	>/dev/console
update;			echo -n ' update'		>/dev/console
cron;			echo -n ' cron'			>/dev/console
accton /usr/adm/acct;	echo -n ' accounting'		>/dev/console
			echo '.'			>/dev/console
E 4
I 4
D 17
echo -n standard daemons: >/dev/console
echo -n ' update'	>/dev/console;	update
echo -n ' cron'		>/dev/console;	cron
echo -n ' accounting'	>/dev/console;	accton /var/account/acct
echo    '.'		>/dev/console
E 17
I 17
echo 'turning on accounting';	accton /var/account/acct
E 17
E 4

D 4
echo -n starting network daemons:			>/dev/console
E 4
I 4
D 17
echo -n starting network daemons: >/dev/console
E 17
I 17
echo -n standard daemons:
echo -n ' update';		update
echo -n ' cron';		cron
echo '.'
E 17
E 4

I 17
echo -n starting network daemons:

E 17
D 20
# $routedflags is imported from /etc/netstart;
# if $routedflags == NO, routed isn't run.
if [ X${routedflags} != X"NO" ]; then
E 20
I 20
# $gated and $routedflags are imported from /etc/netstart.
# If $gated == YES, gated is used; otherwise routed.
# If $routedflags == NO, routed isn't run.
if [ X${gated} = X"YES" -a -r /etc/gated.conf ]; then
D 21
	echo -n ' gated';	gated $gateedflags
E 21
I 21
	echo -n ' gated';	gated $gatedflags
E 21
elif [ X${routedflags} != X"NO" ]; then
E 20
D 4
	routed $routedflags; echo -n ' routed'		>/dev/console
E 4
I 4
D 17
    echo -n ' routed'	>/dev/console; routed $routedflags
E 17
I 17
	echo -n ' routed';	routed $routedflags
E 17
E 4
fi

D 4
{ echo -n ' named'; named; }				>/dev/console
inetd;			echo -n ' inetd'		>/dev/console
E 4
I 4
D 17
echo -n ' named'	>/dev/console;	named >/dev/console 2>&1
echo -n ' inetd'	>/dev/console;	inetd
E 17
I 17
echo -n ' named';		named
D 28
echo -n ' inetd';		inetd
E 28
E 17
E 4

# $rwhod is imported from /etc/netstart;
# if $rwhod is set to something other than NO, rwhod is run.
if [ ${rwhod-NO} != "NO" ]; then
D 4
	rwhod;		echo -n ' rwhod'		>/dev/console
E 4
I 4
D 17
    echo -n ' rwhod'	>/dev/console;	rwhod
E 17
I 17
	echo -n ' rwhod';	rwhod
E 17
E 4
fi

D 3
rm -f /dev/printer
E 3
D 4
/usr/lib/lpd;		echo -n ' printer'		>/dev/console
			echo '.'			>/dev/console
E 4
I 4
D 17
echo -n ' printer'	>/dev/console;	lpd
echo    '.'		>/dev/console
E 17
I 17
echo -n ' printer';		lpd
E 17
E 4

I 17
D 18
echo -n ' portmap';		portmap &
E 18
I 18
echo -n ' portmap';		portmap
E 18
echo -n ' mountd';		mountd
D 30
echo -n ' nfsd';		nfsd -u 0,0,4 -t 0,0
E 30
I 30
D 33
echo -n ' nfsd';		nfsd -u -t
E 33
I 33
echo -n ' nfsd';		nfsd -u -t 6
E 33
E 30
echo -n ' nfsiod';		nfsiod 4

echo -n ' sendmail';		sendmail -bd -q30m
D 28

E 28
I 28
echo -n ' inetd';		inetd
I 33
echo -n ' amd';
	cd /; amd -l /var/log/amd -r -a /amd -p > /var/run/amd.pid \
	/home /etc/amd-home \
I 35
	/n /etc/amd-n \
E 35
	&
D 35
#	/n /etc/amd-n \
#	/vol /etc/amd-vol \
E 35

E 33
E 28
echo '.'

E 17
sh /etc/rc.local

D 4
			date				>/dev/console
E 4
I 4
D 17
date			>/dev/console
E 17
I 17
date
E 17
E 4
exit 0
E 1
