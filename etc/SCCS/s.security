h12446
s 00000/00000/00534
d D 8.1 93/06/09 12:56:14 bostic 29 28
c 4.4BSD snapshot (revision 8.1)
e
s 00001/00001/00533
d D 5.28 92/05/08 14:15:58 bostic 28 27
c check for "decode" as well as "uudecode"
e
s 00006/00007/00528
d D 5.27 92/05/04 17:58:04 bostic 27 26
c don't object to empty lines, just plus signs
e
s 00007/00004/00528
d D 5.26 92/05/04 17:51:34 bostic 26 25
c add hosts.lpd to no plus signs or empty lines files
e
s 00002/00002/00530
d D 5.25 92/05/04 06:30:35 bostic 25 24
c wordsmith
e
s 00006/00017/00526
d D 5.24 92/05/03 08:09:38 bostic 24 23
c have to check patterns for block devices, too (tape drives hit)
e
s 00043/00000/00500
d D 5.23 92/04/24 14:44:55 bostic 23 22
c add list of files to be backed up and diff'd, including master.passwd
e
s 00013/00027/00487
d D 5.22 92/04/17 14:27:14 bostic 22 21
c comment cleanups
e
s 00003/00003/00511
d D 5.21 92/04/14 08:26:25 bostic 21 20
c typo, missed an anchor
e
s 00002/00002/00512
d D 5.20 92/04/13 18:51:34 bostic 20 19
c anchor . in the path check for root
e
s 00003/00003/00511
d D 5.19 92/04/13 18:43:22 bostic 19 18
c Eric found some mistakes
e
s 00003/00002/00511
d D 5.18 92/04/08 09:05:52 bostic 18 17
c wordsmithing
e
s 00015/00018/00498
d D 5.17 92/04/08 09:00:44 bostic 17 16
c change disk checks to be more concise; don't report anything but name
c changes for character devices
e
s 00410/00264/00106
d D 5.16 92/04/06 20:04:51 bostic 16 15
c lots of changes, lots of cleanups
e
s 00097/00018/00273
d D 5.15 92/04/01 09:06:21 bostic 15 14
c another pass, add NFS export check, writeable disk check
e
s 00149/00008/00142
d D 5.14 92/03/31 20:11:12 bostic 14 13
c put in a lot more of the reasonable security checks, and some of the
c unreasonable ones
e
s 00083/00031/00067
d D 5.13 92/03/31 13:39:25 bostic 13 12
c Fix the setuid/device scripts, ls -l is a different number of fields!
e
s 00001/00001/00097
d D 5.12 92/02/27 12:15:45 bostic 12 11
c oops, forgot to take out the testing line!
e
s 00000/00002/00098
d D 5.11 92/02/20 10:04:12 bostic 11 10
c subject line specified by daily script
e
s 00029/00007/00071
d D 5.10 92/02/19 12:57:11 bostic 10 9
c add mtree(8) checks, using spec files in /etc/mtree
e
s 00057/00021/00021
d D 5.9 92/02/19 11:43:46 bostic 9 8
c fix setuid files, devices checks
e
s 00022/00010/00020
d D 5.8 92/01/16 14:26:04 bostic 8 7
c just compare names, then print out the full information for diffs
e
s 00001/00001/00029
d D 5.7 92/01/11 09:44:41 bostic 7 6
c can't use last modify time, so have to -exec ls
e
s 00001/00001/00029
d D 5.6 92/01/09 08:10:17 bostic 6 5
c don't display symbolic links
e
s 00002/00001/00028
d D 5.5 92/01/09 07:58:54 bostic 5 4
c display complete host name
e
s 00005/00012/00024
d D 5.4 92/01/08 12:52:27 bostic 4 3
c use find to locate setuid/gid, device files
e
s 00001/00001/00035
d D 5.3 91/05/28 18:54:10 bostic 3 2
c display the groups as well
e
s 00001/00001/00035
d D 5.2 90/12/31 16:04:40 bostic 2 1
c use ls -lT so output doesn't change in six months
e
s 00036/00000/00000
d D 5.1 90/05/24 21:22:28 bostic 1 0
c date and time created 90/05/24 21:22:28 by bostic
e
u
U
t
T
I 1
#!/bin/sh -
#
#	%W% (Berkeley) %G%
#
I 15

D 22
# Script to check basic system security.  Checks included are:
D 16
#	Users with uid's of 0.
#	Users without passwords.
#	Accounts that have been turned off, but still have valid shells.
#	Special users that have .rhosts files.
E 16
I 16
#	Password and group file check.
#	Root umask, dot in root's path.
#	Root and uucp in /etc/ftpusers.
#	Entry for uudecode in /etc/aliases, if uudecode is setuid.
#	Hosts.equiv syntax.
#	Special users that have .rhosts files, .rhosts file syntax.
E 16
#	Home directory and dot-file ownership and permissions.
#	Mailbox ownership and permissions.
D 16
#	File list from /etc/mtree/flist.secure.
#	Dot appearing in root user's path.
#	NFS file systems globally exported to the world.
E 16
I 16
#	Globally exported NFS file systems.
E 16
#	Changes in setuid and device files.
#	Block and character disk device ownership and permissions.
I 16
#	File list from /etc/mtree/special.
E 16
#	System binaries as described by files in /etc/mtree.

E 22
E 15
D 10
PATH=/sbin:/bin:/usr/bin
E 10
I 10
PATH=/sbin:/usr/sbin:/bin:/usr/bin
E 10

D 5
host=`hostname -s`
E 5
I 5
D 13
host=`hostname`
E 13
E 5
D 11
echo "Subject: $host security check output"

E 11
I 8
D 16
umask 22
E 16
I 16
umask 077
E 16

I 10
D 13
DONE=/tmp/_secure1.$$
LIST=/tmp/_secure2.$$
TMP=/tmp/_secure3.$$
E 13
I 13
ERR=/tmp/_secure1.$$
TMP1=/tmp/_secure2.$$
TMP2=/tmp/_secure3.$$
D 16
LIST=/tmp/_secure4.$$
E 16
I 16
TMP3=/tmp/_secure4.$$
LIST=/tmp/_secure5.$$
OUTPUT=/tmp/_secure6.$$
E 16
E 13

D 13
trap 'rm -f $DONE $LIST $TMP' 0
E 13
I 13
D 14
trap 'rm -f $ERR $LIST $TMP1 $TMP2' 0
E 14
I 14
D 16
trap 'rm -f $ERR $TMP1 $TMP2 $LIST' 0
E 16
I 16
trap 'rm -f $ERR $TMP1 $TMP2 $TMP3 $LIST $OUTPUT' 0
E 16
E 14
E 13

I 13
D 14
# Display uids of 0.
E 14
I 14
D 15
# Check uids.
E 15
I 15
D 16
# Check uids.  Only root and toor should have a uid of 0.
E 15
E 14
E 13
E 10
E 8
D 9
LOG=/var/log
D 8
TMP=/tmp/_secure.$$
E 8
I 8
TMP1=/tmp/_secure1.$$
TMP2=/tmp/_secure2.$$
E 9
I 9
echo ""
echo "Checking for uids of 0:"
D 14
awk -F: "\$3==\"0\" {print \"user: \" \$1 \", uid: \" \$3 }" /etc/master.passwd
E 14
I 14
D 15
awk -F: "\$3 == 0 \
E 15
I 15
awk -F: "\$3 == 0 && \$1 != \"root\" && \$1 != \"toor\" \
E 15
	{ print \"user \" \$1 \" has a uid of \" \$3 }" /etc/master.passwd
E 16
I 16
D 22
# Check the password file syntax.
E 22
I 22
# Check the master password file syntax.
E 22
MP=/etc/master.passwd
awk -F: '{
	if ($0 ~ /^[	 ]*$/) {
		printf("Line %d is a blank line.\n", NR);
		next;
	}
	if (NF != 10)
		printf("Line %d has the wrong number of fields.\n", NR);
D 19
	if ($1 !~ /[A-za-z0-9]*/)
E 19
I 19
	if ($1 !~ /^[A-Za-z0-9]*$/)
E 19
D 25
		printf("Login %s has non-numeric characters.\n", $1);
E 25
I 25
		printf("Login %s has non-alphanumeric characters.\n", $1);
E 25
	if (length($1) > 8)
		printf("Login %s has more than 8 characters.\n", $1);
	if ($2 == "")
		printf("Login %s has no password.\n", $1);
	if (length($2) != 13 && ($10 ~ /.*sh$/ || $10 == ""))
		printf("Login %s is off but still has a valid shell.\n", $1);
	if ($3 == 0 && $1 != "root" && $1 != "toor")
		printf("Login %s has a user id of 0.\n", $1);
	if ($3 < 0)
		printf("Login %s has a negative user id.\n", $1);
	if ($4 < 0)
D 19
		printf("Login %s has a negative user id.\n", $1);
E 19
I 19
		printf("Login %s has a negative group id.\n", $1);
E 19
}' < $MP > $OUTPUT
if [ -s $OUTPUT ] ; then
	printf "\nChecking the $MP file:\n"
	cat $OUTPUT
fi

awk -F: '{ print $1 }' $MP | sort | uniq -d > $OUTPUT
if [ -s $OUTPUT ] ; then
	printf "\n$MP has duplicate user names.\n"
	column $OUTPUT
fi

awk -F: '{ print $1 " " $3 }' $MP | sort -n +1 | tee $TMP1 |
uniq -d -f 1 | awk '{ print $2 }' > $TMP2
if [ -s $TMP2 ] ; then
	printf "\n$MP has duplicate user id's.\n"
        while read uid; do
                grep -w $uid $TMP1
        done < $TMP2 | column
fi

I 23
# Backup the master password file; a special case, the normal backup
# mechanisms also print out file differences and we don't want to do
# that because this file has encrypted passwords in it.
CUR=/var/backups/`basename $MP`.current
BACK=/var/backups/`basename $MP`.backup
if [ -s $CUR ] ; then
	if cmp -s $CUR $MP; then
		:
	else
		cp -p $CUR $BACK
		cp -p $MP $CUR
		chown root.wheel $CUR
	fi
else
	cp -p $MP $CUR
	chown root.wheel $CUR
fi

E 23
# Check the group file syntax.
GRP=/etc/group
awk -F: '{
	if ($0 ~ /^[	 ]*$/) {
		printf("Line %d is a blank line.\n", NR);
		next;
	}
	if (NF != 4)
		printf("Line %d has the wrong number of fields.\n", NR);
D 21
	if ($1 !~ /[A-za-z0-9]*/)
E 21
I 21
	if ($1 !~ /^[A-za-z0-9]*$/)
E 21
D 25
		printf("Group %s has non-numeric characters.\n", $1);
E 25
I 25
		printf("Group %s has non-alphanumeric characters.\n", $1);
E 25
	if (length($1) > 8)
		printf("Group %s has more than 8 characters.\n", $1);
	if ($3 !~ /[0-9]*/)
D 19
		printf("Login %s has a negative user id.\n", $1);
E 19
I 19
		printf("Login %s has a negative group id.\n", $1);
E 19
}' < $GRP > $OUTPUT
if [ -s $OUTPUT ] ; then
	printf "\nChecking the $GRP file:\n"
	cat $OUTPUT
fi

awk -F: '{ print $1 }' $GRP | sort | uniq -d > $OUTPUT
if [ -s $OUTPUT ] ; then
	printf "\n$GRP has duplicate group names.\n"
	column $OUTPUT
fi

# Check for root paths, umask values in startup files.
I 22
# The check for the root paths is problematical -- it's likely to fail
# in other environments.  Once the shells have been modified to warn
# of '.' in the path, the path tests should go away.
E 22
> $OUTPUT
rhome=/root
umaskset=no
list="/etc/csh.cshrc /etc/csh.login ${rhome}/.cshrc ${rhome}/.login"
for i in $list ; do
	if [ -f $i ] ; then
		if egrep umask $i > /dev/null ; then
			umaskset=yes
		fi
		egrep umask $i |
		awk '$2 % 100 < 20 \
			{ print "Root umask is group writeable" }
		     $2 % 10 < 2 \
			{ print "Root umask is other writeable" }' >> $OUTPUT
		/bin/csh -f -s << end-of-csh > /dev/null 2>&1
			unset path
			source $i
			/bin/ls -ldgT \$path > $TMP1
end-of-csh
		awk '{
D 20
			if ($10 ~ /\./) {
E 20
I 20
D 21
			if ($10 ~ /^\./$) {
E 21
I 21
			if ($10 ~ /^\.$/) {
E 21
E 20
				print "The root path includes .";
				next;
			}
		     }
		     $1 ~ /^d....w/ \
        { print "Root path directory " $10 " is group writeable." } \
		     $1 ~ /^d.......w/ \
        { print "Root path directory " $10 " is other writeable." }' \
		< $TMP1 >> $OUTPUT
	fi
done
if [ $umaskset = "no" -o -s $OUTPUT ] ; then
	printf "\nChecking root csh paths, umask values:\n$list\n"
	if [ -s $OUTPUT ]; then
		cat $OUTPUT
	fi
	if [ $umaskset = "no" ] ; then
		printf "\nRoot csh startup files do not set the umask.\n"
	fi
fi
E 16
E 14
E 9
E 8

I 13
D 14
# Display uids without passwords.
E 14
I 14
D 15
# Check passwords.
E 15
I 15
D 16
# Check for missing passwords.
E 15
E 14
E 13
I 5
echo ""
I 9
echo "Checking for uids without passwords:"
D 14
awk -F: "\$2==\"\" {print \"user: \" \$1 \", uid: \" \$3 }" /etc/master.passwd
E 14
I 14
awk -F: "\$2 == \"\" \
	{ print \"user \" \$1 \" has no password\" }" /etc/master.passwd
E 16
I 16
> $OUTPUT
rhome=/root
umaskset=no
list="${rhome}/.profile"
for i in $list; do
	if [ -f $i ] ; then
		if egrep umask $i > /dev/null ; then
			umaskset=yes
		fi
		egrep umask $i |
		awk '$2 % 100 < 20 \
			{ print "Root umask is group writeable" } \
		     $2 % 10 < 2 \
			{ print "Root umask is other writeable" }' >> $OUTPUT
		/bin/sh << end-of-sh > /dev/null 2>&1
			PATH=
			. $i
			list=\`echo \$PATH | /usr/bin/sed -e 's/:/ /g'\`
			/bin/ls -ldgT \$list > $TMP1
end-of-sh
		awk '{
D 20
			if ($10 ~ /\./) {
E 20
I 20
D 21
			if ($10 ~ /^\./$) {
E 21
I 21
			if ($10 ~ /^\.$/) {
E 21
E 20
				print "The root path includes .";
				next;
			}
		     }
		     $1 ~ /^d....w/ \
        { print "Root path directory " $10 " is group writeable." } \
		     $1 ~ /^d.......w/ \
        { print "Root path directory " $10 " is other writeable." }' \
		< $TMP1 >> $OUTPUT
E 16
E 14

I 15
D 16
# If the account is turned off, the shell should be invalid.
E 15
I 14
echo ""
echo "Checking for turned-off accounts with valid shells:"
D 15
awk -F: "length(\$2) != 13 && \$10 ~ /.*sh$/ \
E 15
I 15
awk -F: "length(\$2) != 13 && (\$10 ~ /.*sh$/ || \$10 == \"\") \
E 15
	{ print \"user \" \$1 \" account turned off with valid shell.\" }" \
	/etc/master.passwd
E 16
I 16
	fi
done
if [ $umaskset = "no" -o -s $OUTPUT ] ; then
	printf "\nChecking root sh paths, umask values:\n$list\n"
	if [ -s $OUTPUT ]; then
		cat $OUTPUT
	fi
	if [ $umaskset = "no" ] ; then
		printf "\nRoot sh startup files do not set the umask.\n"
	fi
fi
E 16

I 16
# Root and uucp should both be in /etc/ftpusers.
if egrep root /etc/ftpusers > /dev/null ; then
	:
else
	printf "\nRoot not listed in /etc/ftpusers file.\n"
fi
if egrep uucp /etc/ftpusers > /dev/null ; then
	:
else
	printf "\nUucp not listed in /etc/ftpusers file.\n"
fi

D 22
# Uudecode should not be in the aliases file.
E 22
I 22
# Uudecode should not be in the /etc/aliases file.
E 22
D 28
if grep -w uudecode /etc/aliases; then
E 28
I 28
if egrep 'uudecode|decode' /etc/aliases; then
E 28
	printf "\nThere is an entry for uudecode in the /etc/aliases file.\n"
fi

D 22
# Check for plus signs in /etc/hosts.equiv.
E 22
I 22
D 26
# There should be no plus signs in /etc/hosts.equiv.
E 22
if egrep '\+|^$' /etc/hosts.equiv > /dev/null ; then
	printf "\nEmpty line or + in /etc/hosts.equiv file.\n"
fi
E 26
I 26
D 27
# Files that should not have + signs or empty lines.
E 27
I 27
# Files that should not have + signs.
E 27
list="/etc/hosts.equiv /etc/hosts.lpd"
for f in $list ; do
D 27
	if egrep '\+|^$' $f > /dev/null ; then
		printf "\nEmpty line or + in $f file.\n"
E 27
I 27
	if egrep '\+' $f > /dev/null ; then
		printf "\nPlus sign in $f file.\n"
E 27
	fi
done
E 26

E 16
D 15
# Check special users with .rhosts files.
E 15
I 15
# Check for special users with .rhosts files.  Only root and toor should
D 16
# have a .rhosts files.
E 15
echo ""
echo "Checking for special users with .rhosts files."
D 15
awk -F: "\$3 < 100 || \$1 == \"ftp\" || \$1 == \"uucp\" \
E 15
I 15
awk -F: "\$1 != \"root\" && \$1 != \"toor\" && \
	(\$3 < 100 || \$1 == \"ftp\" || \$1 == \"uucp\") \
E 15
	{ print \$1 \" \" \$6 }" /etc/passwd | \
	while read uid homedir; do
		if [ -f ${homedir}/.rhosts ] ; then
D 15
			rhost=`ls -lT ${homedir}/.rhosts`
E 15
I 15
			rhost=`ls -ldgT ${homedir}/.rhosts`
E 15
			echo "$uid: $rhost"
		fi
	done
E 16
I 16
D 27
# have a .rhosts files.  Also, .rhosts files should not have blank lines
# or plus signs.
E 27
I 27
# have a .rhosts files.  Also, .rhosts files should not plus signs.
E 27
awk -F: '$1 != "root" && $1 != "toor" && \
	($3 < 100 || $1 == "ftp" || $1 == "uucp") \
		{ print $1 " " $6 }' /etc/passwd |
while read uid homedir; do
	if [ -f ${homedir}/.rhosts ] ; then
		rhost=`ls -ldgT ${homedir}/.rhosts`
		printf "$uid: $rhost\n"
	fi
done > $OUTPUT
if [ -s $OUTPUT ] ; then
	printf "\nChecking for special users with .rhosts files.\n"
	cat $OUTPUT
fi
E 16

D 16
# Check home directories.
echo ""
echo "Checking user's home directories."
E 16
I 16
awk -F: '{ print $1 " " $6 }' /etc/passwd | \
while read uid homedir; do
	if [ -f ${homedir}/.rhosts ] && \
D 27
	    egrep '\+|^$' ${homedir}/.rhosts > /dev/null ; then
		printf "$uid: empty line or + in .rhosts file.\n"
E 27
I 27
	    egrep '\+' ${homedir}/.rhosts > /dev/null ; then
		printf "$uid: + in .rhosts file.\n"
E 27
	fi
done > $OUTPUT
if [ -s $OUTPUT ] ; then
	printf "\nChecking .rhosts files syntax.\n"
	cat $OUTPUT
fi

D 22
# Check home directories, dot files.
E 16
D 15
echo "Checking .netrc, .rhosts."
E 15
I 15
# Directories should not be owned by someone else or writeable.
E 22
I 22
# Check home directories.  Directories should not be owned by someone else
# or writeable.
E 22
D 16
awk -F: "{ print \$1 \" \" \$6 }" /etc/passwd | \
E 16
I 16
awk -F: '{ print $1 " " $6 }' /etc/passwd | \
E 16
while read uid homedir; do
	if [ -d ${homedir}/ ] ; then
		file=`ls -ldgT ${homedir}`
D 16
		echo "$uid $file"
E 16
I 16
		printf "$uid $file\n"
E 16
	fi
D 16
done | awk \
	    "\$1 != \$4 && \$4 != \"root\" \
	{ print \"user \" \$1 \"'s home directory is owned by \" \$4 } \
	     \$2 ~ /^-....w/ \
	{ print \"user \" \$1 \"'s home directory is group writeable\" } \
	     \$2 ~ /^-.......w/ \
	{ print \"user \" \$1 \"'s home directory is other writeable\" }"
E 16
I 16
done |
awk '$1 != $4 && $4 != "root" \
	{ print "user " $1 " home directory is owned by " $4 }
     $2 ~ /^-....w/ \
	{ print "user " $1 " home directory is group writeable" }
     $2 ~ /^-.......w/ \
	{ print "user " $1 " home directory is other writeable" }' > $OUTPUT
if [ -s $OUTPUT ] ; then
	printf "\nChecking home directories.\n"
	cat $OUTPUT
fi
E 16

D 16
echo ""
echo "Checking .netrc, .rhosts files."
E 16
E 15
# Files that should not be owned by someone else or readable.
D 16
awk -F: "{ print \$1 \" \" \$6 }" /etc/passwd | \
E 16
I 16
list=".netrc .rhosts"
awk -F: '{ print $1 " " $6 }' /etc/passwd | \
E 16
while read uid homedir; do
D 16
	if [ -f ${homedir}/.netrc ] ; then
D 15
		file=`ls -lT ${homedir}/.netrc`
E 15
I 15
		file=`ls -ldgT ${homedir}/.netrc`
E 15
		echo "$uid .netrc $file"
	fi
	if [ -f ${homedir}/.rhosts ] ; then
D 15
		file=`ls -lT ${homedir}/.rhosts`
E 15
I 15
		file=`ls -ldgT ${homedir}/.rhosts`
E 15
		echo "$uid .rhosts $file"
	fi
done | awk \
	    "\$1 != \$5 && \$5 != \"root\" \
	{ print \"user \" \$1 \"'s \" \$2 \" file is owned by \" \$5 } \
	     \$3 ~ /^-...r/ \
	{ print \"user \" \$1 \"'s \" \$2 \" file is group readable\" } \
	     \$3 ~ /^-......r/ \
	{ print \"user \" \$1 \"'s \" \$2 \" file is other readable\" } \
	     \$3 ~ /^-....w/ \
	{ print \"user \" \$1 \"'s \" \$2 \" file is group writeable\" } \
	     \$3 ~ /^-.......w/ \
	{ print \"user \" \$1 \"'s \" \$2 \" file is other writeable\" }"
E 16
I 16
	for f in $list ; do
		file=${homedir}/${f}
		if [ -f $file ] ; then
			printf "$uid $f `ls -ldgT $file`\n"
		fi
	done
done |
awk '$1 != $5 && $5 != "root" \
	{ print "user " $1 " " $2 " file is owned by " $5 }
     $3 ~ /^-...r/ \
	{ print "user " $1 " " $2 " file is group readable" }
     $3 ~ /^-......r/ \
	{ print "user " $1 " " $2 " file is other readable" }
     $3 ~ /^-....w/ \
	{ print "user " $1 " " $2 " file is group writeable" }
     $3 ~ /^-.......w/ \
	{ print "user " $1 " " $2 " file is other writeable" }' > $OUTPUT
E 16

# Files that should not be owned by someone else or writeable.
D 16
echo ""
D 15
echo "Checking .cshrc, .klogin, .login, .profile."
E 15
I 15
echo "Checking .cshrc, .klogin, .login, .profile files."
E 15
awk -F: "{ print \$1 \" \" \$6 }" /etc/passwd | \
E 16
I 16
list=".bashrc .cshrc .emacsrc .exrc .forward .klogin .login .logout \
      .profile .tcshrc"
awk -F: '{ print $1 " " $6 }' /etc/passwd | \
E 16
while read uid homedir; do
D 16
	if [ -f ${homedir}/.cshrc ] ; then
D 15
		file=`ls -lT ${homedir}/.cshrc`
E 15
I 15
		file=`ls -ldgT ${homedir}/.cshrc`
E 15
		echo "$uid .cshrc $file"
	fi
	if [ -f ${homedir}/.klogin ] ; then
D 15
		file=`ls -lT ${homedir}/.klogin`
E 15
I 15
		file=`ls -ldgT ${homedir}/.klogin`
E 15
		echo "$uid .klogin $file"
	fi
	if [ -f ${homedir}/.login ] ; then
D 15
		file=`ls -lT ${homedir}/.login`
E 15
I 15
		file=`ls -ldgT ${homedir}/.login`
E 15
		echo "$uid .login $file"
	fi
	if [ -f ${homedir}/.profile ] ; then
D 15
		file=`ls -lT ${homedir}/.profile`
E 15
I 15
		file=`ls -ldgT ${homedir}/.profile`
E 15
		echo "$uid .profile $file"
	fi
done | awk \
	    "\$1 != \$5 && \$5 != \"root\" \
	{ print \"user \" \$1 \"'s \" \$2 \" file is owned by \" \$5 } \
	     \$3 ~ /^-....w/ \
	{ print \"user \" \$1 \"'s \" \$2 \" file is group writeable\" } \
	     \$3 ~ /^-.......w/ \
	{ print \"user \" \$1 \"'s \" \$2 \" file is other writeable\" }"
E 16
I 16
	for f in $list ; do
		file=${homedir}/${f}
		if [ -f $file ] ; then
			printf "$uid $f `ls -ldgT $file`\n"
		fi
	done
done |
awk '$1 != $5 && $5 != "root" \
	{ print "user " $1 " " $2 " file is owned by " $5 }
     $3 ~ /^-....w/ \
	{ print "user " $1 " " $2 " file is group writeable" }
     $3 ~ /^-.......w/ \
	{ print "user " $1 " " $2 " file is other writeable" }' >> $OUTPUT
if [ -s $OUTPUT ] ; then
	printf "\nChecking dot files.\n"
	cat $OUTPUT
fi
E 16

D 22
# Check mailbox ownership and permissions.
E 22
I 22
# Mailboxes should be owned by user and unreadable.
E 22
D 16
echo ""
echo "Checking mailbox ownership."
ls -l /var/mail | \
awk "\$3 != \$9 \
	{ print \"user \" \$9 \"'s mailbox is owned by \" \$3 } \
     \$2 ~ /^-...r/ \
	{ print \"user \" \$1 \"'s mailbox is group readable\" } \
     \$2 ~ /^-......r/ \
	{ print \"user \" \$1 \"'s mailbox is other readable\" } \
     \$2 ~ /^-....w/ \
	{ print \"user \" \$1 \"'s mailbox is group writeable\" } \
     \$2 ~ /^-.......w/ \
	{ print \"user \" \$1 \"'s mailbox is other writeable\" }"
E 16
I 16
ls -l /var/mail | sed 1d | \
awk '$3 != $9 \
	{ print "user " $9 " mailbox is owned by " $3 }
     $1 != "-rw-------" \
	{ print "user " $9 " mailbox is " $1 ", group " $4 }' > $OUTPUT
if [ -s $OUTPUT ] ; then
	printf "\nChecking mailbox ownership.\n"
	cat $OUTPUT
fi
E 16

D 16
# Check for special files.
echo ""
echo "Checking dangerous files and directories."
mtree -e -p / -f /etc/mtree/flist.secure

# Check for bad paths in root startup files.
echo ""
echo "Checking root paths (csh startup files)."
rhome=/root
for i in /etc/csh.cshrc /etc/csh.login ${rhome}/.cshrc ${rhome}/.login ; do
	echo "$i:"
	if [ -f $i ] ; then
		if egrep -h -i 'path.*[^a-z]\.[^a-z]' $i > /dev/null ; then
			echo "Root's path appears to include ."
		fi
		egrep -h -i path $i | \
		awk "{ for (i = 1; i <= NF; ++i) print \$i }" | \
		while read dir; do
			if [ -d $dir ] ; then
				echo `ls -ldgT $dir`
			fi
		done | \
		awk "\$1 ~ /^d....w/ \
	{ print \"Root path directory \" \$10 \" is group writeable.\" } \
		     \$1 ~ /^d.......w/ \
	{ print \"Root path directory \" \$10 \" is other writeable.\" }"
	fi
done

echo ""
echo "Checking root paths (sh startup files)."
for i in ${rhome}/.profile ${rhome}/.klogin ; do
	echo "$i:"
	if [ -f $i ] ; then
		if egrep -h -i 'path.*:\.:' $i > /dev/null ; then
			echo "Root's path appears to include ."
		fi
		egrep -h -i 'path.*:' $i | \
		awk -F: "{ for (i = 1; i <= NF; ++i) print \$i }" | \
		while read dir; do
			if [ -d $dir ] ; then
				echo `ls -ldgT $dir`
			fi
		done | \
		awk "\$1 ~ /^d....w/ \
	{ print \"Root path directory \" \$10 \" is group writeable.\" } \
		     \$1 ~ /^d.......w/ \
	{ print \"Root path directory \" \$10 \" is other writeable.\" }"
	fi
done

E 16
I 15
D 22
# Check for globally exported file systems.
E 22
I 22
# File systems should not be globally exported.
E 22
D 16
echo ""
echo "Checking for globally exported file systems."
E 16
awk '{
	readonly = 0;
	for (i = 2; i <= NF; ++i) {
		if ($i ~ /-ro/)
			readonly = 1;
		else if ($i !~ /^-/)
			next;
	}
	if (readonly)
		print "File system " $1 " globally exported, read-only."
	else
		print "File system " $1 " globally exported, read-write."
D 16
}' < /etc/exports
E 16
I 16
}' < /etc/exports > $OUTPUT
if [ -s $OUTPUT ] ; then
	printf "\nChecking for globally exported file systems.\n"
	cat $OUTPUT
fi
E 16

E 15
E 14
I 13
D 22
# Display setuid and device changes.
E 22
I 22
# Display any changes in setuid files and devices.
E 22
E 13
D 10
DONE=/tmp/_secure1.$$
LIST=/tmp/_secure2.$$
TMP=/tmp/_secure3.$$

trap 'rm -f $DONE $LIST $TMP' 0

E 10
D 16
echo ""
E 9
E 5
D 4
echo "checking setuid files and devices:"
MP=`mount -t ufs | sed 's;/dev/;&r;' | awk '{ print $1 " " $3 }'`
set $MP
D 2
ls -l `while test $# -ge 2; do
E 2
I 2
D 3
ls -lT `while test $# -ge 2; do
E 3
I 3
ls -lgT `while test $# -ge 2; do
E 3
E 2
	device=$1
	shift
	mount=$1
	shift
	ncheck -s $device | sed -e "/:$/d" -e "/\/dev\//d" \
	    -e "s;[^/]*;$mount;" -e "s;//;/;g" | sort
done` > $TMP
E 4
I 4
echo "Checking setuid files and devices:"
D 8
find / \( ! -fstype local \) -a -prune -o \
D 6
	\( -perm -u+s -o -perm -g+s -o ! -type f -a ! -type d \) \
E 6
I 6
	\( -perm -u+s -o -perm -g+s -o ! -type d -a ! -type f -a ! -type l \) \
E 6
D 7
	-a -ls 2>&1 > $TMP
E 7
I 7
	-a -exec /bin/ls -cgl {} \; 2>&1 > $TMP
E 8
I 8
D 9
(find / \( ! -fstype local \) -a -prune -o \( -perm -u+s -o -perm -g+s \
	-o ! -type d -a ! -type f -a ! -type l \) | sort >$TMP1) 2>$TMP2
E 9
I 9
D 12
(find /sbin \( ! -fstype local \) -a -prune -o \
E 12
I 12
D 13
(find / \( ! -fstype local \) -a -prune -o \
E 13
I 13
D 15
(find / ! -fstype local -a -prune -o \
E 15
I 15
(find /dev ! -fstype local -a -prune -o \
E 15
E 13
E 12
    \( -perm -u+s -o -perm -g+s -o ! -type d -a ! -type f -a ! -type l \) | \
D 13
    sort | sed -e 's/^/ls -lgT /' | sh >$LIST) 2>$TMP
E 13
I 13
D 15
    sort | sed -e 's/^/ls -lgT /' | sh >$TMP1) 2>$ERR
E 15
I 15
    sort | sed -e 's/^/ls -ldgT /' | sh >$TMP1) 2>$ERR
E 16
I 16
printf "\nChecking setuid files and devices:\n"
(find / ! -fstype local -a -prune -o \
    \( -perm -u+s -o -perm -g+s -o ! -type d -a ! -type f -a ! -type l -a \
       ! -type s \) | \
sort | sed -e 's/^/ls -ldgT /' | sh > $LIST) 2> $OUTPUT
E 16
E 15
E 13
E 9
E 8
E 7
E 4

D 8
if cmp $LOG/setuid.today $TMP >/dev/null; then :; else
	echo "$host setuid/device diffs:"
	diff $LOG/setuid.today $TMP
	mv $LOG/setuid.today $LOG/setuid.yesterday
	mv $TMP $LOG/setuid.today
E 8
I 8
D 9
if [ -s $TMP2 ] ; then
E 9
I 9
D 13
if [ -s $TMP ] ; then
E 9
	echo "$host setuid/device find errors:"
D 9
	cat $TMP2
	echo ""; echo ""
E 9
I 9
	cat $TMP
E 13
I 13
# Display any errors that occurred during system file walk.
D 16
if [ -s $ERR ] ; then
	echo "Setuid/device find errors:"
	cat $ERR
E 13
	echo ""
E 16
I 16
if [ -s $OUTPUT ] ; then
	printf "Setuid/device find errors:\n"
	cat $OUTPUT
	printf "\n"
E 16
E 9
E 8
fi
D 8
rm -f $TMP
E 8
I 8

I 13
# Display any changes in the setuid file list.
D 16
egrep -v '^[bc]' $TMP1 > $LIST
E 13
D 9
if cmp $LOG/setuid.today $TMP1 >/dev/null; then :; else
	echo "$host setuid/device additions:"
	ls -lgT `join -v1 $LOG/setuid.today $TMP1`
	echo ""; echo ""
	echo "$host setuid/device deletions:"
	ls -lgT `join -v2 $LOG/setuid.today $TMP1`
E 9
I 9
if [ -s $LIST ] ; then
D 13
	SETCUR=/var/log/setuid.current
	SETBACK=/var/log/setuid.backup
E 13
I 13
	CUR=/var/log/setuid.current
	BACK=/var/log/setuid.backup
E 16
I 16
egrep -v '^[bc]' $LIST > $TMP1
E 16
E 13
E 9
D 22

E 22
I 16
if [ -s $TMP1 ] ; then
	# Check to make sure uudecode isn't setuid.
	if grep -w uudecode $TMP1 > /dev/null ; then
		printf "\nUudecode is setuid.\n"
	fi

	CUR=/var/backups/setuid.current
	BACK=/var/backups/setuid.backup

E 16
D 9
	mv $LOG/setuid.current $LOG/setuid.backup
	mv $TMP1 $LOG/setuid.current
E 9
I 9
D 13
	if [ -s $SETCUR ] ; then
		if cmp -s $SETCUR $LIST ; then
E 13
I 13
	if [ -s $CUR ] ; then
D 16
		if cmp -s $CUR $LIST ; then
E 16
I 16
		if cmp -s $CUR $TMP1 ; then
E 16
E 13
			:
		else
D 13
			:> $DONE
			join -110 -210 -v2 $SETCUR $LIST >$TMP
			if [ -s $TMP ] ; then
				echo "$host setuid/device additions:"
				tee -a $DONE < $TMP
E 13
I 13
D 16
			:> $TMP1
			join -110 -210 -v2 $CUR $LIST >$TMP2
			if [ -s $TMP2 ] ; then
				echo "Setuid additions:"
				tee -a $TMP1 < $TMP2
E 13
				echo ""
E 16
I 16
			> $TMP2
			join -110 -210 -v2 $CUR $TMP1 > $OUTPUT
			if [ -s $OUTPUT ] ; then
				printf "Setuid additions:\n"
				tee -a $TMP2 < $OUTPUT
				printf "\n"
E 16
			fi

D 13
			join -110 -210 -v1 $SETCUR $LIST >$TMP
			if [ -s $TMP ] ; then
				echo "$host setuid/device deletions:"
				tee -a $DONE < $TMP
E 13
I 13
D 16
			join -110 -210 -v1 $CUR $LIST >$TMP2
			if [ -s $TMP2 ] ; then
				echo "Setuid deletions:"
				tee -a $TMP1 < $TMP2
E 13
				echo ""
E 16
I 16
			join -110 -210 -v1 $CUR $TMP1 > $OUTPUT
			if [ -s $OUTPUT ] ; then
				printf "Setuid deletions:\n"
				tee -a $TMP2 < $OUTPUT
				printf "\n"
E 16
			fi

D 13
			sort +9 $DONE $SETCUR $LIST | uniq -u >$TMP
			if [ -s $TMP ] ; then
				echo "$host setuid/device changes:"
				cat $TMP
E 13
I 13
D 16
			sort +9 $TMP1 $CUR $LIST | \
			    sed -e 's/[	 ][	 ]*/ /g' | uniq -u >$TMP2
			if [ -s $TMP2 ] ; then
				echo "Setuid changes:"
				column $TMP2
E 13
				echo ""
E 16
I 16
			sort +9 $TMP2 $CUR $TMP1 | \
			    sed -e 's/[	 ][	 ]*/ /g' | uniq -u > $OUTPUT
			if [ -s $OUTPUT ] ; then
				printf "Setuid changes:\n"
				column -t $OUTPUT
				printf "\n"
E 16
			fi

D 13
			mv $SETCUR $SETBACK
			mv $LIST $SETCUR
E 13
I 13
D 16
			mv $CUR $BACK
			mv $LIST $CUR
E 16
I 16
			cp $CUR $BACK
			cp $TMP1 $CUR
E 16
E 13
		fi
	else
D 13
		echo "$host setuid/device additions:"
E 13
I 13
D 16
		echo "Setuid additions:"
E 13
		cat $LIST
		echo ""
D 13
		mv $LIST $SETCUR
E 13
I 13
		mv $LIST $CUR
E 16
I 16
		printf "Setuid additions:\n"
D 17
		cat $TMP1
E 17
I 17
		column -t $TMP1
E 17
		printf "\n"
		cp $TMP1 $CUR
E 16
E 13
	fi
E 9
fi
I 13

I 15
D 17
# Check for readable/writeable block and character disk devices.
E 17
I 17
D 22
# Check for block and character disk devices, that are readable or writeable
E 22
I 22
# Check for block and character disk devices that are readable or writeable
E 22
# or not owned by root.operator.
E 17
D 16
echo ""
echo "Checking disk device ownership and permissions."
egrep '^b' $TMP1 > $LIST
egrep '^c.*/rdk[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rfd[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rhd[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rhk[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rhp[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rjb[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rkra[0-9][0-9]*[a-h]$' $TMP1 >> $LIST
egrep '^c.*/rra[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rrb[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rrd[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rrl[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rrx[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rrz[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rsd[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rup[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
egrep '^c.*/rwd[0-9][0-9]*[a-h]$'  $TMP1 >> $LIST
E 16
I 16
D 24
egrep '^b' $LIST > $TMP1
egrep '^c.*/rdk[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rfd[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rhd[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rhk[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rhp[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rjb[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rkra[0-9][0-9]*[a-h]$' $LIST >> $TMP1
egrep '^c.*/rra[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rrb[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rrd[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rrl[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rrx[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rrz[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rsd[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rup[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
egrep '^c.*/rwd[0-9][0-9]*[a-h]$'  $LIST >> $TMP1
E 24
I 24
>$TMP1
DISKLIST="dk fd hd hk hp jb kra ra rb rd rl rx rz sd up wd"
for i in $DISKLIST; do
	egrep "^b.*/${i}[0-9][0-9]*[a-h]$"  $LIST >> $TMP1
	egrep "^c.*/r${i}[0-9][0-9]*[a-h]$"  $LIST >> $TMP1
done
E 24
E 16

D 16
awk "\$4 != \"operator\" \
	{ print \"Device \" \$11 \" not owned by group operator.\" }" < $LIST
awk "\$1 ~ /^c....w/ \
	{ print \"Device \" \$11 \" is group writeable.\" } \
\$1 ~ /^c.......w/ \
	{ print \"Device \" \$11 \" is other writeable.\" }" < $LIST
E 16
I 16
D 17
awk '$4 != "operator" \
	{ print "Disk " $11 " not owned by group operator." }
     $1 !~ /.rw-r-----/ \
	{ print "Disk " $11 " is " $1 ", group " $4 }' < $TMP1 > $OUTPUT
E 17
I 17
awk '$3 != "root" || $4 != "operator" || $1 !~ /.rw-r-----/ \
	{ printf("Disk %s is user %s, group %s, permissions %s.\n", \
	    $11, $3, $4, $1); }' < $TMP1 > $OUTPUT
E 17
if [ -s $OUTPUT ] ; then
	printf "\nChecking disk ownership and permissions.\n"
	cat $OUTPUT
	printf "\n"
fi
E 16

D 16
egrep '^[bcs]' $TMP1 > $LIST
E 16
I 16
D 17
egrep '^[bcs]' $LIST | sort +10 > $TMP1
E 17
I 17
D 22
egrep '^[bc]' $LIST | sort +10 > $TMP1
E 22
E 17
E 16
E 15
# Display any changes in the device file list.
I 22
egrep '^[bc]' $LIST | sort +10 > $TMP1
E 22
D 15
egrep '^[bc]' $TMP1 > $LIST
E 15
D 16
if [ -s $LIST ] ; then
	CUR=/var/log/device.current
	BACK=/var/log/device.backup
E 16
I 16
if [ -s $TMP1 ] ; then
	CUR=/var/backups/device.current
	BACK=/var/backups/device.backup
E 16

	if [ -s $CUR ] ; then
D 16
		if cmp -s $CUR $LIST ; then
E 16
I 16
		if cmp -s $CUR $TMP1 ; then
E 16
			:
		else
D 16
			:> $TMP1
			join -111 -211 -v2 $CUR $LIST >$TMP2
			if [ -s $TMP2 ] ; then
				echo "Device additions:"
				tee -a $TMP1 < $TMP2
				echo ""
E 16
I 16
			> $TMP2
			join -111 -211 -v2 $CUR $TMP1 > $OUTPUT
			if [ -s $OUTPUT ] ; then
				printf "Device additions:\n"
				tee -a $TMP2 < $OUTPUT
				printf "\n"
E 16
			fi

D 16
			join -111 -211 -v1 $CUR $LIST >$TMP2
			if [ -s $TMP2 ] ; then
				echo "Device deletions:"
				tee -a $TMP1 < $TMP2
				echo ""
E 16
I 16
			join -111 -211 -v1 $CUR $TMP1 > $OUTPUT
			if [ -s $OUTPUT ] ; then
				printf "Device deletions:\n"
				tee -a $TMP2 < $OUTPUT
				printf "\n"
E 16
			fi

D 16
			sort +10 $TMP1 $CUR $LIST | \
			    sed -e 's/[	 ][	 ]*/ /g' | uniq -u >$TMP2
			if [ -s $TMP2 ] ; then
				echo "Device changes:"
				column $TMP2
				echo ""
E 16
I 16
D 17
			sort +10 $TMP2 $CUR $TMP1 | \
E 17
I 17
			# Report any block device change.  Ignore character
			# devices, only the name is significant.
			cat $TMP2 $CUR $TMP1 | \
			sed -e '/^c/d' | \
			sort +10 | \
E 17
			sed -e 's/[	 ][	 ]*/ /g' | \
D 17
			awk '{ \
			    printf("%s %s %s %s %s %s %s %s %s %s %s\n", \
			    $7, $8, $9, $10, $1, $2, $3, $4, $5, $6, $11); \
			    }' | uniq -f 4 -u | \
			awk '{ \
			    printf("%s %s %s %s %s %s %s %s %s %s %s\n", \
			    $5, $6, $7, $8, $9, $10, $1, $2, $3, $4, $11); \
			    }' > $OUTPUT
E 17
I 17
			uniq -u > $OUTPUT
E 17
			if [ -s $OUTPUT ] ; then
D 17
				printf "Device changes:\n"
E 17
I 17
				printf "Block device changes:\n"
E 17
				column -t $OUTPUT
				printf "\n"
E 16
			fi

D 16
			mv $CUR $BACK
			mv $LIST $CUR
E 16
I 16
			cp $CUR $BACK
			cp $TMP1 $CUR
E 16
		fi
	else
D 16
		echo "Device additions:"
		cat $LIST
		echo ""
		mv $LIST $CUR
E 16
I 16
		printf "Device additions:\n"
D 17
		cat $TMP1
E 17
I 17
		column -t $TMP1
E 17
		printf "\n"
		cp $TMP1 $CUR
E 16
	fi
fi
D 14
exit
E 14
E 13
D 9
rm -f $TMP1 $TMP2
E 9
E 8

I 10
D 18
# Check the system binaries.
E 18
I 18
# Check special files.
# Check system binaries.
#
E 18
# Create the mtree tree specifications using:
#
D 14
#	mtree -cx -pDIR -kcksum,gid,mode,nlink,size,link,time,uid > DIR.secure
E 14
I 14
D 16
#	mtree -cx -pDIR -kcksum,gid,mode,nlink,size,link,time,uid
#	    DIR.secure
E 14
#	chown bin.bin DIR.SECURE
#	chmod 444 DIR.SECURE
E 16
I 16
#	mtree -cx -pDIR -kcksum,gid,mode,nlink,size,link,time,uid > DIR.secure
#	chown root.wheel DIR.SECURE
#	chmod 600 DIR.SECURE
E 16
#
# Note, this is not complete protection against Trojan horsed binaries, as
# the hacker can modify the tree specification to match the replaced binary.
# For details on really protecting yourself against modified binaries, see
# the mtree(8) manual page.
I 16
D 18
# Check for special files.
E 18
D 22

E 22
E 16
D 14

E 14
if cd /etc/mtree; then
D 16
	echo ""
	echo "Checking system binaries:"
E 16
I 16
	mtree -e -p / -f /etc/mtree/special > $OUTPUT
	if [ -s $OUTPUT ] ; then
		printf "\nChecking special files and directories.\n"
		cat $OUTPUT
	fi

	> $OUTPUT
E 16
	for file in *.secure; do
		tree=`sed -n -e '3s/.* //p' -e 3q $file`
D 16
		echo ""
		echo "Checking $tree:"
		mtree -f $file -p $tree
E 16
I 16
		mtree -f $file -p $tree > $TMP1
		if [ -s $TMP1 ]; then
			printf "\nChecking $tree:\n" >> $OUTPUT
			cat $TMP1 >> $OUTPUT
		fi
E 16
	done
I 16
	if [ -s $OUTPUT ] ; then
		printf "\nChecking system binaries:\n"
		cat $OUTPUT
	fi
I 23
fi

# List of files that get backed up and checked for any modifications.  Each
# file is expected to have two backups, /var/backups/file.{current,backup}.
# Any changes cause the files to rotate.
if [ -s /etc/changelist ] ; then
	for file in `cat /etc/changelist`; do
		CUR=/var/backups/`basename $file`.current
		BACK=/var/backups/`basename $file`.backup
		if [ -s $file ]; then
			if [ -s $CUR ] ; then
				diff $CUR $file > $OUTPUT
				if [ -s $OUTPUT ] ; then
		printf "\n======\n%s diffs (OLD < > NEW)\n======\n" $file
					cat $OUTPUT
					cp -p $CUR $BACK
					cp -p $file $CUR
					chown root.wheel $CUR $BACK
				fi
			else
				cp -p $file $CUR
				chown root.wheel $CUR
			fi
		fi
	done
E 23
E 16
fi
E 10
D 9
echo ""
echo ""
D 4
echo "checking for uids of 0:"
E 4
I 4
echo "Checking for uids of 0:"
E 4
awk 'BEGIN {FS=":"} $3=="0" {print $1,$3}' /etc/master.passwd
E 9
E 1
