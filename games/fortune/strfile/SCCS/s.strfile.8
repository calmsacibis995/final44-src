h45109
s 00002/00002/00118
d D 8.1 93/06/09 16:46:32 elan 13 12
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00003/00118
d D 5.10 93/06/09 16:46:10 elan 12 9
c fix under development line
e
s 00003/00003/00118
d R 8.2 93/06/09 16:43:53 elan 11 10
c fix under development line
e
s 00002/00002/00119
d R 8.1 93/05/31 17:02:19 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00072/00059/00049
d D 5.9 91/03/16 17:04:54 cael 9 8
c macro and text revision (-mdoc version 3)
e
s 00001/00011/00107
d D 5.8 90/06/24 21:12:32 trent 8 7
c new copyright notice
e
s 00039/00053/00079
d D 5.7 89/09/07 10:46:56 bostic 7 6
c update to reflect new organization, header structure, byteorder, etc.
e
s 00005/00005/00127
d D 5.6 89/09/07 08:08:59 bostic 6 5
c do everything in network order
e
s 00008/00001/00124
d D 5.5 89/09/06 16:50:36 bostic 5 4
c change obscene files to be rotated on disk
e
s 00008/00024/00117
d D 5.4 89/09/05 19:54:47 bostic 4 3
c make unstr documentation correct
e
s 00068/00126/00073
d D 5.3 89/09/05 18:40:32 bostic 3 2
c general cleanup -- remove notion of %-, fix header definition
e
s 00021/00005/00178
d D 5.2 89/09/05 16:46:53 bostic 2 1
c add Berkeley specific copyright notices
e
s 00183/00000/00000
d D 5.1 89/09/05 15:52:33 bostic 1 0
c new distribution from Ken Arnold
e
u
U
t
T
I 1
D 2
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\" $Header: strfile.8,v 1.1 87/05/08 11:02:36 arnold Exp $
E 2
I 2
D 9
.\" Copyright (c) 1989 The Regents of the University of California.
E 9
I 9
D 13
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 9
.\" All rights reserved.
E 13
I 13
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 13
I 9
.\"
E 9
.\" 
.\" This code is derived from software contributed to Berkeley by
.\" Ken Arnold.
.\"
D 8
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 8
I 8
.\" %sccs.include.redist.man%
E 8
.\"
D 9
.\"	%W% (Berkeley) %G%
E 9
I 9
.\"     %W% (Berkeley) %G%
E 9
.\"
E 2
D 3
.ie t \{\
.	ds lq ``
.	ds rq ''
.\}
.el \{\
.	ds lq "
.	ds rq "
.\}
E 3
D 2
.TH STRFILE 8 "31 Apr, 1987"
E 2
I 2
D 9
.TH STRFILE 8 "%Q%"
E 2
.UC 4
.SH NAME
strfile, unstr \- create a random access file for storing strings
.SH SYNOPSIS
D 7
.B strfile
[
D 3
.B \-
E 3
I 3
D 5
.B \-iors
E 5
I 5
.B \-iorsx
E 5
E 3
] [
D 3
.B \-svc\fIC\fP
] [
.B \-oir
E 3
I 3
.B \-c char
E 3
]
sourcefile
[ datafile ]
.sp
E 7
I 7
.B strfile [
.I \-iorsx
.B ] [
.I \-c char
.B ]
.I source_file
.B [
.I output_file
.B ]
.br
E 7
.B unstr
D 4
[
.B \-o
I 3
] [
.B \-c char
E 3
]
datafile[.dat] [ outfile ]
E 4
I 4
D 7
sourcfile
E 7
I 7
.I source_file
E 7
E 4
.SH DESCRIPTION
D 3
.I strfile
is designed to take a file which contains a set of strings
and create a data file which contains those strings,
along with a seek pointer table
to the beginning of each.
E 3
I 3
.I Strfile
E 9
I 9
.Dd %Q%
.Dt STRFILE 8
.Os BSD 4
.Sh NAME
.Nm strfile ,
.Nm unstr
.Nd "create a random access file for storing strings"
.Sh SYNOPSIS
.Nm strfile
.Op Fl iorsx
.Op Fl c Ar char
.Ar source_file
.Op Ar output_file
.Nm unstr
.Ar source_file
.Sh DESCRIPTION
.Nm Strfile
E 9
D 7
takes a file which contains a set of strings and creates a data file
which contains those strings, along with a seek pointer table to the
beginning of each.
E 7
I 7
reads a file containing groups of lines separated by a line containing
D 9
a single percent (``%'') sign and creates a data file which contains
E 9
I 9
a single percent
.Ql \&%
sign and creates a data file which contains
E 9
a header structure and a table of file offsets for each group of lines.
E 7
E 3
This allows random access of the strings.
D 9
.PP
E 9
I 9
.Pp
E 9
D 3
The source file contains strings
separated by lines starting with \*(lq%%\*(rq or \*(lq%\-\*(rq
Anything following these starting characters on the line
will be ignored,
so comments can be placed on these lines.
A \*(lq%%\*(rq simply separates strings;
a \*(lq%\-\*(rq separates not only strings but sections.
A file can have up to four sections,
.I i.e. ,
up to three delimiters.
This can be used in a program-defined way.
E 3
I 3
D 7
The source file contains strings separated by lines containing
a single percent (``%'') sign.
E 7
I 7
The output file, if not specified on the command line, is named
D 9
\fIsource_file\fB.out\fR.
E 7
E 3
.PP
E 9
I 9
.Ar source_file Ns Sy .out .
.Pp
E 9
D 3
The data file,
if not specified on the command line,
is named
E 3
I 3
D 7
The data file, if not specified on the command line, is named
E 3
.IB sourcefile .out ,
D 3
and contains a header,
which describes the contents of the data file,
the seek pointers to the beginning of each string,
and the strings themselves,
terminated by null bytes.
E 3
I 3
and contains a header, which describes the contents of the data file,
the seek pointers to the beginning of each string, and the strings
themselves, terminated by null bytes.
E 3
.PP
E 7
D 3
The format of the header is:
.sp
.nf
.ta
.ta 8n +\w'unsigned long\ \ 'u +\w'str_delims[MAXDELIMS];\ 'u
# define	MAXDELIMS	3

# define	STR_RANDOM	0x1
# define	STR_ORDERED	0x2

typedef struct {
	unsigned long	str_numstr;	/* # of strings in the file */
	unsigned long	str_longlen;	/* length of longest string */
	unsigned long	str_shortlen;	/* length of shortest string */
	long	str_delims[MAXDELIMS];	/* delimiter markings */
	off_t	str_dpos[MAXDELIMS];	/* delimiter positions */
	short	str_flags;	/* bit field for flags */
} STRFILE;
.ev
.fi
.PP
The values in
.B str_delims
are the indices of the first string
which follow each \*(lq%\-\*(rq in the file.
The field
.B str_flags
fill have the bit
.SM STR_RANDOM
set if the
.B \-r
flag was specified,
or
.SM STR_ORDERED
if the
.B \-o
flag was specified.
.PP
The options are:
E 3
I 3
The options are as follows:
E 3
D 9
.TP
D 3
.B \-
Give a usage summary.
E 3
I 3
.BI \-c \ char
E 9
I 9
.Bl -tag -width "-c char"
.It Fl c Ar char
E 9
Change the delimiting character from the percent sign to
D 9
.IR char .
E 3
.TP
D 3
.B \-s
Run silently;
don't give the summary of data at the end.
E 3
I 3
.B \-i
E 9
I 9
.Ar char .
.It Fl i
E 9
Ignore case when ordering the strings.
E 3
D 9
.TP
D 3
.B \-v
Verbose (default).
.TP
E 3
.B \-o
E 9
I 9
.It Fl o
E 9
Order the strings in alphabetical order.
D 7
The strings will be stored in the same order in the data file
D 3
as they were in the source,
but the seek pointer table will be sorted in alphabetical order
of the strings the point to.
E 3
I 3
as they were in the source, but the seek pointer table will be
sorted in alphabetical order of the strings pointed to.
E 3
Any
.I initial
non-alphanumeric characters are ignored.
D 3
This sets the
.SM STR_ORDERED
bit in the
E 3
I 3
This option sets the STR_ORDERED bit in the
E 3
.B str_flags
field of the header.
E 7
I 7
The offset table will be sorted in the alphabetical order of the
groups of lines referenced.
Any initial non-alphanumeric characters are ignored.
D 9
This option causes the STR_ORDERED bit in the header
.I str_flags
E 9
I 9
This option causes the
.Dv STR_ORDERED
bit in the header
.Ar str_flags
E 9
field to be set.
E 7
D 9
.TP
D 3
.B \-i
Ignore case when ordering.
.TP
E 3
.B \-r
E 9
I 9
.It Fl r
E 9
D 7
Randomize the order of the seek pointers in the table.
The strings will be stored in the same order in the data file
D 3
as they were in the source,
but the seek pointer table will be randomized.
This sets the
.SM STR_RANDOM
bit in the
E 3
I 3
as they were in the source, but the seek pointer table will
be randomized.
This option sets the STR_RANDOM bit in the
E 3
.B str_flags
field of the header.
E 7
I 7
Randomize access to the strings.
Entries in the offset table will be randomly ordered.
D 9
This option causes the STR_RANDOM bit in the header
.I str_flags
E 9
I 9
This option causes the
.Dv STR_RANDOM
bit in the header
.Ar str_flags
E 9
field to be set.
E 7
D 9
.TP
D 3
.BI \-c C
Change the delimiting character from \*(lq%\*(rq to
.RI \\*(lq C \\*(rq,
making the delimiting lines start with
.RI \\*(lq CC \\*(rq
or
.RI \\*(lq C \-\\*(rq.
E 3
I 3
.B \-s
E 9
I 9
.It Fl s
E 9
D 7
Run silently; don't give a summary of data at the end.
E 7
I 7
Run silently; don't give a summary message when finished.
E 7
I 5
D 9
.TP
.B \-x
E 9
I 9
.It Fl x
E 9
D 7
Set the rotated bit in the header to indicate the the fortunes
are rotated 13 positions in a simply caesar cypher.
E 7
I 7
Note that each alphabetic character in the groups of lines is rotated
13 positions in a simple caesar cypher.
D 9
This option causes the STR_ROTATED bit in the header
.I str_flags
E 9
I 9
This option causes the
.Dv STR_ROTATED
bit in the header
.Ar str_flags
E 9
field to be set.
E 7
E 5
E 3
D 9
.PP
E 9
I 9
.El
.Pp
E 9
I 3
The format of the header is:
D 7
.sp
E 7
I 7
D 9
.in +5
E 7
.nf
E 9
I 9
.Bd -literal
E 9
I 7
#define	VERSION	1
E 7
D 6
#define	STR_RANDOM	0x1
#define	STR_ORDERED	0x2
I 5
#define	STR_ROTATED	0x4
E 5

E 6
I 6
unsigned long	str_version;	/* version number */
E 6
unsigned long	str_numstr;	/* # of strings in the file */
unsigned long	str_longlen;	/* length of longest string */
unsigned long	str_shortlen;	/* length of shortest string */
D 6
unsigned char	str_flags;	/* bit field for flags */
E 6
I 6
#define	STR_RANDOM	0x1	/* randomized pointers */
#define	STR_ORDERED	0x2	/* ordered pointers */
#define	STR_ROTATED	0x4	/* rot-13'd text */
unsigned long	str_flags;	/* bit field for flags */
E 6
char str_delim;			/* delimiting character */
D 9
.fi
.PP
E 9
I 9
.Ed
.Pp
E 9
D 7
The field
.B str_flags
will have the bit STR_RANDOM set if the
.B \-r
flag was specified, or STR_ORDERED if the
.B \-o
I 5
flag was specified, or STR_ROTATED if the
.B \-x
E 5
flag was specified.
E 7
I 7
All fields are written in network byte order.
E 7
D 9
.PP
E 9
I 9
.Pp
E 9
E 3
The purpose of
D 9
.I unstr
E 9
I 9
.Nm unstr
E 9
is to undo the work of
D 3
.I strfile .
It primarily exists as an emergency backup
in case you accidentally delete your source file,
but still have your data file around.
E 3
I 3
D 9
.IR strfile .
E 9
I 9
.Nm strfile .
E 9
D 4
It primarily exists as an emergency backup in case the source file
is accidentally deleted and the data file is still available.
E 3
It reads data files and creates a corresponding output file.
D 3
If you don't want \*(lq%\*(rq as your delimiting character,
you can use the
.BI \-c C
option to change it.
E 3
.PP
D 3
.I unstr
will normally print out the strings
in the order they are in the data file.
If you give it the
E 3
I 3
The options are as follows:
.TP
.B \-c \ char
This option allows specification of a delimiting character to be
used instead of the default percent sign.
.TP
E 3
.B \-o
D 3
option,
it will print them out in the header order,
which could be different if the file was
randomized or ordered when created.
Using this,
you can created sorted versions of your input file
by using
E 3
I 3
.I Unstr
normally prints out the strings in the order they are in the data file.
If you specify the
.B -o
option, it will print them out in the header order, which could be
different if the file was randomized or ordered when created.
E 4
I 4
It prints out the strings contained in the file
D 7
.I sourcefile
E 7
I 7
D 9
.I source_file
E 9
I 9
.Ar source_file
E 9
E 7
in the order that they are listed in
the header file
D 7
.IB sourcefile .dat
E 7
I 7
D 9
.IB source_file .dat
E 9
I 9
.Ar source_file Ns Pa .dat
E 9
E 7
to standard output.
E 4
It is possible to create sorted versions of input files by using
E 3
D 9
.B \-o
E 9
I 9
.Fl o
E 9
D 3
when you run
.IR strfile , 
and then using
E 3
I 3
when
D 9
.I strfile
E 9
I 9
.Nm strfile
E 9
is run and then using
E 3
D 4
.B "unstr \-o"
E 4
I 4
D 9
.I unstr
E 9
I 9
.Nm unstr
E 9
E 4
to dump them out in the table order.
D 9
.SH "SEE ALSO"
D 7
fortune(6)
E 7
I 7
byteorder(3), fortune(6)
E 9
I 9
.Sh SEE ALSO
.Xr byteorder 3 ,
.Xr fortune 6
.Sh FILES
.Bl -tag -width strfile.out -compact
.It Pa strfile.out
default output file.
.El
.Sh HISTORY
The
D 12
.Nm
command
.Ud
E 12
I 12
.Nm strfile
utility first appeared in 4.4BSD.
E 12
E 9
E 7
E 1
