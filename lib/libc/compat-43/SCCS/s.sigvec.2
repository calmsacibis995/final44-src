h06306
s 00001/00001/00298
d D 8.2 94/04/19 06:53:02 bostic 13 12
c spell
e
s 00002/00002/00297
d D 8.1 93/06/02 00:04:41 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/00297
d D 6.9 92/04/23 16:35:17 bostic 11 10
c sigstack -> sigaltstack
e
s 00007/00007/00292
d D 6.8 92/03/01 09:56:35 bostic 10 9
c fix SEE ALSO stuff
e
s 00196/00198/00103
d D 6.7 91/04/29 04:39:24 cael 9 8
c mdoc version three/bsd copyright
e
s 00026/00018/00275
d D 6.6 90/07/01 16:41:47 karels 8 7
c deprecate, point to new POSIX calls
e
s 00001/00011/00292
d D 6.5 90/06/23 17:53:03 trent 7 6
c new copyright notice
e
s 00014/00003/00289
d D 6.4 89/05/18 14:16:04 bostic 6 5
c add Berkeley specific copyright notice
e
s 00002/00000/00290
d D 6.3 86/01/08 13:32:40 mckusick 5 4
c add SIGUSR1 and SIGUSR2
e
s 00002/00002/00288
d D 6.2 85/06/30 16:55:12 sechrest 4 3
c improved english
e
s 00029/00019/00261
d D 6.1 85/05/09 17:53:48 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00179/00212/00101
d D 5.1 85/05/09 17:53:15 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00313/00000/00000
d D 4.1 85/05/09 17:52:34 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 9
.\" Copyright (c) 1980 The Regents of the University of California.
E 9
I 9
D 12
.\" Copyright (c) 1980, 1991 The Regents of the University of California.
E 9
.\" All rights reserved.
E 12
I 12
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 12
.\"
D 7
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 7
I 7
.\" %sccs.include.redist.man%
E 7
E 6
.\"
D 9
.\"	%W% (Berkeley) %G%
E 9
I 9
.\"     %W% (Berkeley) %G%
E 9
.\"
D 2
.TH SIGSYS 2J 4/1/81
E 2
I 2
D 3
.TH SIGVEC 2 "7 July 1983"
E 3
I 3
D 9
.TH SIGVEC 2 "%Q%"
E 3
E 2
.UC 4
.ie t .ds d \(dg
.el .ds d \z'|+'
.ie t .ds b \(bu
.el .ds b @
.SH NAME
D 2
sigsys \- catch or ignore signals
E 2
I 2
sigvec \- software signal facilities
E 2
.SH SYNOPSIS
.nf
.B #include <signal.h>
.PP
D 2
.B (*sigsys(sig, func))()
.B void (*func)();
E 2
I 2
.B struct sigvec {
D 8
.B	int	(*sv_handler)();
E 8
I 8
.B	void	(*sv_handler)();
E 8
.B	int	sv_mask;
D 3
.B	int	sv_onstack;
E 3
I 3
.B	int	sv_flags;
E 3
.B };
E 2
.PP
D 2
.B cc ... \-ljobs
E 2
I 2
.B sigvec(sig, vec, ovec)
.B int sig;
.B struct sigvec *vec, *ovec;
E 2
.fi
.SH DESCRIPTION
I 8
.B "This interface is made obsolete by sigaction(2).
.LP
E 9
I 9
.Dd %Q%
.Dt SIGVEC 2
.Os BSD 4
.Sh NAME
.Nm sigvec
.Nd software signal facilities
.Sh SYNOPSIS
.Fd #include <signal.h>
.Bd -literal
struct sigvec {
        void     (*sv_handler)();
	sigset_t sv_mask;
	int      sv_flags;
};
.Ed
.Fn sigvec "int sig" "struct sigvec *vec" "struct sigvec *ovec"
.Sh DESCRIPTION
.Bf -symbolic
This interface is made obsolete by sigaction(2).
.Ef
.Pp
E 9
E 8
D 2
.IR N.B. :
The system currently supports two signal implementations.
The one described in
.IR signal (2)
is standard in version 7 UNIX systems,
and retained for backward compatibility
as it is different
in a number of ways.
The one described here (with the interface in
.IR sigset (3))
provides for the needs of the job control mechanisms (see
.IR jobs (3))
used by
.IR csh (1),
and corrects the bugs in the standard implementation of signals,
allowing programs which process interrupts to be written reliably.
E 2
I 2
The system defines a set of signals that may be delivered to a process.
D 13
Signal delivery resembles the occurence of a hardware interrupt:
E 13
I 13
Signal delivery resembles the occurrence of a hardware interrupt:
E 13
the signal is blocked from further occurrence, the current process 
context is saved, and a new one is built.  A process may specify a
D 9
.I handler
E 9
I 9
.Em handler
E 9
to which a signal is delivered, or specify that a signal is to be 
D 9
.I blocked
E 9
I 9
.Em blocked
E 9
or
D 9
.IR ignored .
E 9
I 9
.Em ignored .
E 9
A process may also specify that a default action is to be taken
by the system when a signal occurs.
Normally, signal handlers execute on the current stack
of the process.  This may be changed, on a per-handler basis,
so that signals are taken on a special
D 9
.IR "signal stack" .
E 2
.PP
E 9
I 9
.Em "signal stack" .
.Pp
E 9
D 2
The routine
.I sigsys
is not normally called directly; rather the routines of
.IR sigset (3)
should be used.
These routines are kept in the ``jobs'' library, accessible by
giving the loader option
.B \-ljobs.
The features described here are less portable then those of
.IR signal (2)
and should not be used in programs which are
to be moved to other versions of UNIX.
E 2
I 2
All signals have the same
D 9
.IR priority .
E 9
I 9
.Em priority .
E 9
Signal routines execute with the signal that caused their
invocation
D 9
.IR blocked ,
E 9
I 9
.Em blocked ,
E 9
but other signals may yet occur.
A global 
D 9
.I "signal mask"
E 9
I 9
.Em "signal mask"
E 9
defines the set of signals currently blocked from delivery
D 3
to a process.  The signal mask for a process is initilized
E 3
I 3
to a process.  The signal mask for a process is initialized
E 3
from that of its parent (normally 0).  It
may be changed with a
D 9
.IR sigblock (2)
E 9
I 9
.Xr sigblock 2
E 9
or
D 9
.IR sigsetmask (2)
E 9
I 9
.Xr sigsetmask 2
E 9
call, or when a signal is delivered to the process.
E 2
D 9
.PP
E 9
I 9
.Pp
E 9
D 2
A signal
is generated by some abnormal event,
initiated by a user at a terminal (quit, interrupt, stop),
by a program error (bus error, etc.),
by request of another program (kill),
or when a process is stopped because it wishes to access
its control terminal while in the background (see
.IR tty (4)).
Signals are optionally generated
when a process resumes after being stopped,
when the status of child processes changes,
or when input is ready at the control terminal.
Most signals cause termination of the receiving process if no action
is taken; some signals instead cause the process receiving them
to be stopped, or are simply discarded if the process has not
requested otherwise.
Except for the SIGKILL and SIGSTOP
signals which cannot be blocked, the
.I sigsys
call allows signals either to be ignored,
held until a later time (protecting critical sections in the process),
or to cause an interrupt to a specified location.
Here is the list of all signals with names as in the include file.
E 2
I 2
When a signal
condition arises for a process, the signal is added to a set of
signals pending for the process.  If the signal is not currently
D 9
.I blocked
E 9
I 9
.Em blocked
E 9
by the process then it is delivered to the process.  When a signal
is delivered, the current state of the process is saved,
a new signal mask is calculated (as described below), 
and the signal handler is invoked.  The call to the handler
is arranged so that if the signal handling routine returns
normally the process will resume execution in the context
from before the signal's delivery.
If the process wishes to resume in a different context, then it
must arrange to restore the previous context itself.
D 9
.PP
E 9
I 9
.Pp
E 9
When a signal is delivered to a process a new signal mask is
installed for the duration of the process' signal handler
(or until a
D 9
.I sigblock
E 9
I 9
.Xr sigblock
E 9
or
D 9
.I sigsetmask
E 9
I 9
.Xr sigsetmask
E 9
call is made).
This mask is formed by taking the current signal mask,
adding the signal to be delivered, and 
D 9
.IR or 'ing
E 9
I 9
.Em or Ns 'ing
E 9
in the signal mask associated with the handler to be invoked.
D 9
.PP
.I Sigvec
E 9
I 9
.Pp
.Fn Sigvec
E 9
assigns a handler for a specific signal.  If
D 9
.I vec
E 9
I 9
.Fa vec
E 9
is non-zero, it
specifies a handler routine and mask
D 3
to be used when delivering the specified signal.  Further, if
.I sv_onstack
is 1, the system will deliver the signal to the process on a
E 3
I 3
to be used when delivering the specified signal.
D 9
Further, if the SV_ONSTACK bit is set in
.I sv_flags,
E 9
I 9
Further, if the
.Dv SV_ONSTACK
bit is set in
.Fa sv_flags ,
E 9
the system will deliver the signal to the process on a
E 3
D 9
.IR "signal stack" ,
E 9
I 9
.Em "signal stack" ,
E 9
specified with
D 9
.IR sigstack (2).
E 9
I 9
D 11
.Xr sigstack 2 .
E 11
I 11
.Xr sigaltstack 2 .
E 11
E 9
If 
D 9
.I ovec
E 9
I 9
.Fa ovec
E 9
is non-zero, the previous handling information for the signal
is returned to the user.
D 9
.PP
E 9
I 9
.Pp
E 9
The following is a list of all signals
with names as in the include file
D 9
.RI < signal.h >:
E 2
.LP
.nf
D 2
.ta \w'SIGMMMM 'u +\w'15*  'u
E 2
I 2
.ta \w'SIGVTALRM 'u +\w'15*  'u
E 2
SIGHUP	1	hangup
SIGINT	2	interrupt
SIGQUIT	3*	quit
D 2
SIGILL	4*	illegal instruction (not reset when caught)
SIGTRAP	5*	trace trap (not reset when caught)
E 2
I 2
SIGILL	4*	illegal instruction
SIGTRAP	5*	trace trap
E 2
SIGIOT	6*	IOT instruction
SIGEMT	7*	EMT instruction
SIGFPE	8*	floating point exception
D 2
SIGKILL	9	kill (cannot be caught, held or ignored)
E 2
I 2
SIGKILL	9	kill (cannot be caught, blocked, or ignored)
E 2
SIGBUS	10*	bus error
SIGSEGV	11*	segmentation violation
SIGSYS	12*	bad argument to system call
SIGPIPE	13	write on a pipe with no one to read it
SIGALRM	14	alarm clock
SIGTERM	15	software termination signal
D 2
	16	unassigned
SIGSTOP	17\*d	stop (cannot be caught, held or ignored)
E 2
I 2
SIGURG	16\*b	urgent condition present on socket
SIGSTOP	17\*d	stop (cannot be caught, blocked, or ignored)
E 2
SIGTSTP	18\*d	stop signal generated from keyboard
D 2
SIGCONT	19\*b	continue after stop
E 2
I 2
D 8
SIGCONT	19\*b	continue after stop (cannot be blocked)
E 8
I 8
SIGCONT	19\*b	continue after stop
E 8
E 2
SIGCHLD	20\*b	child status has changed
SIGTTIN	21\*d	background read attempted from control terminal
SIGTTOU	22\*d	background write attempted to control terminal
D 2
SIGTINT	23\*b	input record is available at control terminal
SIGXCPU	24	cpu time limit exceeded (see \fIvlimit\fR(2))
SIGXFSZ	25	file size limit exceeded (see \fIvlimit\fR(2))
E 2
I 2
SIGIO	23\*b	i/o is possible on a descriptor (see \fIfcntl\fP(2))
SIGXCPU	24	cpu time limit exceeded (see \fIsetrlimit\fP(2))
SIGXFSZ	25	file size limit exceeded (see \fIsetrlimit\fP(2))
SIGVTALRM	26	virtual time alarm (see \fIsetitimer\fP(2))
SIGPROF	27	profiling timer alarm (see \fIsetitimer\fP(2))
I 3
SIGWINCH	28\*b	window size change
I 8
SIGINFO	29\*b	status request from keyboard
E 8
I 5
SIGUSR1	30	user defined signal 1
SIGUSR2	31	user defined signal 2
E 5
E 3
E 2
.fi
.PP
The starred signals in the list above cause a core image
D 2
if not caught, held or ignored.
E 2
I 2
if not caught or ignored.
E 2
.PP
E 9
I 9
.Aq Pa signal.h :
.Bl -column SIGVTALARMXX "create core imagexxx"
.It Sy "  NAME  " "	  Default Action  " "	              Description"
.It Dv SIGHUP No "	terminate process" "	terminal line hangup"
.It Dv SIGINT No "	terminate process" "	interrupt program"
.It Dv SIGQUIT No "	create core image" "	quit program"
.It Dv SIGILL No "	create core image" "	illegal instruction"
.It Dv SIGTRAP No "	create core image" "	trace trap"
.It Dv SIGABRT No "	create core image" Xr 	abort 2
call (formerly
.Dv SIGIOT )
.It Dv SIGEMT No "	create core image" "	emulate instruction executed"
.It Dv SIGFPE No "	create core image" "	floating-point exception"
.It Dv SIGKILL No "	terminate process" "	kill program"
.It Dv SIGBUS No "	create core image" "	bus error"
.It Dv SIGSEGV No "	create core image" "	segmentation violation"
.It Dv SIGSYS No "	create core image" "	system call given invalid argument"
.It Dv SIGPIPE No "	terminate process" "	write on a pipe with no reader"
.It Dv SIGALRM No "	terminate process" "	real-time timer expired"
.It Dv SIGTERM No "	terminate process" "	software termination signal"
.It Dv SIGURG No "	discard signal" "	urgent condition present on socket"
.It Dv SIGSTOP No "	stop process" "	stop (cannot be caught or ignored)"
.It Dv SIGTSTP No "	stop process" "	stop signal generated from keyboard"
.It Dv SIGCONT No "	discard signal" "	continue after stop"
.It Dv SIGCHLD No "	discard signal" "	child status has changed"
.It Dv SIGTTIN No "	stop process" "	background read attempted from control terminal"
.It Dv SIGTTOU No "	stop process" "	background write attempted to control terminal"
.It Dv SIGIO No "	discard signal" Tn "	I/O"
is possible on a descriptor (see
.Xr fcntl 2 )
.It Dv SIGXCPU No "	terminate process" "	cpu time limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGXFSZ No "	terminate process" "	file size limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGVTALRM No "	terminate process" "	virtual time alarm (see"
.Xr setitimer 2 )
.It Dv SIGPROF No "	terminate process" "	profiling timer alarm (see"
.Xr setitimer 2 )
.It Dv SIGWINCH No "	discard signal" "	Window size change"
.It Dv SIGINFO No "	discard signal" "	status request from keyboard"
.It Dv SIGUSR1 No "	terminate process" "	User defined signal 1"
.It Dv SIGUSR2 No "	terminate process" "	User defined signal 2"
.El
.Pp
E 9
D 2
If
.I func
is SIG_DFL, the default action
for signal
.I sig
is reinstated; this default is termination
E 2
I 2
Once a signal handler is installed, it remains installed
until another
D 9
.I sigvec
call is made, or an 
.IR execve (2)
E 9
I 9
.Fn sigvec
call is made, or an
.Xr execve 2
E 9
is performed.
D 9
The default action for a signal may be reinstated by setting
.I sv_handler
to SIG_DFL; this default is termination
E 2
(with a core image for starred signals)
except for signals marked with \*b or \*d.
D 2
Signals marked with \*b are discarded if the action is SIG_DFL; signals marked
E 2
I 2
Signals marked with \*b are discarded if the action
is SIG_DFL; signals marked
E 2
with \*d cause the process to stop.
E 9
I 9
A signal-specific default action may be reset by
setting
.Fa sv_handler
to
.Dv SIG_DFL .
The defaults are process termination, possibly with core dump;
no action; stopping the process; or continuing the process.
See the above signal list for each signal's default action.
E 9
If
D 2
.I func
is SIG_HOLD
the signal is remembered if it occurs, but not presented to the process;
it may be presented later if the process changes the action for the signal.
If
.I func
E 2
I 2
D 9
.I sv_handler
E 2
is SIG_IGN the signal is subsequently ignored,
D 2
and pending instances of the signal are discarded (i.e. if the
action was previously SIG_HOLD.)
Otherwise
when the signal occurs
.I func
will be called.
E 2
I 2
and pending instances of the signal are discarded.
E 2
.PP
D 2
A return from the function will
continue the process at the point it was interrupted.
Except as indicated,
a signal, set with
.I sigsys,
is reset to SIG_DFL after being caught.  However by
specifying DEFERSIG(func) as the last argument to
.I sigsys,
one causes the action to be set to
SIG_HOLD before the interrupt is taken, so that recursive instances
of the signal cannot occur during handling of the signal.
.PP
When a caught signal occurs
during certain system calls, the call terminates prematurely.
In particular this can occur
E 2
I 2
D 3
If a caught signal occurs
during certain system calls, causing
the call to terminate prematurely, the call
is automatically restarted.  In particular this can occur
E 2
during a
.I read
E 3
I 3
If a caught signal occurs during certain system calls,
E 9
I 9
.Fa sv_handler
is
.Dv SIG_IGN
current and pending instances
of the signal are ignored and discarded.
.Pp
If a signal is caught during the system calls listed below,
E 9
the call is normally restarted.
The call can be forced to terminate prematurely with an
D 9
EINTR error return by setting the SV_INTERRUPT bit in
.I sv_flags.
E 9
I 9
.Dv EINTR
error return by setting the
.Dv SV_INTERRUPT
bit in
.Fa sv_flags .
E 9
D 8
The affected system calls are
.IR read (2)
E 3
or
.IR write (2)
D 2
on a slow device (like a terminal; but not a file)
E 2
I 2
on a slow device (such as a terminal; but not a file)
E 8
I 8
The affected system calls include
D 9
.IR read (2),
.IR write (2),
.IR sendto (2),
.IR recvfrom (2),
.IR sendmsg (2)
E 9
I 9
.Xr read 2 ,
.Xr write 2 ,
.Xr sendto 2 ,
.Xr recvfrom 2 ,
.Xr sendmsg 2
E 9
and
D 9
.IR recvmsg (2)
E 9
I 9
.Xr recvmsg 2
E 9
on a communications channel or a slow device (such as a terminal,
but not a regular file)
E 8
E 2
and during a
D 2
.I pause
or
E 2
D 8
.IR wait (2).
E 8
I 8
D 9
.IR wait (2)
E 9
I 9
.Xr wait 2
E 9
or
D 9
.IR ioctl (2).
E 9
I 9
.Xr ioctl 2 .
E 9
However, calls that have already committed are not restarted,
but instead return a partial success (for example, a short read count).
E 8
D 2
When a signal occurs
during one of these calls,
the saved user status
is arranged in such a way that,
when return from the
signal-catching takes place, it will appear that the
system call returned an error status.
The user's program may then, if it wishes,
re-execute the call.
.I Read
and
.I write
calls which have done no I/O,
.IR ioctl s
blocked with SIGTTOU,
and
.I wait3
calls are restarted.
E 2
D 9
.PP
E 9
I 9
.Pp
E 9
D 2
The value of
.I sigsys
is the previous (or initial)
value of
.I func
for the particular signal.
.PP
The system provides two other functions by oring bits into the
signal number:
SIGDOPAUSE causes the process to
.I pause
after changing the signal action.  It can be used to atomically
re-enable a held signal which was being processed and wait for
another instance of the signal.
SIGDORTI causes the system to simulate an
.I rei
instruction
clearing the mark the system placed on the stack at the point of
interrupt before checking for further signals to be presented due
to the specified change in signal actions.  This allows a
signal package such as
.IR sigset (3)
to dismiss from interrupts cleanly removing the old state from
the stack before another instance of the interrupt is presented.
.PP
E 2
After a
D 9
.IR fork (2)
E 9
I 9
.Xr fork 2
E 9
or
D 9
.IR vfork (2)
the child inherits
E 9
I 9
.Xr vfork 2
E 9
D 2
all signals.
.IR  Exec (2)
E 2
I 2
D 3
all signals, the signal mask, and the signal stack.
E 3
I 3
all signals, the signal mask, the signal stack,
D 9
and the restart/interrupt flags.
E 3
.PP
.IR  Execve (2)
E 2
resets all
D 2
caught signals to default action; held signals remain held
and ignored signals remain ignored.
E 2
I 2
D 3
caught signals to default action; ignored signals remain ignored;
the signal mask remains the same; the signal stack state is reset.
E 3
I 3
caught signals to default action and
E 9
I 9
and the restart/interrupt flags are inherited by the child.
.Pp
.Xr Execve 2
reinstates the default
action for all signals which were caught and
E 9
resets all signals to be caught on the user stack.
Ignored signals remain ignored;
the signal mask remains the same;
signals that interrupt system calls continue to do so.
E 3
D 9
.SH NOTES
E 9
I 9
.Sh NOTES
E 9
The mask specified in 
D 9
.I vec
D 8
is not allowed to block SIGKILL, SIGSTOP, or SIGCONT.  This
is done silently by the system.
E 8
I 8
is not allowed to block SIGKILL or SIGSTOP.
E 9
I 9
.Fa vec
is not allowed to block
.Dv SIGKILL
or
.Dv SIGSTOP .
E 9
This is done silently by the system.
E 8
I 3
D 9
.PP
The SV_INTERRUPT flag is not available in 4.2BSD,
E 9
I 9
.Pp
The
.Dv SV_INTERRUPT
flag is not available in
.Bx 4.2 ,
E 9
hence it should not be used if backward compatibility is needed.
E 3
D 9
.SH "RETURN VALUE
E 9
I 9
.Sh RETURN VALUES
E 9
A 0 value indicated that the call succeeded.  A \-1 return value
D 3
indicates an error occured and
E 3
I 3
indicates an error occurred and
E 3
D 9
.I errno
E 9
I 9
.Va errno
E 9
is set to indicated the reason.
D 9
.SH ERRORS
.I Sigvec
E 9
I 9
.Sh ERRORS
.Fn Sigvec
E 9
will fail and no new signal handler will be installed if one
of the following occurs:
D 9
.TP 15
[EFAULT]
E 9
I 9
.Bl -tag -width [EINVAL]
.It Bq Er EFAULT
E 9
Either
D 9
.I vec
E 9
I 9
.Fa vec
E 9
or 
D 9
.I ovec
E 9
I 9
.Fa ovec
E 9
D 4
points to memory which is not a valid part of the process
E 4
I 4
points to memory that is not a valid part of the process
E 4
address space.
D 9
.TP 15
[EINVAL]
.I Sig
E 9
I 9
.It Bq Er EINVAL
.Fa Sig
E 9
is not a valid signal number.
D 9
.TP 15
[EINVAL]
An attempt is made to ignore or supply a handler for SIGKILL
or SIGSTOP.
D 8
.TP 15
[EINVAL]
An attempt is made to ignore SIGCONT (by default SIGCONT
is ignored).
E 8
E 2
.SH "SEE ALSO"
D 8
kill(1),
ptrace(2), kill(2),
E 8
I 8
sigaction(2), kill(1), ptrace(2), kill(2),
sigprocmask(2), sigsuspend(2),
E 8
D 2
jobs(3), sigset(3), setjmp(3),
tty(4)
.SH DIAGNOSTICS
The value BADSIG is returned if the
given signal is out of range.
.SH BUGS
The job control facilities are not available in standard version 7 UNIX.
These facilities are still under development and may change in future
releases of the system as better inter-process communication facilities
and support for virtual terminals become available.  The options and
specifications of this facility and the system calls supporting it
are thus subject to change.
.PP
Since only one signal action can be changed at a time, it is not
possible to get the effect of SIGDOPAUSE for more than one signal
at a time.
.PP
The traps (listed below) should be distinguishable by extra arguments
to the signal handler, and all hardware supplied parameters should
be made available to the signal routine.
.SH "ASSEMBLER (PDP-11)"
(signal = 48.)
.br
.B sys  signal; sig; label
.br
(old label in r0)
.PP
If
.I label
is 0,
default action is reinstated.
If
.I label
is 1, the signal is ignored.
If
.I label
is 3, the signal is held.
Any other even
.I label
specifies an address in the process
where an interrupt is simulated.
If label is otherwise odd, the signal is sent to the function
whose address is the label with the low bit cleared
with the action set to SIG_HOLD.
(Thus DEFERSIG is indicated by the low bit of a signal catch address.
An RTI or RTT instruction will return from the
interrupt.)
.SH "NOTES (VAX-11)"
E 2
I 2
D 3
sigblock(2), sigsetmask(2), sigpause(2)
sigstack(2), sigvec(2), setjmp(3), tty(4)
E 3
I 3
sigblock(2), sigsetmask(2), sigpause(2),
D 8
sigstack(2), sigvec(2), setjmp(3), siginterrupt(3), tty(4)
E 8
I 8
sigstack(2), sigvec(2), sigsetops(3), setjmp(3), siginterrupt(3), tty(4)
E 8
E 3
.SH "NOTES  (VAX-11)"
E 9
I 9
.It Bq Er EINVAL
An attempt is made to ignore or supply a handler for
.Dv SIGKILL
or
.Dv SIGSTOP .
.El
.Sh SEE ALSO
D 10
.Xr sigaction 2 ,
E 10
.Xr kill 1 ,
D 10
.Xr ptrace 2 ,
E 10
.Xr kill 2 ,
D 10
.Xr sigprocmask 2 ,
.Xr sigsuspend 2 ,
E 10
I 10
.Xr ptrace 2 ,
.Xr sigaction 2 ,
I 11
.Xr sigaltstack 2 ,
E 11
E 10
.Xr sigblock 2 ,
D 10
.Xr sigsetmask 2 ,
E 10
.Xr sigpause 2 ,
I 10
.Xr sigprocmask 2 ,
.Xr sigsetmask 2 ,
E 10
D 11
.Xr sigstack 2 ,
E 11
D 10
.Xr sigvec 2 ,
.Xr sigsetops 3 ,
E 10
I 10
.Xr sigsuspend 2 ,
E 10
.Xr setjmp 3 ,
.Xr siginterrupt 3 ,
I 10
.Xr signal 3,
.Xr sigsetops 3 ,
E 10
.Xr tty 4
.Sh EXAMPLE
On the
.Tn VAX\-11
E 9
E 2
The handler routine can be declared:
D 9
.PP
D 2
    handler(signo, param, xx, pc, psl)
E 2
I 2
D 8
    handler(sig, code, scp)
E 8
I 8
    void handler(sig, code, scp)
E 8
    int sig, code;
    struct sigcontext *scp;
E 2
.PP
E 9
I 9
.Bd -literal -offset indent
void handler(sig, code, scp)
int sig, code;
struct sigcontext *scp;
.Ed
.Pp
E 9
Here
D 2
.I signo
is the signal name, into which the hardware faults and traps are
mapped as defined below.  Param is the parameter which is either a constant
E 2
I 2
D 9
.I sig
E 9
I 9
.Fa sig
E 9
is the signal number, into which the hardware faults and traps are
mapped as defined below. 
D 9
.I Code
E 9
I 9
.Fa Code
E 9
D 4
is a parameter which is either a constant
E 4
I 4
is a parameter that is either a constant
E 4
E 2
as given below or, for compatibility mode faults, the code provided by
D 2
the hardware.  Compatibility mode faults are distinguished from the
other SIGILL traps by having PSL_CM set in the psl.
E 2
I 2
the hardware (Compatibility mode faults are distinguished from the
D 9
other SIGILL traps by having PSL_CM set in the psl).
.I Scp
E 9
I 9
other
.Dv SIGILL
traps by having
.Dv PSL_CM
set in the psl).
.Fa Scp
E 9
is a pointer to the
D 9
.I sigcontext
E 9
I 9
.Fa sigcontext
E 9
structure (defined in
D 9
.RI < signal.h >),
E 9
I 9
.Aq Pa signal.h ) ,
E 9
used to restore the context from before the signal.
E 2
D 9
.PP
D 2
The routine is actually called with only 3 parameters specified in
the \fIcalls\fR or \fIcallg\fR instruction.  After return from
the signal handler the \fIpc\fR and \fIpsl\fR are popped off of the
stack with an \fIrei\fR, so they act as ``value-result'' parameters
unlike normal C value parameters.
.PP
E 2
The following defines the mapping of hardware traps to signals
D 2
and codes.  All of these symbols are defined in <signal.h>:
E 2
I 2
and codes.  All of these symbols are defined in
.RI < signal.h >:
E 2
.LP
.ta \w'     Floating/decimal divide by zero   'u +\w'15*  'u +8n
.nf
   Hardware condition	Signal	Code

Arithmetic traps:
   Integer overflow	SIGFPE	FPE_INTOVF_TRAP
   Integer division by zero	SIGFPE	FPE_INTDIV_TRAP
   Floating overflow trap	SIGFPE	FPE_FLTOVF_TRAP
   Floating/decimal division by zero	SIGFPE	FPE_FLTDIV_TRAP
   Floating underflow trap	SIGFPE	FPE_FLTUND_TRAP
   Decimal overflow trap	SIGFPE	FPE_DECOVF_TRAP
   Subscript-range	SIGFPE	FPE_SUBRNG_TRAP
   Floating overflow fault	SIGFPE	FPE_FLTOVF_FAULT
   Floating divide by zero fault	SIGFPE	FPE_FLTDIV_FAULT
   Floating underflow fault	SIGFPE	FPE_FLTUND_FAULT
Length access control	SIGSEGV
Protection violation	SIGBUS
Reserved instruction	SIGILL	ILL_RESAD_FAULT
Customer-reserved instr.	SIGEMT
Reserved operand	SIGILL	ILL_PRIVIN_FAULT
Reserved addressing	SIGILL	ILL_RESOP_FAULT
Trace pending	SIGTRAP
Bpt instruction	SIGTRAP
Compatibility-mode	SIGILL	hardware supplied code
Chme	SIGSEGV
Chms	SIGSEGV
Chmu	SIGSEGV
.fi
I 2
.SH BUGS
E 9
I 9
.Sh BUGS
E 9
D 3
This manual page is confusing.
E 3
I 3
This manual page is still confusing.
E 3
E 2
E 1
