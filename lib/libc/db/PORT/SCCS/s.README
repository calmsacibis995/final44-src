h20429
s 00000/00001/00129
d D 8.4 94/02/21 17:21:59 bostic 7 6
c don't need strerror(3)
e
s 00039/00017/00091
d D 8.3 94/02/21 16:19:46 bostic 6 5
c update for 1.74
e
s 00092/00044/00016
d D 8.2 93/09/06 10:58:59 bostic 5 4
c rework for separate architecture/os directories a la nvi
e
s 00000/00000/00060
d D 8.1 93/06/02 00:23:43 bostic 4 3
c 4.4BSD snapshot (revision 8.1)
e
s 00028/00007/00032
d D 5.3 93/04/30 09:26:50 bostic 3 2
c update from Eric
e
s 00038/00045/00001
d D 5.2 93/02/14 15:45:26 bostic 2 1
c update for Eric and sendmail
e
s 00046/00000/00000
d D 5.1 93/02/14 14:42:07 bostic 1 0
c date and time created 93/02/14 14:42:07 by bostic
e
u
U
t
T
I 1
D 2
/*-
 * Copyright (c) 1991 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)README	5.2 (Berkeley) 9/26/91
 */
E 2
I 2
#	%W% (Berkeley) %G%
E 2

D 2
The files are:
	README		This file.
	bcopy.c		A source file that can be compiled into memmove,
			memcpy or bcopy.  It handles overlapping copies,
			So if your system's doesn't, use it.
	cdefs.h		Function prototype #defines.
	compat.h	Compatibility header file for lots of things;
			necessary if your system isn't POSIX 1003.1 and
			ANSI C compliant.  You'll have to pick and choose
			for some of them!
	mktemp.c	Mktemp(3) and mkstemp(3) for systems lacking them.
E 2
I 2
D 5
This is the directory to use for creating a library of the dbopen(3)
routines.  The Makefile builds the base system.  By changing it and
the compat.h file, you should be able to pick and choose the various
things your system needs to make libdb run.
E 5
I 5
This is the area for building the libdb library.  There are a number
of porting directories, for various architecture/OS combinations.  Pick
the one that's closest to yours and try "make".  For the rest of this
file, I'll use "MACH" as a fake architecture/OS name.
E 5

D 5
The knobs that you may have to turn:
E 5
I 5
To PORT to a new system, create the following subdirectories and
symbolic links.
E 5

D 5
In the Makefile:
D 3
	If you don't have mktemp or mkstemp on your system, add
	"mktemp.o" to the COMP list.
E 3
I 3
	If you don't have mktemp(3) or mkstemp(3) on your system, add
	"mktemp.o" to the MISC list.
E 5
I 5
	mkdir MACH		(for example: mkdir sunos.4.0)
	cd MACH
	cp ../Makefile .
	chmod 664 Makefile
	ln -s ../clib .
D 6
	mkdir include local
E 6
I 6
	mkdir include
E 6
	ln -s include sys
	cd include
	ln -s ../../include/*.h .
	rm compat.h
	cp ../../include/compat.h .
	chmod 664 compat.h
	cd ..
E 5
E 3

I 3
D 5
	If you don't have snprintf(3) on your system, add snprintf.o
	to the MISC list.
E 5
I 5
The basic idea is that you now have a local area that you can modify.
In particular, you have local copies of the Makefile and the include
file compat.h.  Read through the Makefile and compat.h and make whatever
changes are appropriate to your system.  If there's an architecture
that's close to yours, you probably should diff the Makefile and
compat.h in that tree against the standard ones and see what changes
were necessary, as they're probably necessary for you as well.  Then,
enter "make" and see what happens!
E 5

D 5
	If you don't have memmove(3), add memmove.o to the MISC list.
E 5
I 5
D 6
There are several subroutines that are found in POSIX 1003.2, or ANSI
E 6
I 6
There are several subroutines that are found in POSIX 1003.2, ANSI
E 6
C, or 4.4BSD that you may not have.  Once you get libdb.a to compile,
go through the list of undefined routines and add entries to the MISC
line in the Makefile as necessary.
E 5

I 5
D 6
If you have to add some functions that are missing, please don't add
them in the PORT/clib directory.  Add them in MACH/local directory,
and add lines of the form:
E 6
I 6
If you have to add some functions that are missing (and which aren't
in the PORT/clib directory), please don't add them in the PORT/clib
directory.  Add them in a MACH/local directory, and add lines of the
form:
E 6

	function.o: local/function.o
		${CL} -Ilocal local/function.o

to your local Makefile.

Hopefully, over time, we'll develop a set of system directories that
D 6
are known to work.  If you send me the changes that were necessary
to make your system work, this will happen much more quickly.
E 6
I 6
are known to work.  If you send me the changes that were necessary to
make your system work, this will happen much more quickly.
E 6

In some of the system directories, you'll see a file named OTHER_PATCHES.
This is a set of patches which you'll have to make from the top-level db
D 6
directory to get libdb.a to run on this system.
E 6
I 6
directory to get libdb.a to run on this system:
E 6

I 6
	cd ..
	patch < PORT/MACH/OTHER_PATCHES

If patch prompts you for the name of the file to modify (some versions
of patch don't figure it out on their own) use the file name which patch
displays.

E 6
Some knobs you may have to turn:

E 5
E 3
In include/compat.h:
D 5
	Before attempting to build this library, you should skim through
	the compat.h file, and adjust it as necessary for your system.
E 5
I 5
D 6
	Before attempting to build nvi, you should look through the
E 6
I 6
	Before attempting to build libdb, you should look through the
E 6
	compat.h file, and adjust it as necessary for your system.
E 5
	It's possible to use the #ifndef construct to figure out if a
	#ifdef has been set, but C provides no similar method to figure
D 5
	out if a typedef has been done.  All of the typedef's are grouped
	at the top of compat.h, your compile errors will tell you which
	ones you need.
E 5
I 5
	out if a typedef has been done.  Your compile errors should
	give you a good indication of which ones you need.
E 5

I 3
D 5
	Particularly subtle problems can occur if you don't have the
	BYTE_ORDER set right or if the realloc define is wrong.
E 5
D 6

E 6
E 3
D 5
Some other problems:
	You may see warning messages about illegal pointer combinations.
	It's because systems prototype malloc, calloc and realloc in
	different places.  If you want to stop the warnings, find out
	where your system prototypes them, and include it in compat.h,
	or, just prototype them yourself.
E 5
I 5
You may see warning messages about illegal pointer combinations.  Systems
prototype malloc, calloc and realloc in different places, and the missing
prototypes will produce such warnings.  You may also see lots of warning
messages about #define's being redefined.  These can mostly be ignored.
In general, I ignore all warning messages until something doesn't work.
Some systems produce thousands of lines of completely useless warnings.
E 5

D 3
	The dbopen(3) routines also use the snprintf(3) function.  If
	you don't have this function, change the snprintf() call in
	btree/bt_open.c:tmp() from snprintf() to sprintf(), making sure
	to delete the SECOND argument, the size of the buffer.

E 3
D 5
To install:
	Programs using the dbopen(3) interface have to include db.h.
	To install the library, you'll need to put db.h (found in the
	directory PORT/include) and the library libdb.a in some place
	accesible to your program.
E 5
I 5
The other parts of the PORT directory are as follows:
E 5
I 3

D 5
Hints:
	SunOS 4.1.2 works with ``MISC=realloc.o snprintf.o memmove.o''
	and the include/compat.h realloc ``#if 0'' changed to ``#if 1''.
	SunOS gives a bunch of warning messages on the malloc family
	routines.
E 5
I 5
	The directory PORT/clib is a set of functions that the 4.4BSD
	C library had and which your system may not have.  They are
	added to the MISC line of the Makefile if they aren't defined
	when you try and load libdb.a.
	
	The directory PORT/include is header files that the 4.4BSD
D 6
	system had which your system may not have.  The really important
	one is compat.h, which is a set of compatibility work-arounds
	that you'll almost certainly have to modify for a new system.
E 6
I 6
	system had which your system may not have.  There is also
	one really important extra one, named compat.h, which is a
	set of compatibility work-arounds that you'll almost certainly
	have to copy and modify for a new system.
E 6
E 5

D 5
	Ultrix 4.2A works with ``MISC=realloc.o snprintf.o memmove.o''
	and the include/compat.h realloc ``#if 0'' changed to ``#if 1''
	and BYTE_ORDER changed from BIG_ENDIAN to LITTLE_ENDIAN.
	Ultrix does not give warning messages on the malloc family
	routines.
E 5
I 5
	The symbolic link PORT/sys points to the PORT/include directory
D 6
	so that includes of the form <sys/xxx.h> work.
E 6
I 6
	so that includes of the form <sys/include.h> work.
E 6
E 5

D 5
	The recno routines require the mmap(2) call.  It wouldn't be
	difficult to port this package to a system without mmap.  Change
	rec_open.c to do slightly different initialization and to write
	two new routines for rec_get.c that handle regular files using
	reads and writes.
E 5
I 5
Some of the more common portability problems:

	If you don't have:

D 6
		memmove(3), add memmove.o
		mkstemp(3), add mktemp.o
E 6
I 6
		memmove(3):	add memmove.o
		mkstemp(3):	add mktemp.o
D 7
		strerror(3):	add strerror.o
E 7
E 6

			... to the MISC line in the Makefile.

	If realloc(3) of a NULL pointer on your system isn't the same
	as a malloc(3) call, add realloc.o to the MISC line in the
	Makefile.

	If you don't have snprintf/vsnprintf(3), add snprintf.o to the
	MISC line in the Makefile.  This workaround depends on your
	system having vsprintf(3) -- if you don't, there's no workaround
	other than changing the source code to not use the snprintf calls.
	If you have to make that change, check to see if your vsprintf
	returns a length or a char *; if it's the latter, make sure you
D 6
	set VSPRINTF_CHARSTAR in the include/compat.h file.
E 6
I 6
	set VSPRINTF_CHARSTAR in the MACH/include/compat.h file.

Installing the DB library:

	The Makefile builds a C library named libdb.a.  This file needs
	to be installed in a place where the loader will automatically
	look for it (or, if you're building it for a single project,
	wherever that project's Makefile loads it from).

	In addition, the header file PORT/include/db.h must be copied to
	a directory (often /usr/include/) where programs that use the
	db package can include it in their source.  (If you intend to use
	the ndbm interface to libdb, you'll need to copy the header file
	PORT/include/ndbm.h as well.)
E 6
E 5
E 3
E 2
E 1
