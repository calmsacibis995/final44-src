h56616
s 00007/00006/00119
d D 8.5 94/02/21 15:11:39 bostic 8 7
c first pass at making DB use basic integral types (the Alpha port)
e
s 00018/00018/00107
d D 8.4 94/01/02 11:58:30 bostic 7 6
c make the db.h HASHINFO element order match the man page
e
s 00001/00001/00124
d D 8.3 94/01/02 11:40:39 bostic 6 5
c copyediting for Usenix manuals
e
s 00002/00002/00123
d D 8.2 93/08/17 10:18:34 bostic 5 4
c add LIBTP reference, clean up additional reference spacing
e
s 00002/00002/00123
d D 8.1 93/06/06 22:44:30 bostic 4 3
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/00123
d D 5.2 93/06/06 22:41:11 bostic 3 1
c typo's (cachesize *should* be a size_t, but not this close to 44)
e
s 00002/00002/00123
d R 8.1 93/06/04 15:22:32 bostic 2 1
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00125/00000/00000
d D 5.1 91/09/04 11:36:42 bostic 1 0
c break db(3) up into multiple manual pages
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 4
I 4
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 4
.\"
.\" %sccs.include.redist.man%
.\"
.\"	%W% (Berkeley) %G%
.\"
.TH HASH 3 "%Q%"
.UC 7
.SH NAME
hash \- hash database access method
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <db.h>
.ft R
.fi
.SH DESCRIPTION
The routine
.IR dbopen
is the library interface to database files.
One of the supported file formats is hash files.
The general description of the database access methods is in
.IR dbopen (3),
this manual page describes only the hash specific information.
.PP
The hash data structure is an extensible, dynamic hashing scheme.
.PP
The access method specific data structure provided to
.I dbopen
is defined in the <db.h> include file as follows:
.sp
typedef struct {
.RS
D 8
int bsize;
E 8
I 8
u_int bsize;
E 8
.br
D 3
u_int cachesize;
E 3
I 3
D 7
int cachesize;
E 3
.br
E 7
D 8
int ffactor;
E 8
I 8
u_int ffactor;
E 8
.br
I 7
D 8
int nelem;
E 8
I 8
u_int nelem;
E 8
.br
D 8
int cachesize;
E 8
I 8
u_int cachesize;
E 8
.br
E 7
D 3
u_long (*hash)(const void *, const size_t);
E 3
I 3
D 8
u_long (*hash)(const void *, size_t);
E 8
I 8
u_int32_t (*hash)(const void *, size_t);
E 8
E 3
.br
int lorder;
D 7
.br
int nelem;
E 7
.RE
} HASHINFO;
.PP
The elements of this structure are as follows:
.TP
bsize
.I Bsize
defines the hash table bucket size, and is, by default, 256 bytes.
It may be preferable to increase the page size for disk-resident tables
and tables with large data items.
.TP
D 7
cachesize
A suggested maximum size, in bytes, of the memory cache.
This value is
.B only
advisory, and the access method will allocate more memory rather
than fail.
.TP
E 7
ffactor
.I Ffactor
indicates a desired density within the hash table.
It is an approximation of the number of keys allowed to accumulate in any
one bucket, determining when the hash table grows or shrinks.
The default value is 8.
.TP
I 7
nelem
.I Nelem
is an estimate of the final size of the hash table.
If not set or set too low, hash tables will expand gracefully as keys
are entered, although a slight performance degradation may be noticed.
The default value is 1.
.TP
cachesize
A suggested maximum size, in bytes, of the memory cache.
This value is
.B only
advisory, and the access method will allocate more memory rather
than fail.
.TP
E 7
hash
.I Hash
is a user defined hash function.
Since no hash function performs equally well on all possible data, the
user may find that the built-in hash function does poorly on a particular
data set.
User specified hash functions must take two arguments (a pointer to a byte
D 8
string and a length) and return an u_long to be used as the hash value.
E 8
I 8
string and a length) and return a 32-bit quantity to be used as the hash
value.
E 8
.TP
lorder
The byte order for integers in the stored database metadata.
The number should represent the order as an integer; for example, 
big endian order would be the number 4,321.
If
.I lorder
is 0 (no order is specified) the current host order is used.
If the  file already exists, the specified value is ignored and the
value specified when the tree was created is used.
D 7
.TP
nelem
.I Nelem
is an estimate of the final size of the hash table.
If not set or set too low, hash tables will expand gracefully as keys
are entered, although a slight performance degradation may be noticed.
The default value is 1.
E 7
.PP
If the file already exists (and the O_TRUNC flag is not specified), the
values specified for the parameters bsize, ffactor, lorder and nelem are
ignored and the values specified when the tree was created are used.
.PP
If a hash function is specified,
.I hash_open
will attempt to determine if the hash function specified is the same as
the one with which the database was created, and will fail if it is not.
.PP
Backward compatible interfaces to the routines described in
.IR dbm (3),
and
.IR ndbm (3)
D 6
are provided, however, these interfaces are not compatible with
E 6
I 6
are provided, however these interfaces are not compatible with
E 6
previous file formats.
.SH "SEE ALSO"
.IR btree (3),
.IR dbopen (3),
.IR mpool (3),
.IR recno (3)
D 5
.br
E 5
I 5
.sp
E 5
.IR "Dynamic Hash Tables" ,
Per-Ake Larson, Communications of the ACM, April 1988.
D 5
.br
E 5
I 5
.sp
E 5
.IR "A New Hash Package for UNIX" ,
Margo Seltzer, USENIX Proceedings, Winter 1991.
.SH BUGS
Only big and little endian byte order is supported.
E 1
