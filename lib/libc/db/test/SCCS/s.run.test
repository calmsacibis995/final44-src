h42358
s 00029/00018/00670
d D 8.7 93/09/16 16:41:06 bostic 27 26
c make it so you can a class of tests, too
e
s 00043/00014/00645
d D 8.6 93/09/07 15:05:25 bostic 26 23
c rewrite test20 in old-style awk commands
c the bug is that printf(".*s", 0, string); in old awk printed the whole line,
c and substr(field, 1, 0) gives you an empty line -- make it all work
e
s 00003/00002/00658
d R 8.7 93/09/07 14:07:47 bostic 25 24
c one more try, with feeling
e
s 00005/00004/00655
d R 8.6 93/09/07 14:05:05 bostic 24 23
c redo test20 in old-style awk programming, too
e
s 00001/00001/00658
d D 8.5 93/09/06 12:02:00 bostic 23 22
c remove temporary files when the run is done
e
s 00006/00005/00653
d D 8.4 93/09/06 11:38:13 bostic 22 21
c dictionary is in one of two places, normally
e
s 00145/00102/00513
d D 8.3 93/09/06 09:33:53 bostic 21 20
c Margo's version that's theoretically portable
e
s 00003/00004/00612
d D 8.2 93/08/17 10:19:13 bostic 20 19
c bug fixes from Margo
e
s 00000/00000/00616
d D 8.1 93/06/04 15:35:24 bostic 19 18
c 4.4BSD snapshot (revision 8.1)
e
s 00000/00005/00616
d D 5.18 93/06/04 15:35:22 bostic 18 17
c this doesn't need a copyright
e
s 00030/00009/00591
d D 5.17 93/05/22 14:15:00 bostic 17 16
c make test3 try different page size
e
s 00032/00000/00568
d D 5.16 93/05/01 16:20:05 bostic 16 15
c add different byte order test
e
s 00006/00006/00562
d D 5.15 93/04/29 12:06:54 bostic 15 14
c don't put comments in shell printf commands
e
s 00019/00019/00549
d D 5.14 93/01/10 13:38:11 bostic 14 13
c don't have empty then clauses
e
s 00025/00001/00543
d D 5.13 93/01/10 13:04:40 bostic 13 12
c add lots o' keys test with small page size to whack btree split code
e
s 00034/00000/00510
d D 5.12 92/12/04 17:26:24 bostic 12 11
c test for duplicate btree keys
e
s 00094/00062/00416
d D 5.11 92/12/04 17:08:52 bostic 11 10
c add cursor flag test, recno reverse insert test
e
s 00054/00019/00424
d D 5.10 92/11/13 18:13:00 bostic 10 9
c test R_CURSOR for both seq and put
e
s 00022/00002/00421
d D 5.9 92/11/13 18:01:41 bostic 9 8
c test R_CURSOR use before initialization
e
s 00003/00001/00420
d D 5.8 92/10/13 12:58:11 bostic 8 7
c prettiness
e
s 00009/00003/00412
d D 5.7 92/10/13 12:51:00 bostic 7 6
c add comparisons to overflow page test
e
s 00032/00014/00383
d D 5.6 92/10/09 16:45:16 bostic 6 5
c add overflow page test
e
s 00001/00001/00396
d D 5.5 92/10/01 22:23:03 bostic 5 4
c typo
e
s 00104/00003/00294
d D 5.4 92/08/28 17:29:02 bostic 4 3
c test8: bucketsize/fill factor for hashing
e
s 00140/00093/00157
d D 5.3 92/08/27 09:38:44 bostic 3 2
c checkpoint; some cleanups, reformatting, two new tests
e
s 00084/00011/00166
d D 5.2 92/08/26 17:49:45 bostic 2 1
c add alternating entries and reverse entries
e
s 00177/00000/00000
d D 5.1 92/08/26 12:58:42 bostic 1 0
c date and time created 92/08/26 12:58:42 by bostic
e
u
U
t
T
I 1
#!/bin/sh -
#
D 18
# Copyright (c) 1992 The Regents of the University of California.
# All rights reserved.
#
# %sccs.include.redist.sh%
#
E 18
#	%W% (Berkeley) %G%
#

# db regression tests
D 21

E 21
main()
{
D 21
	DICT=/usr/share/dict/words
I 3
	PROG=obj/dbtest
E 21
I 21

D 22
	DICT=/usr/dict/words
	PROG=dbtest
E 21
E 3
	TMP1=t1
	TMP2=t2
	TMP3=t3
E 22
I 22
DICT=/usr/share/dict/words
#DICT=/usr/dict/words
PROG=./dbtest
TMP1=t1
TMP2=t2
TMP3=t3
E 22

D 21
	test1
	test2
	test3
	test4
I 2
	test5
	test6
I 3
	test7
I 4
	test8
I 12
	test9
E 12
I 6
D 11
	test9
E 11
I 10
	test10
I 11
	test11
I 13
	test12
I 16
	test13
E 16
E 13
	test20
E 11
E 10
E 6
E 4
E 3
E 2
	rm -f $TMP1 $TMP2 $TMP3
E 21
I 21
D 27
	if [ $# -ge 1 ]; then
		for i in "$*"; do
			test$i
E 27
I 27
	if [ $# -eq 0 ]; then
		for t in 1 2 3 4 5 6 7 8 9 10 11 12 13 20; do
			test$t
E 27
		done
D 27
	else 
		test1
		test2
		test3
		test4
		test5
		test6
		test7
		test8
		test9
		test10
		test11
		test12
		test13
		test20
E 27
I 27
	else
		while [ $# -gt 0 ]
			do case "$1" in
			test*)
				$1;;
			[0-9]*)
				test$1;;
			btree)
				for t in 1 2 3 7 8 9 10 12 13; do
					test$t
				done;;
			hash)
				for t in 1 2 3 8 13 20; do
					test$t
				done;;
			recno)
				for t in 1 2 3 4 5 6 7 10 11; do
					test$t
				done;;
			*)
				echo "run.test: unknown test $1"
				echo "usage: run.test test# | type"
				exit 1
			esac
			shift
		done
E 27
D 23
		rm -f $TMP1 $TMP2 $TMP3
E 23
	fi
I 23
	rm -f $TMP1 $TMP2 $TMP3
E 23
E 21
I 11
	exit 0
E 11
}

# Take the first hundred entries in the dictionary, and make them
# be key/data pairs.
test1()
{
D 2
	printf "Test1: btree, hash: small key, small data pairs\n"
E 2
I 2
D 21
	printf "Test 1: btree, hash: small key, small data pairs\n"
E 21
I 21
	echo "Test 1: btree, hash: small key, small data pairs"
E 21
E 2
D 4
	for i in `sed 200q $DICT`; do
		printf "%s\n" $i
	done > $TMP1
E 4
I 4
	sed 200q $DICT > $TMP1
E 4
	for type in btree hash; do
		rm -f $TMP2 $TMP3
		for i in `sed 200q $DICT`; do
D 21
			printf "p\nk%s\nd%s\ng\nk%s\n" $i $i $i
E 21
I 21
			echo p
			echo k$i
			echo d$i
			echo g
			echo k$i
E 21
		done > $TMP2
D 3
		./dbtest -o $TMP3 $type $TMP2
E 3
I 3
		$PROG -o $TMP3 $type $TMP2
E 3
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 21
			printf "test1: type %s: failed\n" $type
E 21
I 21
			echo "test1: type $type: failed"
E 21
			exit 1
		fi
	done
D 2
	printf "Test1: recno: small key, small data pairs\n"
E 2
I 2
D 21
	printf "Test 1: recno: small key, small data pairs\n"
E 21
I 21
	echo "Test 1: recno: small key, small data pairs"
E 21
E 2
	rm -f $TMP2 $TMP3
	sed 200q $DICT |
D 3
		awk '{ 
			++i;
	    		printf("p\nk%d\nd%s\ng\nk%d\n", i, $0, i);
		}' > $TMP2
	./dbtest -o $TMP3 recno $TMP2
E 3
I 3
	awk '{ 
		++i;
		printf("p\nk%d\nd%s\ng\nk%d\n", i, $0, i);
	}' > $TMP2
	$PROG -o $TMP3 recno $TMP2
E 3
D 14
	if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
	if (cmp -s $TMP1 $TMP3) ; then :
E 14
	else
D 21
		printf "test1: type recno: failed\n"
E 21
I 21
		echo "test1: type recno: failed"
E 21
		exit 1
	fi
}

D 13
# Take the first hundred entries in the dictionary, and give them
E 13
I 13
# Take the first 200 entries in the dictionary, and give them
E 13
# each a medium size data entry.
test2()
{
D 2
	printf "Test2: btree, hash: small key, medium data pairs\n"
E 2
I 2
D 21
	printf "Test 2: btree, hash: small key, medium data pairs\n"
E 21
I 21
	echo "Test 2: btree, hash: small key, medium data pairs"
E 21
E 2
	mdata=abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
	echo $mdata |
D 3
	    awk '{ for (i = 1; i < 201; ++i) print $0 }' > $TMP1
E 3
I 3
	awk '{ for (i = 1; i < 201; ++i) print $0 }' > $TMP1
E 3
	for type in hash btree; do
		rm -f $TMP2 $TMP3
		for i in `sed 200q $DICT`; do
D 21
			printf "p\nk%s\nd%s\ng\nk%s\n" $i $mdata $i
E 21
I 21
			echo p
			echo k$i
			echo d$mdata
			echo g
			echo k$i
E 21
		done > $TMP2
D 3
		./dbtest -o $TMP3 $type $TMP2
E 3
I 3
		$PROG -o $TMP3 $type $TMP2
E 3
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 21
			printf "test2: type %s: failed\n" $type
E 21
I 21
			echo "test2: type $type: failed"
E 21
			exit 1
		fi
	done
D 2
	printf "Test2: recno: small key, medium data pairs\n"
E 2
I 2
D 21
	printf "Test 2: recno: small key, medium data pairs\n"
E 21
I 21
	echo "Test 2: recno: small key, medium data pairs"
E 21
E 2
	rm -f $TMP2 $TMP3
	echo $mdata | 
D 3
		awk '{  for (i = 1; i < 201; ++i)
	    		printf("p\nk%d\nd%s\ng\nk%d\n", i, $0, i);
		}' > $TMP2
	./dbtest -o $TMP3 recno $TMP2
E 3
I 3
	awk '{  for (i = 1; i < 201; ++i)
		printf("p\nk%d\nd%s\ng\nk%d\n", i, $0, i);
	}' > $TMP2
	$PROG -o $TMP3 recno $TMP2
E 3
D 14
	if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
	if (cmp -s $TMP1 $TMP3) ; then :
E 14
	else
D 21
		printf "test2: type recno: failed\n"
E 21
I 21
		echo "test2: type recno: failed"
E 21
		exit 1
	fi
}

# Insert the programs in /bin with their paths as their keys.
test3()
{
D 2
	printf "Test3: btree, hash: small key, big data pairs\n"
E 2
I 2
D 17
	printf "Test 3: btree, hash: small key, big data pairs\n"
E 17
I 17
D 21
	printf "Test 3: hash: small key, big data pairs\n"
E 21
I 21
	echo "Test 3: hash: small key, big data pairs"
E 21
E 17
E 2
	rm -f $TMP1
	(find /bin -type f -print | xargs cat) > $TMP1
D 17
	for type in hash btree; do
E 17
I 17
	for type in hash; do
E 17
		rm -f $TMP2 $TMP3
		for i in `find /bin -type f -print`; do
D 21
			printf "p\nk%s\nD%s\ng\nk%s\n" $i $i $i
E 21
I 21
			echo p
			echo k$i
			echo D$i
			echo g
			echo k$i
E 21
		done > $TMP2
D 3
		./dbtest -o $TMP3 $type $TMP2
E 3
I 3
		$PROG -o $TMP3 $type $TMP2
E 3
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 5
			printf "test2: type %s: failed\n" $type
E 5
I 5
D 17
			printf "test3: type %s: failed\n" $type
E 17
I 17
D 20
			printf "test3: %s: page size %d: failed\n" \
			    $type $psize
E 20
I 20
D 21
			printf "test3: %s: failed\n" $type
E 21
I 21
			echo "test3: $type: failed"
E 21
E 20
E 17
E 5
			exit 1
		fi
	done
I 17
D 21
	printf "Test 3: btree: small key, big data pairs\n"
E 21
I 21
	echo "Test 3: btree: small key, big data pairs"
E 21
	for psize in 512 16384 65536; do
D 21
		printf "\tpage size %d\n" $psize
E 21
I 21
		echo "    page size $psize"
E 21
		for type in btree; do
			rm -f $TMP2 $TMP3
			for i in `find /bin -type f -print`; do
D 21
				printf "p\nk%s\nD%s\ng\nk%s\n" $i $i $i
E 21
I 21
				echo p
				echo k$i
				echo D$i
				echo g
				echo k$i
E 21
			done > $TMP2
			$PROG -i psize=$psize -o $TMP3 $type $TMP2
			if (cmp -s $TMP1 $TMP3) ; then :
			else
D 21
				printf "test3: %s: page size %d: failed\n" \
				    $type $psize
E 21
I 21
				echo "test3: $type: page size $psize: failed"
E 21
				exit 1
			fi
		done
	done
E 17
D 2
	printf "Test3: recno: big data pairs\n"
E 2
I 2
D 21
	printf "Test 3: recno: big data pairs\n"
E 21
I 21
	echo "Test 3: recno: big data pairs"
E 21
E 2
	rm -f $TMP2 $TMP3
	find /bin -type f -print | 
D 3
		awk '{
			++i;
			printf("p\nk%d\nD%s\ng\nk%d\n", i, $0, i);
		}' > $TMP2
	./dbtest -o $TMP3 recno $TMP2
E 3
I 3
	awk '{
		++i;
		printf("p\nk%d\nD%s\ng\nk%d\n", i, $0, i);
	}' > $TMP2
D 17
	$PROG -o $TMP3 recno $TMP2
E 3
D 14
	if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
	if (cmp -s $TMP1 $TMP3) ; then :
E 14
	else
		printf "test3: type recno: failed\n"
		exit 1
	fi
E 17
I 17
	for psize in 512 16384 65536; do
D 21
		printf "\tpage size %d\n" $psize
E 21
I 21
		echo "    page size $psize"
E 21
		$PROG -i psize=$psize -o $TMP3 recno $TMP2
		if (cmp -s $TMP1 $TMP3) ; then :
		else
D 21
			printf "test3: recno: page size %d: failed\n" $psize
E 21
I 21
			echo "test3: recno: page size $psize: failed"
E 21
			exit 1
		fi
	done
E 17
}

# Do random recno entries.
test4()
{
D 2
	printf "Test4: recno: random entries\n"
	echo "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg" |
E 2
I 2
D 21
	printf "Test 4: recno: random entries\n"
E 21
I 21
	echo "Test 4: recno: random entries"
E 21
	echo "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg" |
E 2
D 3
		awk '{
E 3
I 3
	awk '{
D 21
		for (i = 37; i <= 37 + 88 * 17; i += 17)
			printf("input key %d: %.*s\n", i, i % 41, $0);
		for (i = 1; i <= 15; ++i)
			printf("input key %d: %.*s\n", i, i % 41, $0);
		for (i = 19234; i <= 19234 + 61 * 27; i += 27)
			printf("input key %d: %.*s\n", i, i % 41, $0);
E 21
I 21
		for (i = 37; i <= 37 + 88 * 17; i += 17) {
D 26
			s = substr($0, 1, i % 41);
E 26
I 26
			if (i % 41)
				s = substr($0, 1, i % 41);
			else
				s = substr($0, 1);
E 26
			printf("input key %d: %s\n", i, s);
		}
		for (i = 1; i <= 15; ++i) {
D 26
			s = substr($0, 1, i % 41);
E 26
I 26
			if (i % 41)
				s = substr($0, 1, i % 41);
			else
				s = substr($0, 1);
E 26
			printf("input key %d: %s\n", i, s);
		}
		for (i = 19234; i <= 19234 + 61 * 27; i += 27) {
D 26
			s = substr($0, 1, i % 41);
E 26
I 26
			if (i % 41)
				s = substr($0, 1, i % 41);
			else
				s = substr($0, 1);
E 26
			printf("input key %d: %s\n", i, s);
		}
E 21
		exit
	}' > $TMP1
D 20
	rm -f TMP2 $TMP3
E 20
I 20
	rm -f $TMP2 $TMP3
E 20
	cat $TMP1 |
	awk 'BEGIN {
			i = 37;
			incr = 17;
		}
		{
			printf("p\nk%d\nd%s\n", i, $0);
			if (i == 19234 + 61 * 27)
				exit;
			if (i == 37 + 88 * 17) {
				i = 1;
				incr = 1;
			} else if (i == 15) {
				i = 19234;
				incr = 27;
			} else
				i += incr;
		}
		END {
E 3
			for (i = 37; i <= 37 + 88 * 17; i += 17)
D 2
				printf("input key %d: %s\n", i, $0);
E 2
I 2
D 3
				printf("input key %d: %.*s\n", i, i % 41, $0);
E 3
I 3
				printf("g\nk%d\n", i);
E 3
E 2
			for (i = 1; i <= 15; ++i)
D 2
				printf("input key %d: %s\n", i, $0);
E 2
I 2
D 3
				printf("input key %d: %.*s\n", i, i % 41, $0);
E 3
I 3
				printf("g\nk%d\n", i);
E 3
E 2
			for (i = 19234; i <= 19234 + 61 * 27; i += 27)
D 2
				printf("input key %d: %s\n", i, $0);
E 2
I 2
D 3
				printf("input key %d: %.*s\n", i, i % 41, $0);
E 2
			exit
		}' > $TMP1
	rm -f TMP2 $TMP3
	cat $TMP1 | awk 'BEGIN {
				i = 37;
				incr = 17;
			}
			{
				printf("p\nk%d\nd%s\n", i, $0);
				if (i == 19234 + 61 * 27)
					exit;
				if (i == 37 + 88 * 17) {
					i = 1;
					incr = 1;
				} else if (i == 15) {
					i = 19234;
					incr = 27;
				} else
					i += incr;
			}
			END {
				for (i = 37; i <= 37 + 88 * 17; i += 17)
					printf("g\nk%d\n", i);
				for (i = 1; i <= 15; ++i)
					printf("g\nk%d\n", i);
				for (i = 19234; i <= 19234 + 61 * 27; i += 27)
					printf("g\nk%d\n", i);
			}' > $TMP2
	./dbtest -o $TMP3 recno $TMP2
E 3
I 3
				printf("g\nk%d\n", i);
		}' > $TMP2
	$PROG -o $TMP3 recno $TMP2
E 3
D 14
	if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
	if (cmp -s $TMP1 $TMP3) ; then :
E 14
	else
D 21
		printf "test4: type recno: failed\n"
E 21
I 21
		echo "test4: type recno: failed"
E 21
		exit 1
	fi
}
I 2

# Do reverse order recno entries.
test5()
{
D 21
	printf "Test 5: recno: reverse order entries\n"
E 21
I 21
	echo "Test 5: recno: reverse order entries"
E 21
	echo "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg" |
D 3
		awk ' {
			for (i = 1500; i; --i)
				printf("input key %d: %.*s\n", i, i % 34, $0);
			exit;
		}' > $TMP1
E 3
I 3
	awk ' {
D 21
		for (i = 1500; i; --i)
			printf("input key %d: %.*s\n", i, i % 34, $0);
E 21
I 21
		for (i = 1500; i; --i) {
D 26
			s = substr($0, 1, i % 34);
E 26
I 26
			if (i % 34)
				s = substr($0, 1, i % 34);
			else
				s = substr($0, 1);
E 26
			printf("input key %d: %s\n", i, s);
		}
E 21
		exit;
	}' > $TMP1
E 3
D 20
	rm -f TMP2 $TMP3
E 20
I 20
	rm -f $TMP2 $TMP3
E 20
D 3
	cat $TMP1 | awk 'BEGIN {
				i = 1500;
			}
			{
				printf("p\nk%d\nd%s\n", i, $0);
				--i;
			}
			END {
				for (i = 1500; i; --i) 
					printf("g\nk%d\n", i);
			}' > $TMP2
	./dbtest -o $TMP3 recno $TMP2
E 3
I 3
	cat $TMP1 |
	awk 'BEGIN {
			i = 1500;
		}
		{
			printf("p\nk%d\nd%s\n", i, $0);
			--i;
		}
		END {
			for (i = 1500; i; --i) 
				printf("g\nk%d\n", i);
		}' > $TMP2
	$PROG -o $TMP3 recno $TMP2
E 3
D 14
	if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
	if (cmp -s $TMP1 $TMP3) ; then :
E 14
	else
D 21
		printf "test5: type recno: failed\n"
E 21
I 21
		echo "test5: type recno: failed"
E 21
		exit 1
	fi
}
E 2
		
I 2
# Do alternating order recno entries.
test6()
{
D 21
	printf "Test 6: recno: alternating order entries\n"
E 21
I 21
	echo "Test 6: recno: alternating order entries"
E 21
	echo "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg" |
D 3
		awk ' {
			for (i = 1; i < 1200; i += 2)
				printf("input key %d: %.*s\n", i, i % 34, $0);
			for (i = 2; i < 1200; i += 2)
				printf("input key %d: %.*s\n", i, i % 34, $0);
			exit;
		}' > $TMP1
E 3
I 3
	awk ' {
D 21
		for (i = 1; i < 1200; i += 2)
			printf("input key %d: %.*s\n", i, i % 34, $0);
		for (i = 2; i < 1200; i += 2)
			printf("input key %d: %.*s\n", i, i % 34, $0);
E 21
I 21
		for (i = 1; i < 1200; i += 2) {
D 26
			s = substr($0, 1, i % 34);
E 26
I 26
			if (i % 34)
				s = substr($0, 1, i % 34);
			else
				s = substr($0, 1);
E 26
			printf("input key %d: %s\n", i, s);
		}
		for (i = 2; i < 1200; i += 2) {
D 26
			s = substr($0, 1, i % 34);
E 26
I 26
			if (i % 34)
				s = substr($0, 1, i % 34);
			else
				s = substr($0, 1);
E 26
			printf("input key %d: %s\n", i, s);
		}
E 21
		exit;
	}' > $TMP1
E 3
D 21
	rm -f TMP2 $TMP3
E 21
I 21
	rm -f $TMP2 $TMP3
E 21
D 3
	cat $TMP1 | awk 'BEGIN {
				i = 1;
				even = 0;
E 3
I 3
	cat $TMP1 |
	awk 'BEGIN {
			i = 1;
			even = 0;
		}
		{
			printf("p\nk%d\nd%s\n", i, $0);
			i += 2;
			if (i >= 1200) {
				if (even == 1)
					exit;
				even = 1;
				i = 2;
E 3
			}
D 3
			{
				printf("p\nk%d\nd%s\n", i, $0);
				i += 2;
				if (i >= 1200) {
					if (even == 1)
						exit;
					even = 1;
					i = 2;
				}
			}
			END {
				for (i = 1; i < 1200; ++i) 
					printf("g\nk%d\n", i);
			}' > $TMP2
	./dbtest -o $TMP3 recno $TMP2
E 3
I 3
		}
		END {
			for (i = 1; i < 1200; ++i) 
				printf("g\nk%d\n", i);
		}' > $TMP2
	$PROG -o $TMP3 recno $TMP2
E 3
	sort -o $TMP1 $TMP1
	sort -o $TMP3 $TMP3
D 14
	if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
	if (cmp -s $TMP1 $TMP3) ; then :
E 14
	else
D 21
		printf "test6: type recno: failed\n"
E 21
I 21
		echo "test6: type recno: failed"
E 21
		exit 1
	fi
I 3
}

# Delete cursor record
test7()
{
D 21
	printf "Test 7: btree, recno: delete cursor record\n"
E 21
I 21
	echo "Test 7: btree, recno: delete cursor record"
E 21
	echo "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg" |
	awk '{
		for (i = 1; i <= 120; ++i)
			printf("%05d: input key %d: %s\n", i, i, $0);
		printf("%05d: input key %d: %s\n", 120, 120, $0);
		printf("get failed, no such key\n");
		printf("%05d: input key %d: %s\n", 1, 1, $0);
		printf("%05d: input key %d: %s\n", 2, 2, $0);
		exit;
	}' > $TMP1
D 21
	rm -f TMP2 $TMP3
E 21
I 21
	rm -f $TMP2 $TMP3
E 21
I 9

D 10
	# Test that R_CURSOR doesn't succeed before cursor initialized
E 10
E 9
	for type in btree recno; do
		cat $TMP1 |
		awk '{
I 9
D 10
			if (i == 10)
				exit;
			printf("p\nk%d\nd%s\n", ++i, $0);
		}
		END {
			printf("fR_CURSOR\nr\nk1\n");
			printf("etest7 R_CURSOR SHOULD HAVE FAILED\n");
		}' > $TMP2
		$PROG -o $TMP3 $type $TMP2 > /dev/null 2>&1
		if [ -s $TMP3 ] ; then
			printf "test7: R_CURSOR SHOULD HAVE FAILED\n"
			exit 1
		fi
	done
			
	for type in btree recno; do
		cat $TMP1 |
		awk '{
E 10
E 9
			if (i == 120)
				exit;
			printf("p\nk%d\nd%s\n", ++i, $0);
		}
		END {
			printf("fR_NEXT\n");
			for (i = 1; i <= 120; ++i)
				printf("s\n");
			printf("fR_CURSOR\ns\nk120\n");
			printf("r\nk120\n");
			printf("fR_NEXT\ns\n");
			printf("fR_CURSOR\ns\nk1\n");
			printf("r\nk1\n");
			printf("fR_FIRST\ns\n");
		}' > $TMP2
		$PROG -o $TMP3 recno $TMP2
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 21
			printf "test7: type $type: failed\n"
E 21
I 21
			echo "test7: type $type: failed"
E 21
			exit 1
		fi
	done
I 4
}

D 6
# Try a variety of bucketsizes and fill factors for hashing
E 6
I 6
# Make sure that overflow pages are reused.
E 6
test8()
{
I 6
D 21
	printf "Test 8: btree, hash: repeated small key, big data pairs\n"
E 21
I 21
	echo "Test 8: btree, hash: repeated small key, big data pairs"
E 21
	rm -f $TMP1
I 21
	echo "" | 
E 21
	awk 'BEGIN {
D 7
		for (i = 1; i <= 100; ++i) {
E 7
I 7
D 8
		for (i = 1; i <= 75; ++i) {
E 8
I 8
		for (i = 1; i <= 10; ++i) {
E 8
E 7
			printf("p\nkkey1\nD/bin/sh\n");
			printf("p\nkkey2\nD/bin/csh\n");
I 7
			if (i % 8 == 0) {
				printf("c\nkkey2\nD/bin/csh\n");
				printf("c\nkkey1\nD/bin/sh\n");
D 9
				printf("e\t%d of 75 (comparison)\r\n", i);
E 9
I 9
				printf("e\t%d of 10 (comparison)\r\n", i);
E 9
			} else
D 9
				printf("e\t%d of 75             \r\n", i);
E 9
I 9
				printf("e\t%d of 10             \r\n", i);
E 9
E 7
			printf("r\nkkey1\nr\nkkey2\n");
		}
I 8
		printf("e\n");
		printf("eend of test8 run\n");
E 8
	}' > $TMP1
D 7
	$PROG -o $TMP2 btree $TMP1
	$PROG -o $TMP2 hash $TMP1
E 7
I 7
	$PROG btree $TMP1
D 21
	$PROG hash $TMP1
E 21
I 21
#	$PROG hash $TMP1
E 21
E 7
	# No explicit test for success.
I 12
}

# Test btree duplicate keys
test9()
{
D 21
	printf "Test 9: btree: duplicate keys\n"
E 21
I 21
	echo "Test 9: btree: duplicate keys"
E 21
	echo "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg" |
	awk '{
		for (i = 1; i <= 543; ++i)
			printf("%05d: input key %d: %s\n", i, i, $0);
		exit;
	}' > $TMP1
D 21
	rm -f TMP2 $TMP3
E 21
I 21
	rm -f $TMP2 $TMP3
E 21

	for type in btree; do
		cat $TMP1 | 
		awk '{
			if (i++ % 2)
				printf("p\nkduplicatekey\nd%s\n", $0);
			else
				printf("p\nkunique%dkey\nd%s\n", i, $0);
		}
		END {
				printf("o\n");
		}' > $TMP2
		$PROG -iflags=1 -o $TMP3 $type $TMP2
		sort -o $TMP3 $TMP3
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 21
			printf "test9: type $type: failed\n"
E 21
I 21
			echo "test9: type $type: failed"
E 21
			exit 1
		fi
	done
E 12
}

I 11
# Test use of cursor flags without initialization
test10()
{
D 21
	printf "Test 10: btree, recno: test cursor flag use\n"
E 21
I 21
	echo "Test 10: btree, recno: test cursor flag use"
E 21
	echo "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg" |
	awk '{
		for (i = 1; i <= 20; ++i)
			printf("%05d: input key %d: %s\n", i, i, $0);
		exit;
	}' > $TMP1
D 21
	rm -f TMP2 $TMP3
E 21
I 21
	rm -f $TMP2 $TMP3
E 21

	# Test that R_CURSOR doesn't succeed before cursor initialized
	for type in btree recno; do
		cat $TMP1 |
		awk '{
			if (i == 10)
				exit;
			printf("p\nk%d\nd%s\n", ++i, $0);
		}
		END {
			printf("fR_CURSOR\nr\nk1\n");
			printf("eR_CURSOR SHOULD HAVE FAILED\n");
		}' > $TMP2
		$PROG -o $TMP3 $type $TMP2 > /dev/null 2>&1
		if [ -s $TMP3 ] ; then
D 21
			printf "Test 10: delete: R_CURSOR SHOULD HAVE FAILED\n"
E 21
I 21
			echo "Test 10: delete: R_CURSOR SHOULD HAVE FAILED"
E 21
			exit 1
		fi
	done
	for type in btree recno; do
		cat $TMP1 |
		awk '{
			if (i == 10)
				exit;
			printf("p\nk%d\nd%s\n", ++i, $0);
		}
		END {
			printf("fR_CURSOR\np\nk1\ndsome data\n");
			printf("eR_CURSOR SHOULD HAVE FAILED\n");
		}' > $TMP2
		$PROG -o $TMP3 $type $TMP2 > /dev/null 2>&1
		if [ -s $TMP3 ] ; then
D 21
			printf "Test 10: put: R_CURSOR SHOULD HAVE FAILED\n"
E 21
I 21
			echo "Test 10: put: R_CURSOR SHOULD HAVE FAILED"
E 21
			exit 1
		fi
	done
}

# Test insert in reverse order.
test11()
{
D 21
	printf "Test 11: recno: reverse order insert\n"
E 21
I 21
	echo "Test 11: recno: reverse order insert"
E 21
	echo "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg" |
	awk '{
		for (i = 1; i <= 779; ++i)
			printf("%05d: input key %d: %s\n", i, i, $0);
		exit;
	}' > $TMP1
D 21
	rm -f TMP2 $TMP3
E 21
I 21
	rm -f $TMP2 $TMP3
E 21

	for type in recno; do
		cat $TMP1 |
		awk '{
			if (i == 0) {
				i = 1;
				printf("p\nk1\nd%s\n", $0);
				printf("%s\n", "fR_IBEFORE");
			} else
				printf("p\nk1\nd%s\n", $0);
		}
		END {
				printf("or\n");
		}' > $TMP2
		$PROG -o $TMP3 $type $TMP2
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 21
			printf "test11: type $type: failed\n"
E 21
I 21
			echo "test11: type $type: failed"
E 21
I 13
			exit 1
		fi
	done
}

# Take the first 20000 entries in the dictionary, reverse them, and give
# them each a small size data entry.  Use a small page size to make sure
# the btree split code gets hammered.
test12()
{
D 21
	printf "Test 12: btree: lots of keys, small page size\n"
E 21
I 21
	echo "Test 12: btree: lots of keys, small page size"
E 21
	mdata=abcdefghijklmnopqrstuvwxy
	echo $mdata |
	awk '{ for (i = 1; i < 20001; ++i) print $0 }' > $TMP1
	for type in btree; do
		rm -f $TMP2 $TMP3
		for i in `sed 20000q $DICT | rev`; do
D 21
			printf "p\nk%s\nd%s\ng\nk%s\n" $i $mdata $i
E 21
I 21
			echo p
			echo k$i
			echo d$mdata
			echo g
			echo k$i
E 21
		done > $TMP2
		$PROG -i psize=512 -o $TMP3 $type $TMP2
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 21
			printf "test12: type %s: failed\n" $type
E 21
I 21
			echo "test12: type $type: failed"
E 21
E 13
			exit 1
		fi
	done
I 16
}

# Test different byte orders.
test13()
{
D 21
	printf "Test 13: btree, hash: differing byte orders\n"
E 21
I 21
	echo "Test 13: btree, hash: differing byte orders"
E 21
	sed 50q $DICT > $TMP1
	for order in 1234 4321; do
		for type in btree hash; do
			rm -f byte.file $TMP2 $TMP3
			for i in `sed 50q $DICT`; do
D 21
				printf "p\nk%s\nd%s\ng\nk%s\n" $i $i $i
E 21
I 21
				echo p
				echo k$i
				echo d$i
				echo g
				echo k$i
E 21
			done > $TMP2
			$PROG -ilorder=$order -f byte.file -o $TMP3 $type $TMP2
			if (cmp -s $TMP1 $TMP3) ; then :
			else
D 21
				printf "test13: %s/%s put failed\n" $type $order
E 21
I 21
				echo "test13: $type/$order put failed"
E 21
				exit 1
			fi
			for i in `sed 50q $DICT`; do
D 21
				printf "g\nk%s\n" $i
E 21
I 21
				echo g
				echo k$i
E 21
			done > $TMP2
			$PROG -ilorder=$order -f byte.file -o $TMP3 $type $TMP2
			if (cmp -s $TMP1 $TMP3) ; then :
			else
D 21
				printf "test13: %s/%s get failed\n" $type $order
E 21
I 21
				echo "test13: $type/$order get failed"
E 21
				exit 1
			fi
		done
	done
	rm -f byte.file
E 16
}

E 11
# Try a variety of bucketsizes and fill factors for hashing
D 11
test9()
E 11
I 11
test20()
E 11
{
E 6
D 21
	printf\
D 6
    "Test 8: hash: bucketsize, fill factor; nelem 25000 cachesize 65536\n"
E 6
I 6
D 11
    "Test 9: hash: bucketsize, fill factor; nelem 25000 cachesize 65536\n"
E 11
I 11
    "Test 20: hash: bucketsize, fill factor; nelem 25000 cachesize 65536\n"
E 21
I 21
	echo\
    "Test 20: hash: bucketsize, fill factor; nelem 25000 cachesize 65536"
E 21
E 11
E 6
D 26
	awk 'BEGIN {
		for (i = 1; i <= 10000; ++i)
			printf("%.*s\n", i % 34,
		    "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg");
E 26
I 26
	echo "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg" |
	awk '{
		for (i = 1; i <= 10000; ++i) {
			if (i % 34)
				s = substr($0, 1, i % 34);
			else
				s = substr($0, 1);
			printf("%s\n", s);
		}
		exit;
E 26
	}' > $TMP1
	sed 10000q $DICT |
D 26
	awk '{
		++i;
		printf("p\nk%s\nd%.*s\n", $0, i % 34,
		    "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg");
E 26
I 26
	awk 'BEGIN {
		ds="abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg"
	}
	{
		if (++i % 34)
			s = substr(ds, 1, i % 34);
		else
			s = substr(ds, 1);
		printf("p\nk%s\nd%s\n", $0, s);
E 26
	}' > $TMP2
	sed 10000q $DICT |
	awk '{
		++i;
		printf("g\nk%s\n", $0);
	}' >> $TMP2
	bsize=256
	for ffactor in 11 14 21; do
D 15
		printf "\tbucketsize %d, fill factor %d\n" $bsize, $ffactor
E 15
I 15
D 21
		printf "\tbucketsize %d, fill factor %d\n" $bsize $ffactor
E 21
I 21
		echo "    bucketsize $bsize, fill factor $ffactor"
E 21
E 15
D 6
		$PROG -ot3 \
E 6
I 6
		$PROG -o$TMP3 \
E 6
		    -ibsize=$bsize,ffactor=$ffactor,nelem=25000,cachesize=65536\
		    hash $TMP2
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 6
			printf "test8: type hash:\
E 6
I 6
D 11
			printf "test9: type hash:\
E 11
I 11
D 21
			printf "test20: type hash:\
E 11
E 6
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed\n"
E 21
I 21
			echo "test20: type hash:\
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed"
E 21
			exit 1
		fi
	done
	bsize=512
	for ffactor in 21 28 43; do
D 15
		printf "\tbucketsize %d, fill factor %d\n" $bsize, $ffactor
E 15
I 15
D 21
		printf "\tbucketsize %d, fill factor %d\n" $bsize $ffactor
E 21
I 21
		echo "    bucketsize $bsize, fill factor $ffactor"
E 21
E 15
D 6
		$PROG -ot3 \
E 6
I 6
		$PROG -o$TMP3 \
E 6
		    -ibsize=$bsize,ffactor=$ffactor,nelem=25000,cachesize=65536\
		    hash $TMP2
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 6
			printf "test8: type hash:\
E 6
I 6
D 11
			printf "test9: type hash:\
E 11
I 11
D 21
			printf "test20: type hash:\
E 11
E 6
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed\n"
E 21
I 21
			echo "test20: type hash:\
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed"
E 21
			exit 1
		fi
	done
	bsize=1024
	for ffactor in 43 57 85; do
D 15
		printf "\tbucketsize %d, fill factor %d\n" $bsize, $ffactor
E 15
I 15
D 21
		printf "\tbucketsize %d, fill factor %d\n" $bsize $ffactor
E 21
I 21
		echo "    bucketsize $bsize, fill factor $ffactor"
E 21
E 15
D 6
		$PROG -ot3 \
E 6
I 6
		$PROG -o$TMP3 \
E 6
		    -ibsize=$bsize,ffactor=$ffactor,nelem=25000,cachesize=65536\
		    hash $TMP2
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 6
			printf "test8: type hash:\
E 6
I 6
D 11
			printf "test9: type hash:\
E 11
I 11
D 21
			printf "test20: type hash:\
E 11
E 6
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed\n"
E 21
I 21
			echo "test20: type hash:\
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed"
E 21
			exit 1
		fi
	done
	bsize=2048
	for ffactor in 85 114 171; do
D 15
		printf "\tbucketsize %d, fill factor %d\n" $bsize, $ffactor
E 15
I 15
D 21
		printf "\tbucketsize %d, fill factor %d\n" $bsize $ffactor
E 21
I 21
		echo "    bucketsize $bsize, fill factor $ffactor"
E 21
E 15
D 6
		$PROG -ot3 \
E 6
I 6
		$PROG -o$TMP3 \
E 6
		    -ibsize=$bsize,ffactor=$ffactor,nelem=25000,cachesize=65536\
		    hash $TMP2
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 6
			printf "test8: type hash:\
E 6
I 6
D 11
			printf "test9: type hash:\
E 11
I 11
D 21
			printf "test20: type hash:\
E 11
E 6
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed\n"
E 21
I 21
			echo "test20: type hash:\
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed"
E 21
			exit 1
		fi
	done
	bsize=4096
	for ffactor in 171 228 341; do
D 15
		printf "\tbucketsize %d, fill factor %d\n" $bsize, $ffactor
E 15
I 15
D 21
		printf "\tbucketsize %d, fill factor %d\n" $bsize $ffactor
E 21
I 21
		echo "    bucketsize $bsize, fill factor $ffactor"
E 21
E 15
D 6
		$PROG -ot3 \
E 6
I 6
		$PROG -o$TMP3 \
E 6
		    -ibsize=$bsize,ffactor=$ffactor,nelem=25000,cachesize=65536\
		    hash $TMP2
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 6
			printf "test8: type hash:\
E 6
I 6
D 11
			printf "test9: type hash:\
E 11
I 11
D 21
			printf "test20: type hash:\
E 11
E 6
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed\n"
E 21
I 21
			echo "test20: type hash:\
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed"
E 21
			exit 1
		fi
	done
	bsize=8192
	for ffactor in 341 455 683; do
D 15
		printf "\tbucketsize %d, fill factor %d\n" $bsize, $ffactor
E 15
I 15
D 21
		printf "\tbucketsize %d, fill factor %d\n" $bsize $ffactor
E 21
I 21
		echo "    bucketsize $bsize, fill factor $ffactor"
E 21
E 15
D 6
		$PROG -ot3 \
E 6
I 6
		$PROG -o$TMP3 \
E 6
		    -ibsize=$bsize,ffactor=$ffactor,nelem=25000,cachesize=65536\
		    hash $TMP2
D 14
		if (cmp -s $TMP1 $TMP3) ; then
E 14
I 14
		if (cmp -s $TMP1 $TMP3) ; then :
E 14
		else
D 6
			printf "test8: type hash:\
E 6
I 6
D 11
			printf "test9: type hash:\
E 11
I 11
D 21
			printf "test20: type hash:\
E 11
E 6
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed\n"
E 21
I 21
			echo "test20: type hash:\
bsize=$bsize ffactor=$ffactor nelem=25000 cachesize=65536 failed"
E 21
I 10
D 11
			exit 1
		fi
	done
}

# Test use of cursor flags without initialization
test10()
{
	printf "Test 10: btree, recno: test cursor flag use\n"
	echo "abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg" |
	awk '{
		for (i = 1; i <= 120; ++i)
			printf("%05d: input key %d: %s\n", i, i, $0);
		printf("%05d: input key %d: %s\n", 120, 120, $0);
		printf("get failed, no such key\n");
		printf("%05d: input key %d: %s\n", 1, 1, $0);
		printf("%05d: input key %d: %s\n", 2, 2, $0);
		exit;
	}' > $TMP1
	rm -f TMP2 $TMP3

	# Test that R_CURSOR doesn't succeed before cursor initialized
	for type in btree recno; do
		cat $TMP1 |
		awk '{
			if (i == 10)
				exit;
			printf("p\nk%d\nd%s\n", ++i, $0);
		}
		END {
			printf("fR_CURSOR\nr\nk1\n");
			printf("eR_CURSOR SHOULD HAVE FAILED\n");
		}' > $TMP2
		$PROG -o $TMP3 $type $TMP2 > /dev/null 2>&1
		if [ -s $TMP3 ] ; then
			printf "Test 10: delete: R_CURSOR SHOULD HAVE FAILED\n"
			exit 1
		fi
	done
	for type in btree recno; do
		cat $TMP1 |
		awk '{
			if (i == 10)
				exit;
			printf("p\nk%d\nd%s\n", ++i, $0);
		}
		END {
			printf("fR_CURSOR\np\nk1\ndsome data\n");
			printf("eR_CURSOR SHOULD HAVE FAILED\n");
		}' > $TMP2
		$PROG -o $TMP3 $type $TMP2 > /dev/null 2>&1
		if [ -s $TMP3 ] ; then
			printf "Test 10: put: R_CURSOR SHOULD HAVE FAILED\n"
E 11
E 10
			exit 1
		fi
	done
E 4
E 3
}

E 2
D 21
main
E 21
I 21
main $*
E 21
E 1
