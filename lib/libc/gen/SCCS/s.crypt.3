h06973
s 00001/00001/00253
d D 8.2 93/12/11 22:37:34 mckusick 14 12
c copyediting for Usenix manuals
e
s 00003/00006/00248
d D 8.1.1.1 93/08/18 16:18:03 mckusick 13 12
c disable decryption for foreign sites
e
s 00002/00002/00252
d D 8.1 93/06/04 12:00:34 bostic 12 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00006/00248
d D 6.7.1.1 91/08/19 18:25:01 mckusick 11 10
c delete decryption for foreign sites
e
s 00021/00013/00233
d D 6.7 91/05/21 11:53:01 bostic 10 9
c Explain how the user's key turns into the actual encryption key
c minor cleanups, from Tom Truscott
e
s 00026/00005/00220
d D 6.6 91/05/18 14:55:12 bostic 9 8
c add return values to setkey, encrypt, des_setkey, des_cipher to
c distinguish failure (no hardware support or foreign distribution)
e
s 00005/00001/00220
d D 6.5 91/05/06 12:39:10 bostic 8 7
c expand history notes; from Tom Truscott
e
s 00003/00006/00218
d D 6.4 91/04/21 15:18:21 bostic 7 6
c des_cipher takes a long, not a u_long; minor cleanups
e
s 00179/00110/00045
d D 6.3 91/04/19 14:50:09 cael 6 5
c macro and text revision (-mdoc version 3)
e
s 00132/00045/00023
d D 6.2 91/03/06 14:49:58 bostic 5 3
c Tom Truscott's version of crypt
e
s 00003/00004/00064
d D 6.1.1.1 86/08/12 18:43:37 mckusick 4 3
c delete decryption for the foreign sites
e
s 00001/00001/00067
d D 6.1 85/05/15 14:53:54 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00002/00002/00066
d D 5.1 85/05/15 14:53:42 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00068/00000/00000
d D 4.1 85/05/15 14:53:35 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
f b 
t
T
I 5
D 6
.\" Copyright (c) 1989 The Regents of the University of California.
E 6
I 6
D 12
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 6
.\" All rights reserved.
E 12
I 12
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 12
.\"
D 6
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 6
I 6
.\" %sccs.include.redist.man%
E 6
.\"
E 5
I 1
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\"     %W% (Berkeley) %G%
E 6
.\"
D 2
.TH CRYPT 3 
E 2
I 2
D 3
.TH CRYPT 3  "25 February 1983"
E 3
I 3
D 6
.TH CRYPT 3  "%Q%"
E 3
E 2
.AT 3
.SH NAME
D 5
crypt, setkey, encrypt \- DES encryption
E 5
I 5
crypt, setkey, encrypt, des_setkey, des_cipher \- DES encryption
E 5
.SH SYNOPSIS
.nf
D 5
.B char *crypt(key, salt)
.B char *key, *salt;
.PP
.B setkey(key)
.B char *key;
.PP
.B encrypt(block, edflag)
.B char *block;
E 5
I 5
.ft B
char *crypt(char *key, char *setting);

void setkey(char *key);
void encrypt(char *block, int flag);

void des_setkey(char *key);
void des_cipher(char *in, char *out, unsigned long salt, int count);
.ft R
E 5
.fi
.SH DESCRIPTION
.I Crypt
is the password encryption routine.
D 5
It is based on the NBS Data Encryption Standard, with
variations intended (among other things) to frustrate use of hardware
implementations of the DES for key search.
.PP
The first argument to
.I crypt
D 2
is a user's typed password.
E 2
I 2
is normally a user's typed password.
E 2
The second is a 2-character string chosen from the
set [a-zA-Z0-9./].
E 5
I 5
It is based on the NBS Data Encryption Standard, with variations intended to
frustrate key search attempts.
.IR Crypt 's
first argument is a NUL-terminated string (normally a user's typed
password).
E 6
I 6
.Dd %Q%
.Dt CRYPT 3
.Os
.Sh NAME
.Nm crypt ,
.Nm setkey ,
.Nm encrypt ,
.Nm des_setkey ,
.Nm des_cipher
.Nd DES encryption
.Sh SYNOPSIS
.Ft char
.Fn *crypt "const char *key" "const char *setting"
D 9
.Ft void
E 9
I 9
.Ft int
E 9
.Fn setkey "char *key"
D 9
.Ft void
E 9
I 9
.Ft int
E 9
.Fn encrypt "char *block" "int flag"
D 9
.Ft void
E 9
I 9
.Ft int
E 9
.Fn des_setkey "const char *key"
D 9
.Ft void
E 9
I 9
.Ft int
E 9
D 7
.Fn des_cipher "const char *in" "char *out" "u_long salt" "int count"
E 7
I 7
.Fn des_cipher "const char *in" "char *out" "long salt" "int count"
E 7
.Sh DESCRIPTION
The
.Xr crypt
function
performs password encryption.
It is derived from the
.Tn NBS
Data Encryption Standard.
Additional code has been added to deter
key search attempts.
The first argument to
.Nm crypt
is
a
.Dv NUL Ns -terminated
D 7
string (normally a password typed by
a user)
first argument is a
.Dv NUL Ns -terminated
(normally a user's typed
E 7
I 7
string (normally a password typed by a user).
E 7
E 6
The second is a character array, 9 bytes in length, consisting of an
underscore (``_'') followed by 4 bytes of iteration count and 4 bytes
of salt.
Both the iteration
D 6
.I count
E 6
I 6
.Fa count
E 6
and the 
D 6
.I salt 
E 6
I 6
.Fa salt
E 6
D 10
are encoded as follows: only 6 bits per character are used, with the least
significant bits occurring first.
E 10
I 10
are encoded with 6 bits per character, least significant bits first.
E 10
The values 0 to 63 are encoded by the characters ``./0-9A-Za-z'',
respectively.
I 10
.Pp
E 10
E 5
The
D 6
.I salt
D 5
string is used to perturb the DES algorithm in one of 4096
different ways, after which the password
is used as the key to encrypt repeatedly a constant string.
The returned value points to the encrypted password,
in the same alphabet as the salt.
The first two characters are the salt itself.
E 5
I 5
is used to perturb the DES algorithm in one of 16777216 different ways
E 6
I 6
.Fa salt
is used to induce disorder in to the
.Tn DES
algorithm
in one of 16777216
possible ways
E 6
(specifically, if bit
D 6
.I N
E 6
I 6
D 10
.Em N
E 10
I 10
.Em i
E 10
E 6
of the
D 6
.I salt
E 6
I 6
.Ar salt
E 6
is set then bits
D 6
.I N
E 6
I 6
D 10
.Em N
E 10
I 10
.Em i
E 10
E 6
and
D 6
.I N+24
are swapped in the DES ``E'' box output).
E 6
I 6
D 10
.Em N+24
E 10
I 10
.Em i+24
E 10
are swapped in the
.Tn DES
``E'' box output).
E 6
D 10
Then the
E 10
I 10
The
E 10
D 6
.I key
E 6
I 6
.Ar key
E 6
D 10
is used to perform
E 10
I 10
is divided into groups of 8 characters (a short final group is null-padded)
D 14
and the low-order 7 bits of each each character (56 bits per group) are
E 14
I 14
and the low-order 7 bits of each character (56 bits per group) are
E 14
used to form the DES key as follows: the first group of 56 bits becomes the
initial DES key.
For each additional group, the XOR of the group bits and the encryption of
the DES key with itself becomes the next DES key.
Then the final DES key is used to perform
E 10
D 6
.I count
E 6
I 6
.Ar count
E 6
cumulative encryptions of a 64-bit constant.
D 6
.\" XXX need to describe what really happens with the key.
The returned value is a character array, 20 bytes in length, consisting
E 6
I 6
D 10
The value returned is a character array, 20 bytes in length, consisting
E 10
I 10
The value returned is a
.Dv NUL Ns -terminated
string, 20 bytes in length, consisting
E 10
E 6
of the
D 6
.I setting
E 6
I 6
.Ar setting
E 6
followed by the encoded 64-bit encryption.
E 5
D 6
.PP
E 6
I 6
.Pp
E 6
D 5
The other entries provide (rather primitive)
access to the actual DES algorithm.
The argument of
E 5
I 5
For compatibility with historical versions of
D 6
.IR crypt (3),
E 6
I 6
.Xr crypt 3 ,
E 6
the
D 6
.I setting
E 6
I 6
.Ar setting
E 6
may consist of 2 bytes of salt, encoded as above, in which case an
iteration
D 6
.I count
of 25 is used, fewer perturbations of DES are available, at most 8
E 6
I 6
.Ar count
of 25 is used, fewer perturbations of
.Tn DES
are available, at most 8
E 6
characters of
D 6
.I key
E 6
I 6
.Ar key
E 6
D 10
are used, and the returned value is a character array 13 bytes in length.
E 10
I 10
are used, and the returned value is a
.Dv NUL Ns -terminated
string 13 bytes in length.
E 10
D 6
.PP
The other four functions provide (rather primitive) access to the actual
DES algorithm.
The argument to
E 5
.I setkey
is a character array of length 64 containing only the characters
with numerical value 0 and 1.
E 6
I 6
.Pp
The
functions,
.Fn encrypt ,
.Fn setkey ,
.Fn des_setkey
and
.Fn des_cipher
allow limited access to the
.Tn DES
algorithm itself.
The
.Ar key
argument to
.Fn setkey
is a 64 character array of
D 10
.Tn ASCII
binary values (0 or 1).
E 6
D 5
If this string is divided into groups of 8,
the low-order bit in each group is ignored,
leading to a 56-bit key which is set into the machine.
E 5
I 5
A 56-bit key is derived from dividing this array by dividing the string
E 10
I 10
binary values (numeric 0 or 1).
A 56-bit key is derived from this array by dividing the array
E 10
into groups of 8 and ignoring the last bit in each group.
E 5
D 6
.PP
The argument to the
.I encrypt
D 5
entry is likewise a character array of length 64
containing 0's and 1's.
The argument array is modified in place
to a similar array
representing the bits of the argument after having been
subjected to the DES algorithm using the key set by
.I setkey.
E 5
I 5
entry is likewise a character array of length 64 containing 0's and 1's.
The argument array is modified in place to a similar array representing
the bits of the argument after having been subjected to the DES algorithm
using the key set by
.IR setkey .
E 5
D 4
If
E 4
I 4
The
E 4
D 5
.I edflag
D 4
is 0, the argument is encrypted;
if non-zero,
it is decrypted.
E 5
I 5
.I flag
is 0, the argument is encrypted; if non-zero, it is decrypted.
.PP
.I Des_setkey
E 6
I 6
.Pp
The
.Fn encrypt
argument
.Fa block
is also a 64 character array of
D 10
.Tn ASCII
E 10
binary values.
If the value of
.Fa flag
is 0,
the argument
.Fa block
D 11
D 13
is encrypted, otherwise it
is decrypted.
The encryption or decryption is returned in the original
E 13
I 13
is encrypted, otherwise it fails.
The encryption is returned in the original
E 13
E 11
I 11
is encrypted, otherwise it fails.
The encryption is returned in the original
E 11
array
.Fa block
after using the
key specified
by
.Fn setkey
to process it.
.Pp
The
.Fn des_setkey
E 6
and
D 6
.I des_cipher
are faster but less portable than
.I setkey
E 6
I 6
.Fn des_cipher
functions are faster but less portable than
.Fn setkey
E 6
and
D 6
.IR encrypt .
E 6
I 6
.Fn encrypt .
E 6
The argument to
D 6
.I des_setkey
E 6
I 6
.Fn des_setkey
E 6
is a character array of length 8.
The
D 6
.B least
E 6
I 6
.Em least
E 6
significant bit in each character is ignored and the next 7 bits of each
character are concatenated to yield a 56-bit key.
D 6
.I Des_cipher
E 6
I 6
The function
.Fn des_cipher
E 6
D 11
D 13
encrypts (or decrypts if
D 6
.I count
E 6
I 6
.Fa count
E 6
is negative) the 64-bits stored in the 8 characters at
E 13
I 13
encrypts the 64-bits stored in the 8 characters at
E 13
E 11
I 11
encrypts the 64-bits stored in the 8 characters at
E 11
D 6
.I in
E 6
I 6
.Fa in
E 6
using
D 6
.I abs(count)
iterations of DES and stores the 64-bit result in the 8 characters at
.IR out .
E 6
I 6
.Xr abs 3
of
.Fa count
iterations of
.Tn DES
and stores the 64-bit result in the 8 characters at
.Fa out .
E 6
The
D 6
.I salt
specifies perturbations to DES as described above.
E 5
E 4
I 4
flag is ignored;
the argument can only be encrypted.
E 4
.SH "SEE ALSO"
D 5
passwd(1), passwd(5), login(1), getpass(3)
E 5
I 5
login(1), passwd(1), getpass(3), passwd(5)
.sp
.IR "Mathematical Cryptology for Computer Scientists and Mathematicians" ,
Wayne Patterson, 1987, ISBN 0-8476-7438-X.
.sp
.IR "Password Security: A Case History" ,
R. Morris and Ken Thompson,
Communications of the ACM, vol. 22, pp. 594-597, Nov. 1979.
.sp
.IR "DES will be Totally Insecure within Ten Years" ,
M.E. Hellman, IEEE Spectrum, vol. 16, pp. 32-39, July 1979.
E 5
.SH BUGS
E 6
I 6
.Fa salt
specifies perturbations to
.Tn DES
as described above.
I 9
.Pp
The function
.Fn crypt
returns a pointer to the encrypted value on success and NULL on failure.
The functions
.Fn setkey ,
.Fn encrypt ,
.Fn des_setkey ,
and
.Fn des_cipher
return 0 on success and 1 on failure.
Historically, the functions
.Fn setkey
and
.Fn encrypt
did not return any value.
They have been provided return values primarily to distinguish
implementations where hardware support is provided but not
available or where the DES encryption is not available due to the
usual political silliness.
E 9
.Sh SEE ALSO
.Xr login 1 ,
.Xr passwd 1 ,
.Xr getpass 3 ,
.Xr passwd 5
I 7
.sp
E 7
.Rs
.%T "Mathematical Cryptology for Computer Scientists and Mathematicians"
.%A Wayne Patterson
.%D 1987
.%N ISBN 0-8476-7438-X
.Re
.Rs
.%T "Password Security: A Case History"
.%A R. Morris
.%A Ken Thompson
.%J "Communications of the ACM"
.%V vol. 22
.%P pp. 594-597
.%D Nov. 1979
.Re
.Rs
.%T "DES will be Totally Insecure within Ten Years"
.%A M.E. Hellman
.%J "IEEE Spectrum"
.%V vol. 16
.%P pp. 32-39
.%D July 1979
.Re
.Sh HISTORY
D 8
A
E 8
I 8
A rotor-based
E 8
.Fn crypt
function appeared in
.At v6 .
I 8
The current style
.Fn crypt
first appeared in
.At v7 .
E 8
.Sh BUGS
E 6
D 5
The return value
points to static data whose content is overwritten
by each call.
E 5
I 5
Dropping the
D 6
.I least
E 6
I 6
.Em least
E 6
significant bit in each character of the argument to
D 6
.I des_setkey
E 6
I 6
.Fn des_setkey
E 6
is ridiculous.
D 6
.PP
The return value of
.I crypt
points to static data whose content is overwritten by each call.
E 6
I 6
.Pp
The
.Fn crypt
function leaves its result in an internal static object and returns
D 9
a pointer to that object. Subsequent calls to
E 9
I 9
a pointer to that object.
Subsequent calls to
E 9
.Fn crypt
will modify the same object.
E 6
E 5
E 1
