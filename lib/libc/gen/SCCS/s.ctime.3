h38655
s 00002/00002/00230
d D 8.1 93/06/04 12:00:48 bostic 19 18
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/00231
d D 6.16 92/03/29 07:32:23 bostic 18 17
c fix includes
e
s 00150/00115/00082
d D 6.15 91/04/19 14:49:33 cael 17 16
c macro and text revision (-mdoc version 3)
e
s 00123/00365/00074
d D 6.14 90/12/04 20:12:46 bostic 16 15
c split out tzset and tzsetwall to tzset.3; first cut at making it
c understandable.
e
s 00001/00011/00438
d D 6.13 90/06/23 17:56:54 trent 15 14
c new copyright notice
e
s 00007/00007/00442
d D 6.12 90/06/23 16:22:02 trent 14 13
c /etc/zoneinfo ->> /usr/share/zoneinfo
e
s 00001/00005/00448
d D 6.11 89/09/09 15:33:49 bostic 13 12
c changes from Arthur Olson -- if TZ wrong, just use UTC
e
s 00410/00089/00043
d D 6.10 89/03/16 20:41:59 bostic 12 11
c latest Olson/Harris time package
e
s 00001/00001/00131
d D 6.9 87/09/30 08:36:10 bostic 11 10
c time has been moved to section 3; bug report 4.3BSD/man/17
e
s 00003/00002/00129
d D 6.8 87/04/02 13:32:21 bostic 10 9
c changed order of TZ evaluation
e
s 00012/00015/00119
d D 6.7 87/03/22 11:38:14 bostic 9 8
c corrected timezone entry
e
s 00044/00028/00090
d D 6.6 87/03/22 10:56:06 bostic 8 7
c changes for the new time package
e
s 00059/00043/00059
d D 6.5 87/03/04 20:41:34 bostic 7 6
c documented new time package
e
s 00001/00001/00101
d D 6.4 86/05/27 10:18:33 kjd 6 5
c add comma
e
s 00001/00001/00101
d D 6.3 86/03/27 16:17:00 bloom 5 4
c <sys/time.h> becomes <time.h>
e
s 00011/00014/00091
d D 6.2 86/03/24 15:18:45 mckusick 4 3
c move description up into structure (from hollywood!day@rand-unix.arpa)
e
s 00001/00001/00104
d D 6.1 85/05/15 15:22:04 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00020/00011/00085
d D 5.1 85/05/15 15:21:46 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00096/00000/00000
d D 4.1 85/05/15 15:21:25 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 12
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 12
I 12
D 17
.\" Copyright (c) 1989 The Regents of the University of California.
E 17
I 17
D 19
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 17
.\" All rights reserved.
E 19
I 19
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 19
E 12
.\"
I 12
.\" This code is derived from software contributed to Berkeley by
.\" Arthur Olson.
D 17
.\"
E 17
D 15
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 15
I 15
.\" %sccs.include.redist.man%
E 15
.\"
E 12
D 17
.\"	%W% (Berkeley) %G%
E 17
I 17
.\"     %W% (Berkeley) %G%
E 17
.\"
D 2
.TH CTIME 3 
E 2
I 2
D 3
.TH CTIME 3  "26 June 1983"
E 3
I 3
D 12
.TH CTIME 3  "%Q%"
E 3
E 2
.UC 4
E 12
I 12
D 17
.TH CTIME 3 "%Q%"
E 12
.SH NAME
D 7
ctime, localtime, gmtime, asctime, timezone \-  convert date and time to ASCII
E 7
I 7
D 8
ctime, localtime, gmtime, asctime, timezone, tzset, tzsetwall \-  convert date and time to ASCII
E 8
I 8
D 12
ctime, localtime, gmtime, asctime, timezone, tzset \-  convert date and time to ASCII
E 12
I 12
D 16
asctime, ctime, difftime, gmtime, localtime, mktime, tzset, tzsetwall \- convert date and time to ASCII
E 16
I 16
asctime, ctime, difftime, gmtime, localtime, mktime \- convert date and time to ASCII
E 16
E 12
E 8
E 7
.SH SYNOPSIS
.nf
I 12
D 16
.B extern char *tzname[2];
.PP
E 12
I 7
D 8
.B extern char *tzname[2];
.PP
E 8
.B void tzset()
.PP
I 12
.B void tzsetwall()
.PP
.B #include <sys/types.h>
.PP
E 12
D 8
.B void tzsetwall()
.PP
E 8
E 7
.B char *ctime(clock)
D 7
.B long *clock;
E 7
I 7
.B time_t *clock;
E 7
.PP
I 12
.B double difftime(time1, time0)
.B time_t time1;
.B time_t time0;
.PP
E 12
D 2
.B #include <time.h>
E 2
I 2
D 5
.B #include <sys/time.h>
E 5
I 5
.B #include <time.h>
E 5
E 2
.PP
I 7
.B char *asctime(tm)
.B struct tm *tm;
.PP
E 7
.B struct tm *localtime(clock)
D 7
.B long *clock;
E 7
I 7
D 12
.B time_t *clock;
E 12
I 12
.B long *clock;
E 12
E 7
.PP
.B struct tm *gmtime(clock)
D 7
.B long *clock;
E 7
I 7
D 12
.B time_t *clock;
E 12
I 12
.B long *clock;
E 12
E 7
.PP
D 7
.B char *asctime(tm)
.B struct tm *tm;
.PP
E 7
D 12
.B char *timezone(zone, dst)
E 12
I 12
.B time_t mktime(tm)
.B struct tm *tm;
E 16
I 16
.ft B
extern char *tzname[2];

#include <sys/types.h>

char *ctime(time_t *clock);

double difftime(time_t time1, time_t time0);

#include <time.h>

char *asctime(struct tm *tm);

struct tm *localtime(long *clock);

struct tm *gmtime(long *clock);

time_t mktime(struct tm *tm);
.ft R
E 16
E 12
.fi
I 7
D 12
.fi
E 12
E 7
.SH DESCRIPTION
D 7
.I Ctime
converts a time pointed to by
.I clock
such as returned by
.IR time (2)
into ASCII
and returns a pointer to a
26-character string
in the following form.
All the fields have constant width.
E 7
I 7
D 8
\fITzset\fP uses the value of the environment variable \fBTZ\fP to set time
conversion information used by \fIlocaltime\fP.  If \fBTZ\fP does not appear
in the environment, the best available approximation to local wall clock
time is used by \fIlocaltime\fP.  If \fBTZ\fP appears in the environment
but its value is a null string, Greenwich Mean Time is used; if \fBTZ\fP
appears and begins with a slash, it is used as the absolute pathname of the
\fItzfile\fP(5)-format file from which to read the time conversion
information; if \fBTZ\fP appears and begins with a character other than a
slash, it's used as a pathname relative to a system time conversion
information directory.
E 8
I 8
D 12
\fITzset\fP uses the value of the environment variable \fBTZ\fP to
set up the time conversion information used by \fIlocaltime\fP.
E 12
I 12
D 16
.I Tzset
uses the value of the environment variable
.B TZ
to set time conversion information used by
.IR localtime .
If
.B TZ
does not appear in the environment,
the best available approximation to local wall clock time, as specified
by the
.IR tzfile (5)-format
file
.B localtime
in the system time conversion information directory, is used by
.IR localtime .
If
.B TZ
appears in the environment but its value is a null string,
Coordinated Universal Time (UTC) is used (without leap second
correction).  If
.B TZ
appears in the environment and its value is not a null string:
.IP
if the value begins with a colon, it is used as a pathname of a file
from which to read the time conversion information;
.IP
if the value does not begin with a colon, it is first used as the
pathname of a file from which to read the time conversion information,
and, if that file cannot be read, is used directly as a specification of
the time conversion information.
E 12
E 8
E 7
.PP
I 7
D 8
\fITzsetwall\fP sets things up so that \fIlocaltime\fP returns the best
available approximation of local wall clock time.
E 8
I 8
D 12
If \fBTZ\fP does not appear in the environment, the \fBTZDEFAULT\fP
file (as defined in \fItzfile.h\fP) is used by \fIlocaltime\fP.  If
this file fails for any reason, the GMT offset as provided by the
kernel is used.  In this case, DST is ignored, resulting in the time
being incorrect by some amount if DST is currently in effect.  If
this fails for any reason, GMT is used.
E 12
I 12
When
.B TZ
is used as a pathname, if it begins with a slash,
it is used as an absolute pathname; otherwise,
it is used as a pathname relative to a system time conversion information
directory.
The file must be in the format specified in
.IR tzfile (5).
E 12
E 8
.PP
I 8
D 12
If \fBTZ\fP appears in the environment but its value is a null string,
Greenwich Mean Time is used; if \fBTZ\fP appears and begins with a
slash, it is used as the absolute pathname of the \fItzfile\fP(5)-format
file from which to read the time conversion information; if \fBTZ\fP
appears and begins with a character other than a slash, it's used as
a pathname relative to the system time conversion information directory,
D 10
defined as \fBTZDIR\fP in the include file \fItzfile.h\fP.  If
this file fails for any reason, GMT is used.
E 10
I 10
defined as \fBTZDIR\fP in the include file \fItzfile.h\fP.  If this file
fails for any reason, the GMT offset as provided by the kernel is
used, as described above.  If this fails for any reason, GMT is used.
E 12
I 12
When
.B TZ
is used directly as a specification of the time conversion information,
it must have the following syntax (spaces inserted for clarity):
.IP
\fIstd\|offset\fR[\fIdst\fR[\fIoffset\fR][\fB,\fIrule\fR]]
E 12
E 10
.PP
D 12
Programs that always wish to use local wall clock time should explicitly
remove the environmental variable \fBTZ\fP with \fIunsetenv\fP(3).
E 12
I 12
Where:
.RS
.TP 15
.IR std " and " dst
Three or more bytes that are the designation for the standard
.RI ( std )
or summer
.RI ( dst )
time zone.  Only
.I std
is required; if
.I dst
is missing, then summer time does not apply in this locale.
Upper- and lowercase letters are explicitly allowed.  Any characters
except a leading colon
.RB ( : ),
digits, comma
.RB ( , ),
minus
.RB ( \(mi ),
plus
.RB ( \(pl ),
and ASCII NUL are allowed.
.TP
.I offset
Indicates the value one must add to the local time to arrive at
Coordinated Universal Time.  The
.I offset
has the form:
.RS
.IP
\fIhh\fR[\fB:\fImm\fR[\fB:\fIss\fR]]
.RE
.IP
The minutes
.RI ( mm )
and seconds
.RI ( ss )
are optional.  The hour
.RI ( hh )
is required and may be a single digit.  The
.I offset
following
.I std
is required.  If no
.I offset
follows
.IR dst ,
summer time is assumed to be one hour ahead of standard time.  One or
more digits may be used; the value is always interpreted as a decimal
number.  The hour must be between zero and 24, and the minutes (and
seconds) \(em if present \(em between zero and 59.  If preceded by a
.RB `` \(mi '',
the time zone shall be east of the Prime Meridian; otherwise it shall be
west (which may be indicated by an optional preceding
.RB `` \(pl '').
.TP
.I rule
Indicates when to change to and back from summer time.  The
.I rule
has the form:
.RS
.IP
\fIdate\fB/\fItime\fB,\fIdate\fB/\fItime\fR
.RE
.IP
where the first
.I date
describes when the change from standard to summer time occurs and the
second
.I date
describes when the change back happens.  Each
.I time
field describes when, in current local time, the change to the other
time is made.
.IP
The format of
.I date
is one of the following:
.RS
.TP 10
.BI J n
The Julian day
.I n
.RI "(1\ \(<=" "\ n\ " "\(<=\ 365).
Leap days are not counted; that is, in all years \(em including leap
years \(em February 28 is day 59 and March 1 is day 60.  It is
impossible to explicitly refer to the occasional February 29.
.TP
.I n
The zero-based Julian day
.RI "(0\ \(<=" "\ n\ " "\(<=\ 365).
Leap days are counted, and it is possible to refer to February 29.
.TP
.BI M m . n . d
The
.IR d' th
day
.RI "(0\ \(<=" "\ d\ " "\(<=\ 6)
of week
.I n
of month
.I m
of the year
.RI "(1\ \(<=" "\ n\ " "\(<=\ 5,
.RI "1\ \(<=" "\ m\ " "\(<=\ 12,
where week 5 means ``the last
.I d
day in month
.IR m ''
which may occur in either the fourth or the fifth week).  Week 1 is the
first week in which the
.IR d' th
day occurs.  Day zero is Sunday.
.RE
.IP "" 15
The
.I time
has the same format as
.I offset
except that no leading sign
.RB (`` \(mi ''
or
.RB `` \(pl '')
is allowed.  The default, if
.I time
is not given, is
.BR 02:00:00 .
.RE
.LP
If no
.I rule
is present in
.BR TZ ,
the rules specified
by the
.IR tzfile (5)-format
file
.B posixrules
in the system time conversion information directory are used, with the
standard and summer time offsets from UTC replaced by those specified by
the
.I offset
values in
.BR TZ .
E 12
.PP
E 8
D 12
\fICtime\fP converts a long integer, pointed to by \fIclock\fP,
D 8
such as returned by \fItime\fP(2) into ASCII adn returns a pointer
E 8
I 8
D 11
such as returned by \fItime\fP(2) into ASCII and returns a pointer
E 11
I 11
such as returned by \fItime\fP(3), into ASCII and returns a pointer
E 11
E 8
to a 26-character string in the following form.  All the fields
have constant width.
E 12
I 12
For compatibility with System V Release 3.1, a semicolon
.RB ( ; )
may be used to separate the
.I rule
from the rest of the specification.
E 12
.PP
E 7
D 12
    Sun Sep 16 01:03:52 1973\\n\\0
E 12
I 12
If the
.B TZ
environment variable does not specify a
.IR tzfile (5)-format
and cannot be interpreted as a direct specification,
D 13
UTC is used with the standard time abbreviation set to
the value of the
.B TZ
environment variable
(or to the leading characters of its value if it is lengthy).
E 13
I 13
UTC is used.
E 13
E 12
.PP
D 12
.I Localtime
E 12
I 12
.I Tzsetwall
sets things up so that
E 16
I 16
.IR Ctime ,
.I gmtime
E 17
I 17
.Dd %Q%
.Dt CTIME 3
.Os BSD 4.3
.Sh NAME
.Nm asctime ,
.Nm ctime ,
.Nm difftime ,
.Nm gmtime ,
.Nm localtime ,
.Nm mktime
.Nd transform binary date and time value to
.Tn ASCII
.Sh SYNOPSIS
.Fd #include <sys/types.h>
I 18
.Fd #include <time.h>
E 18
.Vt extern char *tzname[2];
.Ft char *
.Fn ctime "const time_t *clock"
.Ft double
.Fn difftime "time_t time1" "time_t time0"
D 18
.Fd #include <time.h>
E 18
.Ft char *
.Fn asctime "const struct tm *tm"
.Ft struct tm *
.Fn localtime "const time_t *clock"
.Ft struct tm *
.Fn gmtime "const time_t *clock"
.Ft time_t
.Fn mktime "struct tm *tm"
.Sh DESCRIPTION
The functions
.Fn ctime ,
.Fn gmtime
E 17
and
E 16
D 17
.I localtime
E 17
I 17
.Fn localtime
E 17
D 16
returns the best available approximation of local wall clock time.
E 16
I 16
all take as an argument a time value representing the time in seconds since
D 17
the Epoch (00:00:00 UTC, January 1, 1970; see
.IR time (3)).
E 16
.PP
D 16
.I Ctime\^
converts a long integer, pointed to by
E 16
I 16
.I Localtime
E 17
I 17
the Epoch (00:00:00
.Tn UTC ,
January 1, 1970; see
.Xr time 3 ) .
.Pp
The function
.Fn localtime
E 17
converts the time value pointed at by
E 16
D 17
.IR clock ,
D 16
representing the time in seconds since
00:00:00 UTC, January 1, 1970,
and returns a pointer to a
26-character string
of the form
.br
.ce
.eo
Thu Nov 24 18:22:48 1986\n\0
.ec
.br
All the fields have constant width.
E 16
I 16
and returns a pointer to a ``struct tm'' (described below) which contains
E 17
I 17
.Fa clock ,
and returns a pointer to a
.Dq Fa struct tm
(described below) which contains
E 17
the broken-out time information for the value after adjusting for the current
time zone (and any other factors such as Daylight Saving Time).
Time zone adjustments are performed as specified by the
D 17
.B TZ
E 17
I 17
.Ev TZ
E 17
environmental variable (see
D 17
.IR tzset (3)).
.I Localtime 
E 17
I 17
.Xr tzset 3 ) .
The function
.Fn localtime
E 17
uses
D 17
.I tzset
E 17
I 17
.Xr tzset
E 17
to initialize time conversion information if
D 17
.I tzset
E 17
I 17
.Xr tzset
E 17
has not already been called by the process.
E 16
D 17
.PP
E 17
I 17
.Pp
E 17
D 16
.IR Localtime\^
E 12
and
D 12
.I gmtime
return pointers to structures containing
the broken-down time.
.I Localtime
corrects for the time zone and possible daylight savings time;
.I gmtime
converts directly to GMT, which is the time UNIX uses.
.I Asctime
converts a broken-down time to ASCII and returns a pointer
to a 26-character string.
E 12
I 12
.I gmtime\^
return pointers to ``tm'' structures, described below.
.I Localtime\^
corrects for the time zone and any time zone adjustments
(such as Daylight Saving Time in the U.S.A.).
Before doing so,
.I localtime\^
calls
.I tzset\^
(if
.I tzset\^
has not been called in the current process).
After filling in the ``tm'' structure,
E 16
I 16
After filling in the tm structure,
E 16
D 17
.I localtime
E 17
I 17
.Fn localtime
E 17
sets the
D 17
.BR tm_isdst 'th
E 17
I 17
.Fa tm_isdst Ns 'th
E 17
element of
D 17
.B tzname
D 16
to a pointer to an 
ASCII string that's the time zone abbreviation to be used with
E 16
I 16
to a pointer to an ASCII string that's the time zone abbreviation to be
E 17
I 17
.Fa tzname
to a pointer to an
.Tn ASCII
string that's the time zone abbreviation to be
E 17
used with
E 16
D 17
.IR localtime 's
E 17
I 17
.Fn localtime Ns 's
E 17
return value.
E 12
D 17
.PP
D 12
The structure declaration from the include file is:
E 12
I 12
D 16
.I Gmtime\^
converts to Coordinated Universal Time.
E 16
I 16
.I Gmtime
E 17
I 17
.Pp
The function
.Fn gmtime
E 17
similarly converts the time value, but without any time zone adjustment,
and returns a pointer to a tm structure (described below).
E 16
E 12
D 2
.RS
E 2
D 17
.PP
I 12
D 16
.I Asctime\^
converts a time value contained in a
``tm'' structure to a 26-character string,
as shown in the above example,
and returns a pointer
to the string.
E 16
I 16
.I Ctime
E 17
I 17
.Pp
The
.Fn ctime
function
E 17
adjusts the time value for the current time zone in the same manner as
D 17
.IR localtime ,
E 17
I 17
.Fn localtime ,
E 17
and returns a pointer to a 26-character string of the form:
D 17
.sp
.RS
E 17
I 17
.Bd -literal -offset indent
E 17
Thu Nov 24 18:22:48 1986\en\e0
D 17
.RE
.sp
E 17
I 17
.Ed
.Pp
E 17
All the fields have constant width.
E 16
D 17
.PP
D 16
.I Mktime\^
converts the broken-down time,
expressed as local time,
in the structure pointed to by
.I tm
into a calendar time value with the same encoding as that of the values
returned by the
.I time
function.
E 16
I 16
.I Asctime
converts a time value contained in a tm structure to a 26-character
string, as shown in the above example, and returns a pointer to the string.
.PP
.I Mktime
E 17
I 17
.Pp
The
.Fn asctime
function
converts the broken down time in the structure
.Fa tm
pointed at by
.Fa *tm
to the form
shown in the example above.
.Pp
The function
.Fn mktime
E 17
converts the broken-down time, expressed as local time, in the structure
pointed to by tm into a time value with the same encoding as that of the
values returned by the
D 17
.IR time (3)
function, that is, seconds from the Epoch, UTC.
.PP
E 17
I 17
.Xr time 3
function, that is, seconds from the Epoch,
.Tn UTC .
.Pp
E 17
E 16
The original values of the
D 17
.B tm_wday
E 17
I 17
.Fa tm_wday
E 17
and
D 17
.B tm_yday
E 17
I 17
.Fa tm_yday
E 17
D 16
components of the structure are ignored,
and the original values of the other components are not restricted
to their normal ranges.
E 16
I 16
components of the structure are ignored, and the original values of the
other components are not restricted to their normal ranges.
E 16
(A positive or zero value for
D 17
.B tm_isdst
E 17
I 17
.Fa tm_isdst
E 17
causes
D 17
.I mktime
E 17
I 17
.Fn mktime
E 17
D 16
to presume initially that summer time (for example, Daylight Saving Time 
in the U.S.A.)
respectively,
is or is not in effect for the specified time.
E 16
I 16
to presume initially that summer time (for example, Daylight Saving Time)
is or is not in effect for the specified time, respectively.
E 16
A negative value for
D 17
.B tm_isdst
E 17
I 17
.Fa tm_isdst
E 17
causes the
D 17
.I mktime
E 17
I 17
.Fn mktime
E 17
D 16
function to attempt to divine whether summer time is in effect
for the specified time.)
E 16
I 16
function to attempt to divine whether summer time is in effect for the
specified time.)
D 17
.PP
E 17
I 17
.Pp
E 17
E 16
On successful completion, the values of the
D 17
.B tm_wday
E 17
I 17
.Fa tm_wday
E 17
and
D 17
.B tm_yday
E 17
I 17
.Fa tm_yday
E 17
D 16
components of the structure are set appropriately,
and the other components are set to represent the specified calendar time,
but with their values forced to their normal ranges; the final value of
E 16
I 16
components of the structure are set appropriately, and the other components
are set to represent the specified calendar time, but with their values
forced to their normal ranges; the final value of
E 16
D 17
.B tm_mday
E 17
I 17
.Fa tm_mday
E 17
is not set until
D 17
.B tm_mon
E 17
I 17
.Fa tm_mon
E 17
and
D 17
.B tm_year
E 17
I 17
.Fa tm_year
E 17
are determined.
D 16
.I Mktime\^
returns the specified calendar time;
If the calendar time cannot be represented,
it returns
E 16
I 16
D 17
.I Mktime
E 17
I 17
.Fn Mktime
E 17
returns the specified calendar time; if the calendar time cannot be
D 17
represented, it returns
E 16
.BR -1 .
.PP
D 16
.I Difftime\^
E 16
I 16
.I Difftime
E 17
I 17
represented, it returns \-1;
.Pp
The
.Fn difftime
function
E 17
E 16
returns the difference between two calendar times,
D 16
.I time1
E 16
I 16
D 17
.RI ( time1
E 17
I 17
.Pf ( Fa time1
E 17
E 16
-
D 16
.IR time0,
E 16
I 16
D 17
.IR time0 ),
E 17
I 17
.Fa time0 ) ,
E 17
E 16
expressed in seconds.
D 17
.PP
E 17
I 17
.Pp
E 17
D 16
Declarations of all the functions and externals, and the ``tm'' structure,
are in the
.B <time.h>\^
header file.
The structure (of type)
.B struct tm
includes the following fields:
E 16
I 16
External declarations as well as the tm structure definition are in the 
D 17
``<time.h>'' include file.
E 17
I 17
.Aq Pa time.h
include file.
E 17
The tm structure includes at least the following fields:
D 17
.sp
E 16
E 12
I 2
.RS
I 12
D 16
.PP
E 16
E 12
E 2
.nf
I 4
D 12
.nr .0 .8i+\w'int tm_isdst'u
.ta .5i \n(.0u \n(.0u+\w'/* 0-000'u+1n
E 4
D 2
.so /usr/include/time.h
E 2
I 2
struct tm {
D 4
	int	tm_sec;
	int	tm_min;
	int	tm_hour;
	int	tm_mday;
	int	tm_mon;
	int	tm_year;
	int	tm_wday;
	int	tm_yday;
	int	tm_isdst;
E 4
I 4
	int tm_sec;	/* 0-59	seconds */
	int tm_min;	/* 0-59	minutes */
	int tm_hour;	/* 0-23	hour */
	int tm_mday;	/* 1-31	day of month */
	int tm_mon;	/* 0-11	month */
	int tm_year;	/* 0-	year \- 1900 */
	int tm_wday;	/* 0-6	day of week (Sunday = 0) */
	int tm_yday;	/* 0-365	day of year */
	int tm_isdst;	/* flag:	daylight savings time in effect */
I 7
	char **tm_zone;	/* abbreviation of timezone name */
	long tm_gmtoff;	/* offset from GMT in seconds */
E 7
E 4
};
E 12
I 12
.ta .5i +\w'long tm_gmtoff;\0\0'u
E 17
I 17
.Bd -literal -offset indent
E 17
D 16
	int tm_sec;	/\(** seconds (0 - 60) \(**/
	int tm_min;	/\(** minutes (0 - 59) \(**/
	int tm_hour;	/\(** hours (0 - 23) \(**/
	int tm_mday;	/\(** day of month (1 - 31) \(**/
	int tm_mon;	/\(** month of year (0 - 11) \(**/
	int tm_year;	/\(** year \- 1900 \(**/
	int tm_wday;	/\(** day of week (Sunday = 0) \(**/
	int tm_yday;	/\(** day of year (0 - 365) \(**/
	int tm_isdst;	/\(** is summer time in effect? \(**/
	char \(**tm_zone;	/\(** abbreviation of timezone name \(**/
	long tm_gmtoff;	/\(** offset from UTC in seconds \(**/
E 16
I 16
int tm_sec;	/\(** seconds (0 - 60) \(**/
int tm_min;	/\(** minutes (0 - 59) \(**/
int tm_hour;	/\(** hours (0 - 23) \(**/
int tm_mday;	/\(** day of month (1 - 31) \(**/
int tm_mon;	/\(** month of year (0 - 11) \(**/
int tm_year;	/\(** year \- 1900 \(**/
int tm_wday;	/\(** day of week (Sunday = 0) \(**/
int tm_yday;	/\(** day of year (0 - 365) \(**/
int tm_isdst;	/\(** is summer time in effect? \(**/
char \(**tm_zone;	/\(** abbreviation of timezone name \(**/
long tm_gmtoff;	/\(** offset from UTC in seconds \(**/
E 16
E 12
E 2
D 17
.fi
.RE
D 4
.PP
These quantities give the time on a 24-hour clock,
day of month (1-31), month of year (0-11), day of week
(Sunday = 0), year \- 1900, day of year (0-365),
and a flag that is nonzero if daylight saving time is in effect.
E 4
.PP
D 7
When local time is called for,
the program consults the system to determine the time zone and
D 2
whether the standard U.S.A. daylight saving time adjustment is
appropriate.
The program knows about the peculiarities
of this conversion in 1974 and 1975;
if necessary,
a table for these years can be extended.
E 2
I 2
whether the U.S.A., Australian, Eastern European, Middle European,
or Western European daylight saving time adjustment is appropriate.
The program knows about various peculiarities in time conversion
over the past 10-20 years; if necessary, this understanding can
be extended.
E 7
I 7
D 12
\fITm_isdst\fP is non-zero if a time zone adjustment such as Daylight
Savings time is in effect.
E 12
I 12
D 16
The
.I tm_zone
and
.I tm_gmtoff
fields exist, and are filled in, only if arrangements to do
so were made when the library containing these functions was
created.
There is no guarantee that these fields will continue to exist
in this form in future releases of this code.
E 12
E 7
E 2
.PP
D 7
.I Timezone
returns the name of the time zone associated with its first argument,
which is measured in minutes westward from Greenwich.
If the second argument is 0, the standard name is used,
otherwise the Daylight Saving version.
If the required name does not appear in a table
built into the routine,
D 6
the difference from GMT is produced; e.g.
E 6
I 6
the difference from GMT is produced; e.g.,
E 6
in Afghanistan
.I timezone(-(60*4+30), 0)
is appropriate because it is 4:30 ahead of GMT
and the string
.B GMT+4:30
is produced.
.SH "SEE ALSO"
D 2
time(2)
E 2
I 2
gettimeofday(2), time(3)
E 2
.SH BUGS
The return values point to static data
whose content is overwritten by each call.
E 7
I 7
D 12
\fITm_gmtoff\fP is the offset (in seconds) of the time represented
from GMT, with positive values indicating East of Greenwich.
E 12
I 12
.I Tm_isdst\^
E 16
I 16
.I Tm_isdst
E 17
I 17
.Ed
.Pp
The
field
.Fa tm_isdst
E 17
E 16
is non-zero if summer time is in effect.
E 12
D 17
.PP
D 8
\fITimezone\fP remains for compatibility reasons only; it's impossible
to reliably map timezone's arguments (a "minutes west of GMT" value and
a "daylight saving time in effect" flag) to a time zone abbreviation.
Its current effect is to return the time zone abbreviation associated
with local time no matter what its arguments, which is probably  what people
wanted anyway.  Programs that in the past used the timezone function
should examine \fIlocaltime(&clock)->tm_zone\fP to find the correct time
zone abbreviation to use.
E 8
I 8
D 12
\fITimezone\fP remains for compatibility reasons only; it's impossible to
reliably map timezone's arguments (\fIzone\fP, a "minutes west of GMT" value
and \fIdst\fP, a "daylight saving time in effect" flag) to a time zone
abbreviation.
.PP
D 9
If the environmental string \fITZNAME\fP exists, its value is returned,
unless it consists of two comma separated strings, in which case the
second string is returned if the \fIdst\fP is non-zero, else the first
string.  If \fITZNAME\fP doesn't exist, and the \fIzone\fP value is the
same as the kernel's notion of local time, the time zone abbreviation
as set by \fIlocaltime\fP is returned.  If the \fIzone\fP value isn't
local, \fIzone\fP is checked for equality with a built-in table of values,
in which case the time zone abbreviation or daylight time zone abbreviation
associated with that value is returned.  If the requested \fIzone\fP does
not appear in the table, the difference from GMT is returned; e.g. in
Afghanistan, \fItimezone(-(60*4+30), 0)\fP is appropriate because it
is 4:30 ahead of GMT, and the string \fBGMT+4:30\fP is returned.
.PP
Programs that in the past used the timezone function should return
the zone name as set by \fIlocaltime\fP to assure correctness.
E 9
I 9
If the environmental string \fITZNAME\fP exists, \fItimezone\fP returns
its value, unless it consists of two comma separated strings, in which
case the second string is returned if \fIdst\fP is non-zero, else
the first string.  If \fITZNAME\fP doesn't exist, \fIzone\fP is checked
for equality with a built-in table of values, in which case \fItimezone\fP
returns the time zone or daylight time zone abbreviation associated with
that value.  If the requested \fIzone\fP does not appear in the table, the
difference from GMT is returned; e.g. in Afghanistan,
\fItimezone(-(60*4+30), 0)\fP is appropriate because it is 4:30 ahead of
GMT, and the string \fBGMT+4:30\fP is returned.  Programs that in the
past used the \fItimezone\fP function should return the zone name as
set by \fIlocaltime\fP to assure correctness.
E 12
I 12
.I Tm_gmtoff
D 16
is the offset (in seconds) of the time represented
from UTC, with positive values indicating east
of the Prime Meridian.
E 12
E 9
E 8
.SH FILES
D 12
.ta \w'/etc/zoneinfo/localtime\0\0'u
E 12
I 12
D 14
.ta \w'/etc/zoneinfo/posixrules\0\0'u
E 12
/etc/zoneinfo	time zone information directory
E 14
I 14
.ta \w'/usr/share/zoneinfo/posixrules\0\0'u
/usr/share/zoneinfo	time zone information directory
E 14
.br
D 14
/etc/zoneinfo/localtime	local time zone file
E 14
I 14
/usr/share/zoneinfo/localtime	local time zone file
E 14
I 12
.br
D 14
/etc/zoneinfo/posixrules	used in converting POSIX-style TZ's
E 14
I 14
/usr/share/zoneinfo/posixrules	used in converting POSIX-style TZ's
E 14
.br
D 14
/etc/zoneinfo/GMT	for UTC leap seconds
E 14
I 14
/usr/share/zoneinfo/GMT	for UTC leap seconds
E 14
.sp
If
D 14
.I /etc/zoneinfo/GMT
E 14
I 14
.I /usr/share/zoneinfo/GMT
E 14
is absent,
UTC leap seconds are loaded from
D 14
.IR /etc/zoneinfo/posixrules .
E 14
I 14
.IR /usr/share/zoneinfo/posixrules .
E 16
I 16
is the offset (in seconds) of the time represented from UTC, with positive
E 17
I 17
.Pp
The field
.Fa tm_gmtoff
is the offset (in seconds) of the time represented from
.Tn UTC ,
with positive
E 17
values indicating east of the Prime Meridian.
E 16
E 14
E 12
D 17
.SH SEE ALSO
D 8
gettimeofday(2), getenv(3), time(3), tzfile(5)
E 8
I 8
D 12
gettimeofday(2), getenv(3), time(3), tzfile(5), environ(7)
E 8
.SH NOTE
The return values point to static data whose content is overwritten by
each call.  The \fBtm_zone\fP field of a returned \fBstruct tm\fP
points to a static array of characters, which will also be overwritten
D 8
at the next call (and by calls to \fItzset\fP or \fItzsetwall\fP).
E 8
I 8
at the next call (and by calls to \fItzset\fP).
E 12
I 12
D 16
time(2), getenv(3), tzfile(5)
.SH NOTES
The return values point to static data
whose content is overwritten by each call.
E 16
I 16
date(1), gettimeofday(2), getenv(3), time(3), tzset(3), tzfile(5)
.SH BUGS
E 17
I 17
.Sh SEE ALSO
.Xr date 1 ,
.Xr gettimeofday 2 ,
.Xr getenv 3 ,
.Xr time 3 ,
.Xr tzset 3 ,
.Xr tzfile 5
.Sh HISTORY
This manual page is derived from
the time package contributed to Berkeley by
Arthur Olsen and which appeared in
.Bx 4.3 .
.Sh BUGS
E 17
Except for 
D 17
.I difftime 
E 17
I 17
.Fn difftime
E 17
and
D 17
.IR mktime ,
these routines all return pointers to static data whose content is
overwritten by each call.
.PP
E 17
I 17
.Fn mktime ,
these functions leaves their result in an internal static object and return
a pointer to that object. Subsequent calls to these
function will modify the same object.
.Pp
E 17
E 16
The
D 17
.B tm_zone
E 17
I 17
.Fa tm_zone
E 17
D 16
field of a returned
.B "struct tm"
points to a static array of characters, which
will also be overwritten at the next call
(and by calls to
.I tzset
or
.IR tzsetwall ).
E 16
I 16
field of a returned tm structure points to a static array of characters,
which will also be overwritten by any subsequent calls (as well as by
subsequent calls to
D 17
.IR tzset (3)
E 17
I 17
.Xr tzset 3
E 17
and
D 17
.IR tzsetwall (3)).
.PP
E 17
I 17
.Xr tzsetwall 3 ) .
.Pp
E 17
Use of the external variable
D 17
.B tzname
E 17
I 17
.Fa tzname
E 17
is discouraged; the
D 17
.B tm_zone 
E 17
I 17
.Fa tm_zone
E 17
entry in the tm structure is preferred.
E 16
D 17
.PP
E 17
I 17
.Pp
E 17
Avoid using out-of-range values with
D 17
.I mktime
E 17
I 17
.Fn mktime
E 17
when setting up lunch with promptness sticklers in Riyadh.
E 12
E 8
E 7
E 1
