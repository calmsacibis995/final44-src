h17160
s 00001/00001/00231
d D 8.3 94/01/24 08:05:11 bostic 8 7
c forgot the envp argument for exect
e
s 00001/00001/00231
d D 8.2 93/11/16 11:51:55 bostic 7 6
c typo
e
s 00002/00002/00230
d D 8.1 93/06/04 12:01:34 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00159/00113/00073
d D 6.4 91/04/19 14:49:20 cael 5 4
c macro and text revision (-mdoc version 3)
e
s 00155/00163/00030
d D 6.3 91/02/23 16:35:04 bostic 4 3
c from POSIX.1 documentation -- specify what *really* happens.
c move from execvp.3 to exec.3
e
s 00001/00001/00192
d D 6.2 86/04/25 20:24:09 mckusick 3 2
c exece is really execve
e
s 00001/00001/00192
d D 6.1 85/05/15 16:16:44 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00193/00000/00000
d D 5.1 85/05/15 16:16:35 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 6
.\" Copyright (c) 1991 The Regents of the University of California.
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
E 4
.\"
I 4
.\" %sccs.include.redist.man%
.\"
E 4
D 5
.\"	%W% (Berkeley) %G%
E 5
I 5
.\"     %W% (Berkeley) %G%
E 5
.\"
D 2
.TH EXECL 3 "1 April 1981"
E 2
I 2
D 4
.TH EXECL 3 "%Q%"
E 4
I 4
D 5
.TH EXEC 3 "%Q%"
E 4
E 2
.UC 5
.SH NAME
D 3
execl, execv, execle, execlp, execvp, exec, exece, exect, environ \- execute a file
E 3
I 3
D 4
execl, execv, execle, execlp, execvp, exec, execve, exect, environ \- execute a file
E 4
I 4
execl, execlp, execle, exect, execv, execvp \- execute a file
E 4
E 3
.SH SYNOPSIS
.nf
D 4
.B execl(name, arg0, arg1, ..., argn, 0)
.B char *name, *arg0, *arg1, ..., *argn;
.PP
.B execv(name, argv)
.B char *name, *argv[];
.PP
.B "execle(name, arg0, arg1, ..., argn, 0, envp)"
.B "char *name, *arg0, *arg1, ..., *argn, *envp[];"
.PP
.B "exect(name, argv, envp)
.B "char *name, *argv[], *envp[];
.PP
.B extern char **environ;
E 4
I 4
.ft B
extern char **environ;
.sp
execl(const char *path, const char *arg, ...);
execlp(const char *file, const char *arg, ...);
execle(const char *path, const char *arg, ...,
.ti +5
char *const envp[]);
exect(const char *path, char *const argv[],
.ti +5
char *const envp[]);
execv(const char *path, char *const argv[]);
execvp(const char *file, char *const argv[]);
.ft R
E 4
.fi
.SH DESCRIPTION
D 4
These routines provide various interfaces to the
.I execve 
system call.  Refer to 
.IR  execve (2)
for a description of their properties; only
brief descriptions are provided here.
E 4
I 4
The exec family of functions replaces the current process image with a
E 5
I 5
.Dd %Q%
.Dt EXEC 3
.Os
.Sh NAME
.Nm execl ,
.Nm execlp ,
.Nm execle ,
.Nm exect ,
.Nm execv ,
.Nm execvp
.Nd execute a file
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Vt extern char **environ;
.Ft int
.Fn execl "const char *path" "const char *arg" ...
.Ft int
.Fn execlp "const char *file" "const char *arg" ...
.Ft int
.Fn execle "const char *path" "const char *arg" ... "char *const envp[]"
.Ft int
D 8
.Fn exect "const char *path" "char *const argv[]" 
E 8
I 8
.Fn exect "const char *path" "char *const argv[]"  "char *const envp[]"
E 8
.Ft int
.Fn execv "const char *path" "char *const argv[]"
.Ft int
.Fn execvp "const char *file" "char *const argv[]"
.Sh DESCRIPTION
The
.Nm exec
family of functions replaces the current process image with a
E 5
new process image.
The functions described in this manual page are front-ends for the function
D 5
.IR execve (2).
E 5
I 5
.Xr execve 2 .
E 5
(See the manual page for
D 5
.I execve
E 5
I 5
.Xr execve
E 5
for detailed information about the replacement of the current process.)
E 4
D 5
.PP
E 5
I 5
.Pp
E 5
D 4
.I Exec
in all its forms
overlays the calling process with the named file, then
transfers to the
entry point of the core image of the file.
There can be no return from a successful exec; the calling
core image is lost.
E 4
I 4
The initial argument for these functions is the pathname of a file which
is to be executed.
E 4
D 5
.PP
D 4
The
.I name
argument
is a pointer to the name of the file
to be executed.
The pointers
.IR arg [ 0 ],
.IR arg [ 1 "] ..."
address null-terminated strings.
Conventionally
.IR arg [ 0 ]
is the name of the
file.
E 4
I 4
The ``const char *arg'' and subsequent ellipses in the
.IR execl ,
.IR execlp ,
E 5
I 5
.Pp
The
.Fa "const char *arg"
and subsequent ellipses in the
.Fn execl ,
.Fn execlp ,
E 5
and
D 5
.I execle
E 5
I 5
.Fn execle
E 5
functions can be thought of as
D 5
.IR arg0 ,
.IR arg1 ,
E 5
I 5
.Em arg0 ,
.Em arg1 ,
E 5
\&...,
D 5
.IR argn .
E 5
I 5
.Em argn .
E 5
Together they describe a list of one or more pointers to null-terminated
strings that represent the argument list available to the executed program.
The first argument, by convention, should point to the file name associated
with the file being executed.
The list of arguments
D 5
.B must
be terminated by a NULL pointer.
E 4
.PP
E 5
I 5
.Em must
be terminated by a
.Dv NULL
pointer.
.Pp
E 5
D 4
Two interfaces are available.
.I execl
is useful when a known file with known arguments is
being called;
the arguments to
.I execl
are the character strings
constituting the file and the arguments;
the first argument is conventionally
the same as the file name (or its last component).
A 0 argument must end the argument list.
.PP
E 4
The
D 4
.I execv
version is useful when the number of arguments is unknown
in advance;
the arguments to
.I execv
are the name of the file to be
executed and a vector of strings containing
the arguments.
The last argument string must be followed
by a 0 pointer.
E 4
I 4
D 5
.IR exect ,
.IR execv ,
E 5
I 5
.Fn exect ,
.Fn execv ,
E 5
and
D 5
.I execvp
E 5
I 5
.Fn execvp
E 5
functions provide an array of pointers to null-terminated strings that
represent the argument list available to the new program.
The first argument, by convention, should point to the file name associated
with the file begin executed.
The array of pointers
D 5
.B must
be terminated by a NULL pointer.
E 4
.PP
E 5
I 5
.Sy must
be terminated by a
.Dv NULL
pointer.
.Pp
E 5
The
I 4
D 5
.I execle
E 5
I 5
.Fn execle
E 5
and
E 4
D 5
.I exect
E 5
I 5
.Fn exect
E 5
D 4
version is used when the executed file is to be
manipulated with 
.IR ptrace (2).
The program is forced to single step a single
instruction giving the parent an opportunity to
manipulate its state.  On the VAX-11 this is done
by setting the trace bit in the process status
longword.
E 4
I 4
functions also specify the environment of the executed process by following
D 5
the NULL pointer that terminates the list of arguments in the parameter list
E 5
I 5
the
.Dv NULL
pointer that terminates the list of arguments in the parameter list
E 5
or the pointer to the argv array with an additional parameter.
This additional parameter is an array of pointers to null-terminated strings
and
D 5
.B must
be terminated by a NULL pointer.
E 5
I 5
.Em must
be terminated by a
.Dv NULL
pointer.
E 5
The other functions take the environment for the new process image from the
external variable
D 5
.I environ
E 5
I 5
.Va environ
E 5
in the current process.
E 4
D 5
.PP
E 5
I 5
.Pp
E 5
D 4
When a C program is executed,
it is called as follows:
E 4
I 4
Some of these functions have special semantics.
E 4
D 5
.PP
E 5
I 5
.Pp
E 5
D 4
.nf
	main(argc, argv, envp)
	int argc;
	char **argv, **envp;
.fi
.PP
where
.I argc
is the argument count
E 4
I 4
The functions
D 5
.I execlp
E 5
I 5
.Fn execlp
E 5
E 4
and
D 4
.I argv 
is an array of character pointers
to the arguments themselves.
As indicated,
.I argc
is conventionally at least one
and the first member of the array points to a
string containing the name of the file.
E 4
I 4
D 5
.I execvp
E 5
I 5
.Fn execvp
E 5
will duplicate the actions of the shell in searching for an executable file
D 5
if the specified file name does not contain a slash (``/'') character.
The search path is the path specified in the environment by ``PATH'' variable.
If this variable isn't specified, the default path ``/bin:/usr/bin:'' is
E 5
I 5
if the specified file name does not contain a slash
.Dq Li /
character.
The search path is the path specified in the environment by
.Dq Ev PATH
variable.
If this variable isn't specified, the default path
.Dq Ev /bin:/usr/bin:
is
E 5
used.
D 7
In addtion, certain errors are treated specially.
E 7
I 7
In addition, certain errors are treated specially.
E 7
E 4
D 5
.PP
E 5
I 5
.Pp
E 5
D 4
.I Argv
is directly usable in another
.I execv
because
.IR argv [ argc ]
is 0.
E 4
I 4
If permission is denied for a file (the attempted
D 5
.I execve
returned EACCES), these functions will continue searching the rest of
E 5
I 5
.Xr execve
returned
.Er EACCES ) ,
these functions will continue searching the rest of
E 5
the search path.
D 5
If no other file is found, however, they will return with
.I errno
set to EACCES.
E 4
.PP
E 5
I 5
If no other file is found, however, they will return with the global variable
.Va errno
set to
.Er EACCES .
.Pp
E 5
D 4
.I Envp
is a pointer to an array of strings that constitute
the
.I environment
of the process.
Each string consists of a name, an \*(lq=\*(rq, and a null-terminated value.
The array of pointers is terminated by a null pointer.
The shell
.IR sh (1)
passes an environment entry for each global shell variable
defined when the program is called.
See
.IR environ (7)
for some conventionally
used names.
The C run-time start-off routine places a copy of
.I envp
in the global cell
.IR environ ,
which is used
by
.I execv
and
.I execl
to pass the environment to any subprograms executed by the
current program.
E 4
I 4
If the header of a file isn't recognized (the attempted
D 5
.I execve
returned ENOEXEC), these functions will execute the shell with the path of
E 5
I 5
.Xr execve
returned
.Er ENOEXEC ) ,
these functions will execute the shell with the path of
E 5
the file as its first argument.
(If this attempt fails, no further searching is done.)
E 4
D 5
.PP
E 5
I 5
.Pp
E 5
D 4
.I Execlp
E 4
I 4
If the file is currently busy (the attempted
D 5
.I execve
returned ETXTBUSY), these functions will sleep for several seconds,
E 5
I 5
.Xr execve
returned
.Er ETXTBUSY ) ,
these functions will sleep for several seconds,
E 5
periodically re-attempting to execute the file.
D 5
.PP
E 5
I 5
.Pp
E 5
The function
D 5
.I exect
E 5
I 5
.Fn exect
E 5
executes a file with the program tracing facilities enabled (see
D 5
.IR ptrace (2)).
.SH "RETURN VALUE"
E 5
I 5
.Xr ptrace 2 ) .
.Sh RETURN VALUES
E 5
If any of the
D 5
.I exec
E 5
I 5
.Xr exec
E 5
functions returns, an error will have occurred.
D 5
The return value is -1, and
.I errno
E 5
I 5
The return value is \-1, and the global variable
.Va errno
E 5
will be set to indicate the error.
D 5
.SH ERRORS
.IR Execl ,
.IR execle ,
.I execlp
E 5
I 5
.Sh FILES
.Bl -tag -width /bin/sh - compact
.It Pa /bin/sh
The shell.
.El
.Sh ERRORS
.Fn Execl ,
.Fn execle ,
.Fn execlp
E 5
E 4
and
D 5
.I execvp
E 5
I 5
.Fn execvp
E 5
D 4
are called with the same arguments as
.I execl
E 4
I 4
may fail and set
D 5
.I errno
E 5
I 5
.Va errno
E 5
for any of the errors specified for the library functions
D 5
.IR execve (2)
E 5
I 5
.Xr execve 2
E 5
E 4
and
D 4
.IR execv ,
but duplicate the shell's actions in searching for an executable
file in a list of directories.
The directory list is obtained from the environment.
E 4
I 4
D 5
.IR malloc (3).
.PP
.I Exect
E 5
I 5
.Xr malloc 3 .
.Pp
.Fn Exect
E 5
and
D 5
.I execv
E 5
I 5
.Fn execv
E 5
may fail and set
D 5
.I errno
E 5
I 5
.Va errno
E 5
for any of the errors specified for the library function
D 5
.IR execve (2).
E 4
.SH FILES
D 4
.ta \w'/bin/sh  'u
/bin/sh	shell, invoked if command file found
by
E 4
I 4
/bin/sh		The shell.
.SH "SEE ALSO"
sh(1), execve(2), fork(2),  ptrace(2), environ(7),
.SH COMPATIBILITY
E 5
I 5
.Xr execve 2 .
.Sh SEE ALSO
.Xr sh 1 ,
.Xr execve 2 ,
.Xr fork 2 ,
.Xr trace 2 ,
.Xr environ 7 ,
.Xr ptrace 2 ,
.Xr environ 7 ,
.Sh COMPATIBILITY
E 5
Historically, the default path for the
E 4
D 5
.I execlp
E 5
I 5
.Fn execlp
E 5
D 4
or
E 4
I 4
and
E 4
D 5
.I execvp
D 4
.SH "SEE ALSO"
execve(2),
fork(2),
environ(7),
csh(1)
.SH DIAGNOSTICS
If the file cannot be found,
if it is not executable,
if it does not start with a valid magic number (see
.IR a.out (5)),
if maximum memory is exceeded,
or if the arguments require too much space,
a return
constitutes the diagnostic;
the return value is \-1.
Even for the super-user,
at least one of the execute-permission bits must be set for
a file to be executed.
.SH BUGS
If
E 4
I 4
functions was ``:/bin:/usr/bin''.
E 5
I 5
.Fn execvp
functions was
.Dq Pa :/bin:/usr/bin .
E 5
This was changed to place the current directory last to enhance system
security.
D 5
.PP
E 5
I 5
.Pp
E 5
The behavior of
D 5
.I execlp
E 5
I 5
.Fn execlp
E 5
and
E 4
D 5
.I execvp
E 5
I 5
.Fn execvp
E 5
D 4
is called to execute a file that turns out to be a shell
command file,
and if it is impossible to execute the shell,
the values of
.I argv[0]
E 4
I 4
when errors occur while attempting to execute the file is historic
practice, but has not traditionally been documented and is not specified
D 5
by the POSIX standard.
.PP
E 5
I 5
by the
.Tn POSIX
standard.
.Pp
E 5
Traditionally, the functions
D 5
.I execlp
E 5
I 5
.Fn execlp
E 5
E 4
and
D 4
.I argv[\-1]
will be modified before return.
E 4
I 4
D 5
.I execvp
ignored all errors except for the ones described above and ENOMEM and
E2BIG, upon which they returned.
E 5
I 5
.Fn execvp
ignored all errors except for the ones described above and
.Er ENOMEM
and
.Er E2BIG ,
upon which they returned.
E 5
They now return if any error other than the ones described above occurs.
D 5
.SH STANDARDS
.IR Execl ,
.IR execv ,
.IR execle ,
.IR execlp
E 5
I 5
.Sh STANDARDS
.Fn Execl ,
.Fn execv ,
.Fn execle ,
.Fn execlp
E 5
and
D 5
.I execvp
conform to IEEE Std 1003.1-1988 (``POSIX'').
E 5
I 5
.Fn execvp
conform to
.St -p1003.1-88 .
E 5
E 4
E 1
