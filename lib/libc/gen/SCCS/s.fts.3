h28236
s 00001/00001/00721
d D 8.5 94/04/16 07:41:17 bostic 27 26
c typo
e
s 00002/00002/00720
d D 8.4 94/04/07 14:38:35 bostic 26 25
c typo
e
s 00001/00001/00721
d D 8.3 94/02/16 12:26:10 bostic 25 24
c typo; From: ralphc@pyramid.com (Ralph Campbell)
e
s 00002/00002/00720
d D 8.2 93/11/16 12:41:37 bostic 24 23
c describe fts(3)'s place in the stanards world correctly
e
s 00002/00002/00720
d D 8.1 93/06/04 12:01:55 bostic 23 22
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00000/00012/00722
d D 5.21 92/03/05 16:34:01 elan 22 21
c Made fts_pointer and fts_number fields separate fields.
e
s 00036/00007/00698
d D 5.20 92/03/01 13:25:51 bostic 21 20
c add option argument to fts_children; error return if options invalid
e
s 00010/00004/00695
d D 5.19 92/02/04 16:53:54 bostic 20 19
c add FTS_COMFOLLOW; document that the order of the files in the directory
c is as found in the directory
e
s 00001/00001/00698
d D 5.18 92/01/21 10:33:48 elan 19 18
c Corrected compar() fn type to const FTSENT ** rather than 
c const FTSENT *.
e
s 00014/00014/00685
d D 5.17 92/01/20 12:15:01 bostic 18 17
c statb is now a pointer, statp
e
s 00025/00013/00674
d D 5.16 92/01/15 17:56:08 bostic 17 16
c lots of minor rewording; add FTS_DOT, fix errno reporting
e
s 00068/00042/00619
d D 5.15 92/01/09 17:29:15 bostic 16 15
c fts_children needs to return user's logical hierarchy;
c make fts_error user visible, add wording to fts_children description
e
s 00018/00016/00643
d D 5.14 91/12/30 17:52:20 bostic 15 14
c add fts_cycle for cycles, quit overloading fts_link; minor wordsmithing
e
s 00001/00010/00658
d D 5.13 91/12/26 20:17:21 bostic 14 13
c SEEDOT replaced FTS_DOT completely
e
s 00001/00001/00667
d D 5.12 91/08/30 16:37:59 bostic 13 12
c typo
e
s 00001/00001/00667
d D 5.11 91/07/31 19:56:17 cael 12 10
c reposition display
e
s 00001/00001/00667
d R 5.11 91/07/31 19:23:06 cael 11 10
c reposition display
e
s 00420/00330/00248
d D 5.10 91/04/19 14:50:01 cael 10 9
c macro and text revision (-mdoc version 3)
e
s 00048/00061/00530
d D 5.9 91/03/10 12:25:46 bostic 9 8
c rework to set errno on fts_info error cases, return names from unsearchable
c directories
e
s 00008/00005/00583
d D 5.8 90/11/29 17:01:14 bostic 8 7
c minor changes + typos
e
s 00412/00319/00176
d D 5.7 90/11/15 13:28:15 bostic 7 6
c lots of changes, rearrangement for clarity, few normative changes
e
s 00001/00011/00494
d D 5.6 90/06/23 17:55:33 trent 6 5
c new copyright notice
e
s 00015/00025/00490
d D 5.5 90/06/09 16:33:32 bostic 5 4
c delete FTS_MULTIPLE
e
s 00006/00000/00509
d D 5.4 90/05/22 18:57:50 bostic 4 3
c add FTS_XDEV; don't cross mount points
e
s 00049/00047/00460
d D 5.3 90/05/22 13:09:59 bostic 3 2
c change the names from foo to fts_foo
e
s 00003/00000/00504
d D 5.2 90/01/05 10:02:38 bostic 2 1
c document that compar can be NULL
e
s 00504/00000/00000
d D 5.1 89/12/30 15:55:57 bostic 1 0
c date and time created 89/12/30 15:55:57 by bostic
e
u
U
t
T
I 1
D 10
.\" Copyright (c) 1989 The Regents of the University of California.
E 10
I 10
D 23
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 10
.\" All rights reserved.
E 23
I 23
D 26
.\" Copyright (c) 1989, 1991, 1993
E 26
I 26
.\" Copyright (c) 1989, 1991, 1993, 1994
E 26
.\"	The Regents of the University of California.  All rights reserved.
E 23
.\"
D 6
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 6
I 6
.\" %sccs.include.redist.man%
E 6
.\"
D 10
.\"	%W% (Berkeley) %G%
E 10
I 10
.\"     %W% (Berkeley) %G%
E 10
.\"
D 10
.TH FTS 3 "%Q%"
.UC 7
.SH NAME
fts \- traverse a file hierarchy
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <sys/stat.h>
#include <fts.h>

D 9
FTS *
D 5
ftsopen(path, options, compar)
char *path;
int options, (*compar)();

FTS *
ftsopen(path_argv, options | FTS_MULTIPLE, compar)
E 5
I 5
D 7
ftsopen(path_argv, options, compar)
E 7
I 7
fts_open(path_argv, options, compar)
E 7
E 5
char *path_argv[];
int options, (*compar)();
E 9
I 9
FTS *fts_open(char * const *path_argv, int options,
.ti +5
int *compar(const FTSENT *, const FTSENT *));
E 9

FTSENT *
D 7
ftsread(ftsp);
E 7
I 7
D 9
fts_read(ftsp);
E 7
FTS *ftsp;
E 9
I 9
fts_read(FTS *ftsp);
E 9

FTSENT *
D 7
ftschildren(ftsp)
E 7
I 7
D 9
fts_children(ftsp)
E 7
FTS *ftsp;
E 9
I 9
fts_children(FTS *ftsp);
E 9

D 7
ftsset(ftsp, f, options)
E 7
I 7
D 9
fts_set(ftsp, f, options)
E 7
FTS *ftsp;
FTSENT *f;
int options;
E 9
I 9
fts_set(FTS ftsp, FTSENT *f, int options);
E 9

D 7
ftsclose(ftsp)
E 7
I 7
D 9
fts_close(ftsp)
E 7
FTS *ftsp;
E 9
I 9
fts_close(FTS *ftsp);
E 9
.ft R
.fi
.SH DESCRIPTION
E 10
I 10
.Dd %Q%
.Dt FTS 3
.Os
.Sh NAME
.Nm fts
.Nd traverse a file hierarchy
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/stat.h>
.Fd #include <fts.h>
.Ft FTS *
D 19
.Fn fts_open "char * const *path_argv" "int options" "int *compar(const FTSENT *, const FTSENT *)"
E 19
I 19
.Fn fts_open "char * const *path_argv" "int options" "int *compar(const FTSENT **, const FTSENT **)"
E 19
.Ft FTSENT *
.Fn fts_read "FTS *ftsp"
.Ft FTSENT *
D 21
.Fn fts_children "FTS *ftsp"
E 21
I 21
.Fn fts_children "FTS *ftsp" "int options"
E 21
.Ft int
.Fn fts_set "FTS ftsp" "FTSENT *f" "int options"
.Ft int
.Fn fts_close "FTS *ftsp"
.Sh DESCRIPTION
E 10
The
D 10
.IR fts (3)
D 7
utilities are provided for traversing UNIX file hierarchies.
Two structures are defined (and typedef'd) in the include file <\fIfts.h\fP>.
The first is FTS, the structure that defines the file hierarchy stream.
The second is FTSENT, the structure that defines a file in the file
hierarchy.
E 7
I 7
functions are provided for traversing UNIX file hierarchies.
E 7
.PP
E 10
I 10
.Nm fts
functions are provided for traversing
.Tn UNIX
file hierarchies.
D 17
.Pp
E 10
D 7
The
.I ftsopen
D 5
routine returns a pointer to a file hierarchy rooted at
.IR path .
E 5
I 5
routine takes a pointer to an array of character pointers (``argv'')
naming the file hierarchies to be traversed.
The array must be terminated by a pointer to a NULL string.
.PP
E 5
The 
.I options
specified are formed by
.IR or 'ing
one or more of the following values:
.TP
FTS_LOGICAL
This option causes 
.I ftsread
to use the function
.IR stat (2),
by default, to determine the status of each file.
If this option is set, the only symbolic links returned to the application
are those referencing non-existent files.
Either FTS_LOGICAL or FTS_PHYSICAL
.B must
be provided to the 
.I ftsopen
routine.
.TP
D 5
FTS_MULTIPLE
.I Ftsopen
takes a single file name as a path argument by default.
If the FTS_MULTIPLE option is specified, the path argument is a pointer
to an array of character pointers (``argv'') to the paths to be traversed.
The array must be terminated by a pointer to a NULL string.
In this case the ``logical'' hierarchy is traversed, i.e. it's as if
there's a virtual directory that contains the list of paths supplied,
and the hierarchy is rooted in that directory.
.TP
E 5
FTS_NOCHDIR
As a performance optimization,
.I ftsread
changes directories as it descends the hierarchy.
This has the side-effect that applications cannot rely on being
in any particular directory.
The FTS_NOCHDIR option turns off this optimization.
Note that applications should not change the current directory
(even if FTS_NOCHDIR is specified) unless absolute pathnames were
provided as arguments to
.IR ftsopen .
.TP
FTS_NOSTAT
By default,
.I ftsread
and
.I ftschildren
provide file characteristic information (the
.I statb
field) for each file they return.
This option relaxes that requirement; the contents of the
.I statb
field may be undefined, and the
.I info
field may be set to FTS_NS.
.TP
FTS_PHYSICAL
This option causes 
.I ftsread
to use the function
.IR lstat (2),
by default, to determine the status of each file.
If this option is set, all symbolic links are returned to the application
program.
Either FTS_LOGICAL or FTS_PHYSICAL
.B must
be provided to the 
.I ftsopen
routine.
.TP
FTS_SEEDOT
This option causes the routine
.I ftsread
to return structures for the directory entries ``.'' and ``..''.
By default they are ignored unless specified as an argument to
.IR ftsopen .
I 4
.TP
FTS_XDEV
This option keeps
E 7
I 7
D 9
The simple overview is that the function
E 9
I 9
The simple overview is that the
E 17
I 17
A simple overview is that the
E 17
E 9
D 10
.I fts_open
E 10
I 10
.Fn fts_open
E 10
D 9
returns a ``handle'' on a file hierarchy, which is supplied to the other
E 9
I 9
D 17
function returns a ``handle'' on a file hierarchy, which is supplied to
E 17
I 17
function returns a ``handle'' on a file hierarchy, which is then supplied to
E 17
the other
E 9
E 7
D 10
.I fts
E 10
I 10
.Nm fts
E 10
D 7
from descending into directories that have a different device number
than the file the descent began from.
E 7
I 7
D 17
functions to determine which hierarchy they operate on.
E 17
I 17
functions.
E 17
The function
D 10
.I fts_read
E 10
I 10
.Fn fts_read
E 10
returns a pointer to a structure describing one of the files in the file
hierarchy.
The function
D 10
.I fts_children
E 10
I 10
.Fn fts_children
E 10
returns a pointer to a linked list of structures, each of which describes
one of the files contained in a directory in the hierarchy.
In general, directories are visited two distinguishable times; in pre-order
(before any of their descendants are visited) and in post-order (after all
of their descendants have been visited).
Files are visited once.
It is possible to walk the hierarchy ``logically'' (ignoring symbolic links)
or physically (visiting symbolic links), order the walk of the hierarchy or
prune and/or re-visit portions of the hierarchy.
E 7
E 4
D 10
.PP
D 7
The argument
.I compar
specifies a user-defined routine which is used to order the traversal
of directories.
.I Compar
takes two pointers to pointers to FTSENT structures as arguments and
should return a negative value, zero, or a positive value to indicate
if the file referenced by its first argument comes before, in any order
with respect to, or after, the file referenced by its second argument.
D 5
Note, the
E 5
I 5
.PP
The
E 5
D 3
.I accpath
E 3
I 3
.I fts_accpath
E 3
and
D 3
.I path
E 3
I 3
.I fts_path
E 3
fields of the FTSENT structures may not be used in this comparison.
I 5
If the option
.I FTS_NOSTAT
is specified, the
.I fts_stab
field may not be used as well.
E 5
I 2
If the
.I compar
D 5
argument is NULL the traversal order is undefined.
E 2
.PP
If both FTS_MULTIPLE and the user comparison routine are specified,
the root paths are processed in sorted order.
Otherwise, the root paths are processed in the order specified by
the user.
E 5
I 5
argument is NULL the directory traversal order is unspecified except
for the root paths which are traversed in the order listed in
.IR path_argv .
E 5
.PP
The
.I ftsclose
routine closes a file hierarchy stream and changes the current
directory to the directory
.I ftsopen
was called from.
.I Ftsclose
returns 0 on success, and -1 if an error occurs.
.PP
Each call to the
.I ftsread 
routine returns a pointer to an FTSENT structure describing a file in
the hierarchy.
Directories (that are readable, searchable and do not cause cycles)
are visited at least twice, before any of their descendants have been
visited (pre-order) and after all their descendants have been visited
(post-order).
All other files are visited at least once.
.PP
The FTSENT structure contains at least the following fields:
E 7
I 7
Two structures are defined (and typedef'd) in the include file <fts.h>.
The first is FTS, the structure that represents the file hierarchy stream.
The second is FTSENT, the structure that represents a file in the file
E 10
I 10
.Pp
Two structures are defined (and typedef'd) in the include file
.Aq Pa fts.h .
The first is
.Fa FTS ,
D 17
the structure that represents the file hierarchy stream.
E 17
I 17
the structure that represents the file hierarchy itself.
E 17
The second is
.Fa FTSENT ,
the structure that represents a file in the file
E 10
hierarchy.
D 10
Normally, an FTSENT structure is returned for every file in the file
E 10
I 10
Normally, an
.Fa FTSENT
structure is returned for every file in the file
E 10
hierarchy.
D 10
In this manual page, ``file'' and ``FTSENT structure'' are generally
E 10
I 10
In this manual page, ``file'' and
.Dq Fa FTSENT No structure
are generally
E 10
interchangeable.
D 10
The FTSENT structure contains at least the following fields, which are
E 10
I 10
The
.Fa FTSENT
structure contains at least the following fields, which are
E 10
described in greater detail below:
E 7
D 10
.sp
D 7
.RS
E 7
.nf
.ta .5i +.5i +\w'struct ftsent *parent;\0\0\0'u
E 10
I 10
D 12
.Bd -literal -offset indent
E 12
I 12
.Bd -literal
E 12
E 10
D 7
typedef struct ftsent {
D 3
	struct ftsent *parent;		/* parent structure */
	struct ftsent *link;		/* cycle or file structure */
E 3
I 3
	struct ftsent *fts_parent;		/* parent structure */
	struct ftsent *fts_link;		/* cycle or file structure */
E 3
	union {
		long number;		/* local numeric value */
		void *pointer;		/* local address value */
D 3
	} local;
	char *accpath;			/* path from current directory */
	char *path;			/* path from starting directory */
	char *name;			/* file name */
	short pathlen;			/* strlen(path) */
	short namelen;			/* strlen(name) */
	short level;			/* depth (\-1 to N) */
	unsigned short info;		/* flags for entry */
	struct stat statb;			/* stat(2) information */
E 3
I 3
	} fts_local;
	char *fts_accpath;			/* path from current directory */
	char *fts_path;			/* path from starting directory */
E 7
I 7
typedef struct _ftsent {
D 10
	u_short fts_info;			/* flags for FTSENT structure */
	char *fts_accpath;			/* access path */
E 10
I 10
	u_short fts_info;		/* flags for FTSENT structure */
	char *fts_accpath;		/* access path */
E 10
	char *fts_path;			/* root path */
D 10
	short fts_pathlen;			/* strlen(fts_path) */
E 10
I 10
	short fts_pathlen;		/* strlen(fts_path) */
E 10
E 7
	char *fts_name;			/* file name */
D 7
	short fts_pathlen;			/* strlen(path) */
	short fts_namelen;			/* strlen(name) */
E 7
I 7
D 10
	short fts_namelen;			/* strlen(fts_name) */
E 7
	short fts_level;			/* depth (\-1 to N) */
D 7
	unsigned short fts_info;		/* flags for entry */
E 7
I 7
D 8
	long fts_number				/* local numeric value */
E 8
I 8
	long fts_number;			/* local numeric value */
E 10
I 10
	short fts_namelen;		/* strlen(fts_name) */
	short fts_level;		/* depth (\-1 to N) */
I 16
D 17
	int fts_error;			/* node errno */
E 17
I 17
D 26
	int fts_error;			/* file errno */
E 26
I 26
	int fts_errno;			/* file errno */
E 26
E 17
E 16
	long fts_number;		/* local numeric value */
E 10
E 8
	void *fts_pointer;		/* local address value */
D 10
	struct ftsent *fts_parent;		/* parent directory */
	struct ftsent *fts_link;		/* cycle or next file structure */
E 7
	struct stat fts_statb;			/* stat(2) information */
E 10
I 10
	struct ftsent *fts_parent;	/* parent directory */
D 15
	struct ftsent *fts_link;	/* cycle or next file structure */
E 15
I 15
	struct ftsent *fts_link;	/* next file structure */
	struct ftsent *fts_cycle;	/* cycle structure */
E 15
D 18
	struct stat fts_statb;		/* stat(2) information */
E 18
I 18
	struct stat *fts_statp;		/* stat(2) information */
E 18
E 10
E 3
} FTSENT;
D 10
.fi
I 9
.\" Makes the output look a lot better.
.bp
E 9
D 7
.RE
E 7
.PP
E 10
I 10
.Ed
.Pp
E 10
D 7
The fields are as follows:
E 7
I 7
These fields are defined as follows:
E 7
D 10
.TP
D 3
parent
E 3
I 3
D 7
fts_parent
E 3
A pointer to a structure referencing the file in the hierarchy
immediately above the current file/structure.
A parent structure for the initial entry point is provided as well,
however, only the
D 3
.I local
E 3
I 3
.I fts_local
E 3
and
D 3
.I level
E 3
I 3
.I fts_level
E 3
fields are guaranteed to be initialized.
.TP
D 3
link
E 3
I 3
fts_link
E 3
If a directory causes a cycle in the hierarchy, either because of a
hard link between two directories, or a symbolic link pointing to a
directory, the
D 3
.I link
E 3
I 3
.I fts_link
E 3
field of the structure will point to the structure in the hierarchy 
that references the same file as the current structure.
Upon return from the
.I ftschildren
routine, the
D 3
.I link
E 3
I 3
.I fts_link
E 3
field points to the next structure in the linked list of entries
from the directory.
D 3
Otherwise, the contents of the link field are undefined.
E 3
I 3
Otherwise, the contents of the
.I fts_link
field are undefined.
E 3
.TP
D 3
local
E 3
I 3
fts_local
E 3
This field is provided for the use of the application program.
It can be used to store either a long value or an address.
.TP
D 3
accpath
E 3
I 3
fts_accpath
E 3
A path that can be used to access the file.
.TP
D 3
path
E 3
I 3
fts_path
E 3
The path for the file relative to the root of the traversal.
.TP
D 3
name
E 3
I 3
fts_name
E 3
The basename of the file.
.TP
D 3
pathlen
E 3
I 3
fts_pathlen
E 3
The length of the string referenced by
D 3
.IR path .
E 3
I 3
.IR fts_path .
E 3
.TP
D 3
namelen
E 3
I 3
fts_namelen
E 3
The length of the string referenced by
D 3
.IR name .
E 3
I 3
.IR fts_name .
E 3
.TP 
D 3
level
E 3
I 3
fts_level
E 3
The depth of the traversal, numbered from \-1 to N.
The parent structure of the root of the traversal is numbered \-1, and
the structure for the root of the traversal is numbered 0.
.TP 
E 7
D 3
info
E 3
I 3
fts_info
E 3
D 7
Information describing the file.
With the exception of directories (FTS_D), all of these entries are
terminal, i.e. they will not be revisited, nor will their descendants
be visited (if they have not been visited already).
E 7
I 7
One of the following flags describing the returned FTSENT structure and
E 10
I 10
.Bl -tag -width "fts_namelen"
.It Fa fts_info
One of the following flags describing the returned
.Fa FTSENT
structure and
E 10
the file it represents.
D 10
With the exception of directories without errors (FTS_D), all of these
E 10
I 10
With the exception of directories without errors
.Pq Dv FTS_D ,
all of these
E 10
entries are terminal, that is, they will not be revisited, nor will any
of their descendants be visited.
E 7
D 10
.RS
.TP
FTS_D
E 10
I 10
.Bl  -tag -width FTS_DEFAULT
.It Dv FTS_D
E 10
A directory being visited in pre-order.
D 10
.TP
FTS_DC
E 10
I 10
.It Dv FTS_DC
E 10
D 7
A directory that causes a cycle.
The 
E 7
I 7
A directory that causes a cycle in the tree.
(The
E 7
D 3
.I link
E 3
I 3
D 10
.I fts_link
E 3
D 7
field of the structure will be filled in as well.
E 7
I 7
field of the FTSENT structure will be filled in as well.)
E 7
.TP
FTS_DEFAULT
D 7
Anything that's not one of the others.
E 7
I 7
Any FTSENT structure that represents a file type not explicitly described
E 10
I 10
D 15
.Fa fts_link
E 15
I 15
.Fa fts_cycle
E 15
field of the
.Fa FTSENT
structure will be filled in as well.)
.It Dv FTS_DEFAULT
Any
.Fa FTSENT
structure that represents a file type not explicitly described
E 10
by one of the other
D 10
.I fts_info
E 10
I 10
.Fa fts_info
E 10
values.
E 7
D 10
.TP
FTS_DNR
E 10
I 10
.It Dv FTS_DNR
E 10
D 7
A directory that cannot be read.
E 7
I 7
A directory which cannot be read.
D 9
Directory readability is checked before directory searchability
(see FTS_DNX).
E 9
I 9
D 16
An error return; the external variable
D 10
.I errno
E 10
I 10
.Va errno
E 10
will be set to indicate the error.
E 16
I 16
This is an error return, and the
.Fa fts_errno
field will be set to indicate what caused the error.
I 17
.It Dv FTS_DOT
A file named
.Ql \&.
or
.Ql ..
which was not specified as a file name to
.Fn fts_open
(see
.Dv FTS_SEEDOT ) .
E 17
E 16
E 9
E 7
D 10
.TP
D 9
FTS_DNX
D 7
A directory that cannot be searched.
E 7
I 7
A directory which cannot be searched.
Directory readability is checked before directory searchability
(see FTS_DNR).
E 7
.TP
E 9
FTS_DOT
D 7
A file named ``.'' or ``..'' with a
D 3
.I level
E 3
I 3
.I fts_level
E 3
field not equal to zero, i.e. one not specified as an argument to
.IR ftsopen .
(See FTS_SEEDOT.)
E 7
I 7
A file named ``.'' or ``..'' which was not specified as a file name to
.I fts_open
(see FTS_SEEDOT).
E 7
.TP
FTS_DP
E 10
I 10
D 14
.It Dv FTS_DOT
A file named
.Ql \&.
or
.Ql ..
which was not specified as a file name to
.Fn fts_open
(see
.Dv FTS_SEEDOT ) .
E 14
.It Dv FTS_DP
E 10
D 7
A directory that is being visited in post-order.
The contents of the structure will be unchanged from when the
directory was visited in pre-order.
E 7
I 7
A directory being visited in post-order.
D 10
The contents of the FTSENT structure will be unchanged from when
E 10
I 10
The contents of the
.Fa FTSENT
structure will be unchanged from when
E 10
it was returned in pre-order, i.e. with the
D 10
.I fts_info
field set to FTS_D.
E 7
.TP
FTS_ERR
E 10
I 10
.Fa fts_info
field set to
.Dv FTS_D .
.It Dv FTS_ERR
E 10
D 7
An error indicator; the external variable
E 7
I 7
D 16
An error return; the external variable
E 7
D 10
.I errno
E 10
I 10
.Va errno
E 10
D 7
contains an error number indicating the reason for the error.
E 7
I 7
will be set to indicate the error.
E 16
I 16
This is an error return, and the
.Fa fts_errno
field will be set to indicate what caused the error.
E 16
E 7
D 10
.TP
FTS_F
E 10
I 10
.It Dv FTS_F
E 10
A regular file.
D 10
.TP
FTS_NS
E 10
I 10
.It Dv FTS_NS
E 10
D 7
No
E 7
I 7
A file for which no
E 7
D 10
.IR stat (2)
E 10
I 10
.Xr stat 2
E 10
D 7
information is available at this time (see FTS_NOSTAT); the
contents of the
E 7
I 7
D 9
information was available (see FTS_NOSTAT).
In this case the contents of the
E 9
I 9
information was available.
The contents of the
E 9
E 7
D 3
.I statb
E 3
I 3
D 10
.I fts_statb
E 10
I 10
D 18
.Fa fts_statb
E 18
I 18
.Fa fts_statp
E 18
E 10
E 3
field are undefined.
I 9
D 16
An error return; the external variable
D 10
.I errno
E 10
I 10
.Va errno
E 10
will be set to indicate the error.
E 16
I 16
This is an error return, and the
.Fa fts_errno
field will be set to indicate what caused the error.
E 16
E 9
D 10
.TP
I 9
FTS_NSOK
E 10
I 10
.It Dv FTS_NSOK
E 10
A file for which no
D 10
.IR stat (2)
E 10
I 10
.Xr stat 2
E 10
information was requested.
The contents of the
D 10
.I fts_statb
E 10
I 10
D 18
.Fa fts_statb
E 18
I 18
.Fa fts_statp
E 18
E 10
field are undefined.
D 10
.TP
E 9
FTS_SL
E 10
I 10
.It Dv FTS_SL
E 10
A symbolic link.
D 10
.TP
FTS_SLNONE
E 10
I 10
.It Dv FTS_SLNONE
E 10
A symbolic link with a non-existent target.
I 9
The contents of the
D 10
.I fts_statb
E 10
I 10
D 18
.Fa fts_statb
E 10
field contain the file characteristic information for the symbolic link
E 18
I 18
.Fa fts_statp
field reference the file characteristic information for the symbolic link
E 18
itself.
E 9
D 10
.RE
.TP
I 7
fts_accpath
E 10
I 10
.El
.It Fa fts_accpath
E 10
D 9
A path for accessing the file.
This will be the same as
.I fts_path
or
.IR fts_name ,
depending on whether the
.I fts
functions are changing the current working directory or not (see FTS_NOCHDIR).
E 9
I 9
A path for accessing the file from the current directory.
E 9
D 10
.TP
fts_path
E 10
I 10
.It Fa fts_path
E 10
The path for the file relative to the root of the traversal.
This path contains the path specified to
D 10
.I fts_open
E 10
I 10
.Fn fts_open
E 10
as a prefix.
D 10
.TP
fts_pathlen
E 10
I 10
.It Fa fts_pathlen
E 10
The length of the string referenced by
D 10
.IR fts_path .
.TP
fts_name
E 10
I 10
.Fa fts_path .
.It Fa fts_name
E 10
The name of the file.
D 10
.TP
fts_namelen
E 10
I 10
.It Fa fts_namelen
E 10
The length of the string referenced by
D 10
.IR fts_name .
.TP
fts_level
E 10
I 10
.Fa fts_name .
.It Fa fts_level
E 10
The depth of the traversal, numbered from \-1 to N, where this file
was found.
D 10
The FTSENT structure representing the parent of the starting point (or root)
of the traversal is numbered \-1, and the FTSENT structure for the root
E 10
I 10
The
.Fa FTSENT
structure representing the parent of the starting point (or root)
of the traversal is numbered \-1, and the
.Fa FTSENT
structure for the root
E 10
itself is numbered 0.
I 16
.It Fa fts_errno
D 17
Upon return of a node from the
E 17
I 17
Upon return of a
.Fa FTSENT
structure from the
E 17
.Fn fts_children
or
.Fn fts_read
functions, with its
.Fa fts_info
field set to 
I 17
.Dv FTS_DNR ,
E 17
.Dv FTS_ERR
or
.Dv FTS_NS ,
the
.Fa fts_errno
field contains the value of the external variable
.Va errno
specifying the cause of the error.
Otherwise, the contents of the
.Fa fts_errno
field are undefined.
E 16
D 10
.TP
fts_number
E 10
I 10
.It Fa fts_number
E 10
This field is provided for the use of the application program and is
not modified by the
D 10
.I fts
E 10
I 10
.Nm fts
E 10
functions.
It is initialized to 0.
D 17
The fields
E 17
I 17
D 22
The
E 17
D 10
.I fts_number
E 10
I 10
.Fa fts_number
E 10
and
D 10
.I fts_pointer
E 10
I 10
.Fa fts_pointer
E 10
D 17
occupy the same physical location; using both may cause undefined results.
E 17
I 17
fields occupy the same physical location; using both may cause undefined
results.
E 22
E 17
D 10
.TP
fts_pointer
E 10
I 10
.It Fa fts_pointer
E 10
This field is provided for the use of the application program and is
not modified by the
D 10
.I fts
E 10
I 10
.Nm fts
E 10
functions.
D 10
It is initialized to NULL.
E 10
I 10
It is initialized to
.Dv NULL .
E 10
D 17
The fields
E 17
I 17
D 22
The
E 17
D 10
.I fts_number
E 10
I 10
.Fa fts_number
E 10
and
D 10
.I fts_pointer
E 10
I 10
.Fa fts_pointer
E 10
D 17
occupy the same physical location; using both may cause undefined results.
E 17
I 17
fields occupy the same physical location; using both may cause undefined
results.
E 22
E 17
D 10
.TP
fts_parent
A pointer to the FTSENT structure referencing the file in the hierarchy
E 10
I 10
.It Fa fts_parent
A pointer to the
.Fa FTSENT
structure referencing the file in the hierarchy
E 10
immediately above the current file, i.e. the directory of which this
file is a member.
A parent structure for the initial entry point is provided as well,
however, only the
D 10
.IR fts_level ,
.I fts_number
E 10
I 10
.Fa fts_level ,
.Fa fts_number
E 10
and
D 10
.I fts_pointer
E 10
I 10
.Fa fts_pointer
E 10
fields are guaranteed to be initialized.
D 10
.TP
fts_link
E 10
I 10
.It Fa fts_link
E 10
D 15
The
E 15
I 15
Upon return from the
.Fn fts_children
function, the
E 15
D 10
.I fts_link
E 10
I 10
.Fa fts_link
E 10
D 15
field has two separate uses.
E 15
I 15
field points to the next structure in the NULL-terminated linked list of
directory members.
Otherwise, the contents of the
.Fa fts_link
field are undefined.
.It Fa fts_cycle
E 15
D 10
If a directory causes a cycle in the hierarchy (see FTS_DC), either because
E 10
I 10
If a directory causes a cycle in the hierarchy (see
.Dv FTS_DC ) ,
either because
E 10
of a hard link between two directories, or a symbolic link pointing to a
directory, the
D 10
.I fts_link
field of the structure will point to the FTSENT structure in the hierarchy
that references the same file as the current FTSENT structure.
E 10
I 10
D 15
.Fa fts_link
E 15
I 15
.Fa fts_cycle
E 15
field of the structure will point to the
.Fa FTSENT
D 15
structure in the hierarchy
that references the same file as the current
E 15
I 15
structure in the hierarchy that references the same file as the current
E 15
.Fa FTSENT
structure.
E 10
D 15
Also, upon return from the
D 10
.I fts_children
E 10
I 10
.Fn fts_children
E 10
function, the
D 10
.I fts_link
E 10
I 10
.Fa fts_link
E 10
field points to the next structure in the linked list of directory members.
E 15
Otherwise, the contents of the
D 10
.I fts_link
E 10
I 10
D 15
.Fa fts_link
E 15
I 15
.Fa fts_cycle
E 15
E 10
field are undefined.
D 10
.TP
E 7
D 3
statb
E 3
I 3
fts_statb
E 3
.IR Stat (2)
E 10
I 10
D 18
.It Fa fts_statb
.Xr Stat 2
E 18
I 18
.It Fa fts_statp
A pointer to
.Xr stat 2
E 18
E 10
information for the file.
I 7
D 10
.SH FTS_OPEN
E 10
I 10
.El
I 16
.Pp
A single buffer is used for all of the paths of all of the files in the
file hierarchy.
Therefore, the
.Fa fts_path
and
.Fa fts_accpath
fields are guaranteed to be
.Dv NULL Ns -terminated
.Em only
for the file most recently returned by
.Fn fts_read .
To use these fields to reference any files represented by other
.Fa FTSENT
structures will require that the path buffer be modified using the
information contained in that
.Fa FTSENT
structure's
.Fa fts_pathlen
field.
Any such modifications should be undone before further calls to
.Fn fts_read
are attempted.
The
.Fa fts_name
field is always
.Dv NULL Ns -terminated.
E 16
.Sh FTS_OPEN
E 10
The
D 10
.I fts_open
E 10
I 10
.Fn fts_open
E 10
function takes a pointer to an array of character pointers naming one
or more paths which make up a logical file hierarchy to be traversed.
D 10
The array must be terminated by a NULL pointer.
E 7
.PP
I 7
.I Fts_open
has a number of options, at least one of which (either FTS_LOGICAL or
FTS_PHYSICAL) must be specified.
E 10
I 10
The array must be terminated by a
.Dv NULL
pointer.
.Pp
There are
a number of options, at least one of which (either
.Dv FTS_LOGICAL
or
.Dv FTS_PHYSICAL )
must be specified.
E 10
The options are selected by
D 10
.IR or 'ing
E 10
I 10
.Em or Ns 'ing
E 10
the following values:
D 10
.TP
FTS_LOGICAL
E 10
I 10
.Bl -tag -width "FTS_PHYSICAL"
I 20
.It Dv FTS_COMFOLLOW
This option causes any symbolic link specified as a root path to be
followed immediately whether or not
.Dv FTS_LOGICAL
is also specified.
E 20
.It Dv FTS_LOGICAL
E 10
This option causes the
D 10
.I fts
routines to return FTSENT structures for the targets of symbolic links
E 10
I 10
.Nm fts
routines to return
.Fa FTSENT
structures for the targets of symbolic links
E 10
instead of the symbolic links themselves.
D 10
If this option is set, the only symbolic links for which FTSENT structures
E 10
I 10
If this option is set, the only symbolic links for which
.Fa FTSENT
structures
E 10
are returned to the application are those referencing non-existent files.
D 10
Either FTS_LOGICAL or FTS_PHYSICAL
.B must
E 10
I 10
Either
.Dv FTS_LOGICAL
or
.Dv FTS_PHYSICAL
.Em must
E 10
be provided to the
D 10
.I fts_open
E 10
I 10
.Fn fts_open
E 10
function.
D 10
.TP
FTS_NOCHDIR
E 10
I 10
.It Dv FTS_NOCHDIR
E 10
As a performance optimization, the
D 10
.I fts
E 10
I 10
.Nm fts
E 10
functions change directories as they walk the file hierarchy.
This has the side-effect that an application cannot rely on being
in any particular directory during the traversal.
D 10
The FTS_NOCHDIR option turns off this optimization, and the
.I fts
E 10
I 10
The
.Dv FTS_NOCHDIR
option turns off this optimization, and the
.Nm fts
E 10
functions will not change the current directory.
Note that applications should not themselves change their current directory
D 10
and try to access files unless FTS_NOCHDIR is specified and absolute
E 10
I 10
and try to access files unless
.Dv FTS_NOCHDIR
is specified and absolute
E 10
pathnames were provided as arguments to
D 10
.IR fts_open .
.TP
FTS_NOSTAT
By default, returned FTSENT structures contain file characteristic
E 10
I 10
.Fn fts_open .
.It Dv FTS_NOSTAT
By default, returned
.Fa FTSENT
D 18
structures contain file characteristic
E 10
information (the
D 10
.I statb
E 10
I 10
.Fa statb
E 18
I 18
structures reference file characteristic information (the
.Fa statp
E 18
E 10
field) for each file visited.
This option relaxes that requirement as a performance optimization,
allowing the
D 10
.I fts
E 10
I 10
.Nm fts
E 10
functions to set the
D 10
.I fts_info
D 9
field to FTS_NS and leave the contents of the
E 9
I 9
field to FTS_NSOK and leave the contents of the
E 9
.I statb
E 10
I 10
.Fa fts_info
field to
.Dv FTS_NSOK
and leave the contents of the
D 18
.Fa statb
E 18
I 18
.Fa statp
E 18
E 10
field undefined.
D 10
.TP
FTS_PHYSICAL
E 10
I 10
.It Dv FTS_PHYSICAL
E 10
This option causes the
D 10
.I fts
routines to return FTSENT structures for symbolic links themselves instead
E 10
I 10
.Nm fts
routines to return
.Fa FTSENT
structures for symbolic links themselves instead
E 10
of the target files they point to.
D 10
If this option is set, FTSENT structures for all symbolic links in the
E 10
I 10
If this option is set,
.Fa FTSENT
structures for all symbolic links in the
E 10
hierarchy are returned to the application.
D 10
Either FTS_LOGICAL or FTS_PHYSICAL
.B must
E 10
I 10
Either
.Dv FTS_LOGICAL
or
.Dv FTS_PHYSICAL
.Em must
E 10
be provided to the
D 10
.I fts_open
E 10
I 10
.Fn fts_open
E 10
function.
D 10
.TP
FTS_SEEDOT
E 10
I 10
.It Dv FTS_SEEDOT
E 10
By default, unless they are specified as path arguments to
D 10
.IR fts_open ,
any files named ``.'' and ``..'' encountered in the file hierarchy are
E 10
I 10
.Fn fts_open ,
any files named
.Ql \&.
D 14
and
E 14
I 14
or
E 14
.Ql ..
D 17
encountered in the file hierarchy are
E 10
ignored.
E 17
I 17
encountered in the file hierarchy are ignored.
E 17
This option causes the
D 10
.I fts
routines to return FTSENT structures for them.
.TP
FTS_XDEV
E 10
I 10
.Nm fts
routines to return
.Fa FTSENT
structures for them.
.It Dv FTS_XDEV
E 10
This option prevents
D 10
.I fts
E 10
I 10
.Nm fts
E 10
from descending into directories that have a different device number
than the file from which the descent began.
D 10
.PP
E 10
I 10
.El
.Pp
E 10
The argument
D 10
.I compar
E 10
I 10
.Fn compar
E 10
specifies a user-defined function which may be used to order the traversal
of the hierarchy.
D 10
.I Compar
takes two pointers to pointers to FTSENT structures as arguments and
E 10
I 10
It
takes two pointers to pointers to
.Fa FTSENT
structures as arguments and
E 10
should return a negative value, zero, or a positive value to indicate
if the file referenced by its first argument comes before, in any order
with respect to, or after, the file referenced by its second argument.
E 7
The
D 3
.IR accpath
E 3
I 3
D 7
.I fts_accpath
E 3
and
E 7
I 7
D 10
.IR fts_accpath ,
E 7
D 3
.I path
E 3
I 3
.I fts_path
E 10
I 10
.Fa fts_accpath ,
.Fa fts_path
E 10
E 3
D 7
fields are guaranteed to be NULL-terminated
.B only
for the file most recently returned by
.IR ftsread .
The
D 3
.I name
E 3
I 3
.I fts_name
E 3
field is always NULL-terminated.
To use these fields to reference any other active files may require
that they be modified using the information contained in the
E 7
I 7
and
E 7
D 3
.I pathlen
E 3
I 3
D 10
.I fts_pathlen
E 3
D 7
field.
Any such modifications should be undone before further calls to
.I ftsread
are attempted.
E 7
I 7
fields of the FTSENT structures may
.B never
E 10
I 10
.Fa fts_pathlen
fields of the
.Fa FTSENT
structures may
.Em never
E 10
be used in this comparison.
D 9
If the option FTS_NOSTAT was specified, or the
E 9
I 9
If the 
E 9
D 10
.I fts_info
D 9
field was set to FTS_NS, the
E 9
I 9
field is set to FTS_NS or FTS_NSOK, the
E 9
.I fts_stab
E 10
I 10
.Fa fts_info
field is set to
.Dv FTS_NS
or
D 20
.DV FTS_NSOK ,
E 20
I 20
.Dv FTS_NSOK ,
E 20
the
D 18
.Fa fts_stab
E 18
I 18
.Fa fts_statp
E 18
E 10
field may not either.
If the
D 10
.I compar
argument is NULL, the directory traversal order is unspecified except
E 10
I 10
.Fn compar
argument is
.Dv NULL ,
D 20
the directory traversal order is unspecified except
E 10
for the root paths which are traversed in the order listed in
D 10
.IR path_argv .
.SH FTS_READ
E 10
I 10
.Fa path_argv .
E 20
I 20
the directory traversal order is in the order listed in
.Fa path_argv
for the root paths, and in the order listed in the directory for
everything else.
E 20
.Sh FTS_READ
E 10
The
D 10
.I fts_read
function returns a pointer to an FTSENT structure describing a file in
E 10
I 10
.Fn fts_read
function returns a pointer to an
.Fa FTSENT
structure describing a file in
E 10
the hierarchy.
D 9
Directories (that are readable, searchable and do not cause cycles) are
visited at least twice, once in pre-order and once in post-order.
E 9
I 9
Directories (that are readable and do not cause cycles) are visited at
least twice, once in pre-order and once in post-order.
E 9
All other files are visited at least once.
(Hard links between directories that do not cause cycles or symbolic
links to symbolic links may cause files to be visited more than once,
or directories more than twice.)
E 7
D 10
.PP
E 10
I 10
.Pp
E 10
If all the members of the hierarchy have been returned,
D 7
.I ftsread
E 7
I 7
D 10
.I fts_read
E 7
returns NULL and sets the external variable
.I errno
E 10
I 10
.Fn fts_read
returns
.Dv NULL
and sets the external variable
.Va errno
E 10
to 0.
If an error unrelated to a file in the hierarchy occurs,
D 7
.I ftsread
returns NULL and sets errno appropriately.
Otherwise, a pointer to an FTSENT structure is returned, and an
error may or may not have occurred; see FTS_ERR above.
E 7
I 7
D 10
.I fts_read
returns NULL and sets
.I errno
E 10
I 10
.Fn fts_read
returns
.Dv NULL
and sets
.Va errno
E 10
appropriately.
D 9
If an error related to the returned file occurs, a pointer to an FTSENT
E 9
I 9
D 10
If an error related to a returned file occurs, a pointer to an FTSENT
E 10
I 10
If an error related to a returned file occurs, a pointer to an
.Fa FTSENT
E 10
E 9
structure is returned, and
D 10
.I errno
E 10
I 10
.Va errno
E 10
may or may not have been set (see
D 10
.IR fts_info ).
E 7
.PP
D 7
When the most recently returned file from 
.I ftsread
is a directory being visited in pre-order, 
.I ftschildren
returns a pointer to the first entry in a linked list (sorted by
the comparison routine, if provided) of the directory entries
it contains.
The linked list is linked through the
E 7
I 7
The FTSENT structures returned by
.I fts_read
E 10
I 10
.Fa fts_info ) .
.Pp
The
.Fa FTSENT
structures returned by
.Fn fts_read
E 10
may be overwritten after a call to
D 10
.I fts_close
E 10
I 10
.Fn fts_close
E 10
on the same file hierarchy stream, or, after a call to
D 10
.I fts_read
E 10
I 10
.Fn fts_read
E 10
on the same file hierarchy stream unless they represent a file of type
directory, in which case they will not be overwritten until after a call to
D 10
.I fts_read
after the FTSENT structure has been returned by the function
.I fts_read
E 10
I 10
.Fn fts_read
after the
.Fa FTSENT
structure has been returned by the function
.Fn fts_read
E 10
in post-order.
D 10
.SH FTS_CHILDREN
E 10
I 10
.Sh FTS_CHILDREN
E 10
The
D 10
.I fts_children
function returns a pointer to an FTSENT structure describing the first
E 10
I 10
.Fn fts_children
function returns a pointer to an
.Fa FTSENT
D 16
structure describing the first
E 10
D 15
entry in a linked list of the files in the directory represented by the
E 15
I 15
entry in a NULL-terminated linked list of the files in the directory
represented by the
E 16
I 16
structure describing the first entry in a NULL-terminated linked list of
the files in the directory represented by the
E 16
E 15
D 10
FTSENT structure most recently returned by
.IR fts_read .
E 10
I 10
.Fa FTSENT
structure most recently returned by
.Fn fts_read .
E 10
The list is linked through the
E 7
D 3
.I link
E 3
I 3
D 10
.I fts_link
E 3
D 7
field of the FTSENT structure.
Each call to
.I ftschildren
recreates the list.
Note, cycles are not detected until a directory is actually visited,
therefore
.I ftschildren
will never return a structure with an
D 3
.I info
E 3
I 3
.I fts_info
E 3
field set to FTS_DC.
If the current file is not a directory being visited in pre-order,
or if an error occurs, or the file does not contain any entries
.I ftschildren
returns NULL.
E 7
I 7
field of the FTSENT structure, and is ordered by the user-specified
E 10
I 10
.Fa fts_link
field of the
.Fa FTSENT
D 16
structure, and is ordered by the user-specified
E 10
comparison function, if any.
E 16
I 16
structure, and is ordered by the user-specified comparison function, if any.
E 16
Repeated calls to
D 10
.I fts_children
E 10
I 10
.Fn fts_children
E 10
will recreate this linked list.
D 10
.PP
D 9
If the directory returned by
.I fts_read
is readable but not searchable (see FTS_DNR and FTS_DNX) the contents
of the directory may be retrieved using the
.I fts_children
function.
Pathnames to the files may be built as well, as there is guaranteed
to be sufficient space in the path buffer to construct them as follows:
.sp
.nf
.RS
char *p;
for (p = ftsent->fts_path; *p; ++p);
*p++ = '/';
bcopy(ftsent->fts_name, p, ftsent->fts_namelen + 1);
.RE
.fi
.PP
E 9
If the FTSENT structure most recently returned by
.I fts_read
E 10
I 10
.Pp
D 16
If the
E 16
I 16
As a special case, if
.Fn fts_read
has not yet been called for a hierarchy,
.Fn fts_children
will return a pointer to the files in the logical directory specified to
.Fn fts_open ,
i.e. the arguments specified to
.Fn fts_open .
Otherwise, if the
E 16
.Fa FTSENT
structure most recently returned by
.Fn fts_read
E 10
is not a directory being visited in pre-order,
or the directory does not contain any files,
D 10
.I fts_children
returns NULL and sets
.I errno
E 10
I 10
.Fn fts_children
returns
.Dv NULL
and sets
.Va errno
E 10
to zero.
E 7
If an error occurs,
D 7
.I ftschildren
sets errno appropriately, otherwise it sets errno to zero.
E 7
I 7
D 10
.I fts_children
returns NULL and sets
.I errno
E 10
I 10
.Fn fts_children
returns
.Dv NULL
and sets
.Va errno
E 10
appropriately.
E 7
D 10
.PP
D 7
The pointers returned by
.I ftsread
and
.I ftschildren
point to structures which may be overwritten.
Structures returned by
.I ftschildren
and
.I ftsread
E 7
I 7
The FTSENT structures returned by
.I fts_children
E 10
I 10
.Pp
The
.Fa FTSENT
structures returned by
.Fn fts_children
E 10
E 7
may be overwritten after a call to
I 15
.Fn fts_children ,
E 15
D 7
.I ftsclose
on the same file hierarchy.
Otherwise, structures returned by
.I ftschildren
will not be overwritten until a subsequent call to either
.I ftschildren
E 7
I 7
D 10
.I fts_close
E 10
I 10
.Fn fts_close
E 10
D 15
on the same file hierarchy stream, or after a call to
D 10
.I fts_children
E 10
I 10
.Fn fts_children
E 15
E 10
E 7
or
D 7
.I ftsread
on the same file hierarchy.
Structures returned by
.I ftsread
will not not be overwritten until a subsequent call to
.I ftsread
on the same file hierarchy stream, unless it represents a file of type
directory, in which case it will not be overwritten until after a
subsequent call to
.I ftsread
after it has been returned by the function
.I ftsread
in post-order.
E 7
I 7
D 10
.I fts_read
E 10
I 10
.Fn fts_read
E 10
on the same file hierarchy stream.
I 21
.Pp
.Em Option
may be set to the following value:
.Bl -tag -width FTS_NAMEONLY
.It Dv FTS_NAMEONLY
Only the names of the files are needed.
The contents of all the fields in the returned linked list of structures
are undefined with the exception of the
.Fa fts_name
and
.Fa fts_namelen
fields.
.El
E 21
E 7
D 10
.PP
E 10
I 10
D 16
.Pp
E 10
D 7
The routine
.I ftsset
E 7
I 7
A single buffer is used for all of the paths of all of the files in the
file hierarchy.
Therefore, the
D 10
.I fts_path
E 10
I 10
.Fa fts_path
E 10
and
D 10
.I fts_accpath
fields are guaranteed to be NULL-terminated
.B only
E 10
I 10
.Fa fts_accpath
fields are guaranteed to be
.Dv NULL Ns -terminated
.Em only
E 10
for the file most recently returned by
D 10
.IR fts_read .
To use these fields to reference any files represented by other FTSENT
E 10
I 10
.Fn fts_read .
To use these fields to reference any files represented by other
.Fa FTSENT
E 10
structures will require that the path buffer be modified using the
D 10
information contained in that FTSENT structure's
.I fts_pathlen
E 10
I 10
information contained in that
.Fa FTSENT
structure's
.Fa fts_pathlen
E 10
field.
Any such modifications should be undone before further calls to
D 10
.I fts_read
E 10
I 10
.Fn fts_read
E 10
are attempted.
The
D 10
.I fts_name
field is always NULL-terminated.
.SH FTS_SET
E 10
I 10
.Fa fts_name
field is always
.Dv NULL Ns -terminated.
E 16
.Sh FTS_SET
E 10
The function
D 10
.I fts_set
E 10
I 10
.Fn fts_set
E 10
E 7
allows the user application to determine further processing for the
file
D 10
.I f
E 10
I 10
.Fa f
E 10
of the stream
D 10
.IR ftsp .
D 7
.I Ftsset
E 7
I 7
.I Fts_set
E 7
returns 0 on success, and -1 if an error occurs.
.I Option
E 10
I 10
.Fa ftsp .
The
.Fn fts_set
function
returns 0 on success, and \-1 if an error occurs.
.Em Option
E 10
D 7
may be set to any one of the following values.
E 7
I 7
must be set to one of the following values:
E 7
D 10
.TP
FTS_AGAIN
E 10
I 10
.Bl -tag -width FTS_PHYSICAL
.It Dv FTS_AGAIN
E 10
Re-visit the file; any file type may be re-visited.
The next call to
D 7
.I ftsread
E 7
I 7
D 10
.I fts_read
E 10
I 10
.Fn fts_read
E 10
E 7
will return the referenced file.
D 7
The 
E 7
I 7
The
E 7
D 3
.I stat
E 3
I 3
D 10
.I fts_stat
E 10
I 10
.Fa fts_stat
E 10
E 3
and
D 3
.I info
E 3
I 3
D 10
.I fts_info
E 10
I 10
.Fa fts_info
E 10
E 3
fields of the structure will be reinitialized at that time,
D 7
but no other fields will have been modified.
E 7
I 7
but no other fields will have been changed.
E 7
This option is meaningful only for the most recently returned
file from
D 7
.IR ftsread .
E 7
I 7
D 10
.IR fts_read .
E 10
I 10
.Fn fts_read .
E 10
E 7
Normal use is for post-order directory visits, where it causes the
directory to be re-visited (in both pre and post-order) as well as all
of its descendants.
D 10
.TP
FTS_FOLLOW
E 10
I 10
.It Dv FTS_FOLLOW
E 10
The referenced file must be a symbolic link.
If the referenced file is the one most recently returned by
D 7
.IR ftsread ,
E 7
I 7
D 10
.IR fts_read ,
E 10
I 10
.Fn fts_read ,
E 10
E 7
the next call to
D 7
.I ftsread
E 7
I 7
D 10
.I fts_read
E 10
I 10
.Fn fts_read
E 10
E 7
returns the file with the
D 3
.I info
E 3
I 3
D 10
.I fts_info
E 10
I 10
.Fa fts_info
E 10
E 3
and
D 3
.I statb
E 3
I 3
D 10
.I fts_statb
E 10
I 10
D 18
.Fa fts_statb
E 18
I 18
.Fa fts_statp
E 18
E 10
E 3
fields reinitialized to reflect the target of the symbolic link instead
of the symbolic link itself.
If the file is one of those most recently returned by
D 7
.IR ftschildren ,
E 7
I 7
D 10
.IR fts_children ,
E 10
I 10
.Fn fts_children ,
E 10
E 7
the
D 3
.I info
E 3
I 3
D 10
.I fts_info
E 10
I 10
.Fa fts_info
E 10
E 3
and
D 3
.I statb
E 3
I 3
D 10
.I fts_statb
E 10
I 10
D 18
.Fa fts_statb
E 18
I 18
.Fa fts_statp
E 18
E 10
E 3
fields of the structure, when returned by
D 7
.IR ftsread ,
E 7
I 7
D 10
.IR fts_read ,
E 10
I 10
.Fn fts_read ,
E 10
E 7
will reflect the target of the symbolic link instead of the symbolic link
itself.
D 9
In either case, if the target of the link is a directory, the pre-order
return, followed by the return of all of its descendants, followed by a
post-order return, is done.
E 9
I 9
In either case, if the target of the symbolic link does not exist the
fields of the returned structure will be unchanged and the
D 10
.I fts_info
field will be set to FTS_SLNONE.
E 10
I 10
.Fa fts_info
field will be set to
.Dv FTS_SLNONE .
.Pp
E 10
If the target of the link is a directory, the pre-order return, followed
by the return of all of its descendants, followed by a post-order return,
is done.
E 9
D 10
.TP
FTS_SKIP
E 10
I 10
.It Dv FTS_SKIP
E 10
No descendants of this file are visited.
D 7
.PP
Hard links between directories that do not cause cycles or symbolic
links to symbolic links may cause files to be visited more than once,
or directories more than twice.
E 7
I 7
The file may be one of those most recently returned by either
D 10
.I fts_children
E 10
I 10
.Fn fts_children
E 10
or
D 10
.IR fts_read .
.SH FTS_CLOSE
E 10
I 10
.Fn fts_read .
.El
.Sh FTS_CLOSE
E 10
The
D 10
.I fts_close
E 10
I 10
.Fn fts_close
E 10
function closes a file hierarchy stream
D 10
.I ftsp
E 10
I 10
.Fa ftsp
E 10
and restores the current directory to the directory from which
D 10
.I fts_open
E 10
I 10
.Fn fts_open
E 10
was called to open
D 10
.IR ftsp .
.I Fts_close
returns 0 on success, and -1 if an error occurs.
E 7
.SH ERRORS
D 7
.I Ftsopen
E 7
I 7
.I Fts_open
E 10
I 10
.Fa ftsp .
The
.Fn fts_close
function
returns 0 on success, and \-1 if an error occurs.
.Sh ERRORS
The function
.Fn fts_open
E 10
E 7
D 21
may fail and set errno for any of the errors specified for the library
D 7
routine
E 7
I 7
D 8
function
E 8
I 8
functions
E 21
I 21
may fail and set
.Va errno
for any of the errors specified for the library functions
E 21
D 10
.IR open (2)
E 10
I 10
.Xr open 2
E 10
and
E 8
E 7
D 10
.IR malloc (3).
.PP
D 7
.I Ftsclose
E 7
I 7
.I Fts_close
E 10
I 10
.Xr malloc 3 .
.Pp
The function
.Fn fts_close
E 10
E 7
D 21
may fail and set errno for any of the errors specified for the library
D 7
routine
E 7
I 7
D 8
function
E 7
.IR chdir (2).
E 8
I 8
functions
E 21
I 21
may fail and set
.Va errno
for any of the errors specified for the library functions
E 21
D 10
.IR chdir (2)
E 10
I 10
.Xr chdir 2
E 10
and
D 10
.IR close (2).
E 8
.PP
D 7
.I Ftsread
E 7
I 7
.I Fts_read
E 10
I 10
.Xr close 2 .
.Pp
The functions
D 13
.Fn Fts_read
E 13
I 13
.Fn fts_read
E 13
E 10
E 7
and
D 7
.I ftschildren
E 7
I 7
D 10
.I fts_children
E 10
I 10
.Fn fts_children
E 10
E 7
D 21
may fail and set errno for any of the errors specified for the library
D 7
routines
E 7
I 7
functions
E 21
I 21
may fail and set
.Va errno
for any of the errors specified for the library functions
E 21
E 7
D 10
.IR chdir (2),
D 8
.IR getgroups (2),
E 8
.IR malloc (3),
.IR opendir (3),
.IR readdir (3)
E 10
I 10
.Xr chdir 2 ,
.Xr malloc 3 ,
.Xr opendir 3 ,
.Xr readdir 3
E 10
and
D 10
.IR stat (2).
.SH SEE ALSO
find(1), chdir(2), stat(2), qsort(3)
.SH STANDARDS
E 10
I 10
.Xr stat 2 .
I 21
.Pp
In addition,
.Fn fts_children ,
.Fn fts_open
and
.Fn fts_set
may fail and set
.Va errno
as follows:
.Bl -tag -width Er
.It Bq Er EINVAL
The options were invalid.
D 27
.EL
E 27
I 27
.El
E 27
E 21
.Sh SEE ALSO
.Xr find 1 ,
.Xr chdir 2 ,
.Xr stat 2 ,
.Xr qsort 3
.Sh STANDARDS
E 10
The
D 10
.I fts
D 3
utility is expected to be POSIX 1003.1 compliant.
E 3
I 3
D 9
utility is expected to be a superset of the POSIX 1003.1 specification.
E 9
I 9
utility is expected to be a superset of the IEEE Std 1003.1 (``POSIX'')
E 10
I 10
.Nm fts
D 24
utility is expected to be a superset of the
E 24
I 24
D 25
utility is expected to included in a future
E 25
I 25
utility is expected to be included in a future
E 25
E 24
.St -p1003.1-88
E 10
D 24
specification.
E 24
I 24
revision.
E 24
E 9
E 3
E 1
