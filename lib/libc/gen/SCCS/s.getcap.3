h11372
s 00001/00001/00484
d D 8.4 94/05/13 16:18:45 mckusick 8 7
c typo
e
s 00001/00001/00484
d D 8.3 94/04/19 07:07:19 bostic 7 6
c spell
e
s 00002/00002/00483
d D 8.2 93/12/11 22:37:38 mckusick 6 5
c copyediting for Usenix manuals
e
s 00002/00002/00483
d D 8.1 93/06/04 12:02:09 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00016/00003/00469
d D 5.4 92/08/11 14:40:59 elan 4 3
c Added comments about new return values for unexpanded tc's.
e
s 00021/00005/00451
d D 5.3 92/08/07 17:21:55 elan 3 2
c Added to cgetset() documentation.
e
s 00092/00067/00364
d D 5.2 92/08/06 21:10:55 cael 2 1
c fixed some tables
e
s 00431/00000/00000
d D 5.1 92/08/06 18:21:31 bostic 1 0
c date and time created 92/08/06 18:21:31 by bostic
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1992 The Regents of the University of California.
.\" All rights reserved.
E 5
I 5
.\" Copyright (c) 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 5
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Casey Leedom of Lawrence Livermore National Laboratory.
.\"
.\" %sccs.include.redist.roff%
.\"
.\"	%W% (Berkeley) %G%
.\"
.Dd "%Q%"
.Dt GETCAP 3 
.Os
.Sh NAME
.Nm cgetent ,
.Nm cgetset ,
.Nm cgetmatch ,
.Nm cgetcap ,
.Nm cgetnum ,
.Nm cgetstr ,
.Nm cgetustr ,
.Nm cgetfirst ,
.Nm cgetnext ,
.Nm cgetclose
.Nd capability database access routines
.Sh SYNOPSIS
.Fd #include <stdlib.h>
.Ft int
.Fn cgetent "char **buf" "char **db_array" "char *name"
.Ft int
.Fn cgetset "char *ent"
.Ft int
.Fn cgetmatch "char *buf" "char *name"
.Ft char *
.Fn cgetcap "char *buf" "char *cap" "char type"
.Ft int
.Fn cgetnum "char *buf" "char *cap" "long *num"
.Ft int
.Fn cgetstr "char *buf" "char *cap" "char **str"
.Ft int
.Fn cgetustr "char *buf" "char *cap" "char **str"
.Ft int
.Fn cgetfirst "char **buf" "char **db_array"
.Ft int
.Fn cgetnext "char **buf" "char **db_array"
.Ft int
.Fn cgetclose "void"
.Sh DESCRIPTION
.Fn Cgetent
D 8
extracts the capability rec
E 8
I 8
extracts the capability
E 8
.Fa name
D 2
from the database specified by the NULL terminated file array
E 2
I 2
from the database specified by the
.Dv NULL
terminated file array
E 2
.Fa db_array
and returns a pointer to a
D 2
.Nm malloc 
\'d
E 2
I 2
.Xr malloc Ns \&'d
E 2
copy of it in
D 4
.Fa buf .
E 4
I 4
.Fa buf .  
.Nm Cgetent
will first look for files ending in 
.Nm .db 
(see
.Xr cap_mkdb 1) 
before accessing the ASCII file.
E 4
.Fa Buf
must be retained through all subsequent calls to
.Fn cgetmatch ,
.Fn cgetcap ,
.Fn cgetnum ,
.Fn cgetstr ,
and
.Fn cgetustr ,
but may then be
D 2
.Nm free 
\'d.
E 2
I 2
.Xr free Ns \&'d.
E 2
D 4
On success 0 is returned, \-1 if the requested record couldn't be found,
E 4
I 4
On success 0 is returned, 1 if the returned
record contains an unresolved 
.Nm tc 
expansion,
\-1 if the requested record couldn't be found,
E 4
\-2 if a system error was encountered (couldn't open/read a file, etc.) also
setting
.Va errno , 
and \-3 if a potential reference loop is detected (see
D 2
.Nm tc=
E 2
I 2
.Ic tc=
E 2
comments below).
.Pp
.Nm Cgetset 
enables the addition of a character buffer containing a single capability
record entry
to the capability database.  
Conceptually, the entry is added as the first ``file'' in the database, and
is therefore searched first on the call to 
.Nm cgetent .
The entry is passed in 
.Fa ent .
If 
.Fa ent 
D 2
is NULL, the current entry is removed from the database.
E 2
I 2
is
.Dv NULL ,
D 3
the current entry is removed from the database.
E 3
I 3
the current entry is removed from the database.  
.Nm Cgetset 
must precede the database traversal.  It must be called before the 
.Nm cgetent 
call. If a sequential access is being performed (see below), it must be called
before the first sequential access call (
.Nm cgetfirst
or
.Nm cgetnext
), or be directly preceded by a 
.Nm cgetclose
call.
E 3
E 2
On success 0 is returned and \-1 on failure.
.Pp
.Nm Cgetmatch
will return 0 if
.Fa name
is one of the names of the capability record
.Fa buf ,
\-1 if
not.
.Pp
.Nm Cgetcap
searches the capability record
.Fa buf
for the capability
.Fa cap
with type
.Fa type .
A
.Fa type
is specified using any single character.  If a colon (`:') is used, an
untyped capability will be searched for (see below for explanation of
types).  A pointer to the value of
.Fa cap
in
.Fa buf
D 2
is returned on success, NULL if the requested capability couldn't be
found.  The end of the capability value is signaled by a `:' or ASCII NUL
E 2
I 2
is returned on success,
.Dv NULL
if the requested capability couldn't be
found.  The end of the capability value is signaled by a `:' or
.Tn ASCII
.Dv NUL
E 2
(see below for capability database syntax).
.Pp
.Nm Cgetnum
retrieves the value of the numeric capability
.Fa cap
from the capability record pointed to by
.Fa buf .
The numeric value is returned in the
.Ft long
pointed to by
.Fa num .
0 is returned on success, \-1 if the requested numeric capability couldn't
be found.
.Pp
.Nm Cgetstr
retrieves the value of the string capability
.Fa cap
from the capability record pointed to by
.Fa buf .
D 2
A pointer to a decoded, NUL terminated,
.Nm malloc 
\'d
E 2
I 2
A pointer to a decoded,
.Dv NUL
terminated,
.Xr malloc Ns \&'d
E 2
copy of the string is returned in the
.Ft char *
pointed to by
.Fa str .
The number of characters in the decoded string not including the trailing
D 2
NUL is returned on success, \-1 if the requested string capability couldn't
E 2
I 2
.Dv NUL
is returned on success, \-1 if the requested string capability couldn't
E 2
be found, \-2 if a system error was encountered (storage allocation
failure).
.Pp
.Nm Cgetustr
is identical to 
.Nm cgetstr 
except that it does not expand special characters, but rather returns each
character of the capability string literally.
.Pp
.Nm Cgetfirst ,
.Nm cgetnext , 
D 3
and
.Nm cgetclose
E 3
comprise a function group that provides for sequential
D 2
access of the NULL pointer terminated array of file names,
E 2
I 2
access of the
.Dv NULL
pointer terminated array of file names,
E 2
.Fa db_array .
.Nm Cgetfirst 
returns the first record in the database and resets the access
to the first record.
.Nm Cgetnext 
returns the next record in the database with respect to the
record returned by the previous
.Nm cgetfirst
or
.Nm cgetnext 
call.  If there is no such previous call, the first record in the database is
returned.
D 3
.Nm Cgetclose 
closes the access and frees any memory and file descriptors being used.
E 3
Each record is returned in a
D 2
.Nm malloc
\'d 
E 2
I 2
.Xr malloc Ns \&'d 
E 2
copy pointed to by 
.Fa buf .  
D 2
.Nm Tc
E 2
I 2
.Ic Tc
E 2
expansion is done (see
D 2
.Nm tc= 
E 2
I 2
.Ic tc= 
E 2
comments below).
Upon completion of the database 0 is returned,  1 is returned upon successful
return of record with possibly more remaining (we haven't reached the end of 
D 4
the database yet), \-1 is returned if an system error occured, and \-2
E 4
I 4
the database yet), 2 is returned if the record contains an unresolved
.Nm tc 
D 7
expansion, \-1 is returned if an system error occured, and \-2
E 7
I 7
expansion, \-1 is returned if an system error occurred, and \-2
E 7
E 4
is returned if a potential reference loop is detected (see 
D 2
.Nm tc=
E 2
I 2
.Ic tc=
E 2
comments below).
Upon completion of database (0 return) the database is closed.
I 3
.Pp
.Nm Cgetclose 
closes the sequential access and frees any memory and file descriptors 
being used.  Note that it does not erase the buffer pushed by a call to 
.Nm cgetset .
E 3
.Sh CAPABILITY DATABASE SYNTAX
D 2
Capability databases are normally ASCII and may be edited with standard
E 2
I 2
Capability databases are normally
.Tn ASCII
and may be edited with standard
E 2
text editors.  Blank lines and lines beginning with a `#' are comments
and are ignored.  Lines ending with a `\|\e' indicate that the next line
is a continuation of the current line; the `\|\e' and following newline
are ignored.  Long lines are usually continued onto several physical
lines by ending each line except the last with a `\|\e'.
.Pp
Capability databases consist of a series of records, one per logical
line.  Each record contains a variable number of `:'-separated fields
(capabilities).  Empty fields consisting entirely of white space
characters (spaces and tabs) are ignored.
.Pp
The first capability of each record specifies its names, separated by `|'
characters.  These names are used to reference records in the database.
By convention, the last name is usually a comment and is not intended as
a lookup tag.  For example, the
D 2
.Nm vt100
E 2
I 2
.Em vt100
E 2
record from the
.Nm termcap
database begins:
.Pp
.Dl "d0\||\|vt100\||\|vt100-am\||\|vt100am\||\|dec vt100:"
.Pp
giving four names that can be used to access the record.
.Pp
The remaining non-empty capabilities describe a set of (name, value)
bindings, consisting of a names optionally followed by a typed values:
I 2
.Bl -column "nameTvalue"
.It name Ta "typeless [boolean] capability"
.Em name No "is present [true]"
.It name Ns Em \&T Ns value Ta capability
.Pq Em name , \&T
has value
.Em value
.It name@ Ta "no capability" Em name No exists
.It name Ns Em T Ns \&@ Ta capability
.Pq Em name , T
does not exist
.El
E 2
.Pp
D 2
.Bd -unfilled -offset indent
.ta +\w'nameTvalue    'u
name	typeless [boolean] capability \fIname\fP is present [true]
name\fIT\fPvalue	capability (\fIname\fP, \fIT\fP) has value \fIvalue\fP
name@	no capability \fIname\fP exists
name\fIT\fP@	capability (\fIname\fP, \fIT\fP) does not exist
.Ed
.Pp
E 2
Names consist of one or more characters.  Names may contain any character
except `:', but it's usually best to restrict them to the printable
characters and avoid use of graphics like `#', `=', `%', `@', etc.  Types
are single characters used to separate capability names from their
associated typed values.  Types may be any character except a `:'.
Typically, graphics like `#', `=', `%', etc. are used.  Values may be any
number of characters and may contain any character except `:'.
.Sh CAPABILITY DATABASE SEMANTICS
Capability records describe a set of (name, value) bindings.  Names may
have multiple values bound to them.  Different values for a name are
distinguished by their
.Fa types .
.Nm Cgetcap
will return a pointer to a value of a name given the capability name and
the type of the value.
.Pp
The types `#' and `=' are conventionally used to denote numeric and
string typed values, but no restriction on those types is enforced.  The
functions
.Nm cgetnum
and
.Nm cgetstr
can be used to implement the traditional syntax and semantics of `#'
and `='.
Typeless capabilities are typically used to denote boolean objects with
presence or absence indicating truth and false values respectively.
This interpretation is conveniently represented by:
.Pp
.Dl "(getcap(buf, name, ':') != NULL)"
.Pp
A special capability,
D 2
.RI tc= name ,
E 2
I 2
.Ic tc= name ,
E 2
is used to indicate that the record specified by
.Fa name
should be substituted for the
D 2
.Nm tc
E 2
I 2
.Ic tc
E 2
capability.
D 2
.Nm Tc
E 2
I 2
.Ic Tc
E 2
capabilities may interpolate records which also contain
D 2
.Nm tc
E 2
I 2
.Ic tc
E 2
capabilities and more than one
D 2
.Nm tc
E 2
I 2
.Ic tc
E 2
capability may be used in a record.  A
D 2
.Nm tc
E 2
I 2
.Ic tc
E 2
expansion scope (i.e., where the argument is searched for) contains the
file in which the
D 2
.Nm tc
E 2
I 2
.Ic tc
E 2
is declared and all subsequent files in the file array.
.Pp
When a database is searched for a capability record, the first matching
D 6
record in the search is returned.  When an record is scanned for a
E 6
I 6
record in the search is returned.  When a record is scanned for a
E 6
capability, the first matching capability is returned; the capability
D 2
.Nm :nameT@:
E 2
I 2
.Ic :nameT@:
E 2
will hide any following definition of a value of type
D 2
.Nm T
E 2
I 2
.Em T
E 2
for
.Fa name ;
and the capability
D 2
.Nm :name@:
E 2
I 2
.Ic :name@:
E 2
will prevent any following values of
.Fa name
from being seen.
.Pp
These features combined with
D 2
.Nm tc
E 2
I 2
.Ic tc
E 2
capabilities can be used to generate variations of other databases and
records by either adding new capabilities, overriding definitions with new
definitions, or hiding following definitions via `@' capabilities.
.Sh EXAMPLES
.Bd -unfilled -offset indent
example\||\|an example of binding multiple values to names:\e
	:foo%bar:foo^blah:foo@:\e
	:abc%xyz:abc^frap:abc$@:\e
	:tc=more:
.Ed
.Pp
The capability foo has two values bound to it (bar of type `%' and blah of
type `^') and any other value bindings are hidden.  The capability abc
also has two values bound but only a value of type `$' is prevented from
being defined in the capability record more.
.Pp
.Bd -unfilled -offset indent
file1:
 	new\||\|new_record\||\|a modification of "old":\e
		:fript=bar:who-cares@:tc=old:blah:tc=extensions:
file2:
	old\||\|old_record\||\|an old database record:\e
		:fript=foo:who-cares:glork#200:
.Ed
.Pp
The records are extracted by calling
.Nm cgetent
with file1 preceding file2.
In the capability record new in file1, fript=bar overrides the definition
of fript=foo interpolated from the capability record old in file2,
who-cares@ prevents the definition of any who-cares definitions in old
from being seen, glork#200 is inherited from old, and blah and anything
defined by the record extensions is added to those definitions in old.
Note that the position of the fript=bar and who-cares@ definitions before
tc=old is important here.  If they were after, the definitions in old
would take precedence.
.Sh CGETNUM AND CGETSTR SYNTAX AND SEMANTICS
Two types are predefined by
.Nm cgetnum
and
.Nm cgetstr :
I 2
.Bl -column "nameXnumber"
.Sm off
.It Em name No \&# Em number Ta numeric
capability
.Em name
has value
.Em number
.It Em name No = Em string Ta "string capability"
.Em name
has value 
.Em string
.It Em name No \&#@ Ta "the numeric capability"
.Em name
does not exist
.It Em name No \&=@ Ta "the string capability"
.Em name
does not exist
.El
E 2
.Pp
D 2
.RS
.nf
.ta +\w'name#number    'u
\fIname\fP#\fInumber\fP	numeric capability \fIname\fP has value \fInumber\fP
\fIname\fP=\fIstring\fP	string capability \fIname\fP has value \fIstring\fP
\fIname\fP#@	the numeric capability \fIname\fP does not exist
\fIname\fP=@	the string capability \fIname\fP does not exist
.DT
.fi
.RE
.Pp
E 2
Numeric capability values may be given in one of three numeric bases.
If the number starts with either
D 2
.Nm 0x
E 2
I 2
.Ql 0x
E 2
or
D 2
.Nm 0X
E 2
I 2
.Ql 0X
E 2
it is interpreted as a hexadecimal number (both upper and lower case a-f
may be used to denote the extended hexadecimal digits).
Otherwise, if the number starts with a
D 2
.Nm 0
E 2
I 2
.Ql 0
E 2
it is interpreted as an octal number.
Otherwise the number is interpreted as a decimal number.
.Pp
D 2
String capability values may contain any character.  Non-printable ASCII
E 2
I 2
String capability values may contain any character.  Non-printable
.Dv ASCII
E 2
codes, new lines, and colons may be conveniently represented by the use
of escape sequences:
D 2
.Pp
.RS
.nf
.ta \w'\e\|X, \e\|X    'u +\w'(ASCII octal nnn)    'u
E 2
I 2
.Bl -column "\e\|X,X\e\|X" "(ASCII octal nnn)"
E 2
^X	('\fIX\fP' & 037)	control-\fIX\fP
\e\|b, \e\|B	(ASCII 010)	backspace
\e\|t, \e\|T	(ASCII 011)	tab
\e\|n, \e\|N	(ASCII 012)	line feed (newline)
\e\|f, \e\|F	(ASCII 014)	form feed
\e\|r, \e\|R	(ASCII 015)	carriage return
\e\|e, \e\|E	(ASCII 027)	escape
\e\|c, \e\|C	(:)	colon
\e\|\e	(\e\|)	back slash
\e\|^	(^)	caret
\e\|\fInnn\fP	(ASCII octal \fInnn\fP)
D 2
.DT
.fi
.RE
E 2
I 2
.El
E 2
.Pp
A `\|\e' may be followed by up to three octal digits directly specifies
D 2
the numeric code for a character.  The use of ASCII NULs, while easily
E 2
I 2
the numeric code for a character.  The use of
.Tn ASCII
.Dv NUL Ns s ,
while easily
E 2
encoded, causes all sorts of problems and must be used with care since
D 2
NULs are typically used to denote the end of strings; many applications
use `\e\|200' to represent a NUL.
E 2
I 2
.Dv NUL Ns s
are typically used to denote the end of strings; many applications
use `\e\|200' to represent a
.Dv NUL .
E 2
.Sh DIAGNOSTICS
.Nm Cgetent ,
.Nm cgetset ,
.Nm cgetmatch ,
.Nm cgetnum ,
.Nm cgetstr ,
.Nm cgetustr ,
.Nm cgetfirst ,
and
.Nm cgetnext
D 6
return a a value greater than or equal to 0 on success and a value less
E 6
I 6
return a value greater than or equal to 0 on success and a value less
E 6
than 0 on failure.
.Nm Cgetcap
D 2
returns a character pointer on success and a NULL on failure.
E 2
I 2
returns a character pointer on success and a
.Dv NULL
on failure.
E 2
.Pp
.Nm Cgetent ,
and 
.Nm cgetseq
may fail and set 
.Va errno
for any of the errors specified for the library functions:
.Xr fopen 2 , 
.Xr fclose 2 ,
.Xr open 2 ,
and 
.Xr close 2 .
.Pp
.Nm Cgetent ,
.Nm cgetset ,
.Nm cgetstr ,
and
.Nm cgetustr 
may fail and set 
.Va errno 
as follows:
.Bl -tag -width Er
.It Bq Er ENOMEM
No memory to allocate.
.El
.Sh SEE ALSO
I 4
.Xr cap_mkdb 1 ,
E 4
.Xr malloc 3
.Sh BUGS
Colons (`:') can't be used in names, types, or values.
.Pp
There are no checks for
D 2
.Nm tc= name
E 2
I 2
.Ic tc= name
E 2
loops in
.Nm cgetent .
I 3
.Pp
The buffer added to the database by a call to 
.Nm cgetset 
is not unique to the database but is rather prepended to any database used.
E 3
E 1
