h53624
s 00001/00001/00127
d D 8.2 93/12/11 22:37:39 mckusick 7 6
c copyediting for Usenix manuals
e
s 00002/00002/00126
d D 8.1 93/06/04 12:02:16 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00089/00063/00039
d D 6.4 91/04/19 14:49:27 cael 5 4
c macro and text revision (-mdoc version 3)
e
s 00091/00018/00011
d D 6.3 91/02/20 08:26:10 bostic 4 3
c rename getwd to getcwd for POSIX.1 compatibility
c add System V, X/Open style path malloc'ing if user argument is NULL.
e
s 00000/00003/00029
d D 6.2 86/05/12 19:15:49 karels 3 2
c no more we don't
e
s 00004/00002/00028
d D 6.1 85/05/15 16:21:39 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00030/00000/00000
d D 5.1 85/05/15 16:21:33 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 6
.\" Copyright (c) 1991 The Regents of the University of California.
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
E 4
.\"
I 4
.\" %sccs.include.redist.man%
.\"
E 4
D 5
.\"	%W% (Berkeley) %G%
E 5
I 5
.\"     %W% (Berkeley) %G%
E 5
.\"
D 2
.TH GETWD 3 "25 February 1983"
E 2
I 2
D 5
.TH GETWD 3 "%Q%"
E 2
.UC 5
.SH NAME
D 4
getwd \- get current working directory pathname
E 4
I 4
getwd \- get working directory pathname
E 4
.SH SYNOPSIS
.nf
D 4
.B char *getwd(pathname)
.B char *pathname;
E 4
I 4
.ft B
char *getcwd(char *buf, size_t size);
char *getwd(char *buf);
.ft R
E 4
.fi
.SH DESCRIPTION
E 5
I 5
.Dd %Q%
.Dt GETCWD 3
.Os BSD 4.2
.Sh NAME
D 7
.Nm getwd
E 7
I 7
.Nm getcwd
E 7
.Nd get working directory pathname
.Sh SYNOPSIS
.Fd #include <stdio.h>
.Ft char *
.Fn getcwd "char *buf" "size_t size"
.Ft char *
.Fn getwd "char *buf"
.Sh DESCRIPTION
E 5
I 4
The
D 5
.I getcwd
E 5
I 5
.Fn getcwd
E 5
function copies the absolute pathname of the current working directory
into the memory referenced by
D 5
.I buf
E 5
I 5
.Fa buf
E 5
and returns a pointer to
D 5
.IR buf .
E 5
I 5
.Fa buf .
E 5
The
D 5
.I size
E 5
I 5
.Fa size
E 5
argument is the size, in bytes, of the array referenced by
D 5
.IR buf .
.PP
E 5
I 5
.Fa buf .
.Pp
E 5
If
D 5
.I buf
is NULL, space is allocated as necessary to store the pathname.
E 5
I 5
.Fa buf
is
.Dv NULL ,
space is allocated as necessary to store the pathname.
E 5
This space may later be
D 5
.IR free 'd.
.PP
E 5
I 5
.Xr free 3 Ns 'd.
.Pp
E 5
The function
D 5
.I getwd
E 5
I 5
.Fn getwd
E 5
is a compatibility routine which calls
D 5
.I getcwd
E 5
I 5
.Fn getcwd
E 5
with its
D 5
.I buf
argument and a size of MAXPATHLEN (as defined in the include
file <sys/param.h>).
E 5
I 5
.Fa buf
argument and a size of
.Dv MAXPATHLEN
(as defined in the include
file
.Aq Pa sys/param.h ) .
E 5
Obviously,
D 5
.I buf
should be at least MAXPATHLEN bytes in length.
.PP
E 5
I 5
.Fa buf
should be at least
.Dv MAXPATHLEN
bytes in length.
.Pp
E 5
These routines have traditionally been used by programs to save the
name of a working directory for the purpose of returning to it.
A much faster and less error-prone method of accomplishing this is to
D 5
open the current directory (``.'') and use the
.IR fchdir (2)
E 5
I 5
open the current directory
.Pq Ql \&.
and use the
.Xr fchdir 2
E 5
function to return.
D 5
.SH RETURN VALUES
E 5
I 5
.Sh RETURN VALUES
E 5
Upon successful completion, a pointer to the pathname is returned.
D 5
Otherwise a NULL pointer is returned and
.I errno
E 5
I 5
Otherwise a
.Dv NULL
pointer is returned and the global variable
.Va errno
E 5
is set to indicate the error.
In addition,
D 5
.I getwd
E 5
I 5
.Fn getwd
E 5
copies the error message associated with
D 5
.I errno
E 5
I 5
.Va errno
E 5
into the memory referenced by
D 5
.IR buf .
.SH ERRORS
.I Getcwd
E 5
I 5
.Fa buf .
.Sh ERRORS
The
.Fn getcwd
function
E 5
will fail if:
D 5
.TP 15
[EACCESS]
E 5
I 5
.Bl -tag -width [EACCESS]
.It Bq Er EACCESS
E 5
Read or search permission was denied for a component of the pathname.
D 5
.TP 15
[EINVAL]
E 5
I 5
.It Bq Er EINVAL
E 5
The
D 5
.I size
E 5
I 5
.Fa size
E 5
argument is zero.
D 5
.TP 15
[ENOENT]
E 5
I 5
.It Bq Er ENOENT
E 5
A component of the pathname no longer exists.
D 5
.TP 15
[ENOMEM]
E 5
I 5
.It Bq Er ENOMEM
E 5
Insufficient memory is available.
D 5
.TP 15
[ERANGE]
E 5
I 5
.It Bq Er ERANGE
E 5
The
D 5
.I size 
E 5
I 5
.Fa size
E 5
argument is greater than zero but smaller than the length of the pathname
plus 1.
D 5
.SH BUGS
E 4
.I Getwd
E 5
I 5
.El
.Sh SEE ALSO
.Xr chdir 2 ,
.Xr fchdir 2 ,
.Xr malloc 3 ,
.Xr strerror 3
.Sh STANDARDS
The
.Fn getcwd
function
conforms to
.St -ansiC .
The ability to specify a
.Dv NULL
pointer and have
.Fn getcwd
allocate memory as necessary is an extension.
.Sh HISTORY
The
.Fn getwd
function appeared in 
.Bx 4.0 .
.Sh BUGS
The
.Fn getwd
function
E 5
D 4
copies the absolute pathname of the current working directory to
.I pathname
and returns a pointer to the result.
.SH LIMITATIONS
D 2
Maximum pathname length is MAXPATHLEN characters (1024).
E 2
I 2
Maximum pathname length is MAXPATHLEN characters (1024),
as defined in
.I <sys/param.h>.
E 2
.SH DIAGNOSTICS
.I Getwd
returns zero and places a message in
.I pathname
if an error occurs.
E 4
I 4
does not do sufficient error checking and is not able to return very
long, but valid, paths.
It is provided for compatibility.
D 5
.SH SEE ALSO
chdir(2), fchdir(2), malloc(3), strerror(3)
.SH STANDARDS
.I Getcwd
conforms to IEEE Std 1003.1-1988 (``POSIX'').
The ability to specify a NULL pointer and have
.I getcwd
allocate memory as necessary is an extension.
E 5
E 4
D 3
.SH BUGS
.I Getwd
may fail to return to the current directory if an error occurs.
E 3
E 1
