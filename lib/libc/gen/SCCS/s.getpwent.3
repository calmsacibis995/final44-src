h57009
s 00002/00002/00179
d D 8.2 93/12/11 22:37:43 mckusick 12 11
c copyediting for Usenix manuals
e
s 00002/00002/00179
d D 8.1 93/06/04 12:03:15 bostic 11 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00137/00094/00044
d D 6.8 91/04/19 14:49:50 cael 10 9
c macro and text revision (-mdoc version 3)
e
s 00046/00083/00092
d D 6.7 91/02/12 20:42:57 bostic 9 8
c rework the password subsystem
e
s 00001/00011/00174
d D 6.6 90/06/23 17:56:08 trent 8 7
c new copyright notice
e
s 00134/00058/00051
d D 6.5 89/02/23 12:49:09 bostic 7 6
c shadow passwords, setpassent, pretty major reworking
e
s 00045/00037/00064
d D 6.4 88/09/17 12:49:51 bostic 6 5
c rework get{gr,pw,fs}ent to all be about the same;
c fix some obvious problems, document that set{gr,pw,fs}ent closes any
c open files
e
s 00024/00017/00077
d D 6.3 86/05/15 13:23:48 mckusick 5 4
c note use of ndbm
e
s 00008/00005/00086
d D 6.2 85/10/30 17:35:49 mckusick 4 3
c update return values for endpwent and setpwent
e
s 00016/00002/00075
d D 6.1 85/05/15 15:00:52 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00001/00001/00076
d D 5.1 85/05/15 15:00:45 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00077/00000/00000
d D 4.1 85/05/15 15:00:39 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 6
D 7
.\" Copyright (c) 1988 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
D 10
.\" Copyright (c) 1988 The Regents of the University of California.
E 10
I 10
D 11
.\" Copyright (c) 1988, 1991 The Regents of the University of California.
E 10
.\" All rights reserved.
E 11
I 11
.\" Copyright (c) 1988, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 11
E 7
.\"
I 7
D 8
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 8
I 8
.\" %sccs.include.redist.man%
E 8
.\"
E 7
E 6
I 1
D 10
.\"	%W% (Berkeley) %G%
E 10
I 10
.\"     %W% (Berkeley) %G%
E 10
.\"
D 2
.TH GETPWENT 3 
E 2
I 2
D 3
.TH GETPWENT 3  "19 January 1983"
E 3
I 3
D 10
.TH GETPWENT 3  "%Q%"
E 3
E 2
.AT 3
.SH NAME
D 3
getpwent, getpwuid, getpwnam, setpwent, endpwent \- get password file entry
E 3
I 3
D 7
getpwent, getpwuid, getpwnam, setpwent, endpwent, setpwfile \- get password file entry
E 7
I 7
D 9
getpwent, getpwnam, getpwuid, setpassent,
setpwfile, setpwent, endpwent \- get password file entries
E 9
I 9
getpwent, getpwnam, getpwuid, setpassent, setpwent,
endpwent \- get password file entries
E 9
E 7
E 3
.SH SYNOPSIS
.nf
I 7
D 9
.B #include <sys/types.h>
E 7
.B #include <pwd.h>
.PP
I 7
.B struct passwd *getpwent()
.PP
.B struct passwd *getpwnam(login)
.B char *login;
.PP
E 7
D 5
.B struct passwd *getpwent()
.PP
E 5
.B struct passwd *getpwuid(uid)
D 6
.B int uid;
E 6
I 6
.B uid_t uid;
E 6
.PP
D 7
.B struct passwd *getpwnam(name)
.B char *name;
E 7
I 7
.B int setpassent(stayopen)
.B int stayopen;
E 7
.PP
I 5
D 7
.B struct passwd *getpwent()
E 7
I 7
.B void setpwfile(file)
.B char *file;
E 7
.PP
E 5
D 4
.B int setpwent()
E 4
I 4
D 6
.B setpwent()
E 6
I 6
D 7
.B void setpwent()
E 7
I 7
.B int setpwent()
E 7
E 6
E 4
.PP
D 4
.B int endpwent()
E 4
I 4
D 6
.B endpwent()
E 6
I 6
.B void endpwent()
E 9
I 9
.ft B
#include <sys/types.h>
#include <pwd.h>

struct passwd *getpwent(void);
struct passwd *getpwnam(char *login);
struct passwd *getpwuid(uid_t uid);
int setpassent(int stayopen);
int setpwent(void);
void endpwent(void);
.ft R
E 9
E 6
E 4
I 3
D 7
.PP
.B setpwfile(name)
.B char *name;
E 7
E 3
.fi
.SH DESCRIPTION
D 7
.I Getpwent,
.I getpwuid
E 7
I 7
.IR Getpwent ,
.IR getpwuid ,
E 7
and
.I getpwnam
D 6
each return a pointer to an object with the
following structure
containing the broken-out
fields of a line in the password file.
E 6
I 6
D 7
each return a pointer to an object with the following structure,
containing the broken-out fields of a line in the password file,
as described in
.IR < pwd.h > .
E 6
.RS
E 7
I 7
each return a pointer to a structure containing the broken-out
fields of a line in the password file.  This structure is defined
by the include file
.IR < pwd.h > ,
and contains the following fields:
E 7
.PP
I 7
.RS
E 7
.nf
E 10
I 10
.Dd %Q%
.Dt GETPWENT 3
.Os
.Sh NAME
.Nm getpwent ,
.Nm getpwnam ,
.Nm getpwuid ,
.Nm setpassent ,
.Nm setpwent ,
.Nm endpwent
.Nd password database operations
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <pwd.h>
.Ft struct passwd *
.Fn getpwent void
.Ft struct passwd *
.Fn getpwnam "const char *login"
.Ft struct passwd *
.Fn getpwuid "uid_t uid" 
.Ft int
.Fn setpassent "int  stayopen"
.Ft int
.Fn setpwent void
.Ft void
.Fn endpwent void
.Sh DESCRIPTION
These functions
operate on the password database file
which is described
in
.Xr passwd 5 .
Each entry in the database is defined by the structure
.Ar passwd
found in the include
file
.Aq Pa pwd.h :
.Bd -literal -offset indent
E 10
D 6
.so /usr/include/pwd.h
E 6
I 6
struct passwd {
D 7
	char	*pw_name;
	char	*pw_passwd;
	uid_t	pw_uid;
	gid_t	pw_gid;
	int	pw_quota;
	char	*pw_comment;
	char	*pw_gecos;
	char	*pw_dir;
	char	*pw_shell;
E 7
I 7
D 10
	char	*pw_name;			/* user name */
	char	*pw_passwd;		/* encrypted password */
E 10
I 10
	char	*pw_name;	/* user name */
	char	*pw_passwd;	/* encrypted password */
E 10
	uid_t	pw_uid;		/* user uid */
	gid_t	pw_gid;		/* user gid */
	time_t	pw_change;	/* password change time */
D 10
	char	*pw_class;		/* user access class */
	char	*pw_gecos;		/* Honeywell login info */
	char	*pw_dir;			/* home directory */
	char	*pw_shell;		/* default shell */
E 10
I 10
	char	*pw_class;	/* user access class */
	char	*pw_gecos;	/* Honeywell login info */
	char	*pw_dir;	/* home directory */
	char	*pw_shell;	/* default shell */
E 10
	time_t	pw_expire;	/* account expiration */
E 7
};
E 6
D 7
.ft R
.ad
E 7
D 10
.fi
.RE
.PP
D 7
The fields
.I pw_quota
and
.I pw_comment
are unused; the others have meanings described in
E 7
I 7
These fields are more completely described in
E 7
.IR passwd (5).
.PP
I 7
.I Getpwnam
E 10
I 10
.Ed
.Pp
The functions
.Fn getpwnam
E 10
and
D 10
.I getpwuid
search the password database for a matching user name or user uid,
E 10
I 10
.Fn getpwuid
search the password database for the given login name or user uid,
E 10
D 9
respectively, returning the first one encountered.  Identical
user names or user uids may result in undefined behavior.
E 9
I 9
respectively, always returning the first one encountered.
E 9
D 10
.PP
.I Getpwent
E 10
I 10
.Pp
The
.Fn getpwent
function
E 10
sequentially reads the password database and is intended for programs
D 9
that wish to step through the complete list of users.
E 9
I 9
that wish to process the complete list of users.
E 9
D 10
.PP
D 9
All three routines will open the password file for reading, if
necessary.
.PP
E 7
D 5
.I Getpwent
reads the next
line (opening the file if necessary);
.I setpwent
rewinds the file;
E 5
I 5
D 6
Searching of the password file is done using the \fIndbm\fP
database access routines.
E 6
I 6
.I Setpwfile
changes the default password file to
D 7
.IR name ,
thus allowing usage of alternate password files.  If \fIndbm\fP databases
are available for any password files, they are used, otherwise the file
itself is linearly searched.
E 7
I 7
.IR file ,
thus allowing the use of alternate password files.
E 7
.PP
E 9
I 7
.I Setpassent
E 10
I 10
.Pp
The
.Fn setpassent
function
E 10
D 9
opens the file or rewinds it if it is already open.  If
E 9
I 9
accomplishes two purposes.
First, it causes
D 10
.I getpwent
E 10
I 10
.Fn getpwent
E 10
to ``rewind'' to the beginning of the database.
Additionally, if
E 9
D 10
.I stayopen
E 10
I 10
.Fa stayopen
E 10
is non-zero, file descriptors are left open, significantly speeding
D 9
up subsequent calls.  This functionality is unnecessary for
E 9
I 9
up subsequent accesses for all of the routines.
(This latter functionality is unnecessary for
E 9
D 10
.I getpwent
E 10
I 10
.Fn getpwent
E 10
D 9
as it doesn't close its file descriptors by default.  It should also
be noted that it is dangerous for long-running programs to use this
functionality as the password file may be updated by
.IR chpass (1),
.IR passwd (1),
or
.IR vipw (8).
E 9
I 9
as it doesn't close its file descriptors by default.)
E 9
D 10
.PP
E 10
I 10
.Pp
E 10
I 9
It is dangerous for long-running programs to keep the file descriptors
D 12
open the database will become out of date if it is updated while the
E 12
I 12
open as the database will become out of date if it is updated while the
E 12
program is running.
D 10
.PP
E 9
E 7
E 6
.I Setpwent
E 10
I 10
.Pp
The
.Fn setpwent
function
E 10
D 6
opens the database;
E 5
.I endpwent
closes it.
E 6
I 6
D 7
opens the database or file (closing any previously opened database or file)
or rewinds it if it is already open.
E 7
I 7
is identical to
D 10
.I setpassent
E 10
I 10
.Fn setpassent
E 10
with an argument of zero.
E 7
D 10
.PP
.I Endpwent
E 10
I 10
.Pp
The
.Fn endpwent
function
E 10
D 7
closes any open databases or files.
E 7
I 7
closes any open files.
E 7
D 10
.PP
E 10
I 10
.Pp
E 10
E 6
I 5
D 7
.I Getpwuid
E 7
I 7
These routines have been written to ``shadow'' the password file, e.g.
allow only certain programs to have access to the encrypted password.
D 9
This is done by using the
.IR mkpasswd (8)
program, which creates
.IR ndbm (3)
databases that correspond to the password file, with the single exception
that, rather than storing the encrypted password in the database, it stores
the offset in the password file where the encrypted password may be found.
.IR Getpwent ,
.IR getpwnam ,
E 7
and
D 7
.I getpwnam
D 6
search the database (opening it if necessary) for a matching
E 6
I 6
search the entire database or file (opening it if necessary) for a matching
E 6
.I uid
or
.IR name .
D 6
EOF is returned if there is no entry.
E 6
E 5
I 3
.PP
I 5
For programs wishing to read the entire database,
.I getpwent
D 6
reads the next
line (opening the database if necessary).
In addition to opening the database,
.I setpwent
can be used to make
.I getpwent
begin its search from the beginning of the database.
.PP
E 5
.I Setpwfile
changes the default password file to
.I name
thus allowing alternate password files to be used.
Note that it does
.I not
close the previous file.
If this is desired,
.I endpwent
should be called prior to it.
E 6
I 6
reads the next entry (opening the database or file if necessary).
E 7
I 7
.I getpwuid
will use the
.I ndbm
files in preference to the ``real'' password files, only reading the
password file itself, to obtain the encrypted password, if the process
is running with an effective user id equivalent to super-user.
If the password file itself is protected, and the
.I ndbm
files are not, this makes the password available only to programs
running with super-user privileges.
E 9
I 9
If the process which calls them has an effective uid of 0, the encrypted
D 12
password will be returned, otherwise, the password field of the retuned
E 12
I 12
password will be returned, otherwise, the password field of the returned
E 12
D 10
structure will point to the string ``*''.
E 9
E 7
E 6
E 3
D 5
.PP
.I Getpwuid
and
.I getpwnam
search from the beginning until a matching
.I uid
or
.I name
is found
(or until EOF is encountered).
E 5
.SH FILES
D 9
/etc/passwd
E 9
I 9
/var/db/pwd.db			The insecure password database file
.br
/var/db/spwd.db		The secure password database file
.br
/etc/master.passwd		The current password file
.br
/etc/passwd			A Version 7 format password file
E 9
.SH "SEE ALSO"
D 7
getlogin(3), getgrent(3), passwd(5)
E 7
I 7
D 9
getlogin(3), getgrent(3), ndbm(3), passwd(5)
E 9
I 9
getlogin(3), getgrent(3), passwd(5), pwd_mkdb(8), vipw(8)
E 9
E 7
.SH DIAGNOSTICS
D 4
Null pointer
(0) returned on EOF or error.
E 4
I 4
The routines
.IR getpwent ,
I 7
.IR getpwnam ,
E 10
I 10
structure will point to the string
.Ql * .
.Sh RETURN VALUES
The functions
.Fn getpwent ,
.Fn getpwnam ,
E 10
and
E 7
D 10
.IR getpwuid ,
I 7
return a null pointer on EOF or error.
.I Setpassent
E 10
I 10
.Fn getpwuid ,
return a valid pointer to a passwd structure on success
and a null pointer if end-of-file is reached or an error occurs.
The functions
.Fn setpassent
E 10
E 7
and
D 7
.IR getpwnam ,
return a null pointer (0) on EOF or error.
I 6
.I Setpwent
returns 0 on failure, 1 on success.
E 7
I 7
D 10
.I setpwent
E 10
I 10
.Fn setpwent
E 10
return 0 on failure and 1 on success.
E 7
D 10
.I Endpwent
E 10
I 10
The
.Fn endpwent
function
E 10
D 9
and
.I setpwfile
have no return value.
E 9
I 9
has no return value.
E 9
E 6
E 4
D 10
.SH BUGS
D 6
All information
is contained in a static area
so it must be copied if it is
to be saved.
E 6
I 6
D 7
All information is contained in a static area so it must be
copied if it is to be saved.
E 7
I 7
All information is contained in a static buffer which is overwritten
D 9
by each new call.  It must be copied elsewhere to be retained.
E 9
I 9
by each new call.
It must be copied elsewhere to be retained.
E 9
.PP
E 10
I 10
.Sh FILES
.Bl -tag -width /etc/master.passwd -compact
.It Pa /var/db/pwd.db
The insecure password database file
.It Pa /var/db/spwd.db
The secure password database file
.It Pa /etc/master.passwd
The current password file
.It Pa /etc/passwd
A Version 7 format password file
.El
.Sh SEE ALSO
.Xr getlogin 3 ,
.Xr getgrent 3 ,
.Xr passwd 5 ,
.Xr pwd_mkdb 8 ,
.Xr vipw 8
.Sh HISTORY
The
.Nm getpwent ,
.Nm getpwnam ,
.Nm getpwuid ,
.Nm setpwent,
and
.Nm endpwent
functions appeared in
.At v7 .
The
.Nm setpassent
function appeared in
.Bx 4.3 Reno .
.Sh BUGS
The functions
.Fn getpwent ,
.Fn getpwnam ,
and
.Fn getpwuid ,
leave their results in an internal static object and return
a pointer to that object. Subsequent calls to
the same function
will modify the same object.
.Pp
E 10
D 9
Intermixing calls to
.IR getpwent
with calls to
.I getpwnam
or
.IR getpwuid ,
or intermixing calls to
.I getpwnam
and
.IR getpwuid ,
after using
.I setpassent
to require that file descriptors be left open, may result
in undefined behavior.
.PP
E 9
The routines
D 10
.IR getpwent ,
.IR endpwent ,
.IR setpassent ,
E 10
I 10
.Fn getpwent ,
.Fn endpwent ,
.Fn setpassent ,
E 10
and
D 10
.IR setpwent
E 10
I 10
.Fn setpwent
E 10
are fairly useless in a networked environment and should be
avoided, if possible.
I 9
D 10
.SH COMPATIBILITY
E 10
I 10
.Sh COMPATIBILITY
E 10
The historic function
D 10
.IR setpwfile ,
E 10
I 10
.Xr setpwfile 3 ,
E 10
which allowed the specification of alternate password databases,
has been deprecated and is no longer available.
E 9
E 7
E 6
D 4
.br
E 4
E 1
