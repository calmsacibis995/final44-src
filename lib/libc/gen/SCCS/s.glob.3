h41958
s 00021/00022/00397
d D 8.3 94/04/16 12:02:24 bostic 13 12
c delete reference to wordexp(3), rearrange section order
e
s 00001/00001/00418
d D 8.2 94/01/05 10:39:21 bostic 12 11
c typo
e
s 00002/00002/00417
d D 8.1 93/06/09 16:52:56 elan 11 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00002/00418
d D 5.9 93/06/09 16:52:51 elan 10 8
c fix under development line
e
s 00002/00002/00418
d R 8.1 93/06/04 12:03:34 bostic 9 8
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00062/00026/00358
d D 5.8 93/02/10 15:05:49 bostic 8 7
c add GLOB_BRACE, GLOB_TILDE, plus minor cleanups and prototyping
c from Christos Zoulas
e
s 00018/00001/00366
d D 5.7 92/12/02 01:03:08 mckusick 7 6
c add GLOB_ALTDIRFUNC to have glob use alternate directory access functions
e
s 00001/00001/00366
d D 5.6 91/07/31 19:56:19 cael 6 5
c reposition display
e
s 00016/00006/00351
d D 5.5 91/07/15 14:39:18 bostic 5 4
c add GLOB_NOMAGIC
e
s 00225/00175/00132
d D 5.4 91/04/19 14:49:42 cael 4 3
c macro and text revision (-mdoc version 3)
e
s 00038/00010/00269
d D 5.3 91/03/19 19:58:48 bostic 3 2
c add gl_matchc, GLOB_MAGCHAR
e
s 00001/00011/00278
d D 5.2 90/06/23 17:56:48 trent 2 1
c new copyright notice
e
s 00289/00000/00000
d D 5.1 90/02/15 10:57:01 bostic 1 0
c date and time created 90/02/15 10:57:01 by bostic
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1989 The Regents of the University of California.
E 4
I 4
D 11
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 4
.\" All rights reserved.
E 11
I 11
D 13
.\" Copyright (c) 1989, 1991, 1993
E 13
I 13
.\" Copyright (c) 1989, 1991, 1993, 1994
E 13
.\"	The Regents of the University of California.  All rights reserved.
E 11
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Guido van Rossum.
D 4
.\"
E 4
D 2
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 2
I 2
.\" %sccs.include.redist.man%
E 2
.\"
D 4
.\"	%W% (Berkeley) %G%
E 4
I 4
.\"     %W% (Berkeley) %G%
E 4
.\"
D 4
.TH GLOB 3 "%Q%"
.UC 7
.SH NAME
glob, globfree \- generate pathnames matching a pattern
.SH SYNOPSIS
.nf
#include <glob.h>

glob(const char *pattern, int flags,
	const int (*errfunc)(char *, int), glob_t *pglob);

void globfree(glob_t *pglob);
.fi
.SH DESCRIPTION
.I Glob
E 4
I 4
.Dd %Q%
.Dt GLOB 3
.Os
.Sh NAME
.Nm glob ,
.Nm globfree
.Nd generate pathnames matching a pattern
.Sh SYNOPSIS
.Fd #include <glob.h>
.Ft int
D 8
.Fn glob "const char *pattern" "int flags" "const int (*errfunc)(char *, int)" "glob_t *pglob"
E 8
I 8
.Fn glob "const char *pattern" "int flags" "const int (*errfunc)(const char *, int)" "glob_t *pglob"
E 8
.Ft void 
.Fn globfree "glob_t *pglob"
.Sh DESCRIPTION
The
.Fn glob
function
E 4
is a pathname generator that implements the rules for file name pattern
matching used by the shell.
D 4
.PP
E 4
I 4
.Pp
E 4
The include file
D 4
.I glob.h
E 4
I 4
.Pa glob.h
E 4
defines the structure type
D 4
.IR glob_t ,
E 4
I 4
.Fa glob_t ,
E 4
which contains at least the following fields:
D 4
.sp
.RS
.nf
.ta .5i +\w'char **gl_pathv;\0\0\0'u
E 4
I 4
D 6
.Bd -literal -offset indent
E 6
I 6
.Bd -literal
E 6
E 4
typedef struct {
D 3
	int gl_pathc;		/* count of paths matching pattern */
E 3
I 3
	int gl_pathc;		/* count of total paths so far */
	int gl_matchc;		/* count of paths matching pattern */
E 3
	int gl_offs;		/* reserved at beginning of gl_pathv */
I 3
	int gl_flags;		/* returned flags */
E 3
	char **gl_pathv;	/* list of paths matching pattern */
} glob_t;
D 4
.fi
.RE
.PP
E 4
I 4
.Ed
.Pp
E 4
The argument
D 4
.I pattern
E 4
I 4
.Fa pattern
E 4
is a pointer to a pathname pattern to be expanded.
D 4
.I Glob
E 4
I 4
The
.Fn glob
argument
E 4
matches all accessible pathnames against the pattern and creates
a list of the pathnames that match.
In order to have access to a pathname,
D 4
.I glob
E 4
I 4
.Fn glob
E 4
requires search permission on every component of a path except the last
and read permission on each directory of any filename component of
D 4
.I pattern
that contains any of the special characters ``*'', ``?'' or ``[''.
.PP
.I Glob
E 4
I 4
.Fa pattern
that contains any of the special characters
.Ql * ,
.Ql ?
or
.Ql [ .
.Pp
The
.Fn glob
argument
E 4
stores the number of matched pathnames into the
D 4
.I gl_pathc
E 4
I 4
.Fa gl_pathc
E 4
field, and a pointer to a list of pointers to pathnames into the
D 4
.I gl_pathv
E 4
I 4
.Fa gl_pathv
E 4
field.
D 4
The first pointer after the last pathname is NULL.
E 4
I 4
The first pointer after the last pathname is
.Dv NULL . 
E 4
If the pattern does not match any pathnames, the returned number of
matched paths is set to zero.
D 4
.PP
E 4
I 4
.Pp
E 4
It is the caller's responsibility to create the structure pointed to by
D 4
.IR pglob .
E 4
I 4
.Fa pglob .
E 4
The
D 4
.I glob
E 4
I 4
.Fn glob
E 4
function allocates other space as needed, including the memory pointed
to by
D 4
.IR gl_pathv .
.PP
E 4
I 4
.Fa gl_pathv .
.Pp
E 4
The argument
D 4
.I flags
E 4
I 4
.Fa flags
E 4
is used to modify the behavior of
D 4
.IR glob .
E 4
I 4
.Fn glob .
E 4
The value of
D 4
.I flags
is the bitwise inclusive OR of any of the following
E 4
I 4
.Fa flags
is the bitwise inclusive
.Tn OR
of any of the following
E 4
values defined in
D 4
.IR glob.h :
.TP
GLOB_APPEND
E 4
I 4
.Pa glob.h :
D 8
.Bl -tag -width GLOB_NOCHECK
E 8
I 8
.Bl -tag -width GLOB_ALTDIRFUNC
E 8
.It Dv GLOB_APPEND
E 4
Append pathnames generated to the ones from a previous call (or calls)
to
D 4
.IR glob .
E 4
I 4
.Fn glob .
E 4
The value of
D 4
.I gl_pathc
E 4
I 4
.Fa gl_pathc
E 4
will be the total matches found by this call and the previous call(s).
The pathnames are appended to, not merged with the pathnames returned by
the previous call(s).
Between calls, the caller must not change the setting of the
D 4
GLOB_DOOFFS flag, nor change the value of
.I gl_offs
E 4
I 4
.Dv GLOB_DOOFFS
flag, nor change the value of
.Fa gl_offs
E 4
when
D 4
GLOB_DOOFFS is set, nor (obviously) call
.I globfree
E 4
I 4
.Dv GLOB_DOOFFS
is set, nor (obviously) call
.Fn globfree
E 4
for
D 4
.I pglob.
.TP
GLOB_DOOFFS
E 4
I 4
.Fa pglob .
.It Dv GLOB_DOOFFS
E 4
Make use of the
D 4
.I gl_offs
E 4
I 4
.Fa gl_offs
E 4
field.
If this flag is set,
D 4
.I gl_offs
is used to specify how many NULL pointers to prepend to the beginning
E 4
I 4
.Fa gl_offs
is used to specify how many
.Dv NULL
pointers to prepend to the beginning
E 4
of the
D 4
.I gl_pathv
E 4
I 4
.Fa gl_pathv
E 4
field.
In other words,
D 4
.I gl_pathv
E 4
I 4
.Fa gl_pathv
E 4
will point to
D 4
.I gl_offs
NULL pointers,
E 4
I 4
.Fa gl_offs
.Dv NULL
pointers,
E 4
followed by
D 4
.I gl_pathc
pathname pointers, followed by a NULL pointer.
.TP
GLOB_ERR
E 4
I 4
.Fa gl_pathc
pathname pointers, followed by a
.Dv NULL
pointer.
.It Dv GLOB_ERR
E 4
Causes
D 4
.I glob
E 4
I 4
.Fn glob
E 4
to return when it encounters a directory that it cannot open or read.
Ordinarily,
D 4
.I glob
E 4
I 4
.Fn glob
E 4
continues to find matches.
D 4
.TP
GLOB_MARK
E 4
I 4
.It Dv GLOB_MARK
E 4
Each pathname that is a directory that matches
D 4
.I pattern
E 4
I 4
.Fa pattern
E 4
has a slash
appended.
D 4
.TP
GLOB_NOSORT
By default, the pathnames are sorted in ascending ASCII order;
E 4
I 4
D 5
.It Dv GLOB_NOSORT
By default, the pathnames are sorted in ascending
.Tn ASCII
order;
E 4
this flag prevents that sorting (speeding up
D 4
.IR glob ).
.TP
GLOB_NOCHECK
E 4
I 4
.Fn glob ) .
E 5
.It Dv GLOB_NOCHECK
E 4
If
D 4
.I pattern
E 4
I 4
.Fa pattern
E 4
does not match any pathname, then
D 4
.I glob
E 4
I 4
.Fn glob
E 4
returns a list
consisting of only
D 4
.IR pattern ,
E 4
I 4
.Fa pattern ,
E 4
D 3
and the number of matched pathnames is set to 1.
E 3
I 3
with the number of total pathnames is set to 1, and the number of matched
pathnames set to 0.
E 3
If
D 4
.I GLOB_QUOTE
E 4
I 4
.Dv GLOB_QUOTE
E 4
is set, its effect is present in the pattern returned.
I 8
.It Dv GLOB_NOSORT
By default, the pathnames are sorted in ascending
.Tn ASCII
order;
this flag prevents that sorting (speeding up
.Fn glob ) .
.El
.Pp
The following values may also be included in
.Fa flags ,
however, they are non-standard extensions to
.St -p1003.2 .
.Bl -tag -width GLOB_ALTDIRFUNC
.It Dv GLOB_ALTDIRFUNC
The following additional fields in the pglob structure have been
initialized with alternate functions for glob to use to open, read,
and close directories and to get stat information on names found
in those directories.
.Bd -literal
D 13
	void *(*gl_opendir)(const char * name);
	struct dirent *(*gl_readdir)(void *);
	void (*gl_closedir)(void *);
	int (*gl_lstat)(const char *name, struct stat *st);
	int (*gl_stat)(const char *name, struct stat *st);
E 13
I 13
void *(*gl_opendir)(const char * name);
struct dirent *(*gl_readdir)(void *);
void (*gl_closedir)(void *);
int (*gl_lstat)(const char *name, struct stat *st);
int (*gl_stat)(const char *name, struct stat *st);
E 13
.Ed
.Pp
This extension is provided to allow programs such as
.Xr restore 8
to provide globbing from directories stored on tape.
.It Dv GLOB_BRACE
Pre-process the pattern string to expand 
.Ql {pat,pat,...} 
strings like 
.Xr csh 1. The pattern 
.Ql {}
is left unexpanded for historical reasons
.Xr (Csh 1 
does the same thing to 
ease typing
of 
.Xr find 1 
patterns).
.It Dv GLOB_MAGCHAR
Set by the
.Fn glob
function if the pattern included globbing characters.
See the description of the usage of the 
.Fa gl_matchc
structure member for more details.
E 8
I 5
.It Dv GLOB_NOMAGIC
Is the same as 
.Dv GLOB_NOCHECK 
but it only appends the
.Fa pattern
if it does not contain any of the special characters ``*'', ``?'' or ``[''.
.Dv GLOB_NOMAGIC 
is provided to simplify implementing the historic
.Xr csh 1
globbing behavior and should probably not be used anywhere else.
D 8
.It Dv GLOB_NOSORT
By default, the pathnames are sorted in ascending
.Tn ASCII
order;
this flag prevents that sorting (speeding up
.Fn glob ) .
E 8
E 5
D 4
.TP
GLOB_QUOTE
Use the backslash (``\e'') character for quoting: every occurrence of
E 4
I 4
.It Dv GLOB_QUOTE
Use the backslash
.Pq Ql \e
character for quoting: every occurrence of
E 4
a backslash followed by a character in the pattern is replaced by that
character, avoiding any special interpretation of the character.
I 7
D 8
.It Dv GLOB_ALTDIRFUNC
The following additional fields in the pglob structure have been
initialized with alternate functions for glob to use to open, read,
and close directories and to get stat information on names found
in those directories.
.Bd -literal
	void *(*gl_opendir)();
	struct dirent *(*gl_readdir)();
	void (*gl_closedir)();
	int (*gl_lstat)();
	int (*gl_stat)();
.Ed
.Pp
This non-standard extension is provided to allow programs such
as restore to provide globbing from directories stored on tape.
E 8
I 8
.It Dv GLOB_TILDE
Expand patterns that start with
.Ql ~
to user name home directories.
E 8
E 7
D 4
.PP
E 4
I 4
.El
.Pp
E 4
If, during the search, a directory is encountered that cannot be opened
or read and
D 4
.I errfunc
is non-NULL,
.I glob
calls (*\fIerrfunc\fP)(\fIpath\fP, \fIerrno\fP).
This may be unintuitive: a pattern like ``*/Makefile'' will try to
.IR stat (2)
``foo/Makefile'' even if ``foo'' is not a directory, resulting in a
E 4
I 4
.Fa errfunc
is
.Pf non- Dv NULL , 
.Fn glob
calls
D 8
.Fa (*errfunc)(path,errno) .
E 8
I 8
.Fa (*errfunc)(path, errno) .
E 8
This may be unintuitive: a pattern like
.Ql */Makefile
will try to
.Xr stat 2
.Ql foo/Makefile
even if
.Ql foo
is not a directory, resulting in a
E 4
call to
D 4
.IR errfunc .
The error routine can suppress this action by testing for ENOENT and
ENOTDIR; however, the GLOB_ERR flag will still cause an immediate
E 4
I 4
.Fa errfunc .
The error routine can suppress this action by testing for
.Dv ENOENT
and
.Dv ENOTDIR ; 
however, the
.Dv GLOB_ERR
flag will still cause an immediate
E 4
return when this happens.
D 4
.PP
E 4
I 4
.Pp
E 4
If
D 4
.I errfunc
E 4
I 4
.Fa errfunc
E 4
returns non-zero,
D 4
.I glob
E 4
I 4
.Fn glob
E 4
stops the scan and returns
D 4
.I GLOB_ABEND
E 4
I 4
.Dv GLOB_ABEND
E 4
after setting
D 4
.I gl_pathc
E 4
I 4
.Fa gl_pathc
E 4
and
D 4
.I gl_pathv
E 4
I 4
.Fa gl_pathv
E 4
to reflect any paths already matched.
This also happens if an error is encountered and
D 4
.I GLOB_ERR
E 4
I 4
.Dv GLOB_ERR
E 4
is set in
D 4
.IR flags ,
E 4
I 4
.Fa flags ,
E 4
regardless of the return value of
D 4
.IR errfunc ,
E 4
I 4
.Fa errfunc ,
E 4
if called.
If
D 4
.I GLOB_ERR
E 4
I 4
.Dv GLOB_ERR
E 4
is not set and either
D 4
.I errfunc
is NULL or
.I errfunc
E 4
I 4
.Fa errfunc
is
.Dv NULL
or
.Fa errfunc
E 4
returns zero, the error is ignored.
D 4
.PP
E 4
I 4
.Pp
E 4
The
D 4
.I globfree
E 4
I 4
.Fn globfree
E 4
function frees any space associated with
D 4
.I pglob
E 4
I 4
.Fa pglob
E 4
from a previous call(s) to
D 4
.IR glob .
.SH RETURNS
E 4
I 4
.Fn glob .
.Sh RETURN VALUES
E 4
On successful completion,
D 4
.I glob
E 4
I 4
.Fn glob
E 4
returns zero.
D 3
The field
E 3
I 3
In addition the fields of
D 4
.I pglob
E 4
I 4
.Fa pglob
E 4
contain the values described below:
D 4
.TP
E 3
.I gl_pathc
E 4
I 4
.Bl -tag -width GLOB_NOCHECK
.It Fa gl_pathc
E 4
D 3
returns the number of matched pathnames and
the field
E 3
I 3
contains the total number of matched pathnames so far.
This includes other matches from previous invocations of 
D 4
.I glob 
E 4
I 4
.Fn glob
E 4
if 
D 4
.I GLOB_APPEND 
E 4
I 4
.Dv GLOB_APPEND
E 4
was specified.
D 4
.TP
.I gl_matchc
E 4
I 4
.It Fa gl_matchc
E 4
contains the number of matched pathnames in the current invocation of
D 4
.I glob.
.TP
.I gl_flags
E 4
I 4
.Fn glob .
.It Fa gl_flags
E 4
contains a copy of the 
D 4
.I flags 
parameter with the bit GLOB_MAGCHAR set if
.I pattern
E 4
I 4
.Fa flags
parameter with the bit
.Dv GLOB_MAGCHAR
set if
.Fa pattern
E 4
contained any of the special characters ``*'', ``?'' or ``['', cleared
if not.
D 4
.TP
E 3
.I gl_pathv
contains a pointer to a NULL-terminated list of matched pathnames.
E 4
I 4
.It Fa gl_pathv
contains a pointer to a
.Dv NULL Ns -terminated 
list of matched pathnames.
E 4
However, if
D 3
.I pglob->gl_pathc
E 3
I 3
D 4
.I gl_pathc
E 4
I 4
.Fa gl_pathc
E 4
E 3
is zero, the contents of
D 3
.I pglob->gl_pathv
is undefined.
E 3
I 3
D 4
.I gl_pathv
E 4
I 4
.Fa gl_pathv
E 4
are undefined.
E 3
D 4
.PP
E 4
I 4
.El
.Pp
E 4
If
D 4
.I glob
E 4
I 4
.Fn glob
E 4
terminates due to an error, it sets errno and returns one of the
following non-zero constants, which are defined in the include
D 4
file <glob.h>:
.TP
GLOB_NOSPACE
E 4
I 4
file
.Aq Pa glob.h :
.Bl -tag -width GLOB_NOCHECK
.It Dv GLOB_NOSPACE
E 4
An attempt to allocate memory failed.
D 4
.TP
GLOB_ABEND
E 4
I 4
.It Dv GLOB_ABEND
E 4
The scan was stopped because an error was encountered and either
D 4
GLOB_ERR was set or (*\fIerrfunc\fR)() returned non-zero.
.PP
E 4
I 4
.Dv GLOB_ERR
was set or
.Fa (*errfunc)()
returned non-zero.
.El
.Pp
E 4
The arguments
D 4
.I pglob->gl_pathc
E 4
I 4
.Fa pglob\->gl_pathc
E 4
and
D 4
.I pglob->gl_pathv
E 4
I 4
.Fa pglob\->gl_pathv
E 4
are still set as specified above.
I 13
.Sh EXAMPLE
A rough equivalent of
.Ql "ls -l *.c *.h"
can be obtained with the
following code:
.Bd -literal -offset indent
glob_t g;

g.gl_offs = 2;
glob("*.c", GLOB_DOOFFS, NULL, &g);
glob("*.h", GLOB_DOOFFS | GLOB_APPEND, NULL, &g);
g.gl_pathv[0] = "ls";
g.gl_pathv[1] = "-l";
execvp("ls", g.gl_pathv);
.Ed
E 13
D 4
.SH STANDARDS
E 4
I 4
.Sh SEE ALSO
.Xr sh 1 ,
.Xr fnmatch 3 ,
D 13
.Xr wordexp 3 ,
E 13
.Xr regexp 3
.Sh STANDARDS
E 4
The
D 4
.I glob
function is expected to be POSIX 1003.2 compatible with the exception
E 4
I 4
.Fn glob
function is expected to be
.St -p1003.2
compatible with the exception
E 4
D 3
that the flag GLOB_QUOTE should not be used by applications striving
for strict POSIX conformance.
E 3
I 3
D 7
that the flag 
E 7
I 7
that the flags
D 8
.Dv GLOB_ALTDIRFUNC
E 8
I 8
.Dv GLOB_ALTDIRFUNC,
.Dv GLOB_BRACE
.Dv GLOB_MAGCHAR,
.Dv GLOB_NOMAGIC,
.Dv GLOB_QUOTE,
E 8
and
E 7
D 4
.I GLOB_QUOTE 
E 4
I 4
D 8
.Dv GLOB_QUOTE
E 8
I 8
.Dv GLOB_TILDE,
E 8
E 4
and the fields 
D 4
.I gl_matchc 
E 4
I 4
.Fa gl_matchc
E 4
and 
D 4
.I gl_flags 
should not be used by applications striving for strict POSIX conformance.
E 3
.SH EXAMPLE
A rough equivalent of ``ls -l *.c *.h'' can be obtained with the
E 4
I 4
.Fa gl_flags
should not be used by applications striving for strict
.Tn POSIX
conformance.
D 13
.Sh EXAMPLE
A rough equivalent of
.Ql "ls -l *.c *.h"
can be obtained with the
E 4
following code:
D 4
.sp
.nf
.RS
glob_t g;
E 4
I 4
.Bd -literal -offset indent
D 12
GLOB_t g;
E 12
I 12
glob_t g;
E 12
E 4

g.gl_offs = 2;
glob("*.c", GLOB_DOOFFS, NULL, &g);
glob("*.h", GLOB_DOOFFS | GLOB_APPEND, NULL, &g);
g.gl_pathv[0] = "ls";
g.gl_pathv[1] = "-l";
execvp("ls", g.gl_pathv);
D 4
.RE
.fi
.SH SEE ALSO
sh(1), fnmatch(3), wordexp(3), regexp(3)
.SH BUGS
Patterns longer than MAXPATHLEN may cause unchecked errors.
.PP
.I Glob
E 4
I 4
.Ed
E 13
.Sh HISTORY
The
.Fn glob
and
.Fn globfree
D 10
functions are
.Ud .
E 10
I 10
functions first appeared in 4.4BSD.
E 10
.Sh BUGS
Patterns longer than
.Dv MAXPATHLEN
may cause unchecked errors.
.Pp
The
.Fn glob
argument
E 4
may fail and set errno for any of the errors specified for the
library routines
D 4
.I stat (2),
.I closedir (3),
.I opendir (3),
.I readdir (3),
.I malloc (3),
E 4
I 4
.Xr stat 2 ,
.Xr closedir 3 ,
.Xr opendir 3 ,
.Xr readdir 3 ,
.Xr malloc 3 ,
E 4
and
D 4
.I free (3).

E 4
I 4
.Xr free 3 .
E 4
E 1
