h57464
s 00027/00015/00141
d D 8.2 95/05/03 19:06:38 mckusick 8 7
c document bidirectional popens
e
s 00002/00002/00154
d D 8.1 93/06/04 12:04:17 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00151/00063/00005
d D 6.4 91/04/30 17:41:13 cael 6 5
c mdoc version three/bsd copyright
e
s 00000/00000/00068
d D 6.3 91/04/26 15:18:09 cael 5 4
c mdoc version three/bsd copyright
e
s 00007/00008/00061
d D 6.2 88/12/07 18:39:28 bostic 4 3
c note other reasons for pclose to return -1; wait(2) -> wait4(2)
e
s 00002/00002/00067
d D 6.1 85/05/15 15:43:07 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00020/00020/00049
d D 5.1 85/05/15 15:42:32 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00069/00000/00000
d D 4.1 85/05/15 15:41:27 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
D 7
.\" Copyright 1991 The Regents of the University of California.
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
E 6
.\"
D 2
.TH POPEN 3S
E 2
I 2
D 3
.TH POPEN 3 "18 July 1983"
E 3
I 3
D 6
.TH POPEN 3 "%Q%"
E 3
E 2
.AT 3
.SH NAME
popen, pclose \- initiate I/O to/from a process
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.SM
.B FILE
.B *popen(command, type)
.br
.B char *command, *type;
.PP
.B pclose(stream)
.br
.SM
.B FILE
.B *stream;
.SH DESCRIPTION
The arguments to 
.I popen
D 2
are pointers to null-terminated strings
containing respectively a shell command line and an I/O
mode, either "r" for reading or "w" for
writing.
It creates a pipe between
the calling process and
the command to be executed.
The value returned 
is a stream pointer that
E 2
I 2
are pointers to null-terminated strings containing respectively a
shell command line and an I/O mode, either "r" for reading or "w" for
writing.  It creates a pipe between the calling process and
the command to be executed.  The value returned is a stream pointer that
E 2
can be used (as appropriate) to write to the standard input
of the command or read from its standard output.
.PP
A stream opened by
.I popen
should be closed by
D 2
.I pclose,
E 2
I 2
.IR pclose ,
E 2
which waits for the associated process to terminate
and returns the exit status of the command.
.PP
D 2
Because open files are shared, a type "r" command
may be used as an input filter,
and a type "w" as an output filter.
E 2
I 2
Because open files are shared, a type "r" command may be used as an input
filter, and a type "w" as an output filter.
E 2
.SH "SEE ALSO"
D 4
pipe(2),
D 2
fopen(3),
fclose(3),
E 2
I 2
fopen(3S),
fclose(3S),
E 2
system(3),
D 2
wait(2)
E 2
I 2
wait(2),
sh(1)
E 4
I 4
sh(1), pipe(2), wait4(2), fclose(3), fopen(3), system(3)
E 4
E 2
.SH DIAGNOSTICS
.I Popen
D 2
returns a null pointer
if files or processes cannot be created, or the Shell 
E 2
I 2
returns a null pointer if files or processes cannot be created, or the shell 
E 2
cannot be accessed.
.PP
.I Pclose
E 6
I 6
.\" %sccs.include.redist.roff%
.\"
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt POPEN 3
.Os
.Sh NAME
.Nm popen ,
.Nm pclose
.Nd process
.Tn I/O
.Sh SYNOPSIS
.Fd #include <stdio.h>
.Ft FILE *
.Fn popen "const char *command" "const char *type"
.Ft int
.Fn pclose "FILE *stream"
.Sh DESCRIPTION
The
.Fn popen
function
.Dq opens
D 8
a process by creating a pipe,
E 8
I 8
a process by creating an IPC connection,
E 8
forking,
and invoking the shell.
D 8
Since a pipe is by definition unidirectional, the
E 8
I 8
Historically,
.Nm popen
was implemented with a unidirectional pipe;
hence many implementations of
.Nm popen
only allow the
E 8
.Fa type
D 8
argument may specify only reading or writing, not both;
the resulting stream is correspondingly read-only or write-only.
E 8
I 8
argument to specify reading or writing, not both.
Since
.Nm popen
is now implemented using sockets, the
.Fa type
may request a bidirectional data flow.
The
.Fa type
argument is a pointer to a null-terminated string
which must be
.Ql r
for reading,
.Ql w
for writing, or
.Ql r+
for reading and writing.
E 8
.Pp
The
.Fa command
argument is a pointer to a null-terminated string
containing a shell command line.
This command is passed to
.Pa /bin/sh
using the
.Fl c
flag; interpretation, if any, is performed by the shell.
D 8
The
.Fa mode
argument is a pointer to a null-terminated string
which must be either
.Ql r
for reading
or
.Ql w
for writing.
E 8
.Pp
The return value from
.Fn popen
is a normal standard
.Tn I/O
stream in all respects
save that it must be closed with
.Fn pclose
rather than
.Fn fclose .
Writing to such a stream
writes to the standard input of the command;
the command's standard output is the same as that of the process that called
.Fn popen ,
unless this is altered by the command itself.
Conversely, reading from a
.Dq popened
stream reads the command's standard output, and
the command's standard input is the same as that of the process that called
.Fn popen .
.Pp
Note that output
.Fn popen
streams are fully buffered by default.
.Pp
The
.Fn pclose
function waits for the associated process to terminate
and returns the exit status of the command
as returned by
.Fn wait4 .
.Sh RETURN VALUE
The
.Fn popen
function returns
.Dv NULL
if the
D 8
.Xr fork 2
E 8
I 8
.Xr fork 2 ,
.Xr pipe 2 ,
E 8
or
D 8
.Xr pipe 2
E 8
I 8
.Xr socketpair 2
E 8
calls fail,
or if it cannot allocate memory.
.Pp
The
.Fn pclose
function
E 6
returns \-1 if
D 6
.I stream
D 4
is not associated with a `popened' command.
E 4
I 4
is not associated with a `popened' command, or if
.I stream
already `pclosed', or
.IR wait (4)
E 6
I 6
.Fa stream
is not associated with a
.Dq popened
command, if
.Fa stream
already
.Dq pclosed ,
or if
.Xr wait4
E 6
returns an error.
E 4
D 6
.SH BUGS
Buffered reading before opening an input filter
may leave the standard input of that filter mispositioned.
Similar problems with an output filter may be
D 2
forestalled by careful buffer flushing, e.g. with
E 2
I 2
forestalled by careful buffer flushing, for instance, with
E 2
.I fflush,
see
D 3
.IR fclose (3).
E 3
I 3
D 4
.IR fclose (3S).
E 4
I 4
.IR fclose (3).
E 4
E 3
I 2
.LP
.I Popen
E 6
I 6
.Sh ERRORS
The
.Fn popen
function does not reliably set
.Va errno .
.Sh SEE ALSO
.Xr fork 2 ,
.Xr sh 1 ,
.Xr pipe 2 ,
I 8
.Xr socketpair 2 ,
E 8
.Xr wait4 2 ,
.Xr fflush 3 ,
.Xr fclose 3 ,
.Xr fopen 3 ,
.Xr stdio 3 ,
.Xr system 3
.Sh BUGS
Since the standard input of a command opened for reading
shares its seek offset with the process that called
.Fn popen ,
if the original process has done a buffered read,
the command's input position may not be as expected.
Similarly, the output from a command opened for writing
may become intermingled with that of the original process.
The latter can be avoided by calling
.Xr fflush 3
before
.Fn popen .
.Pp
Failure to execute the shell
is indistinguishable from the shell's failure to execute command,
or an immediate exit of the command.
The only hint is an exit status of 127.
.Pp
The
.Fn popen
argument
E 6
always calls
D 6
.IR sh ,
E 6
I 6
.Xr sh ,
E 6
never calls
D 6
.IR csh .
E 6
I 6
.Xr csh .
.Sh HISTORY
A
.Fn popen
and a
.Fn pclose
function appeared in
.At v7 .
E 6
E 2
E 1
