h43510
s 00002/00002/00144
d D 8.1 93/06/04 12:04:57 bostic 13 12
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00009/00003/00137
d D 6.10 93/03/02 17:43:51 bostic 12 11
c fixes, wordsmithing from Donn Seeley at BSDI
e
s 00001/00001/00139
d D 6.9 92/04/23 16:34:35 bostic 11 10
c sigstack -> sigaltstack
e
s 00011/00015/00129
d D 6.8 91/07/30 22:12:34 cael 10 9
c groff compat changes
e
s 00004/00000/00140
d D 6.7 91/06/29 14:34:07 bostic 9 8
c add ANSI contribution notice
e
s 00007/00000/00133
d D 6.6 91/04/20 10:12:41 cael 8 7
c text changes or conversion to -mdoc (version 3)
e
s 00098/00079/00035
d D 6.5 91/04/19 14:49:23 cael 7 6
c macro and text revision (-mdoc version 3)
e
s 00004/00001/00110
d D 6.4 90/05/27 11:29:55 bostic 6 5
c forgot longjmperror()
e
s 00081/00052/00030
d D 6.3 90/05/27 11:27:35 bostic 5 4
c add sigsetjmp, siglongjmp, from ANSI man page, so Berkeley copyright
e
s 00017/00006/00065
d D 6.2 86/01/09 16:04:14 mckusick 4 3
c bug is fixed; longjmp botch can now be caught
e
s 00001/00001/00070
d D 6.1 85/05/15 15:47:04 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00025/00002/00046
d D 5.1 85/05/15 15:46:50 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00048/00000/00000
d D 4.1 85/05/15 15:46:37 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 5
I 5
D 7
.\" Copyright (c) 1990 The Regents of the University of California.
E 7
I 7
D 13
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 7
.\" All rights reserved.
E 13
I 13
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 13
E 5
.\"
I 9
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
E 9
I 5
.\" %sccs.include.redist.man%
.\"
E 5
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\"     %W% (Berkeley) %G%
E 7
.\"
D 2
.TH SETJMP 3
E 2
I 2
D 3
.TH SETJMP 3 "19 January 1983"
E 3
I 3
D 7
.TH SETJMP 3 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 5
setjmp, longjmp \- non-local goto
E 5
I 5
D 6
sigsetjmp, siglongjmp, setjmp, longjmp, _setjmp, _longjmp \-
E 6
I 6
sigsetjmp, siglongjmp, setjmp, longjmp, _setjmp, _longjmp longjmperror \-
E 6
non-local jumps
E 5
.SH SYNOPSIS
.nf
D 5
.B #include <setjmp.h>
.PP
.B setjmp(env)
.B jmp_buf env;
.PP
.B longjmp(env, val)
.B jmp_buf env;
I 2
.PP
.B _setjmp(env)
.B jmp_buf env;
.PP
.B _longjmp(env, val)
.B jmp_buf env;
E 5
I 5
.ft B
#include <setjmp.h>

sigsetjmp(sigjmp_buf env, int savemask);

void
siglongjmp(sigjmp_buf env, int val);

setjmp(jmp_buf env);

void
longjmp(jmp_buf env, int val);

_setjmp(jmp_buf env);

void
_longjmp(jmp_buf env, int val);
I 6

void
longjmperror();
E 6
.ft R
E 5
E 2
.fi
.SH DESCRIPTION
E 7
I 7
.Dd %Q%
.Dt SETJMP 3
.Os BSD 4
.Sh NAME
.Nm sigsetjmp ,
.Nm siglongjmp ,
.Nm setjmp ,
.Nm longjmp ,
.Nm _setjmp ,
.Nm _longjmp longjmperror
.Nd non-local jumps
.Sh SYNOPSIS
.Fd #include <setjmp.h>
.Ft int
.Fn sigsetjmp "sigjmp_buf env" "int savemask"
.Ft void
.Fn siglongjmp "sigjmp_buf env" "int val"
.Ft int
.Fn setjmp "jmp_buf env"
.Ft void
.Fn longjmp "jmp_buf env" "int val"
.Ft int
.Fn _setjmp "jmp_buf env"
.Ft void
.Fn _longjmp "jmp_buf env" "int val"
.Ft void
.Fn longjmperror void
.Sh DESCRIPTION
E 7
D 5
These routines are useful for dealing with errors 
and interrupts encountered in
a low-level subroutine of a program.
E 5
I 5
The
D 7
.IR sigsetjmp ,
.IR setjmp ,
E 7
I 7
.Fn sigsetjmp ,
.Fn setjmp ,
E 7
and
D 7
.IR _setjmp
E 7
I 7
.Fn _setjmp
E 7
functions save their calling environment in
D 7
.IR env . 
E 7
I 7
.Fa env .
E 7
Each of these functions returns 0.
E 5
D 7
.PP
E 7
I 7
.Pp
E 7
D 5
.I Setjmp 
saves its stack environment in
.I env
for later use by
.I longjmp.
It returns value 0.
E 5
I 5
D 10
The corresponding 
E 10
I 10
The corresponding
E 10
D 7
.I longjmp
functions restore the environment saved by their respective versions
E 7
I 7
.Fn longjmp
functions restore the environment saved by their most recent respective
invocations
E 7
of the
D 7
.I setjmp
E 7
I 7
.Fn setjmp
E 7
function.
D 7
They then return so that program execution continues as if the
.I setjmp
call had returned 
.IR val ,
E 7
I 7
They then return so that program execution continues as if the corresponding
invocation of the
.Fn setjmp
call had just returned  the value specified by
.Fa val ,
E 7
instead of 0.
E 5
D 7
.PP
E 7
I 7
.Pp
E 7
D 5
.I Longjmp
restores the environment saved by the last call of
.IR setjmp .
It then returns in such a way that execution
continues as if the call of 
E 5
I 5
D 10
Pairs of calls may be intermixed, i.e. both 
E 10
I 10
Pairs of calls may be intermixed, i.e. both
E 10
D 7
.I sigsetjmp
E 7
I 7
.Fn sigsetjmp
E 7
and
D 7
.I siglongjmp
E 7
I 7
.Fn siglongjmp
E 7
and
E 5
D 7
.I setjmp
E 7
I 7
.Fn setjmp
E 7
D 5
had just returned the value
.I val
to the function that invoked
.I setjmp,
which must not itself have returned in the interim.
All accessible data have values as of the time
E 5
I 5
and
E 5
D 7
.I longjmp
E 7
I 7
.Fn longjmp
E 7
D 5
was called.
E 5
I 5
combinations may be used in the same program, however, individual
D 10
calls may not, i.e. the 
E 10
I 10
D 12
calls may not, i.e. the
E 12
I 12
calls may not, e.g. the
E 12
E 10
D 7
.I env
E 7
I 7
.Fa env
E 7
D 10
argument to 
E 10
I 10
argument to
E 10
D 7
.I sigsetjmp
E 7
I 7
D 12
.Fn sigsetjmp
E 12
I 12
.Fn setjmp
E 12
E 7
may not be passed to
D 7
.IR longjmp .
E 5
I 2
.PP
E 7
I 7
D 12
.Fn longjmp .
E 12
I 12
.Fn siglongjmp .
E 12
.Pp
E 7
D 5
.I Setjmp
and
E 5
I 5
The
E 5
D 7
.I longjmp
E 7
I 7
.Fn longjmp
E 7
D 5
save and restore the signal mask
.IR sigmask (2),
E 5
I 5
routines may not be called after the routine which called the
D 7
.I setjmp
E 7
I 7
.Fn setjmp
E 7
routines returns.
D 7
.PP
All accessible data have values as of the time the
.I longjmp
routine was called.
.PP
.I Setjmp/longjmp
pairs save and restore the signal mask (see 
.IR sigmask (2)),
E 5
while
D 5
.I _setjmp
and
.I _longjmp
manipulate only the C stack and registers.
I 4
.SH ERRORS
E 5
I 5
.I _setjmp/_longjmp
E 7
I 7
.Pp
All accessible objects have values as of the time
.Fn longjmp
routine was called, except that the values of objects of automatic storage
invocation duration that do not have the
.Em volatile
type and have been changed between the
.Fn setjmp
invocation and
.Fn longjmp
call are indeterminate.
.Pp
The
D 10
.Pa setjmp/longjmp
E 10
I 10
.Fn setjmp Ns / Ns Fn longjmp
E 10
pairs save and restore the signal mask while
D 10
.Pa _setjmp/_longjmp
E 10
I 10
.Fn _setjmp Ns / Ns Fn _longjmp
E 10
E 7
pairs save and restore only the register set and the stack.
E 5
D 7
.PP
I 5
.I Sigsetjmp/siglongjmp
E 7
I 7
D 10
(See 
E 10
I 10
(See
E 10
.Fn sigmask 2 . )
.Pp
The
D 10
.Pa sigsetjmp/siglongjmp
E 10
I 10
.Fn sigsetjmp Ns / Ns Fn siglongjmp
E 10
function
E 7
pairs save and restore the signal mask if the argument
D 7
.I savemask
E 7
I 7
.Fa savemask
E 7
is non-zero, otherwise only the register set and the stack are saved.
D 7
.SH ERRORS
E 7
I 7
.Sh ERRORS
E 7
E 5
If the contents of the
D 5
.B jmp_buf
E 5
I 5
D 7
.I env
E 7
I 7
.Fa env
E 7
E 5
are corrupted, or correspond to an environment that has already returned,
I 5
D 10
the 
E 10
I 10
the
E 10
E 5
D 7
.I longjmp
E 7
I 7
.Fn longjmp
E 7
D 5
calls the routine 
.IR longjmperror .
E 5
I 5
routine calls the routine
D 7
.IR longjmperror (3).
E 7
I 7
.Fn longjmperror 3 .
E 7
E 5
If
D 7
.I longjmperror
D 5
returns the program is aborted.
E 5
I 5
returns the program is aborted (see abort(2)).
E 7
I 7
.Fn longjmperror
returns the program is aborted (see
.Xr abort 2 ) .
E 7
E 5
D 10
The default version of 
E 10
I 10
The default version of
E 10
D 7
.I longjmperror
prints the message ``longjmp botch'' to standard error and returns.
E 7
I 7
.Fn longjmperror
prints the message
.Dq Li longjmp botch
to standard error and returns.
E 7
D 5
User programs wishing to exit more gracefully can write their own
E 5
I 5
User programs wishing to exit more gracefully should write their own
E 5
D 10
versions of 
E 10
I 10
versions of
E 10
D 7
.IR longjmperror .
E 4
E 2
.SH "SEE ALSO"
D 2
signal(2)
E 2
I 2
sigvec(2), sigstack(2), signal(3)
E 7
I 7
.Fn longjmperror .
.Sh SEE ALSO
.Xr sigaction 2 ,
D 11
.Xr sigstack 2 ,
E 11
I 11
.Xr sigaltstack 2 ,
E 11
.Xr signal 3
I 8
.Sh STANDARDS
The
.Fn setjmp
and
.Fn longjmp
functions conform to
.St -ansiC .
I 12
The
.Fn sigsetjmp
and
.Fn siglongjmp
functions conform to
.St -p1003.1-88 .
E 12
E 8
D 10
.\" .Sh HISTORY
.\ The
.\ .Nm
.\ function appeared in Version 7 AT&T UNIX.
E 10
E 7
D 4
.SH BUGS
.I Setjmp
does not save current notion of whether the process is
executing on the signal stack.  The result is that a
longjmp to some place on the signal stack leaves the
signal stack state incorrect.
E 4
E 2
E 1
