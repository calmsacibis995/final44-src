h12629
s 00001/00001/00063
d D 8.2 94/04/19 07:32:27 bostic 7 6
c spell
e
s 00002/00002/00062
d D 8.1 93/06/04 12:06:53 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00057/00041/00007
d D 6.5 91/04/19 14:48:40 cael 5 4
c macro and text revision (-mdoc version 3)
e
s 00001/00005/00047
d D 6.4 86/05/13 09:41:43 karels 4 3
c who can't count?  It's one syscall!
e
s 00001/00001/00051
d D 6.3 86/05/12 23:02:27 mckusick 3 2
c format
e
s 00001/00001/00051
d D 6.2 86/04/27 03:49:03 donn 2 1
c Mention the return type --  don't confuse lint.
e
s 00052/00000/00000
d D 6.1 86/01/09 19:20:12 mckusick 1 0
c 4.3BSD version
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 5
I 5
D 6
.\" Copyright (c) 1986, 1991 Regents of the University of California.
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1986, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
E 5
.\"
D 5
.\"	@(#)%W% (Berkeley) %G%
E 5
I 5
.\" %sccs.include.redist.man%
E 5
.\"
D 5
.TH UALARM 3  "%Q%"
.UC 6
.SH NAME
ualarm \- schedule signal after specified time
.SH SYNOPSIS
.nf
D 2
.B ualarm(value, interval)
E 2
I 2
.B unsigned ualarm(value, interval)
E 2
.B unsigned value;
.B unsigned interval;
.fi
.SH DESCRIPTION
.ft B
E 5
I 5
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt UALARM 3
.Os BSD 4.3
.Sh NAME
.Nm ualarm
.Nd schedule signal after specified time
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft u_int 
.Fn ualarm "u_int microseconds" "u_int interval"
.Sh DESCRIPTION
.Bf -symbolic
E 5
This is a simplified interface to setitimer(2).
D 5
.ft R
.PP
.I Ualarm
causes signal SIGALRM, see
.IR signal (3C),
to be sent to the invoking process
in a number of microseconds given by the
.I value
argument.
Unless caught or ignored, the signal terminates the process.
.PP
E 5
I 5
.Ef
.Pp
The
.Fn ualarm
function
waits a count of
.Ar microseconds
before asserting the terminating signal
.Dv SIGALRM .
System activity or time used in processing the call may cause a slight
delay.
.Pp
E 5
If the
D 5
.I interval
argument is non-zero, the SIGALRM signal will be sent
E 5
I 5
.Fa interval
argument is non-zero, the
.Dv SIGALRM
signal will be sent
E 5
to the process every
D 5
.I interval
E 5
I 5
.Fa interval
E 5
microseconds after the timer expires (e.g. after
D 5
.I value
E 5
I 5
.Fa value
E 5
microseconds have passed).
D 5
.PP
Because of scheduling delays,
resumption of execution of when the signal is
caught may be delayed an arbitrary amount.
The longest specifiable delay time (on the vax) is 2147483647 microseconds.
.PP
The return value is the amount of time previously remaining in the alarm clock.
D 3
.sh BUGS
E 3
I 3
D 4
.SH BUGS
E 3
This routine is expensive to use because it is implemented using 
.IR setitimer (2)
and does eight system calls each time it is invoked.
E 4
.SH "SEE ALSO"
getitimer(2), setitimer(2), sigpause(2), sigvec(2), signal(3C), sleep(3),
D 4
alarm(3), ualarm(3)
E 4
I 4
alarm(3), usleep(3)
E 5
I 5
.Sh RETURN VALUES
When the signal has successfully been caught,
.Fn alarm
returns the amount of time left on the clock.
D 7
The maximum mumber of
E 7
I 7
The maximum number of
E 7
.Ar microseconds
allowed
is 2147483647.
.Sh SEE ALSO
.Xr getitimer 2 ,
.Xr setitimer 2 ,
.Xr sigpause 2 ,
.Xr sigvec 2 ,
.Xr signal 3 ,
.Xr sleep 3 ,
.Xr alarm 3 ,
.Xr usleep 3
.Sh HISTORY
The
.Fn ualarm
function appeared in 
.Bx 4.3 .
E 5
E 4
E 1
