h06612
s 00002/00002/00134
d D 8.2 93/12/11 22:36:38 mckusick 8 6
c copyediting for Usenix manuals
e
s 00000/00000/00136
d R 8.2 93/12/11 22:35:48 mckusick 7 6
c copyediting for Usenix manuals
e
s 00002/00002/00134
d D 8.1 93/06/09 18:50:07 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00003/00133
d D 1.4 93/06/09 18:50:03 bostic 5 3
c fixed the under development line
e
s 00002/00002/00134
d R 8.1 93/06/04 12:06:59 bostic 4 3
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00083/00059/00053
d D 1.3 91/04/19 14:49:45 cael 3 2
c macro and text revision (-mdoc version 3)
e
s 00077/00196/00035
d D 1.2 90/06/27 15:44:01 marc 2 1
c cdecode -> unvis - new man page
e
s 00231/00000/00000
d D 1.1 90/05/15 10:55:02 marc 1 0
c date and time created 90/05/15 10:55:02 by marc
e
u
U
t
T
I 1
D 3
.\" Copyright (c) 1989 The Regents of the University of California.
E 3
I 3
D 6
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 3
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
.\"
D 2
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 2
I 2
.\" %sccs.include.redist.man%
E 2
.\"
D 3
.\"	%W% (Berkeley) %G%
E 3
I 3
.\"     %W% (Berkeley) %G%
E 3
.\"
D 2
.TH CENCODE 3 "%Q%"
E 2
I 2
D 3
.TH UNVIS 3 "%Q%"
E 2
.UC 7
.SH NAME
D 2
cencode, cdecode \- encode (decode) non-printing characters
E 2
I 2
unvis, strunvis - decode a visual representation of characters
E 2
.SH SYNOPSIS
.nf
.ft B
D 2
#include <cencode.h>
E 2
I 2
#include <vis.h>
E 2

D 2
char *cencode(character, cflag)
char character;
int flag;
E 2
I 2
int unvis(cp, c, astate, flag)
u_char *cp, c;
int *astate, flag;
E 2

D 2
cdecode(character, store, dflag)
char character, *store;
int flag;
E 2
I 2
int strunvis(dst, src)
char *dst, *src;

E 2
.ft R
.fi
.SH DESCRIPTION
D 2
.I Cencode
converts a non-printing character into a printable, invertible
representation;
.I cdecode
converts that representation back into the original character.
These functions are useful for filtering a stream of characters to
and from a visual representation.
.PP
.I Cencode
returns a pointer to a string that contains the printable
representation of the character passed as the argument
.IR character .
By default,
.I cencode
considers characters selected by
.IR isgraph (3),
space, tab, and newline to be printable characters.
.PP
There are three possible forms of representation, as specified by the
.I cflags
argument.
All forms use the backslash character (``\e'') to introduce a special
sequence; two backslashes are used to represent a real backslash.
.I Cflags
is specified by
.IR or 'ing
one or more of the following values:
E 2
I 2
.I Unvis
E 3
I 3
.Dd %Q%
.Dt UNVIS 3
.Os
.Sh NAME
.Nm unvis ,
.Nm strunvis
.Nd decode a visual representation of characters
.Sh SYNOPSIS
.Fd #include <vis.h>
.Ft int 
.Fn unvis "u_char *cp" "u_char c" "int *astate" "int flag"
.Ft int 
.Fn strunvis "char *dst" "char *src"
.Sh DESCRIPTION
The
.Fn unvis
E 3
and
D 3
.I strunvis
E 3
I 3
.Fn strunvis
functions
E 3
are used to decode a visual representation of characters, as produced
D 3
by the vis(3) function, back into
its original form.  Unvis is called with successive characters in c 
E 3
I 3
by the
.Xr vis 3
function, back into
the original form.  Unvis is called with successive characters in
.Ar c 
E 3
until a valid
sequence is recognized, at which time the decoded character is
D 3
available at the character pointed to by cp.  Strunvis decodes the
characters pointed to by src into the buffer pointed to by dst.
.LP
.I Strunvis
simply copies src to dst, decoding any escape sequences along the way,
and returns the number of characters placed into dst, or -1 if an
invalid escape sequence was detected.  The size of dst should be
equal to the size of src (that is, no expansion takes place during
E 3
I 3
available at the character pointed to by
.Ar cp .
Strunvis decodes the
characters pointed to by
.Ar src
into the buffer pointed to by
.Ar dst .
.Pp
The
.Fn strunvis
function
simply copies
.Ar src
to
.Ar dst ,
decoding any escape sequences along the way,
and returns the number of characters placed into
.Ar dst ,
or \-1 if an
invalid escape sequence was detected.  The size of
.Ar dst
should be
equal to the size of
.Ar src
(that is, no expansion takes place during
E 3
decoding).
D 3
.LP
.I Unvis
E 3
I 3
.Pp
The
.Fn unvis
function
E 3
implements a state machine that can be used to decode an arbitrary
stream of bytes.  All state associated with the bytes being decoded
is stored outside the
D 3
.I unvis
E 3
I 3
.Fn unvis
E 3
function (that is, a pointer to the state is passed in), so
calls decoding different streams can be freely intermixed.  To
start decoding a stream of bytes, first initialize an integer
D 3
to zero.  Call unvis with each successive byte, along with a pointer
E 3
I 3
to zero.  Call
.Fn unvis
with each successive byte, along with a pointer
E 3
D 8
to this integer, and a pointer to an destination character.
E 8
I 8
to this integer, and a pointer to a destination character.
E 8
D 3
.I Vis
E 3
I 3
The
.Xr unvis
function
E 3
has several return codes that must be handled properly.  They are:
D 3
.TP 
0 (zero)
E 3
I 3
.Bl -tag -width UNVIS_VALIDPUSH
.It Li \&0 (zero)
E 3
Another character is necessary; nothing has been recognized yet.
E 2
D 3
.TP
D 2
CENC_WHITE
Setting
.I CENC_WHITE
in
.I cflag
causes space, tab, and newline characters to be considered non-printable,
and therefore encoded.
E 2
I 2
UNVIS_VALID	
E 3
I 3
.It Dv  UNVIS_VALID	
E 3
A valid character has been recognized and is available at the location
pointed to by cp.
E 2
D 3
.TP
D 2
CENC_CSTYLE
Use C-style backslash sequences to represent standard non-printable
characters.
The following sequences are used to represent the indicated characters:
.sp
.nf
\ea   - BEL (007)
\eb   - BS  (010)
\ef   - NP  (014)
\en   - NL  (012)
\er   - CR  (015)
\et   - HT  (011)
\ev   - VT  (013)
\e000 - NUL (000)
.fi
.sp
These are the only characters that are converted using
.IR CENC_CSTYLE .
The more familiar abbreviation of ``\e0'' for NULL cannot be used
as it could be confused with other octal numbers if the sequence
preceded other digits.
E 2
I 2
UNVIS_VALIDPUSH
E 3
I 3
.It Dv  UNVIS_VALIDPUSH
E 3
A valid character has been recognized and is available at the location
pointed to by cp; however, the character currently passed in should
be passed in again.
E 2
D 3
.TP
D 2
CENC_GRAPH
Use an ``M'' to represent meta characters (characters with the 8th
bit set), and use carat (``^'') to represent control characters see
(\fIiscntrl\fP(3)).
The following formats are used:
.RS
E 2
I 2
UNVIS_NOCHAR
E 3
I 3
.It Dv  UNVIS_NOCHAR
E 3
A valid sequence was detected, but no character was produced.  This
return code is necessary to indicate a logical break between characters.
E 2
D 3
.TP
D 2
\e^C
Represents the control character ``C''.
Spans characters \e000 through \e037, and \e0177 (as ``\e^?'').
.TP
\eM-C
Represents character ``C'' with the 8th bit set.
Spans characters \e0240 (\e0241 if
.I CENC_WHITE
is set) through \e0376.
.TP
\eM^C
Represents control character ``C'' with the 8th bit set.
Spans characters \e0200 through \e0237, and \e0377 (as ``\eM^?'').
.sp
.RE
.RS
The only characters that cannot be displayed using
.I CDEC_GRAPH
are space and meta-space, and only when
.I CENC_WHITE
is set.
.RE
.TP
CENC_OCTAL
Use a three digit octal sequence.  The form is ``\eddd'' where
d represents an octal digit.
All non-printing characters may be displayed in this form.
E 2
I 2
UNVIS_SYNBAD
E 3
I 3
.It Dv  UNVIS_SYNBAD
E 3
D 8
An invalid esacpe sequence was detected, or the decoder is in an
E 8
I 8
An invalid escape sequence was detected, or the decoder is in an
E 8
unknown state.  The decoder is placed into the starting state.
D 3
.LP
E 3
I 3
.El
.Pp
E 3
When all bytes in the stream have been processed, call
D 3
.I unvis
E 3
I 3
.Fn unvis
E 3
one more time with flag set to
D 3
.B UNVIS_END
E 3
I 3
.Dv UNVIS_END
E 3
to extract any remaining character (the character passed in is ignored).
D 3
.LP
E 3
I 3
.Pp
E 3
The following code fragment illustrates a proper use of
D 3
.IR unvis .
E 2
.PP
D 2
If the supplied character could not be encoded (because the selected
formats were unable encode that character) it is placed in the return
string unaltered.
Note that if NULL's are not encoded, it is placed in the string as two
NULL's.
If the caller expects to encounter this situation, it suffices to always
extract one character from the returned string before checking for NULL.
If
.I CENC_OCTAL
is selected, in addition to any other formats, this situation can never
arise.
.PP
Calling
.I cencode
with no requested formats results in no encoding being done; however,
backslashes are still doubled.
.PP
.I Cdecode
is used decode data encoded by
.IR cencode .
Characters are passed to
.I cdecode
until the decoder recognizes a character to return.
.I Dflags
is specified by
.IR or 'ing
one or more of the following values:
.TP
CDEC_HAT
Treat the carat (``^'') character specially, i.e. decode the sequence
``^C'' as the control character ``C''.
This is separate from the sequence ``\e^C'' as output by
.I cencode
with the
.I CENC_GRAPH
flag set as it does not require the preceding backslash character.
.TP
CDEC_END
Reset the state of the decoder to the initial state, and flush out
any characters have been retained in the decoder.
.PP
There are five possible return values from
.IR cdecode :
.TP
CDEC_NEEDMORE
The decoder has not yet recognized a control sequence; supply it
with more characters.
.TP
CDEC_NOCHAR
A valid sequence which did not result in a character was decoded.
.TP
CDEC_OK
A character was recognized and has been placed in the location
pointed to by
.IR store .
.TP
CDEC_OKPUSH
A character was recognized and has been placed in the location
pointed to by
.IR store ;
however, the character that was just supplied to
.I cdecode
has not yet been used.
When processing a stream of characters, the current character should be
supplied to
.I cdecode
again.
.TP
CDEC_SYNBAD
An unrecognized backslash sequence was detected.
The decoder was automatically reset to a normal state.
All characters since the last un-escaped backslash character constitute
the unrecognized sequence.
The following code fragment illustrates the use of
.IR cdecode :
.PP
E 2
.nf
E 3
I 3
.Fn unvis .
.Bd -literal -offset indent
E 3
D 2
int ch;
char nc;
E 2
I 2
int state = 0;
char out;
E 2

while ((ch = getchar()) != EOF) {
again:
D 2
	switch(cdecode((char)ch, &nc, 0)) {
	case CDEC_NEEDMORE:
	case CDEC_NOCHAR:
E 2
I 2
	switch(unvis(&out, ch, &state, 0)) {
	case 0:
	case UNVIS_NOCHAR:
E 2
		break;
D 2
	case CDEC_OK:
		(void)putchar(nc);
E 2
I 2
	case UNVIS_VALID:
		(void) putchar(out);
E 2
		break;
D 2
	case CDEC_OKPUSH:
		(void)putchar(nc);
E 2
I 2
	case UNVIS_VALIDPUSH:
		(void) putchar(out);
E 2
		goto again;
D 2
	case CDEC_SYNBAD:
E 2
I 2
	case UNVIS_SYNBAD:
E 2
		(void)fprintf(stderr, "bad sequence!\n");
D 3
		exit(1);
E 3
I 3
	exit(1);
E 3
	}
}
D 2
if (cdecode((char)0, &nc, CDEC_END) == CDEC_OK)
	(void)putchar(nc);
E 2
I 2
if (unvis(&out, (char)0, &state, UNVIS_END) == UNVIS_VALID)
	(void) putchar(out);
E 2
D 3
.fi
.SH "SEE ALSO"
vis(1)
E 3
I 3
.Ed
.Sh SEE ALSO
.Xr vis 1
.Sh HISTORY
The
D 5
.Fn unvis
function is
.Ud .
E 5
I 5
.Nm unvis
function
first appeared in 4.4BSD.
E 5
E 3
E 1
