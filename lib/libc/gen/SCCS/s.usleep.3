h29158
s 00002/00002/00057
d D 8.1 93/06/04 12:07:06 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/00058
d D 6.5 93/04/20 15:21:59 hibler 5 4
c typo: "sleep" -> "usleep"
e
s 00053/00034/00006
d D 6.4 91/04/19 14:48:39 cael 4 3
c macro and text revision (-mdoc version 3)
e
s 00012/00008/00028
d D 6.3 86/05/15 13:49:16 karels 3 2
c a bit more accurate
e
s 00001/00001/00035
d D 6.2 86/05/12 23:02:24 mckusick 2 1
c format
e
s 00036/00000/00000
d D 6.1 86/01/09 19:20:11 mckusick 1 0
c 4.3BSD version
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 6
.\" Copyright (c) 1986, 1991 Regents of the University of California.
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1986, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
E 4
.\"
D 4
.\"	@(#)%W% (Berkeley) %G%
E 4
I 4
.\" %sccs.include.redist.man%
E 4
.\"
D 4
.TH USLEEP 3  "%Q%"
.UC 6
.SH NAME
usleep \- suspend execution for interval
.SH SYNOPSIS
.nf
.B usleep(useconds)
.B unsigned useconds;
.fi
.SH DESCRIPTION
The current process is suspended from execution for the number
of microseconds specified by the argument.
The actual suspension time may be an arbitrary amount longer
D 3
because of other activity in the system.
E 3
I 3
because of other activity in the system
or because of the time spent in processing the call.
E 3
.PP
The routine is implemented by setting an interval timer
and pausing until it occurs.
The previous state of this timer is saved and restored.
If the sleep time exceeds the time to the expiration of the
previous timer,
the process sleeps only until the signal would have occurred, and the
D 3
signal is sent 2 system clock ticks later.
D 2
.sh BUGS
E 2
I 2
.SH BUGS
E 2
This routine is expensive to use because it is implemented using 
.IR setitimer (2)
and does eight system calls each time it is invoked.
It should be implemented using 
.IR select (2).
E 3
I 3
signal is sent a short time later.
.PP
E 4
I 4
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt USLEEP 3
.Os BSD 4.3
.Sh NAME
.Nm usleep
.Nd suspend execution for interval of microseconds
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft void
.Fn usleep "u_int microseconds"
.Sh DESCRIPTION
The
D 5
.Fn sleep
E 5
I 5
.Fn usleep
E 5
function
suspends execution of the calling process
for
.Fa microseconds
of time.
System activity or time spent in processing the
call may lengthen the sleep slightly.
.Pp
If a timer is already running on the process its state is saved.
If the value
.Fa microseconds
is more than or equal to the remaining clock time for the saved timer,
the sleep time is set to
the remaining clock time.
The state of the previous timer
is restored after
.Fa microseconds
has passed.
.Pp
E 4
This routine is implemented using 
D 4
.IR setitimer (2);
E 4
I 4
.Xr setitimer 2 ;
E 4
it requires eight system calls each time it is invoked.
A similar but less compatible function can be obtained with a single
D 4
.IR select (2);
it would not restart after signals, but would not interfere
E 4
I 4
.Xr select 2 ;
such a function would not restart after signals, but would not interfere
E 4
with other uses of
D 4
.IR setitimer . 
E 3
.SH "SEE ALSO"
setitimer(2), getitimer(2), sigpause(2), ualarm(3), sleep(3), alarm(3)
E 4
I 4
.Xr setitimer .
.Sh SEE ALSO
.Xr setitimer 2 ,
.Xr getitimer 2 ,
.Xr sigpause 2 ,
.Xr ualarm 3 ,
.Xr sleep 3 ,
.Xr alarm 3
.Sh HISTORY
The
.Fn usleep
function appeared in 
.Bx 4.3 .
E 4
E 1
