h21194
s 00002/00002/00235
d D 8.1 93/06/09 16:53:46 elan 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00003/00235
d D 5.8 93/06/09 16:53:42 elan 9 7
c fix under development line
e
s 00002/00002/00236
d R 8.1 93/06/04 12:07:24 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00200/00110/00038
d D 5.7 91/04/19 14:49:55 cael 7 6
c macro and text revision (-mdoc version 3)
e
s 00001/00011/00147
d D 5.6 90/06/23 17:57:10 trent 6 5
c new copyright notice
e
s 00005/00005/00153
d D 5.5 90/05/29 17:08:48 marc 5 4
c Minor fixes
e
s 00103/00176/00055
d D 5.4 90/05/16 15:02:42 marc 4 3
c new version, new man page
e
s 00186/00133/00045
d D 5.3 90/05/11 18:29:04 marc 3 2
c name changes to vis 
e
s 00003/00003/00175
d D 5.2 89/10/13 16:17:38 marc 2 1
c typo
e
s 00178/00000/00000
d D 5.1 89/10/13 16:16:36 marc 1 0
c date and time created 89/10/13 16:16:36 by marc
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1989 The Regents of the University of California.
E 7
I 7
D 10
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 7
.\" All rights reserved.
E 10
I 10
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 10
.\"
D 6
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 6
I 6
.\" %sccs.include.redist.man%
E 6
.\"
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\"     %W% (Berkeley) %G%
E 7
.\"
D 3
.TH <CENCODE> <3> "%Q%"
E 3
I 3
D 4
.TH CENCODE 3 "%Q%"
E 4
I 4
D 7
.TH VIS 3 "%Q%"
E 4
E 3
.UC 7
D 3
.AT 3
E 3
.SH NAME
D 4
cencode, cdecode \- encode (decode) non-printing characters
E 4
I 4
vis \- visually encode characters
E 4
.SH SYNOPSIS
.nf
D 3
.B #include <cencode.h>
.PP
.B char *cencode(c, cflag)
.B char c;
.B int flag;
.PP
.B cdecode(c, cp, dflag)
.B char c, *cp;
.B int flag;
.SH DESCRIPTION
\fICencode\fP converts a non-printing character into a printable,
invertable representation; \fIcdecode\fP inverts
from that representation back to the original character.
Both functions pass through printable characters, and
are useful for filtering a stream of characters
to and from a visual representation.
.PP
By default, \fIcencode\fP considers isgraph(c), space, tab, and
newline as printable characters.  Setting CENC_WHITE in
cflag causes space, tab, and newline to be
encoded as well.
.PP
There are 3 forms of representation, and all
three can be requested, independent of each other, 
since some encode only a subset
of the non-printable characters.  
All
forms use the backslash character to introduce the visual
sequence; two backslashs are used to represent a
real backslash.  The following lists the name of the form
(specified in the cflag), and a description:
.TP
.I CENC_CTYPE
Use C-style backslash sequences where possible.  The following
sequences are used to represent the indicated character:
.nf
E 3
I 3
.ft B
D 4
#include <cencode.h>
E 4
I 4
#include <vis.h>
E 4
E 3

D 3
\\n - NL  (012)
\\r - CR  (015)	
\\b - BS  (010)
\\a - BEL (007)
\\v - VT  (013)
\\t - HT  (011)
\\f - NP  (014)
\\000 - NUL (000)
E 3
I 3
D 4
char *cencode(character, cflag)
char character;
E 4
I 4
char *vis(dst, c, flag, nextc)
char *dst, c, nextc;
E 4
int flag;
E 3

I 3
D 4
cdecode(character, store, dflag)
char character, *store;
E 4
I 4
int strvis(dst, src, flag)
char *dst, *src;
E 4
int flag;
I 4

int strvisx(dst, src, len, flag)
char *dst, *src;
int len, flag;

E 4
.ft R
E 3
.fi
D 3
These are the only characters that are converted using CDEC_CTYPE.
The more familiar abbreviation of \\0 for NULL cannot be used since
it could be confused as another octal number if the sequence
is laid ahead of other octal digits.
E 3
I 3
.SH DESCRIPTION
D 4
.I Cencode
converts a non-printing character into a printable, invertible
representation;
.I cdecode
converts that representation back into the original character.
These functions are useful for filtering a stream of characters to
and from a visual representation.
E 4
I 4
.I Vis
copies into dst a string which represents the character c.  If
c needs no encoding, it is copied in unaltered.  The string is
E 7
I 7
.Dd %Q%
.Dt VIS 3
.Os
.Sh NAME
.Nm vis
.Nd visually encode characters
.Sh SYNOPSIS
.Fd #include <vis.h>
.Ft char *
.Fn vis "char *dst" "char c" "int flag" "char nextc"
.Ft int 
.Fn strvis "char *dst" "char *src" "int flag"
.Ft int 
.Fn strvisx "char *dst" "char *src" "int len" "int flag"
.Sh DESCRIPTION
The
.Fn vis
function
copies into
.Fa dst
a string which represents the character
.Fa c .
If
.Fa c
needs no encoding, it is copied in unaltered.  The string is
E 7
null terminated, and a pointer to the end of the string is
D 5
returned.  The maximum length of any visual encoding is four
E 5
I 5
returned.  The maximum length of any encoding is four
E 5
D 7
characters (not including the trailing NULL); thus, when
E 7
I 7
characters (not including the trailing
.Dv NULL ) ; 
thus, when
E 7
encoding a set of characters into a buffer, the size of the buffer should
D 5
be four times the number of characters encoded (plus one for the last NULL).
E 5
I 5
D 7
be four times the number of characters encoded, plus one for the trailing NULL.
E 7
I 7
be four times the number of characters encoded, plus one for the trailing
.Dv NULL . 
E 7
E 5
The flag parameter is used for altering the default range of
characters considered for encoding and for altering the visual
representation.
D 7
The additional character, nextc, is only used when selecting the
VIS_CSTYLE encoding format (explained below).
E 4
E 3
.PP
I 3
D 4
.I Cencode
returns a pointer to a string that contains the printable
representation of the character passed as the argument
.IR character .
By default,
.I cencode
considers characters selected by
.IR isgraph (3),
space, tab, and newline to be printable characters.
E 4
I 4
Strvis and strvisx copy into dst a visual representation of
the string src.  Strvis encodes characters from src up to the
first NULL.  Strvisx encodes exactly len characters from src (this
is useful for encoding a block of data that may contain NULL's).
Both forms NULL terminate dst.  Dst must be four times the number
of characters encoded from src (plus one for the NULL).  Both
E 7
I 7
The additional character,
.Fa nextc ,
is only used when selecting the
.Dv VIS_CSTYLE
encoding format (explained below).
.Pp
The
.Fn strvis
and
.Fn strvisx
functions copy into
.Fa dst
a visual representation of
the string
.Fa src .
The
.Fn strvis
function encodes characters from
.Fa src
up to the
first
.Dv NULL . 
The
.Fn strvisx
function encodes exactly
.Fa len
characters from
.Fa src
(this
is useful for encoding a block of data that may contain
.Dv NULL Ns 's).
Both forms
.Dv NULL
terminate
.Fa dst .
The size of
.Fa dst
must be four times the number
of characters encoded from
.Fa src
(plus one for the
.Dv NULL ) . 
Both
E 7
forms return the number of characters in dst (not including
D 7
the trailing NULL).
E 4
.PP
E 7
I 7
the trailing
.Dv NULL ) . 
.Pp
E 7
D 4
There are three possible forms of representation, as specified by the
.I cflags
argument.
All forms use the backslash character (``\e'') to introduce a special
sequence; two backslashes are used to represent a real backslash.
.I Cflags
is specified by
.IR or 'ing
one or more of the following values:
E 4
I 4
The encoding is a unique, invertible representation comprised entirely of
graphic characters; it can be decoded back into the original form using 
D 7
the unvis(3) or strunvis(3) functions.
.PP
E 7
I 7
the
.Xr unvis 3
or
.Xr strunvis 3
functions.
.Pp
E 7
There are two parameters that can be controlled: the range of
characters that are encoded, and the type
of representation used.  
D 5
By default, all non-graphic characters
E 5
I 5
D 7
By default, all non-graphic characters (see isgraph(3))
E 5
except space, tab, and newline are encoded.  The following flags
E 7
I 7
By default, all non-graphic characters.
except space, tab, and newline are encoded.
(See
.Xr isgraph 3 . )
The following flags
E 7
alter this:
E 4
E 3
D 7
.TP
D 3
.I CENC_GRAPHIC
Use an M to represent meta characters (chars with the 8th bit set),
and use hat (^) to represent control characters (iscntrl(c)).  The
following forms are possible:
E 3
I 3
D 4
CENC_WHITE
Setting
.I CENC_WHITE
in
.I cflag
causes space, tab, and newline characters to be considered non-printable,
and therefore encoded.
E 4
I 4
VIS_SP
E 7
I 7
.Bl -tag -width VIS_WHITEX
.It Dv VIS_SP
E 7
Also encode space.
E 4
D 7
.TP
D 4
CENC_CSTYLE
Use C-style backslash sequences to represent standard non-printable
characters.
The following sequences are used to represent the indicated characters:
.sp
E 3
.nf
D 3

\\^C  - Represents control character 'C'.  Spans 
	  characters 000 through 037, and 0177 (as \\^?).
\\M-C - Represents character 'C' with the 8th bit set.  
	  Spans characters 0240 (241 if CENC_WHITE is set)
	  through 0376.
\\M^C - Represents control character 'C' with the 8th 
	  bit set.  Spans characters 0200 through 0237, 
	  and 0377 (as \\M^?).

E 3
I 3
\ea   - BEL (007)
\eb   - BS  (010)
\ef   - NP  (014)
\en   - NL  (012)
\er   - CR  (015)
\et   - HT  (011)
\ev   - VT  (013)
\e000 - NUL (000)
E 3
.fi
D 3
The only characters that cannot be displayed using CDEC_GRAPHIC
are space and meta-space, and only when CENC_WHITE is set.
E 3
I 3
.sp
These are the only characters that are converted using
.IR CENC_CSTYLE .
The more familiar abbreviation of ``\e0'' for NULL cannot be used
as it could be confused with other octal numbers if the sequence
preceded other digits.
E 4
I 4
VIS_TAB		
E 7
I 7
.It Dv VIS_TAB		
E 7
Also encode tab.
E 4
E 3
D 7
.TP
I 3
D 4
CENC_GRAPH
E 4
I 4
VIS_NL
E 7
I 7
.It Dv VIS_NL
E 7
Also encode newline.
D 7
.TP
VIS_WHITE	
Synonym for VIS_SP | VIS_TAB | VIS_NL.
.TP
VIS_SAFE	
E 7
I 7
.It Dv VIS_WHITE	
Synonym for
.Dv VIS_SP
\&|
.Dv VIS_TAB
\&|
.Dv VIS_NL .
.It Dv VIS_SAFE	
E 7
Only encode "unsafe" characters.  Unsafe means control
characters which may cause common terminals to perform
unexpected functions.  Currently this form allows space,
tab, newline, backspace, bell, and return - in addition
to all graphic characters - unencoded. 
D 7
.PP
E 7
I 7
.El
.Pp
E 7
D 5
There are three forms of representation.
E 5
I 5
There are three forms of encoding.
E 5
D 7
All forms use the backslash character (``\e'') to introduce a special
E 7
I 7
All forms use the backslash character
.Ql \e
to introduce a special
E 7
sequence; two backslashes are used to represent a real backslash.
These are the visual formats:
D 7
.TP
(default)
E 4
Use an ``M'' to represent meta characters (characters with the 8th
bit set), and use carat (``^'') to represent control characters see
(\fIiscntrl\fP(3)).
E 7
I 7
.Bl -tag -width VIS_CSTYLE
.It (default)
Use an
.Ql M
to represent meta characters (characters with the 8th
bit set), and use carat
.Ql ^
to represent control characters see
.Pf ( Xr iscntrl 3 ) .
E 7
The following formats are used:
D 7
.RS
.TP
\e^C
Represents the control character ``C''.
D 4
Spans characters \e000 through \e037, and \e0177 (as ``\e^?'').
E 4
I 4
Spans characters \e000 through \e037, and \e177 (as \e^?).
E 4
.TP
\eM-C
Represents character ``C'' with the 8th bit set.
D 4
Spans characters \e0240 (\e0241 if
.I CENC_WHITE
is set) through \e0376.
E 4
I 4
Spans characters \e241 through \e376.
E 4
.TP
\eM^C
Represents control character ``C'' with the 8th bit set.
D 4
Spans characters \e0200 through \e0237, and \e0377 (as ``\eM^?'').
E 4
I 4
Spans characters \e200 through \e237, and \e377 (as \eM^?).
.TP
\e040
Represents ACSII space.
.TP
\e240
E 7
I 7
.Bl -tag -width xxxxx
.It Dv \e^C
Represents the control character
.Ql C .
Spans characters
.Ql \e000
through
.Ql \e037 ,
and
.Ql \e177
(as
.Ql \e^? ) .
.It Dv \eM-C
Represents character
.Ql C
with the 8th bit set.
Spans characters
.Ql \e241
through
.Ql \e376 .
.It Dv \eM^C
Represents control character
.Ql C
with the 8th bit set.
Spans characters
.Ql \e200
through
.Ql \e237 ,
and
.Ql \e377
(as
.Ql \eM^? ) .
.It Dv \e040
Represents
.Tn ASCII
space.
.It Dv \e240
E 7
Represents Meta-space.
E 4
D 7
.sp
.RE
D 4
.RS
The only characters that cannot be displayed using
.I CDEC_GRAPH
are space and meta-space, and only when
.I CENC_WHITE
is set.
.RE
E 4
.TP
D 4
CENC_OCTAL
E 4
I 4
D 5
CENC_CSTYLE
E 5
I 5
VIS_CSTYLE
E 7
I 7
.El
.Pp
.It Dv VIS_CSTYLE
E 7
E 5
Use C-style backslash sequences to represent standard non-printable
characters.
The following sequences are used to represent the indicated characters:
D 7
.sp
.nf
\ea   - BEL (007)
\eb   - BS  (010)
\ef   - NP  (014)
\en   - NL  (012)
\er   - CR  (015)
\et   - HT  (011)
\ev   - VT  (013)
\e0   - NUL (000)
.fi
.sp
E 7
I 7
.Bd -unfilled -offset indent
.Li \ea Tn  - BEL No (007)
.Li \eb Tn  - BS No (010)
.Li \ef Tn  - NP No (014)
.Li \en Tn  - NL No (012)
.Li \er Tn  - CR No (015)
.Li \et Tn  - HT No (011)
.Li \ev Tn  - VT No (013)
.Li \e0 Tn  - NUL No (000)
.Ed
.Pp
E 7
When using this format, the nextc parameter is looked at to determine
D 7
if a NULL character can be encoded as ``\e0'' instead of ``\e000''.
If nextc is an octal digit, the latter representation is used to
E 7
I 7
if a
.Dv NULL
character can be encoded as
.Ql \e0
instead of
.Ql \e000 .
If
.Fa nextc
is an octal digit, the latter representation is used to
E 7
avoid ambiguity.
D 7
.TP
VIS_OCTAL
E 4
Use a three digit octal sequence.  The form is ``\eddd'' where
d represents an octal digit.
D 4
All non-printing characters may be displayed in this form.
E 4
.PP
D 4
If the supplied character could not be encoded (because the selected
formats were unable encode that character) it is placed in the return
string unaltered.
Note that if NULL's are not encoded, it is placed in the string as two
NULL's.
If the caller expects to encounter this situation, it suffices to always
extract one character from the returned string before checking for NULL.
If
E 3
.I CENC_OCTAL
D 3
Use a three digit octal sequence.  The form is:
.nf

\\ddd

.fi
where d represents an octal digit.  All non-printing characters
can be displayed in this form.
E 3
I 3
is selected, in addition to any other formats, this situation can never
arise.
E 3
.PP
D 3
\fICencode\fP returns a pointer to a string that contains the
printable representation of the character passed in c.  If the character
could not be encoded (because none of the selected formats can
encode that character), it is placed in the returned
string un-encoded.  Note that if NULL is not encoded, it is placed
in the string as two nulls.  If the caller expects to encounter
this situation, it suffices to always extract one character from
the returned string before checking for NULL.  If CDEC_OCTAL
is selected, in addition to any other formats, this situation
can never arrise.  Also, calling \fIcencode\fP with no requested formats
results in no encoding being done; however, backslashes are
still doubled.
E 3
I 3
Calling
.I cencode
with no requested formats results in no encoding being done; however,
backslashes are still doubled.
E 3
.PP
D 3
Using \fIcdecode\fP to decode previously encoded data is a little
trickier.  Essentially, characters are passed to \fIcdecode\fP
until the decoder recognizes a character to return.  There are
five return codes which need to be handled:
E 3
I 3
.I Cdecode
is used decode data encoded by
.IR cencode .
Characters are passed to
.I cdecode
until the decoder recognizes a character to return.
.I Dflags
is specified by
.IR or 'ing
one or more of the following values:
E 3
.TP
D 3
.I CDEC_NEEDMORE
The decoder is not done recognizing a control sequence; pass it
another character in c.
E 3
I 3
CDEC_HAT
Treat the carat (``^'') character specially, i.e. decode the sequence
``^C'' as the control character ``C''.
This is separate from the sequence ``\e^C'' as output by
.I cencode
with the
.I CENC_GRAPH
flag set as it does not require the preceding backslash character.
E 3
.TP
D 3
.I CDEC_OK
D 2
A character was recognized and has been placed in *c.
E 2
I 2
A character was recognized and has been placed in *cp.
E 3
I 3
CDEC_END
Reset the state of the decoder to the initial state, and flush out
any characters have been retained in the decoder.
.PP
There are five possible return values from
.IR cdecode :
E 3
E 2
.TP
D 3
.I CDEC_OKPUSH
D 2
A character was recognized and has been placed in *c; however,
the character which was just passed in c is not yet needed.
E 2
I 2
A character was recognized and has been placed in *cp; however,
the character that was just passed in c is not yet needed.
E 2
When processing a stream of characters, the current character
should be used again.
E 3
I 3
CDEC_NEEDMORE
The decoder has not yet recognized a control sequence; supply it
with more characters.
E 3
.TP
D 3
.I CDEC_NOCHAR
A sequence which represents no character was detected.
E 3
I 3
CDEC_NOCHAR
A valid sequence which did not result in a character was decoded.
E 3
.TP
D 3
.I CDEC_SYNBAD
An unrecognized backslash sequence was detected.  The decoder
was automatically reset to a normal state.  All characters since
the last un-escaped backslash character constitute the 
unrecognized sequence.
E 3
I 3
CDEC_OK
A character was recognized and has been placed in the location
pointed to by
.IR store .
.TP
CDEC_OKPUSH
A character was recognized and has been placed in the location
pointed to by
.IR store ;
however, the character that was just supplied to
.I cdecode
has not yet been used.
When processing a stream of characters, the current character should be
supplied to
.I cdecode
again.
.TP
CDEC_SYNBAD
An unrecognized backslash sequence was detected.
The decoder was automatically reset to a normal state.
All characters since the last un-escaped backslash character constitute
the unrecognized sequence.
The following code fragment illustrates the use of
.IR cdecode :
E 3
.PP
D 3
When the caller is finished feeding characters to \fIcdecode\fP,
it
should be called one last time with dflag set to CDEC_END.  This will extract
any remaining character.
A sample code fragment
is given to illustrate using cdecode:
E 3
.nf
I 3
int ch;
char nc;
E 3

D 3
	char nc;
	while ((c = getchar()) != EOF) {
		again:
		switch(cdecode((char)c, &nc, 0)) {
		case CDEC_NEEDMORE:
		case CDEC_NOCHAR:
			break;
		case CDEC_OK:
			putchar(nc);
			break;
		case CDEC_OKPUSH:
			putchar(nc);
			goto again;
		case CDEC_SYNBAD:
			fprintf(stderr, "Bad sequence\n");
			exit(1);
		}
E 3
I 3
while ((ch = getchar()) != EOF) {
again:
	switch(cdecode((char)ch, &nc, 0)) {
	case CDEC_NEEDMORE:
	case CDEC_NOCHAR:
		break;
	case CDEC_OK:
		(void)putchar(nc);
		break;
	case CDEC_OKPUSH:
		(void)putchar(nc);
		goto again;
	case CDEC_SYNBAD:
		(void)fprintf(stderr, "bad sequence!\n");
		exit(1);
E 3
	}
D 3
	if (cdecode((char)0, &nc, CDEC_END) == CDEC_OK)
		putchar(nc);

E 3
I 3
}
if (cdecode((char)0, &nc, CDEC_END) == CDEC_OK)
	(void)putchar(nc);
E 3
.fi
E 4
I 4
There is one additional flag, VIS_NOSLASH, which inhibits the
E 7
I 7
.It Dv VIS_OCTAL
Use a three digit octal sequence.  The form is
.Ql \eddd
where
.Em d
represents an octal digit.
.El
.Pp
There is one additional flag,
.Dv VIS_NOSLASH ,
which inhibits the
E 7
doubling of backslashes and the backslash before the default
D 7
format (that is, control characters are represented by ^C and
meta characters as M-C).  With this flag set, the encoding is
E 7
I 7
format (that is, control characters are represented by
.Ql ^C
and
meta characters as
.Ql M-C ) .
With this flag set, the encoding is
E 7
ambiguous and non-invertible.
E 4
D 7
.SH "SEE ALSO"
D 4
vis(1)
E 4
I 4
vis(1), unvis(1), unvis(3)
E 7
I 7
.Sh SEE ALSO
.Xr unvis 1 ,
.Xr unvis 3
.Xr strunvis 3
.Sh HISTORY
D 9
These
functions are
.Ud .
E 9
I 9
These functions first appeared in 4.4BSD.

E 9
E 7
E 4
E 1
