h57781
s 00002/00002/00073
d D 8.1 93/06/04 12:11:07 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00012/00025/00063
d D 6.5 93/06/03 16:42:12 mckusick 7 6
c detox and bring up to date
e
s 00051/00047/00037
d D 6.4 92/07/15 10:33:35 cael 6 5
c version three mdoc - this looks still toxic
e
s 00043/00102/00041
d D 6.3 91/05/22 10:59:03 mckusick 5 4
c update to eliminate references to prof(1)
e
s 00003/00002/00140
d D 6.2 91/05/04 15:48:17 cael 4 3
c proprietary copyright
e
s 00001/00001/00141
d D 6.1 85/05/15 15:36:26 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00093/00043/00049
d D 5.1 85/05/15 15:36:06 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00092/00000/00000
d D 4.1 85/05/15 15:35:49 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1980 Regents of the University of California.
E 5
I 5
D 6
.\" Copyright (c) 1980, 1991 Regents of the University of California.
E 6
I 6
D 8
.\" Copyright (c) 1980, 1991, 1992 Regents of the University of California.
E 6
E 5
D 4
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1980, 1991, 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
.\"
D 6
.\"	%sccs.include.proprietary.roff%
E 6
I 6
D 7
.\" %sccs.include.proprietary.roff%
E 7
I 7
.\" %sccs.include.redist.roff%
E 7
E 6
E 4
.\"
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH MONITOR 3 
E 2
I 2
D 3
.TH MONITOR 3  "19 January 1983"
E 3
I 3
D 5
.TH MONITOR 3  "%Q%"
E 5
I 5
D 6
.TH MONCONTROL 3  "%Q%"
E 5
E 3
E 2
.UC 4
.SH NAME
D 2
monitor \- prepare execution profile
E 2
I 2
D 5
monitor, monstartup, moncontrol \- prepare execution profile
E 5
I 5
moncontrol, monstartup \- prepare execution profile
E 5
E 2
.SH SYNOPSIS
.nf
D 5
.B monitor(lowpc, highpc, buffer, bufsize, nfunc)
.B int (*lowpc)(), (*highpc)();
.B short buffer[];
E 5
I 5
.B moncontrol(mode)
.B int mode;
E 5
I 2
.sp
.B monstartup(lowpc, highpc)
.B int (*lowpc)(), (*highpc)();
D 5
.sp
.B moncontrol(mode)
E 5
E 2
.fi
.SH DESCRIPTION
D 2
An executable program created by
`cc \-p' automatically includes calls for
.I monitor
E 2
I 2
D 5
There are two different forms of monitoring available:
E 5
I 5
.PP
E 6
I 6
.Dd %Q%
.Dt MONCONTROL 3
.Os BSD 4
.Sh NAME
.Nm moncontrol ,
.Nm monstartup
D 7
.Nd prepare execution profile
E 7
I 7
.Nd control execution profile
E 7
.Sh SYNOPSIS
.Fn moncontrol "int mode"
D 7
.Fn monstartup lowpc highpc
.Fn int *lowpc
E 7
I 7
.Fn monstartup "u_long *lowpc" "u_long *highpc"
E 7
.Sh DESCRIPTION
E 6
E 5
D 7
An executable program created by:
D 5
.IP  "	cc \-p . . ."
.LP
automatically includes calls for the 
.IR prof (1)
monitor and includes an initial call to its start-up routine
.I monstartup
E 2
with default parameters;
.I monitor
D 2
needn't be called explicitly
except to gain fine control over profiling.
E 2
I 2
need not be called explicitly except to gain fine control over profil 
buffer allocation.
An executable program created by:
E 5
D 6
.IP  "	cc \-pg . . ."
.LP
E 6
I 6
.Pp
.Dl cc \-pg ...
.Pp
E 7
I 7
An executable program compiled using the
.Fl pg
option to
.Xr cc 1
E 7
E 6
D 5
automatically includes calls for the
E 5
I 5
automatically includes calls to collect statistics for the
E 5
D 6
.IR gprof (1)
E 6
I 6
.Xr gprof 1
E 6
D 5
monitor.
E 2
.PP
D 2
.I Monitor
is an interface to
E 2
I 2
.I Monstartup
is a high level interface to
E 2
.IR profil (2).
.I Lowpc
and
.I highpc
D 2
are the addresses of two functions;
.I buffer
is the address of a (user supplied)
array of
.I bufsize
short integers.
.I Monitor
arranges to record a histogram of
periodically sampled values of the program counter,
and of counts of calls
of certain functions, in the buffer.
The lowest address sampled
E 2
I 2
specify the address range that is to be sampled; the lowest address sampled
E 2
is that of
.I lowpc
D 2
and the highest is
just below
E 2
I 2
and the highest is just below
E 2
.IR highpc .
D 2
At most
.I nfunc
call counts can be kept; only calls of functions
compiled with the profiling option
E 2
I 2
.I Monstartup
allocates space using 
.IR sbrk (2)
and passes it to
.I monitor
(see below) to record a histogram of periodically sampled values of
the program counter, and of counts of calls of certain functions, in the buffer.
Only calls of functions compiled with the profiling option
E 2
.B \-p
of
.IR cc (1)
are recorded.
D 2
For the results to be significant,
especially where there are small, heavily
used routines,
it is suggested that the buffer be no more
than a few times smaller than the range
of locations sampled.
E 2
.PP
D 2
To profile the entire program,
it is sufficient to use
E 2
I 2
To profile the entire program, it is sufficient to use
E 2
.PP
.nf
	extern etext();
	. . .
D 2
	monitor((int) 2, etext, buf, bufsize, nfunc);
E 2
I 2
	monstartup((int) 2, etext);
E 2
.fi
.PP
.I Etext
D 2
lies just above all the
program text, see
E 2
I 2
lies just above all the program text, see
E 2
.IR end (3).
.PP
D 2
To stop execution monitoring and write the results
on the file
E 2
I 2
To stop execution monitoring and write the results on the file
E 2
.I mon.out,
use
.PP
	monitor(0);
.LP
E 5
I 5
call-graph execution profiler.
In typical operation, profiling begins at program startup
and ends when the program calls exit.
When the program exits, the profiling data are written to the file
D 6
.IR gmon.out ,
E 6
I 6
.Em gmon.out ,
E 6
E 5
then
D 5
.IR prof (1)
E 5
I 5
D 6
.IR gprof (1)
E 6
I 6
.Xr gprof 1
E 6
E 5
D 2
can be used
to examine the results.
E 2
I 2
can be used to examine the results.
D 6
.PP
.I Moncontrol
E 6
I 6
.Pp
.Fn moncontrol
E 6
D 5
is used to selectively control profiling within a program.
This works with either 
.IR prof (1)
or
.IR gprof (1)
type profiling.
E 5
I 5
selectively controls profiling within a program.
E 5
When the program starts, profiling begins.
To stop the collection of histogram ticks and call counts use
D 6
.IR moncontrol (0);
E 6
I 6
.Fn moncontrol 0 ;
E 6
to resume the collection of histogram ticks and call counts use
D 6
.IR moncontrol (1).
E 6
I 6
.Fn moncontrol 1 .
E 6
D 7
This allows the cost of particular operations to be measured.
E 7
I 7
This feature allows the cost of particular operations to be measured.
E 7
D 5
Note that an output file will be produced upon program exit
irregardless of the state of 
E 5
I 5
Note that an output file will be produced on program exit
regardless of the state of 
E 5
D 6
.I moncontrol.
.PP
E 6
I 6
.Fn moncontrol .
.Pp
E 6
D 5
.I Monitor
is a low level interface to
.IR profil (2).
E 5
I 5
Programs that are not loaded with
D 6
.IP  "	cc \-pg . . ."
.LP
E 6
I 6
D 7
.Pp
.Dl cc \-pg ...
.Pp
E 7
I 7
.Fl pg
E 7
E 6
may selectively collect profiling statistics by calling
D 6
.I monstartup
E 6
I 6
.Fn monstartup
E 6
with the range of addresses to be profiled.
E 5
D 6
.I Lowpc
E 6
I 6
.Fa lowpc
E 6
and
D 6
.I highpc
E 6
I 6
.Fa highpc
E 6
D 5
are the addresses of two functions;
.I buffer
is the address of a (user supplied) array of
.I bufsize
short integers.  At most
.I nfunc
call counts can be kept.
For the results to be significant, especially where there are small, heavily
used routines, it is suggested that the buffer be no more
than a few times smaller than the range of locations sampled.
.I Monitor
divides the buffer into space to record the histogram
of program counter samples over the range
E 5
I 5
specify the address range that is to be sampled;
the lowest address sampled is that of
E 5
D 6
.I lowpc
E 6
I 6
.Fa lowpc
E 6
D 5
to
.IR highpc ,
and space to record call counts of functions compiled with the 
E 5
I 5
and the highest is just below
D 6
.IR highpc .
E 6
I 6
.Fa highpc .
E 6
Only functions in that range that have been compiled with the 
E 5
D 6
.B \-p
E 6
I 6
D 7
.Fl p
E 7
I 7
.Fl pg
E 7
E 6
option to
D 5
.IR cc (1).
E 5
I 5
D 6
.IR cc (1)
E 6
I 6
D 7
.Em cc 1
E 7
I 7
.Xr cc 1
E 7
E 6
will appear in the call graph part of the output;
however, all functions in that address range will
have their execution time measured.
Profiling begins on return from
D 6
.IR monstartup .
E 5
.PP
E 6
I 6
.Fn monstartup .
D 7
.Pp
E 6
D 5
To profile the entire program, it is sufficient to use
E 5
I 5
To stop execution monitoring and write the results on the file
D 6
.I gmon.out,
E 6
I 6
.Em gmon.out ,
E 6
use
E 5
D 6
.PP
D 5
.nf
	extern etext();
	. . .
	monitor((int) 2, etext, buf, bufsize, nfunc);
.fi
E 5
I 5
	_mcleanup();
.LP
E 6
I 6
.Pp
.Fn _mcleanup
.Pp
E 6
then
D 6
.IR gprof (1)
E 6
I 6
.Xr gprof 1
E 6
can be used to examine the results.
E 7
E 5
E 2
D 6
.SH FILES
D 5
mon.out
E 5
I 5
gmon.out
E 5
.SH "SEE ALSO"
D 2
prof(1), profil(2), cc(1)
E 2
I 2
D 5
cc(1), prof(1), gprof(1), profil(2), sbrk(2)
E 5
I 5
cc(1), gprof(1), profil(2)
E 6
I 6
.Sh FILES
.Bl -tag -width Pa -compact
D 7
.It Pa gmon.out
E 7
I 7
.It Pa gmon.out	execution data file
E 7
.El
.Sh SEE ALSO
.Xr cc 1 ,
.Xr gprof 1 ,
.Xr profil 2
E 6
E 5
E 2
E 1
