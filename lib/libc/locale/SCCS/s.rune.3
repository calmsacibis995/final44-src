h41951
s 00002/00002/00241
d D 8.2 93/12/11 22:37:56 mckusick 6 5
c copyediting for Usenix manuals
e
s 00002/00002/00241
d D 8.1 93/06/27 18:10:20 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00052/00000/00191
d D 5.3 93/06/27 18:10:14 bostic 4 2
c add documentation for fgetrune, fputrune, and fungetrune
c from Paul Borman
e
s 00002/00002/00189
d R 8.1 93/06/04 12:44:34 bostic 3 2
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00003/00188
d D 5.2 93/06/02 20:19:21 bostic 2 1
c Ummm, that's a bit much... ;-}
e
s 00191/00000/00000
d D 5.1 93/06/02 20:13:58 bostic 1 0
c date and time created 93/06/02 20:13:58 by bostic
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1993 The Regents of the University of California.
.\" All rights reserved.
E 5
I 5
.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
E 5
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Paul Borman at Krystal Technologies.
.\"
.\" %sccs.include.redist.roff%
.\"
.\"	%W% (Berkeley) %G%
.\"
.Dd "%Q%"
.Dt RUNE 3
.Os
.Sh NAME
.Nm setrunelocale ,
.Nm setinvalidrune ,
.Nm sgetrune ,
.Nm sputrune
.Nd rune support for C
.Sh SYNOPSIS
.Fd #include <rune.h>
.Fd #include <errno.h>
.Ft int
.Fn setrunelocale "char *locale"
.Ft void
.Fn setinvalidrune "rune_t rune"
.Ft rune_t
.Fn sgetrune "const char *string" "size_t n" "char const **result"
.Ft int
.Fn sputrune "rune_t rune" "char *string" "size_t n" "char **result"
I 4
.sp
.Fd #include <stdio.h>
.Ft long
.Fn fgetrune "FILE *stream"
.Ft int
.Fn fungetrune "rune_t rune" "FILE *stream"
.Ft int
.Fn fputrune "rune_t rune" "FILE *stream"
E 4
.Sh DESCRIPTION
The
.Fn setrunelocale
controls the type of encoding used to represent runes as multibyte strings
as well as the properties of the runes as defined in
\fB<ctype.h>\fP.
The
.Fa locale
D 6
argument indicates the locale which to load.
E 6
I 6
argument indicates which locale to load.
E 6
If the locale is successfully loaded,
.Dv 0
is returned, otherwise an errno value is returned to indicate the
type of error.
.Pp
The
.Fn setinvalidrune
function sets the value of the global value
.Ev _INVALID_RUNE
to be
.Fa rune.
.Pp
The
.Fn sgetrune
function tries to read a single multibyte character from
.Fa string ,
which is at most
.Fa n
bytes long.
If
.Fn sgetrune
is successful, the rune is returned.
If
.Fa result
is not
.Dv NULL ,
.Fa *result
will point to the first byte which was not converted in
.Fa string.
If the first
.Fa n
bytes of
.Fa string
do not describe a full multibyte character,
.Ev _INVALID_RUNE
is returned and
.Fa *result
will point to
.Fa string.
If there is an encoding error at the start of
.Fa string ,
.Ev _INVALID_RUNE
is returned and 
.Fa *result
will point to the second character of
.Fa string.
.Pp
the
.Fn sputrune
function tries to encode
.Fa rune
as a multibyte string and store it at
.Fa string ,
but no more than
.Fa n
bytes will be stored.
If
.Fa result
is not
.Dv NULL ,
.Fa *result
will be set to point to the first byte in string following the new
multibyte character.
If
.Fa string
is
.Dv NULL ,
.Fa *result
will point to
.Dv "(char *)0 +"
.Fa x ,
where
.Fa x
is the number of bytes that would be needed to store the multibyte value.
If the multibyte character would consist of more than
.Fa n
bytes and
.Fa result
is not
.Dv NULL ,
.Fa *result
will be set to
.Dv NULL.
In all cases, 
.Fn sputrune
will return the number of bytes which would be needed to store
.Fa rune
as a multibyte character.
I 4
.Pp
The
.Fn fgetrune
function operates the same as
.Fn sgetrune
with the exception that it attempts to read enough bytes from 
.Fa stream
to decode a single rune.  It returns either
.Ev EOF
on end of file,
.Ev _INVALID_RUNE
on an encoding error, or the rune decoded if all went well.
.Pp
The
.Fn fungetrune
D 6
function function pushes the multibyte encoding, as provided by
E 6
I 6
function pushes the multibyte encoding, as provided by
E 6
.Fn sputrune ,
of
.Fa rune
onto
.Fa stream 
such that the next
.Fn fgetrune
call will return
.Fa rune .
It returns
.Ev EOF
if it fails and
.Dv 0
on success.
.Pp
The
.Fn fputrune
function writes the multibyte encoding of
.Fa rune ,
as provided by
.Fn sputrune ,
onto
.Fa stream .
It returns
.Ev EOF
on failure and
.Dv 0
on success.
E 4
.Sh RETURN VALUES
The
.Fn setrunelocale
function returns one of the following values:
.Bl -tag -width WWWWWWWW
.It Dv 0
.Fa setrunelocale was successful.
.It Ev EFAULT
.Fa locale
was
.Dv NULL .
.It Ev ENOENT
The locale could not be found.
.It Ev EFTYPE
The file found was not a valid file.
.It Ev EINVAL
The encoding indicated by the locale was unknown.
.El
.Pp
The
.Fn sgetrune
function either returns the rune read or
.Ev _INVALID_RUNE .
The
.Fn sputrune
function returns the number of bytes needed to store
.Fa rune
as a multibyte string.
.Sh FILES
.Bl -tag -width /usr/share/locale/locale/LC_CTYPE -compact
.It Pa $PATH_LOCALE/\fIlocale\fP/LC_CTYPE
.It Pa /usr/share/locale/\fIlocale\fP/LC_CTYPE
binary LC_CTYPE file for the locale \fIlocale\fP.
.El
.Sh "SEE ALSO
.Xr euc 4 ,
.Xr mbrune 3 ,
.Xr setlocale 3 ,
.Xr utf2 4
.Sh NOTE
The ANSI C type
.Ev wchar_t
is the same as
.Ev rune_t .
.Ev Rune_t
was chosen to accent the purposeful choice of not basing the
system with the ANSI C
primitives, which were, shall we say, less aesthetic.
.Sh HISTORY
These functions first appeared in
.Bx 4.4 .
.Pp
The
.Fn setrunelocale
function and the other non-ANSI rune functions were inspired by
.Nm Plan 9 from Bell Labs
as a much more sane alternative to the ANSI multibyte and
wide character support.
D 2
They were conceived at the San Diego 1993 Summer USENIX conference by
Paul Borman of Krystal Technologies, Keith Bostic of CSRG and Andrew Hume
of Bell Labs.
E 2
I 2
.\"They were conceived at the San Diego 1993 Summer USENIX conference by
.\"Paul Borman of Krystal Technologies, Keith Bostic of CSRG and Andrew Hume
.\"of Bell Labs.
E 2
.Pp
All of the ANSI multibyte and wide character
support functions are built using the rune functions.
E 1
