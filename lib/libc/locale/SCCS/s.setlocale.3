h22486
s 00002/00002/00293
d D 8.1 93/06/09 19:01:19 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00002/00294
d D 5.3 93/06/09 19:01:16 bostic 4 2
c fixed the under development line
e
s 00002/00002/00294
d R 8.1 93/06/04 12:44:37 bostic 3 2
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00037/00008/00259
d D 5.2 93/06/02 20:15:29 bostic 2 1
c update from Paul Borman at Krystal
e
s 00267/00000/00000
d D 5.1 93/03/02 17:45:57 bostic 1 0
c date and time created 93/03/02 17:45:57 by bostic
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1993 The Regents of the University of California.
.\" All rights reserved.
E 5
I 5
.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
E 5
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Donn Seeley at BSDI.
.\"
.\" %sccs.include.redist.roff%
.\"
.\"	%W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt SETLOCALE 3
.Os
.Sh NAME
.Nm setlocale ,
.Nm localeconv
.Nd natural language formatting for C
.Sh SYNOPSIS
.Fd #include <locale.h>
.Ft char *
.Fn setlocale "int category" "const char *locale"
.Ft struct lconv *
.Fn localeconv "void"
.Sh DESCRIPTION
The
.Fn setlocale
function sets the C library's notion
of natural language formatting style
for particular sets of routines.
Each such style is called a
.Sq locale
and is invoked using an appropriate name passed as a C string.
The
.Fn localeconv
routine returns the current locale's parameters
for formatting numbers.
.Pp
The
.Fn setlocale
function recognizes several categories of routines.
These are the categories and the sets of routines they select:
.Pp
.Bl -tag -width LC_MONETARY
.It Dv LC_ALL
Set the entire locale generically.
.It Dv LC_COLLATE
Set a locale for string collation routines.
This controls alphabetic ordering in
.Fn strcoll
and
.Fn strxfrm .
.It Dv LC_CTYPE
Set a locale for the
D 2
.Xr ctype 3
and
E 2
I 2
.Xr ctype 3 ,
.Xr mbrune 3 ,
E 2
.Xr multibyte 3
I 2
and
.Xr rune 3
E 2
functions.
This controls recognition of upper and lower case,
alphabetic or non-alphabetic characters,
D 2
and so on.
E 2
I 2
and so on.  The real work is done by the
.Fn setrunelocale
function.
E 2
.It Dv LC_MONETARY
Set a locale for formatting monetary values;
this affects the
.Fn localeconv
function.
.It Dv LC_NUMERIC
Set a locale for formatting numbers.
This controls the formatting of decimal points
in input and output of floating point numbers
in functions such as
.Fn printf
and
.Fn scanf ,
as well as values returned by
.Fn localeconv .
.It Dv LC_TIME
Set a locale for formatting dates and times using the
.Fn strftime
function.
.El
.Pp
D 2
Only two locales are defined by default,
E 2
I 2
Only three locales are defined by default,
E 2
the empty string
.Li "\&""\|""
which denotes the native environment, and the
.Li "\&""C""
D 2
locale, which denotes the C language environment.
E 2
I 2
and
.LI "\&""POSIX""
locales, which denote the C language environment.
E 2
A
.Fa locale
argument of
.Dv NULL
causes
.Fn setlocale
to return the current locale.
By default, C programs start in the
.Li "\&""C""
locale.
The only function in the library that sets the locale is
.Fn setlocale ;
the locale is never changed as a side effect of some other routine.
.Pp
The
.Fn localeconv
function returns a pointer to a structure
which provides parameters for formatting numbers,
especially currency values:
.Bd -literal -offset indent
struct lconv {
	char	*decimal_point;
	char	*thousands_sep;
	char	*grouping;
	char	*int_curr_symbol;
	char	*currency_symbol;
	char	*mon_decimal_point;
	char	*mon_thousands_sep;
	char	*mon_grouping;
	char	*positive_sign;
	char	*negative_sign;
	char	int_frac_digits;
	char	frac_digits;
	char	p_cs_precedes;
	char	p_sep_by_space;
	char	n_cs_precedes;
	char	n_sep_by_space;
	char	p_sign_posn;
	char	n_sign_posn;
};
.Ed
.Pp
The individual fields have the following meanings:
.Pp
.Bl -tag -width mon_decimal_point
.It Fa decimal_point
The decimal point character, except for currency values.
.It Fa thousands_sep
The separator between groups of digits
before the decimal point, except for currency values.
.It Fa grouping
The sizes of the groups of digits, except for currency values.
This is a pointer to a vector of integers, each of size
.Va char ,
representing group size from low order digit groups
to high order (right to left).
The list may be terminated with 0 or
.Dv CHAR_MAX .
If the list is terminated with 0,
the last group size before the 0 is repeated to account for all the digits.
If the list is terminated with
.Dv CHAR_MAX ,
no more grouping is performed.
.It Fa int_curr_symbol
The standardized international currency symbol.
.It Fa currency_symbol
The local currency symbol.
.It Fa mon_decimal_point
The decimal point character for currency values.
.It Fa mon_thousands_sep
The separator for digit groups in currency values.
.It Fa mon_grouping
Like
.Fa grouping
but for currency values.
.It Fa positive_sign
The character used to denote nonnegative currency values,
usually the empty string.
.It Fa negative_sign
The character used to denote negative currency values,
usually a minus sign.
.It Fa int_frac_digits
The number of digits after the decimal point
in an international-style currency value.
.It Fa frac_digits
The number of digits after the decimal point
in the local style for currency values.
.It Fa p_cs_precedes
1 if the currency symbol precedes the currency value
for nonnegative values, 0 if it follows.
.It Fa p_sep_by_space
1 if a space is inserted between the currency symbol
and the currency value for nonnegative values, 0 otherwise.
.It Fa n_cs_precedes
Like
.Fa p_cs_precedes
but for negative values.
.It Fa n_sep_by_space
Like
.Fa p_sep_by_space
but for negative values.
.It Fa p_sign_posn
The location of the
.Fa positive_sign
with respect to a nonnegative quantity and the
.Fa currency_symbol ,
coded as follows:
.Bl -tag -width 3n -compact
.It Li 0
Parentheses around the entire string.
.It Li 1
Before the string.
.It Li 2
After the string.
.It Li 3
Just before
.Fa currency_symbol .
.It Li 4
Just after
.Fa currency_symbol .
.El
.It Fa n_sign_posn
Like
.Fa p_sign_posn
but for negative currency values.
.El
.Pp
Unless mentioned above,
an empty string as a value for a field
indicates a zero length result or
a value that is not in the current locale.
A
.Dv CHAR_MAX
result similarly denotes an unavailable value.
.Sh "RETURN VALUES
The
.Fn setlocale
function returns
.Dv NULL
and fails to change the locale
if the given combination of
.Fa category
and
.Fa locale
makes no sense.
The
.Fn localeconv
function returns a pointer to a static object
which may be altered by later calls to
.Fn setlocale
or
.Fn localeconv .
I 2
.Sh FILES
.Bl -tag -width /usr/share/locale/locale/category -compact
.It Pa $PATH_LOCALE/\fIlocale\fP/\fIcategory\fP
.It Pa /usr/share/locale/\fIlocale\fP/\fIcategory\fP
locale file for the locale \fIlocale\fP
and the category \fIcategory\fP.
.El
E 2
.Sh "SEE ALSO
I 2
.Xr euc 4 ,
.Xr mbrune 3 ,
E 2
.Xr multibyte 3 ,
I 2
.Xr rune 3 ,
E 2
.Xr strcoll 3 ,
D 2
.Xr strxfrm 3
E 2
I 2
.Xr strxfrm 3 ,
.Xr utf2 4
E 2
.Sh STANDARDS
The
.Fn setlocale
and
.Fn localeconv
functions conform to
.St -ansiC .
.Sh HISTORY
The
.Fn setlocale
and
.Fn localeconv
D 4
functions are
.Ud
E 4
I 4
functions first appeared in 4.4BSD.
E 4
.Sh BUGS
The current implementation supports only the
.Li "\&""C""
D 2
locale.
Categories and environment variables are ignored.
E 2
I 2
and
.Li "\&""POSIX""
locales for all but the LC_CTYPE locale.
E 2
.Pp
In spite of the gnarly currency support in
.Fn localeconv ,
the standards don't include any functions
for generalized currency formatting.
I 2
.Pp
.Dv LC_COLLATE
does not make sense for many languages.
Use of
.Dv LC_MONETARY
could lead to misleading results until we have a real time currency
conversion function.
.Dv LC_NUMERIC
and
.Dv LC_TIME
are personal choices and should not be wrapped up with the other categories.
E 2
E 1
