h07083
s 00002/00002/00295
d D 8.1 93/06/04 12:51:35 bostic 19 18
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00065/00020/00232
d D 6.9 91/07/29 13:36:13 cael 18 17
c fix long parameter list
e
s 00041/00025/00211
d D 6.8 91/07/23 14:35:36 cael 17 16
c misc fixes
e
s 00116/00148/00120
d D 6.7 91/05/03 11:26:31 cael 16 14
c mdoc version three/bsd copyright
e
s 00115/00147/00121
d R 6.7 91/04/20 10:14:56 cael 15 14
c text changes or conversion to -mdoc (version 3)
e
s 00001/00001/00267
d D 6.6 91/03/02 16:22:34 bostic 14 13
c 4th arg to dn_expand is a pointer
e
s 00001/00011/00267
d D 6.5 90/06/23 17:59:31 trent 13 12
c new copyright notice
e
s 00003/00003/00275
d D 6.4 90/01/16 11:23:43 karels 12 11
c fixes from arc
e
s 00123/00059/00155
d D 6.3 89/12/14 11:29:16 karels 11 10
c add res_query, res_search, other updates
e
s 00014/00003/00200
d D 6.2 89/02/14 15:49:13 bostic 10 9
c add Berkeley specific copyright
e
s 00000/00000/00203
d D 6.1 87/11/21 14:54:48 karels 9 8
c bring up to rev 6
e
s 00044/00022/00159
d D 1.8 87/11/21 14:54:25 karels 8 7
c add RES_DNSRCH
e
s 00003/00003/00178
d D 1.7 86/05/27 11:25:39 kjd 7 6
c clean up
e
s 00004/00004/00177
d D 1.6 86/04/10 14:36:38 kjd 6 5
c fix calls to dn_expand
e
s 00012/00009/00169
d D 1.5 86/03/21 22:19:03 kjd 5 4
c Add stayopen 
e
s 00002/00002/00176
d D 1.4 86/02/03 14:16:42 kjd 4 3
c Add msglen to dn_expand
e
s 00002/00009/00176
d D 1.3 86/01/07 13:38:37 kjd 3 2
c add resolver(5)
e
s 00017/00010/00168
d D 1.2 85/10/30 09:56:56 kjd 2 1
c chane include forles and add resolv.conf information
e
s 00178/00000/00000
d D 1.1 85/10/06 17:29:36 kjd 1 0
c date and time created 85/10/06 17:29:36 by kjd
e
u
U
t
T
I 1
D 2
.\" Copyright (c) 1980 Regents of the University of California.
E 2
I 2
D 10
.\" Copyright (c) 1985 Regents of the University of California.
E 2
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 10
I 10
D 16
.\" Copyright (c) 1985 The Regents of the University of California.
E 16
I 16
D 19
.\" Copyright (c) 1985, 1991 The Regents of the University of California.
E 16
.\" All rights reserved.
E 19
I 19
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 19
.\"
D 13
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 13
I 13
D 16
.\" %sccs.include.redist.man%
E 16
I 16
.\" %sccs.include.redist.roff%
E 16
E 13
E 10
.\"
D 16
.\"	%W% (Berkeley) %G%
E 16
I 16
.\"     %W% (Berkeley) %G%
E 16
.\"
D 2
.TH RESOLVER 3 "25 March 1985"
E 2
I 2
D 8
.TH RESOLVER 3 "15 November 1985"
E 8
I 8
D 16
.TH RESOLVER 3 "%Q%"
E 8
E 2
.UC 4
.SH NAME
D 11
res_mkquery, res_send, res_init, dn_comp, dn_expand \- resolver routines
E 11
I 11
res_query, res_search, res_mkquery, res_send, res_init, dn_comp, dn_expand \- resolver routines
E 11
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <netinet/in.h>
.br
D 2
.B #include <nameser.h>
E 2
I 2
.B #include <arpa/nameser.h>
E 2
.br
D 2
.B #include <resolv.h>
E 2
I 2
D 5
.B #include <arpa/resolv.h>
E 5
I 5
.B #include <resolv.h>
E 5
E 2
.PP
I 11
.B "res_query(dname, class, type, answer, anslen)"
.br
.B char *dname;
.br
.B int class, type;
.br
.B u_char *answer;
.br
.B int anslen;
.PP
.B "res_search(dname, class, type, answer, anslen)"
.br
.B char *dname;
.br
.B int class, type;
.br
.B u_char *answer;
.br
.B int anslen;
.PP
E 11
.B "res_mkquery(op, dname, class, type, data, datalen, newrr, buf, buflen)"
.br
.B int op;
.br
.B char *dname;
.br
.B int class, type;
.br
.B char *data;
.br
.B int datalen;
.br
.B struct rrec *newrr;
.br
.B char *buf;
.br
.B int buflen;
.PP
.B res_send(msg, msglen, answer, anslen)
.br
.B char *msg;
.br
.B int msglen;
.br
.B char *answer;
.br
.B int anslen;
.PP
.B res_init()
.PP
.B dn_comp(exp_dn, comp_dn, length, dnptrs, lastdnptr)
.br
.B char *exp_dn, *comp_dn;
.br
.B int length;
.br
.B char **dnptrs, **lastdnptr;
.PP
D 4
.B dn_expand(msg, comp_dn, exp_dn, length)
E 4
I 4
D 6
.B dn_expand(msg, msglen, comp_dn, exp_dn, length)
E 6
I 6
.B dn_expand(msg, eomorig, comp_dn, exp_dn, length)
E 6
E 4
.br
D 5
.SM
E 5
D 6
.B char *msg, *comp_dn, exp_dn;
E 6
I 6
D 14
.B char *msg, *eomorig, *comp_dn, exp_dn;
E 14
I 14
.B u_char *msg, *eomorig, *comp_dn, *exp_dn;
E 14
E 6
.br
D 4
.B int length;
E 4
I 4
D 6
.B int  msglen, length;
E 6
I 6
.B int  length;
E 6
E 4
.SH DESCRIPTION
E 16
I 16
.Dd %Q%
.Dt RESOLVER 3
D 17
.Os BSD 4
E 17
I 17
.Os BSD 4.3
E 17
.Sh NAME
.Nm res_query ,
.Nm res_search ,
.Nm res_mkquery ,
.Nm res_send ,
.Nm res_init ,
.Nm dn_comp ,
.Nm dn_expand
.Nd resolver routines
.Sh SYNOPSIS
D 18
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/nameser.h>
#include <resolv.h>
"u_".Fn res_query char\ *dname int\ class int\ type char\ *answer int\ anslen
u_".Fn res_search char\ *dname int\ class int\ type char\ *answer int\ anslen
.Fn res_mkquery int\ op char\ *dname int\ class int\ type char\ *data int\ datalen struct\ rrec\ *newrr char\ *buf int\ buflen
.Ft buflen
.Fn res_send char\ *msg int\ msglen char\ *answer int\ anslen
E 18
I 18
.Fd #include <sys/types.h>
.Fd #include <netinet/in.h>
.Fd #include <arpa/nameser.h>
.Fd #include <resolv.h>
.Fo res_query
.Fa "char *dname"
.Fa "int class"
.Fa "int type"
.Fa "u_char *answer"
.Fa "int anslen"
.Fc
.Fo res_search
.Fa "char *dname"
.Fa "int class"
.Fa "int type"
.Fa "u_char *answer"
.Fa "int anslen"
.Fc
.Fo res_mkquery
.Fa "int op"
.Fa "char *dname"
.Fa "int class"
.Fa "int type"
.Fa "char *data"
.Fa "int datalen"
.Fa "struct rrec *newrr"
.Fa "char *buf"
.Fa "int buflen"
.Fc
.Fo res_send
.Fa "char *msg"
.Fa "int msglen"
.Fa "char *answer"
.Fa "int anslen"
.Fc
E 18
.Fn res_init 
D 18
.Fn dn_comp char\ *exp_dn char\ *comp_dn int\ length dnptrs lastdnptr
u_.Fn dn_expand char\ *msg char\ *eomorig char\ *comp_dn char\ *exp_dn int\ length
E 18
I 18
.Fo dn_comp
.Fa "char *exp_dn"
.Fa "char *comp_dn"
.Fa "int length"
.Fa "char **dnptrs"
.Fa "char **lastdnptr"
.Fc
.Fo dn_expand
.Fa "u_char *msg"
.Fa "u_char *eomorig"
.Fa "u_char *comp_dn"
.Fa "u_char *exp_dn"
.Fa "int length"
.Fc
E 18
.Sh DESCRIPTION
E 16
D 8
These routines are used for making, sending and interpreting packets to
Internet domain name servers. Global information that is used by the
E 8
I 8
D 11
These routines are used for making, sending and interpreting packets
for use with Internet domain name servers.
Global information that is used by the
E 8
resolver routines is kept in the variable
E 11
I 11
These routines are used for making, sending and interpreting
query and reply messages with Internet domain name servers.
D 16
.PP
E 16
I 16
.Pp
E 16
Global configuration and state information that is used by the
resolver routines is kept in the structure
E 11
D 16
.IR _res .
E 16
I 16
.Em _res .
E 16
D 8
Most of the values have reasonable defaults and can be ignored. Options
E 8
I 8
Most of the values have reasonable defaults and can be ignored.
Options
E 8
stored in
D 16
.I _res.options
E 16
I 16
.Em _res.options
E 16
are defined in
D 16
.I resolv.h
E 16
I 16
.Pa resolv.h
E 16
D 8
and are as follows. Options are a simple bit mask and are or'ed in to
enable.
E 8
I 8
and are as follows.
D 11
Options are stored a simple bit mask containing the bitwise ``or''
E 11
I 11
Options are stored as a simple bit mask containing the bitwise ``or''
E 11
of the options enabled.
E 8
D 16
.IP RES_INIT
E 16
I 16
D 18
.Bl -tag -width indent
E 18
I 18
.Bl -tag -width RES_DEFNAMES
E 18
D 17
.It Em RES_INIT
E 17
I 17
.It Dv RES_INIT
E 17
E 16
True if the initial name server address and default domain name are
initialized (i.e.,
D 16
.I res_init
E 16
I 16
.Fn res_init
E 16
has been called).
D 16
.IP RES_DEBUG
E 16
I 16
D 17
.It Em RES_DEBUG
E 17
I 17
.It Dv RES_DEBUG
E 17
E 16
Print debugging messages.
D 16
.IP RES_AAONLY
E 16
I 16
D 17
.It Em RES_AAONLY
E 17
I 17
.It Dv RES_AAONLY
E 17
E 16
Accept authoritative answers only.
D 8
.I Res_send
will continue until it finds an authoritative answer or finds an error.
E 8
I 8
With this option,
D 16
.I res_send
E 16
I 16
.Fn res_send
E 16
should continue until it finds an authoritative answer or finds an error.
E 8
Currently this is not implemented.
D 16
.IP RES_USEVC
D 8
Use TCP connections for queries instead of UDP.
E 8
I 8
Use TCP connections for queries instead of UDP datagrams.
E 8
D 5
.IP RES_PRIMARY
Unused currently.
E 5
I 5
.IP RES_STAYOPEN
E 16
I 16
D 17
.It Em RES_USEVC
Use TCP connections for queries instead of
E 17
I 17
.It Dv RES_USEVC
Use
.Tn TCP
connections for queries instead of
E 17
.Tn UDP
datagrams.
D 17
.It Em RES_STAYOPEN
E 16
Used with RES_USEVC to keep the TCP connection open between
E 17
I 17
.It Dv RES_STAYOPEN
D 18
Used with RES_USEVC to keep the
E 18
I 18
Used with
.Dv RES_USEVC
to keep the
E 18
.Tn TCP
connection open between
E 17
queries.
This is useful only in programs that regularly do many queries.
D 16
UDP should be the normal mode used.
E 5
.IP RES_IGNTC
E 16
I 16
.Tn UDP
should be the normal mode used.
D 17
.It Em RES_IGNTC
E 16
Unused currently (ignore truncation errors, i.e., don't retry with TCP).
D 16
.IP RES_RECURSE
E 16
I 16
.It Em RES_RECURSE
E 17
I 17
.It Dv RES_IGNTC
Unused currently (ignore truncation errors, i.e., don't retry with
.Tn TCP ) .
.It Dv RES_RECURSE
E 17
E 16
D 8
Set the recursion desired bit in queries. This is the default.
E 8
I 8
Set the recursion-desired bit in queries.
This is the default.
E 8
D 11
(
E 11
I 11
D 18
(\c
E 11
D 16
.I res_send
E 16
I 16
.Fn res_send
E 18
I 18
.Pf ( Fn res_send
E 18
E 16
D 2
does not currently perform iterative queries and expects the nameserver
E 2
I 2
D 5
does not currently perform iterative queries and expects the name server
E 2
to handle recursion. This should be fixed.)
E 5
I 5
does not do iterative queries and expects the name server
to handle recursion.)
E 5
D 16
.IP RES_DEFNAMES
E 16
I 16
D 17
.It Em RES_DEFNAMES
E 17
I 17
.It Dv RES_DEFNAMES
E 17
E 16
D 8
Append the default domain name to single label queries. This is the default.
E 8
I 8
If set,
D 11
.I res_mkquery
E 11
I 11
D 16
.I res_search
E 16
I 16
.Fn res_search
E 16
E 11
will append the default domain name to single-component names
(those that do not contain a dot).
D 11
This is the default.
E 11
I 11
This option is enabled by default.
E 11
D 16
.IP RES_DNSRCH
E 16
I 16
D 17
.It Em RES_DNSRCH
E 17
I 17
.It Dv RES_DNSRCH
E 17
E 16
If this option is set,
D 11
the standard host lookup routine
.IR gethostbyname (3)
E 11
I 11
D 16
.I res_search
E 16
I 16
.Fn res_search
E 16
E 11
will search for host names in the current domain and in parent domains; see
D 16
.IR hostname (7).
E 16
I 16
.Xr hostname 7 .
E 16
I 11
This is used by the standard host lookup routine
D 16
.IR gethostbyname (3).
E 16
I 16
.Xr gethostbyname 3 .
E 16
This option is enabled by default.
I 18
.El
E 18
E 11
E 8
D 16
.PP
E 16
I 16
.Pp
E 16
D 11
.I Res_init
.PP
D 2
reads the the first line of the initialization file to get the default
domain name. The second line is the Internet address of the initial host
E 2
I 2
reads the initialization file to get the default
domain name and the Internet address of the initial hosts
E 2
D 8
running the name server. If this line does not exist, the host running
E 8
I 8
running the name server.
If this line does not exist, the host running
E 11
I 11
The
D 16
.I res_init
E 16
I 16
.Fn res_init
E 16
routine
reads the configuration file (if any; see
D 16
.IR resolver (5))
E 16
I 16
.Xr resolver 5 )
E 16
to get the default domain name,
search list and
the Internet address of the local name server(s).
If no server is configured, the host running
E 11
E 8
D 2
the resolver is tried (only works in 4.3 BSD).
E 2
I 2
the resolver is tried.
E 2
D 11
.I Res_mkquery
D 5
is used to make a standard query message and places it in
E 5
I 5
makes a standard query message and places it in
E 11
I 11
The current domain name is defined by the hostname
if not specified in the configuration file;
D 17
it can be overridden by the environment variable LOCALDOMAIN.
E 17
I 17
it can be overridden by the environment variable
.Ev LOCALDOMAIN .
E 17
Initialization normally occurs on the first call
to one of the following routines.
D 16
.PP
E 16
I 16
.Pp
E 16
The
D 16
.I res_query
E 16
I 16
.Fn res_query
E 16
function provides an interface to the server query mechanism.
It constructs a query, sends it to the local server,
awaits a response, and makes preliminary checks on the reply.
The query requests information of the specified
D 16
.I type
E 16
I 16
.Fa type
E 16
and
D 16
.I class
E 16
I 16
.Fa class
E 16
for the specified fully-qualified domain name
D 16
.I dname .
E 16
I 16
.Fa dname .
E 16
The reply message is left in the
D 16
.I answer
E 16
I 16
.Fa answer
E 16
buffer with length
D 16
.I anslen
E 16
I 16
.Fa anslen
E 16
supplied by the caller.
D 16
.PP
E 16
I 16
.Pp
E 16
The
D 16
.I res_search
E 16
I 16
.Fn res_search
E 16
routine makes a query and awaits a response like
D 12
.I res_query ,
E 12
I 12
D 16
.IR res_query ,
E 16
I 16
.Fn res_query ,
E 16
E 12
but in addition, it implements the default and search rules
D 17
controlled by the RES_DEFNAMES and RES_DNSRCH options.
E 17
I 17
controlled by the
.Dv RES_DEFNAMES
and
.Dv RES_DNSRCH
options.
E 17
It returns the first successful reply.
D 16
.PP
E 16
I 16
.Pp
E 16
The remaining routines are lower-level routines used by
D 12
.I res_query.
E 12
I 12
D 16
.IR res_query .
E 16
I 16
.Fn res_query .
E 16
E 12
The
D 16
.I res_mkquery
E 16
I 16
.Fn res_mkquery
E 16
function
constructs a standard query message and places it in
E 11
E 5
D 16
.IR buf .
E 16
I 16
.Fa buf .
E 16
D 11
.I Res_mkquery
will return the size of the query or \-1 if the query is
E 11
I 11
It returns the size of the query, or \-1 if the query is
E 11
larger than
D 16
.IR buflen .
E 16
I 16
.Fa buflen .
E 16
D 11
.I Op
is usually QUERY but can be any of the query types defined in
E 11
I 11
The query type
D 16
.I op
E 16
I 16
.Fa op
E 16
D 17
is usually QUERY, but can be any of the query types defined in
E 17
I 17
is usually
.Dv QUERY ,
but can be any of the query types defined in
E 17
E 11
D 12
.IR nameser.h .
E 12
I 12
D 16
.IR <arpa/nameser.h> .
E 16
I 16
D 18
.Ao Pa arpa/nameser.h Ac .
E 18
I 18
.Aq Pa arpa/nameser.h .
E 18
E 16
E 12
D 11
.I Dname
D 8
is the domain name. If
E 8
I 8
is the domain name.
If
E 8
.I dname
consists of a single label and the RES_DEFNAMES flag is enabled
D 8
(the default),
.I dname
will be appended with the current domain name. The current
domain name is defined in a system file and can be overridden
E 8
I 8
(the default), the current domain name will be appended to
E 11
I 11
The domain name for the query is given by
E 11
D 16
.IR dname .
D 11
The current domain name is defined by the hostname
or is specified in a system file; it can be overridden
E 8
by the environment variable LOCALDOMAIN.
E 11
.I Newrr
E 16
I 16
.Fa dname .
.Fa Newrr
E 16
is currently unused but is intended for making update messages.
D 16
.PP
E 16
I 16
.Pp
E 16
D 11
.I Res_send
D 5
is used to send a query to name servers and return an answer.
E 5
I 5
sends a query to name servers and returns an answer.
E 11
I 11
The
D 16
.I res_send
E 16
I 16
.Fn res_send
E 16
routine
sends a pre-formatted query and returns an answer.
E 11
E 5
It will call
D 16
.I res_init
E 16
I 16
.Fn res_init
E 16
D 2
if RES_INIT is not set, send the query to the local nameserver, and
E 2
I 2
D 17
if RES_INIT is not set, send the query to the local name server, and
E 17
I 17
if
.Dv RES_INIT
is not set, send the query to the local name server, and
E 17
E 2
D 8
handle timeouts and retries. The length of the message is returned or
E 8
I 8
handle timeouts and retries.
D 11
The length of the message is returned, or
E 11
I 11
The length of the reply message is returned, or
E 11
E 8
\-1 if there were errors.
D 16
.PP
E 16
I 16
.Pp
E 16
D 11
.I Dn_expand
D 7
Expands the compressed domain name
E 7
I 7
expands the compressed domain name
E 7
.I comp_dn
to a full domain name.  Expanded names are converted to upper case.
.I Msg
is a pointer to the beginning of the message,
.I exp_dn
is a pointer to a buffer of size
.I length
for the result.
The size of compressed name is returned or -1 if there was an error.
.PP
.I Dn_comp
E 11
I 11
The
D 16
.I dn_comp
E 16
I 16
.Fn dn_comp
E 16
function
E 11
D 7
Compresses the domain name
E 7
I 7
compresses the domain name
E 7
D 16
.I exp_dn
E 16
I 16
.Fa exp_dn
E 16
and stores it in
D 16
.IR comp_dn .
E 16
I 16
.Fa comp_dn .
E 16
D 11
The size of the compressed name is returned or -1 if there were errors.
.I length is the size of the array pointed to by
.IR comp_dn .
.I Dnptrs
is a list of pointers to previously compressed names in the current message.
E 11
I 11
The size of the compressed name is returned or \-1 if there were errors.
The size of the array pointed to by
D 16
.I comp_dn
E 16
I 16
.Fa comp_dn
E 16
is given by
D 16
.IR length .
E 16
I 16
.Fa length .
E 16
The compression uses
an array of pointers
D 16
.I dnptrs
E 16
I 16
.Fa dnptrs
E 16
to previously-compressed names in the current message.
E 11
The first pointer points to
D 17
to the beginning of the message and the list ends with NULL.
E 17
I 17
to the beginning of the message and the list ends with
.Dv NULL .
E 17
D 11
.I lastdnptr
is a pointer to the end of the array pointed to
.IR dnptrs .
A side effect is to update the list of pointers for
labels inserted into the message by
E 11
I 11
The limit to the array is specified by
D 16
.IR lastdnptr .
E 16
I 16
.Fa lastdnptr .
E 16
A side effect of
E 11
D 16
.I dn_comp
E 16
I 16
.Fn dn_comp
E 16
I 11
is to update the list of pointers for
labels inserted into the message
E 11
as the name is compressed.
If
D 16
.I dnptr
E 16
I 16
.Em dnptr
E 16
D 8
is NULL, we don't try to compress names. If
E 8
I 8
D 17
is NULL, names are not compressed.
E 17
I 17
is
.Dv NULL, names are not compressed.
E 17
If
E 8
D 16
.I lastdnptr
E 16
I 16
.Fa lastdnptr
E 16
D 8
is NULL, we don't update the list.
E 8
I 8
D 17
is NULL, the list of labels is not updated.
E 17
I 17
is
.Dv NULL ,
the list of labels is not updated.
E 17
I 11
D 16
.PP
E 16
I 16
.Pp
E 16
The
D 16
.I dn_expand
E 16
I 16
.Fn dn_expand
E 16
entry
expands the compressed domain name
D 16
.I comp_dn
E 16
I 16
.Fa comp_dn
E 16
to a full domain name
The compressed name is contained in a query or reply message;
D 16
.I msg
E 16
I 16
.Fa msg
E 16
is a pointer to the beginning of the message.
The uncompressed name is placed in the buffer indicated by
D 16
.I exp_dn
E 16
I 16
.Fa exp_dn
E 16
which is of size
D 16
.IR length .
E 16
I 16
.Fa length .
E 16
The size of compressed name is returned or \-1 if there was an error.
E 11
E 8
D 16
.SH FILES
D 2
resolv.conf	default resolver information
E 2
I 2
D 3
resolv.conf	Contains the default resolver information read by res_init.
There are two types of records in this file, domain and name server.
The domain record specifies the default domain for the resolver to use.
You can have multiple name server records to designate the name servers 
addresses you would like the resolver to try. By using this 
file you don't have to have a name server actually running on your system
and you can have a back up name server to try in the event your local server 
is not responsive.
E 3
I 3
D 8
/etc/resolv.conf see resolver(5)
E 8
I 8
/etc/resolv.conf	see resolver(5)
E 8
E 3
E 2
.SH "SEE ALSO"
D 3
named(8), RFC882, RFC883
E 3
I 3
D 5
named(8), resolver(5), RFC882, RFC883
E 5
I 5
D 8
named(8), resolver(5), RFC882, RFC883, RFC973, RFC974,
E 8
I 8
gethostbyname(3), named(8), resolver(5), hostname(7),
E 16
I 16
.Sh FILES
.Bl -tag -width Pa
/etc/resolv.conf
D 17
see.Xr resolver 5
E 17
I 17
The configuration file
see
.Xr resolver 5 .
E 17
.El
.Sh SEE ALSO
.Xr gethostbyname 3 ,
.Xr named 8 ,
.Xr resolver 5 ,
.Xr hostname 7 ,
E 16
D 18
.br
D 11
RFC882, RFC883, RFC973, RFC974,
E 11
I 11
RFC1032, RFC1033, RFC1034, RFC1035, RFC974, 
E 11
.br
E 8
D 6
BIND - Operations Guide
E 6
I 6
D 7
Name Server Operations Guide for BIND
E 7
I 7
SMM:11 Name Server Operations Guide for BIND
E 18
I 18
.Pp
.%T RFC1032 ,
.%T RFC1033 ,
.%T RFC1034 ,
.%T RFC1035 ,
.%T RFC974
.Rs
.%T "Name Server Operations Guide for BIND"
.Re
E 18
I 16
.Sh HISTORY
The
.Nm
function appeared in 
.Bx 4.3 .
D 17
.\" /arch/4.3bsd/usr/man/man3/resolver.3
.\" /arch/4.3tahoe/usr/network.1/man/man3/resolver.3
.\" /arch/4.3tahoe/usr/src/man/man3/resolver.3
.\" 4.4BSD
E 17
E 16
E 7
E 6
E 5
E 3
E 1
