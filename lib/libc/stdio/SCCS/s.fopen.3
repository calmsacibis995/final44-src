h40136
s 00002/00002/00209
d D 8.1 93/06/04 13:05:31 bostic 11 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00001/00208
d D 6.8 91/06/29 14:26:18 bostic 10 9
c add ANSI contribution notice
e
s 00163/00127/00046
d D 6.7 91/04/19 14:48:31 cael 9 8
c macro and text revision (-mdoc version 3)
e
s 00013/00007/00160
d D 6.6 91/03/05 13:57:18 bostic 8 7
c minor cleanup
e
s 00141/00095/00026
d D 6.5 91/01/20 21:20:00 bostic 7 6
c new stdio
e
s 00001/00001/00120
d D 6.4 89/04/01 15:14:47 bostic 6 5
c remove subsection designations
e
s 00002/00002/00119
d D 6.3 86/05/27 10:25:15 kjd 5 4
c fix quotes
e
s 00014/00001/00107
d D 6.2 86/05/14 18:12:19 karels 4 3
c document internal memory allocation, how to avoid
e
s 00001/00001/00107
d D 6.1 85/05/15 15:09:14 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00009/00016/00099
d D 5.1 85/05/15 15:09:02 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00115/00000/00000
d D 4.1 85/05/15 15:08:53 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
D 9
.\" Copyright (c) 1990 The Regents of the University of California.
E 9
I 9
D 11
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 9
.\" All rights reserved.
E 11
I 11
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 11
E 7
.\"
I 7
.\" This code is derived from software contributed to Berkeley by
D 10
.\" Chris Torek.
E 10
I 10
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
E 10
D 9
.\"
E 9
.\" %sccs.include.redist.man%
.\"
E 7
D 9
.\"	%W% (Berkeley) %G%
E 9
I 9
.\"     %W% (Berkeley) %G%
E 9
.\"
D 2
.TH FOPEN 3S  4/1/81
E 2
I 2
D 3
.TH FOPEN 3S  "1 April 1981"
E 3
I 3
D 6
.TH FOPEN 3S  "%Q%"
E 6
I 6
D 7
.TH FOPEN 3  "%Q%"
E 6
E 3
E 2
.UC 4
E 7
I 7
D 9
.TH FOPEN 3 "%Q%"
.UC 7
E 7
.SH NAME
D 7
fopen, freopen, fdopen \- open a stream
E 7
I 7
fopen, fdopen, freopen \- open a stream
E 7
.SH SYNOPSIS
D 7
.B #include <stdio.h>
.PP
.SM
.B FILE
.B *fopen(filename, type)
.br
.B char *filename, *type;
.PP
.SM
.B FILE
.B *freopen(filename, type, stream)
.br
.B char *filename, *type;
.br
.SM
.B FILE
.B *stream;
.PP
.SM
.B FILE
.B *fdopen(fildes, type)
.br
.B char *type;
E 7
I 7
.nf
.ft B
#include <stdio.h>

FILE *
fopen(char *path, char *type);

FILE *
fdopen(int fildes, char *type);

FILE *
freopen(char *path, char *type, FILE *stream);
.ft R
.fi
E 7
.SH DESCRIPTION
.I Fopen
opens the file named by
D 7
.I filename
and associates a stream with it.
.I Fopen
D 2
returns a pointer to be used to identify
the stream in subsequent operations.
E 2
I 2
returns a pointer to be used to identify the stream in subsequent operations.
E 7
I 7
.I path
and associates a stream with it, returning a pointer for identifying
the stream in subsequent operations.
E 7
E 2
.PP
.I Type
D 7
is a character string having one of the following values:
.TP 5
"r"
open for reading
.ns
.TP 5
"w"
create for writing
.ns
.TP 5
"a"
D 2
append: open for writing at end
of file, or create for writing
E 2
I 2
append: open for writing at end of file, or create for writing
E 7
I 7
is one of the following character strings:
.TP
``r''
Open for reading.
E 9
I 9
.Dd %Q%
.Dt FOPEN 3
.Os
.Sh NAME
.Nm fopen ,
.Nm fdopen ,
.Nm freopen
.Nd stream open functions
.Sh SYNOPSIS
.Fd #include <stdio.h>
.Ft FILE *
.Fn fopen "char *path" "char *mode"
.Ft FILE *
.Fn fdopen "int fildes" "char *mode"
.Ft FILE *
.Fn freopen "char *path" "char *mode" "FILE *stream"
.Sh DESCRIPTION
The
.Fn fopen
function
opens the file whose name is the string pointed to by
.Fa path
and associates a stream with it.
.Pp
The argument
.Fa mode
points to a string beginning with one of the following
sequences (Additional characters may follow these sequences.):
.Bl -tag -width indent
.It Dq Li r
Open text file for reading.
E 9
The stream is positioned at the beginning of the file.
D 9
.TP
``r+''
E 9
I 9
.It Dq Li r+
E 9
Open for reading and writing.
The stream is positioned at the beginning of the file.
D 9
.TP
``w''
Open for writing.
The file is created if it does not exist, otherwise it is truncated.
E 9
I 9
.It Dq Li w
Truncate file to zero length or create text file for writing.
E 9
The stream is positioned at the beginning of the file.
D 9
.TP
``w+''
E 9
I 9
.No It Dq Li w+
E 9
Open for reading and writing.
The file is created if it does not exist, otherwise it is truncated.
The stream is positioned at the beginning of the file.
D 9
.TP
``a''
E 9
I 9
.It Dq Li a
E 9
Open for writing.
The file is created if it does not exist.
The stream is positioned at the end of the file.
D 9
.TP
``a+''
E 9
I 9
.It Dq Li a+
E 9
Open for reading and writing.
The file is created if it does not exist.
The stream is positioned at the end of the file.
E 7
E 2
D 9
.PP
E 9
I 9
.El
.Pp
E 9
D 7
In addition, each
E 7
I 7
The
E 7
D 9
.I type
E 9
I 9
.Fa mode
E 9
D 2
may be followed by a '+' to have the file opened for
reading and writing.  "r+" positions the 
stream at the beginning of the file, "w+" creates
E 2
I 2
D 5
may be followed by a '+' to have the file opened for reading and writing.
E 5
I 5
D 7
may be followed by a "+" to have the file opened for reading and writing.
E 5
"r+" positions the stream at the beginning of the file, "w+" creates
E 2
or truncates it, and "a+" positions it at the end.  Both reads and writes
may be used on read/write streams, with the limitation that an
.I fseek, rewind,
D 2
or reading an end-of-file must be used between a read and a write or
vice-versa.
E 2
I 2
or reading an end-of-file must be used between a read and a write or vice-versa.
E 7
I 7
string can also include the letter ``b'' either as a third character or
as a character between the characters in any of the two-character strings
described above.
D 9
This is strictly for compatibility with ANSI X3.159-1989 (``ANSI C'')
E 9
I 9
This is strictly for compatibility with
.St -ansiC
E 9
and has no effect; the ``b'' is ignored.
E 7
E 2
D 9
.PP
D 7
.I Freopen
D 2
substitutes the named file in place
of the open
E 2
I 2
substitutes the named file in place of the open
E 2
.IR stream .
It returns the original value of
.IR stream .
The original stream is closed.
E 7
I 7
D 8
Any created files will have mode
``S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH'' (0666), 
as modified by the process' umask value (see
E 8
I 8
Any created files will have mode ``S_IRUSR  |  S_IWUSR | S_IRGRP | 
S_IWGRP | S_IROTH | S_IWOTH'' (0666), as modified by the process'
E 9
I 9
.Pp
Any created files will have mode
.Pf \\*q Dv S_IRUSR
\&|
.Dv S_IWUSR
\&|
.Dv S_IRGRP
\&|
.Dv S_IWGRP
\&|
.Dv S_IROTH
\&|
.Dv S_IWOTH Ns \\*q
.Pq Li 0666 ,
as modified by the process'
E 9
umask value (see
E 8
D 9
.IR umask (2)).
E 7
.PP
E 9
I 9
.Xr umask 2 ) .
.Pp
E 9
D 7
.I Freopen
D 2
is typically used to attach the preopened
constant names,
E 2
I 2
is typically used to attach the preopened constant names,
E 2
.B stdin, stdout, stderr,
to specified files.
E 7
I 7
Reads and writes may be intermixed on read/write streams in any order,
D 9
and do not require an intermediate seek as in previous versions of 
stdio.
This is not portable to other systems, however; ANSI C requires that
E 9
I 9
and do not require an intermediate seek as in previous versions of
.Em stdio .
This is not portable to other systems, however;
.Tn ANSI C
requires that
E 9
a file positioning function intervene between output and input, unless
an input operation encounters end-of-file.
E 7
D 9
.PP
.I Fdopen
associates a stream with a file descriptor obtained from
D 7
.I open, dup, creat,
E 7
I 7
.IR creat (2),
.IR dup (2),
.IR open (2),
E 7
or
.IR pipe (2).
E 9
I 9
.Pp
E 9
The
D 9
.I type
E 9
I 9
.Fn fdopen
function associates a stream with the existing file descriptor,
.Fa fildes .
The
.Fa mode
E 9
D 7
of the stream must agree with the mode of the open file.
E 7
I 7
of the stream must be compatible with the mode of the file descriptor.
D 9
.PP
.I Freopen
substitutes the named file in place of the open
.IR stream 
and returns a pointer to it.
The original stream is closed.
.I Freopen
is typically used to attach the preopened constant names,
.IR stdin ,
.IR stdout ,
E 9
I 9
.Pp
The
.Fn freopen
function
opens the file whose name is the string pointed to by
.Fa path
and associates the stream pointed to by
.Fa stream
with it.
The original stream (if it exists) is closed.
The
.Fa mode
argument is used just as in the
.Xr fopen
function.
The primary use of the
.Fn freopen
function
is to change the file associated with a
standard text stream
.Pf ( Em stderr ,
.Em stdin ,
or
.Em stdout ) .
.Sh RETURN VALUES
Upon successful completion
.Fn fopen ,
.Fn fdopen
E 9
and
D 9
.I stderr
to files.
E 7
.SH "SEE ALSO"
D 7
open(2),
fclose(3)
.SH DIAGNOSTICS
E 7
I 7
D 8
fcntl(2), open(2), fclose(3), fseek(3), funopen(3), setbuf(3)
E 8
I 8
open(2), fclose(3), fseek(3), funopen(3)
E 8
.SH "RETURN VALUES"
Upon successful completion 
.IR fopen ,
.I fdopen
and
.I freopen
return a FILE pointer.
Otherwise, NULL is returned and the global variable
.I errno
E 9
I 9
.Fn freopen
return a
.Tn FILE
pointer.
Otherwise,
.Dv NULL
is returned and the global variable
.Va errno
E 9
is set to indicate the error.
D 9
.SH ERRORS
.TP 15 
[EINVAL]
The 
.I type
provided to 
.IR fopen ,
.IR fdopen ,
E 9
I 9
.Sh ERRORS
.Bl -tag -width [EINVAL]
.It Bq Er EINVAL
The
.Fa mode
provided to
.Fn fopen ,
.Fn fdopen ,
E 9
or
D 9
.IR freopen 
E 9
I 9
.Fn freopen
E 9
was invalid.
D 8
.TP 15 
[ENOMEM]
Not enough memory was available to allocate data structures.
E 8
I 8
D 9
.PP
.IR Fopen ,
.I fdopen
E 9
I 9
.El
.Pp
The
.Fn fopen ,
.Fn fdopen
E 9
and
D 9
.I freopen
E 9
I 9
.Fn freopen
functions
E 9
may also fail and set
D 9
.IR errno
E 9
I 9
.Va errno
E 9
for any of the errors specified for the routine
D 9
.IR malloc (3).
E 8
.PP
E 7
.I Fopen
E 9
I 9
.Xr malloc 3 .
.Pp
The
.Fn fopen
function
E 9
D 7
and 
E 7
I 7
may also fail and set
D 9
.IR errno
E 9
I 9
.Va errno
E 9
for any of the errors specified for the routine
D 9
.IR open (2).
.PP
.I Fdopen
E 9
I 9
.Xr open 2 .
.Pp
The
.Fn fdopen
function
E 9
may also fail and set
D 9
.IR errno
E 9
I 9
.Va errno
E 9
for any of the errors specified for the routine
D 9
.IR fcntl (2).
.PP
.I Freopen
E 9
I 9
.Xr fcntl 2 .
.Pp
The
.Fn freopen
function
E 9
may also fail and set
D 9
.IR errno
E 9
I 9
.Va errno
E 9
for any of the errors specified for the routines
D 9
.IR open (2), 
.IR fclose (3)
E 9
I 9
.Xr open 2 ,
.Xr fclose 3
E 9
and
D 9
.IR fflush (3).
.SH STANDARDS
.I Fopen
E 9
I 9
.Xr fflush 3 .
.Sh SEE ALSO
.Xr open 2 ,
.Xr fclose 3 ,
.Xr fseek 3 ,
.Xr funopen 3
.Sh STANDARDS
The
.Fn fopen
E 9
and
E 7
D 9
.I freopen
D 7
return the pointer
.SM
.B NULL
if
.I filename
D 4
cannot be accessed.
E 4
I 4
cannot be accessed,
if too many files are already open,
or if other resources needed cannot be allocated.
E 7
I 7
conform to ANSI X3.159-1989 (``ANSI C'').
.I Fdopen
conforms to IEEE Std 1003.1-1988 (``POSIX'').
E 7
E 4
.SH BUGS
.I Fdopen
D 7
is not portable to systems other than UNIX.
.PP
The read/write 
.I types
do not exist on all systems.  Those systems without
read/write modes will probably treat the 
.I type
D 2
as if the '+' was not
present.
E 2
I 2
D 5
as if the '+' was not present.  These are unreliable in any event.
E 5
I 5
as if the "+" was not present.  These are unreliable in any event.
E 5
I 4
.PP
In order to support the same number of open files as does the system,
.I fopen
must allocate additional memory for data structures using
.I calloc
after 20 files have been opened.
This confuses some programs which use their own memory allocators.
An undocumented routine,
.IR f_prealloc ,
may be called to force immediate allocation of all internal memory
except for buffers.
E 7
I 7
may not be portable to systems other than UNIX.
E 9
I 9
.Fn freopen
functions
conform to
.St -ansiC .
The
.Fn fdopen
function
conforms to
.St -p1003.1-88 .
E 9
E 7
E 4
E 2
E 1
