h10896
s 00001/00001/00079
d D 8.2 94/03/08 11:47:10 bostic 12 11
c first argument to fwrite is a const void *
e
s 00002/00002/00078
d D 8.1 93/06/04 13:06:10 bostic 11 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00005/00000/00075
d D 6.8 92/02/04 18:30:35 bostic 10 9
c clarify failure case for fwrite
e
s 00005/00005/00070
d D 6.7 91/08/16 17:00:06 bostic 9 8
c fread/frwrite return object count, not byte count
e
s 00003/00001/00072
d D 6.6 91/06/29 14:27:21 bostic 8 7
c add ANSI contribution notice
e
s 00061/00052/00012
d D 6.5 91/04/19 14:48:25 cael 7 6
c macro and text revision (-mdoc version 3)
e
s 00008/00001/00056
d D 6.4 91/03/05 14:54:32 bostic 6 5
c man page pass, minor cleanups
e
s 00047/00062/00010
d D 6.3 91/01/20 21:21:17 bostic 5 4
c new stdio
e
s 00008/00008/00064
d D 6.2 89/04/01 15:14:49 bostic 4 3
c remove subsection designations
e
s 00001/00001/00071
d D 6.1 85/05/15 15:09:39 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00012/00009/00060
d D 5.1 85/05/15 15:09:30 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00069/00000/00000
d D 4.1 85/05/15 15:09:22 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 5
I 5
D 7
.\" Copyright (c) 1990 The Regents of the University of California.
E 7
I 7
D 11
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 7
.\" All rights reserved.
E 11
I 11
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 11
E 5
.\"
I 5
.\" This code is derived from software contributed to Berkeley by
D 8
.\" Chris Torek.
E 8
I 8
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
E 8
D 7
.\"
E 7
.\" %sccs.include.redist.man%
.\"
E 5
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\"     %W% (Berkeley) %G%
E 7
.\"
D 2
.TH FREAD 3S 
E 2
I 2
D 3
.TH FREAD 3S  "19 January 1983"
E 3
I 3
D 4
.TH FREAD 3S  "%Q%"
E 4
I 4
D 5
.TH FREAD 3  "%Q%"
E 4
E 3
E 2
.UC 4
E 5
I 5
D 7
.TH FREAD 3 "%Q%"
.UC 7
E 5
.SH NAME
D 5
fread, fwrite \- buffered binary input/output
E 5
I 5
fread, fwrite \- stream binary input/output
E 5
.SH SYNOPSIS
D 5
.B #include <stdio.h>
.PP
.B fread(ptr, sizeof(*ptr), nitems, stream)
.br
.SM
.B FILE
.B *stream;
.PP
.B fwrite(ptr, sizeof(*ptr), nitems, stream)
.br
.SM
.B FILE
.B *stream;
E 5
I 5
.nf
.ft B
#include <stdio.h>

int
fread(void *ptr, size_t size, size_t count, FILE *stream);

int
fwrite(void *ptr, size_t size, size_t count, FILE *stream);
.ft R
.fi
E 5
.SH DESCRIPTION
.I Fread
E 7
I 7
.Dd %Q%
.Dt FREAD 3
.Os
.Sh NAME
.Nm fread ,
.Nm fwrite
.Nd binary stream input/output
.Sh SYNOPSIS
.Fd #include <stdio.h>
.Ft int
.Fn fread "void *ptr" "size_t size" "size_t nmemb" "FILE *stream"
.Ft int
D 12
.Fn fwrite "void *ptr" "size_t size" "size_t nmemb" "FILE *stream"
E 12
I 12
.Fn fwrite "const void *ptr" "size_t size" "size_t nmemb" "FILE *stream"
E 12
.Sh DESCRIPTION
The function
.Fn fread
E 7
D 5
reads, into a block beginning at
D 2
.I ptr,
E 2
I 2
.IR ptr ,
E 2
.I nitems
of data of the type of
.I *ptr
from the named input
.IR stream .
It returns the number of items actually read.
E 5
I 5
reads
D 7
.I count
items of data, each
.I size
bytes long, from the given input
.IR stream ,
E 7
I 7
.Fa nmemb
D 9
elements of data, each
E 9
I 9
objects, each
E 9
.Xr size
bytes long, from the stream pointed to by
.Fa stream ,
E 7
storing them at the location given by
D 7
.IR ptr .
It returns the actual count of items read
(which will be less than
.I count
in the event of an
.B EOF
or error).
E 5
.PP
I 6
Fread does not distinguish between end-of-file and error, and callers
E 7
I 7
.Fa ptr .
.Pp
The function
.Fn fwrite
writes
.Fa nmemb
D 9
elements of data, each
E 9
I 9
objects, each
E 9
.Fa size
bytes long, to the stream pointed to by
.Fa stream ,
obtaining them from the location given by
.Fa ptr .
.Sh RETURN VALUES
The functions
.Fn fread
and
.Fn fwrite
advance the file position indicator for the stream
D 9
by the number of characters successfully read or written and return
that number.
E 9
I 9
by the number of bytes read or written.
They return the number of objects read or written.
E 9
If an error occurs, or the end-of-file is reached,
D 9
the return value is a short character count (or zero).
E 9
I 9
the return value is a short object count (or zero).
E 9
.Pp
The function
.Fn fread
does not distinguish between end-of-file and error, and callers
E 7
must use
D 7
.IR feof (3)
E 7
I 7
.Xr feof 3
E 7
and
D 7
.IR ferror (3)
E 7
I 7
.Xr ferror 3
E 7
to determine which occurred.
I 10
The function
.Fn fwrite
returns a value less than
.Fa nmemb
only if a write error has occurred.
E 10
D 7
.PP
E 6
D 5
If
.I stream
is
.B stdin
and the standard output is line buffered, then any partial output line
will be flushed before any call to
.IR read (2)
to satisfy the
D 2
.I fread.
E 2
I 2
.IR fread .
E 2
.PP
E 5
.I Fwrite
D 5
appends at most
.I nitems
of data of the type of
.I *ptr
beginning at
.I ptr
to the named output
.IR stream .
It returns the number of items actually written.
E 5
I 5
writes
.I count
items of data, each
.I size
bytes long, to the given output
.I stream ,
obtaining them from the location given by
.IR ptr .
It returns the actual count of items written.
.SH "RETURN VALUE"
These functions return 0 (or a short count) upon end of file or error.
E 5
.SH "SEE ALSO"
D 2
read(2), write(2),
fopen(3),
getc(3), putc(3),
gets(3), puts(3),
printf(3), scanf(3)
E 2
I 2
D 5
read(2),
write(2),
D 4
fopen(3S),
getc(3S),
putc(3S),
gets(3S),
puts(3S),
printf(3S),
scanf(3S)
E 4
I 4
fopen(3),
getc(3),
putc(3),
gets(3),
puts(3),
printf(3),
scanf(3)
E 4
E 2
.SH DIAGNOSTICS
.I Fread
and
.I fwrite
return
0
upon end of file or error.
E 5
I 5
D 6
read(2), write(2), fopen(3), getc(3), putc(3), stdio(3)
E 6
I 6
read(2), write(2)
E 7
I 7
.Sh SEE ALSO
.Xr read 2 ,
.Xr write 2
.Sh STANDARDS
The functions
.Fn fread
and
.Fn fwrite
conform to
.St -ansiC .
E 7
E 6
E 5
D 2
.SH BUGS
E 2
E 1
