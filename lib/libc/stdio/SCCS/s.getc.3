h28586
s 00002/00002/00108
d D 8.1 93/06/04 13:07:23 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00001/00107
d D 6.8 91/06/29 14:24:35 bostic 11 10
c add ANSI contribution notice
e
s 00086/00077/00022
d D 6.7 91/04/19 14:46:51 cael 10 9
c macro and text revision (-mdoc version 3)
e
s 00000/00000/00099
d D 6.6 91/04/19 14:41:40 cael 9 8
c macro and text revision (-mdoc version 3)
e
s 00001/00001/00098
d D 6.5 91/03/05 14:54:34 bostic 8 7
c man page pass, minor cleanups
e
s 00077/00068/00022
d D 6.4 91/01/20 21:23:37 bostic 7 6
c new stdio
e
s 00010/00010/00080
d D 6.3 89/04/01 15:14:52 bostic 6 5
c remove subsection designations
e
s 00011/00011/00079
d D 6.2 86/05/14 18:20:50 karels 5 3
c document sticky EOF
e
s 00011/00011/00079
d R 6.2 86/05/14 18:15:03 karels 4 3
c point out sticky EOF
e
s 00001/00001/00089
d D 6.1 85/05/15 14:58:55 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00012/00010/00078
d D 5.1 85/05/15 14:58:40 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00088/00000/00000
d D 4.1 85/05/15 14:58:32 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 7
D 10
.\" Copyright (c) 1990 The Regents of the University of California.
E 10
I 10
D 12
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 10
.\" All rights reserved.
E 12
I 12
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 12
.\"
.\" This code is derived from software contributed to Berkeley by
D 11
.\" Chris Torek.
E 11
I 11
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
E 11
D 10
.\"
E 10
.\" %sccs.include.redist.man%
.\"
E 7
I 1
D 10
.\"	%W% (Berkeley) %G%
E 10
I 10
.\"     %W% (Berkeley) %G%
E 10
.\"
D 2
.TH GETC 3S 
E 2
I 2
D 3
.TH GETC 3S  "19 January 1983"
E 3
I 3
D 6
.TH GETC 3S  "%Q%"
E 6
I 6
D 7
.TH GETC 3  "%Q%"
E 6
E 3
E 2
.AT 3
E 7
I 7
D 10
.TH GETC 3 "%Q%"
.UC 7
E 7
.SH NAME
D 7
getc, getchar, fgetc, getw \- get character or word from stream
E 7
I 7
fgetc, getc, getchar, getw \- get a character or word from a stream
E 7
.SH SYNOPSIS
D 7
.B #include <stdio.h>
.PP
.B int getc(stream)
.br
.SM
.B FILE
.B *stream;
.PP
.B int getchar()
.PP 
.B int fgetc(stream)
.br
.SM
.B FILE
.B *stream;
.PP
.B int getw(stream)
.br
.SM
.B FILE
.B *stream;
E 7
I 7
.nf
.ft B
#include <stdio.h>

int
fgetc(FILE *stream);

int
getc(FILE *stream);

int
D 8
getchar()
E 8
I 8
getchar();
E 8

int
getw(FILE *stream);
.ft R
.fi
E 7
.SH DESCRIPTION
I 7
.I Fgetc
returns the next input character from the given
.IR stream ,
or the next character pushed back via
.IR ungetc .
.PP
E 7
.I Getc
E 10
I 10
.Dd %Q%
.Dt GETC 3
.Os
.Sh NAME
.Nm fgetc ,
.Nm getc ,
.Nm getchar ,
.Nm getw
.Nd get next character or word from input stream
.Sh SYNOPSIS
.Fd #include <stdio.h>
.Ft int
.Fn fgetc "FILE *stream"
.Ft int
.Fn getc "FILE *stream"
.Ft int
.Fn getchar 
.Ft int
.Fn getw "FILE *stream"
.Sh DESCRIPTION
The
.Fn fgetc
function
obtains the next input character (if present) from the stream pointed at by
.Fa stream ,
or the next character pushed back on the stream via
.Xr ungetc .
.Pp
The
.Fn getc
function
E 10
D 7
returns the next character from the named input
.IR stream .
E 7
I 7
acts essentially identically to
D 10
.IR fgetc ,
E 10
I 10
.Fn fgetc ,
E 10
but is a macro that expands in-line.
E 7
D 10
.PP
D 2
.I Getchar()
E 2
I 2
D 7
.IR Getchar ()
E 2
is identical to 
D 2
.IR getc(stdin) .
E 2
I 2
.IR getc ( stdin ) .
E 7
I 7
.I Getchar
is identical to ``getc(stdin)''.
E 7
E 2
.PP
D 7
.I Fgetc
behaves like 
D 2
.I getc,
E 2
I 2
.IR getc ,
E 2
but is a genuine function, not a macro;
it may be used to save object text.
.PP
E 7
.I Getw
returns the next
D 2
word (32-bit integer on a VAX-11) from the named input
E 2
I 2
D 5
word (in a 32-bit integer on a VAX-11) from the named input
E 5
I 5
.B int
D 7
(a 32-bit integer on a VAX-11) from the named input
E 7
I 7
from the named input
E 7
E 5
E 2
.IR stream .
D 7
It returns the constant
.SM
E 7
I 7
.SH "RETURN VALUE"
These functions return the integer constant
E 7
.B EOF
D 7
upon end of file or error, but since that is a good
integer value,
.I feof
E 7
I 7
at end-of-file, upon read error, or if an attempt is made to read a
write-only stream.
Callers must use 
.I feof 
E 10
I 10
.Pp
The
.Fn getchar
function
is equivalent to:
getc with the argument stdin.
.Pp
The
.Fn getw
function
obtains the next
.Em int
(if present)
from the stream pointed at by
.Fa stream .
.Sh RETURN VALUES
If successful, these routines return the next requested object
from the
.Fa stream .
If the stream is at end-of-file or a read error occurs,
the routines return
.Dv EOF .
The routines
.Xr feof 3
E 10
E 7
and
D 2
.IR  ferror (3)
E 2
I 2
D 6
.IR  ferror (3S)
E 6
I 6
D 7
.IR  ferror (3)
E 6
E 2
should be used to check the success of
.IR getw .
.I Getw
assumes no special alignment in the file.
.SH "SEE ALSO"
I 5
D 6
clearerr(3S),
E 5
D 2
fopen(3), putc(3),
gets(3), scanf(3),
fread(3),
ungetc(3)
E 2
I 2
fopen(3S),
putc(3S),
gets(3S),
scanf(3S),
fread(3S),
ungetc(3S)
E 6
I 6
clearerr(3),
fopen(3),
putc(3),
gets(3),
scanf(3),
fread(3),
ungetc(3)
E 6
E 2
.SH DIAGNOSTICS
These functions return the integer constant
.SM
E 7
I 7
D 10
.I ferror
to distinguish between end-of-file and error.
E 10
I 10
.Xr ferror 3
must be used to distinguish between end-of-file and error.
E 10
If an error occurs, the global variable
D 10
.I errno
E 10
I 10
.Va errno
E 10
is set to indicate the error.
The end-of-file condition is remembered, even on a terminal, and all
subsequent attempts to read will return
E 7
D 10
.B EOF
E 10
I 10
.Dv EOF
E 10
D 5
at end of file or upon read error.
.PP
A stop with message,
`Reading bad file', means an attempt has been made to
read from a stream that has not been opened for
reading by
E 5
I 5
D 7
at end of file, upon read error,
or if an attempt is made to read a file not opened by
E 5
.IR fopen .
I 5
The end-of-file condition is remembered,
even on a terminal,
and all subsequent attempts to read will return
.B EOF
E 7
until the condition is cleared with
D 6
.IR clearerr (3S).
E 6
I 6
D 7
.IR clearerr (3).
E 7
I 7
D 10
.IR clearerr .
.SH "SEE ALSO"
ferror(3), fread(3), fopen(3), putc(3), ungetc(3)
E 7
E 6
E 5
.SH BUGS
E 10
I 10
.Xr clearerr .
.Sh SEE ALSO
.Xr ferror 3 ,
.Xr fread 3 ,
.Xr fopen 3 ,
.Xr putc 3 ,
.Xr ungetc 3
.Sh STANDARDS
The
.Fn fgetc ,
.Fn getc
and
.Fn getchar
functions
conform to
.St -ansiC .
.Sh BUGS
E 10
I 7
Since
D 10
.B EOF
E 10
I 10
.Dv EOF
E 10
is a valid integer value,
D 10
.I feof
E 10
I 10
.Xr feof
E 10
and
D 10
.I ferror
E 10
I 10
.Xr ferror
E 10
must be used to check for failure after calling
D 10
.IR getw .
E 10
I 10
.Fn getw .
E 10
The size and byte order of an
D 10
.B int
E 10
I 10
.Em int
E 10
varies from one machine to another, and
D 10
.I getw
E 10
I 10
.Fn getw
E 10
is not recommended for portable applications.
D 10
.PP
E 7
D 5
The end-of-file return from
.I getchar
is incompatible with that in UNIX editions 1-6.
.PP
E 5
Because it is implemented as a macro,
.I getc
treats a
.I stream
argument with side effects incorrectly.
D 7
In particular,
`getc(*f++);'
doesn't work sensibly.
E 7
I 7
In particular, ``getc(*f++);'' may not work sensibly.
.SH STANDARDS
.IR Fgetc ,
.IR getc
and
.I getchar
conform to ANSI X3.159-1989 (``ANSI C'').
E 10
I 10
.Pp
E 10
E 7
E 1
