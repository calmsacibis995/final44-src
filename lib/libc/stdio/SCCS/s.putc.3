h03431
s 00002/00002/00101
d D 8.1 93/06/04 13:08:31 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00001/00100
d D 6.7 91/06/29 14:26:46 bostic 9 8
c add ANSI contribution notice
e
s 00083/00065/00018
d D 6.6 91/04/19 14:46:46 cael 8 7
c macro and text revision (-mdoc version 3)
e
s 00000/00000/00083
d D 6.5 91/04/19 14:41:37 cael 7 6
c macro and text revision (-mdoc version 3)
e
s 00064/00066/00019
d D 6.4 91/01/20 21:26:01 bostic 6 5
c new stdio
e
s 00008/00008/00077
d D 6.3 89/04/01 15:14:58 bostic 5 4
c remove subsection designations
e
s 00003/00003/00082
d D 6.2 85/11/06 14:17:11 bloom 4 3
c everything should be declared as returning an int
e
s 00001/00001/00084
d D 6.1 85/05/15 15:03:23 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00018/00041/00067
d D 5.1 85/05/15 15:03:15 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00108/00000/00000
d D 4.1 85/05/15 15:03:09 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 6
D 8
.\" Copyright (c) 1990 The Regents of the University of California.
E 8
I 8
D 10
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 8
.\" All rights reserved.
E 10
I 10
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 10
.\"
.\" This code is derived from software contributed to Berkeley by
D 9
.\" Chris Torek.
E 9
I 9
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
E 9
D 8
.\"
E 8
.\" %sccs.include.redist.man%
.\"
E 6
I 1
D 8
.\"	%W% (Berkeley) %G%
E 8
I 8
.\"     %W% (Berkeley) %G%
E 8
.\"
D 2
.TH PUTC 3S 
E 2
I 2
D 3
.TH PUTC 3S  "19 January 1983"
E 3
I 3
D 5
.TH PUTC 3S  "%Q%"
E 5
I 5
D 6
.TH PUTC 3  "%Q%"
E 5
E 3
E 2
.AT 3
E 6
I 6
D 8
.TH PUTC 3 "%Q%"
.UC 7
E 6
.SH NAME
D 6
putc, putchar, fputc, putw \- put character or word on a stream
E 6
I 6
fputc, putc, putchar, putw \- put a character or word to a stream
E 6
.SH SYNOPSIS
D 6
.B #include <stdio.h>
.PP
.B int putc(c, stream)
.br
.B char c;
.br
.SM
.B FILE
.B *stream;
.PP
D 4
.B putchar(c)
E 4
I 4
.B int putchar(c)
E 4
.PP
D 4
.B fputc(c, stream)
E 4
I 4
.B int fputc(c, stream)
E 4
.br
.SM
.B FILE
.B *stream;
.PP
D 4
.B putw(w, stream)
E 4
I 4
.B int putw(w, stream)
E 4
.br
.SM
.B FILE
.B *stream;
E 6
I 6
.nf
.ft B
#include <stdio.h>

int
fputc(int c, FILE *stream);

int
putc(int c, FILE *stream);

int
putchar(int c);

int
putw(int w, FILE *stream);
.ft R
.fi
E 6
.SH DESCRIPTION
D 6
.I Putc
appends the character
E 6
I 6
.I Fputc
E 8
I 8
.Dd %Q%
.Dt PUTC 3
.Os
.Sh NAME
.Nm fputc ,
.Nm putc ,
.Nm putchar ,
.Nm putw
.Nd output a character or word to a stream
.Sh SYNOPSIS
.Fd #include <stdio.h>
.Ft int
.Fn fputc "int c" "FILE *stream"
.Ft int
.Fn putc "int c" "FILE *stream"
.Ft int
.Fn putchar "int c"
.Ft int
.Fn putw "int w" "FILE *stream"
.Sh DESCRIPTION
The
.Fn fputc
function
E 8
writes the character
E 6
D 8
.I c
E 8
I 8
.Fa c
E 8
D 6
to the named output
E 6
I 6
(converted to an ``unsigned char'')
D 8
to the specified output
E 6
.IR stream .
D 6
It returns the character written.
E 6
.PP
D 2
.I Putchar(c)
E 2
I 2
D 6
.IR Putchar ( c )
E 2
is defined as 
D 2
.I "putc(c, stdout)."
E 2
I 2
.IR putc ( c ,
.BR stdout ).
E 6
I 6
.I Putc
E 8
I 8
to the output stream pointed to by
.Fa stream .
.Pp
.Fn Putc
E 8
acts essentially identically to
D 8
.IR fputc ,
but is a macro that expands in-line.
E 6
E 2
.PP
D 6
.I Fputc
behaves like 
D 2
.I putc,
E 2
I 2
.IR putc ,
E 2
but is a genuine function rather than a macro.
E 6
I 6
.I Putchar
E 8
I 8
.Fn fputc ,
but is a macro that expands in-line. It may evaluate
.Fa stream
more than once, so arguments given to
.Fn putc
should not be expressions with potential side effects.
.Pp
.Fn Putchar
E 8
is identical to
D 8
.I putc
E 8
I 8
.Fn putc
E 8
with an output stream of
D 8
.BR stdout .
E 6
D 2
It may be used to save on object text.
E 2
.PP
.I Putw
E 8
I 8
.Em stdout .
.Pp
The
.Fn putw
function
E 8
D 2
appends word 
(i.e.
E 2
I 2
D 6
appends word (that is,
E 2
.BR int )
.I w
to the output
E 6
I 6
writes the specified
D 8
.B int
E 8
I 8
.Em int
E 8
to the named output
E 6
D 8
.IR stream .
D 6
It returns the word written.
.I Putw
neither assumes nor causes special alignment in the file.
D 2
.PP
The standard stream
.I stdout
is normally buffered if and only if the
output does not refer to a terminal;
this default may be changed by
.IR setbuf (3).
The standard stream
.I stderr
is by default unbuffered unconditionally,
but use of
.I freopen
(see
.IR fopen (3))
will cause it to become buffered;
.IR setbuf ,
again, will set the state to whatever is desired.
When an output stream is unbuffered information appears on the
destination file or terminal as soon as written;
when it is buffered many characters are saved up and written as a block.
.I Fflush
(see 
.IR fclose (3))
may be used to force the block out early.
E 2
.SH "SEE ALSO"
D 2
fopen(3), fclose(3), getc(3),
puts(3), printf(3),
fread(3)
E 2
I 2
D 5
fopen(3S),
fclose(3S),
getc(3S),
puts(3S),
printf(3S),
fread(3S)
E 5
I 5
fopen(3),
fclose(3),
getc(3),
puts(3),
printf(3),
fread(3)
E 5
E 2
.SH DIAGNOSTICS
These functions return the constant
E 6
I 6
.SH "RETURN VALUE"
These functions return the integer constant
E 6
.SM
.B EOF
D 2
upon error.
Since this is a good integer,
.IR  ferror (3)
E 2
I 2
D 6
upon error.  Since this is a good integer,
D 5
.IR  ferror (3S)
E 5
I 5
.IR  ferror (3)
E 5
E 2
should be used to detect 
.I putw
errors.
E 6
I 6
upon write error,
or if an attempt is made to write a read-only stream.
.I Putw
E 8
I 8
.Fa stream .
.Sh RETURN VALUES
The functions,
.Fn fputc ,
.Fn putc
and
.Fn putchar
return the character written.
If an error occurs, the value
.Dv EOF
is returned.
The
.Fn putw
function
E 8
returns 0 on success;
D 8
the other functions return the character printed.
.SH "SEE ALSO"
ferror(3), fopen(3), getc(3), stdio(3)
E 6
.SH BUGS
E 8
I 8
.Dv EOF
is returned if
a write error occurs,
or if an attempt is made to write a read-only stream.
.Sh SEE ALSO
.Xr ferror 3 ,
.Xr fopen 3 ,
.Xr getc 3 ,
.Xr stdio 3
.Sh STANDARDS
The functions
.Fn fputc ,
.Fn putc ,
and
.Fn putchar ,
conform to
.St -ansiC .
A function
.Fn putw
function appeared in
.At v6 .
.Sh BUGS
E 8
I 6
The size and byte order of an
D 8
.B int
E 8
I 8
.Em int
E 8
varies from one machine to another, and
D 8
.I putw
E 8
I 8
.Fn putw
E 8
is not recommended for portable applications.
D 8
.PP
E 6
Because it is implemented as a macro,
.I putc
treats a
.I stream
D 2
argument with side effects improperly.
In particular
`putc(c, *f++);'
E 2
I 2
D 6
argument with side effects improperly.  In particular
.IP "putc(c, *f++);"
.PP
E 2
doesn't work sensibly.
.PP
Errors can occur long after the call to
D 2
.I putc.
E 2
I 2
.IR putc .
E 6
I 6
argument with side effects incorrectly.
In particular, ``putc(c, *f++);'' may not work sensibly
(although ``putc(*cp++, f);''
.I does
work correctly).
E 8
E 6
E 2
E 1
