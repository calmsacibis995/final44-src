h53311
s 00002/00002/00174
d D 8.1 93/06/04 13:09:27 bostic 14 13
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00050/00025/00126
d D 6.11 92/12/04 05:34:16 torek 13 12
c reality
e
s 00004/00000/00147
d D 6.10 91/06/29 14:38:34 bostic 12 11
c add ANSI contribution notice
e
s 00105/00087/00042
d D 6.9 91/04/19 14:46:24 cael 11 10
c macro and text revision (-mdoc version 3)
e
s 00000/00000/00129
d D 6.8 91/04/19 14:41:25 cael 10 9
c macro and text revision (-mdoc version 3)
e
s 00002/00002/00127
d D 6.7 91/03/05 14:54:39 bostic 9 8
c man page pass, minor cleanups
e
s 00001/00001/00128
d D 6.6 91/01/20 21:29:47 bostic 8 7
c messed up the copyright header and keywords
e
s 00088/00101/00041
d D 6.5 91/01/20 21:28:59 bostic 7 6
c new stdio
e
s 00011/00011/00131
d D 6.4 89/04/01 15:15:02 bostic 6 5
c remove subsection designations
e
s 00000/00002/00142
d D 6.3 87/10/16 12:38:11 bostic 5 4
c stderr should not be line buffered
e
s 00007/00001/00137
d D 6.2 86/05/12 19:55:30 karels 4 3
c tell them what to do
e
s 00001/00001/00137
d D 6.1 85/05/15 15:12:33 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00099/00022/00039
d D 5.1 85/05/15 15:12:20 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00061/00000/00000
d D 4.1 85/05/15 15:12:10 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 11
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 11
I 11
D 14
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 14
I 14
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 14
E 11
.\"
I 12
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
E 12
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
D 8
.\"	@(#)setbuf.3	6.4 (Berkeley) 4/1/89
E 8
I 8
D 11
.\"	%W% (Berkeley) %G%
E 11
I 11
.\" %sccs.include.redist.man%
E 11
E 8
E 7
.\"
D 2
.TH SETBUF 3S 
E 2
I 2
D 3
.TH SETBUF 3S  "19 January 1983"
E 3
I 3
D 6
.TH SETBUF 3S  "%Q%"
E 6
I 6
D 7
.TH SETBUF 3  "%Q%"
E 7
I 7
D 11
.TH SETBUF 3
E 7
E 6
E 3
E 2
.UC 4
.SH NAME
D 2
setbuf \- assign buffering to a stream
E 2
I 2
D 7
setbuf, setbuffer, setlinebuf \- assign buffering to a stream
E 7
I 7
setbuf, setbuffer, setlinebuf, setvbuf \- assign buffering to a stream
E 7
E 2
.SH SYNOPSIS
D 7
.B #include <stdio.h>
.PP
.B setbuf(stream, buf)
.br
.SM
.B FILE
.B *stream;
.br
.B char *buf;
I 2
.PP
.B setbuffer(stream, buf, size)
.br
.SM
.B FILE
.B *stream;
.br
.B char *buf;
.br
.B int size;
.PP
.B setlinebuf(stream)
.br
.SM
.B FILE
.B *stream;
E 7
I 7
.nf
.ft B
#include <stdio.h>

int
setbuf(FILE *stream, char *buf);

int
setbuffer(FILE *stream, char *buf, size_t size);

int
setlinebuf(FILE *stream);

int
setvbuf(FILE *stream, char *buf, int mode, size_t size);
.ft R
.fi
E 7
E 2
.SH DESCRIPTION
E 11
I 11
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt SETBUF 3
.Os BSD 4
.Sh NAME
.Nm setbuf ,
.Nm setbuffer ,
.Nm setlinebuf ,
.Nm setvbuf
.Nd stream buffering operations
.Sh SYNOPSIS
.Fd #include <stdio.h>
D 13
.Ft int
E 13
I 13
.Ft void
E 13
.Fn setbuf "FILE *stream" "char *buf"
D 13
.Ft int
E 13
I 13
.Ft void
E 13
.Fn setbuffer "FILE *stream" "char *buf" "size_t size"
.Ft int
.Fn setlinebuf "FILE *stream"
.Ft int
.Fn setvbuf "FILE *stream" "char *buf" "int mode" "size_t size"
.Sh DESCRIPTION
E 11
I 2
The three types of buffering available are unbuffered, block buffered,
and line buffered.
When an output stream is unbuffered, information appears on the
destination file or terminal as soon as written;
when it is block buffered many characters are saved up and written as a block;
when it is line buffered characters are saved up until a newline is
D 7
encountered or input is read from stdin.
E 7
I 7
output or input is read from any stream attached to a terminal device
(typically stdin).
E 7
D 11
.I Fflush
(see 
D 6
.IR fclose (3S))
E 6
I 6
.IR fclose (3))
E 11
I 11
The function
.Xr fflush 3
E 11
E 6
may be used to force the block out early.
I 11
(See 
.Xr fclose 3 . )
I 13
.Pp
E 13
E 11
Normally all files are block buffered.
D 11
A buffer is obtained from
D 7
.IR  malloc (3)
upon the first
.I getc
or
D 6
.IR  putc (3S)
E 6
I 6
.IR  putc (3)
E 6
on the file.
If the standard stream
E 7
I 7
.IR malloc (3)
upon the first read or write operation on the file.
E 11
I 11
When the first
.Tn I/O
operation occurs on a file,
.Xr malloc 3
is called,
D 13
and a buffer is obtained.
E 13
I 13
and an optimally-sized buffer is obtained.
E 13
E 11
If a stream refers to a terminal
(as
E 7
D 11
.B stdout
E 11
I 11
.Em stdout
E 11
D 7
refers to a terminal it is line buffered.
E 7
I 7
normally does) it is line buffered.
E 7
D 11
The standard stream
.B stderr
E 11
I 11
The standard error stream
.Em stderr
E 11
is always unbuffered.
D 11
.PP
E 2
D 7
.I Setbuf
D 2
is used after a stream has been opened but before it
is read or written.
It causes the character array
E 2
I 2
is used after a stream has been opened but before it is read or written.
The character array
E 7
I 7
.I Setvbuf
E 11
I 11
.Pp
The
.Fn setvbuf
function
E 11
D 13
may be used at any time on any open stream
to change its buffer.
E 13
I 13
may be used to alter the buffering behavior of a stream.
E 13
The
D 11
.I mode
E 11
I 11
.Fa mode
E 11
parameter must be one of the following three macros:
D 11
.RS
.TP 8
.B _IONBF
E 11
I 11
.Bl -tag -width _IOFBF -offset indent
.It Dv _IONBF
E 11
unbuffered
D 11
.br
.ns
.TP 8
.B _IOLBF
E 11
I 11
.It Dv _IOLBF
E 11
line buffered
D 11
.br
.ns
.TP 8
.B _IOFBF
E 11
I 11
.It Dv _IOFBF
E 11
fully buffered
D 11
.RE
.LP
E 11
I 11
.El
.Pp
E 11
D 13
Except for unbuffered files, the 
E 13
I 13
The
.Fa size
parameter may be given as zero
to obtain deferred optimal-size buffer allocation as usual.
If it is not zero,
then except for unbuffered files, the 
E 13
E 7
E 2
D 11
.I buf
E 11
I 11
.Fa buf
E 11
D 2
to be used instead of an automatically allocated buffer.
If
E 2
I 2
D 7
is used instead of an automatically allocated buffer.  If
E 2
.I buf
is the constant pointer
.SM
.B NULL,
input/output will be completely unbuffered.
D 2
.PP
E 2
A manifest constant 
.SM
.B BUFSIZ
tells how big an array is needed:
.IP
.B char
buf[BUFSIZ];
.PP
D 2
A buffer is normally obtained from
.IR  malloc (3)
upon the first
.I getc
E 2
I 2
.IR Setbuffer ,
an alternate form of 
.IR setbuf ,
is used after a stream has been opened but before it is read or written.
The character array
.I buf
whose size is determined by the 
E 7
I 7
argument should point to a buffer at least
E 7
D 11
.I size
E 11
I 11
.Fa size
E 11
D 7
argument is used instead of an automatically allocated buffer.  If
E 7
I 7
bytes long;
this buffer will be used instead of the current buffer.
D 11
If
E 7
.I buf
E 11
I 11
D 13
If the argument
E 13
I 13
(If the
.Fa size
argument
is not zero but
E 13
.Fa buf
E 11
D 7
is the constant pointer
.SM
.BR NULL ,
input/output will be completely unbuffered.
E 7
I 7
D 13
is NULL,
only the mode is affected;
a new buffer will be allocated on the next read or write operation.
E 13
I 13
is
.Dv NULL ,
a buffer of the given size will be allocated immediately,
and released on close.
This is an extension to ANSI C;
portable code should use a size of 0 with any
.Dv NULL
buffer.)
.Pp
E 13
D 11
.I Setvbuf
E 11
I 11
The
.Fn setvbuf
D 13
function
E 11
may be used at any time,
but can only change the mode of a stream
when it is not ``active'':
D 11
that is, before any I/O,
E 11
I 11
that is, before any
.Tn I/O ,
E 11
or immediately after a call to
D 11
.IR fflush .
E 7
.PP
E 11
I 11
.Xr fflush .
E 13
I 13
function may be used at any time,
but may have peculiar side effects
(such as discarding input or flushing output)
if the stream is ``active''.
Portable applications should call it only once on any given stream,
and before any 
.Tn I/O
is performed.
E 13
.Pp
E 11
D 7
.I Setlinebuf
is used to change
.I stdout
E 2
or
D 2
.IR  putc (3)
on the file,
except that the standard output is line buffered when directed to a terminal.
Other output streams directed to terminals,
and the standard error stream
E 2
.I stderr
D 2
are normally not buffered.
If the standard output is line buffered, then it is flushed each time
data is read from the standard input by
.IR read (2).
E 2
I 2
from block buffered or unbuffered to line buffered.
Unlike
.I setbuf
and
.I setbuffer
it can be used at any time that the file descriptor is active.
.PP
A file can be changed from unbuffered or line buffered to block buffered
by using
.I freopen
(see
D 6
.IR fopen (3S)).
E 6
I 6
.IR fopen (3)).
E 6
A file can be changed from block buffered or line buffered to unbuffered
by using
.I freopen
followed by
.I setbuf
with a buffer argument of 
E 7
I 7
D 13
The other three calls are, in effect, simply aliases
for calls to
E 13
I 13
The other three calls are, in effect, simply aliases for calls to
E 13
D 11
.IR setvbuf .
.I Setbuf
E 11
I 11
.Fn setvbuf .
D 13
The
E 13
I 13
Except for the lack of a return value, the
E 13
.Fn setbuf
D 13
function
E 11
is exactly equivalent to the call
E 13
I 13
function is exactly equivalent to the call
E 13
D 11
.sp
.ti +0.5i
setvbuf(stream, buf, buf ? _IOFBF : _IONBF, BUFSIZ);
.sp
.I Setbuffer
E 11
I 11
.Pp
D 13
.Dl setvbuf(stream, buf, buf ? _IOFBF : _IONBF, BUFSIZ);
E 13
I 13
.Dl "setvbuf(stream, buf, buf ? _IOFBF : _IONBF, BUFSIZ);"
E 13
.Pp
The
.Fn setbuffer
function
E 11
is the same, except that the size of the buffer is up to the caller,
D 11
rather than being determined by the manifest constant
E 7
.SM
D 7
.BR NULL .
E 7
I 7
.BR BUFSIZ .
.I Setlinebuf
is exactly equivalent to the call
.sp
.ti +0.5i
setvbuf(stream, (char *)NULL, _IOLBF, 0);
E 7
E 2
.SH "SEE ALSO"
D 2
fopen(3), getc(3), putc(3), malloc(3)
E 2
I 2
D 6
fopen(3S),
getc(3S),
putc(3S),
E 6
I 6
D 7
fopen(3),
getc(3),
putc(3),
E 6
malloc(3),
D 6
fclose(3S),
puts(3S),
printf(3S),
fread(3S)
E 6
I 6
fclose(3),
puts(3),
printf(3),
fread(3)
E 7
I 7
fopen(3), fclose(3), fread(3), malloc(3), puts(3), printf(3)
.SH STANDARDS
.I Setbuf  
E 11
I 11
rather than being determined by the default
.Dv BUFSIZ .
The
.Fn setlinebuf
function
is exactly equivalent to the call:
.Pp
D 13
.Dl setvbuf(stream, (char *)NULL, _IOLBF, 0);
E 13
I 13
.Dl "setvbuf(stream, (char *)NULL, _IOLBF, 0);"
.Sh RETURN VALUES
The
.Fn setvbuf
function returns 0 on success, or
.Dv EOF
if the request cannot be honored
(note that the stream is still functional in this case).
.Pp
The
.Fn setlinebuf
function returns what the equivalent
.Fn setvbuf
would have returned.
E 13
.Sh SEE ALSO
.Xr fopen 3 ,
.Xr fclose 3 ,
.Xr fread 3 ,
.Xr malloc 3 ,
.Xr puts 3 ,
.Xr printf 3
.Sh STANDARDS
The
.Fn setbuf
E 11
and
D 11
.I setvbuf
D 9
onform to ANSI X3.159-1989 (``ANSI C'').
E 9
I 9
conform to ANSI X3.159-1989 (``ANSI C'').
E 9
E 7
E 6
E 2
.SH BUGS
E 11
I 11
.Fn setvbuf
functions
conform to
.St -ansiC .
.Sh BUGS
E 11
D 5
The standard error stream should be line buffered by default.
I 2
.LP
E 5
The
D 11
.I setbuffer
E 11
I 11
.Fn setbuffer
E 11
and
D 11
.I setlinebuf
D 4
functions are not portable to non 4.2 BSD versions of UNIX.
E 4
I 4
D 9
functions are not portable to non-4.2BSD versions of UNIX.
E 9
I 9
functions are not portable to versions of BSD UNIX before 4.2BSD.
E 9
On 4.2BSD and 4.3BSD systems,
.I setbuf
E 11
I 11
.Fn setlinebuf
functions are not portable to versions of
.Bx
before
.Bx 4.2 .
On
.Bx 4.2
and
.Bx 4.3
systems,
.Fn setbuf
E 11
always uses a suboptimal buffer size and should be avoided.
D 7
.I Setbuffer
is not usually needed
as the default file I/O buffer sizes are optimal.
E 7
E 4
E 2
E 1
