h16660
s 00001/00001/00260
d D 8.7 94/04/19 07:27:45 bostic 15 14
c spell
e
s 00002/00002/00259
d D 8.6 93/12/11 22:38:04 mckusick 14 13
c copyediting for Usenix manuals
e
s 00038/00014/00223
d D 8.5 93/11/16 14:17:41 torek 13 12
c clarify text/binary nondistinction; fix up wording on buffering
e
s 00002/00002/00235
d D 8.4 93/11/16 12:58:35 bostic 12 11
c more typos
e
s 00001/00001/00236
d D 8.3 93/11/16 12:57:18 bostic 11 10
c typo
e
s 00002/00001/00235
d D 8.2 93/11/16 12:44:27 bostic 10 9
c mention mkstemp
e
s 00002/00002/00234
d D 8.1 93/06/04 13:09:47 bostic 9 8
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00224/00172/00012
d D 6.5 91/05/06 18:28:46 cael 8 6
c mdoc version three/bsd copyright
e
s 00163/00172/00012
d R 6.5 91/04/29 04:43:28 cael 7 6
c mdoc version three/bsd copyright (this needs a shakedown)
e
s 00011/00060/00173
d D 6.4 91/03/05 14:54:41 bostic 6 5
c man page pass, minor cleanups
e
s 00136/00082/00097
d D 6.3 91/01/20 21:30:56 bostic 5 4
c new stdio
e
s 00001/00001/00178
d D 6.2 86/05/13 07:51:54 mckusick 4 3
c name change (forwards into the past)
e
s 00001/00001/00178
d D 6.1 85/05/15 15:51:26 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00086/00038/00093
d D 5.1 85/05/15 15:50:54 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00131/00000/00000
d D 4.1 85/05/15 15:50:16 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1980 Regents of the University of California.
E 5
I 5
D 8
.\" Copyright (c) 1990 Regents of the University of California.
E 5
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 8
I 8
D 9
.\" Copyright (c) 1990, 1991 Regents of the University of California.
.\" All rights reserved.
E 9
I 9
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 9
E 8
.\"
D 8
.\"	%W% (Berkeley) %G%
E 8
I 8
.\" %sccs.include.redist.man%
E 8
.\"
D 2
.TH STDIO 3S 
E 2
I 2
D 3
.TH INTRO 3S "18 July 1983"
E 3
I 3
D 4
.TH INTRO 3S "%Q%"
E 4
I 4
D 5
.TH STDIO 3S "%Q%"
E 5
I 5
D 8
.TH STDIO 3 "%Q%"
E 5
E 4
E 3
E 2
.UC 4
.SH NAME
stdio \- standard buffered input/output package
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.SM
.B FILE
.B *stdin;
.br
.SM
.B FILE
.B *stdout;
.br
.SM
.B FILE
.B *stderr;
.SH DESCRIPTION
D 2
The functions described in Sections 3S constitute an efficient
user-level buffering scheme.
The in-line macros
E 2
I 2
D 5
The functions described in section 3S constitute a user-level buffering
scheme.  The in-line macros
E 2
.I getc
E 5
I 5
The functions described here constitute a user-level buffering scheme.
The in-line macros
.IR getc (3)
E 8
I 8
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt STDIO 3
.Os BSD 4
.Sh NAME
.Nm stdio
.Nd standard input/output library functions
.Sh SYNOPSIS
.Fd #include <stdio.h>
.Fd FILE *stdin;
.Fd FILE *stdout;
.Fd FILE *stderr;
.Sh DESCRIPTION
The standard
.Tn I/O
library provides a simple and efficient buffered stream
.Tn I/O
interface.
Input and ouput is mapped into logical data streams
and the physical
.Tn I/O
characteristics are concealed. The functions and macros are listed
below; more information is available from the individual man pages.
.Pp
A stream is associated with an external file (which may be a physical
device) by
.Em opening
a file, which may involve creating a new file. Creating an
existing file causes its former contents to be discarded.
If a file can support positioning requests (such as a disk file, as opposed
to a terminal) then a
.Em file position indicator
associated with the stream is positioned at the start of the file (byte
D 14
zero), unless the file is opened with appened mode. If append mode
E 14
I 14
zero), unless the file is opened with appended mode. If append mode
E 14
is used, the position indicator will be placed the end-of-file.
The position indicator is maintained by subsequent reads, writes
and positioning requests. All input occurs as if the characters
were read by successive calls to the
.Xr fgetc 3
function; all ouput takes place as if all characters were
read by successive calls to the
.Xr fputc 3
function.
.Pp
A file is disassociated from a stream by
.Em closing
the file.
D 15
Ouput streams are flushed (any unwritten buffer contents are transfered
E 15
I 15
Ouput streams are flushed (any unwritten buffer contents are transferred
E 15
to the host environment) before the stream is disassociated from the file.
The value of a pointer to a
.Dv FILE
object is indeterminate after a file is closed (garbage).
.Pp
A file may be subsequently reopened, by the same or another program
execution, and its contents reclaimed or modified (if it can be repositioned
at the start).  If the main function returns to its original caller, or
the
.Xr exit 3
function is called, all open files are closed (hence all output
streams are flushed) before program termination.  Other methods
of program termination, such as
.Xr abort 3
do not bother about closing files properly.
.Pp
D 13
At program startup, three text streams are predefined and need not be
opened explicitly
\(em
E 13
I 13
This implementation needs and makes
no distinction between
.Dq text
and
.Dq binary
streams.
In effect, all streams are binary.
No translation is performed and no extra padding appears on any stream.
.Pp
At program startup, three streams are predefined and need not be
opened explicitly:
.Bl -bullet -compact -offset indent
.It
E 13
.Em standard input 
D 12
(for reading converntional input),
E 12
I 12
(for reading conventional input),
E 12
D 13
\(em
E 13
I 13
.It
E 13
.Em standard output 
D 12
(for writing converntional input),
E 12
I 12
D 13
(for writing conventional input),
E 12
E 8
E 5
and
E 13
I 13
(for writing conventional input), and
.It
E 13
D 2
.IR  putc (3)
handle characters quickly.
The higher level routines
.I "gets, fgets, scanf, fscanf, fread,"
.I "puts, fputs, printf, fprintf, fwrite"
E 2
I 2
D 5
.IR  putc (3S)
handle characters quickly.  The higher level routines
.IR gets ,
.IR fgets ,
.IR scanf ,
.IR fscanf ,
.IR fread ,
.IR puts ,
.IR fputs ,
.IR printf ,
.IR fprintf ,
.IR fwrite
E 5
I 5
D 8
.IR putc (3)
handle characters quickly.
The higher level routines in
.I stdio
E 5
E 2
all use
.I getc
E 8
I 8
.Em standard error
(for writing diagnostic output).
I 13
.El
E 13
These streams are abbreviated
.Em stdin , stdout
E 8
and
D 2
.I putc;
E 2
I 2
D 8
.IR putc ;
E 2
they can be freely intermixed.
.PP
A file with associated buffering is called a
D 2
.I stream,
E 2
I 2
.IR stream ,
E 2
and is declared to be a pointer to a defined type
.SM
D 2
.B FILE.
.IR  Fopen (3)
E 2
I 2
.BR FILE .
D 5
.IR  Fopen (3S)
E 2
creates certain descriptive data for a stream
D 2
and returns a pointer to designate the stream in all
further transactions.
There are three normally open streams with constant
pointers declared in
E 2
I 2
and returns a pointer to designate the stream in all further transactions.
E 5
I 5
.IR Fopen (3)
and
.IR funopen (3)
create certain descriptive data for a stream
and return a pointer to designate the stream in all further transactions.
E 5
There are three normally open streams with constant pointers declared in
E 2
the include file and associated with the standard open files:
.TP 10n
D 2
.BR stdin
E 2
I 2
.B stdin
E 2
standard input file
.br
.ns
.TP
.B stdout
standard output file
.br
.ns
.TP
D 2
.BR stderr
E 2
I 2
.B stderr
E 2
standard error file
.PP
A constant `pointer'
.SM
.B NULL
(0)
designates no stream at all.
.PP
An integer constant
.SM
.B EOF
D 2
(\-1) is returned
upon end of file or error by integer functions that
E 2
I 2
(\-1) is returned upon end of file or error by integer functions that
E 2
deal with streams.
.PP
Any routine that uses the standard input/output package
D 2
must include the header file <stdio.h> of pertinent
macro definitions.
E 2
I 2
must include the header file
D 5
.RI < stdio.h >
of pertinent macro definitions.
E 2
The functions and constants mentioned in sections labeled 3S
E 5
I 5
.RI < stdio.h > .
The constants and functions listed here
E 5
D 2
are declared in the include file
and need no further declaration.
E 2
I 2
are declared in the include file and need no further declaration.
E 2
D 5
The constants, and the following `functions' are
D 2
implemented as macros; redeclaration of these names
is perilous:
.I getc,
.I getchar,
.I putc,
.I putchar,
.I feof,
.I ferror,
E 2
I 2
implemented as macros; redeclaration of these names is perilous:
E 5
I 5
The following are implemented as macros;
these names may not be reused
without first removing their current definitions with
.BR #undef :
D 6
.IR NULL ,
.IR BUFSIZ ,
.IR EOF ,
.IR FOPEN_MAX ,
.IR FILENAME_MAX ,
.IR L_tmpnam ,
.IR SEEK_SET ,
.IR SEE_CUR ,
.IR SEEK_END ,
.IR TMP_MAX ,
.IR stdin ,
.IR stdout ,
.IR stderr ,
.IR fropen ,
.IR fwopen ,
.IR feof ,
.IR ferror ,
.IR clearerr ,
.IR fileno ,
E 5
.IR getc ,
.IR getchar ,
.IR putc ,
.IR putchar ,
I 5
.IR L_cuserid .
Function versions of the macro functions
E 5
.IR feof ,
.IR ferror ,
E 2
D 5
.IR fileno .
E 5
I 5
.IR clearerr ,
.IR fileno ,
.IR getc ,
.IR getchar ,
.IR putc ,
and
.I putchar
exist and will be used if the macros definitions are explicitly removed.
E 6
I 6
BUFSIZ, EOF, FILENAME_MAX, FOPEN_MAX, L_cuserid, L_tmpnam, NULL,
SEEK_END, SEEK_SET, SEE_CUR, TMP_MAX, clearerr, feof, ferror,
fileno, fropen, fwopen, getc, getchar, putc, putchar, stderr,
stdin, stdout.
Function versions of the macro functions feof, ferror, clearerr, fileno,
getc, getchar, putc, and putchar exist and will be used if the macros
definitions are explicitly removed.
E 6
.PP
E 8
I 8
.Em stderr .
D 13
When opened, the standard error stream
is not fully buffered; the standard input and output streams are
E 13
I 13
Initially, the standard error stream
is unbuffered; the standard input and output streams are
E 13
D 14
fully buffered if and only if the streams do not to refer to
E 14
I 14
fully buffered if and only if the streams do not refer to
E 14
D 13
an interactive device.
.Pp
E 8
Output streams that refer to terminal devices
are always line buffered by default;
E 13
I 13
an interactive or
.Dq terminal
device, as determined by the
.Xr isatty 3
function.
In fact,
.Em all
freshly-opened streams that refer to terminal devices
default to line buffering, and
E 13
pending output to such streams is written automatically
D 13
whenever an input stream that refers to a terminal device is read.
In cases where a large amount of computation is done after printing
E 13
I 13
whenever an such an input stream is read.
Note that this applies only to
.Dq "true reads" ;
if the read request can be satisfied by existing buffered data,
no automatic flush will occur.
In these cases,
or when a large amount of computation is done after printing
E 13
part of a line on an output terminal, it is necessary to
D 8
.IR fflush (3)
E 8
I 8
.Xr fflush 3
E 8
the standard output before going off and computing so that the output
will appear.
I 13
Alternatively, these defaults may be modified via the
.Xr setvbuf 3
function.
E 13
E 5
D 8
.SH "SEE ALSO"
D 2
open(2), close(2), read(2), write(2)
E 2
I 2
D 5
open(2), close(2), read(2), write(2), fread(3S), fseek(3S), f*(3S)
E 2
.SH DIAGNOSTICS
E 5
I 5
open(2), close(2), read(2), write(2)
.br
D 6
all of the manuals listed below
E 6
I 6
all of the manual entries listed below
E 6
.SH "RETURN VALUE"
E 5
The value
.SM
.B EOF
is returned uniformly to indicate that a
.SM
.B FILE
pointer has not been initialized with
D 2
.I fopen,
input (output) has been attempted on an output (input) stream,
or a
E 2
I 2
.IR fopen ,
input (output) has been attempted on an output (input) stream, or a
E 2
.SM
.B FILE
pointer designates corrupt or otherwise unintelligible
.SM
.B FILE
data.
D 5
.PP
For purposes of efficiency, this implementation of the standard library
has been changed to line buffer output to a terminal by default and attempts
to do this transparently by flushing the output whenever a 
.IR read (2)
from the standard input is necessary.  This is almost always transparent,
but may cause confusion or malfunctioning of programs which use
standard i/o routines but use
.IR read (2)
themselves to read from the standard input.
.PP
In cases where a large amount of computation is done after printing
part of a line on an output terminal, it is necessary to
D 2
.IR fflush (3)
E 2
I 2
.IR fflush (3S)
E 2
the standard output before going off and computing so that the output
will appear.
E 5
I 2
.SH BUGS
The standard buffered functions do not interact well with certain other
library and system functions, especially \fIvfork\fP and \fIabort\fP.
.SH "LIST OF FUNCTIONS"
.sp 2
.nf
D 5
.ta \w'setlinebuf'u+2n +\w'setbuf.3s'u+10n
E 5
I 5
.ta \w'setlinebuf'u+2n +\w'setvbuf.3'u+10n
E 5
\fIName\fP	\fIAppears on Page\fP	\fIDescription\fP
D 5
.ta \w'setlinebuf'u+4n +\w'setbuf.3s'u+4n
E 5
I 5
.ta \w'setlinebuf'u+4n +\w'setvbuf.3'u+4n
E 5
.sp 5p
D 5
clearerr	ferror.3s	stream status inquiries
fclose	fclose.3s	close or flush a stream
fdopen	fopen.3s	open a stream
feof	ferror.3s	stream status inquiries
ferror	ferror.3s	stream status inquiries
fflush	fclose.3s	close or flush a stream
fgetc	getc.3s	get character or word from stream
fgets	gets.3s	get a string from a stream
fileno	ferror.3s	stream status inquiries
fopen	fopen.3s	open a stream
fprintf	printf.3s	formatted output conversion
fputc	putc.3s	put character or word on a stream
fputs	puts.3s	put a string on a stream
fread	fread.3s	buffered binary input/output
freopen	fopen.3s	open a stream
fscanf	scanf.3s	formatted input conversion
fseek	fseek.3s	reposition a stream
ftell	fseek.3s	reposition a stream
fwrite	fread.3s	buffered binary input/output
getc	getc.3s	get character or word from stream
getchar	getc.3s	get character or word from stream
gets	gets.3s	get a string from a stream
getw	getc.3s	get character or word from stream
printf	printf.3s	formatted output conversion
putc	putc.3s	put character or word on a stream
putchar	putc.3s	put character or word on a stream
puts	puts.3s	put a string on a stream
putw	putc.3s	put character or word on a stream
rewind	fseek.3s	reposition a stream
scanf	scanf.3s	formatted input conversion
setbuf	setbuf.3s	assign buffering to a stream
setbuffer	setbuf.3s	assign buffering to a stream
setlinebuf	setbuf.3s	assign buffering to a stream
sprintf	printf.3s	formatted output conversion
sscanf	scanf.3s	formatted input conversion
ungetc	ungetc.3s	push character back into input stream
E 5
I 5
clearerr	ferror.3	stream status inquiries
fclose	fclose.3	close a stream
fdopen	fopen.3	open a stream
feof	ferror.3	stream status inquiries
ferror	ferror.3	stream status inquiries
fflush	fflush.3	flush a stream
fgetc	getc.3	get a character or word from a stream
fgetline	fgetline.3	get a line from a stream
fgetpos	fseek.3	reposition a stream
fgets	fgets.3	get a line from a stream
fileno	ferror.3	stream status inquiries
fmemopen	fmemopen.3	open a block of memory as a stream
fopen	fopen.3	open a stream
fprintf	printf.3	formatted output conversion
fpurge	fpurge.3	discard buffered stream data
fputc	putc.3	put a character or word to a stream
fputs	fputs.3	put a line to a stream
fread	fread.3	stream binary input/output
freopen	fopen.3	open a stream
fscanf	scanf.3	formatted input conversion
fseek	fseek.3	reposition a stream
fsetpos	fseek.3	reposition a stream
ftell	fseek.3	reposition a stream
funopen	fopen.3	open a stream
fwrite	fread.3	stream binary input/output
getc	getc.3	get a character or word from a stream
getchar	getc.3	get a character or word from a stream
gets	fgets.3	get a line from a stream
getw	getc.3	get a character or word from a stream
printf	printf.3	formatted output conversion
putc	putc.3	put a character or word to a stream
putchar	putc.3	put a character or word to a stream
puts	fputs.3	put a line to a stream
putw	putc.3	put a character or word to a stream
D 6
remove	remove.3	remove a file	xxx
E 6
I 6
remove	remove.3	remove a file
E 6
rewind	fseek.3	reposition a stream
scanf	scanf.3	formatted input conversion
setbuf	setvbuf.3	assign buffering to a stream
setbuffer	setvbuf.3	assign buffering to a stream
setlinebuf	setvbuf.3	assign buffering to a stream
setvbuf	setvbuf.3	assign buffering to a stream
D 6
.\" smprintf	printf.3	formatted output conversion
E 6
snprintf	printf.3	formatted output conversion
sprintf	printf.3	formatted output conversion
D 6
tmpfile	xxx.3	xxx
tmpnam	xxx.3	xxx
E 6
I 6
tmpfile	tmpnam.3	create a temporary stream
tmpnam	tmpnam.3	create a temporary file name
E 6
ungetc	ungetc.3	push character back into input stream
vfprintf	printf.3	formatted output conversion
vprintf	printf.3	formatted output conversion
D 6
.\" vsmprintf	printf.3	formatted output conversion
E 6
vsnprintf	printf.3	formatted output conversion
vsprintf	printf.3	formatted output conversion
D 6
.fi
.sp 2
Although these have nothing to do with `standard I/O',
the following declarations also appear in
.RI < stdio.h >
as required by ANSI X3.159-1989 and IEEE 1003.2 standards:
.sp
.nf
.ta \w'setlinebuf'u+2n +\w'setvbuf.3'u+10n
\fIName\fP	\fIAppears on Page\fP	\fIDescription\fP
.ta \w'setlinebuf'u+4n +\w'setvbuf.3'u+4n
.sp 5p
cuserid	cuserid.3	xxx
getlogin	getlogin.3	get login name
pclose	popen.3	initiate I/O to/from a process
perror	strerror.3	xxx
popen	popen.3	initiate I/O to/from a process
remove	remove.3	xxx
rename	rename.2	xxx
E 6
E 5
.fi
E 8
I 8
.Pp
The
.Nm stdio
library is a part of the library
.Xr libc
and routines are automatically loaded as needed by the compilers
.Xr cc 1
and
.Xr pc 1 .
The
.Tn SYNOPSIS
sections of the following manual pages indicate which include files
are to be used, what the compiler declaration for the function
looks like and which external variables are of interest.
.Pp
The following are defined as macros;
these names may not be re-used
without first removing their current definitions with
.Dv #undef :
.Dv BUFSIZ ,
.Dv EOF ,
.Dv FILENAME_MAX ,
.DV FOPEN_MAX ,
.Dv L_cuserid ,
.Dv L_ctermid ,
.Dv L_tmpnam,
.Dv NULL ,
.Dv SEEK_END ,
.Dv SEEK_SET ,
.Dv SEE_CUR ,
.Dv TMP_MAX ,
.Dv clearerr ,
.Dv feof ,
.Dv ferror ,
.Dv fileno ,
D 11
.Dv fropen ,
E 11
I 11
.Dv freopen ,
E 11
.Dv fwopen ,
.Dv getc ,
.Dv getchar ,
.Dv putc ,
.Dv putchar ,
.Dv stderr ,
.Dv stdin ,
.Dv stdout .
Function versions of the macro functions
.Xr feof ,
.Xr ferror ,
.Xr clearerr ,
.Xr fileno ,
.Xr getc ,
.Xr getchar ,
.Xr putc ,
and
.Xr putchar
exist and will be used if the macros
definitions are explicitly removed.
.Sh SEE ALSO
.Xr open 2 ,
.Xr close 2 ,
.Xr read 2 ,
.Xr write 2
.Sh BUGS
The standard buffered functions do not interact well with certain other
library and system functions, especially
.Xr vfork
and
.Xr abort .
.Sh STANDARDS
The
.Nm stdio
library conforms to
.St -ansiC .
.Sh LIST OF FUNCTIONS
.Bl -column "Description"
.Sy Function	Description
clearerr	check and reset stream status
fclose	close a stream
fdopen	stream open functions
feof	check and reset stream status
ferror	check and reset stream status
fflush	flush a stream
fgetc	get next character or word from input stream
fgetline	get a line from a stream
fgetpos	reposition a stream
fgets	get a line from a stream
fileno	check and reset stream status
fopen	stream open functions
fprintf	formatted output conversion
fpurge	flush a stream
fputc	output a character or word to a stream
fputs	output a line to a stream
fread	binary stream input/output
freopen	stream open functions
fropen	open a stream
fscanf	input format conversion
fseek	reposition a stream
fsetpos	reposition a stream
ftell	reposition a stream
funopen	open a stream
fwopen	open a stream
fwrite	binary stream input/output
getc	get next character or word from input stream
getchar	get next character or word from input stream
gets	get a line from a stream
getw	get next character or word from input stream
D 10
mktemp	make temporary file name (unique)
E 10
I 10
mkstemp	create unique temporary file
mktemp	create unique temporary file
E 10
perror	system error messages
printf	formatted output conversion
putc	output a character or word to a stream
putchar	output a character or word to a stream
puts	output a line to a stream
putw	output a character or word to a stream
remove	remove directory entry
rewind	reposition a stream
scanf	input format conversion
setbuf	stream buffering operations
setbuffer	stream buffering operations
setlinebuf	stream buffering operations
setvbuf	stream buffering operations
snprintf	formatted output conversion
sprintf	formatted output conversion
sscanf	input format conversion
strerror	system error messages
sys_errlist	system error messages
sys_nerr	system error messages
tempnam	temporary file routines
tmpfile	temporary file routines
tmpnam	temporary file routines
ungetc	un-get character from input stream
vfprintf	formatted output conversion
vfscanf	input format conversion
vprintf	formatted output conversion
vscanf	input format conversion
vsnprintf	formatted output conversion
vsprintf	formatted output conversion
vsscanf	input format conversion
.El
E 8
E 2
E 1
