h48090
s 00001/00001/00192
d D 8.2 93/11/17 05:12:52 bostic 16 15
c typo
e
s 00002/00002/00191
d D 8.1 93/06/04 13:10:00 bostic 15 14
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00004/00000/00189
d D 5.14 91/06/29 14:44:29 bostic 14 13
c add ANSI contribution notice
e
s 00130/00087/00059
d D 5.13 91/04/19 14:46:27 cael 13 12
c macro and text revision (-mdoc version 3)
e
s 00000/00000/00146
d D 5.12 91/04/19 14:41:26 cael 12 11
c macro and text revision (-mdoc version 3)
e
s 00068/00063/00078
d D 5.11 91/02/22 17:00:01 bostic 11 10
c cleanup, update, reimplement to work as correctly as possible
e
s 00117/00072/00018
d D 5.10 90/06/22 22:47:15 bostic 10 9
c redo the compat-sys5.3 manual page as the tmpnam.3 manual page
e
s 00002/00002/00088
d D 5.9 90/01/02 08:43:03 bostic 9 8
c memcpy & memccpy had args reversed; bug report 4.3BSD-tahoe/man/[89]
e
s 00003/00001/00087
d D 5.8 88/12/12 20:44:42 bostic 8 7
c add strdup
e
s 00001/00004/00087
d D 5.7 88/11/14 09:47:30 bostic 7 6
c strtok gets its own man page, with strsep
e
s 00001/00006/00090
d D 5.6 88/08/03 14:57:08 bostic 6 5
c treewalk is real; replace ftw with it
e
s 00004/00000/00092
d D 5.5 88/07/23 16:27:18 bostic 5 4
c add strtol(BA_LIB)
e
s 00006/00001/00086
d D 5.4 88/07/14 22:35:10 bostic 4 3
c add ftw
e
s 00010/00005/00077
d D 5.3 88/07/09 11:40:15 bostic 3 2
c install approved copyright notice
e
s 00020/00002/00062
d D 5.2 88/06/08 18:27:39 bostic 2 1
c add tmpfile(), tempnam() and associate commentary
e
s 00064/00000/00000
d D 5.1 88/06/03 18:38:12 bostic 1 0
c date and time created 88/06/03 18:38:12 by bostic
e
u
U
t
T
I 1
D 10
.\" Copyright (c) 1988 Regents of the University of California.
E 10
I 10
D 13
.\" Copyright (c) 1988 The Regents of the University of California.
E 13
I 13
D 15
.\" Copyright (c) 1988, 1991 The Regents of the University of California.
E 13
E 10
.\" All rights reserved.
E 15
I 15
.\" Copyright (c) 1988, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 15
.\"
I 14
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
E 14
D 10
.\" Redistribution and use in source and binary forms are permitted
D 3
.\" provided that this notice is preserved and that due credit is given
.\" to the University of California at Berkeley. The name of the University
.\" may not be used to endorse or promote products derived from this
.\" software without specific prior written permission. This software
.\" is provided ``as is'' without express or implied warranty.
E 3
I 3
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 10
I 10
.\" %sccs.include.redist.man%
E 10
E 3
.\"
D 13
.\"	%W% (Berkeley) %G%
E 13
I 13
.\"     %W% (Berkeley) %G%
E 13
.\"
D 10
.TH COMPATS5 3 "%Q%"
E 10
I 10
D 13
.TH TMPFILE 3 "%Q%"
E 10
.UC 7
.SH NAME
D 4
memccpy, memchr, memcmp, memcpy, memset, strchr, 
E 4
I 4
D 6
ftw, memccpy, memchr, memcmp, memcpy, memset, strchr, 
E 6
I 6
D 10
memccpy, memchr, memcmp, memcpy, memset, strchr,
E 6
E 4
D 2
strcspn, strpbrk, strrchr, strspn, strtok, tmpnam \- System V
compatibility routines
E 2
I 2
D 7
strcspn, strpbrk, strrchr, strspn, strtok, tempnam,
E 7
I 7
D 8
strcspn, strpbrk, strrchr, strspn, tempnam,
E 8
I 8
strcspn, strdup, strpbrk, strrchr, strspn, tempnam,
E 8
E 7
tmpfile, tmpnam \- System V compatibility routines
E 10
I 10
tempnam, tmpfile, tmpnam \- temporary file routines
E 10
E 2
.SH SYNOPSIS
.nf
I 4
D 6
.B #include <ftw.h>
.B ftw(path, fn, param)
.B char *path;
.B int (*fn)(), param;
.PP
E 6
E 4
D 9
.B char *memccpy(from, to, ch, count)
E 9
I 9
D 10
.B char *memccpy(to, from, ch, count)
E 9
.B char *from, *to;
.B int ch, count;
E 10
I 10
.ft B
#include <stdio.h>

FILE *
tmpfile(void);

char *
tmpnam(char *str);

char *
tempnam(const char *tmpdir, const char *prefix);
.ft R
.fi
.SH DESCRIPTION
.I Tmpfile
E 13
I 13
.Dd %Q%
.Dt TMPFILE 3
.Os
.Sh NAME
.Nm tempnam ,
.Nm tmpfile ,
.Nm tmpnam
.Nd temporary file routines
.Sh SYNOPSIS
.Fd #include <stdio.h>
.Ft FILE *
.Fn tmpfile void
.Ft char *
.Fn tmpnam "char *str"
.Ft char *
.Fn tempnam "const char *tmpdir" "const char *prefix"
.Sh DESCRIPTION
The
.Fn tmpfile
function
E 13
D 11
opens a file using a file name generated by the routine
.IR tmpnam (3),
and returns a pointer to the stream associated with the file.
E 11
I 11
returns a pointer to a stream associated with a file descriptor returned
by the routine
D 13
.IR mkstemp (3).
E 13
I 13
.Xr mkstemp 3 .
E 13
E 11
The created file is unlinked before
D 13
.I tmpfile
E 13
I 13
.Fn tmpfile
E 13
D 11
returns, causing the contents of the file to be deleted automatically
when the last reference to it is closed.
E 11
I 11
returns, causing the file to be automatically deleted when the last
reference to it is closed.
E 11
D 13
The file is opened with the access value ``w+''.
D 11
If
.I tmpnam
returns NULL, or if
.I tmpfile
is unable to open the file, a NULL pointer is returned.
E 11
E 10
.PP
D 10
.B char *memchr(str, ch, count)
.B char *str;
.B int ch, count;
E 10
I 10
.I Tmpnam
D 11
returns a pointer to a file name, in the directory ``/usr/tmp'', which
E 11
I 11
returns a pointer to a file name, in the ``P_tmpdir'' directory, which
E 13
I 13
The file is opened with the access value
.Ql w+ .
.Pp
The
.Fn tmpnam
function
returns a pointer to a file name, in the
.Dv P_tmpdir
directory, which
E 13
E 11
did not reference an existing file at some indeterminate point in the
past.
I 11
D 13
P_tmpdir is defined in the include file <stdio.h>.
E 13
I 13
.Dv P_tmpdir
is defined in the include file
.Aq Pa stdio.h .
E 13
E 11
If the argument
D 13
.I s
D 11
is non-NULL, this file name is copied to the buffer it references.
Otherwise, memory to contain this file name is allocated by
.IR tmpnam .
E 11
I 11
is non-NULL, the file name is copied to the buffer it references.
E 13
I 13
.Fa s
is
.Pf non- Dv NULL ,
the file name is copied to the buffer it references.
E 13
Otherwise, the file name is copied to a static buffer.
E 11
In either case,
D 13
.I tmpnam
E 13
I 13
.Fn tmpnam
E 13
D 11
returns a pointer to the file name; in the latter case, the return
value may be used as a subsequent argument to
.IR free (3).
E 11
I 11
returns a pointer to the file name.
E 11
E 10
D 13
.PP
E 13
I 13
.Pp
E 13
D 10
.B int memcmp(str1, str2, count)
.B char *str1, *str2;
.B int count;
E 10
I 10
D 11
In the current implementation, the memory buffer referenced by
E 11
I 11
The buffer referenced by 
E 11
D 13
.I s
D 11
must be at least 16 bytes long.
E 11
I 11
is expected to be at least ``L_tmpnam'' bytes in length.
L_tmpnam is defined in the include file <stdio.h>.
E 11
E 10
.PP
D 9
.B char *memcpy(from, to, count)
E 9
I 9
D 10
.B char *memcpy(to, from, count)
E 9
.B char *from, to;
.B int count;
E 10
I 10
.I Tempnam
E 13
I 13
.Fa s
is expected to be at least
.Dv L_tmpnam
bytes in length.
.Dv L_tmpnam
is defined in the include file
.Aq Pa stdio.h .
.Pp
The
.Fn tempnam
function
E 13
is similar to
D 13
.I tmpnam,
E 13
I 13
.Fn tmpnam ,
E 13
but provides the ability to specify the directory which will
contain the temporary file and the file name prefix.
E 10
D 13
.PP
D 10
.B char *memset(str, ch, count)
.B char *str;
.B int ch, count;
E 10
I 10
The environmental variable ``TMPDIR'' (if set), the argument
.I dir
D 11
(if non-NULL), the directory ``/usr/tmp'' and the directory ``/tmp''
E 11
I 11
(if non-NULL), the directory P_tmpdir, and the directory ``/tmp''
E 13
I 13
.Pp
The environment variable
.Ev TMPDIR
(if set), the argument
D 16
.Fa dir
E 16
I 16
.Fa tmpdir
E 16
(if
.Pf non- Dv NULL ) ,
the directory
.Dv P_tmpdir ,
and the directory
.Pa /tmp
E 13
E 11
are tried, in the listed order, as directories in which to store the
temporary file.
D 11
.I Tempnam
allocates memory in which to store the file name; the returned pointer
may be used as a subsequent argument to
.IR free (3).
E 11
I 11
D 13
.PP
E 13
I 13
.Pp
E 13
E 11
The argument
D 13
.IR prefix ,
if non-NULL, is used to specify a file name prefix, which will be the
E 13
I 13
.Fa prefix ,
if
.Pf non- Dv NULL ,
is used to specify a file name prefix, which will be the
E 13
first part of the created file name.
I 11
D 13
.I Tempnam
E 13
I 13
.Fn Tempnam
E 13
allocates memory in which to store the file name; the returned pointer
may be used as a subsequent argument to
D 13
.IR free (3).
.SH "RETURN VALUES"
.I Tmpfile
returns a pointer to an open file stream on success, and a NULL pointer
E 13
I 13
.Xr free 3 .
.Sh RETURN VALUES
The
.Fn tmpfile
function
returns a pointer to an open file stream on success, and a
.Dv NULL
pointer
E 13
on error.
E 11
E 10
D 13
.PP
D 10
.B char *strchr(str, ch);
.B char *str;
.B int ch;
E 10
I 10
.I Tmpnam
E 13
I 13
.Pp
The
.Fn tmpnam
E 13
and
D 11
.I tempname
return a NULL pointer if unable to allocate memory or find a file
which may be created.
E 11
I 11
D 13
.I tempfile
return a pointer to a file name on success, and a NULL pointer
E 13
I 13
.Fn tempfile
functions
return a pointer to a file name on success, and a
.Dv NULL
pointer
E 13
on error.
D 13
.SH ERRORS
.I Tmpfile
may fail and set
.I errno
E 13
I 13
.Sh ERRORS
The
.Fn tmpfile
function
may fail and set the global variable
.Va errno
E 13
for any of the errors specified for the library functions
D 13
.IR fdopen (3)
E 13
I 13
.Xr fdopen 3
E 13
or
D 13
.IR mkstemp (3).
E 11
E 10
.PP
D 10
.B int strcspn(str, chars)
.B char *str, *chars;
E 10
I 10
D 11
The manifest constants ``TMP_MAX'', ``P_tmpdir'' and ``L_tmpnam'',
documented for the routines
.I tmpnam
and
.I tempnam
in other systems, are not available in this implementation.
If the source code requires them, simply use:
.sp
.RS
#define	TMP_MAX		308915776
.br
#define	P_tmpdir		"/usr/tmp"
.br
#define	L_tmpnam		1024
.RE
E 11
I 11
.I Tmpnam
E 13
I 13
.Xr mkstemp 3 .
.Pp
The
.Fn tmpnam
function
E 13
may fail and set
D 13
.I errno
E 13
I 13
.Va errno
E 13
for any of the errors specified for the library function
D 13
.IR mktemp (3).
E 11
E 10
.PP
I 11
.I Tempnam
E 13
I 13
.Xr mktemp 3 .
.Pp
The
.Fn tempnam
function
E 13
may fail and set
D 13
.I errno
E 13
I 13
.Va errno
E 13
for any of the errors specified for the library functions
D 13
.IR malloc (3)
E 13
I 13
.Xr malloc 3
E 13
or
D 13
.IR mktemp (3).
E 11
D 10
.B char *strpbrk(str, chars)
.B char *str, *chars;
E 10
I 10
.SH BUGS
D 11
These interfaces are provided for System V compatibility only.
E 11
I 11
These interfaces are provided for System V and ANSI compatibility only.
E 13
I 13
.Xr mktemp 3 .
.Sh SEE ALSO
.Xr mkstemp 3 ,
.Xr mktemp 3
.Sh STANDARDS
E 13
E 11
The
D 13
.IR mkstemp (3)
E 13
I 13
.Fn tmpfile
and
.Fn tmpnam
functions
conform to
.St -ansiC .
.Sh BUGS
These interfaces are provided for System V and
.Tn ANSI
compatibility only.
The
.Xr mkstemp 3
E 13
interface is strongly preferred.
D 13
.PP
E 13
I 13
.Pp
E 13
D 11
There are three important problems with these interfaces (as well as
E 11
I 11
There are four important problems with these interfaces (as well as
E 11
with the historic
D 13
.IR mktemp (3)
E 13
I 13
.Xr mktemp 3
E 13
interface).
First, there is an obvious race between file name selection and file
D 11
creation.
Second, most implementations provide only a limited number (usually
26) of possible temporary file names before file names will start being
recycled.
Third, the System V implementations of these functions (and
E 11
I 11
creation and deletion.
Second, most historic implementations provide only a limited number
of possible temporary file names (usually 26) before file names will
start being recycled.
Third, the System V implementations of these functions (and of
E 11
D 13
.IR mktemp )
E 13
I 13
.Xr mktemp )
E 13
use the
D 13
.IR access (2)
E 13
I 13
.Xr access 2
E 13
D 11
system call to determine whether or not the temporary file may be created.
E 11
I 11
function to determine whether or not the temporary file may be created.
E 11
This has obvious ramifications for setuid or setgid programs, complicating
the portable use of these interfaces in such programs.
I 11
Finally, there is no specification of the permissions with which the
temporary files are created.
E 11
D 13
.PP
E 13
I 13
.Pp
E 13
D 11
The
.IR mkstemp (3)
interface has none of these problems;
the
.IR mktemp(3)
implementation in this system suffers only from the race condition described
above.
E 10
.PP
D 10
.B char *strrchr(str, ch);
.B char *str;
.B int ch;
E 10
I 10
The
E 11
I 11
This implementation does not have these flaws, but portable software
cannot depend on that.
In particular, the
E 11
D 13
.I tmpfile
E 13
I 13
.Fn tmpfile
E 13
D 11
interface should not be used if there is any possibility that the user
does not wish the temporary file to be publicly readable or writable.
E 10
.PP
E 11
I 11
interface should not be used in software expected to be used on other systems
if there is any possibility that the user does not wish the temporary file to
be publicly readable and writable.
D 13
.SH STANDARDS
.I Tmpfile
and
.I tmpnam
conform to ANSI X3.159-1989 (``ANSI C'').
E 11
D 10
.B int strspn(str, chars)
.B char *str, *chars;
D 7
.PP
.B char *strtok(str, sep)
.B char *str, *sep;
E 7
.PP
I 5
.B char *strtol(str, ptr, base)
.B char *str, **ptr;
.B int base;
.PP
E 5
I 2
.B char *tempnam(tmpdir, prefix)
.B char *tmpdir, *prefix;
.PP
.B char *tmpfile()
.PP
E 2
.B char *tmpnam(str)
.B char *str;
I 2
.PP
I 8
.B char *strdup(str)
.B char *str;
E 8
.SH COMMENT
The \fI#defines\fP \fIP_tmpdir\fP and \fIL_tmpnam\fP, used by the routines
\fItempnam\fP, \fItmpfile\fP, and \fItmpnam\fP are not available in
\fI<stdio.h>\fP.  If the code requires them, just use:
.PP
#include <sys/param.h>
.br
#define	P_tmpdir	"/usr/tmp"
#define	L_tmpnam	MAXPATHLEN
.PP
Also, note that the caveat in the System V manual page that these functions
can start recycling previously used names is untrue in this system.
E 2
.SH DESCRIPTION
The above routines are available and behave as in System V.
E 10
I 10
.SH SEE ALSO
D 11
fopen(3), mkstemp(3), mktemp(3)
E 11
I 11
mkstemp(3), mktemp(3)
E 13
E 11
E 10
E 1
