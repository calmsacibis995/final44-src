h18348
s 00002/00002/00059
d D 8.1 93/06/04 13:04:56 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00004/00000/00057
d D 6.4 91/06/29 14:19:39 bostic 6 5
c add ANSI contribution notice
e
s 00041/00037/00016
d D 6.3 91/04/19 14:31:20 cael 5 4
c macro and text revision (-mdoc version 3)
e
s 00042/00027/00011
d D 6.2 90/05/16 10:09:52 bostic 4 3
c from the ANSI C standard
e
s 00001/00001/00037
d D 6.1 85/05/15 14:53:28 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00007/00010/00031
d D 5.1 85/05/15 14:53:19 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00041/00000/00000
d D 4.1 85/05/15 14:53:13 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 4
D 5
.\" Copyright (c) 1990 The Regents of the University of California.
E 5
I 5
D 7
.\" Copyright (c) 1991 The Regents of the University of California.
E 5
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
.\"
I 6
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
E 6
.\" %sccs.include.redist.man%
.\"
E 4
I 1
D 5
.\"	%W% (Berkeley) %G%
E 5
I 5
.\"     %W% (Berkeley) %G%
E 5
.\"
D 2
.TH ATOF 3 
E 2
I 2
D 3
.TH ATOF 3  "19 January 1983"
E 3
I 3
D 4
.TH ATOF 3  "%Q%"
E 3
E 2
.AT 3
E 4
I 4
D 5
.TH ATOF 3 "%Q%"
.UC 7
E 4
.SH NAME
D 4
atof, atoi, atol \- convert ASCII to numbers
E 4
I 4
atof \- convert ASCII string to double
E 4
.SH SYNOPSIS
.nf
D 4
.B double atof(nptr)
.B char *nptr;
.PP
.B atoi(nptr)
.B char *nptr;
.PP
.B long atol(nptr)
.B char *nptr;
E 4
I 4
.ft B
#include <stdlib.h>

double
atof(const char *nptr);
.ft R
E 4
.fi
.SH DESCRIPTION
E 5
I 5
.Dd %Q%
.Dt ATOF 3
.Os
.Sh NAME
.Nm atof
.Nd convert
.Tn ASCII
string to double
.Sh SYNOPSIS
.Fd #include <stdlib.h>
.Ft double
.Fn atof "const char *nptr"
.Sh DESCRIPTION
E 5
D 4
These functions convert a string pointed to by
E 4
I 4
The
D 5
.I atof
E 5
I 5
.Fn atof
E 5
function converts the initial portion of the string pointed to by
E 4
D 5
.I nptr
E 5
I 5
.Ar nptr
E 5
D 2
to floating, integer, and long integer
representation respectively.
E 2
I 2
D 4
to floating, integer, and long integer representation respectively.
E 2
The first unrecognized character ends the string.
E 4
I 4
to
D 5
.I double
E 5
I 5
.Ar double
E 5
representation.
E 4
D 5
.PP
E 5
I 5
.Pp
E 5
D 4
.I Atof
D 2
recognizes an optional string of tabs and spaces,
then an optional sign, then
E 2
I 2
recognizes an optional string of spaces, then an optional sign, then
E 2
a string of digits optionally containing a decimal
D 2
point, then an optional `e' or `E' followed
by an optionally signed integer.
E 2
I 2
point, then an optional `e' or `E' followed by an optionally signed integer.
E 2
.PP
.I Atoi
and
.I atol
D 2
recognize an optional string of tabs and spaces,
then an optional sign, then a string of
E 2
I 2
recognize an optional string of spaces, then an optional sign, then a
string of
E 2
digits.
E 4
I 4
It is equivalent to:
D 5
.sp
.RS
E 5
I 5
.Bd -literal -offset indent
E 5
strtod(nptr, (char **)NULL);
D 5
.RE
E 4
.SH SEE ALSO
D 2
scanf(3)
E 2
I 2
D 4
scanf(3S)
E 4
I 4
atoi(3), atol(3), strtod(3), strtol(3), strtoul(3)
.SH STANDARDS
.B Atof
conforms to ANSI X3.159-1989 (``ANSI C'').
E 4
E 2
.SH BUGS
E 5
I 5
.Ed
.Sh SEE ALSO
.Xr atoi 3 ,
.Xr atol 3 ,
.Xr strtod 3 ,
.Xr strtol 3 ,
.Xr strtoul 3
.Sh STANDARDS
The
.Fn atof
function conforms to
.St -ansiC .
.Sh BUGS
E 5
D 4
There are no provisions for overflow.
E 4
I 4
This manual page represents intent instead of actual practice.
While it is intended that
D 5
.I atof
E 5
I 5
.Fn atof
E 5
be implemented using
D 5
.IR strtod (3),
E 5
I 5
.Xr strtod 3 ,
E 5
this has not yet happened.
In the current system,
D 5
.I atof
translates a string in the following form to a double:
an optional string of spaces, followed by an optional sign (``+'' or ``-''),
followed by a string of digits which may contain a decimal point (``.''),
followed by an optional exponent flag (``E'' or ``e''), followed by an
optionally signed integer.
E 5
I 5
.Fn atof
translates a string in the following form to a double: a string of
leading white space, possibly followed by a sign (``+'' or ``-''),
followed by a digit string which may contain one decimal point (``.''),
which may be followed by either of the exponent flags (``E'' or ``e''),
and lastly, followed by a signed or unsigned integer.
E 5
E 4
E 1
