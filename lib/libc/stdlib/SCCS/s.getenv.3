h30468
s 00001/00001/00124
d D 8.2 93/12/11 22:37:41 mckusick 17 16
c copyediting for Usenix manuals
e
s 00002/00002/00123
d D 8.1 93/06/04 13:06:12 bostic 16 15
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/00123
d D 6.12 91/11/09 08:22:04 bostic 15 14
c lost description of the putenv function somewhere along the line
e
s 00004/00000/00121
d D 6.11 91/06/29 14:30:03 bostic 14 13
c add ANSI contribution notice
e
s 00113/00084/00008
d D 6.10 91/04/19 14:40:32 cael 13 12
c macro and text revision (-mdoc version 3)
e
s 00002/00000/00090
d D 6.9 90/05/17 11:52:53 bostic 12 11
c forgot stdlib include line
e
s 00065/00048/00025
d D 6.8 90/05/16 12:05:37 bostic 11 10
c document that it satisfies ANSI C, errno values; reformat
e
s 00009/00001/00064
d D 6.7 89/02/14 20:39:48 bostic 10 9
c add putenv
e
s 00000/00001/00065
d D 6.6 89/02/14 16:48:21 bostic 9 8
c typo...
e
s 00019/00000/00047
d D 6.5 88/09/24 17:01:54 bostic 8 7
c caveat that you shouldn't write over the string; add Berkeley copyright
e
s 00013/00003/00034
d D 6.4 87/03/20 17:11:22 bostic 7 6
c minor changes
e
s 00001/00001/00036
d D 6.3 87/03/11 00:03:00 bostic 6 5
c 
e
s 00025/00014/00012
d D 6.2 87/03/10 19:10:16 bostic 5 3
c added setenv, unsetenv
e
s 00025/00014/00012
d R 6.2 87/03/10 19:05:57 bostic 4 3
c added setenv and unsetenv
e
s 00001/00001/00025
d D 6.1 85/05/15 14:59:33 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00007/00005/00019
d D 5.1 85/05/15 14:59:17 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00024/00000/00000
d D 4.1 85/05/15 14:59:10 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 8
D 13
.\" Copyright (c) 1988 The Regents of the University of California.
E 13
I 13
D 16
.\" Copyright (c) 1988, 1991 The Regents of the University of California.
E 13
.\" All rights reserved.
E 16
I 16
.\" Copyright (c) 1988, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 16
.\"
I 14
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
E 14
D 11
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 11
I 11
.\" %sccs.include.redist.man%
E 11
.\"
E 8
I 1
D 13
.\"	%W% (Berkeley) %G%
E 13
I 13
.\"     %W% (Berkeley) %G%
E 13
.\"
I 8
D 9
.TH <PROGNAME> <SECTION> "%Q%"
E 9
E 8
D 2
.TH GETENV 3
E 2
I 2
D 3
.TH GETENV 3 "19 January 1983"
E 3
I 3
D 13
.TH GETENV 3 "%Q%"
E 3
E 2
.AT 3
.SH NAME
D 5
getenv \- value for environment name
E 5
I 5
D 10
getenv, setenv, unsetenv \- manipulate environmental variables
E 10
I 10
getenv, putenv, setenv, unsetenv \- manipulate environmental variables
E 10
E 5
.SH SYNOPSIS
.nf
D 11
.B char *getenv(name)
.B char *name;
I 5
.PP
.B setenv(name, value, overwrite)
.B char *name, value;
.B int overwrite;
.PP
I 10
.B putenv(string)
.B char *string;
.PP
E 10
.B void unsetenv(name)
.B char *name;
E 11
I 11
.ft B
I 12
#include <stdlib.h>

E 12
char *
getenv(const char *name);

setenv(const char *name, const char *value, int overwrite);

putenv(const char *string);

void
unsetenv(const char *name);
.ft R
E 11
E 5
.fi
.SH DESCRIPTION
D 5
.I Getenv
.a
searches the environment list
(see
D 2
.IR environ (5))
E 2
I 2
.IR environ (7))
E 2
for a string of the form
.IB name = value
D 2
and returns
E 2
I 2
and returns a pointer to the string
E 2
.I value
D 2
if such a string is present, otherwise 0 (NULL).
E 2
I 2
if such a string is present, otherwise 
.I getenv
returns the value 0 (NULL).
E 5
I 5
D 11
\fIGetenv\fP searches the environment list (see \fIenviron\fP(7))
E 11
I 11
.I Getenv
searches the environment list (see
.IR environ (7))
E 11
for a string of the form \fIname\fP\fB=\fP\fIvalue\fP and returns
D 11
a pointer to the string \fIvalue\fP if such a string is present,
and 0 (NULL) if it is not.
E 11
I 11
a pointer to the string
.I value
if such a string is present, and a NULL pointer if it is not.
E 11
.PP
D 11
\fISetenv\fP searches the environment list as \fIgetenv\fP does; if
the string \fIname\fP is not found, a string of the form
\fIname\fP\fB=\fP\fIvalue\fP is added to the environment.  If it is
D 7
found and \fIoverwrite\fP is non-zero, its value is changed to
\fIvalue\fP.  \fISetenv\fP returns 0 on success and -1 on failure.
E 7
I 7
found, and \fIoverwrite\fP is non-zero, its value is changed to
\fIvalue\fP.  \fISetenv\fP returns 0 on success and -1 on failure,
where failure is caused by an inability to allocate space for the
environment.
E 11
I 11
.I Setenv
searches the environment list as
.I getenv
does; if the string
.I name
is not found, a string of the form \fIname\fP\fB=\fP\fIvalue\fP is
added to the environment.
If it is found, and
.I overwrite
is non-zero, its value is changed to
.IR value .
.I Setenv
returns 0 on success and -1 on failure, setting the external variable
.IR errno .
E 11
I 10
.PP
.I Putenv
D 11
is provided for compatibility with System V.  It takes an argument
of the form ``\fIname\fR=\fIvalue\fR'' and is the equivalent of calling
\fIsetenv\fR(\fIname\fR, \fIvalue\fR, 1).
E 11
I 11
takes an argument of the form ``\fIname\fR=\fIvalue\fR'' and is the
equivalent of:
.sp
.RS
E 13
I 13
.Dd %Q%
.Dt GETENV 3
.Os
.Sh NAME
.Nm getenv ,
.Nm putenv ,
.Nm setenv ,
.Nm unsetenv
.Nd environment variable functions
.Sh SYNOPSIS
.Fd #include <stdlib.h>
.Ft char *
.Fn getenv "const char *name"
.Ft int
.Fn setenv "const char *name" "const char *value" "int overwrite"
.Ft int
.Fn putenv "const char *string"
.Ft void
.Fn unsetenv "const char *name"
.Sh DESCRIPTION
These functions set, unset and fetch environment variables from the
host
.Em environment list .
For compatibility with differing environment conventions,
the given arguments
.Ar name
and
.Ar value
may be appended and prepended, 
respectively,
with an equal sign
.Dq Li \&= .
.Pp
The
.Fn getenv
function obtains the current value of the environment variable,
.Ar name .
If the variable
.Ar name
D 17
is not in the current environment ,
E 17
I 17
is not in the current environment,
E 17
a null pointer is returned.
.Pp
The
.Fn setenv
function inserts or resets the environment variable
.Ar name
in the current environment list.
If the variable
.Ar name
does not exist in the list,
it is inserted with the given
.Ar value.
If the variable does exist, the argument
.Ar overwrite
is tested; if
.Ar overwrite is
zero, the
variable is not reset, otherwise it is reset
to the given
.Ar value .
.Pp
The
.Fn putenv
D 15
function
performs the equivalent of:
E 15
I 15
function takes an argument of the form ``name=value'' and is
equivalent to:
E 15
.Bd -literal -offset indent
E 13
setenv(name, value, 1);
D 13
.RE
E 11
E 10
E 7
.PP
D 11
\fIUnsetenv\fP removes all occurrences of the string \fIname\fP from
D 7
the environment.
E 7
I 7
the environment.  There is no library provision for completely removing
the current environment.  It is suggested that the following code be
used to do so.
.PP
E 11
I 11
.I Unsetenv
removes all occurrences of the string
.I name
from the environment.
There is no library provision for completely removing the current
environment.
It is suggested that the following code be used to do so.
.sp
.RS
E 11
.nf
D 11
	static char	*envinit[1];
	extern char	**environ;
	environ = envinit;
E 11
I 11
static char	*envinit[1];
extern char	**environ;
environ = envinit;
E 11
.fi
I 11
.RE
E 11
E 7
.PP
All of these routines permit, but do not require, a trailing equals
D 6
(``='') sign on \fIname\fP.
E 6
I 6
D 11
(``='') sign on \fIname\fP or a leading equals sign on \fIvalue\fP.
E 11
I 11
(``='') sign on
.I name
or a leading equals sign on
.IR value .
.SH ERRORS
.TP
[ENOMEM]
.I Setenv
E 13
I 13
.Ed
.Pp
The
.Fn unsetenv
function
deletes all instances of the variable name pointed to by
.Fa name
from the list.
.Sh RETURN VALUES
The functions
.Fn setenv
and
.Fn putenv
return zero if successful; otherwise the global variable
.Va errno
is set to indicate the error and a
\-1 is returned.
.Sh ERRORS
.Bl -tag -width [ENOMEM]
.It Bq Er ENOMEM
The function
.Fn setenv
E 13
or
D 13
.I putenv
E 13
I 13
.Fn putenv
E 13
failed because they were unable to allocate memory for the environment.
E 11
E 6
E 5
E 2
D 13
.SH SEE ALSO
D 2
environ(5), exec(2)
E 2
I 2
D 5
environ(7), execve(2)
E 5
I 5
csh(1), sh(1), execve(2), environ(7)
I 8
D 11
.SH BUGS
All information is part of the environment, so it must be copied
if it is to be manipulated.
E 11
I 11
.SH STANDARDS
.B Getenv
conforms to ANSI X3.159-1989 (``ANSI C'').
E 13
I 13
.El
.Sh SEE ALSO
.Xr csh 1 ,
.Xr sh 1 ,
.Xr execve 2 ,
.Xr environ 7
.Sh STANDARDS
The
.Fn getenv
function conforms to
.St -ansiC .
.Sh HISTORY
The functions
.Fn setenv
and
.Fn unsetenv
appeared in
.At v7 .
The
.Fn putenv
function appeared in
.Bx 4.3 Reno .
E 13
E 11
E 8
E 5
E 2
E 1
