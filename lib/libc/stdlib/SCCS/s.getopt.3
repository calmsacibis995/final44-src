h06071
s 00019/00011/00215
d D 8.5 95/04/27 13:52:31 bostic 23 22
c POSIX.2 has changed getopt to return -1 instead of EOF (to decouple
c getopt() from standard i/o).  This change is more pedantic than
c functional as EOF is defined to be -1.
c Also, POSIX.2 says that getopt lives in unistd.h , not stdlib.h.
c From: "J.T. Conklin" <jtc@sun-lamp.cs.berkeley.edu>
e
s 00002/00002/00224
d D 8.4 94/04/19 07:12:04 bostic 22 21
c spell
e
s 00005/00005/00221
d D 8.3 94/03/26 06:31:26 bostic 21 20
c add a trailing semi-colon to the getopt extern varaibles
e
s 00000/00001/00226
d D 8.2 93/12/11 22:37:42 mckusick 20 19
c copyediting for Usenix manuals
e
s 00002/00002/00225
d D 8.1 93/06/04 13:06:23 bostic 19 18
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00023/00008/00204
d D 6.18 93/03/02 17:54:38 bostic 18 17
c fixes, wordsmithing from Donn Seeley at BSDI
e
s 00041/00013/00171
d D 6.17 92/07/06 13:48:45 marc 17 16
c add optreset global for resetting state of getopt (for using multiple times in the same program).
e
s 00119/00081/00065
d D 6.16 91/04/19 14:30:58 cael 16 15
c macro and text revision (-mdoc version 3)
e
s 00001/00011/00145
d D 6.15 90/06/23 17:56:29 trent 15 14
c new copyright notice
e
s 00006/00000/00149
d D 6.14 90/05/21 12:58:03 bostic 14 13
c document how to reparse arguments
e
s 00004/00000/00145
d D 6.13 89/12/14 10:41:07 bostic 13 12
c bug from Sun (Don Cragun).  If '-' wasn't specified as a possible
c option, return EOF, not an error.  For compatibility with System V.
e
s 00086/00138/00059
d D 6.12 89/11/02 08:50:16 bostic 12 11
c cleanup, fix optind initialization bug, replace example
e
s 00000/00001/00197
d D 6.11 88/10/26 11:55:27 bostic 11 10
c remove my name
e
s 00036/00003/00162
d D 6.10 88/10/21 11:24:51 bostic 10 9
c document how to handle "-#"
e
s 00005/00003/00160
d D 6.9 88/08/01 18:09:33 bostic 9 8
c mention that lone '-' is for backward compatibility only
e
s 00010/00005/00153
d D 6.8 88/07/09 11:40:17 bostic 8 7
c install approved copyright notice
e
s 00003/00000/00155
d D 6.7 88/05/06 14:18:19 bostic 7 6
c mention disablement of opterr to get rid of error messages
e
s 00004/00005/00151
d D 6.6 88/04/19 11:46:15 bostic 6 5
c allow lone ``-'' as option letter
e
s 00009/00003/00147
d D 6.5 88/04/13 11:51:05 bostic 5 4
c add Berkeley specific manual header
e
s 00005/00005/00145
d D 6.4 86/05/27 10:33:12 kjd 4 3
c fix quotes
e
s 00001/00005/00149
d D 6.3 86/05/12 19:07:43 karels 3 2
c remove the untrue
e
s 00000/00002/00154
d D 6.2 86/04/20 12:24:06 mckusick 2 1
c delete incorrect reference
e
s 00156/00000/00000
d D 6.1 85/05/15 16:45:43 mckusick 1 0
c manual page first distributed with 4.3BSD
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 5
I 5
D 16
.\" Copyright (c) 1988 Regents of the University of California.
E 16
I 16
D 19
.\" Copyright (c) 1988, 1991 Regents of the University of California.
E 16
.\" All rights reserved.
E 19
I 19
.\" Copyright (c) 1988, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 19
.\"
D 15
.\" Redistribution and use in source and binary forms are permitted
D 8
.\" provided that this notice is preserved and that due credit is given
.\" to the University of California at Berkeley. The name of the University
.\" may not be used to endorse or promote products derived from this
.\" software without specific prior written permission. This software
.\" is provided ``as is'' without express or implied warranty.
E 8
I 8
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 15
I 15
.\" %sccs.include.redist.man%
E 15
E 8
E 5
.\"
D 16
.\"	%W% (Berkeley) %G%
E 16
I 16
.\"     %W% (Berkeley) %G%
E 16
.\"
D 16
.TH GETOPT 3 "%Q%"
.UC 6
.SH NAME
getopt \- get option letter from argv
.SH SYNOPSIS
.ft B
I 12
.nf
E 12
int getopt(argc, argv, optstring)
D 12
.br
E 12
int argc;
D 12
.br
E 12
char **argv;
D 12
.br
E 12
char *optstring;
.sp
extern char *optarg;
D 12
.br
E 12
extern int optind;
I 7
D 12
.br
E 12
extern int opterr;
E 7
.ft
.SH DESCRIPTION
.I Getopt
returns the next option letter in
.I argv
that matches a letter in
.IR optstring .
.I Optstring
D 12
is a string of recognized option letters;
if a letter is followed by a colon, the option is expected to have
an argument that may or may not be separated from it by white space.
.I Optarg
is set to point to the start of the option argument on return from
.IR getopt .
E 12
I 12
is a string of recognized option letters; if a letter is followed by a
colon, the option is expected to have an argument that may or may not
be separated from it by white space.
E 12
.PP
E 16
I 16
.Dd %Q%
.Dt GETOPT 3
.Os BSD 4.3
.Sh NAME
.Nm getopt
D 18
.Nd get option letter from argv
E 18
I 18
.Nd get option character from command line argument list
E 18
.Sh SYNOPSIS
D 23
.Fd #include <stdlib.h>
E 23
I 23
.Fd #include <unistd.h>
E 23
D 21
.Vt extern char *optarg
.Vt extern int   optind
I 18
.Vt extern int   optopt
E 18
.Vt extern int   opterr
I 17
.Vt extern int   optreset
E 21
I 21
.Vt extern char *optarg;
.Vt extern int   optind;
.Vt extern int   optopt;
.Vt extern int   opterr;
.Vt extern int   optreset;
E 21
E 17
.Ft int
.Fn getopt "int argc" "char * const *argv" "const char *optstring"
.Sh DESCRIPTION
The
.Fn getopt
D 18
function gets 
the next
E 18
I 18
function incrementally parses a command line argument list
.Fa argv
and returns the next
E 18
.Em known
D 18
option character from
.Fa argv .
E 18
I 18
option character.
E 18
An option character is
.Em known
if it has been specified in the string of accepted option characters,
.Fa optstring .
.Pp
The option string
.Fa optstring
D 18
may contain the following characters; letters and
letters followed by a colon to indicate an option argument
E 18
I 18
may contain the following elements: individual characters, and
characters followed by a colon to indicate an option argument
E 18
D 17
is to follow. It does not matter to
E 17
I 17
is to follow.
D 18
It does not matter to the function
E 18
I 18
For example, an option string
.Li "\&""x""
recognizes an option
.Dq Fl x ,
and an option string
.Li "\&""x:""
recognizes an option and argument
.Dq Fl x Ar argument .
It does not matter to
E 18
E 17
.Fn getopt
if a following argument has leading white space.
.Pp
E 16
D 12
.I Getopt
places in
.I optind
the
E 12
I 12
On return from
D 16
.IR getopt ,
optarg is set to point to the start of any option argument.
.I Optind
contains the
E 12
.I argv
index of the next argument to be processed.
D 12
Because
E 12
I 12
.PP
.I Opterr
E 16
I 16
.Fn getopt ,
.Va optarg
points to an option argument, if it is anticipated,
and the variable
.Va optind
contains the index to the next
.Fa argv
argument for a subsequent call
to
I 18
.Fn getopt .
The variable
.Va optopt
saves the last
.Em known
option character returned by
E 18
.Fn getopt .
.Pp
The variable
.Va opterr
E 16
and
E 12
D 16
.I optind
E 16
I 16
.Va optind
E 16
D 12
is external, it is normally initialized to zero automatically
before the first call to 
.IR getopt .
E 12
I 12
are both initialized to 1.
I 17
The
.Va optind
variable may be set to another value before a set of calls to
.Fn getopt
in order to skip over more or less argv entries.
.Pp
E 17
I 14
In order to use
D 16
.I getopt
E 16
I 16
.Fn getopt
E 16
to evaluate multiple sets of arguments, or to evaluate a single set of
arguments multiple times,
I 17
the variable
.Va optreset
must be set to 1 before the second and each additional set of calls to
.Fn getopt ,
and the variable
E 17
D 16
.I optind
E 16
I 16
.Va optind
E 16
D 17
must be initialized to the number of argv entries to be skipped in each
evaluation.
E 17
I 17
must be reinitialized.
E 17
E 14
E 12
D 16
.PP
E 16
I 16
.Pp
The
.Fn getopt
function
D 23
returns an
.Dv EOF
E 23
I 23
returns \-1
E 23
when the argument list is exhausted, or a non-recognized
option is encountered.
The interpretation of options in the argument list may be cancelled
by the option
.Ql --
(double dash) which causes
.Fn getopt
D 23
to signal the end of argument processing and return an
.Dv EOF . 
E 23
I 23
to signal the end of argument processing and returns \-1.
E 23
E 16
D 12
When all options have been processed (i.e., up to the first
non-option argument),
E 12
I 12
When all options have been processed (i.e., up to the first non-option
argument),
E 12
D 16
.I getopt
D 12
returns
.BR EOF .
The special option
.B \-\-
may be used to delimit the end of the options;
.B EOF
will be returned, and
.B \-\-
will be skipped.
E 12
I 12
returns EOF.
The special option ``\-\-'' may be used to delimit the end of the options;
EOF will be returned, and the ``\-\-'' will be skipped.
E 12
D 2
.SH SEE ALSO
getopt(1)
E 2
.SH DIAGNOSTICS
.I Getopt
prints an error message on
.I stderr
D 12
and returns a question mark
.RB ( ? )
when it encounters an option letter not included in
.IR optstring .
I 7
Setting \fIopterr\fP to a zero will disable this error message.
E 12
I 12
and returns a question mark (``?'') when it encounters an option
letter not included in
.IR optstring ,
or it encounters an option that requires an argument which is not
supplied.
E 16
I 16
.Fn getopt
D 23
returns
.Dv EOF .
E 23
I 23
returns \-1.
E 23
.Sh DIAGNOSTICS
If the
.Fn getopt
function encounters a character not found in the string
.Va optarg
or detects
D 17
a missing option argument
it writes error message
E 17
I 17
a missing option argument it writes an error message and returns
E 17
.Ql ?
to the
.Em stderr .
E 16
Setting
D 16
.I opterr
E 16
I 16
.Va opterr
E 16
to a zero will disable these error messages.
I 17
If
.Va optstring 
has a leading 
.Ql \&:
D 22
then then a missing option argumet causes a
E 22
I 22
then a missing option argument causes a
E 22
.Ql \&:
D 22
to be returned in addition to supressing any error messages.
E 22
I 22
to be returned in addition to suppressing any error messages.
E 22
D 20
option argument
E 20
.Pp
Option arguments are allowed to begin with
.Dq Li \- ;
this is reasonable but
reduces the amount of error checking possible.
.Sh EXTENSIONS
The
.Va optreset
variable was added to make it possible to call the
.Fn getopt
function multiple times.
This is an extension to the
.St -p1003.2
specification.
E 17
E 12
E 7
D 16
.SH EXAMPLE
D 12
The following code fragment shows how one might process the arguments
for a command that can take the mutually exclusive options
.B a
and
.BR b ,
and the options
.B f
and
.BR o ,
both of which require arguments:
.PP
.RS
E 12
.nf
D 12
main(argc, argv)
int argc;
char **argv;
{
	int c;
	extern int optind;
	extern char *optarg;
	\&.
	\&.
	\&.
	while ((c = getopt(argc, argv, "abf:o:")) != EOF)
		switch (c) {
D 4
		case 'a':
E 4
I 4
		case `a':
E 4
			if (bflg)
				errflg++;
			else
				aflg++;
			break;
D 4
		case 'b':
E 4
I 4
		case `b':
E 4
			if (aflg)
				errflg++;
			else
				bproc();
			break;
D 4
		case 'f':
E 4
I 4
		case `f':
E 4
			ifile = optarg;
			break;
D 4
		case 'o':
E 4
I 4
		case `o':
E 4
			ofile = optarg;
			break;
D 4
		case '?':
E 4
I 4
		case `?':
E 4
		default:
			errflg++;
			break;
E 12
I 12
.in +5
E 16
I 16
.Sh EXAMPLE
.Bd -literal -compact
E 16
extern char *optarg;
extern int optind;
int bflag, ch, fd;

bflag = 0;
D 23
while ((ch = getopt(argc, argv, "bf:")) != EOF)
E 23
I 23
while ((ch = getopt(argc, argv, "bf:")) != -1)
E 23
	switch(ch) {
	case 'b':
		bflag = 1;
		break;
	case 'f':
		if ((fd = open(optarg, O_RDONLY, 0)) < 0) {
			(void)fprintf(stderr,
D 16
			    "myname: unable to read file %s.\en", optarg);
			exit(1);
E 16
I 16
D 17
				"myname: unable to read file %s.\en", optarg);
			exit(1) ;
E 17
I 17
			    "myname: %s: %s\en", optarg, strerror(errno));
			exit(1);
E 17
E 16
E 12
		}
D 12
	if (errflg) {
		fprintf(stderr, "Usage: ...");
		exit(2);
E 12
I 12
		break;
	case '?':
	default:
		usage();
E 12
D 16
	}
E 16
I 16
}
E 16
D 12
	for (; optind < argc; optind++) {
		\&.
		\&.
		\&.
	}
	\&.
	\&.
	\&.
}
.RE
D 3
.PP
A template similar to this can be found in
.IR /usr/pub/template.c .
E 3
.SH HISTORY
Written by Henry Spencer, working from a Bell Labs manual page.
E 12
I 12
argc -= optind;
argv += optind;
D 16
.fi
E 12
D 3
Behavior believed identical to the Bell version.
Modified by Keith Bostic to behave closer to the System V version.
E 3
I 3
D 11
Modified by Keith Bostic to behave more like the System V version.
E 11
E 3
.SH BUGS
D 6
It is not obvious how
`\-'
standing alone should be treated;  this version treats it as
a non-option argument, which is not always right.
E 6
I 6
D 9
``-'' may be specified as an option letter, however it should never have
an argument associated with it.  This allows getopt to be used with
programs that think that ``-'' means standard input.
E 9
I 9
D 12
``-'' may be specified as an option letter, however it should never
D 10
have an argument associated with it.  This allows getopt to be used
with programs that expect ``-'' as an option flag.  This practice is
wrong, and should not be used in any current development, it is
E 10
I 10
have an argument associated with it.  This allows \fIgetopt\fP to be
used with programs that expect ``-'' as an option flag.  This practice
is wrong, and should not be used in any current development, it is
E 10
provided for backward compatibility \fBonly\fP.
E 12
I 12
Option arguments are allowed to begin with ``\-''; this is reasonable but
E 16
I 16
.Ed
.Sh HISTORY
The
.Fn getopt
function appeared
.Bx 4.3 .
.Sh BUGS
I 23
The
.Fn getopt
function was once specified to return
.Dv EOF 
instead of \-1.
This was changed by
.St -p1003.2-92
to decouple 
.Fn getopt
from 
.Pa <stdio.h> .
.Pp
E 23
D 17
Option arguments are allowed to begin with
.Dq Li \- ;
this is reasonable but
E 16
reduces the amount of error checking possible.
E 12
I 10
D 16
.PP
D 12
It is possible to handle digits as option letters.  This allows
\fIgetopt\fP to be used with programs that expect ``-#'' as an
option flag. This practice is wrong, and should not be used in any
current development, it is provided for backward compatibility
\fBonly\fP.  The following code fragment, while not perfect, works
fairly well.
.RS
E 12
I 12
A single dash (``-'') may be specified as an character in
.IR optstring ,
E 16
I 16
.Pp
E 17
A single dash
.Dq Li -
may be specified as an character in
.Fa optstring ,
E 16
however it should
D 16
.B never
E 16
I 16
.Em never
E 16
have an argument associated with it.
This allows
D 16
.I getopt
to be used with programs that expect ``-'' as an option flag.
E 16
I 16
.Fn getopt
to be used with programs that expect
.Dq Li -
as an option flag.
E 16
This practice is wrong, and should not be used in any current development.
It is provided for backward compatibility
D 16
.BR only .
E 16
I 16
.Em only .
E 16
I 13
By default, a single dash causes
D 16
.I getopt
to return EOF.
E 16
I 16
.Fn getopt
D 23
to return
.Dv EOF .
E 23
I 23
to return \-1.
E 23
E 16
This is, we believe, compatible with System V.
E 13
D 16
.PP
E 16
I 16
.Pp
E 16
It is also possible to handle digits as option letters.
This allows
D 16
.I getopt
to be used with programs that expect a number (``-3'') as an option.
E 16
I 16
.Fn getopt
to be used with programs that expect a number
.Pq Dq Li \&-\&3
as an option.
E 16
This practice is wrong, and should not be used in any current development.
It is provided for backward compatibility
D 16
.BR only .
E 16
I 16
.Em only .
E 16
D 17
The following code fragment works fairly well.
E 17
I 17
The following code fragment works in most cases.
E 17
D 16
.sp
E 12
.nf
I 12
.in +5
E 16
I 16
.Bd -literal -offset indent
E 16
int length;
char *p;
E 12

D 12
	int minlen;
	char *p;

	minlen = -1;
	while ((c = getopt(argc, argv, "0123456789")) != EOF)
		switch (c) {
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			if (minlen == -1) {
				p = argv[optind - 1];
				if (p[0] == '-' && p[1] == ch && !p[2])
					minlen = atoi(++p);
				else
					minlen = atoi(argv[optind] + 1);
			}
			break;
		}
E 12
I 12
D 23
while ((c = getopt(argc, argv, "0123456789")) != EOF)
E 23
I 23
while ((c = getopt(argc, argv, "0123456789")) != -1)
E 23
	switch (c) {
	case '0': case '1': case '2': case '3': case '4':
	case '5': case '6': case '7': case '8': case '9':
		p = argv[optind - 1];
		if (p[0] == '-' && p[1] == ch && !p[2])
			length = atoi(++p);
		else
			length = atoi(argv[optind] + 1);
		break;
E 12
	}
D 12
	\&.
	\&.
	\&.
.RE
E 12
I 12
}
E 12
D 16
.fi
E 16
I 16
.Ed
E 16
E 10
E 9
E 6
D 12
.PP
D 6
Option arguments are allowed to begin with `\-';
E 6
I 6
Option arguments are allowed to begin with ``\-'';
E 6
this is reasonable but reduces the amount of error checking possible.
.PP
.I Getopt
is quite flexible but the obvious price must be paid:  there is much
it could do that it doesn't, like
checking mutually exclusive options, checking type of
option arguments, etc.
E 12
E 1
