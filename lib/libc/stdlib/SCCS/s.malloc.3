h19346
s 00002/00002/00062
d D 8.1 93/06/04 13:07:09 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00004/00000/00060
d D 6.7 91/06/29 14:34:16 bostic 9 8
c add ANSI contribution notice
e
s 00001/00001/00059
d D 6.6 91/05/01 14:47:15 sellgren 8 7
c missed a , after pagesize(2)
e
s 00051/00132/00009
d D 6.5 91/04/19 14:31:02 cael 7 6
c macro and text revision (-mdoc version 3)
e
s 00008/00000/00133
d D 6.4 89/06/09 12:32:55 jak 6 5
c documented case where realloc(NULL, size) reduces to malloc(size)
e
s 00015/00001/00118
d D 6.3 86/05/14 18:36:56 karels 5 4
c document page-alignment, caveats
e
s 00001/00001/00118
d D 6.2 86/01/12 20:31:41 donn 4 3
c Syntax nit -- it's => its.  (from Jay Lepreau)
e
s 00001/00001/00118
d D 6.1 85/05/15 15:11:05 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00032/00035/00087
d D 5.1 85/05/15 15:10:53 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00122/00000/00000
d D 4.1 85/05/15 15:10:44 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
D 10
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 10
I 10
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 10
E 7
.\"
I 9
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
E 9
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\" %sccs.include.redist.man%
E 7
.\"
D 2
.TH MALLOC 3 
E 2
I 2
D 3
.TH MALLOC 3  "19 January 1983"
E 3
I 3
D 7
.TH MALLOC 3  "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
malloc, free, realloc, calloc \- main memory allocator
E 2
I 2
malloc, free, realloc, calloc, alloca \- memory allocator
E 2
.SH SYNOPSIS
.nf
.B char *malloc(size)
.B unsigned size;
.PP
.B free(ptr)
.B char *ptr;
.PP
.B char *realloc(ptr, size)
.B char *ptr;
.B unsigned size;
.PP
.B char *calloc(nelem, elsize)
.B unsigned nelem, elsize;
I 2
.PP
.B char *alloca(size)
.B int size;
E 2
.fi
.SH DESCRIPTION
.I Malloc
and
.I free
D 5
provide a simple general-purpose memory allocation package.
E 5
I 5
provide a general-purpose memory allocation package.
E 5
.I Malloc
returns a pointer to a block of at least
.I size
bytes beginning on a word boundary.
.PP
The argument to
.I free
is a pointer to a block previously allocated by
.IR malloc ;
this space is made available for further allocation,
but its contents are left undisturbed.
.PP
D 2
Needless to say, grave disorder will result if the space
assigned by
E 2
I 2
Needless to say, grave disorder will result if the space assigned by
E 2
.I malloc
is overrun or if some random number is handed to
.IR free .
.PP
.I Malloc
D 2
allocates the first big enough contiguous reach of
free space
found in a circular search from the last 
block allocated or freed,
coalescing adjacent free blocks as it searches.
E 2
I 2
maintains multiple lists of free blocks according to size,
allocating space from the appropriate list.
E 2
It calls
.I sbrk
(see
D 2
.IR break (2))
E 2
I 2
.IR brk (2))
E 2
to get more memory from the system when there is no
suitable space already free.
.PP
.I Realloc
changes the size of the block pointed to by
.I ptr
to
.I size
D 2
bytes and returns a pointer to the (possibly moved)
block.
The contents will be unchanged up to the
lesser of the new and old sizes.
E 2
I 2
bytes and returns a pointer to the (possibly moved) block.
The contents will be unchanged up to the lesser of the new and old sizes.
I 6
If
.I ptr
is null,
.I realloc
simply returns the value of
.I malloc
called with an argument of
.IR size .
E 6
E 2
.PP
D 2
.I Realloc
E 2
I 2
In order to be compatible with older versions,
.I realloc
E 2
also works if
.I ptr
points to a block freed since the last call of
.I malloc, realloc
or
.IR calloc ;
D 2
thus sequences of
E 2
I 2
sequences of
E 2
.I free, malloc
and
.I realloc
D 2
can exploit the search strategy of
.I malloc
to do storage compaction.
E 2
I 2
were previously used to attempt storage compaction.
This procedure is no longer recommended.
E 2
.PP
.I Calloc
D 2
allocates space for
an array of
E 2
I 2
allocates space for an array of
E 2
.I nelem
elements of size
.I elsize.
The space is initialized to zeros.
.PP
I 2
.I Alloca
allocates 
.I size
bytes of space in the stack frame of the caller.
This temporary space is automatically freed on
return.
.PP
E 2
Each of the allocation routines returns a pointer
to space suitably aligned (after possible pointer coercion)
for storage of any type of object.
I 5
If the space is of
.I pagesize
E 7
I 7
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt MALLOC 3
.Os BSD 4
.Sh NAME
.Nm malloc ,
.Nd general memory allocation function
.Sh SYNOPSIS
.Fd #include <stdlib.h>
.Ft void *
.Fn malloc "size_t size"
.Sh DESCRIPTION
The
.Fn malloc
function allocates uninitialized space for an object whose
size is specified by
.Fa size .
The
.Fn malloc
function maintains multiple lists of free blocks according to size, allocating
space from the appropriate list.
.Pp
The allocated space is
suitably aligned (after possible pointer
coercion) for storage of any type of object. If the space is of
.Em pagesize
E 7
or larger, the memory returned will be page-aligned.
D 7
.SH SEE ALSO
brk(2),
pagesize(2)
E 5
.SH DIAGNOSTICS
.I Malloc, realloc
and
.I calloc
D 2
return a null pointer (0) if there is no available memory
or if the arena has been detectably corrupted by storing outside the bounds
of a block.
E 2
I 2
return a null pointer (0) if there is no available memory or if the arena
has been detectably corrupted by storing outside the bounds of a block.
E 2
.I Malloc
D 2
may be recompiled to check the arena very stringently
on every transaction;
see the source code.
E 2
I 2
may be recompiled to check the arena very stringently on every transaction;
those sites with a source code license may check the source code to see
how this can be done.
E 2
.SH BUGS
When
.I realloc
D 2
returns 0,
the block
pointed to by
E 2
I 2
returns 0, the block pointed to by
E 2
.I ptr
may be destroyed.
I 5
.PP
E 7
I 7
.Sh RETURN VALUES
The
.Fn malloc
function returns
a pointer to the allocated space if successful; otherwise
a null pointer is returned.
.Sh SEE ALSO
.Xr brk 2 ,
D 8
.Xr pagesize 2
E 8
I 8
.Xr pagesize 2 ,
E 8
.Xr free 3 ,
.Xr calloc 3 ,
.Xr alloca 3 ,
.Xr realloc 3 ,
.Xr memory 3
.Sh STANDARDS
The
.Fn malloc
function conforms to
.St -ansiC .
.Sh BUGS
E 7
The current implementation of
D 7
.I malloc
E 7
I 7
.Xr malloc
E 7
does not always fail gracefully when system
memory limits are approached.
It may fail to allocate memory when larger free blocks could be broken
up, or when limits are exceeded because the size is rounded up.
It is optimized for sizes that are powers of two.
E 5
D 7
.PP
D 2
The current incarnation of the allocator is unsuitable for direct use in
a large virtual environment where many small blocks are to be kept, since
it keeps all allocated and freed blocks on a single circular list.  Just
before more memory is allocated, all allocated and freed blocks are
referenced; this can cause a huge number of page faults.
E 2
I 2
.I Alloca
D 4
is machine dependent; it's use is discouraged.
E 4
I 4
is machine dependent; its use is discouraged.
E 7
E 4
E 2
E 1
