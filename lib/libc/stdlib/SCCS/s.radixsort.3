h52247
s 00008/00000/00126
d D 8.2 94/01/27 07:07:21 bostic 13 12
c add the Computing Systems paper
e
s 00002/00002/00124
d D 8.1 93/06/09 19:00:48 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00002/00125
d D 5.10 93/06/09 19:00:45 bostic 11 9
c fixed the under development line
e
s 00002/00002/00125
d R 8.1 93/06/04 13:07:48 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00027/00027/00100
d D 5.9 92/06/30 18:23:12 bostic 9 8
c new versions from Peter McIlroy, add sradixsort(3)
e
s 00019/00003/00108
d D 5.8 91/11/13 17:21:01 bostic 8 7
c Peter McIlroy's modifications to do reverse sorting for speed;
c also bounding of the stack is rigorous and different!
e
s 00000/00006/00111
d D 5.7 91/09/26 13:27:53 bostic 7 6
c Dan Bernstein's fix to allow INT_MAX nmemb
e
s 00001/00001/00116
d D 5.6 91/07/23 12:37:28 bostic 6 5
c make endbyte parameter a u_int so ANSI doesn't confuse things
e
s 00086/00050/00031
d D 5.5 91/04/19 14:40:31 cael 5 4
c macro and text revision (-mdoc version 3)
e
s 00003/00000/00078
d D 5.4 90/11/21 09:01:46 bostic 4 3
c document that nmemb must be < INT_MAX
e
s 00008/00002/00070
d D 5.3 90/11/11 10:30:36 bostic 3 2
c add books/papers to SEE ALSO
e
s 00002/00002/00070
d D 5.2 90/10/29 10:22:50 bostic 2 1
c NCHARS -> NBUCKETS; redo stack bounding explanation;
c off-by-one in the stack bounding; fix max bucket selection loop
e
s 00072/00000/00000
d D 5.1 90/10/01 22:07:16 bostic 1 0
c date and time created 90/10/01 22:07:16 by bostic
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1990 The Regents of the University of California.
E 5
I 5
D 12
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 5
.\" All rights reserved.
E 12
I 12
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 12
.\"
.\" %sccs.include.redist.man%
.\"
D 5
.\"	%W% (Berkeley) %G%
E 5
I 5
.\"     %W% (Berkeley) %G%
E 5
.\"
D 5
.TH radixsort 3 "%Q%"
.SH NAME
radixsort \- radix sort
.SH SYNOPSIS
.nf
.ft B
#include <limits.h>
#include <stdlib.h>

radixsort(u_char **base, int nmemb, u_char *table, u_char endbyte);
.ft R
.fi
.SH DESCRIPTION
.I Radixsort
E 5
I 5
.Dd %Q%
.Dt RADIXSORT 3
.Os
.Sh NAME
.Nm radixsort
.Nd radix sort
.Sh SYNOPSIS
.Fd #include <limits.h>
.Fd #include <stdlib.h>
.Ft int
D 6
.Fn radixsort "u_char **base" "int nmemb" "u_char *table" "u_char endbyte"
E 6
I 6
.Fn radixsort "u_char **base" "int nmemb" "u_char *table" "u_int endbyte"
I 9
.Ft int
.Fn sradixsort "u_char **base" "int nmemb" "u_char *table" "u_int endbyte"
E 9
E 6
.Sh DESCRIPTION
The
.Fn radixsort
D 9
function
E 5
D 8
is a modified radix sort.
E 8
I 8
is a radix sort.
E 9
I 9
and
.Fn sradixsort
functions
are implementations of radix sort.
E 9
E 8
D 5
.PP
E 5
I 5
.Pp
E 5
D 9
The
D 5
.I radixsort
E 5
I 5
.Fn radixsort
E 5
function sorts an array of
D 5
.I nmemb
E 5
I 5
.Fa nmemb
E 5
pointers to byte strings, the initial member of which is referenced
by
E 9
I 9
These functions sort an array of pointers to byte strings, the initial
member of which is referenced by
E 9
D 5
.IR base .
E 5
I 5
.Fa base .
E 5
The byte strings may contain any values; the end of each string
is denoted by the user-specified value
D 5
.IR endbyte .
E 5
I 5
.Fa endbyte .
E 5
D 9
The contents of the array are sorted in ascending order according
D 5
to the ASCII order of the byte strings they reference.
.PP
E 5
I 5
to the
.Tn ASCII
order of the byte strings they reference.
E 9
.Pp
E 5
Applications may specify a sort order by providing the
D 5
.IR table
E 5
I 5
.Fa table
E 5
argument.
D 5
If non-NULL,
.I table
D 2
must reference an array of UCHAR_MAX (the maximum byte size) bytes which
contains the sort weight of each byte.
E 2
I 2
must reference an array of UCHAR_MAX + 1 bytes which contains the sort
E 5
I 5
If
.Pf non- Dv NULL , 
.Fa table
must reference an array of
.Dv UCHAR_MAX
+ 1 bytes which contains the sort
E 5
weight of each possible byte value.
E 2
D 8
The end-of-string byte must have a sort weight of 0.
E 8
I 8
The end-of-string byte must have a sort weight of 0 or 255
(for sorting in reverse order).
E 8
More than one byte may have the same sort weight.
D 5
.I Table
E 5
I 5
The
.Fa table
argument
E 5
is useful for applications which wish to sort different characters
D 9
equally; for example, providing a table with the same weights
E 9
I 9
equally, for example, providing a table with the same weights
E 9
for A-Z as for a-z will result in a case-insensitive sort.
I 8
If
.Fa table
D 9
is NULL,
ASCII weights are used and
E 9
I 9
is NULL, the contents of the array are sorted in ascending order
according to the
.Tn ASCII
order of the byte strings they reference and
E 9
.Fa endbyte
has a sorting weight of 0.
E 8
D 5
.PP
.I Radixsort
E 5
I 5
.Pp
The
D 9
.Fn radixsort
function
E 5
is stable, that is, if two elements compare as equal, their order in
the sorted array is unchanged.
E 9
I 9
.Fn sradixsort
function is stable, that is, if two elements compare as equal, their
order in the sorted array is unchanged.
The
.Fn sradixsort
function uses additional memory sufficient to hold
.Fa nmemb
pointers.
E 9
D 5
.PP
.I Radixsort
E 5
I 5
.Pp
The
.Fn radixsort
D 9
function
E 5
D 3
is a variant of most-significant-byte radix sorting; see Knuth Vol. 3,
page 177, and 5.2.5, Ex. 10.
E 3
I 3
is a variant of most-significant-byte radix sorting; in particular, see
D.E. Knuth's Algorithm R and section 5.2.5, exercise 10.
E 3
D 5
.I Radixsort
E 5
I 5
The
.Fn radixsort
function
E 5
takes linear time relative to the number of bytes in the strings.
E 9
I 9
function is not stable, but uses no additional memory.
.Pp
These functions are variants of most-significant-byte radix sorting; in
particular, see D.E. Knuth's Algorithm R and section 5.2.5, exercise 10.
They take linear time relative to the number of bytes in the strings.
E 9
D 5
.SH SEE ALSO
sort(1), qsort(3)
I 3
.sp
Knuth, D.E. [1968]. "The Art of Computer Programming Vol. 3:
Sorting and Searching", pp. 170-178.
.br
Paige, R. [1987]. "Three Partition Refinement Algorithms", 
SIAM J. Comput. Vol. 16, No. 6.
E 3
.SH "RETURN VALUES"
E 5
I 5
.Sh RETURN VALUES
E 5
Upon successful completion 0 is returned.
Otherwise, \-1 is returned and the global variable 
D 5
.I errno
E 5
I 5
.Va errno
E 5
is set to indicate the error.
D 5
.SH ERRORS
.I Radixsort
E 5
I 5
.Sh ERRORS
D 8
The
E 8
I 8
.Bl -tag -width Er
.It Bq Er EINVAL
The value of the
.Fa endbyte
element of
.Fa table
is not 0 or 255.
.El
.Pp
Additionally, the
E 8
D 9
.Fn radixsort
E 9
I 9
.Fn sradixsort
E 9
function
E 5
may fail and set
D 5
.I errno
E 5
I 5
.Va errno
E 5
for any of the errors specified for the library routine
D 5
.IR malloc (3).
I 4
.SH BUGS
.I Nmemb
must be less than the maximum integer, INT_MAX.
E 5
I 5
.Xr malloc 3 .
.Sh SEE ALSO
.Xr sort 1 ,
.Xr qsort 3
.Pp
.Rs
.%A Knuth, D.E.
.%D 1968
.%B "The Art of Computer Programming"
.%T "Sorting and Searching"
.%V Vol. 3
.%P pp. 170-178
.Re
.Rs
.%A Paige, R.
.%D 1987
.%T "Three Partition Refinement Algorithms"
.%J "SIAM J. Comput."
.%V Vol. 16
.%N No. 6
.Re
I 13
.Rs
.%A McIlroy, P.
.%D 1993
.%B "Engineering Radix Sort"
.%T "Computing Systems"
.%V Vol. 6:1
.%P pp. 5-27
.Re
E 13
.Sh HISTORY
The
.Fn radixsort
D 11
function is
.Ud .
E 11
I 11
function first appeared in 4.4BSD.
E 11
D 7
.Sh BUGS
The
.Fa nmemb
argument
must be less than the maximum integer,
.Dv INT_MAX .
E 7
E 5
E 4
E 1
