h61380
s 00002/00002/00135
d D 8.1 93/06/04 13:08:58 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00019/00003/00118
d D 5.4 92/06/25 09:15:31 bostic 4 3
c add strtoq.3, strtouq.3
e
s 00003/00001/00118
d D 5.3 91/06/29 14:43:09 bostic 3 2
c add ANSI contribution notice
e
s 00080/00058/00039
d D 5.2 91/04/20 08:18:09 cael 2 1
c -mdoc (version 3)
e
s 00095/00000/00000
d D 5.1 90/05/15 22:26:37 bostic 1 0
c date and time created 90/05/15 22:26:37 by bostic
e
u
U
t
T
I 1
D 2
.\" Copyright (c) 1990 The Regents of the University of California.
E 2
I 2
D 5
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 2
.\" All rights reserved.
E 5
I 5
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 5
.\"
.\" This code is derived from software contributed to Berkeley by
D 3
.\" Chris Torek.
E 3
I 3
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
E 3
D 2
.\"
E 2
.\" %sccs.include.redist.man%
.\"
D 2
.\"	%W% (Berkeley) %G%
E 2
I 2
.\"     %W% (Berkeley) %G%
E 2
.\"
D 2
.TH STRTOUL 3 "%Q%"
.UC 7
.SH NAME
strtoul \- convert a string to an unsigned long integer
.SH SYNOPSIS
.B #include <stdlib.h>
.br
.B #include <limits.h>
.PP
.B "unsigned long strtoul(char *nptr, char **endptr, int base);
.SH DESCRIPTION
.B Strtoul
E 2
I 2
.Dd %Q%
.Dt STRTOUL 3
.Os
.Sh NAME
D 4
.Nm strtoul
.Nd convert a string to an unsigned long integer
E 4
I 4
.Nm strtoul, strtouq
.Nd convert a string to an unsigned long or uquad_t integer
E 4
.Sh SYNOPSIS
.Fd #include <stdlib.h>
.Fd #include <limits.h>
I 4
.Ft unsigned long
E 4
.Fn strtoul "const char *nptr" "char **endptr" "int base"
I 4

.Fd #include <sys/types.h>
.Fd #include <stdlib.h>
.Fd #include <limits.h>
.Ft u_quad_t
.Fn strtouq "const char *nptr" "char **endptr" "int base"
E 4
.Sh DESCRIPTION
The
.Fn strtoul
function
E 2
converts the string in
D 2
.I nptr
E 2
I 2
.Fa nptr
E 2
to an
D 2
.B "unsigned long"
E 2
I 2
.Em unsigned long
E 2
D 4
value according to the given
E 4
I 4
value.
The
.Fn strtouq
function
converts the string in
.Fa nptr
to a
.Em u_quad_t
value.
The conversion is done according to the given
E 4
D 2
.IR base ,
E 2
I 2
.Fa base ,
E 2
which must be between 2 and 36 inclusive,
or be the special value 0.
D 2
.PP
E 2
I 2
.Pp
E 2
The string may begin with an arbitrary amount of white space
(as determined by
D 2
.BR isspace ;
see
.IR ctype (3)),
followed by a single optional `+' or `-' sign.
E 2
I 2
.Xr isspace 3 )
followed by a single optional
.Ql +
or
.Ql -
sign.
E 2
If
D 2
.I base
E 2
I 2
.Fa base
E 2
is zero or 16,
D 2
the string may then include a `0x' prefix,
E 2
I 2
the string may then include a
.Ql 0x
prefix,
E 2
and the number will be read in base 16; otherwise, a zero
D 2
.I base
is taken as 10 (decimal) unless the next character is `0',
E 2
I 2
.Fa base
is taken as 10 (decimal) unless the next character is
.Ql 0 ,
E 2
in which case it is taken as 8 (octal).
D 2
.PP
E 2
I 2
.Pp
E 2
The remainder of the string is converted to an
D 2
.B "unsigned long"
E 2
I 2
.Em unsigned long
E 2
value in the obvious manner,
stopping at the end of the string
or at the first character that does not produce a valid digit
in the given base.
D 2
(In bases above 10, the letter `A' in either upper or lower case
represents 10, `B' represents 11, and so forth, with `Z' representing 35.)
.PP
E 2
I 2
(In bases above 10, the letter
.Ql A
in either upper or lower case
represents 10,
.Ql B
represents 11, and so forth, with
.Ql Z
representing 35.)
.Pp
E 2
If
D 2
.I endptr
E 2
I 2
.Fa endptr
E 2
is non nil,
D 2
.B strtoul
E 2
I 2
.Fn strtoul
E 2
stores the address of the first invalid character in
D 2
.IR *endptr .
E 2
I 2
.Fa *endptr .
E 2
If there were no digits at all, however,
D 2
.B strtoul
E 2
I 2
.Fn strtoul
E 2
stores the original value of
D 2
.I nptr
E 2
I 2
.Fa nptr
E 2
in
D 2
.IR *endptr .
E 2
I 2
.Fa *endptr .
E 2
(Thus, if
D 2
.I *nptr
is not '\e0' but
.IR **endptr
is '\e0' on return, the entire string was valid.)
.SH RETURN VALUE
.B Strtoul
E 2
I 2
.Fa *nptr
is not
.Ql \e0
but
.Fa **endptr
is
.Ql \e0
on return, the entire string was valid.)
.Sh RETURN VALUES
The
.Fn strtoul
function
E 2
returns either the result of the conversion
or, if there was a leading minus sign,
the negation of the result of the conversion,
unless the original (non-negated) value would overflow;
in the latter case,
D 2
.B strtoul
E 2
I 2
.Fn strtoul
E 2
returns
D 2
.B ULONG_MAX
and sets
.B errno
E 2
I 2
.Dv ULONG_MAX
and sets the global variable
.Va errno
E 2
to
D 2
.BR ERANGE .
.SH ERRORS
.TP
[ERANGE]
E 2
I 2
.Er ERANGE .
.Sh ERRORS
.Bl -tag -width [ERANGE]
.It Bq Er ERANGE
E 2
The given string was out of range; the value converted has been clamped.
D 2
.SH SEE ALSO
strtol(3)
.SH STANDARDS
.B Strtoul
conforms to ANSI X3.159-1989 (``ANSI C'').
.SH BUGS
E 2
I 2
.El
.Sh SEE ALSO
.Xr strtol 3
.Sh STANDARDS
The
.Fn strtoul
function
conforms to
.St -ansiC .
.Sh BUGS
E 2
Ignores the current locale.
E 1
