h61921
s 00002/00002/00081
d D 8.1 93/06/04 15:10:14 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00070/00054/00013
d D 6.8 91/04/19 14:45:58 cael 9 8
c macro and text revision (-mdoc version 3)
e
s 00000/00000/00067
d D 6.7 91/04/19 14:41:08 cael 8 7
c macro and text revision (-mdoc version 3)
e
s 00074/00070/00012
d D 6.6 90/05/15 15:12:47 bostic 7 6
c new version, just referencing the specific manual pages
e
s 00002/00000/00080
d D 6.5 89/04/01 14:35:01 bostic 6 5
c bcopy/bzero don't return any value
e
s 00005/00000/00075
d D 6.4 88/12/07 19:58:02 bostic 5 4
c document that bcopy strings may overlap; bug report 4.3BSD-tahoe/lib/16
e
s 00004/00000/00071
d D 6.3 87/11/18 19:24:45 bostic 4 3
c bcmp of 0 bytes returns 0 bytes
e
s 00003/00005/00068
d D 6.2 87/04/10 09:20:32 bostic 3 2
c ffs returns 0 if passed 0; bug report 4.2BSD/lib/16
e
s 00007/00011/00066
d D 6.1 85/05/15 16:14:57 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00077/00000/00000
d D 5.1 85/05/15 16:14:46 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
D 9
.\" Copyright (c) 1990 The Regents of the University of California.
E 9
I 9
D 10
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 9
.\" All rights reserved.
E 10
I 10
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 10
E 7
.\"
I 7
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek.
D 9
.\"
E 9
.\" %sccs.include.redist.man%
.\"
E 7
D 9
.\"	%W% (Berkeley) %G%
E 9
I 9
.\"     %W% (Berkeley) %G%
E 9
.\"
D 2
.TH BSTRING 3  "4 March 1983"
E 2
I 2
D 7
.TH BSTRING 3  "%Q%"
E 2
.UC 5
E 7
I 7
D 9
.TH BSTRING 3 "%Q%"
.UC
E 7
.SH NAME
D 7
bcopy, bcmp, bzero, ffs \- bit and byte string operations
E 7
I 7
bcmp, bcopy, bzero, memccpy, memchr, memcmp, memcpy, memmove,
memset \- byte string operations
E 7
.SH SYNOPSIS
.nf
I 6
D 7
.B void
E 6
D 2
.B bcopy(b1, b2, length)
.B char *b1, *b2;
E 2
I 2
.B bcopy(src, dst, length)
.B char *src, *dst;
E 2
.B int length;
.PP
.B bcmp(b1, b2, length)
.B char *b1, *b2;
.B int length;
.PP
I 6
.B void
E 6
.B bzero(b, length)
.B char *b;
.B int length;
.PP
.B ffs(i)
.B int i;
E 7
I 7
.ft B
#include <string.h>

int
bcmp(const char *b1, const char *b2, size_t len);

void
bcopy(const char *src, char *dst, size_t len);

void
bzero(char *b, size_t len);

void *
memchr(const void *b, int c, size_t len);

int
memcmp(const void *b1, const void *b2, size_t len);

char *
memccpy(char *dst, const char *src, int c, size_t len);

void *
memcpy(void *dst, const void *src, size_t len);

void *
memmove(void *dst, const void *src, size_t len);

void *
memset(void *b, int c, size_t len)
.ft R
E 7
.fi
.SH DESCRIPTION
E 9
I 9
.Dd %Q%
.Dt BSTRING 3
.Os
.Sh NAME
.Nm bcmp ,
.Nm bcopy ,
.Nm bzero ,
.Nm memccpy ,
.Nm memchr ,
.Nm memcmp ,
.Nm memcpy ,
.Nm memmove,
.Nm memset
.Nd byte string operations
.Sh SYNOPSIS
.Fd #include <string.h>
.Ft int
.Fn bcmp "const void *b1" "const void *b2" "size_t len"
.Ft void
.Fn bcopy "const void *src" "void *dst" "size_t len"
.Ft void
.Fn bzero "void *b" "size_t len"
.Ft void *
.Fn memchr "const void *b" "int c" "size_t len"
.Ft int
.Fn memcmp "const void *b1" "const void *b2" "size_t len"
.Ft void *
.Fn memccpy "void *dst" "const void *src" "int c" "size_t len"
.Ft void *
.Fn memcpy "void *dst" "const void *src" "size_t len"
.Ft void *
.Fn memmove "void *dst" "const void *src" "size_t len"
.Ft void *
.Fn memset "void *b" "int c" "size_t len"
.Sh DESCRIPTION
E 9
D 7
The functions
.IR bcopy ,
.IR bcmp ,
and
.I bzero
operate on variable length strings of bytes.
They do not check for null bytes as the routines in
E 7
I 7
These functions operate on variable length strings of bytes.
They do not check for terminating null bytes as the routines
listed in
E 7
D 9
.IR string (3)
E 9
I 9
.Xr string 3
E 9
do.
D 9
.PP
E 9
I 9
.Pp
E 9
D 7
.I Bcopy
copies 
.I length
bytes from string
D 2
.I b1
E 2
I 2
.I src
E 2
to the string
D 2
.IR b2 .
E 2
I 2
.IR dst .
I 5
The
.I src
E 7
I 7
See the specific manual pages for more information.
D 9
.SH SEE\ ALSO
bcmp(3), bcopy(3), bzero(3), memccpy(3), memchr(3), memcmp(3), memcpy(3),
memmove(3), memset(3)
.SH STANDARDS
.IR Memchr ,
.IR memcmp ,
.IR memcpy ,
.IR memmove ,
E 9
I 9
.Sh SEE ALSO
.Xr bcmp 3 ,
.Xr bcopy 3 ,
.Xr bzero 3 ,
.Xr memccpy 3 ,
.Xr memchr 3 ,
.Xr memcmp 3 ,
.Xr memcpy 3 ,
.Xr memmove 3 ,
.Xr memset 3
.Sh STANDARDS
The functions
.Fn memchr ,
.Fn memcmp ,
.Fn memcpy ,
.Fn memmove ,
E 9
E 7
and
D 7
.I dst
strings may overlap.
E 5
E 2
.PP
.I Bcmp
compares byte string
.I b1
against byte string
.IR b2 ,
returning zero if they are identical,
non-zero otherwise.  Both strings are
assumed to be
.I length
bytes long.
I 4
.B Bcmp
of
.I length
zero bytes always returns zero.
E 4
.PP
.I Bzero
places
.I length
0 bytes in the string
.IR b1 .
.PP
D 3
.I Ffs
find the first bit set in the argument passed it and
returns the index of that bit.  Bits are numbered
D 2
starting at 1.  A return value of \-1 indicates the
E 2
I 2
starting at 1.  A return value of 0 indicates the
E 2
value passed is zero.
E 3
I 3
\fIFfs\fP finds the first bit set in the argument passed it and returns
the index of that bit.  Bits are numbered starting at 1, from the right.
A return value of 0 indicates the value passed is zero.
E 3
.SH BUGS
The
D 2
.I bcmp
and 
E 2
.I bcopy
D 2
routines take parameters backwards from
.I strcmp
and
E 2
I 2
routine take parameters backwards from
E 2
.IR strcpy .
E 7
I 7
D 9
.I memset
conform to ANSI X3.159-1989 (``ANSI C'').
E 9
I 9
.Fn memset
conform to
.St -ansiC .
.Sh HISTORY
The functions
.Fn bzero
and
.Fn memccpy
appeared in
.Bx 4.3 ;
the functions
.Fn bcmp ,
.Fn bcopy ,
appeared in
.Bx 4.2 .
E 9
E 7
E 1
