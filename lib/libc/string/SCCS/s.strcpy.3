h61924
s 00002/00002/00093
d D 8.1 93/06/04 15:11:34 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00001/00092
d D 5.4 91/06/29 14:40:20 bostic 4 3
c add ANSI contribution notice
e
s 00072/00057/00021
d D 5.3 91/04/19 14:40:50 cael 3 2
c macro and text revision (-mdoc version 3)
e
s 00044/00004/00034
d D 5.2 90/06/24 14:08:32 bostic 2 1
c fold strn{casecmp,cat,cmp,cpy}.3 into str{casecmp,cat,cmp,cpy}.3
e
s 00033/00000/00000
d D 5.1 90/05/15 14:44:34 bostic 1 0
c date and time created 90/05/15 14:44:34 by bostic
e
u
U
t
T
I 1
D 3
.\" Copyright (c) 1990 The Regents of the University of California.
E 3
I 3
D 5
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 3
.\" All rights reserved.
E 5
I 5
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 5
.\"
.\" This code is derived from software contributed to Berkeley by
D 4
.\" Chris Torek.
E 4
I 4
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
E 4
D 3
.\"
E 3
.\" %sccs.include.redist.man%
.\"
D 3
.\"	%W% (Berkeley) %G%
E 3
I 3
.\"     %W% (Berkeley) %G%
E 3
.\"
D 3
.TH STRCPY 3 "%Q%"
.UC 4
.SH NAME
strcpy \- copy strings
.SH SYNOPSIS
.nf
.ft B
#include <string.h>

char *
strcpy(char *dst, const char *src);
I 2

char *
strncpy(char *dst, const char *src, size_t len);
E 2
.ft R
.fi
.SH DESCRIPTION
.B Strcpy
E 3
I 3
.Dd %Q%
.Dt STRCPY 3
.Os BSD 4
.Sh NAME
.Nm strcpy
.Nd copy strings
.Sh SYNOPSIS
.Fd #include <string.h>
.Ft char *
.Fn strcpy "char *dst" "const char *src"
.Ft char *
.Fn strncpy "char *dst" "const char *src" "size_t len"
.Sh DESCRIPTION
The
.Fn strcpy
E 3
D 2
copies string
E 2
I 2
and
D 3
.B strncpy
copy string
E 2
.I src
E 3
I 3
.Fn strncpy
functions
copy the string
.Fa src
E 3
to
D 3
.IR dst ,
stopping after the terminating '\e0' has been moved.
I 2
.PP
.B Strncpy
writes exactly
.I len
E 3
I 3
.Fa dst
(including the terminating
.Ql \e0
character).
.Pp
The
.Fn strncpy
copies not more than
.Fa len
E 3
characters into
D 3
.IR dst ,
appending '\e0' characters if
.I src
E 3
I 3
.Fa dst ,
appending
.Ql \e0
characters if
.Fa src
E 3
is less than
D 3
.I len
E 3
I 3
.Fa len
E 3
characters long, and
D 3
.I not
E 3
I 3
.Em not
E 3
terminating
D 3
.I dst
E 3
I 3
.Fa dst
E 3
if
D 3
.I src
E 3
I 3
.Fa src
E 3
is more than
D 3
.I len
E 3
I 3
.Fa len
E 3
characters long.
D 3
.PP
E 2
.B Strcpy
E 3
I 3
.Sh RETURN VALUES
The
.Fn strcpy
E 3
D 2
returns
E 2
I 2
and
D 3
.B strncpy
E 3
I 3
.Fn strncpy
functions
E 3
return
E 2
D 3
.IR dst .
I 2
.SH EXAMPLES
The following sets ``chararray'' to ``abc\e0\e0\e0'':
.sp
.ti +0.5i
E 3
I 3
.Fa dst .
.Sh EXAMPLES
The following sets
.Dq Li chararray
to
.Dq Li abc\e0\e0\e0 :
.Bd -literal -offset indent
E 3
(void)strncpy(chararray, "abc", 6).
D 3
.PP
The following sets ``chararray'' to ``abcdef'':
.sp
.RS
E 3
I 3
.Ed
.Pp
The following sets
.Dq Li chararray
to
.Dq Li abcdef :
.Bd -literal -offset indent
E 3
(void)strncpy(chararray, "abcdefgh", 6);
D 3
.RE
E 2
.SH SEE ALSO
D 2
bcopy(3), memccpy(3), memcpy(3), memmove(3), strncpy(3)
E 2
I 2
bcopy(3), memccpy(3), memcpy(3), memmove(3)
E 2
.SH STANDARDS
.B Strcpy
E 3
I 3
.Ed
.Sh SEE ALSO
.Xr bcopy 3 ,
.Xr memccpy 3 ,
.Xr memcpy 3 ,
.Xr memmove 3
.Sh STANDARDS
The
.Fn strcpy
E 3
D 2
conforms to ANSI X3.159-1989 (``ANSI C'').
E 2
I 2
and
D 3
.B strncpy
conform to ANSI X3.159-1989 (``ANSI C'').
E 3
I 3
.Fn strncpy
functions
conform to
.St -ansiC .
E 3
E 2
E 1
