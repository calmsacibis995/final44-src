h15453
s 00002/00002/00079
d D 8.1 93/06/09 18:59:27 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00002/00080
d D 5.6 93/06/09 18:59:24 bostic 7 5
c fixed the under development line
e
s 00002/00002/00080
d R 8.1 93/06/04 15:12:34 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00039/00023/00043
d D 5.5 91/11/16 11:05:11 bostic 5 4
c try and clarify this man page -- I'm tired of refiguring it out each
c time I try and use it!
e
s 00004/00003/00062
d D 5.4 91/08/03 12:07:14 cael 4 3
c add missing word
e
s 00043/00039/00022
d D 5.3 91/04/19 14:46:04 cael 3 2
c macro and text revision (-mdoc version 3)
e
s 00000/00000/00061
d D 5.2 91/04/19 14:41:12 cael 2 1
c macro and text revision (-mdoc version 3)
e
s 00056/00000/00000
d D 5.1 90/05/15 14:53:05 bostic 1 0
c date and time created 90/05/15 14:53:05 by bostic
e
u
U
t
T
I 1
D 3
.\" Copyright (c) 1990 The Regents of the University of California.
E 3
I 3
D 8
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 3
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek.
D 3
.\"
E 3
D 4
.\" %sccs.include.redist.man%
E 4
.\"
D 3
.\"	%W% (Berkeley) %G%
E 3
I 3
D 4
.\"     %W% (Berkeley) %G%
E 4
I 4
.\" %sccs.include.redist.roff%
E 4
E 3
.\"
I 4
.\"	%W% (Berkeley) %G%
.\"
E 4
D 3
.TH STRSEP 3 "%Q%"
.UC 7
.SH NAME
strsep \- separate strings
.SH SYNOPSIS
.nf
.ft B
#include <string.h>

char *
strsep(char **stringp, char *delim);
.ft R
.fi
.SH DESCRIPTION
.B Strsep
E 3
I 3
.Dd %Q%
.Dt STRSEP 3
.Os
.Sh NAME
.Nm strsep
.Nd separate strings
.Sh SYNOPSIS
.Fd #include <string.h>
.Ft char *
.Fn strsep "char **stringp" "char *delim"
.Sh DESCRIPTION
The
.Fn strsep
E 3
D 4
locates in the null-terminated string at
E 4
I 4
D 5
function locates in the null-terminated string at
E 4
D 3
.I *stringp
E 3
I 3
.Fa *stringp
E 3
the first occurence of any character in
D 3
.I delim
and replaces this with a '\e0',
E 3
I 3
.Fa delim
and replaces this with a
.Ql \e0 ,
E 3
records the location of the immediate following character in
E 5
I 5
function locates, in the string referenced by
E 5
D 3
.IR *stringp ,
E 3
I 3
.Fa *stringp ,
E 3
D 5
then returns the original value of
E 5
I 5
the first occurrence of any character in the string
.Fa delim
(or the terminating
.Ql \e0
character) and replaces it with a
.Ql \e0 .
The location of the next character after the delimiter character
(or NULL, if the end of the string was reached) is stored in
E 5
D 3
.IR *stringp .
E 3
I 3
.Fa *stringp .
E 3
D 5
If no delimiter characters are found,
D 3
.B strsep
E 3
I 3
.Fn strsep
E 3
sets
E 5
I 5
The original value of
E 5
D 3
.I *stringp
to NULL;
E 3
I 3
.Fa *stringp
I 5
is returned.
.Pp
An ``empty'' field, i.e. one caused by two adjacent delimiter characters,
can be detected by comparing the location referenced by the pointer returned
in
.Fa *stringp
E 5
to
D 5
.Dv NULL ;
E 3
if
E 5
I 5
.Ql \e0 .
.Pp
If
E 5
D 3
.I *stringp
is initially NULL,
.B strsep
returns NULL.
.SH EXAMPLES
E 3
I 3
.Fa *stringp
is initially
.Dv NULL ,
.Fn strsep
returns
.Dv NULL .
.Sh EXAMPLES
E 3
The following uses
D 3
.I strsep
E 3
I 3
.Fn strsep
E 3
D 5
to parse strings containing runs of white space,
making up an argument vector:
E 5
I 5
to parse a string, containing tokens delimited by white space, into an
argument vector:
E 5
D 3
.sp
.nf
.RS
E 3
I 3
.Bd -literal -offset indent
E 3
D 5
char inputstring[100];
char **argv[51], **ap = argv, *p, *val;
D 3
.I "/* set up inputstring */"
E 3
I 3
/* set up inputstring */
E 3
for (p = inputstring; p != NULL; ) {
D 3
    while ((val = strsep(&p, " \et")) != NULL && *val == '\e0');
    *ap++ = val;
E 3
I 3
	while ((val = strsep(&p, " \et")) != NULL && *val == '\e0');
	*ap++ = val;
E 3
}
*ap = 0;
E 5
I 5
char **ap, *argv[10], *inputstring;

for (ap = argv; (*ap = strsep(&inputstring, " \et")) != NULL;)
	if (**ap != '\e0')
		++ap;
E 5
D 3
.RE
E 3
I 3
.Ed
.Sh HISTORY
I 5
The
.Fn strsep
function
is intended as a replacement for the
.Fn strtok
function.
While the
.Fn strtok
function should be preferred for portability reasons (it conforms to
.St -ansiC )
it is unable to handle empty fields, i.e. detect fields delimited by
two adjacent delimiter characters, or to be used for more than a single
string at a time.
E 5
The
.Fn strsep
D 7
function is
.Ud .
E 7
I 7
function first appeared in 4.4BSD.
E 7
E 3
E 1
