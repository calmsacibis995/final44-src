h61929
s 00002/00002/00084
d D 8.1 93/06/04 13:13:07 bostic 11 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00029/00011/00057
d D 6.8 93/03/04 18:47:04 mckusick 10 9
c update from Mike Karels at BSDI
e
s 00001/00001/00067
d D 6.7 92/09/02 09:50:59 bostic 9 8
c name is _exit, not exit
e
s 00003/00002/00065
d D 6.6 91/07/25 17:43:27 cael 8 7
c .Dd was not placed as first macro as should be
e
s 00059/00041/00008
d D 6.5 91/03/10 23:36:38 cael 7 6
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00001/00048
d D 6.4 86/05/22 12:10:40 anne 6 5
c grammar
e
s 00005/00002/00044
d D 6.3 86/05/13 14:21:25 karels 5 4
c clarifications
e
s 00001/00001/00045
d D 6.2 85/06/28 16:37:23 sechrest 4 3
c Added comma
e
s 00001/00001/00045
d D 6.1 85/05/09 16:03:55 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00031/00036/00015
d D 5.1 85/05/09 16:03:47 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00051/00000/00000
d D 4.1 85/05/09 16:03:40 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 11
.\" Copyright (c) 1980 Regents of the University of California.
D 7
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
.\" All rights reserved.
E 11
I 11
.\" Copyright (c) 1980, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 11
E 7
.\"
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\" %sccs.include.redist.man%
E 7
.\"
D 2
.TH EXIT 2 
E 2
I 2
D 3
.TH EXIT 2 "27 July 1983"
E 3
I 3
D 7
.TH EXIT 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
exit \- terminate process
E 2
I 2
_exit \- terminate a process
E 2
.SH SYNOPSIS
.nf
D 2
.B exit(status)
.B int status;
.PP
.B _exit(status)
.B int status;
E 2
I 2
.ft B
_exit(status)
int status;
E 2
.fi
.SH DESCRIPTION
D 2
.I Exit
is the normal means of terminating a process.
.I Exit
closes all the process's files and notifies the parent process
if it is executing a
.IR wait .
The low-order 8 bits of 
.I status
are available to the parent process.
E 2
I 2
.I _exit
E 7
I 7
.\"     %W% (Berkeley) %G%
.\"
D 8
.Dt EXIT 2
E 8
.Dd %Q%
I 8
D 9
.Dt EXIT 2
E 9
I 9
D 10
.Dt _EXIT 2
E 10
I 10
.Dt EXIT 2
E 10
E 9
E 8
.Os BSD 4
.Sh NAME
.Nm _exit
.Nd terminate the calling process
.Sh SYNOPSIS
.Fd #include <unistd.h>
D 10
.Ft void volatile
E 10
I 10
.Ft void
E 10
.Fn _exit "int status"
.Sh DESCRIPTION
The
.Fn _exit
function
E 7
terminates a process with the following consequences:
D 7
.in +5n
E 2
.PP
E 7
I 7
.Bl -bullet
.It
E 7
D 2
This call can never return.
E 2
I 2
All of the descriptors open in the calling process are closed.
I 5
D 6
This may entail delays, for example waiting for output to drain;
E 6
I 6
This may entail delays, for example, waiting for output to drain;
E 6
a process in this state may not be killed, as it is already dying.
E 5
E 2
D 7
.PP
D 2
The C function
.I exit
may cause cleanup actions before the
final `sys exit'.
The function
.I _exit
circumvents all cleanup, and should be used to terminate a child
process after a
.IR fork (2)
or
.IR vfork (2)
to avoid flushing buffered output twice.
E 2
I 2
If the parent process of the calling process is executing a
.I wait
or is interested in the SIGCHLD signal,
then it is notified of the calling process's termination and
the low-order eight bits of \fIstatus\fP are made available to it;
see
.IR wait (2).
.PP
The parent process ID of all of the calling process's existing child
processes are also set to 1.  This means that the initialization process
(see 
.IR intro (2))
inherits each of these processes as well.
I 5
Any stopped children are restarted with a hangup signal (SIGHUP).
E 5
.in -5n
.PP
E 7
I 7
.It
If the parent process of the calling process has an outstanding
.Xr wait
call
D 10
or is interested in the
E 10
I 10
or catches the
E 10
.Dv SIGCHLD
signal,
it is notified of the calling process's termination and
the
.Em status
D 10
area is set as defined by
E 10
I 10
is set as defined by
E 10
.Xr wait 2 .
.It
The parent process-ID of all of the calling process's existing child
processes are set to 1; the initialization process
(see the DEFINITIONS section of
.Xr intro 2 )
inherits each of these processes.
D 10
Any stopped children are restarted with a hangup signal
.Pq Dv SIGHUP .
E 10
I 10
.It
If the termination of the process causes any process group
to become orphaned (usually because the parents of all members
of the group have now exited; see
.Dq orphaned process group
in
.Xr intro 2 ) ,
and if any member of the orphaned group is stopped,
the
.Dv SIGHUP
signal and the
.Dv SIGCONT
signal are sent to all members of the newly-orphaned process group.
.It
If the process is a controlling process (see
.Xr intro 2 ) ,
the
.Dv SIGHUP
signal is sent to the foreground process group of the controlling terminal,
and all current access to the controlling terminal is revoked.
E 10
.El
.Pp
E 7
Most C programs call the library routine
D 4
.IR exit (3)
E 4
I 4
D 7
.IR exit (3),
E 4
D 5
which performs cleanup actions in the standard i/o library before
E 5
I 5
which performs cleanup actions in the standard I/O library before
E 5
calling \fI_exit\fP\|.
.SH "RETURN VALUE"
This call never returns.
E 2
.SH "SEE ALSO"
D 2
fork(2), vfork(2), wait(2)
.SH "ASSEMBLER (PDP-11)"
(exit = 1.)
.br
(status in r0)
.br
.B sys exit
E 2
I 2
D 5
fork(2), wait(2), exit(3)
E 5
I 5
fork(2), sigvec(2), wait(2), exit(3)
E 7
I 7
.Xr exit 3 ,
which flushes buffers, closes streams, unlinks temporary files, etc.,
before
calling
.Fn _exit .
.Sh RETURN VALUE
.Fn _exit
can never return.
.Sh SEE ALSO
.Xr fork 2 ,
.Xr sigvec 2 ,
.Xr wait 2 ,
.Xr exit 3
D 10
.Sh HISTORY
An
.Nm exit
D 8
function call appeared in Version 6 AT&T UNIX.
E 8
I 8
function call appeared in
.At v6 .
E 10
I 10
.Sh STANDARDS
The
.Nm _exit
function is defined by
.St -p1003.1-88 .
E 10
E 8
E 7
E 5
E 2
E 1
