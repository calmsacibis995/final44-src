h33474
s 00001/00001/00139
d D 8.2 93/12/11 23:08:04 mckusick 9 8
c copyediting for Usenix manuals
e
s 00002/00002/00138
d D 8.1 93/06/04 13:13:10 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00087/00069/00053
d D 6.6 91/04/29 04:38:57 cael 7 6
c mdoc version three/bsd copyright
e
s 00022/00013/00100
d D 6.5 90/05/30 12:31:25 sklower 6 5
c make clear that the accept system call doesn't necessitate
c protocol level confirmation of connection requests;
c adopt new sccs include mechanism for terms and conditions.
e
s 00014/00003/00099
d D 6.4 89/02/14 17:52:36 bostic 5 4
c add Berkeley specific copyright notice
e
s 00001/00001/00101
d D 6.3 86/05/22 11:41:45 anne 4 3
c punctuation
e
s 00003/00003/00099
d D 6.2 85/06/28 16:12:06 sechrest 3 2
c Improved English
e
s 00001/00001/00101
d D 6.1 85/05/15 11:52:35 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00102/00000/00000
d D 5.1 85/05/15 11:52:25 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 5
I 5
D 6
.\" Copyright (c) 1983 The Regents of the University of California.
E 6
I 6
D 7
.\" Copyright (c) 1983, 1990 The Regents of the University of California.
E 7
I 7
D 8
.\" Copyright (c) 1983, 1990, 1991 The Regents of the University of California.
E 7
E 6
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1983, 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
.\"
D 6
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 6
I 6
D 7
.\" %sccs.include.redist.man%
E 7
I 7
.\" %sccs.include.redist.roff%
E 7
E 6
E 5
.\"
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\"     %W% (Berkeley) %G%
E 7
.\"
D 2
.TH ACCEPT 2 "7 July 1983"
E 2
I 2
D 7
.TH ACCEPT 2 "%Q%"
E 2
.UC 5
.SH NAME
accept \- accept a connection on a socket
.SH SYNOPSIS
.ft B
.nf
#include <sys/types.h>
#include <sys/socket.h>
.PP
.ft B
ns = accept(s, addr, addrlen)
int ns, s;
struct sockaddr *addr;
int *addrlen;
.fi
.SH DESCRIPTION
E 7
I 7
.Dd %Q%
.Dt ACCEPT 2
.Os BSD 4.2
.Sh NAME
.Nm accept
.Nd accept a connection on a socket
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/socket.h>
.Ft int
.Fn accept "int s" "struct sockaddr *addr" "int *addrlen"
.Sh DESCRIPTION
E 7
The argument
D 7
.I s
E 7
I 7
.Fa s
E 7
D 3
is a socket which has been created with
E 3
I 3
is a socket that has been created with
E 3
D 7
.IR socket (2),
E 7
I 7
.Xr socket 2 ,
E 7
bound to an address with
D 7
.IR bind (2),
E 7
I 7
.Xr bind 2 ,
E 7
and is listening for connections after a
D 7
.IR listen (2).
.I Accept
E 7
I 7
.Xr listen 2 .
The
.Fn accept
argument
E 7
D 6
extracts the first connection
E 6
I 6
extracts the first connection request
E 6
on the queue of pending connections, creates
a new socket with the same properties of 
D 7
.I s
and allocates a new file descriptor,
.IR ns ,
E 7
I 7
.Fa s
and allocates a new file descriptor
E 7
for the socket.  If no pending connections are
present on the queue, and the socket is not marked
as non-blocking,
D 7
.I accept
E 7
I 7
.Fn accept
E 7
blocks the caller until a connection is present.
If the socket is marked non-blocking and no pending
connections are present on the queue, 
D 7
.I accept
E 7
I 7
.Fn accept
E 7
returns an error as described below.
D 7
The accepted socket,
.IR ns ,
E 7
I 7
The accepted socket
E 7
may not be used
to accept more connections.  The original socket
D 7
.I s
E 7
I 7
.Fa s
E 7
remains open.
D 7
.PP
E 7
I 7
.Pp
E 7
The argument
D 7
.I addr
E 7
I 7
.Fa addr
E 7
D 3
is a result parameter which is filled in with
E 3
I 3
is a result parameter that is filled in with
E 3
the address of the connecting entity,
as known to the communications layer.
The exact format of the
D 7
.I addr
E 7
I 7
.Fa addr
E 7
parameter is determined by the domain in which the communication
is occurring.
The 
D 7
.I addrlen
E 7
I 7
.Fa addrlen
E 7
is a value-result parameter; it should initially contain the
amount of space pointed to by
D 7
.IR addr ;
E 7
I 7
.Fa addr ;
E 7
on return it will contain the actual length (in bytes) of the
address returned.
This call
D 7
is used with connection-based socket types, currently with SOCK_STREAM.
.PP
E 7
I 7
is used with connection-based socket types, currently with
.Dv SOCK_STREAM . 
.Pp
E 7
It is possible to
D 7
.IR select (2)
E 7
I 7
.Xr select 2
E 7
a socket for the purposes of doing an
D 7
.I accept
E 7
I 7
.Fn accept
E 7
by selecting it for read.
I 6
D 7
.PP
E 7
I 7
.Pp
E 7
For certain protocols which require an explicit confirmation,
D 7
such as ISO or DATAKIT,
one should think of accept as merely dequeueing the next connection
request, and not in of itself implying confirmation.
E 7
I 7
such as
.Tn ISO
or
.Tn DATAKIT ,
.Fn accept
can be thought of
as merely dequeueing the next connection
request and not implying confirmation.
E 7
Confirmation can be implied by a normal read or write on the new
D 9
file desciptor, and rejection can be implied by closing the
E 9
I 9
file descriptor, and rejection can be implied by closing the
E 9
new socket.
D 7
.PP
E 7
I 7
.Pp
E 7
One can obtain user connection request data without confirming
the connection by issuing a 
D 7
recvmsg call with an msg_iovlen of 0 and a non-zero
msg_controllen, or by issuing a
.IR getsockopt (2)
E 7
I 7
.Xr recvmsg 2
call with an
.Fa msg_iovlen
of 0 and a non-zero
.Fa msg_controllen ,
or by issuing a
.Xr getsockopt 2
E 7
request.
Similarly, one can provide user connection rejection information
D 7
by issuing a sendmsg call with providing only the control information,
E 7
I 7
by issuing a
.Xr sendmsg 2
call with providing only the control information,
E 7
or by calling
D 7
.IR setsockopt (2).
E 6
.SH "RETURN VALUE
E 7
I 7
.Xr setsockopt 2 .
.Sh RETURN VALUES
E 7
D 4
The call returns \-1 on error.  If it succeeds it returns a non-negative
E 4
I 4
The call returns \-1 on error.  If it succeeds, it returns a non-negative
E 4
D 3
integer which is a descriptor for the accepted socket.
E 3
I 3
integer that is a descriptor for the accepted socket.
E 3
D 7
.SH ERRORS
The \fIaccept\fP will fail if:
.TP 20
[EBADF]
E 7
I 7
.Sh ERRORS
The
.Fn accept
will fail if:
.Bl -tag -width EWOULDBLOCK
.It Bq Er EBADF
E 7
The descriptor is invalid.
D 7
.TP 20
[ENOTSOCK]
E 7
I 7
.It Bq Er ENOTSOCK
E 7
The descriptor references a file, not a socket.
D 7
.TP 20
[EOPNOTSUPP]
The referenced socket is not of type SOCK_STREAM.
.TP 20
[EFAULT]
The \fIaddr\fP parameter is not in a writable part of the
E 7
I 7
.It Bq Er EOPNOTSUPP
The referenced socket is not of type
.Dv SOCK_STREAM . 
.It Bq Er EFAULT
The
.Fa addr
parameter is not in a writable part of the
E 7
user address space.
D 7
.TP 20
[EWOULDBLOCK]
E 7
I 7
.It Bq Er EWOULDBLOCK
E 7
The socket is marked non-blocking and no connections
are present to be accepted.
D 7
.SH SEE ALSO
bind(2), connect(2), listen(2), select(2), socket(2)
E 7
I 7
.El
.Sh SEE ALSO
.Xr bind 2 ,
.Xr connect 2 ,
.Xr listen 2 ,
.Xr select 2 ,
.Xr socket 2
.Sh HISTORY
The
.Nm
function appeared in 
.Bx 4.2 .
E 7
E 1
