h59850
s 00002/00000/00240
d D 8.5 94/06/01 21:09:00 ah 18 17
c page breaks for 4.4BSD manuals
e
s 00010/00005/00230
d D 8.4 94/05/06 16:39:22 mckusick 17 16
c fix up typesetting glitches
e
s 00001/00001/00234
d D 8.3 94/01/24 08:11:35 bostic 16 15
c ANSI C declaratoin wrong, make it match POSIX.1 and unistd.h
e
s 00001/00001/00234
d D 8.2 93/12/11 23:08:09 mckusick 15 14
c copyediting for Usenix manuals
e
s 00002/00002/00233
d D 8.1 93/06/04 13:14:26 bostic 14 13
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/00234
d D 6.11 93/03/04 18:48:50 mckusick 13 12
c update from Mike Karels at BSDI
e
s 00007/00001/00228
d D 6.10 93/02/26 17:59:53 mckusick 12 11
c update from Mike Karels at BSDI
e
s 00167/00168/00062
d D 6.9 91/03/10 23:37:28 cael 11 10
c man page macro and text revisions (-mdoc version 3)
e
s 00034/00017/00196
d D 6.8 88/11/22 21:56:21 bostic 10 9
c cleanup from Guy Harris; use "path" everywhere, not "name"; argv and
c envp are **char, not *envp[]; cleanup explanation of "#!"; refer to fcntl(2)
c as well as close(2); note that execve leaves real gid alone as well as real
c uid; change sigmask(2) to sigsetmask(2).
e
s 00010/00010/00203
d D 6.7 86/05/22 12:07:04 anne 9 8
c grammar
e
s 00004/00001/00209
d D 6.6 86/05/14 16:15:39 karels 8 7
c NCARGS
e
s 00007/00006/00203
d D 6.5 86/05/13 14:13:42 karels 7 6
c sundry clarifications
e
s 00003/00000/00206
d D 6.4 85/08/26 23:31:23 mckusick 6 5
c update error messages (mostly from sun!guy)
e
s 00002/00002/00204
d D 6.3 85/06/28 16:35:32 sechrest 5 4
c Improved english
e
s 00014/00006/00192
d D 6.2 85/05/22 18:30:38 mckusick 4 3
c update the error return codes to reflect those in 4.3BSD
e
s 00001/00001/00197
d D 6.1 85/05/09 17:20:41 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00150/00292/00048
d D 5.1 85/05/09 17:19:42 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00340/00000/00000
d D 4.1 85/05/09 17:18:41 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 11
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 11
I 11
D 14
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 14
I 14
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 14
E 11
.\"
D 11
.\"	%W% (Berkeley) %G%
E 11
I 11
.\" %sccs.include.redist.man%
E 11
.\"
D 2
.TH EXEC 2  4/1/81
E 2
I 2
D 3
.TH EXECVE 2 "27 July 1983"
E 3
I 3
D 11
.TH EXECVE 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
execl, execv, execle, execve, execlp, execvp, exec, exece, environ \- execute a file
E 2
I 2
execve \- execute a file
E 2
.SH SYNOPSIS
D 2
.nf
.B execl(name, arg0, arg1, ..., argn, 0)
.B char *name, *arg0, *arg1, ..., *argn;
E 2
I 2
.ft B
D 10
execve(name, argv, envp)
E 10
I 10
execve(path, argv, envp)
E 10
.br
D 10
char *name, *argv[], *envp[];
E 10
I 10
char *path, **argv, **envp;
E 10
.fi
.SH DESCRIPTION
.I Execve
E 11
I 11
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt EXECVE 2
.Os BSD 4
.Sh NAME
.Nm execve
.Nd execute a file
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft int
D 16
.Fn execve "const char *path" "const * char *argv" "const * char *envp"
E 16
I 16
.Fn execve "const char *path" "char *const argv[]" "char *const envp[]"
E 16
.Sh DESCRIPTION
.Fn Execve
E 11
transforms the calling process into a new process.
D 10
The new process is constructed from an ordinary file
E 10
I 10
The new process is constructed from an ordinary file,
whose name is pointed to by
D 11
.IR path ,
E 10
called the \fInew process file\fP.
E 11
I 11
.Fa path ,
called the
.Em new process file .
E 11
This file is either an executable object file,
or a file of data for an interpreter.
An executable object file consists of an identifying header,
followed by pages of data representing the initial program (text)
and initialized data pages.  Additional pages may be specified
D 9
by the header to be initialize with zero data.  See
E 9
I 9
D 11
by the header to be initialized with zero data.  See
E 9
.IR a.out (5).
E 2
.PP
D 2
.B execv(name, argv)
.B char *name, *argv[];
E 2
I 2
D 7
An interpreter file begins with a line of the form ``#! \fIinterpreter\fP'';
E 7
I 7
D 10
An interpreter file begins with a line of the form ``#! \fIinterpreter\fP''.
E 10
I 10
An interpreter file begins with a line of the form
.RB `` "#! \fIinterpreter\fP [\fIarg\fP]" ''.
E 11
I 11
by the header to be initialized with zero data;  see
.Xr a.out 5 .
.Pp
An interpreter file begins with a line of the form:
.Pp
.Bd -filled -offset indent -compact
.Sy \&#!
.Em interpreter
.Bq Em arg
.Ed
.Pp
E 11
E 10
E 7
When an interpreter file is
D 11
.IR execve\| 'd,
D 10
the system \fIexecve\fP\|'s the specified \fIinterpreter\fP, giving
D 7
it the name of the originally exec'd file as an argument,
E 7
I 7
it the name of the originally exec'd file as an argument and
E 7
shifting over the rest of the original arguments.
E 10
I 10
the system \fIexecve\fP\|'s the specified \fIinterpreter\fP.
E 11
I 11
D 17
.Fn execve Ap d ,
E 17
I 17
.\" was .Fn execve Ap d ,
\fBexecve\fP'd,
E 17
the system
D 17
.Fn execve Ap s
E 17
I 17
.\" was .Fn execve Ap s
\fBexecve\fP's
E 17
D 15
the specified
E 15
I 15
runs the specified
E 15
.Em interpreter .
E 11
If the optional
D 11
.I arg
E 11
I 11
.Em arg
E 11
is specified, it becomes the first argument to the
D 11
.IR interpreter ,
E 11
I 11
.Em interpreter ,
E 11
and the name of the originally
D 11
.BR execve 'd
E 11
I 11
D 17
.Fn execve Ap d
E 17
I 17
.\" was .Fn execve Ap d
\fBexecve\fP'd
E 17
E 11
file becomes the second argument;
otherwise, the name of the originally
D 11
.BR execve 'd
E 11
I 11
D 17
.Fn execve Ap d
E 17
I 17
.\" was .Fn execve Ap d
\fBexecve\fP'd
E 17
E 11
file becomes the first argument.  The original arguments are shifted over to
become the subsequent arguments.  The zeroth argument, normally the name of the
D 11
.BR execve 'd
E 11
I 11
D 17
.Fn execve Ap d
E 17
I 17
.\" was .Fn execve Ap d
\fBexecve\fP'd
E 17
E 11
file, is left unchanged.
E 10
E 2
D 11
.PP
D 2
.B "execle(name, arg0, arg1, ..., argn, 0, envp)"
.B "char *name, *arg0, *arg1, ..., *argn, *envp[];"
E 2
I 2
There can be no return from a successful \fIexecve\fP because the calling
core image is lost.
This is the mechanism whereby different process images become active.
E 2
.PP
D 2
.B execve(name, argv, envp)
.B char *name, *argv[], *envp[];
E 2
I 2
D 7
The argument \fIargv\fP is an array of character pointers
E 7
I 7
D 10
The argument \fIargv\fP is a null-terminated array of character pointers
E 7
to null-terminated character strings.  These strings constitute
the argument list to be made available to the new
E 10
I 10
The argument \fIargv\fP is a pointer to a null-terminated array of
E 11
I 11
.Pp
The argument
.Fa argv
is a pointer to a null-terminated array of
E 11
character pointers to null-terminated character strings.
D 11
These strings constitute the argument list to be made available to the new
E 10
process.  By convention, at least one argument must be present in
this array, and the first element of this array should be
D 9
the name of the executed program (i.e. the last component of \fIname\fP).
E 9
I 9
D 10
the name of the executed program (i.e., the last component of \fIname\fP).
E 10
I 10
the name of the executed program (i.e., the last component of \fIpath\fP).
E 10
E 9
E 2
.PP
D 2
.B extern char **environ;
.fi
.SH DESCRIPTION
.I Exec
in all its forms
overlays the calling process with the named file, then
transfers to the
entry point of the core image of the file.
There can be no return from a successful exec; the calling
core image is lost.
E 2
I 2
D 7
The argument \fIenvp\fP is also an array of character pointers
E 7
I 7
D 10
The argument \fIenvp\fP is also a null-terminated array of character pointers
E 7
to null-terminated strings.  These strings pass information to the
E 10
I 10
The argument \fIenvp\fP is also a pointer to a null-terminated array of
E 11
I 11
These strings construct the argument list to be made available to the new
process.  At least one argument must be present in
the array; by custom, the first element should be
the name of the executed program (for example, the last component of
.Fa path ) .
.Pp
The argument
.Fa envp
is also a pointer to a null-terminated array of
E 11
character pointers to null-terminated strings.
I 11
A pointer to this array is normally stored in the global variable
.Va environ.
E 11
These strings pass information to the
E 10
D 5
new process which are not directly arguments to the command, see
E 5
I 5
D 9
new process that is not directly an argument to the command, see
E 5
.IR environ (7).
E 9
I 9
new process that is not directly an argument to the command (see
D 11
.IR environ (7)).
E 9
E 2
.PP
D 2
Files remain open across
.I exec
unless explicit arrangement has been made;
see
.IR ioctl (2).
Ignored/held signals remain ignored/held across
these calls, but
signals that are caught (see
.IR signal (2))
are reset
to their default values.
E 2
I 2
Descriptors open in the calling process remain open in
the new process, except for those for which the close-on-exec
E 11
I 11
.Xr environ 7 ) .
.Pp
File descriptors open in the calling process image remain open in
the new process image, except for those for which the close-on-exec
E 11
D 9
flag is set; see
.IR close (2).
E 9
I 9
flag is set (see
D 10
.IR close (2)).
E 10
I 10
D 11
.IR close (2)
E 11
I 11
.Xr close 2
E 11
and
D 11
.IR fcntl (2)).
E 11
I 11
.Xr fcntl 2 ) .
E 11
E 10
E 9
D 5
Descriptors which remain open are unaffected by
E 5
I 5
Descriptors that remain open are unaffected by
E 5
D 11
.IR execve .
E 2
.PP
D 2
Each user has a
E 2
I 2
Ignored signals remain ignored across an
.IR execve ,
but signals that are caught are reset to their default values.
E 11
I 11
.Fn execve .
.Pp
Signals set to be ignored in the calling process are set to be ignored in
the
new process. Signals which are set to be caught in the calling process image
are set to default action in the new process image.
E 11
I 7
Blocked signals remain blocked regardless of changes to the signal action.
E 7
D 9
The signal stack is reset to be undefined; see
.IR sigvec (2)
for more information.
E 9
I 9
The signal stack is reset to be undefined (see
D 11
.IR sigvec (2) 
E 11
I 11
.Xr sigaction 2
E 11
for more information).
E 9
D 11
.PP
Each process has
E 2
.I real
D 2
user ID and group ID and an
E 2
I 2
D 9
user and group IDs and a
E 9
I 9
user and group IDs and an
E 9
E 2
.I effective
D 2
user ID and group ID.
The
real
ID
identifies the person using the system;
the
effective
ID
determines his access privileges.
.I Exec
E 2
I 2
user and group IDs.  The
.I real
ID identifies the person using the system; the
.I effective
ID determines his access privileges.
.I Execve
E 2
changes the effective user and group ID to
D 2
the owner of the executed file if the file has the `set-user-ID'
or `set-group-ID'
modes.
The
real
E 2
I 2
the owner of the executed file if the file has the \*(lqset-user-ID\*(rq
or \*(lqset-group-ID\*(rq modes.  The
.I real
E 2
D 10
user ID is not affected.
E 10
I 10
user and group IDs are not affected.
E 10
.PP
E 11
I 11
.Pp
If the set-user-ID mode bit of the new process image file is set
(see
.Xr chmod 2 ) ,
the effective user ID of the new process image is set to the owner ID
of the new process image file.
If the set-group-ID mode bit of the new process image file is set,
the effective group ID of the new process image is set to the group ID
of the new process image file.
I 12
(The effective group ID is the first element of the group list.)
E 12
The real user ID, real group ID and
D 12
supplementary group IDs of the new process image remain the same as the calling
E 12
I 12
other group IDs of the new process image remain the same as the calling
E 12
process image.
I 12
After any set-user-ID and set-group-ID processing,
the effective user ID is recorded as the saved set-user-ID,
and the effective group ID is recorded as the saved set-group-ID.
These values may be used in changing the effective IDs later (see
D 13
.XR setuid 2 ) .
E 13
I 13
.Xr setuid 2 ) .
I 18
.ne 1i
E 18
E 13
E 12
.Pp
E 11
D 2
The
.I name
argument
is a pointer to the name of the file
to be executed.
The pointers
.IR arg [ 0 ],
.IR arg [ 1 "] ..."
address null-terminated strings.
Conventionally
.IR arg [ 0 ]
is the name of the
file.
E 2
I 2
The new process also inherits the following attributes from
the calling process:
E 2
D 11
.PP
D 2
From C, two interfaces are available.
.I execl
is useful when a known file with known arguments is
being called;
the arguments to
.I execl
are the character strings
constituting the file and the arguments;
the first argument is conventionally
the same as the file name (or its last component).
A 0 argument must end the argument list.
E 2
I 2
.in +5n
.nf
.ta +2i
process ID	see \fIgetpid\fP\|(2)
parent process ID	see \fIgetppid\fP\|(2)
process group ID	see \fIgetpgrp\fP\|(2)
access groups	see \fIgetgroups\fP\|(2)
working directory	see \fIchdir\fP\|(2)
root directory	see \fIchroot\fP\|(2)
control terminal	see \fItty\fP\|(4)
resource usages	see \fIgetrusage\fP\|(2)
interval timers	see \fIgetitimer\fP\|(2)
resource limits	see \fIgetrlimit\fP\|(2)
file mode mask	see \fIumask\fP\|(2)
D 7
signal mask	see \fIsigvec\fP\|(2)
E 7
I 7
D 10
signal mask	see \fIsigvec\fP\|(2), \fIsigmask\fP\|(2)
E 10
I 10
signal mask	see \fIsigvec\fP\|(2), \fIsigsetmask\fP\|(2)
E 10
E 7
.in -5n
.fi
E 2
.PP
D 2
The
.I execv
version is useful when the number of arguments is unknown
in advance;
the arguments to
.I execv
are the name of the file to be
executed and a vector of strings containing
the arguments.
The last argument string must be followed
by a 0 pointer.
E 2
I 2
When the executed program begins, it is called as follows:
E 2
.PP
D 2
When a C program is executed,
it is called as follows:
.PP
E 2
I 2
.DT
E 2
.nf
	main(argc, argv, envp)
	int argc;
	char **argv, **envp;
.fi
.PP
E 11
I 11
.Pp
.Bl -column parent_process_ID -offset indent -compact
.It process ID Ta see Xr getpid 2
.It parent process ID Ta see Xr getppid 2
.It process group ID Ta see Xr getpgrp 2
.It access groups Ta see Xr getgroups 2
.It working directory Ta see Xr chdir 2
.It root directory Ta see Xr chroot 2
.It control terminal Ta see Xr termios 4
.It resource usages Ta see Xr getrusage 2
.It interval timers Ta see Xr getitimer 2
.It resource limits Ta see Xr getrlimit 2
.It file mode mask Ta see Xr umask 2
.It signal mask Ta see Xr sigvec 2 ,
.Xr sigsetmask 2
.El
.Pp
When a program is executed as a result of an
.Fn execve
call, it is entered as follows:
.Bd -literal -offset indent
main(argc, argv, envp)
int argc;
char **argv, **envp;
.Ed
.Pp
E 11
where
D 2
.IR argc ""
is the argument count
E 2
I 2
D 11
.I argc
is the number of elements in \fIargv\fP
E 11
I 11
.Fa argc
is the number of elements in
.Fa argv
E 11
(the ``arg count'')
E 2
and
D 2
.IR argv ""
is an array of character pointers
E 2
I 2
D 11
.I argv
E 11
I 11
.Fa argv
E 11
D 10
is the array of character pointers
E 10
I 10
points to the array of character pointers
E 10
E 2
to the arguments themselves.
D 2
As indicated,
.IR argc ""
is conventionally at least one
and the first member of the array points to a
string containing the name of the file.
E 2
D 11
.PP
D 2
.I Argv
is directly usable in another
.I execv
because
.IR argv [ argc ]
is 0.
.PP
E 2
.I Envp
is a pointer to an array of strings that constitute
the
.I environment
of the process.
I 2
A pointer to this array is also stored in the global variable ``environ''.
E 2
Each string consists of a name, an \*(lq=\*(rq, and a null-terminated value.
The array of pointers is terminated by a null pointer.
The shell
.IR sh (1)
passes an environment entry for each global shell variable
defined when the program is called.
See
D 2
.IR environ (5)
E 2
I 2
.IR environ (7)
E 2
for some conventionally
used names.
D 2
The C run-time start-off routine places a copy of
.I envp
in the global cell
.I environ,
which is used
by
.IR execv \ and \ execl
to pass the environment to any subprograms executed by the
current program.
The
.I exec
routines use lower-level routines as follows
to pass an environment explicitly:
.RS
.nf
execve(file, argv, environ);
execle(file, arg0, arg1, . . . , argn, 0, environ);
.fi
.RE
.PP
.I Execlp
and
.I execvp
are called with the same arguments as
.I execl
and
.I execv,
but duplicate the shell's actions in searching for an executable
file in a list of directories.
The directory list is obtained from the environment.
.PP
To aid execution of command files of various programs,
if the first two characters of the executable file are '#!' then
.I exec
attempts to read a pathname from the executable file and use
that program as the command files command interpreter. For example, the
following command file sequence would be used to begin a
.I csh
script:
.RS
.nf
#! /bin/csh
# This shell script computes the checksum on /dev/foobar
#
	...
.fi
.RE
A single parameter may be passed the interpreter, specified after the
name of the interpreter; its length and the length of the name
of the interpreter combined must not exceed 32 characters.
The space (or tab) following the '#!' is mandatory, and the
pathname must be explicit (no paths are searched).
.SH FILES
.ta \w'/bin/sh  'u
/bin/sh	shell, invoked if command file found
by
.I execlp
or
.I execvp
.SH "SEE ALSO"
fork(2), environ(5), csh(1)
.SH DIAGNOSTICS
If the file cannot be found,
if it is not executable,
if it does not start with a valid magic number (see
.IR a.out (5)),
if maximum memory is exceeded,
or if the arguments require too much space,
a return
constitutes the diagnostic;
the return value is \-1.
Even for the super-user,
at least one of the execute-permission bits must be set for
a file to be executed.
.SH BUGS
E 2
I 2
.SH "RETURN VALUE
E 11
I 11
.Sh RETURN VALUES
As the
.Fn execve
function overlays the current process image 
with a new process image the successful call
has no process to return to.
E 11
E 2
If
D 2
.I execvp
is called to execute a file that turns out to be a shell
command file,
and if it is impossible to execute the shell,
the values of
.I argv[0]
and
.I argv[\-1]
will be modified before return.
.SH "ASSEMBLER (PDP-11)"
.DT
(exec = 11.)
.br
.B sys exec; name; argv
.PP
(exece = 59.)
.br
.B sys exece; name; argv; envp
.PP
Plain
.I exec
is obsoleted by
.I exece,
but remains for historical reasons.
.PP
When the called file starts execution on the PDP11,
the stack pointer points to a word containing the number of arguments.
Just above
this number is a list of pointers to the argument strings,
followed by a null pointer, followed by the pointers to
the environment strings and then another null pointer.
The strings themselves follow;
a 0 word is left at the very top of memory.
.PP
  sp\(->	nargs
.br
	arg0
.br
	...
.br
	argn
.br
	0
.br
	env0
.br
	...
.br
	envm
.br
	0
.PP
 arg0:	<arg0\e0>
.br
	...
.br
 env0:	<env0\e0>
.br
	0
.PP
On the Interdata 8/32,
the stack begins at a conventional place
(currently 0xD0000)
and grows upwards.
After
.I exec,
the layout of data on the stack is as follows.
.PP
.nf
	int	0
 arg0:	byte	...
	...
argp0:	int	arg0
	...
	int	0
envp0:	int	env0
	...
	int	0
 %2\(->	space	40
	int	nargs
	int	argp0
	int	envp0
 %3\(->
.fi
.PP
This arrangement happens to conform well to C calling conventions.
.PP
On a VAX-11, the stack begins at
.lg 0
0x7ffff000
.lg 1
and grows towards lower numbered addresses.
After
.IR exec ,
the layout of data on the stack is as follows.
.PP
.nf
.ta \w' arg0:  'u
 ap \(->
 fp \(->
 sp \(->	.long nargs
	.long arg0
	...
	.long argn
	.long 0
	.long env0
	...
	.long envn
	.long 0
 arg0:	.byte "arg0\e0"
	...
 envn:	.byte "envn\e0"
	.long 0
E 2
I 2
D 11
.I execve
returns to the calling process an error has occurred; the
return value will be \-1 and the global variable
.I errno
will contain an error code.
.SH ERRORS
.I Execve
will fail and return to the calling process if one or more
of the following are true:
.TP 15
I 4
[ENOTDIR]
E 11
I 11
.Fn execve
does return to the calling process an error has occurred; the
return value will be -1 and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn Execve
will fail and return to the calling process if:
.Bl -tag -width [ENAMETOOLONG]
.It Bq Er ENOTDIR
E 11
A component of the path prefix is not a directory.
D 11
.TP 15
[EINVAL]
E 11
I 11
.It Bq Er EINVAL
E 11
The pathname contains a character with the high-order bit set.
D 11
.TP 15
[ENAMETOOLONG]
E 11
I 11
.It Bq Er ENAMETOOLONG
E 11
A component of a pathname exceeded 255 characters,
or an entire path name exceeded 1023 characters.
D 11
.TP 15
E 4
[ENOENT]
E 11
I 11
.It Bq Er ENOENT
E 11
D 4
One or more components of the new process file's
path name do not exist.
E 4
I 4
The new process file does not exist.
E 4
D 11
.TP 15
D 4
[ENOTDIR]
A component of the new process file is not a directory.
E 4
I 4
[ELOOP]
E 11
I 11
.It Bq Er ELOOP
E 11
Too many symbolic links were encountered in translating the pathname.
E 4
D 11
.TP 15
[EACCES]
E 11
I 11
.It Bq Er EACCES
E 11
D 4
Search permission is denied for a directory listed
in the new process file's path prefix.
E 4
I 4
Search permission is denied for a component of the path prefix.
E 4
D 11
.TP 15
[EACCES]
E 11
I 11
.It Bq Er EACCES
E 11
The new process file is not an ordinary file.
D 11
.TP 15
[EACCES]
E 11
I 11
.It Bq Er EACCES
E 11
The new process file mode denies execute permission.
D 11
.TP 15
[ENOEXEC]
E 11
I 11
.It Bq Er ENOEXEC
E 11
The new process file has the appropriate access
permission, but has an invalid magic number in its header.
D 11
.TP 15
[ETXTBSY]
E 11
I 11
.It Bq Er ETXTBSY
E 11
The new process file is a pure procedure (shared text)
file that is currently open for writing or reading by some process.
I 18
.ne 1i
E 18
D 11
.TP 15
[ENOMEM]
E 11
I 11
.It Bq Er ENOMEM
E 11
The new process requires more virtual memory than
is allowed by the imposed maximum
D 11
.RI ( getrlimit (2)).
.TP 15
[E2BIG]
E 11
I 11
.Pq Xr getrlimit 2 .
.It Bq Er E2BIG
E 11
The number of bytes in the new process's argument list
D 8
is larger than the system-imposed limit of {ARG_MAX} bytes.
E 8
I 8
is larger than the system-imposed limit.
The limit in the system as released is 20480 bytes
D 11
(NCARGS in
.IR <sys/param.h> .
E 8
.TP 15
[EFAULT]
E 11
I 11
.Pf ( Dv NCARGS
in
.Ao Pa sys/param.h Ac .
.It Bq Er EFAULT
E 11
The new process file is not as long as indicated by
the size values in its header.
D 11
.TP 15
[EFAULT]
\fIPath\fP\|, \fIargv\fP\|, or \fIenvp\fP point
E 11
I 11
.It Bq Er EFAULT
.Fa Path ,
.Fa argv ,
or
.Fa envp
point
E 11
to an illegal address.
I 6
D 11
.TP 15
[EIO]
E 11
I 11
.It Bq Er EIO
E 11
An I/O error occurred while reading from the file system.
E 6
D 11
.SH CAVEATS
E 11
I 11
.El
.Sh CAVEAT
E 11
If a program is
D 11
.I setuid
E 11
I 11
.Em setuid
E 11
to a non-super-user, but is executed when
D 7
the real \fIuid\fP is ``root'', then the program has the powers
E 7
I 7
D 11
the real \fIuid\fP is ``root'', then the program has some of the powers
E 11
I 11
the real
.Em uid
is ``root'', then the program has some of the powers
E 11
E 7
of a super-user as well.
D 11
.SH "SEE ALSO"
exit(2), fork(2), execl(3), environ(7)
E 11
I 11
.Sh SEE ALSO
.Xr exit 2 ,
.Xr fork 2 ,
.Xr execl 3 ,
.Xr environ 7
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 4.2 .
E 11
E 2
E 1
