h29949
s 00001/00000/00454
d D 8.2 94/01/12 16:52:22 mckusick 17 16
c typesetting nit
e
s 00002/00002/00452
d D 8.1 93/07/11 15:17:52 bostic 16 15
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00000/00006/00454
d D 6.12 93/07/11 15:17:40 mckusick 15 13
c bugs section is no longer relevant
e
s 00002/00002/00458
d R 8.1 93/07/07 10:56:44 bostic 14 13
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00272/00001/00188
d D 6.11 93/07/07 10:56:15 mckusick 13 11
c add description for lockf advisory file locking
e
s 00002/00002/00187
d R 8.1 93/06/04 13:14:34 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/00188
d D 6.10 92/05/04 15:35:08 bostic 11 10
c EWOULDBLOCK -> EAGAIN (POSIX)
e
s 00001/00001/00188
d D 6.9 92/05/04 15:30:55 bostic 10 9
c O_NDELAY -> O_NONBLOCK (POSIX)
e
s 00001/00001/00188
d D 6.8 92/03/29 07:30:13 bostic 9 8
c fix include files
e
s 00145/00107/00044
d D 6.7 91/03/10 23:37:33 cael 8 7
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00011/00150
d D 6.6 90/06/23 17:48:16 trent 7 6
c new copyright notice
e
s 00014/00003/00147
d D 6.5 89/05/18 14:15:10 bostic 6 5
c add Berkeley specific copyright notice
e
s 00002/00002/00148
d D 6.4 86/05/22 12:17:00 anne 5 4
c grammar
e
s 00005/00000/00145
d D 6.3 86/05/15 10:28:55 karels 4 3
c add ESRCH for setown
e
s 00001/00003/00144
d D 6.2 86/05/13 14:45:19 karels 3 2
c update
e
s 00001/00001/00146
d D 6.1 85/05/15 11:53:38 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00147/00000/00000
d D 5.1 85/05/15 11:53:28 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 16
.\" Copyright (c) 1983 The Regents of the University of California.
.\" All rights reserved.
E 16
I 16
.\" Copyright (c) 1983, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 16
.\"
D 7
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 7
I 7
.\" %sccs.include.redist.man%
E 7
E 6
.\"
D 8
.\"	%W% (Berkeley) %G%
E 8
I 8
.\"     %W% (Berkeley) %G%
E 8
.\"
D 2
.TH FCNTL 2 "18 July 1983"
E 2
I 2
D 8
.TH FCNTL 2 "%Q%"
E 2
.UC 5
.SH NAME
fcntl \- file control
.SH SYNOPSIS
.nf
.ft B
#include <fcntl.h>
.PP
.ft B
res = fcntl(fd, cmd, arg)
int res;
int fd, cmd, arg;
.ft R
.SH DESCRIPTION
.I Fcntl
E 8
I 8
.Dd %Q%
.Dt FCNTL 2
.Os BSD 4.2
.Sh NAME
.Nm fcntl
.Nd file control
.Sh SYNOPSIS
D 9
.Fd #include <sys/fcntl.h>
E 9
I 9
.Fd #include <fcntl.h>
E 9
.Ft int
.Fn fcntl "int fd" "int cmd" "int arg"
.Sh DESCRIPTION
.Fn Fcntl
E 8
provides for control over descriptors.
The argument
D 8
.I fd
E 8
I 8
.Fa fd
E 8
is a descriptor to be operated on by
D 8
.I cmd
E 8
I 8
.Fa cmd
E 8
as follows:
D 8
.TP 15
F_DUPFD
E 8
I 8
.Bl -tag -width F_GETOWNX
.It Dv F_DUPFD
E 8
Return a new descriptor as follows:
D 8
.IP
E 8
I 8
.Pp
.Bl -bullet -compact -offset 4n
.It
E 8
Lowest numbered available descriptor greater than or equal to
D 8
.I arg.
.IP
E 8
I 8
.Fa arg .
.It
E 8
Same object references as the original descriptor.
D 8
.IP
New descriptor shares the same file pointer if the object
E 8
I 8
.It
New descriptor shares the same file offset if the object
E 8
was a file.
D 8
.IP
E 8
I 8
.It
E 8
Same access mode (read, write or read/write).
D 8
.IP
E 8
I 8
.It
E 8
Same file status flags (i.e., both file descriptors
share the same file status flags).
D 8
.IP
E 8
I 8
.It
E 8
The close-on-exec flag associated with the new file descriptor
is set to remain open across
D 8
.IR execv (2)
E 8
I 8
.Xr execv 2
E 8
system calls.
D 8
.TP 15
F_GETFD
E 8
I 8
.El
.It Dv F_GETFD
E 8
Get the close-on-exec flag associated with the file descriptor
D 8
.IR fd .
If the low-order bit is 0, the file will remain open across
.IR exec ,
E 8
I 8
.Fa fd .
If the low-order bit of the returned value is 0,
the file will remain open across
.Fn exec ,
E 8
otherwise the file will be closed upon execution of
D 8
.I exec.
.TP 15
F_SETFD
E 8
I 8
.Fn exec
.Fa ( arg
is ignored).
.It Dv F_SETFD
E 8
Set the close-on-exec flag associated with
D 8
.I fd
E 8
I 8
.Fa fd
E 8
to the low order bit of
D 8
.I arg
E 8
I 8
.Fa arg
E 8
(0 or 1 as above).
D 8
.TP 15
F_GETFL
Get descriptor status flags, as described below.
.TP 15
F_SETFL
Set descriptor status flags.
.TP 15
F_GETOWN
E 8
I 8
.It Dv F_GETFL
Get descriptor status flags, as described below
.Fa ( arg
is ignored).
.It Dv F_SETFL
Set descriptor status flags to
.Fa arg .
.It Dv F_GETOWN
E 8
Get the process ID or process group
D 8
currently receiving SIGIO and SIGURG
E 8
I 8
currently receiving
.Dv SIGIO
and
.Dv SIGURG
E 8
signals; process groups are returned
D 8
as negative values.
.TP
F_SETOWN
E 8
I 8
as negative values
.Fa ( arg
is ignored).
.It Dv F_SETOWN
E 8
Set the process or process group
D 8
to receive SIGIO and SIGURG signals;
E 8
I 8
to receive
.Dv SIGIO
and
.Dv SIGURG
signals;
E 8
process groups are specified by supplying
D 8
.I arg
E 8
I 8
.Fa arg
E 8
as negative, otherwise 
D 8
.I arg
E 8
I 8
.Fa arg
E 8
is interpreted as a process ID.
D 8
.LP
The flags for the F_GETFL and F_SETFL flags are as follows:
.TP 15
FNDELAY
E 8
I 8
.El
.Pp
The flags for the
.Dv F_GETFL
and
.Dv F_SETFL
flags are as follows:
D 13
.Bl -tag -width F_GETOWNX
E 13
I 13
.Bl -tag -width O_NONBLOCKX
E 13
D 10
.It Dv O_NDELAY
E 10
I 10
.It Dv O_NONBLOCK
E 10
E 8
Non-blocking I/O; if no data is available to a
D 8
.I read
call, or if a write operation would block,
the call returns -1 with the error EWOULDBLOCK.
.TP
FAPPEND
E 8
I 8
.Xr read
call, or if a
.Xr write
operation would block,
the read or write call returns -1 with the error
D 11
.Er EWOULDBLOCK .
E 11
I 11
.Er EAGAIN .
E 11
.It Dv O_APPEND
E 8
Force each write to append at the end of file;
D 8
corresponds to the O_APPEND flag of
.IR open (2).
.TP
FASYNC
Enable the SIGIO signal to be sent to the process group
E 8
I 8
corresponds to the
.Dv O_APPEND
flag of
.Xr open 2 .
.It Dv O_ASYNC
Enable the
.Dv SIGIO
signal to be sent to the process group
E 8
D 5
when I/O is possible, e.g.
E 5
I 5
when I/O is possible, e.g.,
E 5
upon availability of data to be read.
D 8
.SH "RETURN VALUE
E 8
I 8
.El
I 13
.Pp
Several commands are available for doing advisory file locking;
they all operate on the following structure:
I 17
.ne 7v
E 17
.Bd -literal
struct flock {
	off_t	l_start;	/* starting offset */
	off_t	l_len;		/* len = 0 means until end of file */
	pid_t	l_pid;		/* lock owner */
	short	l_type;		/* lock type: read/write, etc. */
	short	l_whence;	/* type of l_start */
};
.Ed
The commands available for advisory record locking are as follows:
.Bl -tag -width F_SETLKWX
.It Dv F_GETLK
Get the first lock that blocks the lock description pointed to by the
third argument,
.Fa arg ,
taken as a pointer to a
.Fa "struct flock"
(see above).
The information retrieved overwrites the information passed to
.Nm fcntl
in the
.Fa flock
structure.
If no lock is found that would prevent this lock from being created,
the structure is left unchanged by this function call except for the
lock type which is set to
.Dv F_UNLCK .
.It Dv F_SETLK
Set or clear a file segment lock according to the lock description
pointed to by the third argument,
.Fa arg ,
taken as a pointer to a
.Fa "struct flock"
(see above).
.Dv F_SETLK
is used to establish shared (or read) locks
.Dv (F_RDLCK)
or exclusive (or write) locks,
.Dv (F_WRLCK) ,
as well as remove either type of lock
.Dv (F_UNLCK) .
If a shared or exclusive lock cannot be set,
.Nm fcntl
returns immediately with
.Er EACCES .
.It Dv F_SETLKW
This command is the same as
.Dv F_SETLK
except that if a shared or exclusive lock is blocked by other locks,
the process waits until the request can be satisfied.
If a signal that is to be caught is received while
.Nm fcntl
is waiting for a region, the
.Nm fcntl
will be interrupted if the signal handler has not specified the
.Dv SA_RESTART
(see
.Xr sigaction 2 ) .
.El
.Pp
When a shared lock has been set on a segment of a file,
other processes can set shared locks on that segment
or a portion of it.
A shared lock prevents any other process from setting an exclusive
lock on any portion of the protected area.
A request for a shared lock fails if the file descriptor was not
opened with read access.
.Pp
An exclusive lock prevents any other process from setting a shared lock or
an exclusive lock on any portion of the protected area.
A request for an exclusive lock fails if the file was not
opened with write access.
.Pp
The value of
.Fa l_whence
is
.Dv SEEK_SET ,
.Dv SEEK_CUR ,
or
.Dv SEEK_END
to indicate that the relative offset,
.Fa l_start
bytes, will be measured from the start of the file,
current position, or end of the file, respectively.
The value of
.Fa l_len
is the number of consecutive bytes to be locked.
If
.Fa l_len
is negative, the result is undefined.
The
.Fa l_pid
field is only used with
.Dv F_GETLK
to return the process ID of the process holding a blocking lock.
After a successful
.Dv F_GETLK
request, the value of
.Fa l_whence
is
.Dv SEEK_SET .
.Pp
Locks may start and extend beyond the current end of a file,
but may not start or extend before the beginning of the file.
A lock is set to extend to the largest possible value of the
file offset for that file if
.Fa l_len
is set to zero. If
.Fa l_whence
and
.Fa l_start
point to the beginning of the file, and
.Fa l_len
is zero, the entire file is locked.
If an application wishes only to do entire file locking, the
.Xr flock 2
system call is much more efficient.
.Pp
There is at most one type of lock set for each byte in the file.
Before a successful return from an
.Dv F_SETLK
or an
.Dv F_SETLKW
request when the calling process has previously existing locks
on bytes in the region specified by the request,
the previous lock type for each byte in the specified
region is replaced by the new lock type.
As specified above under the descriptions
of shared locks and exclusive locks, an
.Dv F_SETLK
or an
.Dv F_SETLKW
request fails or blocks respectively when another process has existing
locks on bytes in the specified region and the type of any of those
locks conflicts with the type specified in the request.
.Pp
This interface follows the completely stupid semantics of System V and
.St -p1003.1-88
that require that all locks associated with a file for a given process are
removed when \fIany\fP file descriptor for that file is closed by that process.
This semantic means that applications must be aware of any files that
a subroutine library may access.
For example if an application for updating the password file locks the
password file database while making the update, and then calls
.Xr getpwname 3
to retrieve a record,
the lock will be lost because 
.Xr getpwname 3
opens, reads, and closes the password database.
The database close will release all locks that the process has
associated with the database, even if the library routine never
requested a lock on the database.
Another minor semantic problem with this interface is that
locks are not inherited by a child process created using the
.Xr fork 2
function.
The
.Xr flock 2
interface has much more rational last close semantics and
allows locks to be inherited by child processes.
.Xr Flock 2
is recommended for applications that want to ensure the integrity
of their locks when using library routines or wish to pass locks
to their children.
Note that 
.Xr flock 2
and 
.Xr fcntl 2
locks may be safely used concurrently.
.Pp
All locks associated with a file for a given process are
removed when the process terminates.
.Pp
A potential for deadlock occurs if a process controlling a locked region
is put to sleep by attempting to lock the locked region of another process.
This implementation detects that sleeping until a locked region is unlocked
would cause a deadlock and fails with an
.Er EDEADLK
error.
E 13
.Sh RETURN VALUES
E 8
Upon successful completion, the value returned depends on
D 8
.I cmd
E 8
I 8
.Fa cmd
E 8
as follows:
D 8
.sp .5v
.nf
.ta .25i 1.25i
	F_DUPFD	A new file descriptor.
	F_GETFD	Value of flag (only the low-order bit is defined).
	F_GETFL	Value of flags.
	F_GETOWN	Value of file descriptor owner.
	other	Value other than \-1.
.fi
.sp .5v
Otherwise, a value of \-1 is returned and
.I errno
E 8
I 8
.Bl -tag -width F_GETOWNX -offset indent
.It Dv F_DUPFD
A new file descriptor.
.It Dv F_GETFD
Value of flag (only the low-order bit is defined).
.It Dv F_GETFL
Value of flags.
.It Dv F_GETOWN
Value of file descriptor owner.
.It other
Value other than -1.
.El
.Pp
Otherwise, a value of -1 is returned and
.Va errno
E 8
is set to indicate the error.
D 8
.SH ERRORS
.I Fcntl
will fail if one or more of the following are true:
.TP 15
[EBADF]
.I Fildes
E 8
I 8
.Sh ERRORS
.Fn Fcntl
will fail if:
.Bl -tag -width Er
I 13
.It Bq Er EACCES
The argument
.Fa arg
is
.Dv F_SETLK ,
the type of lock
.Fa (l_type)
is a shared lock
.Dv (F_RDLCK)
or exclusive lock
.Dv (F_WRLCK) ,
and the segment of a file to be locked is already
exclusive-locked by another process;
or the type is an exclusive lock and some portion of the
segment of a file to be locked is already shared-locked or
exclusive-locked by another process.
E 13
.It Bq Er EBADF
.Fa Fildes
E 8
is not a valid open file descriptor.
I 13
.Pp
The argument
.Fa cmd
is
.Dv F_SETLK
or
.Dv F_SETLKW ,
the type of lock
.Fa (l_type)
is a shared lock
.Dv (F_RDLCK) ,
and
.Fa fildes
is not a valid file descriptor open for reading.
.Pp
The argument
.Fa cmd
is
.Dv F_SETLK
or
.Dv F_SETLKW ,
the type of lock
.Fa (l_type)
is an exclusive lock
.Dv (F_WRLCK) ,
and
.Fa fildes
is not a valid file descriptor open for writing.
E 13
D 8
.TP 15
[EMFILE]
.I Cmd
is F_DUPFD and the maximum allowed number of file descriptors are currently
E 8
I 8
.It Bq Er EMFILE
.Fa Cmd
is
.Dv F_DUPFD
and the maximum allowed number of file descriptors are currently
E 8
open.
I 13
.It Bq Er EDEADLK
The argument
.Fa cmd
is
.Dv F_SETLKW ,
and a deadlock condition was detected.
.It Bq Er EINTR
The argument
.Fa cmd
is
.Dv F_SETLKW ,
and the function was interrupted by a signal.
E 13
D 8
.TP 15
[EINVAL]
.I Cmd
is F_DUPFD and
.I arg
E 8
I 8
.It Bq Er EINVAL
.Fa Cmd
is
.Dv F_DUPFD
and
.Fa arg
E 8
D 5
is negative or greater the maximum allowable number
E 5
I 5
is negative or greater than the maximum allowable number
E 5
(see
D 8
.IR getdtablesize (2)).
I 4
.TP 15
[ESRCH]
.I Cmd
is F_SETOWN and
E 8
I 8
.Xr getdtablesize 2 ) .
I 13
.Pp
The argument
.Fa cmd
is
.Dv F_GETLK ,
.Dv F_SETLK ,
or
.Dv F_SETLKW
and the data to which
.Fa arg
points is not valid, or
.Fa fildes
refers to a file that does not support locking.
.It Bq Er EMFILE
The argument
.Fa cmd
is
.Dv F_DUPED
and the maximum number of file descriptors permitted for the
process are already in use,
or no file descriptors greater than or equal to
.Fa arg
are available.
.It Bq Er ENOLCK
The argument
.Fa cmd
is
.Dv F_SETLK
or
.Dv F_SETLKW ,
and satisfying the lock or unlock request would result in the
number of locked regions in the system exceeding a system-imposed limit.
E 13
.It Bq Er ESRCH
.Fa Cmd
is
.Dv F_SETOWN
and
E 8
the process ID given as argument is not in use.
E 4
D 8
.SH "SEE ALSO
close(2), execve(2), getdtablesize(2), open(2), sigvec(2)
.SH BUGS
The asynchronous I/O facilities of FNDELAY and FASYNC
E 8
I 8
.El
.Sh SEE ALSO
.Xr close 2 ,
.Xr execve 2 ,
I 13
.Xr flock 2 ,
E 13
.Xr getdtablesize 2 ,
.Xr open 2 ,
.Xr sigvec 2
D 15
.Sh BUGS
The asynchronous I/O facilities of
.Dv FNDELAY
and
.Dv FASYNC
E 8
D 3
are currently available only for tty operations.
No SIGIO signal is sent upon draining of output sufficiently
for non-blocking writes to occur.
E 3
I 3
are currently available only for tty and socket operations.
E 15
I 8
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 4.2 .
E 8
E 3
E 1
