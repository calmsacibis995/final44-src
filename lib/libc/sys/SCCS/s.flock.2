h15072
s 00002/00002/00117
d D 8.2 93/12/11 23:08:10 mckusick 10 9
c copyediting for Usenix manuals
e
s 00002/00002/00117
d D 8.1 93/06/04 13:14:40 bostic 9 8
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00081/00060/00038
d D 6.7 91/03/10 23:37:36 cael 8 7
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00011/00097
d D 6.6 90/06/23 17:48:11 trent 7 6
c new copyright notice
e
s 00014/00003/00094
d D 6.5 89/05/18 14:15:13 bostic 6 5
c add Berkeley specific copyright notice
e
s 00001/00001/00096
d D 6.4 86/05/22 12:18:08 anne 5 4
c punctuation
e
s 00001/00001/00096
d D 6.3 86/04/20 05:00:12 lepreau 4 3
c typo
e
s 00002/00002/00095
d D 6.2 85/06/28 16:51:43 sechrest 3 2
c Improved english
e
s 00001/00001/00096
d D 6.1 85/05/15 11:54:04 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00097/00000/00000
d D 5.1 85/05/15 11:53:57 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 8
.\" Copyright (c) 1983 The Regents of the University of California.
E 8
I 8
D 9
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
E 8
.\" All rights reserved.
E 9
I 9
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 9
.\"
D 7
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 7
I 7
.\" %sccs.include.redist.man%
E 7
E 6
.\"
D 8
.\"	%W% (Berkeley) %G%
E 8
I 8
.\"     %W% (Berkeley) %G%
E 8
.\"
D 2
.TH FLOCK 2 "27 July 1983"
E 2
I 2
D 8
.TH FLOCK 2 "%Q%"
E 2
.UC 5
.SH NAME
flock \- apply or remove an advisory lock on an open file
.SH SYNOPSIS
.nf
.ft B
#include <sys/file.h>
.PP
.ft B
.DT
#define	LOCK_SH	1	/* shared lock */
#define	LOCK_EX	2	/* exclusive lock */
#define	LOCK_NB	4	/* don't block when locking */
#define	LOCK_UN	8	/* unlock */
.PP
.ft B
flock(fd, operation)
int fd, operation;
.fi
.SH DESCRIPTION
.I Flock
E 8
I 8
.Dd %Q%
.Dt FLOCK 2
.Os BSD 4.2
.Sh NAME
.Nm flock
.Nd "apply or remove an advisory lock on an open file"
.Sh SYNOPSIS
.Fd #include <sys/file.h>
.Fd #define	LOCK_SH	1	/* shared lock */
.Fd #define	LOCK_EX	2	/* exclusive lock */
.Fd #define	LOCK_NB	4	/* don't block when locking */
.Fd #define	LOCK_UN	8	/* unlock */
.Ft int
.Fn flock "int fd" "int operation"
.Sh DESCRIPTION
.Fn Flock
E 8
applies or removes an
D 8
.I advisory
E 8
I 8
.Em advisory
E 8
lock on the file associated with the file descriptor
D 8
.IR fd .
E 8
I 8
.Fa fd .
E 8
A lock is applied by specifying an
D 8
.I operation
E 8
I 8
.Fa operation
E 8
D 3
parameter which is the inclusive or of
E 3
I 3
D 10
parameter that is the inclusive or of
E 10
I 10
parameter that is one of
E 10
E 3
D 8
LOCK_SH or LOCK_EX and, possibly, LOCK_NB.  To unlock
E 8
I 8
.Dv LOCK_SH
or
.Dv LOCK_EX
D 10
and, possibly,
E 10
I 10
with the optional addition of
E 10
.Dv LOCK_NB .
To unlock
E 8
an existing lock
D 8
.I operation
should be LOCK_UN.
.PP
E 8
I 8
.Dv operation
should be
.Dv LOCK_UN .
.Pp
E 8
Advisory locks allow cooperating processes to perform
consistent operations on files, but do not guarantee
D 5
consistency (i.e. processes may still access files
E 5
I 5
consistency (i.e., processes may still access files
E 5
without using advisory locks possibly resulting in
inconsistencies).
D 8
.PP
E 8
I 8
.Pp
E 8
The locking mechanism allows two types of locks:
D 8
.I shared
E 8
I 8
.Em shared
E 8
locks and
D 8
.I exclusive
E 8
I 8
.Em exclusive
E 8
locks.
At any time multiple shared locks may be applied to a file,
but at no time are multiple exclusive, or both shared and exclusive,
locks allowed simultaneously on a file.  
D 8
.PP
E 8
I 8
.Pp
E 8
A shared lock may be
D 8
.I upgraded
E 8
I 8
.Em upgraded
E 8
to an exclusive lock, and vice versa, simply by specifying
the appropriate lock type; this results in the previous
lock being released and the new lock applied (possibly
after other processes have gained and released the lock).
D 8
.PP
E 8
I 8
.Pp
E 8
D 3
Requesting a lock on an object which is already locked
E 3
I 3
Requesting a lock on an object that is already locked
E 3
D 4
normally causes the caller to blocked until the lock may be
E 4
I 4
normally causes the caller to be blocked until the lock may be
E 4
D 8
acquired.  If LOCK_NB is included in
.IR operation ,
E 8
I 8
acquired.  If
.Dv LOCK_NB
is included in
.Fa operation ,
E 8
then this will not happen; instead the call will fail and
D 8
the error EWOULDBLOCK will be returned.
.SH NOTES
E 8
I 8
the error
.Er EWOULDBLOCK
will be returned.
.Sh NOTES
E 8
Locks are on files, not file descriptors.  That is, file descriptors
duplicated through
D 8
.IR dup (2)
E 8
I 8
.Xr dup 2
E 8
or
D 8
.IR fork (2)
E 8
I 8
.Xr fork 2
E 8
do not result in multiple instances of a lock, but rather multiple
references to a single lock.  If a process holding a lock on a file
forks and the child explicitly unlocks the file, the parent will
lose its lock.
D 8
.PP
E 8
I 8
.Pp
E 8
Processes blocked awaiting a lock may be awakened by signals.
D 8
.SH "RETURN VALUE
E 8
I 8
.Sh RETURN VALUES
E 8
Zero is returned if the operation was successful;
D 8
on an error a \-1 is returned and an error code is left in
the global location \fIerrno\fP.
.SH "ERRORS
The \fIflock\fP call fails if:
.TP 20
[EWOULDBLOCK]
The file is locked and the LOCK_NB option was specified.
.TP 20
[EBADF]
The argument \fIfd\fP is an invalid descriptor.
.TP 20
[EINVAL]
The argument \fIfd\fP refers to an object other than a file.
.SH "SEE ALSO"
open(2), close(2), dup(2), execve(2), fork(2)
E 8
I 8
on an error a -1 is returned and an error code is left in
the global location
.Va errno .
.Sh ERRORS
The
.Fn flock
call fails if:
.Bl -tag -width EWOULDBLOCKAA
.It Bq Er EWOULDBLOCK
The file is locked and the
.Dv LOCK_NB
option was specified.
.It Bq Er EBADF
The argument
.Fa fd
is an invalid descriptor.
.It Bq Er EINVAL
The argument
.Fa fd
refers to an object other than a file.
.El
.Sh SEE ALSO
.Xr open 2 ,
.Xr close 2 ,
.Xr dup 2 ,
.Xr execve 2 ,
.Xr fork 2
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 4.2 .
E 8
E 1
