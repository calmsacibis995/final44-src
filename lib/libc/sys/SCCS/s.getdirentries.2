h32134
s 00007/00001/00125
d D 8.2 95/05/03 17:15:09 mckusick 9 8
c add description of d_type field
e
s 00002/00002/00124
d D 8.1 93/06/09 18:55:59 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00002/00125
d D 6.6 93/06/09 18:55:33 bostic 7 5
c fixed the under development line
e
s 00002/00002/00125
d R 8.1 93/06/04 13:15:03 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00009/00006/00118
d D 6.5 91/07/23 14:21:15 cael 5 4
c .Os changes, miscellaneous cleanups
e
s 00073/00072/00051
d D 6.4 91/03/10 23:37:49 cael 4 3
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00001/00122
d D 6.3 91/02/22 09:00:39 bostic 3 2
c dirent.h is in /usr/include, not /usr/include/sys
e
s 00001/00011/00122
d D 6.2 90/06/23 17:46:07 trent 2 1
c new copyright notice
e
s 00133/00000/00000
d D 6.1 89/06/06 23:01:32 mckusick 1 0
c date and time created 89/06/06 23:01:32 by mckusick
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1989 The Regents of the University of California.
E 4
I 4
D 8
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 4
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
.\"
D 2
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 2
I 2
D 5
.\" %sccs.include.redist.man%
E 5
I 5
.\" %sccs.include.redist.roff%
E 5
E 2
.\"
D 4
.\"	%W% (Berkeley) %G%
E 4
I 4
D 5
.\"     %W% (Berkeley) %G%
E 5
I 5
.\"	%W% (Berkeley) %G%
E 5
E 4
.\"
D 4
.TH GETDIRENTRIES 2 "%Q%"
.UC 7
.SH NAME
getdirentries \- get directory entries in a filesystem independent format
.SH SYNOPSIS
.nf
.ft B
D 3
#include <sys/dirent.h>
E 3
I 3
#include <dirent.h>
E 3
.LP
.ft B
cc = getdirentries(fd, buf, nbytes, basep)
int cc, fd;
char *buf;
int nbytes;
long *basep;
.fi
.SH DESCRIPTION
.I Getdirentries
E 4
I 4
.Dd %Q%
.Dt GETDIRENTRIES 2
D 5
.Os BSD 4.4
E 5
I 5
.Os
E 5
.Sh NAME
.Nm getdirentries
.Nd "get directory entries in a filesystem independent format"
.Sh SYNOPSIS
.Fd #include <sys/dirent.h>
.Ft int
.Fn getdirentries "int fd" "char *buf" "int nbytes" "long *basep"
.Sh DESCRIPTION
.Fn Getdirentries
E 4
reads directory entries from the directory
referenced by the file descriptor
D 4
.I fd
E 4
I 4
.Fa fd
E 4
into the buffer pointed to by
D 4
.IR buf ,
E 4
I 4
.Fa buf ,
E 4
in a filesystem independent format.
Up to
D 4
.I nbytes
E 4
I 4
.Fa nbytes
E 4
of data will be transferred.
D 4
.I Nbytes
E 4
I 4
.Fa Nbytes
E 4
must be greater than or equal to the
block size associated with the file,
see
D 4
.IR stat(2) .
E 4
I 4
.Xr stat 2 .
E 4
Some filesystems may not support
D 4
.I getdirentries
E 4
I 4
.Fn getdirentries
E 4
with buffers smaller than this size.
D 4
.PP
E 4
I 4
.Pp
E 4
The data in the buffer is a series of
D 4
.I dirent
E 4
I 4
.Em dirent
E 4
structures each containing the following entries:
D 4
.PP
.RS
.ta +\w'unsigned\0short\0'u +\w'd_name[MAXNAMELEN + 1];\0'u
.nf
E 4
I 4
.Bd -literal -offset indent
E 4
unsigned long	d_fileno;
unsigned short	d_reclen;
D 9
unsigned short	d_namlen;
E 9
I 9
unsigned char	d_type;
unsigned char	d_namlen;
E 9
D 4
char    	d_name[MAXNAMELEN + 1];	/* see below */
.fi
.RE
.PP
E 4
I 4
char    	d_name[MAXNAMELEN + 1]; /* see below */
.Ed
.Pp
E 4
The
D 4
.I d_fileno
E 4
I 4
.Fa d_fileno
E 4
entry is a number which is unique for each
distinct file in the filesystem.
Files that are linked by hard links (see
D 4
.IR link(2) )
E 4
I 4
.Xr link 2 )
E 4
have the same
D 4
.IR d_fileno .
E 4
I 4
.Fa d_fileno .
E 4
The
D 4
.I d_reclen
E 4
I 4
.Fa d_reclen
E 4
entry is the length, in bytes, of the directory record.
I 9
The
.Fa d_type
entry is the type of the file pointed to by the directory record.
The file type values are defined in
.Fa <sys/dirent.h> .
E 9
The
D 4
.I d_name
E 4
I 4
.Fa d_name
E 4
entry contains a null terminated file name.
The
D 4
.I d_namlen
E 4
I 4
.Fa d_namlen
E 4
entry specifies the length of the file name excluding the null byte.
Thus the actual size of
D 4
.I d_name
may vary from 1 to \fBMAXNAMELEN + 1\fP.
.PP
E 4
I 4
.Fa d_name
may vary from 1 to
.Dv MAXNAMELEN
\&+ 1.
.Pp
E 4
Entries may be separated by extra space.
The
D 4
.I d_reclen
E 4
I 4
.Fa d_reclen
E 4
entry may be used as an offset from the start of a
D 4
.I dirent
E 4
I 4
.Fa dirent
E 4
structure to the next structure, if any.
D 4
.PP
E 4
I 4
.Pp
E 4
The actual number of bytes transferred is returned.
The current position pointer associated with
D 4
.I fd
E 4
I 4
.Fa fd
E 4
is set to point to the next block of entries.
The pointer may not advance by the number of bytes returned by
D 4
.IR getdirentries .
E 4
I 4
.Fn getdirentries .
E 4
A value of zero is returned when
the end of the directory has been reached.
D 4
.PP
.I Getdirentries
E 4
I 4
.Pp
.Fn Getdirentries
E 4
writes the position of the block read into the location pointed to by
D 4
.IR basep .
E 4
I 4
.Fa basep .
E 4
Alternatively, the current position pointer may be set and retrieved by
D 4
.IR lseek(2) .
E 4
I 4
.Xr lseek 2 .
E 4
The current position pointer should only be set to a value returned by
D 4
.I lseek(2) ,
E 4
I 4
.Xr lseek 2 ,
E 4
a value returned in the location pointed to by
D 4
.I basep ,
E 4
I 4
.Fa basep ,
E 4
or zero.
D 4
.SH RETURN VALUE
E 4
I 4
.Sh RETURN VALUES
E 4
If successful, the number of bytes actually transferred is returned.
D 4
Otherwise, a \-1 is returned and the global variable
.I errno
E 4
I 4
Otherwise, -1 is returned and the global variable
.Va errno
E 4
is set to indicate the error.
D 4
.SH ERRORS
.I Getdirentries
will fail if one or more of the following are true:
.TP 15
EBADF
\fIfd\fP is not a valid file descriptor open for reading.
.TP 15
EFAULT
Either \fIbuf\fP or \fIbasep\fP point outside the allocated address space.
.TP 15
EIO
E 4
I 4
.Sh ERRORS
.Fn Getdirentries
will fail if:
.Bl -tag -width [EFAULT]
.It EBADF
.Fa fd
is not a valid file descriptor open for reading.
.It EFAULT
Either
.Fa buf
or
.Fa basep
point outside the allocated address space.
.It EIO
E 4
D 5
An I/O error occurred while reading from or writing to the file system.
E 5
I 5
An
.Tn I/O
error occurred while reading from or writing to the file system.
E 5
D 4
.SH "SEE ALSO"
open(2), lseek(2)
E 4
I 4
.El
.Sh SEE ALSO
.Xr open 2 ,
.Xr lseek 2
.Sh HISTORY
The
D 5
.Nm
function call is currently under development.
E 5
I 5
.Nm getdirentries
D 7
function call is
.Ud .
E 7
I 7
function first appeared in 4.4BSD.
E 7
E 5
E 4
E 1
