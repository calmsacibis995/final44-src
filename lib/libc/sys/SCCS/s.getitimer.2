h33500
s 00001/00002/00138
d D 8.3 95/05/16 10:50:31 mckusick 10 9
c >= and <= now work with timercmp
e
s 00001/00001/00139
d D 8.2 93/12/11 23:08:11 mckusick 9 8
c copyediting for Usenix manuals
e
s 00002/00002/00138
d D 8.1 93/06/04 13:15:43 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00096/00079/00044
d D 6.6 91/03/10 23:38:15 cael 7 6
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00011/00122
d D 6.5 90/06/23 17:47:43 trent 6 5
c new copyright notice
e
s 00014/00003/00119
d D 6.4 89/05/18 14:15:23 bostic 5 4
c add Berkeley specific copyright notice
e
s 00001/00001/00121
d D 6.3 86/12/18 17:16:22 bostic 4 3
c added select to see also
e
s 00002/00002/00120
d D 6.2 85/08/26 23:32:49 mckusick 3 2
c update error messages (mostly from sun!guy)
e
s 00011/00006/00111
d D 6.1 85/05/15 11:55:45 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00117/00000/00000
d D 5.1 85/05/15 11:55:38 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 5
I 5
D 7
.\" Copyright (c) 1983 The Regents of the University of California.
E 7
I 7
D 8
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
E 7
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
.\"
D 6
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 6
I 6
.\" %sccs.include.redist.man%
E 6
E 5
.\"
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\"     %W% (Berkeley) %G%
E 7
.\"
D 2
.TH GETITIMER 2 "27 July 1983"
E 2
I 2
D 7
.TH GETITIMER 2 "%Q%"
E 2
.UC 5
.SH NAME
getitimer, setitimer \- get/set value of interval timer
.SH SYNOPSIS
.nf
.ft B
#include <sys/time.h>
.PP
.ft B
#define ITIMER_REAL   	0	/* real time intervals */
#define ITIMER_VIRTUAL	1	/* virtual time intervals */
#define ITIMER_PROF   	2	/* user and system virtual time */
.sp
.ft B
getitimer(which, value)
int which;
struct itimerval *value;
.PP
.ft B
setitimer(which, value, ovalue)
int which;
struct itimerval *value, *ovalue;
.fi
.SH DESCRIPTION
E 7
I 7
.Dd %Q%
.Dt GETITIMER 2
.Os BSD 4.2
.Sh NAME
.Nm getitimer ,
.Nm setitimer
.Nd get/set value of interval timer
.Sh SYNOPSIS
.Fd #include <sys/time.h>
.Fd #define ITIMER_REAL		0
.Fd #define ITIMER_VIRTUAL	1
.Fd #define ITIMER_PROF		2
.Ft int
.Fn getitimer "int which" "struct itimerval *value"
.Ft int
.Fn setitimer "int which" "struct itimerval *value" "struct itimerval *ovalue"
.Sh DESCRIPTION
E 7
The system provides each process with three interval timers,
defined in
D 7
.RI < sys/time.h >.
E 7
I 7
.Ao Pa sys/time.h Ac .
E 7
The
D 7
.I getitimer
E 7
I 7
.Fn getitimer
E 7
call returns the current value for the timer specified in
D 2
.IR which ,
while the
E 2
I 2
D 7
.I which
in the structure at
.IR value .
E 7
I 7
.Fa which
in the structure at
.Fa value .
E 7
The
E 2
D 7
.I setitimer
E 7
I 7
.Fn setitimer
E 7
D 2
call sets the value of a timer (optionally returning the previous
value of the timer).
E 2
I 2
call sets a timer to the specified
D 7
.I value
E 7
I 7
.Fa value
E 7
(returning the previous value of the timer if
D 7
.I ovalue
is nonzero).
E 2
.PP
E 7
I 7
.Fa ovalue
is non-nil).
.Pp
E 7
A timer value is defined by the 
D 7
.I itimerval
E 7
I 7
.Fa itimerval
E 7
structure:
D 7
.PP
.nf
.RS
.DT
E 7
I 7
.Bd -literal -offset indent
E 7
struct itimerval {
	struct	timeval it_interval;	/* timer interval */
	struct	timeval it_value;	/* current value */
};
D 7
.RE
.fi
.PP
E 7
I 7
.Ed
.Pp
E 7
If
D 7
.I it_value
E 7
I 7
.Fa it_value
E 7
is non-zero, it indicates the time to the next timer expiration. 
If
D 7
.I it_interval
E 7
I 7
.Fa it_interval
E 7
is non-zero, it specifies a value to be used in reloading 
D 7
.I it_value
E 7
I 7
.Fa it_value
E 7
when the timer expires.
Setting 
D 7
.I it_value
E 7
I 7
.Fa it_value
E 7
to 0 disables a timer.  Setting 
D 7
.I it_interval
E 7
I 7
.Fa it_interval
E 7
to 0 causes a timer to be disabled after its next expiration (assuming
D 7
.I it_value
E 7
I 7
.Fa it_value
E 7
is non-zero).
D 7
.PP
E 7
I 7
.Pp
E 7
Time values smaller than the resolution of the
system clock are rounded up to this resolution
D 2
(on the VAX, 10 microseconds).
E 2
I 2
D 7
(on the VAX, 10 milliseconds).
E 2
.PP
The ITIMER_REAL timer decrements in real time.  A SIGALRM signal is
E 7
I 7
(typically 10 milliseconds).
.Pp
The
.Dv ITIMER_REAL
timer decrements in real time.  A
.Dv SIGALRM
signal is
E 7
delivered when this timer expires.
D 7
.PP
The ITIMER_VIRTUAL timer decrements in process virtual time.
It runs only when the process is executing.  A SIGVTALRM signal
E 7
I 7
.Pp
The
.Dv ITIMER_VIRTUAL
timer decrements in process virtual time.
It runs only when the process is executing.  A
.Dv SIGVTALRM
signal
E 7
is delivered when it expires.
D 7
.PP
The ITIMER_PROF timer decrements both in process virtual time and
E 7
I 7
.Pp
The
.Dv ITIMER_PROF
timer decrements both in process virtual time and
E 7
when the system is running on behalf of the process.  It is designed
to be used by interpreters in statistically profiling the execution
of interpreted programs.
D 7
Each time the ITIMER_PROF timer expires, the SIGPROF signal is
E 7
I 7
Each time the
.Dv ITIMER_PROF
timer expires, the
.Dv SIGPROF
signal is
E 7
delivered.  Because this signal may interrupt in-progress
system calls, programs using this timer must be prepared to
restart interrupted system calls.
D 7
.SH NOTES
E 7
I 7
.Sh NOTES
E 7
Three macros for manipulating time values are defined in
D 7
.RI < sys/time.h >.
.I Timerclear
E 7
I 7
.Ao Pa sys/time.h Ac .
.Fa Timerclear
E 7
sets a time value to zero,
D 7
.I timerisset
E 7
I 7
.Fa timerisset
E 7
tests if a time value is non-zero, and
D 7
.I timercmp
E 7
I 7
.Fa timercmp
E 7
D 10
compares two time values (beware that >= and <= do not
work with this macro).
E 10
I 10
compares two time values.
E 10
D 7
.SH "RETURN VALUE
E 7
I 7
.Sh RETURN VALUES
E 7
If the calls succeed, a value of 0 is returned.  If an error occurs,
D 7
the value \-1 is returned, and a more precise error code is placed
in the global variable \fIerrno\fP.
.SH "ERRORS
The possible errors are:
.TP 15
[EFAULT]
D 3
The \fIvalue\fP structure specified a bad address.
E 3
I 3
The \fIvalue\fP parameter specified a bad address.
E 3
.TP 15
[EINVAL]
D 3
A \fIvalue\fP structure specified a time was too large
E 3
I 3
A \fIvalue\fP parameter specified a time was too large
E 7
I 7
the value -1 is returned, and a more precise error code is placed
in the global variable
.Va errno .
.Sh ERRORS
.Fn Getitimer
and
.Fn setitimer
will fail if:
.Bl -tag -width Er
.It Bq Er EFAULT
The
.Fa value
parameter specified a bad address.
.It Bq Er EINVAL
A
.Fa value
D 9
parameter specified a time was too large
E 9
I 9
parameter specified a time that was too large
E 9
E 7
E 3
to be handled.
D 7
.SH "SEE ALSO"
D 4
sigvec(2), gettimeofday(2)
E 4
I 4
select(2), sigvec(2), gettimeofday(2)
E 7
I 7
.El
.Sh SEE ALSO
.Xr select 2 ,
.Xr sigvec 2 ,
.Xr gettimeofday 2
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 4.2 .
E 7
E 4
E 1
