h40155
s 00002/00002/00163
d D 8.1 93/06/04 13:16:05 bostic 13 12
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00000/00164
d D 6.10 93/06/02 20:07:36 mckusick 12 11
c needs to include types.h
e
s 00032/00023/00132
d D 6.9 93/05/24 16:08:22 bostic 11 10
c add RLIMIT_MEMLOCK, RLIMIT_NOFILE, RLIMIT_NPROC; limits are now quads
e
s 00002/00002/00153
d D 6.8 92/04/23 16:33:56 bostic 10 9
c sigstack -> sigaltstack
e
s 00093/00082/00062
d D 6.7 91/03/10 23:38:38 cael 9 8
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00011/00143
d D 6.6 90/06/23 17:47:25 trent 8 7
c new copyright notice
e
s 00014/00003/00140
d D 6.5 89/05/18 14:15:29 bostic 7 6
c add Berkeley specific copyright notice
e
s 00008/00008/00135
d D 6.4 87/04/03 16:36:43 bostic 6 5
c bug report 4.1BSD/sys/36
e
s 00012/00013/00131
d D 6.3 86/05/13 15:39:27 karels 5 4
c update and correct
e
s 00004/00004/00140
d D 6.2 85/06/28 17:03:28 sechrest 4 3
c Improved English
e
s 00003/00003/00141
d D 6.1 85/05/09 18:26:46 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00106/00055/00038
d D 5.1 85/05/09 18:26:05 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00093/00000/00000
d D 4.1 85/05/09 18:24:25 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
D 9
.\" Copyright (c) 1980 The Regents of the University of California.
E 9
I 9
D 13
.\" Copyright (c) 1980, 1991 The Regents of the University of California.
E 9
.\" All rights reserved.
E 13
I 13
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 13
.\"
D 8
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 8
I 8
.\" %sccs.include.redist.man%
E 8
E 7
.\"
D 9
.\"	%W% (Berkeley) %G%
E 9
I 9
.\"     %W% (Berkeley) %G%
E 9
.\"
D 2
.TH VLIMIT 2V
E 2
I 2
D 3
.TH GETRLIMIT 2 "7 July 1983"
E 3
I 3
D 9
.TH GETRLIMIT 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
vlimit \- control maximum system resource consumption
E 2
I 2
getrlimit, setrlimit \- control maximum system resource consumption
E 2
.SH SYNOPSIS
D 2
.B "#include <sys/vlimit.h>"
E 2
I 2
.ft B
.nf
#include <sys/time.h>
#include <sys/resource.h>
E 2
.PP
D 2
.B vlimit(resource, value)
E 2
I 2
.ft B
getrlimit(resource, rlp)
int resource;
struct rlimit *rlp;
.PP
.ft B
setrlimit(resource, rlp)
int resource;
struct rlimit *rlp;
.fi
.ft R
E 2
.SH DESCRIPTION
E 9
I 9
.Dd %Q%
.Dt GETRLIMIT 2
.Os BSD 4
.Sh NAME
.Nm getrlimit ,
.Nm setrlimit
.Nd control maximum system resource consumption
.Sh SYNOPSIS
I 12
.Fd #include <sys/types.h>
E 12
.Fd #include <sys/time.h>
.Fd #include <sys/resource.h>
.Ft int
.Fn getrlimit "int resource" "struct rlimit *rlp"
.Ft int
.Fn setrlimit "int resource" "struct rlimit *rlp"
.Sh DESCRIPTION
E 9
D 2
Limits the consumption by the current process and each process
it creates to not individually exceed 
.I value
on the specified
.I resource.
If
.I value
is specified as \-1, then the current limit is returned and the
limit is unchanged.
The resources which are currently controllable are:
.TP 15
.B LIM_NORAISE
A pseudo-limit; if set non-zero then the limits may not be raised.
Only the super-user may remove the \fInoraise\fR restriction.
.TP 15
.B LIM_CPU
the maximum
number of cpu-seconds to be used by each process
.TP 15
.B LIM_FSIZE
the largest single file which can be created
.TP 15
.B LIM_DATA
the maximum growth of the data+stack region via
E 2
I 2
Limits on the consumption of system resources by the current process
and each process it creates may be obtained with the
D 9
.I getrlimit
E 9
I 9
.Fn getrlimit
E 9
call, and set with the
D 9
.I setrlimit
E 9
I 9
.Fn setrlimit
E 9
call.  
D 9
.PP
E 9
I 9
.Pp
E 9
The
D 9
.I resource
E 9
I 9
.Fa resource
E 9
parameter is one of the following:
D 9
.TP 17
RLIMIT_CPU
E 9
I 9
.Bl -tag -width RLIMIT_FSIZEAA
D 11
.It Dv RLIMIT_CPU
E 9
D 3
the maximum amount of cpu time (in milliseconds) to be used by
E 3
I 3
the maximum amount of cpu time (in seconds) to be used by
E 11
I 11
.It Li RLIMIT_CORE
The largest size (in bytes)
.Xr core
file that may be created.
.It Li RLIMIT_CPU
The maximum amount of cpu time (in seconds) to be used by
E 11
E 3
each process.
D 9
.TP 17
RLIMIT_FSIZE
E 9
I 9
D 11
.It Dv RLIMIT_FSIZE
E 9
D 4
the largest size, in bytes, of any single file which may be created.
E 4
I 4
the largest size, in bytes, of any single file that may be created.
E 4
D 9
.TP 17
RLIMIT_DATA
E 9
I 9
.It Dv RLIMIT_DATA
E 9
the maximum size, in bytes, of the data segment for a process;
E 11
I 11
.It Li RLIMIT_DATA
The maximum size (in bytes) of the data segment for a process;
E 11
this defines how far a program may extend its break with the
E 2
D 9
.IR sbrk (2)
E 9
I 9
.Xr sbrk 2
E 9
D 2
beyond the end of the program text
.TP 15
.B LIM_STACK
the maximum
size of the automatically-extended stack region
.TP 15
.B LIM_CORE
the size of the largest core dump that will be created.
.TP 15
.B LIM_MAXRSS
a soft limit for the amount of physical memory (in bytes) to be given
to the program.  If memory is tight, the system will prefer to take memory
from processes which are exceeding their declared LIM_MAXRSS.
E 2
I 2
system call.
D 9
.TP 17
RLIMIT_STACK
E 9
I 9
D 11
.It Dv RLIMIT_STACK
E 9
the maximum size, in bytes, of the stack segment for a process;
E 11
I 11
.It Li RLIMIT_FSIZE
The largest size (in bytes) file that may be created.
.It Li RLIMIT_MEMLOCK
The maximum size (in bytes) which a process may lock into memory
using the
.Xr mlock 2
function.
.It Li RLIMIT_NOFILE
The maximum number of open files for this process.
.It Li RLIMIT_NPROC
The maximum number of simultaneous processes for this user id.
.It Li RLIMIT_RSS
The maximum size (in bytes) to which a process's resident set size may
grow.
This imposes a limit on the amount of physical memory to be given to
a process; if memory is tight, the system will prefer to take memory
from processes that are exceeding their declared resident set size.
.It Li RLIMIT_STACK
The maximum size (in bytes) of the stack segment for a process;
E 11
D 5
this defines how far a program's stack segment may be extended,
either automatically by the system, or explicitly by a user with
the 
.IR sbrk (2)
system call.
E 5
I 5
this defines how far a program's stack segment may be extended.
Stack extension is performed automatically by the system.
E 5
D 9
.TP 17
RLIMIT_CORE
E 9
I 9
D 11
.It Dv RLIMIT_CORE
E 9
the largest size, in bytes, of a 
D 9
.I core
E 9
I 9
.Xr core
E 9
D 4
file which may be created.
E 4
I 4
file that may be created.
E 4
D 9
.TP 17
RLIMIT_RSS
E 9
I 9
.It Dv RLIMIT_RSS
E 9
D 5
the maximum size, in bytes, a process's resident set size may
grow to.  This imposes a limit on the amount of physical memory
E 5
I 5
the maximum size, in bytes, to which a process's resident set size may
grow.  This imposes a limit on the amount of physical memory
E 5
to be given to a process; if memory is tight, the system will
D 4
prefer to take memory from processes which are exceeding their
E 4
I 4
prefer to take memory from processes that are exceeding their
E 4
declared resident set size.
E 11
E 2
D 9
.PP
E 9
I 9
.El
.Pp
E 9
D 2
Because this information is stored in the per-process information
E 2
I 2
D 6
A resource limit is specified as a soft limit and a hard limit.
When a soft limit is exceeded a process may receive a signal
(for example, if the cpu time is exceeded), but it will be allowed
to continue execution until it reaches the hard limit (or modifies
E 6
I 6
A resource limit is specified as a soft limit and a hard limit.  When a
soft limit is exceeded a process may receive a signal (for example, if
the cpu time or file size is exceeded), but it will be allowed to
continue execution until it reaches the hard limit (or modifies
E 6
its resource limit).  The 
D 9
.I rlimit
E 9
I 9
.Em rlimit
E 9
structure is used to specify the hard and soft limits on a resource,
D 9
.PP
.nf
.RS
.DT
E 9
I 9
.Bd -literal -offset indent
E 9
struct rlimit {
D 11
	int	rlim_cur;	/* current (soft) limit */
	int	rlim_max;	/* hard limit */
E 11
I 11
	quad_t	rlim_cur;	/* current (soft) limit */
	quad_t	rlim_max;	/* hard limit */
E 11
};
D 9
.RE
.fi
.PP
E 9
I 9
.Ed
.Pp
E 9
Only the super-user may raise the maximum limits.  Other users
may only alter 
D 9
.I rlim_cur
E 9
I 9
.Fa rlim_cur
E 9
within the range from 0 to 
D 9
.I rlim_max
E 9
I 9
.Fa rlim_max
E 9
or (irreversibly) lower
D 9
.IR rlim_max .
.PP
D 3
An \*(lqinfinite\*(rq value for a limit is defined as RLIMIT_INFINITY
E 3
I 3
An \*(lqinfinite\*(rq value for a limit is defined as RLIM_INFINITY
E 9
I 9
.Fa rlim_max .
.Pp
An
.Dq infinite
value for a limit is defined as
D 11
.Dv RLIM_INFINITY
E 9
E 3
(0x7\&f\&f\&f\&f\&f\&f\&f).
E 11
I 11
.Dv RLIM_INFINITY .
E 11
D 9
.PP
E 9
I 9
.Pp
E 9
Because this information is stored in the per-process information,
E 2
this system call must be executed directly by the shell if it
is to affect all future processes created by the shell;
D 9
.I limit
E 9
I 9
.Ic limit
E 9
is thus a built-in command to
D 9
.IR csh (1).
.PP
E 9
I 9
.Xr csh 1 .
.Pp
E 9
The system refuses to extend the data or stack space when the limits
D 2
would be exceeded in the normal way; a
E 2
I 2
would be exceeded in the normal way: a
E 2
D 9
.I break
E 9
I 9
.Xr break
E 9
D 5
call fails if the data space limit is reached, or the process is
killed when the stack limit is reached (since the stack cannot be
extended, there is no way to send a signal!).
E 5
I 5
call fails if the data space limit is reached.
When the stack limit is reached, the process receives
D 9
a segmentation fault (SIGSEGV); if this signal is not
E 9
I 9
a segmentation fault
.Pq Dv SIGSEGV ;
if this signal is not
E 9
caught by a handler using the signal stack, this signal
will kill the process.
E 5
D 9
.PP
E 9
I 9
.Pp
E 9
D 4
A file i/o operation which would create a file which is too large
E 4
I 4
D 5
A file i/o operation that would create a file that is too large
E 4
will cause a signal SIGXFSZ to be generated, this normally terminates
E 5
I 5
D 6
A file I/O operation that would create a file that is too large
will cause a signal SIGXFSZ to be generated; this normally terminates
E 5
the process, but may be caught.
D 2
When the cpu time limit is exceeded, a signal SIGXCPU is sent to the
offending process; to allow it time to process the signal it is
given 5 seconds grace by raising the cpu time limit.
E 2
I 2
When the soft cpu time limit is exceeded, a signal SIGXCPU is sent to the
E 6
I 6
A file I/O operation that would create a file larger that the process'
D 9
soft limit will cause the write to fail and a signal SIGXFSZ to be
E 9
I 9
soft limit will cause the write to fail and a signal
.Dv SIGXFSZ
to be
E 9
generated; this normally terminates the process, but may be caught.  When
D 9
the soft cpu time limit is exceeded, a signal SIGXCPU is sent to the
E 9
I 9
the soft cpu time limit is exceeded, a signal
.Dv SIGXCPU
is sent to the
E 9
E 6
offending process.
D 9
.SH "RETURN VALUE
E 9
I 9
.Sh RETURN VALUES
E 9
A 0 return value indicates that the call succeeded, changing
D 9
or returning the resource limit.   A return value of \-1 indicates
E 9
I 9
or returning the resource limit.   A return value of -1 indicates
E 9
that an error occurred, and an error code is stored in the global
D 9
location \fIerrno\fP.
.SH "ERRORS
The possible errors are:
.TP 15
[EFAULT]
The address specified for \fIrlp\fP is invalid.
.TP 15
[EPERM]	The limit specified to \fIsetrlimit\fP would have
E 9
I 9
location
.Va errno .
.Sh ERRORS
.Fn Getrlimit
and
.Fn setrlimit
will fail if:
.Bl -tag -width Er
.It Bq Er EFAULT
The address specified for
.Fa rlp
is invalid.
.It Bq Er EPERM
The limit specified to
.Fn setrlimit
would have
E 9
raised the maximum limit value, and the caller is not the super-user.
E 2
D 9
.SH SEE ALSO
D 2
csh(1)
E 2
I 2
D 5
csh(1), quota(2)
E 5
I 5
csh(1), quota(2), sigvec(2), sigstack(2)
E 5
E 2
.SH BUGS
E 9
I 9
.El
.Sh SEE ALSO
.Xr csh 1 ,
.Xr quota 2 ,
D 10
.Xr sigvec 2 ,
.Xr sigstack 2
E 10
I 10
.Xr sigaltstack 2 ,
D 11
.Xr sigvec 2
E 11
I 11
.Xr sigvec 2 ,
.Xr sysctl 3
E 11
E 10
.Sh BUGS
E 9
D 2
If LIM_NORAISE is set, then no grace should be given when the cpu
time limit is exceeded.
.PP
E 2
There should be 
D 9
.I limit
E 9
I 9
.Ic limit
E 9
and
D 9
.I unlimit
E 9
I 9
.Ic unlimit
E 9
commands in
D 9
.IR sh (1)
E 9
I 9
.Xr sh 1
E 9
as well as in
D 9
.IR csh.
E 9
I 9
.Xr csh .
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 4.2 .
E 9
D 2
.PP
This call is peculiar to this version of UNIX.
The options and specifications of this system call and even the call itself
are subject to change.  It may be extended or replaced by other
facilities in future versions of the system.
E 2
E 1
