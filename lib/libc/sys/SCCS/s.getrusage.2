h17788
s 00002/00002/00136
d D 8.1 93/06/04 13:16:08 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00080/00096/00058
d D 6.9 91/03/10 23:38:42 cael 11 10
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00011/00153
d D 6.8 90/06/23 17:47:19 trent 10 9
c new copyright notice
e
s 00035/00026/00129
d D 6.7 89/03/09 18:01:08 bostic 9 8
c define error return, promote int's to long's.
e
s 00003/00005/00152
d D 6.6 87/04/03 15:52:25 bostic 8 7
c bug report 4.1BSD/sys/14
e
s 00002/00002/00155
d D 6.5 87/01/05 10:43:59 bostic 7 6
c spelling fix, outblock to oublock
e
s 00011/00010/00146
d D 6.4 86/05/13 16:38:23 karels 6 5
c updates
e
s 00014/00000/00142
d D 6.3 85/08/26 23:32:23 mckusick 5 4
c update error messages (mostly from sun!guy)
e
s 00003/00003/00139
d D 6.2 85/06/28 17:05:09 sechrest 4 3
c Improved English
e
s 00001/00001/00141
d D 6.1 85/05/09 18:02:25 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00126/00027/00016
d D 5.1 85/05/09 18:02:00 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00043/00000/00000
d D 4.1 85/05/09 18:01:22 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 9
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 9
I 9
D 11
.\" Copyright (c) 1985 The Regents of the University of California.
E 11
I 11
D 12
.\" Copyright (c) 1985, 1991 The Regents of the University of California.
E 11
.\" All rights reserved.
E 12
I 12
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 12
E 9
.\"
I 9
D 10
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 10
I 10
.\" %sccs.include.redist.man%
E 10
.\"
E 9
D 11
.\"	%W% (Berkeley) %G%
E 11
I 11
.\"     %W% (Berkeley) %G%
E 11
.\"
D 2
.TH TIMES 2 
E 2
I 2
D 3
.TH GETRUSAGE 2 "18 July 1983"
E 3
I 3
D 11
.TH GETRUSAGE 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
times \- get process times
E 2
I 2
getrusage \- get information about resource utilization
E 2
.SH SYNOPSIS
.nf
D 2
.B "#include <sys/types.h>
.B "#include <sys/times.h>
E 2
I 2
.ft B
#include <sys/time.h>
#include <sys/resource.h>
E 2
.PP
D 2
.B times(buffer)
.B struct tms *buffer;
E 2
I 2
.ft B
.ta \w'#define 'u +\w'RUSAGE_CHILDREN  'u +\w'-1        'u
#define	RUSAGE_SELF	0	/* calling process */
#define	RUSAGE_CHILDREN	-1	/* terminated child processes */
.DT
.PP
.ft B
getrusage(who, rusage)
int who;
struct rusage *rusage;
E 2
.fi
.SH DESCRIPTION
D 2
.I Times
returns time-accounting information
for the current process
and for the terminated child processes
of the current process.
All times are in 1/HZ seconds, where HZ is either 50 or 60
depending on your locality.
E 2
I 2
.I Getrusage
E 11
I 11
.Dd %Q%
.Dt GETRUSAGE 2
.Os BSD 4
.Sh NAME
.Nm getrusage
.Nd get information about resource utilization
.Sh SYNOPSIS
.Fd #include <sys/time.h>
.Fd #include <sys/resource.h>
.Fd #define	RUSAGE_SELF	 0
.Fd #define	RUSAGE_CHILDREN	-1
.Ft int
.Fn getrusage "int who" "struct rusage *rusage"
.Sh DESCRIPTION
.Fn Getrusage
E 11
returns information describing the resources utilized by the current
process, or all its terminated child processes.
The
D 11
.I who
D 6
parameter is one of RUSAGE_SELF and RUSAGE_CHILDREN.
If
E 6
I 6
D 9
parameter is one of RUSAGE_SELF or RUSAGE_CHILDREN.
E 9
I 9
parameter is either RUSAGE_SELF or RUSAGE_CHILDREN.
E 11
I 11
.Fa who
parameter is either
.Dv RUSAGE_SELF
or
.Dv RUSAGE_CHILDREN .
E 11
E 9
The buffer to which
E 6
D 11
.I rusage
E 11
I 11
.Fa rusage
E 11
D 6
is non-zero, the buffer it points to will be filled in with
E 6
I 6
points will be filled in with
E 6
the following structure:
E 2
D 11
.PP
D 2
This is the structure returned by
.IR times :
.PP
E 2
D 9
.nf
E 9
D 2
.so /usr/include/sys/times.h
.PP
E 2
I 2
.RS
D 9
.ta \w'struct  'u +\w'struct  'u +3u*\w'struct  'u
struct	rusage {
E 9
I 9
.nf
E 11
I 11
.Bd -literal
E 11
struct rusage {
E 9
D 11
	struct timeval ru_utime;	/* user time used */
	struct timeval ru_stime;	/* system time used */
D 9
	int	ru_maxrss;
D 6
	int	ru_ixrss;	/* integral shared memory size */
E 6
I 6
	int	ru_ixrss;	/* integral shared text memory size */
E 6
	int	ru_idrss;	/* integral unshared data size */
	int	ru_isrss;	/* integral unshared stack size */
	int	ru_minflt;	/* page reclaims */
	int	ru_majflt;	/* page faults */
	int	ru_nswap;	/* swaps */
	int	ru_inblock;	/* block input operations */
	int	ru_oublock;	/* block output operations */
	int	ru_msgsnd;	/* messages sent */
	int	ru_msgrcv;	/* messages received */
	int	ru_nsignals;	/* signals received */
	int	ru_nvcsw;	/* voluntary context switches */
	int	ru_nivcsw;	/* involuntary context switches */
E 9
I 9
	long ru_maxrss;		/* integral max resident set size */
	long ru_ixrss;			/* integral shared text memory size */
	long ru_idrss;			/* integral unshared data size */
	long ru_isrss;			/* integral unshared stack size */
	long ru_minflt;		/* page reclaims */
	long ru_majflt;		/* page faults */
	long ru_nswap;			/* swaps */
	long ru_inblock;		/* block input operations */
	long ru_oublock;		/* block output operations */
	long ru_msgsnd;		/* messages sent */
	long ru_msgrcv;		/* messages received */
	long ru_nsignals;		/* signals received */
	long ru_nvcsw;			/* voluntary context switches */
	long ru_nivcsw;		/* involuntary context switches */
E 11
I 11
        struct timeval ru_utime; /* user time used */
        struct timeval ru_stime; /* system time used */
        long ru_maxrss;          /* integral max resident set size */
        long ru_ixrss;           /* integral shared text memory size */
        long ru_idrss;           /* integral unshared data size */
        long ru_isrss;           /* integral unshared stack size */
        long ru_minflt;          /* page reclaims */
        long ru_majflt;          /* page faults */
        long ru_nswap;           /* swaps */
        long ru_inblock;         /* block input operations */
        long ru_oublock;         /* block output operations */
        long ru_msgsnd;          /* messages sent */
        long ru_msgrcv;          /* messages received */
        long ru_nsignals;        /* signals received */
        long ru_nvcsw;           /* voluntary context switches */
        long ru_nivcsw;          /* involuntary context switches */
E 11
E 9
};
D 9
.RE
.DT
E 9
E 2
D 11
.fi
I 9
.RE
E 9
D 2
The children times are the sum
of the children's process times and
their children's times.
.SH "SEE ALSO"
time(1), time(2), vtimes(2)
.SH "ASSEMBLER (PDP-11)"
(times = 43.)
.br
.B sys times; buffer
E 2
I 2
.PP
E 11
I 11
.Ed
.Pp
E 11
The fields are interpreted as follows:
D 11
.TP 15
ru_utime
E 11
I 11
.Bl -tag -width ru_minfltaa
.It Fa ru_utime
E 11
the total amount of time spent executing in user mode.
D 11
.TP 15
ru_stime
E 11
I 11
.It Fa ru_stime
E 11
the total amount of time spent in the system executing on behalf
of the process(es).
D 11
.TP 15
ru_maxrss
E 11
I 11
.It Fa ru_maxrss
E 11
the maximum resident set size utilized (in kilobytes).
D 11
.TP 15
ru_ixrss
E 11
I 11
.It Fa ru_ixrss
E 11
an \*(lqintegral\*(rq value indicating the amount of memory used
I 6
by the text segment
E 6
D 4
which was also shared among other processes.  This value is expressed
E 4
I 4
that was also shared among other processes.  This value is expressed
E 4
D 8
in units of kilobytes * seconds-of-execution and is calculated by
summing the number of shared memory pages in use each time the internal
system clock ticks and then averaging over 1 second intervals.
E 8
I 8
in units of kilobytes * ticks-of-execution.
E 8
D 11
.TP 15
ru_idrss
E 11
I 11
.It Fa ru_idrss
E 11
an integral value of the amount of unshared memory residing in the
data segment of a process (expressed in units of
D 8
kilobytes * seconds-of-execution).
E 8
I 8
kilobytes * ticks-of-execution).
E 8
D 11
.TP 15
ru_isrss
E 11
I 11
.It Fa ru_isrss
E 11
an integral value of the amount of unshared memory residing in the
stack segment of a process (expressed in units of
D 8
kilobytes * seconds-of-execution).
E 8
I 8
kilobytes * ticks-of-execution).
E 8
D 11
.TP 15
ru_minflt
E 11
I 11
.It Fa ru_minflt
E 11
D 6
the number of page faults serviced without any i/o activity; here
i/o activity is avoided by \*(lqreclaiming\*(rq a page frame from
E 6
I 6
the number of page faults serviced without any I/O activity; here
I/O activity is avoided by \*(lqreclaiming\*(rq a page frame from
E 6
the list of pages awaiting reallocation.
D 11
.TP 15
ru_majflt
E 11
I 11
.It Fa ru_majflt
E 11
D 4
the number of page faults serviced which required i/o activity.
E 4
I 4
D 6
the number of page faults serviced that required i/o activity.
E 6
I 6
the number of page faults serviced that required I/O activity.
E 6
E 4
D 11
.TP 15
ru_nswap
E 11
I 11
.It Fa ru_nswap
E 11
the number of times a process was \*(lqswapped\*(rq out of main
memory.
D 11
.TP 15
ru_inblock
E 11
I 11
.It Fa ru_inblock
E 11
the number of times the file system had to perform input.
D 11
.TP 15
D 7
ru_outblock
E 7
I 7
ru_oublock
E 11
I 11
.It Fa ru_oublock
E 11
E 7
the number of times the file system had to perform output.
D 11
.TP 15
ru_msgsnd
E 11
I 11
.It Fa ru_msgsnd
E 11
D 6
the number of ipc messages sent.
E 6
I 6
the number of IPC messages sent.
E 6
D 11
.TP 15
ru_msgrcv
E 11
I 11
.It Fa ru_msgrcv
E 11
D 6
the number of ipc messages received.
E 6
I 6
the number of IPC messages received.
E 6
D 11
.TP 15
ru_nsignals
E 11
I 11
.It Fa ru_nsignals
E 11
the number of signals delivered.
D 11
.TP 15
ru_nvcsw
E 11
I 11
.It Fa ru_nvcsw
E 11
the number of times a context switch resulted due to a process
voluntarily giving up the processor before its time slice was
completed (usually to await availability of a resource).
D 11
.TP 15
ru_nivcsw
E 11
I 11
.It Fa ru_nivcsw
E 11
the number of times a context switch resulted due to a higher
priority process becoming runnable or because the current process
exceeded its time slice.
D 11
.SH NOTES
E 11
I 11
.El
.Sh NOTES
E 11
The numbers 
D 11
.I ru_inblock
E 11
I 11
.Fa ru_inblock
E 11
and 
D 7
.I ru_outblock
E 7
I 7
D 11
.I ru_oublock
E 11
I 11
.Fa ru_oublock
E 11
E 7
account only for real
D 6
i/o; data supplied by the cacheing mechanism is charged only
E 6
I 6
I/O; data supplied by the caching mechanism is charged only
E 6
to the first process to read or write the data.
I 5
D 11
.SH ERRORS
D 9
The possible errors for
.I getrusage
are:
E 9
I 9
.I Getrusage
E 11
I 11
.Sh ERRORS
.Fn Getrusage
E 11
returns -1 on error.
The possible errors are:
E 9
D 11
.TP 15
[EINVAL]
E 11
I 11
.Bl -tag -width Er
.It Bq Er EINVAL
E 11
The
D 11
.I who
E 11
I 11
.Fa who
E 11
parameter is not a valid value.
D 11
.TP 15
[EFAULT]
E 11
I 11
.It Bq Er EFAULT
E 11
The address specified by the
D 11
.I rusage
E 11
I 11
.Fa rusage
E 11
parameter is not in a valid part of the process address space.
E 5
D 11
.SH SEE ALSO
gettimeofday(2), wait(2)
.SH BUGS
E 11
I 11
.El
.Sh SEE ALSO
.Xr gettimeofday 2 ,
.Xr wait 2
.Sh BUGS
E 11
There is no way to obtain information about a child process
D 4
which has not yet terminated.
E 4
I 4
that has not yet terminated.
I 11
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 4.2 .
E 11
E 4
E 2
E 1
