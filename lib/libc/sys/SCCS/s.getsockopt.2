h39927
s 00001/00001/00320
d D 8.4 95/05/02 11:36:05 mckusick 19 18
c specify that the linger time is in seconds
e
s 00001/00001/00320
d D 8.3 94/04/19 06:47:02 bostic 18 17
c spell
e
s 00001/00001/00320
d D 8.2 93/12/11 23:08:12 mckusick 17 16
c copyediting for Usenix manuals
e
s 00002/00002/00319
d D 8.1 93/06/05 17:05:16 bostic 16 15
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00008/00000/00313
d D 6.13 93/06/05 17:04:48 bostic 15 13
c document SO_REUSEPORT from Andrew Cherenson
e
s 00002/00002/00311
d R 8.1 93/06/04 13:16:15 bostic 14 13
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/00311
d D 6.12 93/05/20 13:36:06 mckusick 13 12
c nits (net2/sys/26)
e
s 00001/00001/00312
d D 6.11 92/04/29 10:53:07 bostic 12 11
c SO_TYPE and SO_ERROR are used with getsockopt, not setsocketopt
e
s 00000/00007/00313
d D 6.10 92/04/29 10:51:08 bostic 11 10
c two copies of the header
e
s 00002/00002/00318
d D 6.9 91/05/01 14:41:47 sellgren 10 9
c char *'s to void *'s (to match prototypes)
e
s 00090/00014/00230
d D 6.8 91/04/13 16:22:25 karels 9 8
c update: add current options and cross-reference
e
s 00171/00125/00073
d D 6.7 91/03/10 23:38:49 cael 8 7
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00011/00197
d D 6.6 90/06/23 17:47:09 trent 7 6
c new copyright notice
e
s 00014/00003/00194
d D 6.5 89/02/14 17:52:45 bostic 6 5
c add Berkeley specific copyright notice
e
s 00001/00001/00196
d D 6.4 86/05/23 09:40:38 kjd 5 4
c clean up
e
s 00098/00005/00099
d D 6.3 86/05/14 13:46:49 karels 4 3
c move socket options to [gs]etsockopt, add new
e
s 00008/00002/00096
d D 6.2 85/08/26 23:32:55 mckusick 3 2
c update error messages (mostly from sun!guy)
e
s 00001/00001/00097
d D 6.1 85/05/15 11:56:54 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00098/00000/00000
d D 5.1 85/05/15 11:56:47 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 8
.\" Copyright (c) 1983 The Regents of the University of California.
E 8
I 8
D 16
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
E 8
.\" All rights reserved.
E 16
I 16
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 16
.\"
D 7
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 7
I 7
.\" %sccs.include.redist.man%
E 7
E 6
.\"
D 8
.\"	%W% (Berkeley) %G%
E 8
I 8
.\"     %W% (Berkeley) %G%
E 8
.\"
D 2
.TH GETSOCKOPT 2 "7 July 1983"
E 2
I 2
D 8
.TH GETSOCKOPT 2 "%Q%"
E 2
.UC 5
.SH NAME
getsockopt, setsockopt \- get and set options on sockets
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <sys/socket.h>
.PP
.ft B
getsockopt(s, level, optname, optval, optlen)
int s, level, optname;
char *optval;
int *optlen;
.sp
setsockopt(s, level, optname, optval, optlen)
int s, level, optname;
char *optval;
int optlen;
.fi
.SH DESCRIPTION
.I Getsockopt
E 8
I 8
D 11
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %sccs.include.redist.man%
.\"
.\"     %W% (Berkeley) %G%
.\"
E 11
.Dd %Q%
.Dt GETSOCKOPT 2
D 9
.Os BSD 4.2
E 9
I 9
.Os BSD 4.3r
E 9
.Sh NAME
.Nm getsockopt ,
.Nm setsockopt
.Nd get and set options on sockets
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/socket.h>
.Ft int
D 10
.Fn getsockopt "int s" "int level" "int optname" "char *optval" "int *optlen"
E 10
I 10
.Fn getsockopt "int s" "int level" "int optname" "void *optval" "int *optlen"
E 10
.Ft int
D 10
.Fn setsockopt "int s" "int level" "int optname" "char *optval" "int optlen"
E 10
I 10
.Fn setsockopt "int s" "int level" "int optname" "const void *optval" "int optlen"
E 10
.Sh DESCRIPTION
.Fn Getsockopt
E 8
and
D 8
.I setsockopt
manipulate
.I options
E 8
I 8
.Fn setsockopt
manipulate the
.Em options
E 8
associated with a socket.  Options may exist at multiple
protocol levels; they are always present at the uppermost
D 8
``socket'' level.
.PP
E 8
I 8
.Dq socket
level.
.Pp
E 8
When manipulating socket options the level at which the
option resides and the name of the option must be specified.
D 8
To manipulate options at the ``socket'' level,
.I level
is specified as SOL_SOCKET.  To manipulate options at any
E 8
I 8
To manipulate options at the socket level,
.Fa level
is specified as
.Dv SOL_SOCKET .
To manipulate options at any
E 8
other level the protocol number of the appropriate protocol
controlling the option is supplied.  For example,
D 5
to indicate an option is to be interpreted by the TCP protocol,
E 5
I 5
D 8
to indicate that an option is to be interpreted by the TCP protocol,
E 5
.I level
should be set to the protocol number of TCP; see
.IR getprotoent (3N).
.PP
E 8
I 8
to indicate that an option is to be interpreted by the
.Tn TCP
protocol,
.Fa level
should be set to the protocol number of
.Tn TCP ;
see
.Xr getprotoent 3 .
.Pp
E 8
The parameters
D 8
.I optval
E 8
I 8
.Fa optval
E 8
and
D 8
.I optlen
E 8
I 8
.Fa optlen
E 8
are used to access option values for
D 8
.IR setsockopt .
E 8
I 8
.Fn setsockopt .
E 8
For
D 8
.I getsockopt
E 8
I 8
.Fn getsockopt
E 8
they identify a buffer in which the value for the
requested option(s) are to be returned.  For
D 8
.IR getsockopt ,
.I optlen
E 8
I 8
.Fn getsockopt ,
.Fa optlen
E 8
is a value-result parameter, initially containing the
size of the buffer pointed to by
D 8
.IR optval ,
E 8
I 8
.Fa optval ,
E 8
and modified on return to indicate the actual size of
the value returned.  If no option value is
to be supplied or returned,
D 8
.I optval
may be supplied as 0.
.PP
.I Optname
E 8
I 8
.Fa optval
may be NULL.
.Pp
.Fa Optname
E 8
and any specified options are passed uninterpreted to the appropriate
protocol module for interpretation.
The include file
D 8
.RI < sys/socket.h >
D 4
contains definitions for ``socket'' level options; see
.IR socket (2).
E 4
I 4
contains definitions for ``socket'' level options, described below.
E 8
I 8
.Ao Pa sys/socket.h Ac
contains definitions for
socket level options, described below.
E 8
E 4
Options at other protocol levels vary in format and
D 4
name, consult the appropriate entries in (4P).  
E 4
I 4
D 8
name; consult the appropriate entries in section (4P).
.PP
E 8
I 8
name; consult the appropriate entries in
section
4 of the manual.
.Pp
E 8
D 9
Most socket-level options take an
E 9
I 9
Most socket-level options utilize an
E 9
D 8
.I int
E 8
I 8
.Fa int
E 8
parameter for
D 8
.IR optval .
E 8
I 8
.Fa optval .
E 8
For
D 8
.IR setsockopt ,
the parameter should non-zero to enable a boolean option,
E 8
I 8
.Fn setsockopt ,
the parameter should be non-zero to enable a boolean option,
E 8
or zero if the option is to be disabled.
D 8
SO_LINGER uses a
.I struct linger
E 8
I 8
.Dv SO_LINGER
uses a
.Fa struct linger
E 8
parameter, defined in
D 8
.RI < sys/socket.h >,
E 8
I 8
.Ao Pa sys/socket.h Ac ,
E 8
which specifies the desired state of the option and the
linger interval (see below).
I 9
.Dv SO_SNDTIMEO
and
.Dv SO_RCVTIMEO
use a
.Fa struct timeval
parameter, defined in
.Ao Pa sys/time.h Ac .
E 9
D 8
.PP
E 8
I 8
.Pp
E 8
The following options are recognized at the socket level.
Except as noted, each may be examined with
D 8
.I getsockopt
E 8
I 8
.Fn getsockopt
E 8
and set with
D 8
.IR setsockopt .
.PP
.RS
.ta \w'SO_BROADCAST\ \ \ \ 'u
.nf
SO_DEBUG 	toggle recording of debugging information
SO_REUSEADDR	toggle local address reuse
SO_KEEPALIVE	toggle keep connections alive
SO_DONTROUTE	toggle routing bypass for outgoing messages
SO_LINGER 	linger on close if data present
SO_BROADCAST	toggle permission to transmit broadcast messages
SO_OOBINLINE	toggle reception of out-of-band data in band
SO_SNDBUF	set buffer size for output
SO_RCVBUF	set buffer size for input
SO_TYPE	get the type of the socket (get only)
SO_ERROR	get and clear error on the socket (get only)
.fi
.RE
.PP
SO_DEBUG enables debugging in the underlying protocol modules.
SO_REUSEADDR indicates that the rules used in validating addresses supplied
E 8
I 8
.Fn setsockopt .
.Bl -column SO_OOBINLINE -offset indent
D 9
.It Dv SO_DEBUG  Ta enables recording of debugging information
.It Dv SO_REUSEADDR Ta enables local address reuse
.It Dv SO_KEEPALIVE Ta enables keep connections alive
.It Dv SO_DONTROUTE Ta enables routing bypass for outgoing messages
.It Dv SO_LINGER  Ta linger on close if data present
.It Dv SO_BROADCAST Ta enables permission to transmit broadcast messages
.It Dv SO_OOBINLINE Ta enables reception of out-of-band data in band
.It Dv SO_SNDBUF Ta set buffer size for output
.It Dv SO_RCVBUF Ta set buffer size for input
.It Dv SO_TYPE Ta get the type of the socket (get only)
.It Dv SO_ERROR Ta get and clear error on the socket (get only)
E 9
I 9
.It Dv SO_DEBUG Ta "enables recording of debugging information"
.It Dv SO_REUSEADDR Ta "enables local address reuse"
I 15
.It Dv SO_REUSEPORT Ta "enables duplicate address and port bindings"
E 15
.It Dv SO_KEEPALIVE Ta "enables keep connections alive"
.It Dv SO_DONTROUTE Ta "enables routing bypass for outgoing messages"
.It Dv SO_LINGER  Ta "linger on close if data present"
.It Dv SO_BROADCAST Ta "enables permission to transmit broadcast messages"
.It Dv SO_OOBINLINE Ta "enables reception of out-of-band data in band"
.It Dv SO_SNDBUF Ta "set buffer size for output"
.It Dv SO_RCVBUF Ta "set buffer size for input"
.It Dv SO_SNDLOWAT Ta "set minimum count for output"
.It Dv SO_RCVLOWAT Ta "set minimum count for input"
.It Dv SO_SNDTIMEO Ta "set timeout value for output"
.It Dv SO_RCVTIMEO Ta "set timeout value for input"
.It Dv SO_TYPE Ta "get the type of the socket (get only)"
.It Dv SO_ERROR Ta "get and clear error on the socket (get only)"
E 9
.El
.Pp
.Dv SO_DEBUG
enables debugging in the underlying protocol modules.
.Dv SO_REUSEADDR
indicates that the rules used in validating addresses supplied
E 8
in a
D 8
.IR bind (2)
call should allow reuse of local addresses.  SO_KEEPALIVE enables the
E 8
I 8
.Xr bind 2
call should allow reuse of local addresses.
I 15
.Dv SO_REUSEPORT
allows completely duplicate bindings by multiple processes
if they all set
.Dv SO_REUSEPORT
before binding the port.
This option permits multiple instances of a program to each
receive UDP/IP multicast or broadcast datagrams destined for the bound port.
E 15
.Dv SO_KEEPALIVE
enables the
E 8
periodic transmission of messages on a connected socket.  Should the
connected party fail to respond to these messages, the connection is
considered broken and processes using the socket are notified via a
D 8
SIGPIPE signal.  SO_DONTROUTE indicates that outgoing messages should
E 8
I 8
.Dv SIGPIPE
D 9
signal.
E 9
I 9
signal when attempting to send data.
E 9
.Dv SO_DONTROUTE
indicates that outgoing messages should
E 8
bypass the standard routing facilities.  Instead, messages are directed
to the appropriate network interface according to the network portion
of the destination address.
D 8
.PP
SO_LINGER controls the action taken when unsent messags
E 8
I 8
.Pp
.Dv SO_LINGER
D 18
controls the action taken when unsent messags
E 18
I 18
controls the action taken when unsent messages
E 18
E 8
are queued on socket and a 
D 8
.IR close (2)
E 8
I 8
.Xr close 2
E 8
is performed.
D 8
If the socket promises reliable delivery of data and SO_LINGER is set,
E 8
I 8
If the socket promises reliable delivery of data and
.Dv SO_LINGER is set,
E 8
the system will block the process on the 
D 8
.I close
E 8
I 8
.Xr close
E 8
attempt until it is able to transmit the data or until it decides it
is unable to deliver the information (a timeout period, termed the
D 19
linger interval, is specified in the
E 19
I 19
linger interval, is specified in seconds in the
E 19
D 8
.IR setsockopt 
call when SO_LINGER is requested). 
If SO_LINGER is disabled and a 
.I close
E 8
I 8
.Fn setsockopt
call when
.Dv SO_LINGER
is requested). 
If
.Dv SO_LINGER
is disabled and a 
.Xr close
E 8
is issued, the system will process the close in a manner that allows
the process to continue as quickly as possible.
D 8
.PP
The option SO_BROADCAST requests permission to send broadcast datagrams
E 8
I 8
.Pp
The option
.Dv SO_BROADCAST
requests permission to send broadcast datagrams
E 8
on the socket.
Broadcast was a privileged operation in earlier versions of the system.
D 8
With protocols that support out-of-band data, the SO_OOBINLINE option
E 8
I 8
With protocols that support out-of-band data, the
.Dv SO_OOBINLINE
option
E 8
requests that out-of-band data be placed in the normal data input queue
as received; it will then be accessible with
D 8
.I recv
E 8
I 8
.Xr recv
E 8
or
D 8
.I read
calls without the MSG_OOB flag.
SO_SNDBUF and SO_RCVBUF are options to adjust the normal
E 8
I 8
.Xr read
calls without the
.Dv MSG_OOB
flag.
I 9
Some protocols always behave as if this option is set.
E 9
.Dv SO_SNDBUF
and
.Dv SO_RCVBUF
are options to adjust the normal
E 8
buffer sizes allocated for output and input buffers, respectively.
The buffer size may be increased for high-volume connections,
or may be decreased to limit the possible backlog of incoming data.
The system places an absolute limit on these values.
I 9
.Pp
.Dv SO_SNDLOWAT
is an option to set the minimum count for output operations.
Most output operations process all of the data supplied
by the call, delivering data to the protocol for transmission
and blocking as necessary for flow control.
Nonblocking output operations will process as much data as permitted
subject to flow control without blocking, but will process no data
if flow control does not allow the smaller of the low water mark value
or the entire request to be processed.
A
.Xr select 2
operation testing the ability to write to a socket will return true
only if the low water mark amount could be processed.
The default value for
.Dv SO_SNDLOWAT
is set to a convenient size for network efficiency, often 1024.
.Dv SO_RCVLOWAT
is an option to set the minimum count for input operations.
In general, receive calls will block until any (non-zero) amount of data
D 17
is received, then return with smaller of the amount available or the amount
E 17
I 17
is received, then return with the smaller of the amount available or the amount
E 17
requested.
The default value for
D 13
.Dv SO_SNDLOWAT
E 13
I 13
.Dv SO_RCVLOWAT
E 13
is 1.
If 
D 13
.Dv SO_SNDLOWAT
E 13
I 13
.Dv SO_RCVLOWAT
E 13
is set to a larger value, blocking receive calls normally
wait until they have received the smaller of the low water mark value
or the requested amount.
Receive calls may still return less than the low water mark if an error
occurs, a signal is caught, or the type of data next in the receive queue
is different than that returned.
.Pp
.Dv SO_SNDTIMEO
is an option to set a timeout value for output operations.
It accepts a
.Fa struct timeval
parameter with the number of seconds and microseconds
used to limit waits for output operations to complete.
If a send operation has blocked for this much time,
it returns with a partial count
or with the error
.Er EWOULDBLOCK
if no data were sent.
In the current implementation, this timer is restarted each time additional
data are delivered to the protocol,
implying that the limit applies to output portions ranging in size
from the low water mark to the high water mark for output.
.Dv SO_RCVTIMEO
is an option to set a timeout value for input operations.
It accepts a
.Fa struct timeval
parameter with the number of seconds and microseconds
used to limit waits for input operations to complete.
In the current implementation, this timer is restarted each time additional
data are received by the protocol,
and thus the limit is in effect an inactivity timer.
If a receive operation has been blocked for this much time without
receiving additional data, it returns with a short count
or with the error
.Er EWOULDBLOCK
if no data were received.
.Pp
E 9
D 8
Finally, SO_TYPE and SO_ERROR are options used only with
.IR setsockopt .
SO_TYPE returns the type of the socket, such as SOCK_STREAM;
E 8
I 8
Finally,
.Dv SO_TYPE
and
.Dv SO_ERROR
are options used only with
D 12
.Fn setsockopt .
E 12
I 12
.Fn getsockopt .
E 12
.Dv SO_TYPE
returns the type of the socket, such as
.Dv SOCK_STREAM ;
E 8
it is useful for servers that inherit sockets on startup.
D 8
SO_ERROR returns any pending error on the socket and clears
E 8
I 8
.Dv SO_ERROR
returns any pending error on the socket and clears
E 8
the error status.
It may be used to check for asynchronous errors on connected
datagram sockets or for other asynchronous errors.
E 4
D 8
.SH "RETURN VALUE"
A 0 is returned if the call succeeds, \-1 if it fails.
.SH ERRORS
E 8
I 8
.Sh RETURN VALUES
A 0 is returned if the call succeeds, -1 if it fails.
.Sh ERRORS
E 8
The call succeeds unless:
D 8
.TP 20
[EBADF]
The argument \fIs\fP is not a valid descriptor.
.TP 20
[ENOTSOCK]
The argument \fIs\fP is a file, not a socket.
.TP 20
[ENOPROTOOPT]
E 8
I 8
.Bl -tag -width ENOPROTOOPTAA
.It Bq Er EBADF
The argument
.Fa s
is not a valid descriptor.
.It Bq Er ENOTSOCK
The argument
.Fa s
is a file, not a socket.
.It Bq Er ENOPROTOOPT
E 8
D 4
The option is unknown.
E 4
I 4
The option is unknown at the level indicated.
E 4
D 8
.TP 20
[EFAULT]
E 8
I 8
.It Bq Er EFAULT
E 8
D 3
The options are not in a valid part of the
process address space.
E 3
I 3
The address pointed to by 
D 8
.I optval
E 8
I 8
.Fa optval
E 8
is not in a valid part of the process address space.
For
D 8
.IR getsockopt ,
E 8
I 8
.Fn getsockopt ,
E 8
this error may also be returned if
D 8
.I optlen
E 8
I 8
.Fa optlen
E 8
is not in a valid part of the process address space.
E 3
D 8
.SH "SEE ALSO"
D 4
socket(2), getprotoent(3N)
E 4
I 4
ioctl(2), socket(2), getprotoent(3N)
.SH BUGS
E 8
I 8
.El
.Sh SEE ALSO
.Xr ioctl 2 ,
.Xr socket 2 ,
.Xr getprotoent 3
.Xr protocols 5
.Sh BUGS
E 8
Several of the socket options should be handled at lower levels of the system.
I 8
.Sh HISTORY
The
.Nm
system call appeared in
.Bx 4.2 .
E 8
E 4
E 1
