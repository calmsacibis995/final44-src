h08601
s 00003/00002/00645
d D 8.5 95/02/27 15:46:14 mckusick 23 22
c nits
e
s 00005/00000/00642
d D 8.4 94/06/01 21:21:32 ah 22 21
c page breaks for 4.4BSD manuals
e
s 00008/00008/00634
d D 8.3 93/12/11 23:08:14 mckusick 21 20
c copyediting for Usenix manuals
e
s 00001/00001/00641
d D 8.2 93/11/16 12:11:46 bostic 20 19
c ETIMEDOUT: Connection timed out -> Operation timed out
e
s 00002/00002/00640
d D 8.1 93/06/04 13:16:29 bostic 19 18
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00032/00007/00610
d D 6.16 93/03/04 18:51:06 mckusick 18 17
c update from Mike Karels at BSDI
e
s 00046/00018/00571
d D 6.15 93/02/26 17:47:43 mckusick 17 16
c update from Mike Karels at BSDI
e
s 00001/00001/00588
d D 6.14 92/10/04 12:52:43 bostic 16 15
c <sys/errno.h> -> <errno.h>
e
s 00009/00007/00580
d D 6.13 91/07/23 13:53:55 cael 15 14
c modified history slightly
e
s 00005/00002/00582
d D 6.12 91/04/20 16:00:02 karels 14 13
c generalize EOPNOTSUP
e
s 00365/00351/00219
d D 6.11 91/03/10 23:38:59 cael 13 12
c man page macro and text revisions (-mdoc version 3)
e
s 00044/00024/00526
d D 6.10 90/06/30 17:39:58 trent 12 11
c updated err numbers & text to current errlst.c
e
s 00008/00002/00542
d D 6.9 90/06/29 18:59:41 karels 11 10
c needs more work...
e
s 00002/00001/00542
d D 6.8 88/08/05 11:12:26 bostic 10 9
c EUSERS is used in the kernel
e
s 00018/00018/00525
d D 6.7 86/05/23 09:53:25 kjd 9 8
c clean up
e
s 00055/00046/00488
d D 6.6 86/05/14 22:42:21 karels 8 7
c update for 4.3BSD
e
s 00008/00005/00526
d D 6.5 86/04/23 17:10:35 mckusick 7 6
c cleanup of error messages (from Guy Harris)
e
s 00015/00005/00516
d D 6.4 85/08/26 23:31:59 mckusick 6 5
c update error messages (mostly from sun!guy)
e
s 00016/00016/00505
d D 6.3 85/06/28 17:13:20 sechrest 5 4
c Improved english
e
s 00002/00001/00519
d D 6.2 85/05/22 18:31:17 mckusick 4 3
c update the error return codes to reflect those in 4.3BSD
e
s 00013/00005/00507
d D 6.1 85/05/09 17:32:55 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00336/00128/00176
d D 5.1 85/05/09 17:32:09 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00304/00000/00000
d D 4.1 85/05/09 17:31:32 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 8
.\" Copyright (c) 1980 Regents of the University of California.
E 8
I 8
D 13
.\" Copyright (c) 1980,1983,1986 Regents of the University of California.
E 8
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 13
I 13
D 19
.\" Copyright (c) 1980,1983,1986,1991 Regents of the University of California.
.\" All rights reserved.
E 19
I 19
D 23
.\" Copyright (c) 1993, 1980198319861991
E 23
I 23
.\" Copyright (c) 1980, 1983, 1986, 1991, 1993
E 23
.\"	The Regents of the University of California.  All rights reserved.
E 19
E 13
.\"
D 13
.\"	%W% (Berkeley) %G%
E 13
I 13
.\" %sccs.include.redist.man%
E 13
.\"
D 2
.TH INTRO 2  4/1/81
E 2
I 2
D 3
.TH INTRO 2 "12 February 1983"
E 3
I 3
D 13
.TH INTRO 2 "%Q%"
E 3
E 2
.UC 4
.de en
.HP
\\$1  \\$2  \\$3
.br
..
.SH NAME
D 2
intro, errno \- introduction to system calls and error numbers
E 2
I 2
intro \- introduction to system calls and error numbers
E 2
.SH SYNOPSIS
D 8
.B #include <errno.h>
E 8
I 8
.B #include <sys/errno.h>
E 8
.SH DESCRIPTION
E 13
I 13
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt INTRO 2
.Os BSD 4
.Sh NAME
.Nm intro
.Nd introduction to system calls and error numbers
.Sh SYNOPSIS
D 16
.Fd #include <sys/errno.h>
E 16
I 16
D 17
.Fd #include <errno.h>
E 17
I 17
.Fd #include <sys/errno.h>
E 17
E 16
.Sh DESCRIPTION
E 13
D 2
Section 2 of this manual
describes all the entries into the system.
Distinctions as to the status of the entries are made in the headings:
.IP (2)
System call entries which are standard in Version 7 UNIX systems.
.IP (2J)
System call entries added in support of the job control mechanisms of
.IR csh (1).
These system calls are not available in standard Version 7 UNIX systems,
and should be used only when necessary; to prevent inexplicit use they are
contained in the \fIjobs\fR library which must be specifically requested with
the
.B \-ljobs
loader option.
The use of conditional compilation
is recommented when possible so that programs which use these features
will gracefully degrade on systems which lack job control.
.IP (2V)
System calls added for the Virtual Memory version of UNIX distributed
by Berkeley.  Some of these calls are likely to be replaced by new facilities
in future versions; in cases where this is imminent, this is indicated in
the individual manual pages.
E 2
I 2
D 11
This section describes all of the system calls.  Most
of these calls have one or more error returns.
E 11
I 11
This section provides an overview of the system calls,
their error returns, and other common definitions and concepts.
D 13
.\".LP
.\".B "System call restart"
.\".PP
E 13
I 13
.\".Pp
.\".Sy System call restart
.\".Pp
E 13
.\"<more later...>
D 13
.SH DIAGNOSTICS
Most of these calls have one or more error returns.
E 11
An error condition is indicated by an otherwise impossible return
value.  This is almost always \-1; the individual descriptions
specify the details.
E 13
I 13
.Sh DIAGNOSTICS
Nearly all of the system calls provide an error number in the external
variable
.Va errno ,
which is defined as:
.Pp
.Dl extern int errno
.Pp
When a system call detects an error,
it returns an integer value
indicating failure (usually -1)
and sets the variable
.Va errno
accordingly.
<This allows interpretation of the failure on receiving
a -1 and to take action accordingly.>
Successful calls never set
.Va errno ;
once set, it remains until another error occurs.
It should only be examined after an error.
E 13
I 8
Note that a number of system calls overload the meanings of these
error numbers, and that the meanings must be interpreted according
to the type and circumstances of the call.
E 8
E 2
D 13
.PP
D 2
An error condition is indicated by an otherwise
impossible returned value.
Almost always this is \(mi1;
the individual sections specify the details.
An error number is also made available
in the external variable
.IR errno .
.I Errno
is not cleared on successful calls, so it should be tested only
after an error has occurred.
E 2
I 2
As with normal arguments, all return codes and values from
functions are of type integer unless otherwise noted.
An error number is also made available in the external
variable \fIerrno\fP, which is not cleared
on successful calls.
Thus \fIerrno\fP should be tested only after an error has occurred.
E 2
.PP
E 13
I 13
.Pp
E 13
D 2
There is a table of messages
associated with each error, and a routine for printing the
message;
See
.IR perror (3).
The possible error numbers
are not recited with each writeup in section 2, since many
errors are possible for most of the calls.
Here is a list of the error numbers,
their names as defined in <errno.h>,
and the messages available using
.IR perror .
E 2
I 2
The following is a complete list of the errors and their
names as given in
D 8
.RI < errno.h >.
E 8
I 8
D 13
.RI < sys/errno.h >.
E 8
E 2
.en 0 \h'\w'EIO'u' "Error 0
Unused.
D 12
.en 1 EPERM "Not owner
E 12
I 12
.en 1 EPERM "Operation not permitted
E 12
Typically this error indicates
an attempt to modify a file in some way forbidden
except to its owner or super-user.
It is also returned for attempts
by ordinary users to do things
allowed only to the super-user.
.en 2 ENOENT "No such file or directory
This error occurs when a file name is specified
and the file should exist but doesn't, or when one
of the directories in a path name does not exist.
.en 3 ESRCH "No such process
D 8
The process whose number was given to
D 2
.I signal
E 2
I 2
.I kill
E 2
and
.I ptrace
does not exist, or is already dead.
E 8
I 8
The process or process group whose number was given
does not exist, or any such process is already dead.
E 8
.en 4 EINTR "Interrupted system call
D 5
An asynchronous signal (such as interrupt or quit),
which the user has elected to catch,
E 5
I 5
An asynchronous signal (such as interrupt or quit)
that the user has elected to catch
E 5
occurred during a system call.
If execution is resumed
D 8
after processing the signal,
E 8
I 8
after processing the signal
and the system call is not restarted,
E 8
it will appear as if the interrupted system call
returned this error condition.
D 12
.en 5 EIO "I/O error
E 12
I 12
.en 5 EIO "Input/output error
E 12
Some physical I/O error occurred during a
.I read
E 13
I 13
.Aq Pa sys/errno.h .
.Bl -hang -width Ds
.It Er 0 Em "Error 0" .
Not used.
D 21
.It Er 1 EPERM Em "Operation not permitted .
E 21
I 21
.It Er 1 EPERM Em "Operation not permitted" .
E 21
An attempt was made to perform an operation limited to processes
with appropriate privileges or to the owner of a file or other
resources.
.It Er 2 ENOENT Em "No such file or directory" .
A component of a specified pathname did not exist, or the 
pathname was an empty string.
.It Er 3 ESRCH Em "No such process" .
No process could be found corresponding to that specified by the given
process ID.
.It Er 4 EINTR Em "Interrupted function call" .
An asynchronous signal (such as
.Dv SIGINT
E 13
or
D 13
.IR write .
This error may in some cases occur
on a call following the one to which it actually applies.
D 12
.en 6 ENXIO "No such device or address
E 12
I 12
.en 6 ENXIO "Device not configured
E 12
D 5
I/O on a special file refers to a subdevice which does not
E 5
I 5
I/O on a special file refers to a subdevice that does not
E 5
exist,
or beyond the limits of the device.
D 2
It may also occur when, for example, a tape drive
is not dialed in or no disk pack is loaded on a drive.
E 2
I 2
It may also occur when, for example, an illegal tape drive
unit number is selected 
or a disk pack is not loaded on a drive.
E 2
D 12
.en 7 E2BIG "Arg list too long
E 12
I 12
.en 7 E2BIG "Argument list too long
E 12
D 8
An argument list longer than 10240 bytes
E 8
I 8
An argument list longer than 20480 bytes (or the current limit, NCARGS in
.IR <sys/param.h> )
E 8
is presented to
D 2
.IR exec .
E 2
I 2
.IR execve .
E 2
.en 8 ENOEXEC "Exec format error
A request is made to execute a file
E 13
I 13
.Dv SIGQUIT )
was caught by the process during the execution of an interruptible
function. If the signal handler performs a normal return, the
D 17
interupted function call will seem to have returned the error condition.
E 17
I 17
interrupted function call will seem to have returned the error condition.
E 17
.It Er 5 EIO Em "Input/output error" .
Some physical input or output error occurred.
D 21
This error not be reported until a subsequent operation on the same file
E 21
I 21
This error will not be reported until a subsequent operation on the same file
E 21
descriptor and may be lost (over written) by any subsequent errors.
.It Er 6 ENXIO Em "\&No such device or address" .
Input or output on a special file referred to a device that did not
exist, or
made a request beyond the limits of the device.
This error may also occur when, for example,
a tape drive is not online or no disk pack is
D 21
is loaded on a drive.
E 21
I 21
loaded on a drive.
E 21
.It Er 7 E2BIG Em "Arg list too long" .
The number of bytes used for the argument and environment
list of the new process exceeded the current limit
of 20480 bytes
.Pf ( Dv NCARGS
in
.Aq Pa sys/param.h ) .
.It Er 8 ENOEXEC Em "Exec format error" .
A request was made to execute a file
E 13
D 5
which, although it has the appropriate permissions,
E 5
I 5
that, although it has the appropriate permissions,
E 5
D 9
does not start with a valid magic number, see
.IR a.out (5).
E 9
I 9
D 13
does not start with a valid magic number, (see
.IR a.out (5)).
E 9
D 12
.en 9 EBADF "Bad file number
E 12
I 12
.en 9 EBADF "Bad file descriptor
E 12
Either a file descriptor refers to no
open file,
or a read (resp. write) request is made to
D 5
a file which is open only for writing (resp. reading).
E 5
I 5
a file that is open only for writing (resp. reading).
E 5
D 12
.en 10 ECHILD "No children
E 12
I 12
.en 10 ECHILD "No child processes
E 12
.I Wait
and the process has no
living or unwaited-for children.
D 12
.en 11 EAGAIN "No more processes
In a
.I fork,
the system's process table is full
or the user is not allowed to create any more
processes.
D 7
.en 12 ENOMEM "Not enough core
E 7
I 7
.en 12 ENOMEM "Not enough memory
E 12
I 12
.en 11 EDEADLK "Resource deadlock avoided
E 13
I 13
was not in the format required for an
executable file.
.It Er 9 EBADF Em "Bad file descriptor" .
A file descriptor argument was out of range, referred to no open file,
or a read (write) request was made to a file that was only open for
writing (reading).
I 22
.sp
E 22
.It Er 10 ECHILD Em "\&No child processes" .
A
.Xr wait
or
.Xr waitpid
function was executed by a process that had no existing or unwaited-for
child processes.
.It Er 11 EDEADLK Em "Resource deadlock avoided" .
E 13
An attempt was made to lock a system resource that
would have resulted in a deadlock situation.
D 13
.en 12 ENOMEM "Cannnot allocate memory
E 12
E 7
During an
D 2
.I exec
E 2
I 2
.I execve
E 2
or
.I break,
D 2
a program asks for more core than the system is able to supply.
This is not a temporary condition; the maximum core size
is a system parameter.
The error may also occur if the arrangement
of text, data, and stack segments
requires too many segmentation registers.
E 2
I 2
a program asks for more core or swap space than the system is
D 8
able to supply.
E 8
I 8
able to supply,
or a process size limit would be exceeded.
E 8
D 9
A lack of swap space is normally a temporary condition, however
E 9
I 9
A lack of swap space is normally a temporary condition; however,
E 9
a lack of core
is not a temporary condition; the maximum size
of the text, data, and stack segments is a system parameter.
E 13
I 13
D 17
.It Er 12 ENOMEM Em "Cannnot allocate memory" .
E 17
I 17
.It Er 12 ENOMEM Em "Cannot allocate memory" .
E 17
The new process image required more memory than was allowed by the hardware
or by system-imposed memory management constraints.
A lack of swap space is normally temporary; however,
a lack of core is not.
E 13
I 8
Soft limits may be increased to their corresponding hard limits.
E 8
E 2
D 13
.en 13 EACCES "Permission denied
E 13
I 13
.It Er 13 EACCES Em "Permission denied" .
E 13
An attempt was made to access a file in a way forbidden
D 13
by the protection system.
.en 14 EFAULT "Bad address
The system encountered a hardware fault in attempting to
access the arguments of a system call.
.en 15 ENOTBLK "Block device required
A plain file was mentioned where a block device was required,
D 9
e.g. in
E 9
I 9
e.g., in
E 9
.IR mount .
D 4
.en 16 EBUSY "Mount device busy
E 4
I 4
.en 16 EBUSY "Device busy
E 4
An attempt to mount a device that was already mounted or
an attempt was made to dismount a device
on which there is an active file
D 8
directory.
(open file, current directory, mounted-on file, active text segment).
E 8
I 8
(open file, current directory, mounted-on file, or active text segment).
E 8
I 4
A request was made to an exclusive access device that was already in use.
E 4
.en 17 EEXIST "File exists
E 13
I 13
by its file access permissions.
.It Er 14 EFAULT Em "Bad address" .
The system detected an invalid address in attempting to
use an argument of a call.
.It Er 15 ENOTBLK Em "Not a block device" .
A block device operation was attempted on a non-block device or file.
.It Er 16 EBUSY Em "Resource busy" .
An attempt to use a system resource which was in use at the time
in a manner which would have conflicted with the request.
.It Er 17 EEXIST Em "File exists" .
E 13
An existing file was mentioned in an inappropriate context,
D 9
e.g.
E 9
I 9
D 13
e.g.,
E 9
.IR link .
.en 18 EXDEV "Cross-device link
D 2
A link to a file on another device
E 2
I 2
A hard link to a file on another device
E 13
I 13
for instance, as the new link name in a
.Xr link
function.
.It Er 18 EXDEV Em "Improper link" .
A hard link to a file on another file system
E 13
E 2
was attempted.
D 12
.en 19 ENODEV "No such device
E 12
I 12
D 13
.en 19 ENODEV "Operation not supported by device
E 13
I 13
.It Er 19 ENODEV Em "Operation not supported by device" .
E 13
E 12
An attempt was made to apply an inappropriate
D 8
system call to a device;
e.g. read a write-only device.
E 8
I 8
D 13
system call to a device,
D 9
e.g. to read a write-only device,
E 9
I 9
e.g., to read a write-only device,
E 9
or the device is not configured by the system.
E 8
.en 20 ENOTDIR "Not a directory
A non-directory was specified where a directory
is required,
D 9
for example in a path name or
E 9
I 9
for example, in a path name or
E 9
as an argument to
.IR chdir .
.en 21 EISDIR "Is a directory
An attempt to write on a directory.
.en 22 EINVAL "Invalid argument
Some invalid argument:
dismounting a non-mounted
device,
mentioning an unknown signal in
.I signal,
D 8
reading or writing a file for which
.I seek
has generated a negative pointer.
E 8
I 8
or some other argument inappropriate for the call.
E 8
D 9
Also set by math functions, see 
D 8
.IR intro (3).
E 8
I 8
.IR math (3).
E 9
I 9
Also set by math functions, (see 
.IR math (3)).
E 9
E 8
D 12
.en 23 ENFILE "File table overflow
E 12
I 12
.en 23 ENFILE "Too many open files in system
E 12
The system's table of open files is full,
and temporarily no more
.I opens
can be accepted.
.en 24 EMFILE "Too many open files
D 7
Customary configuration limit is 20 per process.
.en 25 ENOTTY "Not a typewriter
E 7
I 7
As released, the limit on the number of
open files per process is 64.
I 8
.IR Getdtablesize (2)
E 13
I 13
function to a device,
for example,
trying to read a write-only device such as a printer.
.It Er 20 ENOTDIR Em "Not a directory" .
A component of the specified pathname existed, but it was
not a directory, when a directory was expected.
.It Er 21 EISDIR Em "Is a directory" .
An attempt was made to open a directory with write mode specified.
.It Er 22 EINVAL Em "Invalid argument" .
Some invalid argument was supplied. (For example,
specifying an undefined signal to a
.Xr signal
or
.Xr kill
function).
.It Er 23 ENFILE Em "Too many open files in system" .
Maximum number of file descriptors allowable on the system
has been reached and a requests for an open cannot be satisfied
until at least one has been closed.
.It Er 24 EMFILE Em "Too many open files" .
<As released, the limit on the number of
open files per process is 64.>
.Xr Getdtablesize 2
E 13
will obtain the current limit.
E 8
D 13
Customary configuration limit on most other UNIX systems
is 20 per process.
.en 25 ENOTTY "Inappropriate ioctl for device
E 7
D 2
The file mentioned in
.I stty
or
.I gtty
E 2
I 2
The file mentioned in an
.I ioctl
E 2
D 8
is not a terminal or one of the other
E 8
I 8
is not a terminal or one of the
E 8
D 3
devices to which these calls apply.
E 3
I 3
devices to which this call applies.
E 3
.en 26 ETXTBSY "Text file busy
An attempt to execute a pure-procedure
D 3
program which is currently open for writing
(or reading!).
E 3
I 3
D 5
program which is currently open for writing.
E 5
I 5
program that is currently open for writing.
E 5
E 3
Also an attempt to open for writing a pure-procedure
program that is being executed.
.en 27 EFBIG "File too large
E 13
I 13
.It Er 25 ENOTTY Em "Inappropriate ioctl for device" .
A control function (see
.Xr ioctl 2 )
was attempted for a file or
special device for which the operation was inappropriate.
.It Er 26 ETXTBSY Em "Text file busy" .
The new process was a pure procedure (shared text) file
which was open for writing by another process, or
D 21
the pure procedure file was being executed an
E 21
I 21
while the pure procedure file was being executed an
E 21
.Xr open
call requested write access.
.It Er 27 EFBIG Em "File too large" .
E 13
The size of a file exceeded the maximum (about
D 8
.if t 10\u\s-29\s+2\d
.if n 1.0E9
E 8
I 8
.if t 2\u\s-231\s+2\d
.if n 2.1E9
E 8
bytes).
D 13
.en 28 ENOSPC "No space left on device
E 13
I 13
.It Er 28 ENOSPC Em "Device out of space" .
E 13
D 6
During a
E 6
I 6
A
E 6
D 13
.I write
E 13
I 13
.Xr write
E 13
D 6
to an ordinary file,
there is no free space left on the device.
E 6
I 6
to an ordinary file, the creation of a
directory or symbolic link, or the creation of a directory
D 21
entry failed because no more disk blocks are available
E 21
I 21
entry failed because no more disk blocks were available
E 21
on the file system, or the allocation of an inode for a newly
D 21
created file failed because no more inodes are available
E 21
I 21
created file failed because no more inodes were available
E 21
on the file system.
E 6
D 13
.en 29 ESPIPE "Illegal seek
E 13
I 13
.It Er 29 ESPIPE Em "Illegal seek" .
E 13
An
D 13
.I lseek
D 8
was issued to a pipe.
E 8
I 8
was issued to a socket or pipe.
E 8
D 2
This error should also be issued for
E 2
I 2
This error may also be issued for
E 2
other non-seekable devices.
.en 30 EROFS "Read-only file system
An attempt to modify a file or directory
E 13
I 13
.Xr lseek
function was issued on a socket, pipe or
.Tn FIFO .
.It Er 30 EROFS Em "Read-only file system" .
An attempt was made to modify a file or directory
E 13
was made
D 13
on a device mounted read-only.
.en 31 EMLINK "Too many links
D 2
An attempt to make more than 32767 links to a file.
E 2
I 2
An attempt to make more than 32767 hard links to a file.
E 2
.en 32 EPIPE "Broken pipe
D 2
A write on a pipe for which there is no process
E 2
I 2
A write on a pipe or socket for which there is no process
E 13
I 13
on a file system that was read-only at the time.
.It Er 31 EMLINK Em "Too many links" .
Maximum allowable hard links to a single file has been exceeded (limit
of 32767 hard links per file).
.It Er 32 EPIPE Em "Broken pipe" .
A write on a pipe, socket or
.Tn FIFO
for which there is no process
E 13
E 2
to read the data.
D 13
This condition normally generates a signal;
D 8
the error is returned if the signal is ignored.
E 8
I 8
the error is returned if the signal is caught or ignored.
E 8
D 7
.en 33 EDOM "Math argument
E 7
I 7
D 12
.en 33 EDOM "Argument too large
E 12
I 12
.en 33 EDOM "Numerical argument out of domain
E 12
E 7
The argument of a function in the math package (3M)
is out of the domain of the function.
D 12
.en 34 ERANGE "Result too large
E 12
I 12
.en 34 ERANGE "Numerical result out of range
E 12
The value of a function in the math package (3M)
is unrepresentable within machine precision.
D 2
.SH SEE ALSO
intro(3)
.SH "ASSEMBLER (PDP-11)"
.B as /usr/include/sys.s file ...
.PP
The PDP11 assembly language interface is given for each
system call.
The assembler symbols are defined in `/usr/include/sys.s'.
.PP
Return values appear in registers r0 and r1;
it is unwise to count on these registers being preserved
when no value is expected.
An erroneous call is always
indicated by turning on the c-bit of the condition codes.
The error number is returned in r0.
The presence of an error is most easily tested
by the instructions
.I bes
E 2
I 2
D 12
.en 35 EWOULDBLOCK "Operation would block"
D 5
An operation which would cause a process to block was attempted
E 5
I 5
An operation that would cause a process to block was attempted
E 5
D 8
on a object in non-blocking mode (see \fIioctl\fP (2)).
E 8
I 8
D 9
on a object in non-blocking mode (see \fIfcntl\fP(2)).
E 9
I 9
on an object in non-blocking mode (see \fIfcntl\fP(2)).
E 12
I 12
.en 35 EAGAIN "Resource temporarily unavailable
E 13
I 13
.It Er 33 EDOM Em "Numerical argument out of domain" .
A numerical input argument was outside the defined domain of the mathematical
function.
.It Er 34 ERANGE Em "Numerical result out of range" .
D 21
A numerical result of the function was to large to fit in the
E 21
I 21
A numerical result of the function was too large to fit in the
E 21
available space (perhaps exceeded precision).
.It Er 35 EAGAIN Em "Resource temporarily unavailable" .
E 13
This is a temporary condition and later calls to the
same routine may complete normally.
E 12
E 9
E 8
D 13
.en 36 EINPROGRESS "Operation now in progress"
E 13
I 13
.It Er 36 EINPROGRESS Em "Operation now in progress" .
E 13
D 5
An operation which takes a long time to complete (such as
E 5
I 5
An operation that takes a long time to complete (such as
E 5
D 8
a \fIconnect\fP (2)) was attempted on a non-blocking object (see
\fIioctl\fP (2)).
E 8
I 8
D 13
a \fIconnect\fP(2)) was attempted on a non-blocking object (see
\fIfcntl\fP(2)).
E 8
.en 37 EALREADY "Operation already in progress"
E 13
I 13
a
.Xr connect 2 )
was attempted on a non-blocking object (see
.Xr fcntl 2 ) .
.It Er 37 EALREADY Em "Operation already in progress" .
E 13
D 5
An operation was attempted on a non-blocking object which already
E 5
I 5
An operation was attempted on a non-blocking object that already
E 5
had an operation in progress.
D 13
.en 38 ENOTSOCK "Socket operation on non-socket"
E 13
I 13
.It Er 38 ENOTSOCK Em "Socket operation on non-socket" .
E 13
Self-explanatory.
D 13
.en 39 EDESTADDRREQ "Destination address required"
E 13
I 13
.It Er 39 EDESTADDRREQ Em "Destination address required" .
E 13
A required address was omitted from an operation on a socket.
D 13
.en 40 EMSGSIZE "Message too long"
E 13
I 13
.It Er 40 EMSGSIZE Em "Message too long" .
E 13
D 8
A message sent on a socket was larger than the internal message buffer.
E 8
I 8
A message sent on a socket was larger than the internal message buffer
or some other network limit.
E 8
D 13
.en 41 EPROTOTYPE "Protocol wrong type for socket"
E 13
I 13
.It Er 41 EPROTOTYPE Em "Protocol wrong type for socket" .
E 13
D 5
A protocol was specified which does not support the semantics of the
E 5
I 5
A protocol was specified that does not support the semantics of the
E 5
D 9
socket type requested. For example you cannot use the ARPA Internet
E 9
I 9
D 13
socket type requested. For example, you cannot use the ARPA Internet
E 9
UDP protocol with type SOCK_STREAM.
D 7
.en 42 ENOPROTOOPT "Bad protocol option"
E 7
I 7
D 12
.en 42 ENOPROTOOPT "Option not supported by protocol 
E 12
I 12
.en 42 ENOPROTOOPT "Protocol not available
E 13
I 13
socket type requested. For example, you cannot use the
.Tn ARPA
Internet
.Tn UDP
protocol with type
.Dv SOCK_STREAM .
.It Er 42 ENOPROTOOPT Em "Protocol not available" .
E 13
E 12
E 7
D 8
A bad option was specified in a
E 8
I 8
A bad option or level was specified in a
E 8
D 13
.IR getsockopt (2)
E 13
I 13
.Xr getsockopt 2
E 13
or
D 13
.IR setsockopt (2)
E 13
I 13
.Xr setsockopt 2
E 13
call.
D 13
.en 43 EPROTONOSUPPORT "Protocol not supported"
E 13
I 13
.It Er 43 EPROTONOSUPPORT Em "Protocol not supported" .
E 13
The protocol has not been configured into the
system or no implementation for it exists.
D 13
.en 44 ESOCKTNOSUPPORT "Socket type not supported"
E 13
I 13
.It Er 44 ESOCKTNOSUPPORT Em "Socket type not supported" .
E 13
The support for the socket type has not been configured into the
system or no implementation for it exists.
D 13
.en 45 EOPNOTSUPP "Operation not supported on socket"
For example, trying to \fIaccept\fP a connection on a datagram socket.
.en 46 EPFNOSUPPORT "Protocol family not supported"
E 13
I 13
D 14
.It Er 45 EOPNOTSUPP Em "Operation not supported on socket" .
For example, trying to
E 14
I 14
.It Er 45 EOPNOTSUPP Em "Operation not supported" .
The attempted operation is not supported for the type of object referenced.
Usually this occurs when a file descriptor refers to a file or socket
that cannot support this operation,
for example, trying to
E 14
.Em accept
a connection on a datagram socket.
.It Er 46 EPFNOSUPPORT Em "Protocol family not supported" .
E 13
The protocol family has not been configured into the
system or no implementation for it exists.
D 13
.en 47 EAFNOSUPPORT "Address family not supported by protocol family"
E 13
I 13
.It Er 47 EAFNOSUPPORT Em "Address family not supported by protocol family" .
E 13
An address incompatible with the requested protocol was used.
D 8
For example, you shouldn't necessarily expect to be able to use PUP
Internet addresses with ARPA Internet protocols.
E 8
I 8
D 13
For example, you shouldn't necessarily expect to be able to use NS
addresses with ARPA Internet protocols.
E 8
.en 48 EADDRINUSE "Address already in use"
E 13
I 13
For example, you shouldn't necessarily expect to be able to use
.Tn NS
addresses with
.Tn ARPA
Internet protocols.
.It Er 48 EADDRINUSE Em "Address already in use" .
E 13
Only one usage of each address is normally permitted.
I 22
.sp
E 22
D 13
.en 49 EADDRNOTAVAIL "Can't assign requested address"
E 13
I 13
.It Er 49 EADDRNOTAVAIL Em "Cannot assign requested address" .
E 13
Normally results from an attempt to create a socket with an
address not on this machine.
D 13
.en 50 ENETDOWN "Network is down"
E 13
I 13
.It Er 50 ENETDOWN Em "Network is down" .
E 13
A socket operation encountered a dead network.
D 13
.en 51 ENETUNREACH "Network is unreachable"
E 13
I 13
.It Er 51 ENETUNREACH Em "Network is unreachable" .
E 13
A socket operation was attempted to an unreachable network.
D 13
.en 52 ENETRESET "Network dropped connection on reset"
E 13
I 13
.It Er 52 ENETRESET Em "Network dropped connection on reset" .
E 13
The host you were connected to crashed and rebooted.
D 13
.en 53 ECONNABORTED "Software caused connection abort"
E 13
I 13
.It Er 53 ECONNABORTED Em "Software caused connection abort" .
E 13
A connection abort was caused internal to your host machine.
D 13
.en 54 ECONNRESET "Connection reset by peer"
E 13
I 13
.It Er 54 ECONNRESET Em "Connection reset by peer" .
E 13
A connection was forcibly closed by a peer.  This normally
D 8
results from the peer executing a \fIshutdown\fP (2) call.
E 8
I 8
results from a loss of the connection on the remote socket
due to a timeout or a reboot.
E 8
D 13
.en 55 ENOBUFS "No buffer space available"
E 13
I 13
.It Er 55 ENOBUFS Em "\&No buffer space available" .
E 13
An operation on a socket or pipe was not performed because
D 8
the system lacked sufficient buffer space.
E 8
I 8
the system lacked sufficient buffer space or because a queue was full.
E 8
D 13
.en 56 EISCONN "Socket is already connected"
E 13
I 13
.It Er 56 EISCONN Em "Socket is already connected" .
E 13
A
D 13
.I connect
E 13
I 13
.Xr connect
E 13
request was made on an already connected socket; or,
a
D 13
.I sendto
E 13
I 13
.Xr sendto
E 13
or
D 13
.I sendmsg
E 13
I 13
.Xr sendmsg
E 13
request on a connected socket specified a destination
D 8
other than the connected party.
E 8
I 8
when already connected.
E 8
D 13
.en 57 ENOTCONN "Socket is not connected"
E 13
I 13
.It Er 57 ENOTCONN Em "Socket is not connected" .
E 13
An request to send or receive data was disallowed because
D 8
the socket is not connected.
E 8
I 8
D 21
the socket is not connected and (when sending on a  datagram socket)
E 21
I 21
the socket was not connected and (when sending on a datagram socket)
E 21
no address was supplied.
E 8
D 13
.en 58 ESHUTDOWN "Can't send after socket shutdown"
E 13
I 13
.It Er 58 ESHUTDOWN Em "Cannot send after socket shutdown" .
E 13
A request to send data was disallowed because the socket
had already been shut down with a previous
D 13
.IR shutdown (2)
E 13
I 13
.Xr shutdown 2
E 13
call.
D 12
.en 59 \fIunused\fP
E 12
D 13
.en 60 ETIMEDOUT "Connection timed out"
E 13
I 13
D 20
.It Er 60 ETIMEDOUT Em "Connection timed out" .
E 20
I 20
.It Er 60 ETIMEDOUT Em "Operation timed out" .
E 20
E 13
A
D 13
.I connect
E 13
I 13
.Xr connect
E 13
I 8
or
D 13
.I send
E 13
I 13
.Xr send
E 13
E 8
request failed because the connected party did not
properly respond after a period of time.  (The timeout
period is dependent on the communication protocol.)
D 13
.en 61 ECONNREFUSED "Connection refused"
E 13
I 13
.It Er 61 ECONNREFUSED Em "Connection refused" .
E 13
No connection could be made because the target machine actively
refused it.  This usually results from trying to connect
D 5
to a service which is inactive on the foreign host.
E 5
I 5
to a service that is inactive on the foreign host.
E 5
D 13
.en 62 ELOOP "Too many levels of symbolic links"
E 13
I 13
.It Er 62 ELOOP Em "Too many levels of symbolic links" .
E 13
A path name lookup involved more than 8 symbolic links.
D 13
.en 63 ENAMETOOLONG "File name too long"
D 8
A component of a path name exceeded 255 characters, or an entire
path name exceeded 1023 characters.
E 8
I 8
A component of a path name exceeded 255 (MAXNAMELEN) characters, or an entire
path name exceeded 1023 (MAXPATHLEN-1) characters.
E 8
D 3
.en 64 ENOTEMPTY "Directory not empty"
E 3
I 3
.en 64 EHOSTDOWN "Host is down"
E 13
I 13
.It Er 63 ENAMETOOLONG Em "File name too long" .
A component of a path name exceeded 255
.Pq Dv MAXNAMELEN
characters, or an entire
path name exceeded 1023
.Pq Dv MAXPATHLEN Ns -1
characters.
.It Er 64 EHOSTDOWN Em "Host is down" .
E 13
A socket operation failed because the destination host was down.
D 12
.en 65 EHOSTUNREACH "Host is unreachable"
E 12
I 12
D 13
.en 65 EHOSTUNREACH "No route to host"
E 13
I 13
.It Er 65 EHOSTUNREACH Em "No route to host" .
E 13
E 12
A socket operation was attempted to an unreachable host.
D 13
.en 66 ENOTEMPTY "Directory not empty"
E 3
A directory with entries other than \*(lq.\*(rq and \*(lq..\*(rq
E 13
I 13
.It Er 66 ENOTEMPTY Em "Directory not empty" .
A directory with entries other than
.Ql \&.
and
.Ql \&..
E 13
was supplied to a remove directory or rename call.
I 3
D 12
...en 67 EPROCLIM "Too many processes"
E 12
I 12
D 13
.en 67 EPROCLIM "Too many processes"
E 12
D 10
...en 68 EUSERS "Too many users"
E 10
I 10
.en 68 EUSERS "Too many users"
E 13
I 13
.It Er 67 EPROCLIM Em "Too many processes" .
.It Er 68 EUSERS Em "Too many users" .
E 13
The quota system ran out of table entries.
E 10
D 13
.en 69 EDQUOT "Disc quota exceeded"
E 13
I 13
.It Er 69 EDQUOT Em "Disc quota exceeded" .
E 13
D 6
A file creation or write operation failed because the hard limit
for that resource had been reached.
E 6
I 6
A 
D 8
.i write
E 8
I 8
D 13
.I write
E 13
I 13
.Xr write
E 13
E 8
to an ordinary file, the creation of a
directory or symbolic link, or the creation of a directory
entry failed because the user's quota of disk blocks was
exhausted, or the allocation of an inode for a newly
created file failed because the user's quota of inodes
was exhausted.
I 22
.ne 1i
E 22
I 12
D 13
.en 70 ESTALE "Stale NFS file handle"
An attempt was made to access an open file (on an NFS filesystem)
E 13
I 13
.It Er 70 ESTALE Em "Stale NFS file handle" .
An attempt was made to access an open file (on an
.Tn NFS
filesystem)
E 13
which is now unavailable as referenced by the file descriptor.  
D 13
This may indicate the file was deleted on the NFS server and some 
E 13
I 13
This may indicate the file was deleted on the
.Tn NFS 
server or some 
E 13
D 17
other catastrophic event occured.
E 17
I 17
other catastrophic event occurred.
E 17
D 13
.en 72 EBADRPC "RPC struct is bad"
Exchange of RPC information was unsuccessful.
.en 73 ERPCMISMATCH "RPC version wrong"
The version of RPC on the remote peer is not compatible with
E 13
I 13
.It Er 72 EBADRPC Em "RPC struct is bad" .
Exchange of
.Tn RPC
information was unsuccessful.
.It Er 73 ERPCMISMATCH Em "RPC version wrong" .
The version of
.Tn RPC
on the remote peer is not compatible with
E 13
the local version.
D 13
.en 74 EPROGUNAVAIL "RPC prog. not avail"
E 13
I 13
.It Er 74 EPROGUNAVAIL Em "RPC prog. not avail" .
E 13
The requested program is not registered on the remote host.
D 13
.en 75 EPROGMISMATCH "Program version wrong"
E 13
I 13
.It Er 75 EPROGMISMATCH Em "Program version wrong" .
E 13
The requested version of the program is not available 
D 13
on the remote host (RPC).
.en 76 EPROCUNAVAIL "Bad procedure for program"
An RPC call was attempted for a procedure which doesn't exist
E 13
I 13
on the remote host
.Pq Tn RPC .
.It Er 76 EPROCUNAVAIL Em "Bad procedure for program" .
An
.Tn RPC
call was attempted for a procedure which doesn't exist
E 13
in the remote program.
D 13
.en 77 ENOLCK "No locks available"
E 13
I 13
.It Er 77 ENOLCK Em "No locks available" .
E 13
A system-imposed limit on the number of simultaneous file 
locks was reached.
D 13
.en 78 ENOSYS "Function not implemented"
E 13
I 13
.It Er 78 ENOSYS Em "Function not implemented" .
E 13
Attempted a system call that is not available on this 
system.
E 12
E 6
E 3
D 13
.SH DEFINITIONS
.TP 5
Process ID
.br
Each active process in the system is uniquely identified by a positive
E 13
I 13
.Sh DEFINITIONS
.Bl -tag -width Ds
.It  Process ID .
Each active process in the system is uniquely identified by a non-negative
E 13
D 8
integer called a process ID.  The range of this ID is from 0 to {PROC_MAX}.
E 8
I 8
integer called a process ID.  The range of this ID is from 0 to 30000.
E 8
D 13
.TP 5
Parent process ID
.br
E 13
I 13
.It  Parent process ID
E 13
D 9
A new process is created by a currently active process; see
.IR fork (2).
E 9
I 9
A new process is created by a currently active process; (see
D 13
.IR fork (2)).
E 13
I 13
.Xr fork 2 ) .
E 13
E 9
D 18
The parent process ID of a process is the process ID of its creator.
D 13
.TP 5
Process Group ID
.br
E 13
I 13
.It  Process Group ID
E 18
I 18
The parent process ID of a process is initially the process ID of its creator.
If the creating process exits,
the parent process ID of each child is set to the ID of a system process,
.Xr init .
.It  Process Group
E 18
E 13
Each active process is a member of a process group that is identified by
D 13
a positive integer called the process group ID.  This is the process
E 13
I 13
a non-negative integer called the process group ID.  This is the process
E 13
D 8
ID of the group leader.  This grouping permits the signalling of related
E 8
I 8
ID of the group leader.  This grouping permits the signaling of related
E 8
processes (see
D 13
.IR killpg (2))
E 13
I 13
D 17
.Xr killpg 2 )
E 17
I 17
.Xr termios 4 )
E 17
E 13
and the job control mechanisms of
D 13
.IR csh (1).
.TP 5
Tty Group ID
.br
E 13
I 13
.Xr csh 1 .
D 17
.It  Tty Group ID
E 13
Each active process can be a member of a terminal group that is identified
D 13
by a positive integer called the tty group ID.  This grouping is used
E 13
I 13
by a non-negative integer called the tty group ID.  This grouping is used
E 17
I 17
.It Session
A session is a set of one or more process groups.
A session is created by a successful call to
.Xr setsid 2 ,
which causes the caller to become the only member of the only process
group in the new session.
D 18
The process is known as the session leader.
E 18
I 18
.It Session leader
A process that has created a new session by a successful call to
.Xr setsid 2 ,
is known as a session leader.
E 18
Only a session leader may acquire a terminal as its controlling terminal (see
.Xr termios 4 ) .
D 18
A session leader with a controlling terminal is known as a controlling process.
.It  "Tty Process Group ID"
E 18
I 18
.It Controlling process
A session leader with a controlling terminal is a controlling process.
.It Controlling terminal
A terminal that is associated with a session is known as the controlling
terminal for that session and its members.
I 22
.ne 1i
E 22
.It  "Terminal Process Group ID"
E 18
A terminal may be acquired by a session leader as its controlling terminal.
Once a terminal is associated with a session, any of the process groups
within the session may be placed into the foreground by setting
the terminal process group ID to the ID of the process group.
This facility is used
E 17
E 13
to arbitrate between multiple jobs contending for the same terminal;
D 9
see
.IR csh (1),
E 9
I 9
(see
D 13
.IR csh (1)
E 13
I 13
.Xr csh 1
E 13
E 9
E 2
and
D 2
.I bec
(`branch on error set (or clear)').
These are synonyms for
the
.I bcs
and
.I bcc
instructions.
.PP
On the Interdata 8/32, the system call arguments
correspond well to the arguments of the C routines.
The sequence is:
E 2
I 2
D 9
.IR tty (4).
E 9
I 9
D 13
.IR tty (4)).
E 9
.TP 5
Real User ID and Real Group ID
.br
E 13
I 13
.Xr tty 4 ) .
I 18
.It  "Orphaned Process Group"
A process group is considered to be
.Em orphaned
if it is not under the control of a job control shell.
More precisely, a process group is orphaned
when none of its members has a parent process that is in the same session
as the group,
but is in a different process group.
Note that when a process exits, the parent process for its children
is changed to be
.Xr init ,
which is in a separate session.
Not all members of an orphaned process group are necessarily orphaned
processes (those whose creating process has exited).
The process group of a session leader is orphaned by definition.
E 18
D 15
.It  Real User ID and Real Group ID
E 15
I 15
.It "Real User ID and Real Group ID"
E 15
E 13
Each user on the system is identified by a positive integer
termed the real user ID.
E 2
D 13
.IP
E 13
I 13
.Pp
E 13
D 2
.nf
la	%2,errno
l	%0,&callno
svc	0,args
.fi
.PP
Thus register 2 points to a word into which the error number will be
stored as needed; it is cleared if no error occurs.
Register 0 contains the system call number; the nomenclature
is identical to that on the PDP11.
The argument of the
.I svc
is the address of the arguments, laid out in storage
as in the C calling sequence.
The return value is in register 2 (possibly 3 also, as in
.IR pipe )
and is \-1 in case of error.
The overflow bit in the program status word is also
set when errors occur.
.PP
On the VAX-11 a system call follows exactly the same conventions as a
C procedure.  Namely, register
.B ap
points to a long word containing the number of arguments, and the
arguments follow in successive long words.  Values are returned in registers
.B r0
E 2
I 2
Each user is also a member of one or more groups. 
One of these groups is distinguished from others and
used in implementing accounting facilities.  The positive
integer corresponding to this distinguished group is termed 
the real group ID.
D 13
.IP
E 13
I 13
.Pp
E 13
All processes have a real user ID and real group ID.
These are initialized from the equivalent attributes
D 5
of the process which created it.
E 5
I 5
of the process that created it.
E 5
D 13
.TP 5
Effective User Id, Effective Group Id, and Access Groups
.br
E 13
I 13
D 15
.It  Effective User Id, Effective Group Id, and Access Groups
E 15
I 15
D 17
.It "Effective User Id, Effective Group Id, and Access Groups"
E 15
E 13
Access to system resources is governed by three values:
the effective user ID, the effective group ID, and the
group access list.
E 17
I 17
.It "Effective User Id, Effective Group Id, and Group Access List"
Access to system resources is governed by two values:
the effective user ID, and the group access list.
The first member of the group access list is also known as the
effective group ID.
(In POSIX.1, the group access list is known as the set of supplementary
group IDs, and it is unspecified whether the effective group ID is
a member of the list.)
E 17
D 13
.IP
E 13
I 13
.Pp
E 13
The effective user ID and effective group ID are initially the
process's real user ID and real group ID respectively.  Either
may be modified through execution of a set-user-ID or set-group-ID
D 9
file (possibly by one its ancestors); see
.IR execve (2).
E 9
I 9
file (possibly by one its ancestors) (see
D 13
.IR execve (2)).
E 9
.IP
E 13
I 13
.Xr execve 2 ) .
I 17
By convention, the effective group ID (the first member of the group access
list) is duplicated, so that the execution of a set-group-ID program
does not result in the loss of the original (real) group ID.
E 17
.Pp
E 13
D 17
The group access list is an additional set of group ID's
E 17
I 17
D 18
The group access list is a set of group ID's
E 18
I 18
The group access list is a set of group IDs
E 18
E 17
used only in determining resource accessibility.  Access checks
are performed as described below in ``File Access Permissions''.
I 17
.It  "Saved Set User ID and Saved Set Group ID"
When a process executes a new file, the effective user ID is set
to the owner of the file if the file is set-user-ID, and the effective
group ID (first element of the group access list) is set to the group
of the file if the file is set-group-ID.
The effective user ID of the process is then recorded as the saved set-user-ID,
and the effective group ID of the process is recorded as the saved set-group-ID.
These values may be used to regain those values as the effective user
or group ID after reverting to the real ID (see
.Xr setuid 2 ) .
(In POSIX.1, the saved set-user-ID and saved set-group-ID are optional,
and are used in setuid and setgid, but this does not work as desired
for the super-user.)
E 17
D 13
.TP 5
Super-user
.br
E 13
I 13
.It  Super-user
E 13
A process is recognized as a
D 13
.I super-user
E 13
I 13
.Em super-user
E 13
process and is granted special privileges if its effective user ID is 0.
I 22
.ne 1i
E 22
D 13
.TP 5
Special Processes
.br
E 13
I 13
.It  Special Processes
E 13
D 18
The processes with a process ID's of 0, 1, and 2 are special.
E 18
I 18
The processes with process IDs of 0, 1, and 2 are special.
E 18
Process 0 is the scheduler.  Process 1 is the initialization process
D 13
.IR init ,
E 13
I 13
.Xr init ,
E 13
and is the ancestor of every other process in the system.
It is used to control the process structure.
Process 2 is the paging daemon.
D 13
.TP 5
Descriptor
.br
E 13
I 13
.It  Descriptor
E 13
An integer assigned by the system when a file is referenced
by
D 8
.IR open (2),
E 8
I 8
D 13
.IR open (2)
E 13
I 13
.Xr open 2
E 13
or
E 8
D 13
.IR dup (2),
E 13
I 13
.Xr dup 2 ,
E 13
D 8
or 
.IR pipe (2)
D 5
or a socket is referenced by
E 5
I 5
or when a socket is referenced by
E 8
I 8
or when a socket is created by
D 13
.IR pipe (2),
E 8
E 5
.IR socket (2)
E 13
I 13
.Xr pipe 2 ,
.Xr socket 2
E 13
or
D 5
.IR socketpair (2)
E 5
I 5
D 13
.IR socketpair (2),
E 13
I 13
.Xr socketpair 2 ,
E 13
E 5
which uniquely identifies an access path to that file or socket from
a given process or any of its children.
D 13
.TP 5
File Name
.br
D 8
Names consisting of up to {FILENAME_MAX} characters may be used to name
E 8
I 8
Names consisting of up to 255 (MAXNAMELEN) characters may be used to name
E 13
I 13
.It  File Name
Names consisting of up to 255
.Pq Dv MAXNAMELEN
characters may be used to name
E 13
E 8
an ordinary file, special file, or directory.
D 13
.IP
These characters may be selected from the set of all ASCII character
excluding 0 (null) and the ASCII code for / (slash).  (The parity bit,
bit 8, must be 0.)
.IP
Note that it is generally unwise to use *, ?, [ or ] as part of
E 13
I 13
.Pp
These characters may be selected from the set of all
.Tn ASCII
character
excluding 0 (NUL) and the
.Tn ASCII
code for
.Ql \&/
(slash).  (The parity bit,
bit 7, must be 0.)
.Pp
Note that it is generally unwise to use
.Ql \&* ,
.Ql \&? ,
.Ql \&[
or
.Ql \&]
as part of
E 13
file names because of the special meaning attached to these characters
by the shell.
D 13
.TP 5
Path Name
.br
A path name is a null-terminated character string starting with an
optional slash (/), followed by zero or more directory names separated
E 13
I 13
.It  Path Name
D 15
A path name is a NUL-terminated character string starting with an
E 15
I 15
A path name is a
.Tn NUL Ns -terminated
character string starting with an
E 15
optional slash
.Ql \&/ ,
followed by zero or more directory names separated
E 13
by slashes, optionally followed by a file name.
D 8
The total length of a path name must be less than {PATHNAME_MAX} characters.
E 8
I 8
D 13
The total length of a path name must be less than 1024 (MAXPATHLEN) characters.
E 8
.IP
E 13
I 13
The total length of a path name must be less than 1024
.Pq Dv MAXPATHLEN
characters.
.Pp
E 13
If a path name begins with a slash, the path search begins at the
D 13
.I root
E 13
I 13
.Em root
E 13
directory.
Otherwise, the search begins from the current working directory.
D 13
A slash by itself names the root directory.  A null
E 13
I 13
A slash by itself names the root directory.  An empty
E 13
pathname refers to the current directory.
D 13
.TP 5
Directory
.br
E 13
I 13
.It  Directory
E 13
D 5
A directory is a special type of file which contains entries
which are references to other files.
E 5
I 5
A directory is a special type of file that contains entries
that are references to other files.
E 5
Directory entries are called links.  By convention, a directory
D 13
contains at least two links, . and .., referred to as
.I dot
E 13
I 13
contains at least two links,
.Ql \&.
E 13
E 2
and
D 2
.BR r1 .
An error is indicated by setting the C (carry) bit in the processor status
word; the error number is placed in
.BR r0 .
.SH BUGS
The message \*(lqMount device busy\*(rq is reported when a terminal is inaccessible
because the \*(lqexclusive use\*(rq bit is set; this is confusing.
E 2
I 2
D 13
.I dot-dot
E 13
I 13
.Ql \&.. ,
referred to as
.Em dot
and
.Em dot-dot
E 13
respectively.  Dot refers to the directory itself and
dot-dot refers to its parent directory.
D 13
.TP 5
Root Directory and Current Working Directory
.br
E 13
I 13
D 15
.It  Root Directory and Current Working Directory
E 15
I 15
.It "Root Directory and Current Working Directory"
E 15
E 13
Each process has associated with it a concept of a root directory
and a current working directory for the purpose of resolving path
name searches.  A process's root directory need not be the root
directory of the root file system.
D 13
.TP 5
File Access Permissions
.br
E 13
I 13
.It  File Access Permissions
E 13
Every file in the file system has a set of access permissions.
These permissions are used in determining whether a process
may perform a requested operation on the file (such as opening
a file for writing).  Access permissions are established at the
time a file is created.  They may be changed at some later time
through the 
D 13
.IR chmod (2)
E 13
I 13
.Xr chmod 2
E 13
call. 
D 13
.IP
E 13
I 13
.Pp
E 13
File access is broken down according to whether a file may be: read,
written, or executed.  Directory files use the execute
permission to control if the directory may be searched. 
D 13
.IP
E 13
I 13
.Pp
E 13
File access permissions are interpreted by the system as
they apply to three different classes of users: the owner
of the file, those users in the file's group, anyone else.
Every file has an independent set of access permissions for
each of these classes.  When an access check is made, the system
decides if permission should be granted by checking the access
information applicable to the caller.
D 13
.IP
E 13
I 13
.Pp
E 13
Read, write, and execute/search permissions on
a file are granted to a process if:
D 13
.IP
The process's effective user ID is that of the super-user.
.IP
E 13
I 13
.Pp
The process's effective user ID is that of the super-user. (Note:
even the super-user cannot execute a non-executable file.)
.Pp
E 13
The process's effective user ID matches the user ID of the owner
of the file and the owner permissions allow the access.
D 13
.IP
E 13
I 13
.Pp
E 13
The process's effective user ID does not match the user ID of the
owner of the file, and either the process's effective
group ID matches the group ID
of the file, or the group ID of the file is in
the process's group access list,
and the group permissions allow the access.
D 13
.IP
E 13
I 13
.Pp
E 13
Neither the effective user ID nor effective group ID
and group access list of the process
match the corresponding user ID and group ID of the file,
but the permissions for ``other users'' allow access.
D 13
.IP
E 13
I 13
.Pp
E 13
Otherwise, permission is denied.
D 13
.TP 5
Sockets and Address Families
.IP
E 13
I 13
.It  Sockets and Address Families
.Pp
E 13
A socket is an endpoint for communication between processes.
Each socket has queues for sending and receiving data.
D 13
.IP
E 13
I 13
.Pp
E 13
Sockets are typed according to their communications properties.
These properties include whether messages sent and received
at a socket require the name of the partner, whether communication
is reliable, the format used in naming message recipients, etc.
D 13
.IP
E 13
I 13
.Pp
E 13
Each instance of the system supports some
collection of socket types; consult
D 13
.IR socket (2)
E 13
I 13
.Xr socket 2
E 13
for more information about the types available and
their properties.
D 13
.IP
E 13
I 13
.Pp
E 13
Each instance of the system supports some number of sets of
communications protocols.  Each protocol set supports addresses
of a certain format.  An Address Family is the set of addresses
for a specific group of protocols.  Each socket has an address
chosen from the address family in which the socket was created.
D 13
.SH SEE ALSO
E 13
I 13
D 15
.Tp
E 15
.Sh SEE ALSO
E 13
D 23
intro(3), perror(3)
E 23
I 23
.Xr intro 3 ,
.Xr perror 3
E 23
I 13
D 17
.Sh HISTORY
An
D 15
.Nm
appeared in Version 6 AT&T UNIX.
E 15
I 15
.Nm intro
appeared in
.At v6 .
E 17
E 15
E 13
E 2
E 1
