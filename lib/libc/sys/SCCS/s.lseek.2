h21132
s 00002/00002/00107
d D 8.3 94/04/19 06:48:45 bostic 10 9
c spell
e
s 00001/00001/00108
d D 8.2 93/12/11 23:08:21 mckusick 9 8
c copyediting for Usenix manuals
e
s 00002/00002/00107
d D 8.1 93/06/04 13:16:55 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00091/00065/00018
d D 6.5 91/03/10 23:39:19 cael 7 6
c man page macro and text revisions (-mdoc version 3)
e
s 00005/00013/00078
d D 6.4 90/05/13 15:57:28 bostic 6 5
c change include file to unistd.h, POSIX renamed L_{SET,INCR,XTND}
c to SEEK_{SET,CUR,END}
e
s 00000/00003/00091
d D 6.3 86/02/24 03:33:11 lepreau 5 4
c lseek doesn't mind negative offsets, read & write do;
c bring write.2 up to read.2 stds.
e
s 00003/00002/00091
d D 6.2 85/10/28 16:42:24 mckusick 4 3
c cleanup of return value
e
s 00010/00004/00083
d D 6.1 85/05/09 16:39:38 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00055/00042/00032
d D 5.1 85/05/09 16:39:30 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00074/00000/00000
d D 4.1 85/05/09 16:39:23 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
D 8
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
E 7
.\"
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\" %sccs.include.redist.man%
E 7
.\"
D 2
.TH LSEEK 2 
E 2
I 2
D 3
.TH LSEEK 2 "7 July 1983"
E 3
I 3
D 7
.TH LSEEK 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
lseek, tell \- move read/write pointer
E 2
I 2
lseek \- move read/write pointer
E 2
.SH SYNOPSIS
.nf
D 2
.B long lseek(fildes, offset, whence)
.B long offset;
E 2
I 2
.ft B
D 3
.ta 1.25i 1.6i
E 3
I 3
D 6
#include <sys/file.h>
.PP
.nf
.ft B
.ta 1.25i 1.6i 1.8i
E 3
#define L_SET	0	/* set the seek pointer */
#define L_INCR	1	/* increment the seek pointer */
#define L_XTND	2	/* extend the file size */
E 2
.PP
D 2
.B long tell(fildes)
E 2
I 2
.ft B
E 6
I 6
#include <unistd.h>

E 6
pos = lseek(d, offset, whence)
D 3
int pos;
int d, offset, whence;
E 3
I 3
off_t pos;
int d;
off_t offset;
int whence;
E 3
E 2
.fi
I 2
.ft R
E 2
.SH DESCRIPTION
D 2
The file
descriptor refers to a file open for reading or writing.
The read (resp. write) pointer for the file is set as follows:
E 2
I 2
The descriptor 
.I d
refers to a file or device open for reading and/or writing.
.I Lseek
sets the file pointer of
.I d
E 7
I 7
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt LSEEK 2
.Os BSD 4
.Sh NAME
.Nm lseek
.Nd reposition read/write file offset
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft off_t
.Fn lseek "int fildes" "off_t offset" "int whence"
.Sh DESCRIPTION
The
.Fn lseek
function repositions the offset of the file descriptor
.Fa fildes
to the
argument
.Fa offset
according to the directive
.Fa whence.
The argument
.Fa fildes
must be an open
file descriptor.
.Fn Lseek
repositions the file pointer
.Fa fildes
E 7
as follows:
E 2
D 7
.IP
E 7
I 7
.Bl -item -offset indent
.It
E 7
If
D 7
.I whence
D 2
is 0, the pointer is set to
E 2
I 2
D 6
is L_SET, the pointer is set to
E 6
I 6
is SEEK_SET, the pointer is set to
E 6
E 2
.I offset
E 7
I 7
.Fa whence
is
.Dv SEEK_SET ,
the offset is set to
.Fa offset
E 7
bytes.
D 7
.IP
E 7
I 7
.It
E 7
If
D 7
.I whence
D 2
is 1, the pointer is set to its current location plus
E 2
I 2
D 6
is L_INCR, the pointer is set to its current location plus
E 6
I 6
is SEEK_CUR, the pointer is set to its current location plus
E 6
E 2
.IR offset .
.IP
E 7
I 7
.Fa whence
is
.Dv SEEK_CUR ,
the offset is set to its current location plus
.Fa offset
bytes.
.It
E 7
If
D 7
.I whence
D 2
is 2, the pointer is set to the size of the
E 2
I 2
D 6
is L_XTND, the pointer is set to the size of the
E 6
I 6
is SEEK_END, the pointer is set to the size of the
E 7
I 7
.Fa whence
is
.Dv SEEK_END ,
the offset is set to the size of the
E 7
E 6
E 2
file plus
D 7
.IR offset .
.PP
D 2
The returned value is the resulting pointer location.
.PP
The obsolete function
.IR tell ( fildes )
is identical to
.IR lseek ( "fildes, 0L, 1" ).
.PP
E 2
I 2
Upon successful completion, the resulting pointer location
as measured in bytes from beginning of the file is returned.
E 7
I 7
.Fa offset
bytes.
.El
.Pp
The
.Fn lseek
function allows the file offset to be set beyond the end
of the existing end-of-file of the file. If data is later written
at this point, subsequent reads of the data in the gap return
D 10
bytes of zeros (until data is actualy written into the gap).
E 10
I 10
bytes of zeros (until data is actually written into the gap).
E 10
.Pp
E 7
Some devices are incapable of seeking.  The value of the pointer
associated with such a device is undefined.
D 7
.SH NOTES
E 2
Seeking far beyond the end of a file, then writing,
D 2
creates a gap or `hole', which occupies no
E 2
I 2
creates a gap or \*(lqhole\*(rq, which occupies no
E 2
physical space and reads as zeros.
I 2
.SH "RETURN VALUE
E 7
I 7
.Sh RETURN VALUES
E 7
D 4
Upon successful completion, a non-negative integer,
the current file pointer value, is returned.  Otherwise,
E 4
I 4
Upon successful completion,
D 7
the current file pointer value is returned.
E 7
I 7
.Fn lseek
returns the resulting offset location as measured in bytes from the
D 10
begining of the file.
E 10
I 10
beginning of the file.
E 10
E 7
Otherwise,
E 4
D 7
a value of \-1 is returned and \fIerrno\fP is set to indicate
E 7
I 7
a value of -1 is returned and
.Va errno
is set to indicate
E 7
the error.
D 7
.SH "ERRORS
.I Lseek
E 7
I 7
.Sh ERRORS
.Fn Lseek
E 7
will fail and the file pointer will remain unchanged if:
D 7
.TP 15
[EBADF]
.I Fildes
E 7
I 7
.Bl -tag -width [EINVAL]
.It Bq Er EBADF
.Em Fildes
E 7
is not an open file descriptor.
D 7
.TP 15
[ESPIPE]
.I Fildes
is associated with a pipe or a socket.
.TP 15
[EINVAL]
.I Whence
E 7
I 7
.It Bq Er ESPIPE
.Em Fildes
is associated with a pipe, socket, or FIFO.
.It Bq Er EINVAL
.Fa Whence
E 7
is not a proper value.
D 5
.TP 15
[EINVAL]
The resulting file pointer would be negative.
E 5
E 2
D 7
.SH "SEE ALSO"
D 2
open(2), creat(2), fseek(3)
.SH DIAGNOSTICS
\-1
is returned for
an undefined file descriptor,
seek on a pipe,
or seek to a position before the beginning of file.
E 2
I 2
dup(2), open(2)
E 2
.SH BUGS
E 7
I 7
.El
.Sh SEE ALSO
.Xr dup 2 ,
.Xr open 2
.Sh BUGS
E 7
D 2
.I Lseek
is a no-op on character special files.
.SH "ASSEMBLER (PDP-11)"
(lseek = 19.)
.br
(file descriptor in r0)
.br
.B sys lseek; offset1; offset2; whence
.PP
.I Offset1
and
.I offset2
are the high and low words of 
.IR offset ;
r0 and r1 contain
the pointer upon return.
E 2
I 2
This document's use of
D 7
.I whence
E 7
I 7
.Fa whence
E 7
D 9
is incorrect English, but maintained for historical reasons.
E 9
I 9
is incorrect English, but is maintained for historical reasons.
E 9
I 7
.Sh STANDARDS
The
.Fn lseek
function
conforms to IEEE Std 1003.1-1988
.Pq Dq Tn POSIX .
E 7
E 2
E 1
