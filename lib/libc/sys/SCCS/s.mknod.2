h49696
s 00002/00002/00099
d D 8.1 93/06/04 13:17:31 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00070/00082/00031
d D 6.5 91/03/10 23:39:29 cael 7 6
c man page macro and text revisions (-mdoc version 3)
e
s 00002/00002/00111
d D 6.4 86/05/23 09:54:52 kjd 6 5
c clean up for 4.3
e
s 00019/00000/00094
d D 6.3 85/08/26 23:31:42 mckusick 5 4
c update error messages (mostly from sun!guy)
e
s 00021/00008/00073
d D 6.2 85/05/22 18:30:55 mckusick 4 3
c update the error return codes to reflect those in 4.3BSD
e
s 00001/00001/00080
d D 6.1 85/05/09 16:40:10 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00056/00025/00025
d D 5.1 85/05/09 16:39:58 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00050/00000/00000
d D 4.1 85/05/09 16:39:48 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
D 8
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
E 7
.\"
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\" %sccs.include.redist.man%
E 7
.\"
D 2
.TH MKNOD 2 
E 2
I 2
D 3
.TH MKNOD 2 "2 July 1983"
E 3
I 3
D 7
.TH MKNOD 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
mknod \- make a directory or a special file
E 2
I 2
mknod \- make a special file
E 2
.SH SYNOPSIS
.nf
D 2
.B mknod(name, mode, addr)
.B char *name;
.nf
E 2
I 2
.ft B
mknod(path, mode, dev)
char *path;
int mode, dev;
.fi
.ft R
E 2
.SH DESCRIPTION
.I Mknod
creates a new file
D 2
whose name is the null-terminated string pointed
to by
.IR name .
E 2
I 2
whose name is
.I path.
E 2
The mode of the new file
D 2
(including directory and special file bits)
E 2
I 2
(including special file bits)
E 2
is initialized from
.IR mode .
(The protection part of the mode
D 6
is modified by the process's mode mask; see
.IR umask (2)).
E 6
I 6
is modified by the process's mode mask (see
.IR umask (2))).
E 6
The first block pointer of the i-node
is initialized from
D 2
.IR addr .
For ordinary files and directories
.I addr
is normally zero.
In the case of a special file,
.I addr
specifies which special file.
E 2
I 2
.I dev 
and is used to specify which device the special file
refers to.
E 2
.PP
I 2
If mode indicates a block or character special file,
.I dev
E 7
I 7
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt MKNOD 2
.Os BSD 4
.Sh NAME
.Nm mknod
.Nd make a special file node
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft int
.Fn mknod "const char *path" "mode_t mode" "dev_t dev"
.Sh DESCRIPTION
The device special file
.Fa path
is created with the major and minor
device numbers extracted from
.Fa mode.
The access permissions of
.Fa path
are descendant from the
.Xr umask 2
of the parent process.
.Pp
If
.Fa mode
indicates a block or character special file,
.Fa dev
E 7
is a configuration dependent specification of a character or block
D 7
I/O device.  If
.I mode
E 7
I 7
I/O device and the superblock of the device.  If
.Fa mode
E 7
does not indicate a block special or character special device,
D 7
.I dev
E 7
I 7
.Fa dev
E 7
is ignored.
D 7
.PP
E 2
.I Mknod
may be invoked only by the super-user.
I 2
.SH "RETURN VALUE
E 7
I 7
.Pp
.Fn Mknod
requires super-user privileges.
.Sh RETURN VALUES
E 7
Upon successful completion a value of 0 is returned.
D 7
Otherwise, a value of \-1 is returned and \fIerrno\fP
E 7
I 7
Otherwise, a value of -1 is returned and
.Va errno
E 7
is set to indicate the error.
D 7
.SH ERRORS
.I Mknod
will fail and the file mode will be unchanged if:
.TP 15
D 4
[EPERM]
The process's effective user ID is not super-user.
E 4
I 4
[ENOTDIR]
E 7
I 7
.Sh ERRORS
.Fn Mknod
will fail and the file will be not created if:
.Bl -tag -width Er
.It Bq Er ENOTDIR
E 7
A component of the path prefix is not a directory.
E 4
D 7
.TP 15
D 4
[EPERM]
E 4
I 4
[EINVAL]
E 7
I 7
.It Bq Er EINVAL
E 7
E 4
The pathname contains a character with the high-order bit set.
D 7
.TP 15
D 4
[ENOTDIR]
A component of the path prefix is not a directory.
E 4
I 4
[ENAMETOOLONG]
E 7
I 7
.It Bq Er ENAMETOOLONG
E 7
A component of a pathname exceeded 255 characters,
or an entire path name exceeded 1023 characters.
E 4
D 7
.TP 15
[ENOENT]
E 7
I 7
.It Bq Er ENOENT
E 7
A component of the path prefix does not exist.
D 7
.TP 15
I 4
[EACCES]
E 7
I 7
.It Bq Er EACCES
E 7
Search permission is denied for a component of the path prefix.
D 7
.TP 15
[ELOOP]
E 7
I 7
.It Bq Er ELOOP
E 7
Too many symbolic links were encountered in translating the pathname.
D 7
.TP 15
[EPERM]
E 7
I 7
.It Bq Er EPERM
E 7
The process's effective user ID is not super-user.
D 7
.TP 15
[EPERM]
E 7
I 7
.It Bq Er EPERM
E 7
The pathname contains a character with the high-order bit set.
D 7
.TP 15
[EIO]
E 7
I 7
.It Bq Er EIO
E 7
An I/O error occurred while making the directory entry or allocating the inode.
D 7
.TP 15
I 5
[ENOSPC]
E 7
I 7
.It Bq Er ENOSPC
E 7
The directory in which the entry for the new node is being placed
cannot be extended because there is no space left on the file
system containing the directory.
D 7
.TP 15
[ENOSPC]
E 7
I 7
.It Bq Er ENOSPC
E 7
There are no free inodes on the file system on which the
node is being created.
D 7
.TP 15
[EDQUOT]
E 7
I 7
.It Bq Er EDQUOT
E 7
The directory in which the entry for the new node
is being placed cannot be extended because the
user's quota of disk blocks on the file system
containing the directory has been exhausted.
D 7
.TP 15
[EDQUOT]
E 7
I 7
.It Bq Er EDQUOT
E 7
The user's quota of inodes on the file system on
which the node is being created has been exhausted.
D 7
.TP 15
E 5
E 4
[EROFS]
E 7
I 7
.It Bq Er EROFS
E 7
The named file resides on a read-only file system.
D 7
.TP 15
[EEXIST]
E 7
I 7
.It Bq Er EEXIST
E 7
The named file exists.
D 7
.TP 15
[EFAULT]
.I Path
E 7
I 7
.It Bq Er EFAULT
.Fa Path
E 7
points outside the process's allocated address space.
D 4
.TP 15
[ELOOP]
Too many symbolic links were encountered in translating the pathname.
E 4
E 2
D 7
.SH "SEE ALSO"
D 2
mkdir(1), mknod(1), filsys(5)
.SH DIAGNOSTICS
Zero is returned if the file has been made; \-1
if the file already exists
or if the user is not the super-user.
.SH "ASSEMBLER (PDP-11)"
(mknod = 14.)
.br
.B sys  mknod; name; mode; addr
E 2
I 2
chmod(2), stat(2), umask(2)
E 7
I 7
.El
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr stat 2 ,
.Xr umask 2
.Sh HISTORY
A
.Nm
function call appeared in Version 6 AT&T UNIX.
E 7
E 2
E 1
