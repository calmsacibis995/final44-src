h16563
s 00019/00038/00250
d D 8.3 95/05/24 21:34:20 mckusick 19 18
c update to reflect new naming convention and args location
e
s 00001/00001/00287
d D 8.2 93/12/11 23:08:25 mckusick 18 17
c copyediting for Usenix manuals
e
s 00002/00002/00286
d D 8.1 93/07/11 14:33:00 bostic 17 16
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00034/00037/00254
d D 6.13 93/07/11 14:32:37 mckusick 16 14
c miscellaneous nits (from Hibler)
e
s 00002/00002/00289
d R 8.1 93/06/04 13:17:57 bostic 15 14
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00018/00018/00273
d D 6.12 91/03/15 18:59:54 cael 14 13
c try to make display narrower
e
s 00193/00194/00098
d D 6.11 91/03/10 23:39:33 cael 13 12
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00011/00291
d D 6.10 90/06/23 17:48:51 trent 12 11
c new copyright notice
e
s 00001/00000/00300
d D 6.9 90/03/08 11:51:36 mckusick 11 10
c update specification of ufs_args
e
s 00002/00002/00298
d D 6.8 90/01/04 22:44:21 mckusick 10 9
c system call is unmount not umount
e
s 00002/00002/00298
d D 6.7 89/11/09 22:25:59 mckusick 9 8
c forcibly is now implemented
e
s 00008/00000/00292
d D 6.6 89/10/31 18:29:24 mckusick 8 7
c add description of the M_UPDATE flag
e
s 00036/00003/00256
d D 6.5 89/10/18 17:25:18 mckusick 7 6
c add description of memory based file system
e
s 00165/00098/00094
d D 6.4 89/08/16 16:15:56 mckusick 6 5
c update for vnode interface
e
s 00012/00001/00180
d D 6.3 85/08/26 23:31:46 mckusick 5 4
c update error messages (mostly from sun!guy)
e
s 00043/00027/00138
d D 6.2 85/05/22 18:30:58 mckusick 4 3
c update the error return codes to reflect those in 4.3BSD
e
s 00001/00001/00164
d D 6.1 85/05/09 16:40:44 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00098/00028/00067
d D 5.1 85/05/09 16:40:31 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00095/00000/00000
d D 4.1 85/05/09 16:40:21 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 17
.\" Copyright (c) 1980, 1989 The Regents of the University of California.
.\" All rights reserved.
E 17
I 17
.\" Copyright (c) 1980, 1989, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 17
E 6
.\"
I 6
D 12
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 12
I 12
.\" %sccs.include.redist.man%
E 12
.\"
E 6
D 13
.\"	%W% (Berkeley) %G%
E 13
I 13
.\"     %W% (Berkeley) %G%
E 13
.\"
D 2
.TH MOUNT 2 
E 2
I 2
D 3
.TH MOUNT 2 "27 July 1983"
E 3
I 3
D 13
.TH MOUNT 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 10
mount, umount \- mount or remove file system
E 10
I 10
mount, unmount \- mount or remove file system
E 10
.SH SYNOPSIS
.nf
I 6
#include <sys/mount.h>
.sp
E 6
D 2
.B mount(special, name, rwflag)
.B char *special, *name;
E 2
I 2
.ft B
D 6
mount(special, name, rwflag)
char *special, *name;
int rwflag;
E 6
I 6
mount(type, dir, flags, data)
int type;
char *dir;
int flags;
caddr_t data;
E 6
E 2
.PP
D 2
.B umount(special)
.B char *special;
E 2
I 2
.ft B
D 6
umount(special)
char *special;
E 6
I 6
D 10
umount(dir, flags)
E 10
I 10
unmount(dir, flags)
E 10
char *dir;
int flags;
E 6
E 2
.fi
.SH DESCRIPTION
.I Mount
D 6
announces to the system that a removable file system has
been mounted on
the block-structured special file
.I special;
from now on, references to file
.I name
E 6
I 6
announces to the system that a file system has
been mounted on the directory
.IR dir ;
following the mount, references to directory
.I dir
E 6
will refer to
D 6
the root file on the newly mounted file system.
.I Special
and
.I name
are pointers to null-terminated strings
containing the appropriate path names.
E 6
I 6
the root directory on the newly mounted file system.
.I Dir
is a pointer to a null-terminated string
containing the appropriate path name
which must be a directory that already exists.
Its old contents are inaccessible while the
file system is mounted.
E 6
.PP
E 13
I 13
.Dd %Q%
.Dt MOUNT 2
.Os BSD 4
.Sh NAME
.Nm mount ,
.Nm unmount
.Nd mount or dismount a filesystem
.Sh SYNOPSIS
I 16
.Fd #include <sys/param.h>
E 16
.Fd #include <sys/mount.h>
.Ft int
.Fn mount "int type" "const char *dir" "int flags" "caddr_t data"
.Ft int
.Fn unmount "const char *dir" "int flags"
.Sh DESCRIPTION
E 13
D 6
.I Name
must exist already. 
.I Name
D 2
must be a directory (unless the root of the mounted file system
is not a directory).
E 2
I 2
must be a directory.
E 2
Its old contents
are inaccessible while the file system
is mounted.
.PP
E 6
The
D 6
.I rwflag
argument determines whether
the file system can be written on; if it is 0 writing
is allowed, if non-zero no writing is done.
E 6
I 6
D 13
.I flag
argument determines whether certain semantics should be
suppressed when accessing the file system:
.IP M_RDONLY 14
E 13
I 13
.Fn mount
function grafts
a filesystem object onto the system file tree
at the point
.Ar dir .
The argument
.Ar data
describes the filesystem object to be mounted.
The argument
.Ar type
tells the kernel how to interpret
.Ar data
(See
.Ar type
below).
The contents of the filesystem
become available through the new mount point
.Ar dir .
Any files in
.Ar dir
at the time
of a successful mount are swept under the carpet so to speak, and
are unavailable until the filesystem is unmounted.
.Pp
The following
.Ar flags
may be specified to
suppress default semantics which affect filesystem access.
D 16
.Bl -tag -width M_SYNCHRONOUS
.It Dv M_RDONLY
E 13
The file system should be treated as read-only;
E 16
I 16
.Bl -tag -width MNT_SYNCHRONOUS
.It Dv MNT_RDONLY
The filesystem should be treated as read-only;
E 16
D 13
no writing is allowed (even by the super-user).
E 6
Physically write-protected and magnetic
tape file systems must be mounted read-only or
errors will occur when access times are updated,
whether or not any
explicit write is attempted.
I 6
.IP M_NOEXEC 14
E 13
I 13
Even the super-user may not write on it.
D 16
.It Dv M_NOEXEC
E 13
Do not allow files to be executed from the file system.
D 13
.IP M_NOSUID 14
E 13
I 13
.It Dv M_NOSUID
E 16
I 16
.It Dv MNT_NOEXEC
Do not allow files to be executed from the filesystem.
.It Dv MNT_NOSUID
E 16
E 13
D 7
Do not honor setuid bits on files when executing them.
E 7
I 7
Do not honor setuid or setgid bits on files when executing them.
E 7
D 13
.IP M_NODEV 14
E 13
I 13
D 16
.It Dv M_NODEV
E 13
Do not interpret special files on the file system.
D 13
.IP M_SYNCHRONOUS 14
E 13
I 13
.It Dv M_SYNCHRONOUS
E 13
All I/O to the file system should be done synchronously.
E 16
I 16
.It Dv MNT_NODEV
Do not interpret special files on the filesystem.
.It Dv MNT_SYNCHRONOUS
All I/O to the filesystem should be done synchronously.
E 16
E 6
D 13
.PP
I 8
The flag M_UPDATE indicates that the mount command is being applied 
E 13
I 13
.El
.Pp
The flag
D 16
.Dv M_UPDATE
E 16
I 16
.Dv MNT_UPDATE
E 16
indicates that the mount command is being applied 
E 13
D 16
to an already mounted file system.
E 16
I 16
to an already mounted filesystem.
E 16
This allows the mount flags to be changed without requiring
D 16
that the file system be unmounted and remounted.
Some file systems may not allow all flags to be changed.
E 16
I 16
that the filesystem be unmounted and remounted.
Some filesystems may not allow all flags to be changed.
E 16
For example,
D 16
most file systems will not allow a change from read-write to read-only.
E 16
I 16
most filesystems will not allow a change from read-write to read-only.
E 16
D 13
.PP
E 13
I 13
.Pp
E 13
E 8
I 6
The
D 13
.I type
E 13
I 13
.Fa type
E 13
D 16
argument defines the type of the file system.
The types of file systems known to the system are defined in
E 16
I 16
D 19
argument defines the type of the filesystem.
The types of filesystems known to the system are defined in
E 16
D 7
.I mount.h .
E 7
I 7
D 13
.IR mount.h .
E 7
.I Data
E 13
I 13
.Aq Pa sys/mount.h .
E 19
I 19
argument names the filesystem.
The types of filesystems known to the system can be obtained with
.Xr sysctl 8
by using the command:
.Bd -literal -offset indent
sysctl vfs
.Ed
.Pp
E 19
.Fa Data
E 13
is a pointer to a structure that contains the type
specific arguments to mount.
D 16
The currently supported types of file systems and
E 16
I 16
D 19
The currently supported types of filesystems and
E 16
their type specific data are:
E 19
I 19
The format for these argument structures is described in the
manual page for each filesystem.
By convention filesystem manual pages are named
by prefixing ``mount_'' to the name of the filesystem as returned by
.Xr sysctl 8 .
Thus the
.Nm NFS
filesystem is described by the
.Xr mount_nfs 8
manual page.
E 19
D 13
.IP MOUNT_UFS 6
.nf
.ta \w'struct  'u +\w'nfsv2fh_t  'u +\w'sockaddr_in *addr  'u
E 13
I 13
.Pp
D 19
.Dv MOUNT_UFS
D 14
.Bd -literal -compact -offset indent
E 14
I 14
.Bd -literal -offset indent -compact
E 14
E 13
struct ufs_args {
D 14
	char	*fspec;	/* Block special file to mount */
I 11
	int	exflags;	/* export related flags */
	uid_t	exroot;	/* mapping for root uid */
E 14
I 14
      char	*fspec;  /* Block special file to mount */
      int	exflags; /* export related flags */
      uid_t	exroot;  /* mapping for root uid */
E 14
E 11
};
D 13
.fi
.sp
.IP MOUNT_NFS 6
.nf
E 13
I 13
.Ed
.Pp
.Dv MOUNT_NFS
D 14
.Bd -literal -compact -offset indent
E 14
I 14
.Bd -literal -offset indent -compact
E 14
E 13
struct nfs_args {
D 14
	struct	sockaddr_in *addr;	/* file server address */
	nfsv2fh_t	*fh;	/* File handle to be mounted */
	int	flags;	/* flags */
	int	wsize;	/* write size in bytes */
	int	rsize;	/* read size in bytes */
	int	timeo;	/* initial timeout in 0.1 secs */
	int	retrans;	/* times to retry send */
	char	*hostname;	/* server's name */
E 14
I 14
      struct sockaddr_in *addr; /* file server address */
      nfsv2fh_t *fh;       /* File handle to be mounted */
      int       flags;     /* flags */
      int       wsize;     /* write size in bytes */
      int       rsize;     /* read size in bytes */
      int       timeo;     /* initial timeout 0.1 secs */
      int       retrans;   /* times to retry send */
      char      *hostname; /* server's name */
E 14
};
D 13
.fi
I 7
.IP MOUNT_MFS 6
.nf
E 13
I 13
.Ed
.Pp
.Dv MOUNT_MFS
D 14
.Bd -literal -compact -offset indent
E 14
I 14
.Bd -literal -offset indent -compact
E 14
E 13
struct mfs_args {
D 14
	char	*name;	/* name of backing process */
	caddr_t	base;	/* base address of the file system */
	u_long	size;	/* size of the file system */
E 14
I 14
      char	*name;	/* name of backing process */
D 16
      caddr_t	base;	/* base address of the file system */
      u_long	size;	/* size of the file system */
E 16
I 16
      caddr_t	base;	/* base address of the filesystem */
      u_long	size;	/* size of the filesystem */
E 16
E 14
};
D 13
.fi
.sp
E 7
.PP
E 6
.I Umount
D 6
announces to the system that the
.I special
file is no longer to contain a removable file system.
The associated file reverts to its ordinary interpretation.
E 6
I 6
announces to the system that the file system mounted at
.I dir
is no longer to contain that file system.
The associated directory reverts to its ordinary interpretation.
.PP
E 13
I 13
.Ed
.Pp
E 19
E 13
The
D 13
.I flags
argument may have the following values:
.IP MNT_NOFORCE 12
E 13
I 13
.Fn umount
function call disassociates the filesystem from the specified
mount point
.Fa dir .
.Pp
The
.Fa flags
D 16
argument may have one of the following values:
.Bl -tag -width  M_SYNCHRONOUS
.It Dv MNT_NOFORCE
E 13
The unmount should fail if any files are active on the file system.
D 13
.IP MNT_FORCE 12
E 13
I 13
.It Dv MNT_FORCE
E 13
The file system should be forcibly unmounted even if files are
E 16
I 16
argument may specify
.Dv MNT_FORCE
to specify that the filesystem should be forcibly unmounted even if files are
E 16
still active.
D 9
Any further accesses to the active files results in errors
E 9
I 9
Active special devices continue to work,
but any further accesses to any other active files result in errors
E 9
D 16
even if the file system is later remounted.
D 9
This flag is not currently supported on any file system type.
E 9
E 6
D 2
.SH "SEE ALSO"
mount(8)
.SH DIAGNOSTICS
E 2
I 2
D 13
.SH "RETURN VALUE
E 2
.I Mount
D 2
returns 0 if the action occurred; \-1 if
E 2
I 2
D 6
returns 0 if the action occurred, \-1 if
E 2
.I special
D 2
is inaccessible or not an appropriate file; if
E 2
I 2
is inaccessible or not an appropriate file, if
E 2
.I name
D 2
does not exist; if
E 2
I 2
does not exist, if
E 2
.I special
D 2
is already mounted; if
E 2
I 2
is already mounted, if
E 2
.I name
D 2
is in use; or if
E 2
I 2
is in use, or if
E 2
there are already too many
E 6
I 6
returns 0 if the action occurred, \-1 if an error occurred.
The mount can fail if
.I dir
does not exist or is not a directory.
For a
.I ufs
file system, the mount can fail if the special device
specified in the ufs_args structure is
inaccessible, is not an appropriate file, or is already mounted.
A
.I ufs
I 7
or
.I mfs
E 7
mount can also fail if there are already too many
E 6
file systems mounted.
.PP
.I Umount
D 6
returns 0 if the action occurred; \-1 if
if the special file is inaccessible or
does not have a mounted file system,
or if there are active files in the mounted 
file system.
E 6
I 6
returns 0 if the action occurred; \-1 if an error occurred.
The unmount will fail
if there are active files in the mounted file system.
E 6
D 2
.SH BUGS
If a file containing holes
(unallocated blocks)
is read, even on a file system mounted read-only,
the system will attempt to fill in the holes
by writing on the device.
.SH "ASSEMBLER (PDP-11)"
(mount = 21.)
.br
.B sys  mount; special; name; rwflag
E 2
I 2
.SH ERRORS
.I Mount
E 13
I 13
.El
E 16
I 16
even if the filesystem is later remounted.
E 16
.Sh RETURN VALUES
The
.Fn mount
returns the value 0 if the mount was successful, otherwise -1 is returned
and the variable
.Va errno
is set to indicate the error.
.Pp
.Nm Umount
returns the value 0 if the umount succeeded; otherwise -1 is returned
and the variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn Mount
E 13
will fail when one of the following occurs:
D 13
.TP 15
I 6
[EPERM]
E 13
I 13
.Bl -tag -width [ENOTBLK]
.It Bq Er EPERM
E 13
The caller is not the super-user.
D 13
.TP 15
E 6
D 4
[NODEV]
E 4
I 4
[ENAMETOOLONG]
E 13
I 13
.It Bq Er ENAMETOOLONG
E 13
D 6
A component of either pathname exceeded 255 characters,
or the entire length of either path name exceeded 1023 characters.
E 6
I 6
A component of a pathname exceeded 255 characters,
or the entire length of a path name exceeded 1023 characters.
E 6
D 13
.TP 15
[ELOOP]
E 13
I 13
.It Bq Er ELOOP
E 13
D 6
Too many symbolic links were encountered in translating either pathname.
E 6
I 6
Too many symbolic links were encountered in translating a pathname.
E 6
D 13
.TP 15
D 6
[EPERM]
E 4
The caller is not the super-user.
.TP 15
E 6
D 4
[NODEV]
.I Special
does not exist.
E 4
I 4
[ENOENT]
D 6
A component of \fIname\fP does not exist.
E 6
I 6
A component of \fIdir\fP does not exist.
E 6
E 4
.TP 15
I 6
[ENOTDIR]
A component of \fIname\fP is not a directory,
or a path prefix of \fIspecial\fP is not a directory.
.TP 15
[EINVAL]
E 13
I 13
.It Bq Er ENOENT
A component of
.Fa dir
does not exist.
.It Bq Er ENOTDIR
A component of
.Ar name
is not a directory,
or a path prefix of
.Ar special
is not a directory.
.It Bq Er EINVAL
E 13
A pathname contains a character with the high-order bit set.
D 13
.TP 15
[EBUSY]
E 13
I 13
.It Bq Er EBUSY
E 13
Another process currently holds a reference to
D 13
.IR dir .
.TP 15
[EFAULT]
\fIDir\fP points outside the process's allocated address space.
.PP
E 13
I 13
.Fa dir .
.It Bq Er EFAULT
.Fa Dir
points outside the process's allocated address space.
.El
.Pp
E 13
The following errors can occur for a
D 13
.I ufs
E 13
I 13
.Em ufs
E 13
D 16
file system mount:
E 16
I 16
filesystem mount:
E 16
D 13
.TP 15
E 6
I 4
[ENODEV]
D 6
A component of \fIspecial\fP does not exist.
E 6
I 6
A component of ufs_args \fIfspec\fP does not exist.
E 6
.TP 15
E 4
[ENOTBLK]
D 6
.I Special
E 6
I 6
.I Fspec
E 13
I 13
.Bl -tag -width [ENOTBLK]
.It Bq Er ENODEV
A component of ufs_args
.Ar fspec
does not exist.
.It Bq Er ENOTBLK
.Ar Fspec
E 13
E 6
is not a block device.
D 13
.TP 15
[ENXIO]
E 13
I 13
.It Bq Er ENXIO
E 13
The major device number of 
D 6
.I special
E 6
I 6
D 13
.I fspec
E 13
I 13
.Ar fspec
E 13
E 6
is out of range (this indicates no device driver exists
for the associated hardware).
D 13
.TP 15
D 4
[EPERM]
The pathname contains a character with the high-order bit set.
.TP 15
E 4
D 6
[ENOTDIR]
D 4
A component of the path prefix in
.I name
is not a directory.
E 4
I 4
A component of \fIname\fP is not a directory,
or a path prefix of \fIspecial\fP is not a directory.
E 6
I 6
[EBUSY]
\fIFspec\fP is already mounted.
E 6
E 4
.TP 15
D 4
[EROFS]
.I Name
resides on a read-only file system.
E 4
I 4
D 6
[EINVAL]
Either pathname contains a character with the high-order bit set.
E 6
I 6
[EMFILE]
E 13
I 13
.It Bq Er EBUSY
.Ar Fspec
is already mounted.
.It Bq Er EMFILE
E 13
No space remains in the mount table.
E 6
E 4
D 13
.TP 15
D 4
[EBUSY]
.I Name
is not a directory, or another process currently
holds a reference to it.
.TP 15
[EBUSY]
No space remains in the mount table.
.TP 15
[EBUSY]
E 4
I 4
[EINVAL]
E 13
I 13
.It Bq Er EINVAL
E 13
E 4
D 16
The super block for the file system had a bad magic
E 16
I 16
The super block for the filesystem had a bad magic
E 16
number or an out of range block size.
D 13
.TP 15
D 6
[EBUSY]
I 4
Another process currently holds a reference to
.IR name ,
or \fIspecial\fP is already mounted.
.TP 15
[EMFILE]
No space remains in the mount table.
.TP 15
E 6
[ENOMEM]
E 13
I 13
.It Bq Er ENOMEM
E 13
E 4
Not enough memory was available to read the cylinder
D 16
group information for the file system.
E 16
I 16
group information for the filesystem.
E 16
D 13
.TP 15
D 4
[EBUSY]
E 4
I 4
[EIO]
E 13
I 13
.It Bq Er EIO
E 13
E 4
D 5
An i/o error occurred while reading the super block or
E 5
I 5
An I/O error occurred while reading the super block or
E 5
cylinder group information.
I 5
D 13
.TP 15
[EFAULT]
D 6
\fISpecial\fP or \fIname\fP points outside the
process's allocated address space.
E 6
I 6
\fIFspec\fP points outside the process's allocated address space.
E 6
E 5
E 2
.PP
E 13
I 13
.It Bq Er EFAULT
.Ar Fspec
points outside the process's allocated address space.
.El
.Pp
E 13
I 6
The following errors can occur for a
D 13
.I nfs
E 13
I 13
.Em nfs
E 13
D 16
file system mount:
E 16
I 16
filesystem mount:
E 16
D 13
.TP 15
[ETIMEDOUT]
.I Nfs
E 13
I 13
.Bl -tag -width [ENOTBLK]
.It Bq Er ETIMEDOUT
.Em Nfs
E 13
timed out trying to contact the server.
D 13
.TP 15
[EFAULT]
E 13
I 13
.It Bq Er EFAULT
E 13
Some part of the information described by nfs_args
points outside the process's allocated address space.
D 13
.PP
E 13
I 13
.El
.Pp
E 13
I 7
The following errors can occur for a
D 13
.I mfs
E 13
I 13
.Em mfs
E 13
D 16
file system mount:
E 16
I 16
filesystem mount:
E 16
D 13
.TP 15
[EMFILE]
E 13
I 13
.Bl -tag -width [ENOTBLK]
.It Bq Er EMFILE
E 13
No space remains in the mount table.
D 13
.TP 15
[EINVAL]
E 13
I 13
.It Bq Er EINVAL
E 13
D 16
The super block for the file system had a bad magic
E 16
I 16
The super block for the filesystem had a bad magic
E 16
number or an out of range block size.
D 13
.TP 15
[ENOMEM]
E 13
I 13
.It Bq Er ENOMEM
E 13
Not enough memory was available to read the cylinder
D 16
group information for the file system.
E 16
I 16
group information for the filesystem.
E 16
D 13
.TP 15
[EIO]
E 13
I 13
.It Bq Er EIO
E 13
D 18
An paging error occurred while reading the super block or
E 18
I 18
A paging error occurred while reading the super block or
E 18
cylinder group information.
D 13
.TP 15
[EFAULT]
\fIName\fP points outside the process's allocated address space.
.PP
E 7
E 6
D 2
(umount = 22.)
.br
.B sys  umount; special
E 2
I 2
.I Umount
E 13
I 13
.It Bq Er EFAULT
.Em Name
points outside the process's allocated address space.
.El
.Pp
D 14
.Em Umount
E 14
I 14
.Nm Umount
E 14
E 13
may fail with one of the following errors:
D 13
.TP 15
I 6
[EPERM]
E 13
I 13
.Bl -tag -width [ENOTBLK]
.It Bq Er EPERM
E 13
The caller is not the super-user.
D 13
.TP 15
E 6
D 4
[NODEV]
E 4
I 4
[ENOTDIR]
E 13
I 13
.It Bq Er ENOTDIR
E 13
D 6
A component of the path prefix is not a directory.
E 6
I 6
A component of the path is not a directory.
E 6
D 13
.TP 15
[EINVAL]
E 13
I 13
.It Bq Er EINVAL
E 13
The pathname contains a character with the high-order bit set.
D 13
.TP 15
[ENAMETOOLONG]
E 13
I 13
.It Bq Er ENAMETOOLONG
E 13
A component of a pathname exceeded 255 characters,
or an entire path name exceeded 1023 characters.
D 13
.TP 15
[ELOOP]
E 13
I 13
.It Bq Er ELOOP
E 13
Too many symbolic links were encountered in translating the pathname.
D 13
.TP 15
D 6
[EPERM]
E 4
The caller is not the super-user.
.TP 15
D 4
[NODEV]
E 4
I 4
[ENODEV]
E 4
.I Special
does not exist.
.TP 15
[ENOTBLK]
.I Special
is not a block device.
.TP 15
[ENXIO]
The major device number of 
.I special
is out of range (this indicates no device driver exists
for the associated hardware).
.TP 15
E 6
[EINVAL]
E 13
I 13
.It Bq Er EINVAL
E 13
D 6
The requested device is not in the mount table.
E 6
I 6
The requested directory is not in the mount table.
E 6
D 13
.TP 15
[EBUSY]
E 13
I 13
.It Bq Er EBUSY
E 13
A process is holding a reference to a file located
D 16
on the file system.
E 16
I 16
on the filesystem.
E 16
I 5
D 13
.TP 15
[EIO]
E 13
I 13
.It Bq Er EIO
E 13
D 6
An I/O error occurred while writing the super block or
other cached file system information.
E 6
I 6
D 16
An I/O error occurred while writing cached file system information.
E 16
I 16
An I/O error occurred while writing cached filesystem information.
E 16
E 6
D 13
.TP 15
[EFAULT]
D 6
\fISpecial\fP points outside the process's allocated address space.
E 6
I 6
\fIDir\fP points outside the process's allocated address space.
E 6
E 5
.SH "SEE ALSO"
D 7
mount(8), umount(8)
E 7
I 7
mount(8), umount(8), mfs(8)
E 7
.SH BUGS
E 13
I 13
.It Bq Er EFAULT
.Fa Dir
points outside the process's allocated address space.
.El
.Pp
A
.Em ufs
or
.Em mfs
mount can also fail if the maximum number of filesystems are currently
mounted.
.Sh SEE ALSO
.Xr mount 8 ,
.Xr umount 8 ,
D 19
.Xr mfs 8
E 19
I 19
.Xr sysctl 8
E 19
.Sh BUGS
E 13
D 4
The error codes are in a state of disarray; too many errors
appear to the caller as one value.
E 4
I 4
Some of the error codes need translation to more obvious messages.
I 13
.Sh HISTORY
.Fn Mount
and
.Fn umount
function calls appeared in Version 6 AT&T UNIX.
E 13
E 4
E 2
E 1
