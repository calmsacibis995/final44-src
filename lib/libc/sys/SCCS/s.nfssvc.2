h46519
s 00002/00002/00210
d D 8.1 93/06/09 18:55:19 bostic 11 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00002/00211
d D 6.9 93/06/09 18:55:16 bostic 10 8
c fixed the under development line
e
s 00002/00002/00211
d R 8.1 93/06/04 13:18:21 bostic 9 8
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00004/00004/00209
d D 6.8 93/05/21 08:58:15 bostic 8 7
c unknown font specification
e
s 00178/00019/00035
d D 6.7 93/02/03 20:49:11 mckusick 7 6
c update for 4.4BSD from Rick Macklem
e
s 00006/00005/00048
d D 6.6 91/07/23 14:21:18 cael 6 5
c .Os changes, miscellaneous cleanups
e
s 00041/00035/00012
d D 6.5 91/03/10 23:39:37 cael 5 4
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00011/00046
d D 6.4 90/06/23 17:45:19 trent 4 3
c new copyright notice
e
s 00002/00001/00055
d D 6.3 89/08/31 11:42:31 mckusick 3 2
c note that it normally does not return
e
s 00003/00001/00053
d D 6.2 89/08/31 11:27:39 mckusick 2 1
c fix synopsis line; add cross reference
e
s 00054/00000/00000
d D 6.1 89/07/02 20:11:52 mckusick 1 0
c date and time created 89/07/02 20:11:52 by mckusick
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1989 The Regents of the University of California.
E 5
I 5
D 11
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 5
.\" All rights reserved.
E 11
I 11
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 11
.\"
D 4
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 4
I 4
D 6
.\" %sccs.include.redist.man%
E 6
I 6
.\" %sccs.include.redist.roff%
E 6
E 4
.\"
D 5
.\"	%W% (Berkeley) %G%
E 5
I 5
D 6
.\"     %W% (Berkeley) %G%
E 6
I 6
.\"	%W% (Berkeley) %G%
E 6
E 5
.\"
D 5
.TH NFSSVC 2 "%Q%"
.UC 7
.SH NAME
D 2
nfssvc \- get file system statistics
E 2
I 2
nfssvc \- create a remote NFS server
E 2
.SH SYNOPSIS
.nf
.ft B
.LP
nfssvc(sock)
int sock;
.fi
.ft R
.SH DESCRIPTION
.I Nfssvc
E 5
I 5
.Dd %Q%
.Dt NFSSVC 2
D 6
.Os BSD 4.4
E 6
I 6
.Os
E 6
.Sh NAME
.Nm nfssvc
D 7
.Nd create a remote NFS server
E 7
I 7
.Nd NFS services
E 7
.Sh SYNOPSIS
.Fd #include <unistd.h>
I 7
.Fd #include <nfs/nfs.h>
E 7
.Ft int
D 7
.Fn nfssvc "int sock"
E 7
I 7
.Fn nfssvc "int flags" "void *argstructp"
E 7
.Sh DESCRIPTION
D 7
.Bf -symbolic
The calling sequence of this function is expected to change
E 7
D 8
.Ef
.Fn Nfssvc
E 5
D 7
starts an
E 7
I 7
is used by the various NFS daemons, to pass information in and out of
the kernel and also to enter the kernel as a server daemon.
E 8
I 8
The
.Fn nfssvc
function is used by the NFS daemons to pass information into and out
of the kernel and also to enter the kernel as a server daemon.
E 8
The
.Fa flags
argument consists of several bits that show what action is to be taken
once in the kernel and the
.Fa argstructp
points to one of three structures depending on which bits are set in
flags.
.Pp
On the client side,
.Xr nfsiod 8
calls
.Fn nfssvc
with the
.Fa flags
argument set to
.Dv NFSSVC_BIOD
and
.Fa argstructp
set to
.Dv NULL
to enter the kernel as a block I/O server daemon.
For
.Nm NQNFS ,
.Xr mount_nfs 8
calls
.Fn nfssvc
with the
.Dv NFSSVC_MNTD
flag, optionally or'd with the flags
.Dv NFSSVC_GOTAUTH
and
.Dv NFSSVC_AUTHINFAIL
along with a pointer to a
.Bd -literal
struct nfsd_cargs {
	char		*ncd_dirp;	/* Mount dir path */
	uid_t		ncd_authuid;	/* Effective uid */
	int		ncd_authtype;	/* Type of authenticator */
	int		ncd_authlen;	/* Length of authenticator string */
	char		*ncd_authstr;	/* Authenticator string */
};
.Ed
.sp
structure.
The initial call has only the
.Dv NFSSVC_MNTD
flag set to specify service for the mount point.
If the mount point is using Kerberos, then the
.Xr mount_nfs 8
daemon will return from
.Fn nfssvc
with errno == ENEEDAUTH whenever the client side requires an ``rcmd''
authentication ticket for the user.
.Xr Mount_nfs 8
will attempt to get the Kerberos ticket, and if successful will call
.Fn nfssvc
with the flags
.Dv NFSSVC_MNTD
and
.Dv NFSSVC_GOTAUTH
after filling the ticket into the 
ncd_authstr field
and
setting the ncd_authlen and ncd_authtype
fields of the nfsd_cargs structure.
If
.Xr mount_nfs 8
failed to get the ticket,
.Fn nfssvc
will be called with the flags
.Dv NFSSVC_MNTD ,
.Dv NFSSVC_GOTAUTH
and
.Dv NFSSVC_AUTHINFAIL
to denote a failed authentication attempt.
.Pp
On the server side,
.Fn nfssvc
is called with the flag
.Dv NFSSVC_NFSD
and a pointer to a
.Bd -literal
struct nfsd_srvargs {
	struct nfsd	*nsd_nfsd;	/* Pointer to in kernel nfsd struct */
	uid_t		nsd_uid;	/* Effective uid mapped to cred */
	u_long		nsd_haddr;	/* Ip address of client */
	struct ucred	nsd_cr;		/* Cred. uid maps to */
	int		nsd_authlen;	/* Length of auth string (ret) */
	char		*nsd_authstr;	/* Auth string (ret) */
};
.Ed
.sp
to enter the kernel as an
.Xr nfsd 8
daemon.
Whenever an
.Xr nfsd 8
daemon receives a Kerberos authentication ticket, it will return from
.Fn nfssvc
with errno == ENEEDAUTH.
The
.Xr nfsd 8
will attempt to authenticate the ticket and generate a set of credentials
on the server for the ``user id'' specified in the field nsd_uid.
This is done by first authenticating the Kerberos ticket and then mapping
the Kerberos principal to a local name and getting a set of credentials for
that user via.
.Xr getpwnam 3
and
.Xr getgrouplist 3 .
If successful, the
.Xr nfsd 8
will call
.Fn nfssvc
with the
.Dv NFSSVC_NFSD
and
.Dv NFSSVC_AUTHIN
flags set to pass the credential mapping in nsd_cr into the
kernel to be cached on the server socket for that client.
If the authentication failed,
.Xr nfsd 8
calls
.Fn nfssvc
with the flags
.Dv NFSSVC_NFSD
and
.Dv NFSSVC_AUTHINFAIL
to denote an authentication failure.
.Pp
The master
.Xr nfsd 8
server daemon calls
.Fn nfssvc
with the flag
.Dv NFSSVC_ADDSOCK
and a pointer to a
.Bd -literal
struct nfsd_args {
	int	sock;		/* Socket to serve */
	caddr_t	name;		/* Client address for connection based sockets */
	int	namelen;	/* Length of name */
};
.Ed
.sp
to pass a server side
E 7
D 5
.SM NFS
E 5
I 5
.Tn NFS
E 5
D 7
daemon listening on socket
D 5
.IR sock .
E 5
I 5
.Fa sock .
E 5
The socket must be in the
D 5
.SM AF_INET
family and of type
.SM SOCK_DGRAM .
.SH RETURN VALUE
D 3
Upon successful completion, a value of 0 is returned.
E 3
I 3
Normally this system calls does not return unless the server
E 5
I 5
.Dv AF_INET
family.
E 7
I 7
socket into the kernel for servicing by the
.Xr nfsd 8
daemons.
E 7
.Sh RETURN VALUES
Normally
.Nm nfssvc
does not return unless the server
E 5
D 7
is terminated by a signal at which time a value of 0 is returned.
E 7
I 7
is terminated by a signal when a value of 0 is returned.
E 7
E 3
D 5
Otherwise, \-1 is returned and the global variable
.I errno
E 5
I 5
Otherwise, -1 is returned and the global variable
.Va errno
E 5
D 7
is set to indicate the error.
E 7
I 7
is set to specify the error.
E 7
D 5
.SH ERRORS
.I Nfssvc
fails if one or more of the following are true:
.TP 15
EBADF
.I fd
E 5
I 5
.Sh ERRORS
D 7
.Fn Nfssvc
fails if:
.Bl -tag -width [EPERM]
.It Bq Er EBADF
.Fa Fd
E 5
is not a valid open file descriptor.
E 7
I 7
.Bl -tag -width [ENEEDAUTH]
.It Bq Er ENEEDAUTH
This special error value
is really used for authentication support, particularly Kerberos,
as explained above.
E 7
D 5
.TP 15
EPERM
E 5
I 5
.It Bq Er EPERM
E 5
The caller is not the super-user.
I 2
D 5
.SH SEE ALSO
.IR nfsd (8)
E 5
I 5
.El
.Sh SEE ALSO
D 7
.Xr nfsd 8
E 7
I 7
.Xr nfsd 8 ,
.Xr mount_nfs 8 ,
.Xr nfsiod 8
E 7
.Sh HISTORY
The
D 6
.Nm
function call is currently under development.
E 6
I 6
.Nm nfssvc
D 10
function call is
.Ud .
E 10
I 10
function first appeared in 4.4BSD.
E 10
I 7
.Sh BUGS
The
.Nm nfssvc
system call is designed specifically for the
.Tn NFS
support daemons and as such is specific to their requirements.
It should really return values to indicate the need for authentication
support, since
.Dv ENEEDAUTH
is not really an error.
Several fields of the argument structures are assumed to be valid and
sometimes to be unchanged from a previous call, such that
.Nm nfssvc
must be used with extreme care.
E 7
E 6
E 5
E 2
E 1
