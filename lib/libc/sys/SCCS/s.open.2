h35861
s 00001/00001/00230
d D 8.2 93/11/16 12:15:34 bostic 15 14
c tyupo
e
s 00002/00002/00229
d D 8.1 93/06/04 13:18:24 bostic 14 13
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/00230
d D 6.9 92/03/29 07:30:14 bostic 13 12
c fix include files
e
s 00005/00002/00226
d D 6.8 91/11/11 15:07:38 bostic 12 11
c mention group affiliation on creation
e
s 00026/00005/00202
d D 6.7 91/05/27 22:29:54 mckusick 11 8
c document opening with locks
e
s 00000/00006/00195
d R 6.8 91/03/15 17:28:52 bostic 10 9
c ENOSPC was duplicated
e
s 00000/00006/00201
d R 6.7 91/03/15 17:27:57 bostic 9 8
c EDQUOT error was duplicated
e
s 00150/00130/00057
d D 6.6 91/03/10 23:39:40 cael 8 7
c man page macro and text revisions (-mdoc version 3)
e
s 00002/00002/00185
d D 6.5 88/08/12 11:42:26 bostic 7 6
c explicitly state what open returns on failure
e
s 00007/00008/00180
d D 6.4 86/05/14 10:24:45 karels 6 5
c add getdtablesize, delete unimplemented
e
s 00040/00001/00148
d D 6.3 85/08/26 23:30:56 mckusick 5 4
c update error messages (mostly from sun!guy)
e
s 00019/00011/00130
d D 6.2 85/05/22 18:30:33 mckusick 4 3
c update the error return codes to reflect those in 4.3BSD
e
s 00004/00001/00137
d D 6.1 85/05/09 16:06:25 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00119/00036/00019
d D 5.1 85/05/09 16:06:15 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00055/00000/00000
d D 4.1 85/05/09 16:06:06 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 8
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 8
I 8
D 14
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 14
I 14
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 14
E 8
.\"
D 8
.\"	%W% (Berkeley) %G%
E 8
I 8
.\" %sccs.include.redist.man%
E 8
.\"
D 2
.TH OPEN 2 
E 2
I 2
D 3
.TH OPEN 2 "2 July 1983"
E 3
I 3
D 8
.TH OPEN 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
open \- open for reading or writing
E 2
I 2
open \- open a file for reading or writing, or create a new file
E 2
.SH SYNOPSIS
.nf
D 2
.B open(name, mode)
.B char *name;
E 2
I 2
.ft B
#include <sys/file.h>
.PP
.ft B
open(path, flags, mode)
char *path;
int flags, mode;
E 2
.fi
.SH DESCRIPTION
.I Open
opens the file
D 2
.I name
for reading
(if
E 2
I 2
.I path
for reading and/or writing, as specified by the
.I flags
argument and returns a descriptor for that file.
E 8
I 8
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt OPEN 2
.Os BSD 4
.Sh NAME
.Nm open
.Nd open or create a file for reading or writing
.Sh SYNOPSIS
D 13
.Fd #include <sys/file.h>
E 13
I 13
.Fd #include <fcntl.h>
E 13
.Ft int
.Fn open "const char *path" "int flags" "mode_t mode"
.Sh DESCRIPTION
The file name specified by
.Fa path
is opened
for reading and/or writing as specified by the
argument
.Fa flags
and the file descriptor returned to the calling process.
E 8
The
D 8
.I flags
E 8
I 8
.Fa flags
E 8
argument may indicate the file is to be
D 8
created if it does not already exist (by specifying the
O_CREAT flag), in which case the file is created with mode
E 2
.I mode
E 8
I 8
created if it does not exist (by specifying the
.Dv O_CREAT
flag), in which case the file is created with mode
.Fa mode
E 8
D 2
is 0),
writing (if
.I mode
is 1) or for both reading and writing
(if
.I mode
is 2).
.I Name
E 2
I 2
as described in
D 8
.IR chmod (2)
E 8
I 8
.Xr chmod 2
E 8
and modified by the process' umask value (see
D 8
.IR umask (2)).
.PP
.I Path
E 2
is the address of a string of ASCII characters representing
a path name, terminated by a null character.
E 8
I 8
.Xr umask 2 ) .
.Pp
E 8
I 2
The flags specified are formed by
D 8
.IR or 'ing
E 8
I 8
D 15
.Em or Ap ing
E 15
I 15
.Em or Ns 'ing
E 15
E 8
the following values
E 2
D 8
.PP
D 2
The file is positioned at the beginning (byte 0).
The returned file descriptor must be used for subsequent calls
for other input-output functions on the file.
E 2
I 2
.RS
 O_RDONLY	open for reading only
 O_WRONLY	open for writing only
 O_RDWR	open for reading and writing
 O_NDELAY	do not block on open
 O_APPEND	append on each write
 O_CREAT	create file if it does not exist
 O_TRUNC	truncate size to 0
 O_EXCL	error if create and file exists
.RE
.PP
Opening a file with O_APPEND set causes each write on the file
to be appended to the end.  If O_TRUNC is specified and the
E 8
I 8
.Pp
.Bd -literal -offset indent -compact
O_RDONLY	open for reading only
O_WRONLY	open for writing only
O_RDWR		open for reading and writing
D 11
O_NDELAY	do not block on open
E 11
I 11
O_NONBLOCK	do not block on open
E 11
O_APPEND	append on each write
O_CREAT		create file if it does not exist
O_TRUNC		truncate size to 0
O_EXCL		error if create and file exists
I 11
O_SHLOCK	atomically obtain a shared lock
O_EXLOCK	atomically obtain an exclusive lock
E 11
.Ed
.Pp
Opening a file with
.Dv O_APPEND
set causes each write on the file
to be appended to the end.  If
.Dv O_TRUNC
is specified and the
E 8
file exists, the file is truncated to zero length.
D 8
If O_EXCL is set with O_CREAT, then if the file already
exists, the open returns an error.  This can be used to
E 8
I 8
If
.Dv O_EXCL
is set with
.Dv O_CREAT
and the file already
exists,
.Fn open
returns an error.  This may be used to
E 8
implement a simple exclusive access locking mechanism.
I 3
D 8
If O_EXCL is set and the last component of the pathname is
a symbolic link, the open will fail even if the symbolic
E 8
I 8
If
.Dv O_EXCL
is set and the last component of the pathname is
a symbolic link,
.Fn open
will fail even if the symbolic
E 8
link points to a non-existent name.
E 3
D 8
If the O_NDELAY flag is specified and the open call would result
in the process being blocked for some reason (e.g. waiting for
carrier on a dialup line), the open returns immediately. 
The first time the process attempts to perform i/o on the open
E 8
I 8
If the
D 11
.Dv O_NDELAY
E 11
I 11
.Dv O_NONBLOCK
E 11
flag is specified and the
.Fn open
call would result
in the process being blocked for some reason (e.g., waiting for
carrier on a dialup line),
.Fn open
returns immediately.
The first time the process attempts to perform I/O on the open
E 8
file it will block (not currently implemented).
D 8
.PP
D 7
Upon successful completion a non-negative integer termed a
file descriptor is returned.
E 7
I 7
If successful, \fIopen\fP returns a non-negative integer, termed a
E 8
I 8
.Pp
I 11
When opening a file, a lock with
.Xr flock 2
semantics can be obtained by setting
.Dv O_SHLOCK
for a shared lock, or
.Dv O_EXLOCK
for an exclusive lock.
If creating a file with
.Dv O_CREAT ,
the request for the lock will never fail
(provided that the underlying filesystem supports locking).
.Pp
E 11
If successful,
.Fn open
D 12
returns a non-negative integer, termed a
E 8
file descriptor.  It returns -1 on failure.
E 12
I 12
returns a non-negative integer, termed a file descriptor.
It returns -1 on failure.
E 12
E 7
The file pointer used to mark the current position within the
file is set to the beginning of the file.
I 12
.Pp
When a new file is created it is given the group of the directory
which contains it.
E 12
D 8
.PP
E 8
I 8
.Pp
E 8
The new descriptor is set to remain open across
D 8
.IR execve
E 8
I 8
.Xr execve
E 8
system calls; see
D 8
.IR close (2).
.PP
E 8
I 8
.Xr close 2
and
.Xr fcntl 2 .
.Pp
E 8
D 6
No process may have more than {OPEN_MAX} file descriptors open
simultaneously.
E 6
I 6
The system imposes a limit on the number of file descriptors
open simultaneously by one process.
D 8
.IR Getdtablesize (2)
E 8
I 8
.Xr Getdtablesize 2
E 8
returns the current system limit.
E 6
D 8
.SH "ERRORS
The named file is opened unless one or more of the
following are true:
.TP 15
D 4
[EPERM]
The pathname contains a character with the high-order bit set.
.TP 15
E 4
[ENOTDIR]
E 8
I 8
.Sh ERRORS
The named file is opened unless:
.Bl -tag -width Er
.It Bq Er ENOTDIR
E 8
A component of the path prefix is not a directory.
D 8
.TP 15
I 4
[EINVAL]
E 8
I 8
D 11
.It Bq Er EINVAL
E 8
The pathname contains a character with the high-order bit set.
E 11
D 8
.TP 15
[ENAMETOOLONG]
E 8
I 8
.It Bq Er ENAMETOOLONG
E 8
A component of a pathname exceeded 255 characters,
or an entire path name exceeded 1023 characters.
D 8
.TP 15
E 4
[ENOENT]
O_CREAT is not set and the named file does not exist.
.TP 15
I 5
[ENOENT]
E 8
I 8
.It Bq Er ENOENT
.Dv O_CREAT
is not set and the named file does not exist.
.It Bq Er ENOENT
E 8
A component of the path name that must exist does not exist.
D 8
.TP 15
E 5
[EACCES]
E 8
I 8
.It Bq Er EACCES
E 8
D 4
A component of the path prefix denies search permission.
E 4
I 4
Search permission is denied for a component of the path prefix.
E 4
D 8
.TP 15
[EACCES]
E 8
I 8
.It Bq Er EACCES
E 8
The required permissions (for reading and/or writing)
D 8
are denied for the named flag.
.TP 15
I 5
[EACCES]
O_CREAT is specified,
E 8
I 8
are denied for the given flags.
.It Bq Er EACCES
.Dv O_CREAT
is specified,
E 8
the file does not exist,
and the directory in which it is to be created
does not permit writing.
D 8
.TP 15
E 5
I 4
[ELOOP]
E 8
I 8
.It Bq Er ELOOP
E 8
Too many symbolic links were encountered in translating the pathname.
D 8
.TP 15
E 4
[EISDIR]
E 8
I 8
.It Bq Er EISDIR
E 8
The named file is a directory, and the arguments specify
D 8
it is to be opened for writting.
.TP 15
[EROFS]
E 8
I 8
it is to be opened for writing.
.It Bq Er EROFS
E 8
The named file resides on a read-only file system,
and the file is to be modified.
D 8
.TP 15
[EMFILE]
D 6
{OPEN_MAX} file descriptors are currently open.
E 6
I 6
The system limit for open file descriptors per process has already been reached.
E 6
.TP 15
I 5
[ENFILE]
E 8
I 8
.It Bq Er EMFILE
The process has already reached its limit for open file descriptors.
.It Bq Er ENFILE
E 8
The system file table is full.
D 8
.TP 15
E 5
[ENXIO]
E 8
I 8
.It Bq Er ENXIO
E 8
The named file is a character special or block
special file, and the device associated with this special file
does not exist.
I 11
.It Bq Er EINTR
The
.Nm
operation was interrupted by a signal.
.It Bq Er EOPNOTSUPP
.Dv O_SHLOCK
or
.Dv O_EXLOCK
is specified but the underlying filesystem does not support locking.
E 11
D 8
.TP 15
I 4
D 6
[ENXIO]
The O_NDELAY flag is given, and the file is a communications device
on which their is no carrier present.
.TP 15
E 6
I 5
[ENOSPC]
O_CREAT is specified,
E 8
I 8
.It Bq Er ENOSPC
.Dv O_CREAT
is specified,
E 8
the file does not exist,
and the directory in which the entry for the new file is being placed
cannot be extended because there is no space left on the file
system containing the directory.
D 8
.TP 15
[ENOSPC]
O_CREAT is specified,
E 8
I 8
.It Bq Er ENOSPC
.Dv O_CREAT
is specified,
E 8
the file does not exist,
and there are no free inodes on the file system on which the
file is being created.
D 8
.TP 15
[EDQUOT]
O_CREAT is specified,
E 8
I 8
.It Bq Er EDQUOT
.Dv O_CREAT
is specified,
E 8
the file does not exist,
D 11
and the directory in which the entry for the new fie
E 11
I 11
and the directory in which the entry for the new file
E 11
is being placed cannot be extended because the
user's quota of disk blocks on the file system
containing the directory has been exhausted.
D 8
.TP 15
[EDQUOT]
O_CREAT is specified,
E 8
I 8
.It Bq Er EDQUOT
.Dv O_CREAT
is specified,
E 8
the file does not exist,
and the user's quota of inodes on the file system on
which the file is being created has been exhausted.
D 8
.TP 15
E 5
[EIO]
E 8
I 8
.It Bq Er EIO
E 8
An I/O error occurred while making the directory entry or
D 8
allocating the inode for O_CREAT.
.TP 15
E 4
[ETXTBSY]
E 8
I 8
allocating the inode for
.Dv O_CREAT .
.It Bq Er ETXTBSY
E 8
The file is a pure procedure (shared text) file that is being
D 8
executed and the \fIopen\fP call requests write access.
.TP 15
[EFAULT]
.I Path
E 8
I 8
executed and the
.Fn open
call requests write access.
.It Bq Er EFAULT
.Fa Path
E 8
points outside the process's allocated address space.
D 8
.TP 15
D 4
[ELOOP]
Too many symbolic links were encountered in translating the pathname.
.TP 15
E 4
[EEXIST]
D 5
O_EXCL was specified and the file exists.
E 5
I 5
O_CREAT and O_EXCL were specified and the file exists.
E 5
D 4
.TP 15
[ENXIO]
The O_NDELAY flag is given, and the file is a communications device
on which their is no carrier present.
E 4
.TP 15
[EOPNOTSUPP]
E 8
I 8
.It Bq Er EEXIST
.Dv O_CREAT
and
.Dv O_EXCL
were specified and the file exists.
.It Bq Er EOPNOTSUPP
E 8
An attempt was made to open a socket (not currently implemented).
E 2
D 8
.SH "SEE ALSO"
D 2
creat(2), read(2), write(2), dup(2), close(2)
.SH DIAGNOSTICS
The value \-1 is returned
if the file does not exist,
if one of the necessary directories
does not exist or is unreadable, if the file is not
readable (resp. writable), or if too many files are open.
.SH "ASSEMBLER (PDP-11)"
(open = 5.)
.br
.B sys open; name; mode
.br
(file descriptor in r0)
.SH BUGS
It should be possible to optionally open files for writing with exclusive use,
and to optionally call
.I open
without the possibility of hanging waiting for carrier on communication lines.
E 2
I 2
D 6
chmod(2), close(2), dup(2), lseek(2), read(2), write(2), umask(2)
E 6
I 6
chmod(2), close(2), dup(2), getdtablesize(2),
lseek(2), read(2), write(2), umask(2)
E 8
I 8
.El
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr close 2 ,
.Xr dup 2 ,
.Xr getdtablesize 2 ,
.Xr lseek 2 ,
.Xr read 2 ,
.Xr write 2 ,
.Xr umask 2
.Sh HISTORY
An
.Nm
function call appeared in Version 6 AT&T UNIX.
E 8
E 6
E 2
E 1
