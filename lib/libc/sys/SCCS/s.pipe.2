h21783
s 00002/00002/00087
d D 8.1 93/06/04 13:18:31 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00081/00072/00008
d D 6.3 91/03/10 23:39:44 cael 6 4
c man page macro and text revisions (-mdoc version 3)
e
s 00004/00001/00079
d R 6.3 86/06/01 00:43:10 mis 5 4
c added ENOBUFS as a possible error.
e
s 00003/00000/00077
d D 6.2 85/08/26 23:31:51 mckusick 4 3
c update error messages (mostly from sun!guy)
e
s 00001/00001/00076
d D 6.1 85/05/09 16:41:15 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00026/00019/00051
d D 5.1 85/05/09 16:41:07 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00070/00000/00000
d D 4.1 85/05/09 16:40:57 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 7
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
E 6
.\"
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\" %sccs.include.redist.man%
E 6
.\"
D 2
.TH PIPE 2 
E 2
I 2
D 3
.TH PIPE 2 "12 February 1983"
E 3
I 3
D 6
.TH PIPE 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
pipe \- create an interprocess channel
E 2
I 2
pipe \- create an interprocess communication channel
E 2
.SH SYNOPSIS
.nf
D 2
.B pipe(fildes)
.B int fildes[2];
E 2
I 2
.ft B
pipe(fildes)
int fildes[2];
E 2
.fi
I 2
.ft R
E 2
.SH DESCRIPTION
E 6
I 6
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt PIPE 2
.Os BSD 4
.Sh NAME
.Nm pipe
.Nd create descriptor pair for interprocess communication
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft int
.Fn pipe "int *fildes"
.Sh DESCRIPTION
E 6
The
D 6
.I pipe
system call
creates an I/O mechanism called a pipe.
The file descriptors returned can
be used in read and write operations.
When the pipe is written using the descriptor
.IR fildes [1]
up to 4096 bytes of data are buffered
before the writing process is suspended.
A read using the descriptor
.IR fildes [0]
will pick up the data.
.PP
It is assumed that after the
pipe has been set up,
two (or more)
cooperating processes
(created by subsequent
.I fork
calls)
will pass data through the
pipe with
.I read
and
.I write
calls.
.PP
D 2
The Shell has a syntax
E 2
I 2
The shell has a syntax
E 2
to set up a linear array of processes
connected by pipes.
.PP
Read calls on an empty
pipe (no buffered data) with only one end
(all write file descriptors closed)
returns an end-of-file.
D 2
.SH "SEE ALSO"
sh(1), read(2), write(2), fork(2)
.SH DIAGNOSTICS
The function value zero is returned if the
pipe was created; \-1 if
too many files are already open.
E 2
I 2
.PP
E 6
I 6
.Fn pipe
function
creates a
.Em pipe ,
which is an object allowing
unidirectional data flow,
and allocates a pair of file descriptors.
The first descriptor connects to the
.Em read end
of the pipe,
and the second connects to the
.Em write end  ,
so that data written to
.Fa fildes[1]
appears on (i.e., can be read from)
.Fa fildes[0] .
This allows the output of one program to be
sent
to another program:
the source's standard output is set up to be
the write end of the pipe,
and the sink's standard input is set up to be
the read end of the pipe.
The pipe itself persists until all its associated descriptors are
closed.
.Pp
A pipe whose read or write end has been closed is considered
.Em widowed .
Writing on such a pipe causes the writing process to receive
a
.Dv SIGPIPE
signal.
Widowing a pipe is the only way to deliver end-of-file to a reader:
after the reader consumes any buffered data, reading a widowed pipe
returns a zero count.
.Pp
E 6
Pipes are really a special case of the 
D 6
.IR socketpair (2)
E 6
I 6
.Xr socketpair 2
E 6
call and, in fact, are implemented as such in the system.
D 6
.PP
E 2
A signal is generated if a write on a pipe with only one end is attempted.
I 2
.SH "RETURN VALUE
The function value zero is returned if the
pipe was created; \-1 if an error occurred.
.SH ERRORS
The \fIpipe\fP call will fail if:
.TP 15
[EMFILE]
E 6
I 6
.Sh RETURN VALUES
On successful creation of the pipe, zero is returned. Otherwise, 
a value of -1 is returned and the variable
.Va errno
set to indicate the
error.
.Sh ERRORS
The
.Fn pipe
call will fail if:
.Bl -tag -width [EMFILE]
.It Bq Er EMFILE
E 6
Too many descriptors are active.
D 6
.TP 15
I 4
[ENFILE]
E 6
I 6
.It Bq Er ENFILE
E 6
The system file table is full.
D 6
.TP 15
E 4
[EFAULT]
The \fIfildes\fP buffer is in an invalid area of the process's address
E 6
I 6
.It Bq Er EFAULT
The
.Fa fildes
buffer is in an invalid area of the process's address
E 6
space.
D 6
.SH "SEE ALSO"
sh(1), read(2), write(2), fork(2), socketpair(2)
E 2
.SH BUGS
Should more than 4096 bytes be necessary in any
pipe among a loop of processes, deadlock will occur.
E 6
I 6
.El
.Sh SEE ALSO
.Xr sh 1 ,
.Xr read 2 ,
.Xr write 2 ,
.Xr fork 2 ,
.Xr socketpair 2
.Sh HISTORY
A
.Nm
function call appeared in Version 6 AT&T UNIX.
E 6
D 2
.SH "ASSEMBLER (PDP-11)"
(pipe = 42.)
.br
.B sys pipe
.br
(read file descriptor in r0)
.br
(write file descriptor in r1)
E 2
E 1
