h44900
s 00001/00001/00162
d D 8.4 94/02/26 06:41:59 bostic 15 14
c second argument to readv is a const
e
s 00001/00001/00162
d D 8.3 94/02/21 16:36:56 bostic 14 13
c make readv and writev return ssize_t's
e
s 00004/00003/00159
d D 8.2 94/02/21 09:02:09 bostic 13 12
c change iov_len to be a size_t, not an int
e
s 00002/00002/00160
d D 8.1 93/06/04 13:18:43 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/00161
d D 6.9 92/05/04 15:35:10 bostic 11 10
c EWOULDBLOCK -> EAGAIN (POSIX)
e
s 00003/00003/00159
d D 6.8 92/04/29 09:16:17 bostic 10 9
c read and write take void *'s, iovec's contain void *'s
e
s 00107/00099/00055
d D 6.7 91/03/10 23:39:51 cael 9 8
c man page macro and text revisions (-mdoc version 3)
e
s 00003/00003/00151
d D 6.6 86/05/23 09:57:37 kjd 8 7
c clean up for 4.3
e
s 00007/00003/00147
d D 6.5 86/05/14 11:11:15 karels 7 6
c nonblocking I/O, fcntl, select
e
s 00007/00002/00143
d D 6.4 86/02/24 03:33:15 lepreau 6 5
c lseek doesn't mind negative offsets, read & write do;
c bring write.2 up to read.2 stds.
e
s 00006/00000/00139
d D 6.3 85/08/26 23:31:13 mckusick 5 4
c update error messages (mostly from sun!guy)
e
s 00001/00001/00138
d D 6.2 85/06/30 16:42:53 sechrest 4 3
c improved english
e
s 00002/00002/00137
d D 6.1 85/05/09 16:07:44 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00120/00062/00019
d D 5.1 85/05/09 16:07:35 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00081/00000/00000
d D 4.1 85/05/09 16:07:27 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 9
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 9
I 9
D 12
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 12
I 12
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 12
E 9
.\"
D 9
.\"	%W% (Berkeley) %G%
E 9
I 9
.\" %sccs.include.redist.man%
E 9
.\"
D 2
.TH READ 2 
E 2
I 2
D 3
.TH READ 2 "27 July 1983"
E 3
I 3
D 9
.TH READ 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
read \- read from file
E 2
I 2
read, readv \- read input
E 2
.SH SYNOPSIS
.nf
D 2
.B read(fildes, buffer, nbytes)
.B char *buffer;
E 2
I 2
.ft B
cc = read(d, buf, nbytes)
int cc, d;
char *buf;
int nbytes;
.PP
.ft B
#include <sys/types.h>
#include <sys/uio.h>
.PP
.ft B
cc = readv(d, iov, iovcnt)
int cc, d;
struct iovec *iov;
int iovcnt;
E 2
.fi
.SH DESCRIPTION
D 2
A file descriptor is a word
returned from a successful
.I "open, creat, dup,"
or
.I pipe
call.
.I Buffer
is the location of
E 2
I 2
.I Read
E 9
I 9
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt READ 2
.Os BSD 4
.Sh NAME
.Nm read ,
.Nm readv
.Nd read input
.Sh SYNOPSIS
D 13
.Fd #include <unistd.h>
E 13
.Fd #include <sys/types.h>
.Fd #include <sys/uio.h>
I 13
.Fd #include <unistd.h>
E 13
.Ft ssize_t
D 10
.Fn read "int d" "char *buf" "size_t nbytes"
E 10
I 10
.Fn read "int d" "void *buf" "size_t nbytes"
E 10
D 14
.Ft int
E 14
I 14
.Ft ssize_t
E 14
D 15
.Fn readv "int d" "struct iovec *iov" "int iovcnt"
E 15
I 15
.Fn readv "int d" "const struct iovec *iov" "int iovcnt"
E 15
.Sh DESCRIPTION
.Fn Read
E 9
attempts to read
E 2
D 9
.I nbytes
E 9
I 9
.Fa nbytes
E 9
D 2
contiguous
bytes into which the input will be placed.
It is not guaranteed
that all
.I nbytes
bytes will be read; for example
if the file refers to a typewriter at most one line
will be returned.
In any event the number of characters read is returned.
E 2
I 2
of data from the object referenced by the descriptor
D 9
.I d
E 9
I 9
.Fa d
E 9
into the buffer pointed to by
D 9
.IR buf .
.I Readv
E 9
I 9
.Fa buf .
.Fn Readv
E 9
performs the same action, but scatters the input data
into the 
D 9
.I iovcnt
E 9
I 9
.Fa iovcnt
E 9
buffers specified by the members of the
D 6
.I iovec
E 6
I 6
D 9
.I iov
E 9
I 9
.Fa iov
E 9
E 6
array: iov[0], iov[1], ..., iov[iovcnt\|\-\|1].
E 2
D 9
.PP
E 9
I 9
.Pp
E 9
D 2
If the returned value is 0, then
end-of-file has been reached.
E 2
I 2
For 
D 9
.IR readv ,
E 9
I 9
.Fn readv ,
E 9
the 
D 9
.I iovec
E 9
I 9
.Fa iovec
E 9
D 13
structure is defined as
E 13
I 13
structure is defined as:
.Pp
E 13
E 2
D 9
.PP
D 2
Unless the reader is ignoring or holding SIGTTIN signals,
reads from the control typewriter while not in its process group
cause a SIGTTIN signal to be sent to the reader's process group;
in the former case an end-of-file is returned.
E 2
I 2
.nf
.RS
.DT
E 9
I 9
.Bd -literal -offset indent -compact
E 9
struct iovec {
D 10
	caddr_t	iov_base;
	int	iov_len;
E 10
I 10
	void *iov_base;
D 13
	int iov_len;
E 13
I 13
	size_t iov_len;
E 13
E 10
};
D 9
.RE
.fi
E 2
.PP
E 9
I 9
.Ed
.Pp
E 9
D 2
.SH "SEE ALSO"
open(2), creat(2), dup(2), pipe(2), vread(2)
.SH DIAGNOSTICS
As mentioned,
0 is returned when the end of the file has been reached.
If the read was otherwise unsuccessful
the return value is \-1.
Many conditions
can generate an error:
physical I/O errors, bad buffer address,
preposterous
.I nbytes,
file descriptor not that of
an input file.
.SH "ASSEMBLER (PDP-11)"
(read = 3.)
.br
(file descriptor in r0)
.br
.B sys read; buffer; nbytes
.br
(byte count in r0)
.SH BUGS
It should be possible to call
E 2
I 2
Each 
D 9
.I iovec
E 9
I 9
.Fa iovec
E 9
entry specifies the base address and length of an area
in memory where data should be placed. 
D 9
.I Readv
E 9
I 9
.Fn Readv
E 9
will always fill an area completely before proceeding
to the next.
D 9
.PP
E 9
I 9
.Pp
E 9
On objects capable of seeking, the
E 2
D 9
.I read
E 9
I 9
.Fn read
E 9
D 2
and have it return immediately without blocking if there is no input available.
As a single special case, this is currently done on control terminals
when the reading process has requested SIGTINT signals when input arrives
(see
.IR tty (4)).
E 2
I 2
starts at a position
given by the pointer associated with
D 8
.IR d ,
see
.IR lseek (2).
E 8
I 8
D 9
.IR d 
E 9
I 9
.Fa d
E 9
(see
D 9
.IR lseek (2)).
E 9
I 9
.Xr lseek 2 ) .
E 9
E 8
Upon return from
D 9
.IR read ,
E 9
I 9
.Fn read ,
E 9
the pointer is incremented by the number of bytes actually read.
E 2
D 9
.PP
E 9
I 9
.Pp
E 9
D 2
Processes which have been orphaned by their parents
and have been inherited by
.IR init (8)
never receive SIGTTIN signals.
Instead
E 2
I 2
Objects that are not capable of seeking always read from the current
D 6
position.  The value of the pointer associated with such a 
E 6
I 6
position.  The value of the pointer associated with such an
E 6
object is undefined.
D 9
.PP
E 9
I 9
.Pp
E 9
Upon successful completion,
E 2
D 9
.I read
E 9
I 9
.Fn read
E 9
D 2
returns with an end-of-file indication.
E 2
I 2
and
D 9
.I readv
E 9
I 9
.Fn readv
E 9
return the number of bytes actually read and placed in the buffer.
The system guarantees to read the number of bytes requested if
D 4
the descriptor references a file which has that many bytes left
E 4
I 4
D 7
the descriptor references a file that has that many bytes left
E 4
before the end-of-file, but in no other cases.
E 7
I 7
the descriptor references a normal file that has that many bytes left
before the end-of-file, but in no other case.
E 7
D 9
.PP
If the returned value is 0, then
end-of-file has been reached.
.SH "RETURN VALUE
E 9
I 9
.Pp
.Sh RETURN VALUES
E 9
If successful, the
D 9
number of bytes actually read is returned.
Otherwise, a \-1 is returned and the global variable
.I errno
E 9
I 9
number of bytes actually read is returned. Upon reading end-of-file,
zero is returned.
Otherwise, a -1 is returned and the global variable
.Va errno
E 9
is set to indicate the error.
D 9
.SH "ERRORS
.I Read
E 9
I 9
.Sh ERRORS
.Fn Read
E 9
and
D 9
.I readv
will fail if one or more of the following are true:
.TP 15
[EBADF]
D 3
\fIFildes\fP is not a valid file descriptor open for reading.
E 3
I 3
\fID\fP is not a valid file or socket descriptor open for reading.
E 3
.TP 15
[EFAULT]
\fIBuf\fP points outside the allocated address space.
.TP 15
I 5
[EIO]
E 9
I 9
.Fn readv
will succeed unless:
.Bl -tag -width Er
.It Bq Er EBADF
.Fa D
is not a valid file or socket descriptor open for reading.
.It Bq Er EFAULT
.Fa Buf
points outside the allocated address space.
.It Bq Er EIO
E 9
An I/O error occurred while reading from the file system.
D 9
.TP 15
E 5
[EINTR]
E 9
I 9
.It Bq Er EINTR
E 9
A read from a slow device was interrupted before
any data arrived by the delivery of a signal.
I 6
D 9
.TP 15
[EINVAL]
E 9
I 9
.It Bq Er EINVAL
E 9
The pointer associated with
D 9
.I d
E 9
I 9
.Fa d
E 9
was negative.
I 7
D 9
.TP 15
[EWOULDBLOCK]
E 9
I 9
D 11
.It Bq Er EWOULDBLOCK
E 11
I 11
.It Bq Er EAGAIN
E 11
E 9
The file was marked for non-blocking I/O,
and no data were ready to be read.
E 7
E 6
D 9
.PP
E 9
I 9
.El
.Pp
E 9
In addition, 
D 9
.I readv
E 9
I 9
.Fn readv
E 9
may return one of the following errors:
D 9
.TP 15
[EINVAL]
.I Iovcnt
E 9
I 9
.Bl -tag -width Er
.It Bq Er EINVAL
.Fa Iovcnt
E 9
was less than or equal to 0, or greater than 16.
D 9
.TP 15
[EINVAL]
E 9
I 9
.It Bq Er EINVAL
E 9
One of the
D 9
.I iov_len
E 9
I 9
.Fa iov_len
E 9
values in the
D 9
.I iov
E 9
I 9
.Fa iov
E 9
array was negative.
D 9
.TP 15
[EINVAL]
E 9
I 9
.It Bq Er EINVAL
E 9
The sum of the
D 9
.I iov_len
E 9
I 9
.Fa iov_len
E 9
values in the
D 9
.I iov
E 9
I 9
.Fa iov
E 9
array overflowed a 32-bit integer.
I 5
D 9
.TP 15
[EFAULT]
Part of the \fIiov\fP points outside the process's allocated address space.
E 5
.SH "SEE ALSO"
D 7
dup(2), open(2), pipe(2), socket(2), socketpair(2)
E 7
I 7
dup(2), fcntl(2), open(2), pipe(2), select(2), socket(2), socketpair(2)
E 9
I 9
.It Bq Er EFAULT
Part of the
.Fa iov
points outside the process's allocated address space.
.El
.Sh SEE ALSO
.Xr dup 2 ,
.Xr fcntl 2 ,
.Xr open 2 ,
.Xr pipe 2 ,
.Xr select 2 ,
.Xr socket 2 ,
.Xr socketpair 2
.Sh STANDARDS
.Fn Read
is expected to conform to IEEE Std 1003.1-1988
.Pq Dq Tn POSIX .
.Sh HISTORY
The
.Fn readv
function call
appeared in
.Bx 4.2 .
A
.Nm read
function call
appeared in
Version 6 AT&T UNIX.
E 9
E 7
E 2
E 1
