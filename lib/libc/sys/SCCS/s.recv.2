h09129
s 00005/00005/00232
d D 8.3 94/02/21 09:36:38 bostic 16 15
c change recv, recvfrom, and recvmsg to return a ssize_t
c change recv, recvfrom to take a size_t as a length
e
s 00001/00001/00236
d D 8.2 93/12/11 23:08:26 mckusick 15 14
c copyediting for Usenix manuals
e
s 00002/00002/00235
d D 8.1 93/06/04 13:18:55 bostic 14 13
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00003/00234
d D 6.12 92/05/04 15:35:11 bostic 13 12
c EWOULDBLOCK -> EAGAIN (POSIX)
e
s 00002/00002/00235
d D 6.11 91/05/01 14:37:08 sellgren 12 11
c char *'s to void *'s (to match prototypes)
e
s 00064/00031/00173
d D 6.10 91/04/13 16:22:22 karels 11 10
c update: add current options and cross-reference
e
s 00135/00133/00069
d D 6.9 91/03/10 23:40:02 cael 10 9
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00001/00201
d D 6.8 90/05/30 12:24:28 sklower 9 8
c fix copyright and condition notice for new sccs include
e
s 00069/00048/00133
d D 6.7 90/05/30 12:22:18 sklower 8 7
c access rights superceeded by control data; document csmghdr;
c flags now value returned; discuss usual format of control data.
e
s 00014/00003/00167
d D 6.6 89/02/14 17:52:49 bostic 7 6
c add Berkeley specific copyright notice
e
s 00003/00000/00167
d D 6.5 87/07/21 13:41:07 bostic 6 5
c msg_accrights should be NULL if not used
e
s 00001/00001/00166
d D 6.4 87/07/21 09:55:03 karels 5 4
c change misleading array notation to pointers on *msg
e
s 00002/00002/00165
d D 6.3 86/05/23 09:58:56 kjd 4 3
c clean up for 4.3
e
s 00008/00005/00159
d D 6.2 86/05/14 11:11:46 karels 3 2
c update, describe rights, add errnos
c 
e
s 00004/00004/00160
d D 6.1 85/05/15 11:58:17 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00164/00000/00000
d D 5.1 85/05/15 11:58:10 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
D 8
.\" Copyright (c) 1983 The Regents of the University of California.
E 8
I 8
D 10
.\" Copyright (c) 1983, 1990 The Regents of the University of California.
E 10
I 10
D 14
.\" Copyright (c) 1983, 1990, 1991 The Regents of the University of California.
E 10
E 8
.\" All rights reserved.
E 14
I 14
.\" Copyright (c) 1983, 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 14
.\"
D 8
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 8
I 8
D 9
.\" %sccs.include.redist.c%
E 9
I 9
.\" %sccs.include.redist.man%
E 9
E 8
E 7
.\"
D 10
.\"	%W% (Berkeley) %G%
E 10
I 10
.\"     %W% (Berkeley) %G%
E 10
.\"
D 2
.TH RECV 2 "7 July 1983"
E 2
I 2
D 10
.TH RECV 2 "%Q%"
E 2
.UC 5
.SH NAME
recv, recvfrom, recvmsg \- receive a message from a socket
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <sys/socket.h>
.PP
.ft B
cc = recv(s, buf, len, flags)
int cc, s;
char *buf;
int len, flags;
.PP
.ft B
cc = recvfrom(s, buf, len, flags, from, fromlen)
int cc, s;
char *buf;
int len, flags;
struct sockaddr *from;
int *fromlen;
.PP
.ft B
cc = recvmsg(s, msg, flags)
int cc, s;
D 5
struct msghdr msg[];
E 5
I 5
struct msghdr *msg;
E 5
int flags;
.ft R
.SH DESCRIPTION
D 8
.IR Recv ,
.IR recvfrom ,
E 8
I 8
.IR Recvfrom ,
E 10
I 10
.Dd %Q%
.Dt RECV 2
D 11
.Os BSD 4.2
E 11
I 11
.Os BSD 4.3r
E 11
.Sh NAME
.Nm recv ,
.Nm recvfrom ,
.Nm recvmsg
.Nd receive a message from a socket
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/socket.h>
D 16
.Ft int
D 12
.Fn recv "int s" "char *buf" "int len" "int flags"
E 12
I 12
.Fn recv "int s" "void *buf" "int len" "int flags"
E 12
.Ft int
D 12
.Fn recvfrom "int s" "char *buf" "int len" "int flags" "struct sockaddr *from" "int *fromlen"
E 12
I 12
.Fn recvfrom "int s" "void *buf" "int len" "int flags" "struct sockaddr *from" "int *fromlen"
E 12
.Ft int
E 16
I 16
.Ft ssize_t
.Fn recv "int s" "void *buf" "size_t len" "int flags"
.Ft ssize_t
.Fn recvfrom "int s" "void *buf" "size_t len" "int flags" "struct sockaddr *from" "int *fromlen"
.Ft ssize_t
E 16
.Fn recvmsg "int s" "struct msghdr *msg" "int flags"
.Sh DESCRIPTION
.Fn Recvfrom
E 10
E 8
and
D 10
.IR recvmsg
E 10
I 10
.Fn recvmsg
E 10
D 8
are used to receive messages from a socket.
.PP
The 
.I recv
D 3
call may be used only on a 
E 3
I 3
call is normally used only on a 
E 3
.I connected
socket (see
.IR connect (2)),
while 
.I recvfrom
and 
.I recvmsg
may be used to receive data on a socket whether
E 8
I 8
are used to receive messages from a socket,
D 11
and may be used to receive data on a socket whether
E 8
it is in a connected state or not.
E 11
I 11
and may be used to receive data on a socket whether or not
it is connection-oriented.
E 11
D 10
.PP
E 10
I 10
.Pp
E 10
If
D 10
.I from
is non-zero, the source address of the message is filled in.
.I Fromlen
E 10
I 10
.Fa from
D 11
is non-nil, the source address of the message is filled in.
E 11
I 11
is non-nil, and the socket is not connection-oriented,
the source address of the message is filled in.
E 11
.Fa Fromlen
E 10
is a value-result parameter, initialized to the size of
the buffer associated with
D 10
.IR from ,
E 10
I 10
.Fa from ,
E 10
and modified on return to indicate the actual size of the
address stored there.
I 8
D 10
.PP
E 10
I 10
.Pp
E 10
The 
D 10
.I recv
E 10
I 10
.Fn recv
E 10
call is normally used only on a 
D 10
.I connected
E 10
I 10
.Em connected
E 10
socket (see
D 10
.IR connect (2))
and is identitical to
.I recfrom
with a zero-valued
.I fromlen
E 10
I 10
.Xr connect 2 )
and is identical to
.Fn recvfrom
with a nil
.Fa from
E 10
parameter.
As it is redundant, it may not be supported in future releases.
D 10
.PP
E 8
The length of the message is returned in
.IR cc .
E 10
I 10
.Pp
All three routines return the length of the message on successful
completion.
E 10
If a message is too long to fit in the supplied buffer,
excess bytes may be discarded depending on the type of socket
D 4
the message is received from; see
.IR socket (2).
E 4
I 4
the message is received from (see
D 10
.IR socket (2)).
E 4
.PP
E 10
I 10
.Xr socket 2 ) .
.Pp
E 10
If no messages are available at the socket, the
receive call waits for a message to arrive, unless
the socket is nonblocking (see
D 10
.IR ioctl (2))
in which case a
.I cc
of \-1 is returned with the external variable errno
set to EWOULDBLOCK.
.PP
E 10
I 10
D 11
.Xr ioctl 2 )
E 11
I 11
.Xr fcntl 2 )
E 11
in which case the value
-1 is returned and the external variable
.Va errno
set to
D 13
.Er EWOULDBLOCK.
E 13
I 13
.Er EAGAIN .
E 13
I 11
The receive calls normally return any data available,
up to the requested amount,
rather than waiting for receipt of the full amount requested;
this behavior is affected by the socket-level options
.Dv SO_RCVLOWAT
and
.Dv SO_RCVTIMEO
described in
.Xr getsockopt 2 .
E 11
.Pp
E 10
The
D 10
.IR select (2)
E 10
I 10
.Xr select 2
E 10
D 11
call may be used to determine when more data arrives.
E 11
I 11
call may be used to determine when more data arrive.
E 11
D 10
.PP
E 10
I 10
.Pp
E 10
The
D 10
.I flags
E 10
I 10
.Fa flags
E 10
D 3
argument to a send call is formed by 
E 3
I 3
argument to a recv call is formed by 
E 3
D 10
.IR or 'ing
one or more of the values,
.PP
.nf
.RS
D 3
.DT
E 3
I 3
.ta \w'#define\ \ 'u +\w'MSG_DONTROUTE\ \ \ 'u +\w'0x\0\0\0\ \ 'u
E 3
D 2
#define	MSG_PEEK	0x1	/* peek at incoming message */
#define	MSG_OOB	0x2	/* process out-of-band data */
E 2
I 2
#define	MSG_OOB	0x1	/* process out-of-band data */
E 10
I 10
.Em or Ap ing
one or more of the values:
D 11
.Bd -literal
#define	MSG_OOB		0x1	/* process out-of-band data */
E 10
#define	MSG_PEEK	0x2	/* peek at incoming message */
I 8
#define	MSG_DONTROUTE	0x4	/* send without using routing tables */
D 10
#define	MSG_EOR	0x8	/* data completes record */
E 10
I 10
#define	MSG_EOR		0x8	/* data completes record */
E 10
#define	MSG_TRUNC	0x10	/* data discarded before delivery */
#define	MSG_CTRUNC	0x20	/* control data lost before delivery */
E 8
E 2
D 10
.RE
.fi
.PP
E 10
I 10
.Ed
E 11
I 11
.Bl -column MSG_WAITALL -offset indent
.It Dv MSG_OOB Ta process out-of-band data
.It Dv MSG_PEEK Ta peek at incoming message
.It Dv MSG_WAITALL Ta wait for full request or error
.El
The
.Dv MSG_OOB
flag requests receipt of out-of-band data
that would not be received in the normal data stream.
Some protocols place expedited data at the head of the normal
data queue, and thus this flag cannot be used with such protocols.
The MSG_PEEK flag causes the receive operation to return data
from the beginning of the receive queue without removing that
data from the queue.
Thus, a subsequent receive call will return the same data.
The MSG_WAITALL flag requests that the operation block until
the full request is satisfied.
However, the call may still return less data than requested
if a signal is caught, an error or disconnect occurs,
or the next data to be received is of a different type than that returned.
E 11
.Pp
E 10
The
D 10
.I recvmsg
E 10
I 10
.Fn recvmsg
E 10
call uses a 
D 10
.I msghdr
E 10
I 10
.Fa msghdr
E 10
structure to minimize the number of directly supplied parameters.
This structure has the following form, as defined in
D 10
.IR <sys/socket.h> :
.PP
.nf
D 8
.RS
.DT
E 8
I 8
.ta \w'struct  'u +\w'caddr_t   'u +\w'msg_controllen    'u
E 10
I 10
.Ao Pa sys/socket.h Ac :
.Pp
.Bd -literal
E 10
E 8
struct msghdr {
D 8
	caddr_t	msg_name;		/* optional address */
	int	msg_namelen;		/* size of address */
D 2
	struct	iov *msg_iov;		/* scatter/gather array */
E 2
I 2
	struct	iovec *msg_iov;		/* scatter/gather array */
E 2
	int	msg_iovlen;		/* # elements in msg_iov */
	caddr_t	msg_accrights;		/* access rights sent/received */
	int	msg_accrightslen;
E 8
I 8
	caddr_t	msg_name;	/* optional address */
	u_int	msg_namelen;	/* size of address */
	struct	iovec *msg_iov;	/* scatter/gather array */
	u_int	msg_iovlen;	/* # elements in msg_iov */
	caddr_t	msg_control;	/* ancillary data, see below */
D 10
	u_int	msg_controllen;	/* ancillary data buffer len */
	int	msg_flags;		/* flags on received message */
E 10
I 10
	u_int	msg_controllen; /* ancillary data buffer len */
	int	msg_flags;	/* flags on received message */
E 10
E 8
};
D 8
.RE
E 8
D 10
.fi
.PP
E 10
I 10
.Ed
.Pp
E 10
Here
D 10
.I msg_name
E 10
I 10
.Fa msg_name
E 10
and
D 10
.I msg_namelen
E 10
I 10
.Fa msg_namelen
E 10
specify the destination address if the socket is unconnected;
D 10
.I msg_name
E 10
I 10
.Fa msg_name
E 10
may be given as a null pointer if no names are desired or required.
D 8
The 
E 8
I 8
D 10
The
E 8
.I msg_iov
E 10
I 10
.Fa Msg_iov
E 10
and
D 10
.I msg_iovlen
describe the scatter gather locations, as described in
.IR read (2).
D 3
Access rights to be sent along with the message are specified
E 3
I 3
D 8
A buffer to receive any access rights sent along with the message is specified
E 3
in 
.IR msg_accrights ,
E 8
I 8
.IR msg_control ,
E 10
I 10
.Fa msg_iovlen
describe scatter gather locations, as discussed in
.Xr read 2 .
.Fa Msg_control ,
E 10
E 8
which has length
D 8
.IR msg_accrightslen .
I 3
Access rights are currently limited to file descriptors,
which each occupy the size of an
.BR int .
I 6
If access rights are not being transferred, the 
.I msg_accrights
field should be set to NULL.
E 6
E 3
.SH "RETURN VALUE
E 8
I 8
D 10
.IR msg_controllen .
This is a buffer for other protocol control related messages
E 10
I 10
.Fa msg_controllen ,
points to a buffer for other protocol control related messages
E 10
or other miscellaneous ancillary data.
The messages are of the form:
D 10
.PP
.nf
.ta \w'struct  'u +\w'u_char   'u +\w'msg_controllen    'u
E 10
I 10
.Bd -literal
E 10
struct cmsghdr {
	u_int	cmsg_len;	/* data byte count, including hdr */
	int	cmsg_level;	/* originating protocol */
	int	cmsg_type;	/* protocol-specific type */
/* followed by
	u_char	cmsg_data[]; */
};
D 10
.fi
.RE
E 10
I 10
.Ed
E 10
As an example, one could use this to learn of changes in the data-stream
in XNS/SPP, or in ISO, to obtain user-connection-request data by requesting
D 11
a recvmsg with no uio provided immediately after an
D 10
.IR accept (),
E 10
I 10
.Fn accept ,
E 10
thought of here in the sense of get-next-connection-request without
an implicit connection confirmation.
E 11
I 11
a recvmsg with no data buffer provided immediately after an
.Fn accept
call.
E 11
D 10
.PP
Open file descriptors are now passed as ancillary data for AF_UNIX
domain sockets, with cmsg_level being SOL_SOCKET and  cmsg_type being
SCM_RIGHTS.
.PP
.I msg_flags
is set on return in a way that may include some of the same values specified
for the flags parameter to a recv system call.
The returned values MSG_EOR indicates end-of-record, MSG_TRUNC indicates that
some trailing datagram data was discarded, MSG_CTRUNC indicates that some
control data was discarded due to lack of space.
MSG_OOB is returned to indicate that expedited data was received.
.PP
.SH "RETURN VALUE"
E 8
These calls return the number of bytes received, or \-1
E 10
I 10
.Pp
Open file descriptors are now passed as ancillary data for
.Dv AF_UNIX
domain sockets, with
.Fa cmsg_level
D 11
being
E 11
I 11
set to
E 11
.Dv SOL_SOCKET
and
.Fa cmsg_type
D 11
being
E 11
I 11
set to
E 11
.Dv SCM_RIGHTS .
.Pp
D 11
.Fa Msg_flags
is set on return according to the message received.
E 11
I 11
The
.Fa msg_flags
field is set on return according to the message received.
E 11
.Dv MSG_EOR
D 11
indicates end-of-record,
E 11
I 11
indicates end-of-record;
the data returned completed a record (generally used with sockets of type
.Dv SOCK_SEQPACKET ) .
E 11
.Dv MSG_TRUNC
indicates that
D 11
some trailing datagram data was discarded,
E 11
I 11
the trailing portion of a datagram was discarded because the datagram
was larger than the buffer supplied.
E 11
.Dv MSG_CTRUNC
indicates that some
D 11
control data was discarded due to lack of space,
E 11
I 11
control data were discarded due to lack of space in the buffer
for ancillary data.
E 11
.Dv MSG_OOB
D 11
is returned to indicate that expedited data was received.
E 11
I 11
is returned to indicate that expedited or out-of-band data were received.
E 11
.Pp
.Sh RETURN VALUES
These calls return the number of bytes received, or -1
E 10
if an error occurred.
D 10
.SH ERRORS
E 10
I 10
.Sh ERRORS
E 10
The calls fail if:
D 10
.TP 20
[EBADF]
The argument \fIs\fP is an invalid descriptor.
.TP 20
[ENOTSOCK]
The argument \fIs\fP is not a socket.
.TP 20
[EWOULDBLOCK]
E 10
I 10
D 13
.Bl -tag -width EWOULDBLOCKAA
E 13
I 13
.Bl -tag -width ENOTCONNAA
E 13
.It Bq Er EBADF
The argument
.Fa s
is an invalid descriptor.
I 11
.It Bq Er ENOTCONN
D 15
The socket is assoicated with a connection-oriented protocol
E 15
I 15
The socket is associated with a connection-oriented protocol
E 15
and has not been connected (see
.Xr connect 2
and
.Xr accept 2 ).
E 11
.It Bq Er ENOTSOCK
The argument
.Fa s
D 11
is not a socket.
E 11
I 11
does not refer to a socket.
E 11
D 13
.It Bq Er EWOULDBLOCK
E 13
I 13
.It Bq Er EAGAIN
E 13
E 10
D 11
The socket is marked non-blocking and the receive operation
would block.
E 11
I 11
The socket is marked non-blocking, and the receive operation
would block, or
a receive timeout had been set,
and the timeout expired before data were received.
E 11
D 10
.TP 20
[EINTR]
E 10
I 10
.It Bq Er EINTR
E 10
The receive was interrupted by delivery of a signal before
D 10
any data was available for the receive.
.TP 20
[EFAULT]
The data was specified to be received into a non-existent
or protected part of the process address space.
.SH SEE ALSO
D 3
read(2), send(2), socket(2)
E 3
I 3
fcntl(2), read(2), send(2), select(2), getsockopt(2), socket(2)
E 10
I 10
D 11
any data was available.
E 11
I 11
any data were available.
E 11
.It Bq Er EFAULT
The receive buffer pointer(s) point outside the process's
address space.
.El
.Sh SEE ALSO
.Xr fcntl 2 ,
.Xr read 2 ,
D 11
.Xr send 2 ,
E 11
.Xr select 2 ,
.Xr getsockopt 2 ,
.Xr socket 2
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 4.2 .
E 10
E 3
E 1
