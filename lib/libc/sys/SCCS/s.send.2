h19922
s 00005/00005/00130
d D 8.2 94/02/21 09:37:03 bostic 13 12
c change send, sendto, and sendmsg to return a ssize_t
c change send, sendto to take size_t as a length
e
s 00002/00002/00133
d D 8.1 93/06/04 13:19:21 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/00133
d D 6.10 92/05/04 15:35:12 bostic 11 10
c EWOULDBLOCK -> EAGAIN (POSIX)
e
s 00002/00002/00133
d D 6.9 91/05/01 14:41:50 sellgren 10 9
c char *'s to void *'s (to match prototypes)
e
s 00002/00003/00133
d D 6.8 91/03/15 18:43:22 cael 9 8
c tried to pretty up display
e
s 00093/00087/00043
d D 6.7 91/03/10 23:40:18 cael 8 7
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00011/00129
d D 6.6 90/06/23 17:46:30 trent 7 6
c new copyright notice
e
s 00014/00003/00126
d D 6.5 89/02/14 17:52:53 bostic 6 5
c add Berkeley specific copyright notice
e
s 00001/00001/00128
d D 6.4 87/07/21 09:55:00 karels 5 4
c change misleading array notation to pointers on *msg
e
s 00024/00004/00105
d D 6.3 86/05/14 11:11:37 karels 4 3
c update, describe rights, add errnos
c 
e
s 00001/00001/00108
d D 6.2 85/06/30 16:49:09 sechrest 3 2
c improved english
e
s 00002/00002/00107
d D 6.1 85/05/15 11:59:24 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00109/00000/00000
d D 5.1 85/05/15 11:59:18 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 8
.\" Copyright (c) 1983 The Regents of the University of California.
E 8
I 8
D 12
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
E 8
.\" All rights reserved.
E 12
I 12
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 12
.\"
D 7
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 7
I 7
.\" %sccs.include.redist.man%
E 7
E 6
.\"
D 8
.\"	%W% (Berkeley) %G%
E 8
I 8
.\"     %W% (Berkeley) %G%
E 8
.\"
D 2
.TH SEND 2 "20 September 1983"
E 2
I 2
D 8
.TH SEND 2 "%Q%"
E 2
.UC 5
.SH NAME
send, sendto, sendmsg \- send a message from a socket
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <sys/socket.h>
.PP
.ft B
cc = send(s, msg, len, flags)
int cc, s;
char *msg;
int len, flags;
.PP
.ft B
cc = sendto(s, msg, len, flags, to, tolen)
int cc, s;
char *msg;
int len, flags;
struct sockaddr *to;
int tolen;
.PP
.ft B
cc = sendmsg(s, msg, flags)
int cc, s;
D 5
struct msghdr msg[];
E 5
I 5
struct msghdr *msg;
E 5
int flags;
.fi
.SH DESCRIPTION
.IR Send ,
.IR sendto ,
E 8
I 8
.Dd %Q%
.Dt SEND 2
.Os BSD 4.2
.Sh NAME
.Nm send ,
.Nm sendto ,
.Nm sendmsg
.Nd send a message from a socket
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/socket.h>
D 13
.Ft int
D 10
.Fn send "int s" "const char *msg" "int len" "int flags"
E 10
I 10
.Fn send "int s" "const void *msg" "int len" "int flags"
E 10
.Ft int
D 10
.Fn sendto "int s" "const char *msg" "int len" "int flags" "const struct sockaddr *to" "int tolen"
E 10
I 10
.Fn sendto "int s" "const void *msg" "int len" "int flags" "const struct sockaddr *to" "int tolen"
E 10
.Ft int
E 13
I 13
.Ft ssize_t
.Fn send "int s" "const void *msg" "size_t len" "int flags"
.Ft ssize_t
.Fn sendto "int s" "const void *msg" "size_t len" "int flags" "const struct sockaddr *to" "int tolen"
.Ft ssize_t
E 13
.Fn sendmsg "int s" "const struct msghdr *msg" "int flags"
.Sh DESCRIPTION
.Fn Send ,
.Fn sendto ,
E 8
and
D 8
.I sendmsg
E 8
I 8
.Fn sendmsg
E 8
are used to transmit a message to another socket.
D 8
.I Send
E 8
I 8
.Fn Send
E 8
may be used only when the socket is in a 
D 8
.I connected
E 8
I 8
.Em connected
E 8
state, while 
D 8
.I sendto
E 8
I 8
.Fn sendto
E 8
and
D 8
.I sendmsg
E 8
I 8
.Fn sendmsg
E 8
may be used at any time.
D 8
.PP
E 8
I 8
.Pp
E 8
The address of the target is given by
D 8
.I to
E 8
I 8
.Fa to
E 8
with 
D 8
.I tolen
E 8
I 8
.Fa tolen
E 8
specifying its size.
The length of the message is given by
D 8
.IR len .
E 8
I 8
.Fa len .
E 8
If the message is too long to pass atomically through the
D 8
underlying protocol, then the error EMSGSIZE is returned, and
E 8
I 8
underlying protocol, the error
.Er EMSGSIZE
is returned, and
E 8
the message is not transmitted.
D 8
.PP
E 8
I 8
.Pp
E 8
No indication of failure to deliver is implicit in a
D 8
.IR send .
Return values of \-1 indicate some locally detected errors.
.PP
E 8
I 8
.Fn send .
Locally detected errors are indicated by a return value of -1.
.Pp
E 8
If no messages space is available at the socket to hold
the message to be transmitted, then
D 8
.I send
E 8
I 8
.Fn send
E 8
normally blocks, unless the socket has been placed in
D 4
non-blocking i/o mode.
E 4
I 4
non-blocking I/O mode.
E 4
The
D 8
.IR select (2)
E 8
I 8
.Xr select 2
E 8
call may be used to determine when it is possible to
send more data.
D 8
.PP
E 8
I 8
.Pp
E 8
The
D 8
.I flags
E 8
I 8
.Fa flags
E 8
D 2
parameter may be set to SOF_OOB to send \*(lqout-of-band\*(rq
E 2
I 2
D 4
parameter may be set to MSG_OOB to send \*(lqout-of-band\*(rq
E 2
D 3
data on sockets which support this notion (e.g. SOCK_STREAM).
E 3
I 3
data on sockets that support this notion (e.g. SOCK_STREAM).
E 4
I 4
parameter may include one or more of the following:
E 4
E 3
D 8
.PP
I 4
.nf
.RS
.ta \w'#define\ \ 'u +\w'MSG_DONTROUTE\ \ \ 'u +\w'0x\0\0\0\ \ 'u
#define	MSG_OOB	0x1	/* process out-of-band data */
E 8
I 8
D 9
.Pp
E 9
.Bd -literal
D 9
#define	MSG_OOB		0x1	/* process out-of-band data */
E 8
#define	MSG_DONTROUTE	0x4	/* bypass routing, use direct interface */
E 9
I 9
#define	MSG_OOB        0x1  /* process out-of-band data */
#define	MSG_DONTROUTE  0x4  /* bypass routing, use direct interface */
E 9
D 8
.RE
.fi
The flag MSG_OOB is used to send \*(lqout-of-band\*(rq
data on sockets that support this notion (e.g. SOCK_STREAM);
the underlying protocol must also support \*(lqout-of-band\*(rq data.
MSG_DONTROUTE is usually used only by diagnostic or routing programs.
.PP
E 8
I 8
.Ed
.Pp
The flag
.Dv MSG_OOB
is used to send
.Dq out-of-band
data on sockets that support this notion (e.g.
.Dv SOCK_STREAM ) ;
the underlying protocol must also support
.Dq out-of-band
data.
.Dv MSG_DONTROUTE
is usually used only by diagnostic or routing programs.
.Pp
E 8
E 4
See 
D 8
.IR recv (2)
E 8
I 8
.Xr recv 2
E 8
for a description of the
D 8
.I msghdr
E 8
I 8
.Fa msghdr
E 8
structure.
D 8
.SH "RETURN VALUE
The call returns the number of characters sent, or \-1
E 8
I 8
.Sh RETURN VALUES
The call returns the number of characters sent, or -1
E 8
if an error occurred.
D 8
.SH "ERRORS
.TP 20
[EBADF]
E 8
I 8
.Sh ERRORS
.Fn Send ,
.Fn sendto ,
and
.Fn sendmsg
fail if:
D 11
.Bl -tag -width [EWOULDBLOCK]
E 11
I 11
.Bl -tag -width [EMSGSIZE]
E 11
.It Bq Er EBADF
E 8
An invalid descriptor was specified.
D 8
.TP 20
[ENOTSOCK]
The argument \fIs\fP is not a socket.
.TP 20
[EFAULT]
E 8
I 8
.It Bq Er ENOTSOCK
The argument
.Fa s
is not a socket.
.It Bq Er EFAULT
E 8
An invalid user space address was specified for a parameter.
D 8
.TP 20
[EMSGSIZE]
E 8
I 8
.It Bq Er EMSGSIZE
E 8
The socket requires that message be sent atomically,
and the size of the message to be sent made this impossible.
D 8
.TP 20
[EWOULDBLOCK]
E 8
I 8
D 11
.It Bq Er EWOULDBLOCK
E 11
I 11
.It Bq Er EAGAIN
E 11
E 8
The socket is marked non-blocking and the requested operation
would block.
I 4
D 8
.TP 20
[ENOBUFS]
E 8
I 8
.It Bq Er ENOBUFS
E 8
The system was unable to allocate an internal buffer.
The operation may succeed when buffers become available.
D 8
.TP 20
[ENOBUFS]
E 8
I 8
.It Bq Er ENOBUFS
E 8
The output queue for a network interface was full.
This generally indicates that the interface has stopped sending,
but may be caused by transient congestion.
E 4
D 8
.SH SEE ALSO
D 4
recv(2), socket(2)
E 4
I 4
fcntl(2), recv(2), select(2), getsockopt(2), socket(2), write(2)
E 8
I 8
.El
.Sh SEE ALSO
.Xr fcntl 2 ,
.Xr recv 2 ,
.Xr select 2 ,
.Xr getsockopt 2 ,
.Xr socket 2 ,
.Xr write 2
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 4.2 .
E 8
E 4
E 1
