h16245
s 00002/00002/00229
d D 8.1 93/06/04 13:20:06 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00145/00109/00086
d D 6.8 91/03/10 23:40:51 cael 9 8
c man page macro and text revisions (-mdoc version 3)
e
s 00001/00011/00194
d D 6.7 90/06/23 17:45:47 trent 8 7
c new copyright notice
e
s 00014/00003/00191
d D 6.6 89/02/14 17:52:55 bostic 7 6
c add Berkeley specific copyright notice
e
s 00003/00000/00191
d D 6.5 86/05/23 10:08:09 kjd 6 5
c fix see also
e
s 00041/00089/00150
d D 6.4 86/05/14 13:46:54 karels 5 4
c move socket options to [gs]etsockopt, add new
e
s 00015/00002/00224
d D 6.3 86/01/07 14:01:21 mckusick 4 3
c add SOCK_SEQPACKET info (checked in for sklower)
e
s 00003/00003/00223
d D 6.2 85/06/30 16:58:02 sechrest 3 2
c improved english
e
s 00016/00006/00210
d D 6.1 85/05/15 12:01:21 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00216/00000/00000
d D 5.1 85/05/15 12:01:12 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
D 9
.\" Copyright (c) 1983 The Regents of the University of California.
E 9
I 9
D 10
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
E 9
.\" All rights reserved.
E 10
I 10
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 10
.\"
D 8
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 8
I 8
.\" %sccs.include.redist.man%
E 8
E 7
.\"
D 9
.\"	%W% (Berkeley) %G%
E 9
I 9
.\"     %W% (Berkeley) %G%
E 9
.\"
D 2
.TH SOCKET 2 "18 July 1983"
E 2
I 2
D 9
.TH SOCKET 2 "%Q%"
E 2
.UC 5
.SH NAME
socket \- create an endpoint for communication
.SH SYNOPSIS
.nf
.ft B
#include <sys/types.h>
#include <sys/socket.h>
.PP
.ft B
D 5
s = socket(af, type, protocol)
int s, af, type, protocol;
E 5
I 5
s = socket(domain, type, protocol)
int s, domain, type, protocol;
E 5
.fi
.SH DESCRIPTION
.I Socket
E 9
I 9
.Dd %Q%
.Dt SOCKET 2
.Os BSD 4.2
.Sh NAME
.Nm socket
.Nd create an endpoint for communication
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/socket.h>
.Ft int
.Fn socket "int domain" "int type" "int protocol"
.Sh DESCRIPTION
.Fn Socket
E 9
creates an endpoint for communication and returns a descriptor.
D 9
.PP
E 9
I 9
.Pp
E 9
The
D 5
.I af
parameter specifies an address format with which addresses specified
in later operations using the socket should be interpreted.  These
formats are defined in the include file
E 5
I 5
D 9
.I domain
E 9
I 9
.Fa domain
E 9
parameter specifies a communications domain within which
communication will take place; this selects the protocol family
which should be used.
D 9
The protocol family generally is the same as the address family
for the addresses supplied in later operations on the socket.
E 9
These families are defined in the include file
E 5
D 9
.IR <sys/socket.h> .
E 9
I 9
.Ao Pa sys/socket.h Ac .
E 9
The currently understood formats are
D 9
.PP
.RS
.nf
.ta 1.25i 1.75i
D 5
AF_UNIX	(UNIX path names),
AF_INET	(ARPA Internet addresses),
D 4
AF_PUP	(Xerox PUP-I Internet addresses), and
E 4
I 4
AF_NS	(Xerox Network Systems addresses), and
E 4
AF_IMPLINK	(IMP \*(lqhost at IMP\*(rq addresses).
E 5
I 5
PF_UNIX	(UNIX internal protocols),
PF_INET	(ARPA Internet protocols),
PF_NS	(Xerox Network Systems protocols), and
PF_IMPLINK	(IMP \*(lqhost at IMP\*(rq link layer).
E 5
.fi
.RE
.PP
E 9
I 9
.Pp
.Bd -literal -offset indent -compact
AF_UNIX		(UNIX internal protocols),
AF_INET		(ARPA Internet protocols),
AF_ISO		(ISO protocols),
AF_NS		(Xerox Network Systems protocols), and
AF_IMPLINK	(IMP \*(lqhost at IMP\*(rq link layer).
.Ed
.Pp
E 9
The socket has the indicated
D 3
.I type
E 3
I 3
D 9
.I type,
E 9
I 9
.Fa type ,
E 9
E 3
which specifies the semantics of communication.  Currently
defined types are:
D 9
.PP
.RS
.nf
E 9
I 9
.Pp
.Bd -literal -offset indent -compact
E 9
SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
D 9
.fi
.RE
.PP
A SOCK_STREAM type provides sequenced, reliable,
E 9
I 9
.Ed
.Pp
A
.Dv SOCK_STREAM
type provides sequenced, reliable,
E 9
D 5
two-way connection based byte streams with an out-of-band data
transmission mechanism.
E 5
I 5
two-way connection based byte streams.
An out-of-band data transmission mechanism may be supported.
E 5
D 9
A SOCK_DGRAM socket supports
E 9
I 9
A
.Dv SOCK_DGRAM
socket supports
E 9
datagrams (connectionless, unreliable messages of
a fixed (typically small) maximum length).
I 4
D 9
A SOCK_SEQPACKET socket may provide a sequenced, reliable,
E 9
I 9
A
.Dv SOCK_SEQPACKET
socket may provide a sequenced, reliable,
E 9
two-way connection-based data transmission path for datagrams
of fixed maximum length; a consumer may be required to read
an entire packet with each read system call.
This facility is protocol specific, and presently implemented
D 5
only for AF_NS.
E 4
SOCK_RAW sockets provide access to internal network interfaces.
E 5
I 5
D 9
only for PF_NS.
SOCK_RAW sockets provide access to internal network protocols and interfaces.
E 5
The types SOCK_RAW,
E 9
I 9
only for
.Dv PF_NS .
.Dv SOCK_RAW
sockets provide access to internal network protocols and interfaces.
The types
.Dv SOCK_RAW ,
E 9
which is available only to the super-user, and
D 4
SOCK_SEQPACKET and SOCK_RDM, which are planned,
E 4
I 4
D 9
SOCK_RDM, which is planned,
E 9
I 9
.Dv SOCK_RDM ,
which is planned,
E 9
E 4
but not yet implemented, are not described here.
D 9
.PP
E 9
I 9
.Pp
E 9
The
D 9
.I protocol
E 9
I 9
.Fa protocol
E 9
specifies a particular protocol to be used with the socket.
Normally only a single protocol exists to support a particular
D 5
socket type using a given address format.  However, it is possible
that many protocols may exist in which case a particular protocol
E 5
I 5
socket type within a given protocol family.  However, it is possible
that many protocols may exist, in which case a particular protocol
E 5
must be specified in this manner.  The protocol number to use is
particular to the \*(lqcommunication domain\*(rq in which communication
is to take place; see
D 5
.IR services (3N)
and
E 5
D 9
.IR protocols (3N).
.PP
Sockets of type SOCK_STREAM
E 9
I 9
.Xr protocols 5 .
.Pp
Sockets of type
.Dv SOCK_STREAM
E 9
are full-duplex byte streams, similar
to pipes.  A stream socket must be in a
D 9
.I connected
E 9
I 9
.Em connected
E 9
state before any data may be sent or received
on it.  A connection to another socket is created with a
D 9
.IR connect (2)
E 9
I 9
.Xr connect 2
E 9
call.  Once connected, data may be transferred using
D 9
.IR read (2)
E 9
I 9
.Xr read 2
E 9
and
D 9
.IR write (2)
E 9
I 9
.Xr write 2
E 9
calls or some variant of the 
D 9
.IR send (2)
E 9
I 9
.Xr send 2
E 9
and
D 9
.IR recv (2)
E 9
I 9
.Xr recv 2
E 9
calls.  When a session has been completed a
D 9
.IR close (2)
E 9
I 9
.Xr close 2
E 9
may be performed.
Out-of-band data may also be transmitted as described in
D 9
.IR send (2)
E 9
I 9
.Xr send 2
E 9
and received as described in
D 9
.IR recv (2).
.PP
E 9
I 9
.Xr recv 2 .
.Pp
E 9
The communications protocols used to implement a
D 9
SOCK_STREAM insure that data
E 9
I 9
.Dv SOCK_STREAM
insure that data
E 9
is not lost or duplicated.  If a piece of data for which the
peer protocol has buffer space cannot be successfully transmitted
within a reasonable length of time, then
the connection is considered broken and calls
will indicate an error with
D 9
\-1 returns and with ETIMEDOUT as the specific code
in the global variable errno.
The protocols optionally keep sockets \*(lqwarm\*(rq by
forcing transmissions
E 9
I 9
-1 returns and with
.Dv ETIMEDOUT
as the specific code
in the global variable
.Va errno .
The protocols optionally keep sockets
.Dq warm
by forcing transmissions
E 9
roughly every minute in the absence of other activity.
An error is then indicated if no response can be
elicited on an otherwise
idle connection for a extended period (e.g. 5 minutes).
D 9
A SIGPIPE signal is raised if a process sends
E 9
I 9
A
.Dv SIGPIPE
signal is raised if a process sends
E 9
on a broken stream; this causes naive processes,
which do not handle the signal, to exit.
I 4
D 9
.PP
SOCK_SEQPACKET sockets employ the same system calls
as SOCK_STREAM sockets.  The only difference
E 9
I 9
.Pp
.Dv SOCK_SEQPACKET
sockets employ the same system calls
as
.Dv SOCK_STREAM
sockets.  The only difference
E 9
is that 
D 9
.IR read (2)
E 9
I 9
.Xr read 2
E 9
calls will return only the amount of data requested,
and any remaining in the arriving packet will be discarded.
E 4
D 9
.PP
SOCK_DGRAM and SOCK_RAW
E 9
I 9
.Pp
.Dv SOCK_DGRAM
and
.Dv SOCK_RAW
E 9
sockets allow sending of datagrams to correspondents
named in
D 9
.IR send (2)
E 9
I 9
.Xr send 2
E 9
D 5
calls.  It is also possible to receive datagrams at
such a socket with
.IR recv (2).
E 5
I 5
calls.  Datagrams are generally received with
D 9
.IR recvfrom (2),
E 9
I 9
.Xr recvfrom 2 ,
E 9
which returns the next datagram with its return address.
E 5
D 9
.PP
E 9
I 9
.Pp
E 9
An 
D 9
.IR fcntl (2)
E 9
I 9
.Xr fcntl 2
E 9
call can be used to specify a process group to receive
D 9
a SIGURG signal when the out-of-band data arrives.
E 9
I 9
a
.Dv SIGURG
signal when the out-of-band data arrives.
E 9
I 5
It may also enable non-blocking I/O
and asynchronous notification of I/O events
D 9
via SIGIO.
E 5
.PP
E 9
I 9
via
.Dv SIGIO .
.Pp
E 9
The operation of sockets is controlled by socket level
D 9
.IR options .
E 9
I 9
.Em options .
E 9
These options are defined in the file
D 5
.RI < sys/socket.h >
and explained below.  
.I Setsockopt
E 5
I 5
D 9
.RI < sys/socket.h >.
.IR Setsockopt (2)
E 9
I 9
.Ao Pa sys/socket.h Ac .
.Xr Setsockopt 2
E 9
E 5
and
D 9
.IR getsockopt (2)
E 9
I 9
.Xr getsockopt 2
E 9
are used to set and get options, respectively.
I 2
D 5
Options other than SO_LINGER take an 
.I int
D 3
parameter which should non-zero if the option is to be
E 3
I 3
parameter, which should non-zero if the option is to be
E 3
enabled, or zero if it is to be disabled; SO_LINGER
uses a
.I struct linger
parameter, defined in
.RI < sys/socket.h >,
which specifies the desired state of the option and the
linger interval (see below).
E 2
.PP
.RS
.DT
.nf
SO_DEBUG 		turn on recording of debugging information
SO_REUSEADDR	allow local address reuse
SO_KEEPALIVE	keep connections alive
D 2
SO_DONTROUTE	do no apply routing on outgoing messages
SO_LINGER 		linger on close if data present
SO_DONTLINGER	do not linger on close
E 2
I 2
SO_DONTROUTE	do not route outgoing messages
SO_LINGER 	linger on close if data present
SO_BROADCAST	permit transmission of broadcast messages
E 2
.fi
.RE
.PP
SO_DEBUG enables debugging in the underlying protocol modules.
SO_REUSEADDR indicates the rules used in validating addresses supplied
in a
.IR bind (2)
call should allow reuse of local addresses.  SO_KEEPALIVE enables the
periodic transmission of messages on a connected socket.  Should the
connected party fail to respond to these messages, the connection is
considered broken and processes using the socket are notified via a
SIGPIPE signal.  SO_DONTROUTE indicates that outgoing messages should
bypass the standard routing facilities.  Instead, messages are directed
to the appropriate network interface according to the network portion
of the destination address.  SO_LINGER
D 2
and SO_DONTLINGER control the actions taken when unsent messags
E 2
I 2
controls the action taken when unsent messags
E 2
are queued on socket and a 
.IR close (2)
is performed.
If the socket promises reliable delivery of data and SO_LINGER is set,
the system will block the process on the 
.I close
attempt until it is able to transmit the data or until it decides it
is unable to deliver the information (a timeout period, termed the
linger interval, is specified in the
.IR setsockopt 
call when SO_LINGER is requested). 
D 2
If SO_DONTLINGER is specified and a 
E 2
I 2
If SO_LINGER is disabled and a 
E 2
.I close
D 3
is issued, the system will process the close in a manner which allows
E 3
I 3
is issued, the system will process the close in a manner that allows
E 3
the process to continue as quickly as possible.
E 5
D 9
.SH "RETURN VALUE
A \-1 is returned if an error occurs, otherwise the return
E 9
I 9
.Sh RETURN VALUES
A -1 is returned if an error occurs, otherwise the return
E 9
value is a descriptor referencing the socket.
D 9
.SH "ERRORS
The \fIsocket\fP call fails if:
.TP 20
D 5
[EAFNOSUPPORT]
The specified address family is not supported in this version
of the system.
.TP 20
[ESOCKTNOSUPPORT]
The specified socket type is not supported in this address family.
.TP 20
E 5
[EPROTONOSUPPORT]
E 9
I 9
.Sh ERRORS
The
.Fn socket
call fails if:
.Bl -tag -width EPROTONOPSUPPORTA
.It Bq Er EPROTONOSUPPORT
E 9
D 5
The specified protocol is not supported.
E 5
I 5
The protocol type or the specified protocol is not supported
within this domain.
E 5
D 9
.TP 20
[EMFILE]
E 9
I 9
.It Bq Er EMFILE
E 9
The per-process descriptor table is full.
D 9
.TP 20
I 5
[ENFILE]
E 9
I 9
.It Bq Er ENFILE
E 9
The system file table is full.
D 9
.TP 20
[EACCESS]
E 9
I 9
.It Bq Er EACCESS
E 9
Permission to create a socket of the specified type and/or protocol
is denied.
D 9
.TP 20
E 5
[ENOBUFS]
E 9
I 9
.It Bq Er ENOBUFS
E 9
D 5
No buffer space is available.  The socket cannot be created.
E 5
I 5
Insufficient buffer space is available.
The socket cannot be created until sufficient resources are freed.
E 5
D 9
.SH SEE ALSO
accept(2), bind(2), connect(2), getsockname(2), getsockopt(2),
D 5
ioctl(2), listen(2), recv(2),
select(2), send(2), shutdown(2), socketpair(2)
E 5
I 5
ioctl(2), listen(2), read(2), recv(2),
select(2), send(2), shutdown(2), socketpair(2), write(2)
E 5
.br
I 6
``An Introductory 4.3BSD Interprocess Communication Tutorial.''
(reprinted in UNIX Programmer's Supplementary Documents Volume 1, PS1:7)
E 6
D 5
``A 4.2BSD Interprocess Communication Primer''.
.SH BUGS
The use of keepalives is a questionable feature for this layer.
E 5
I 5
``An Advanced 4.3BSD Interprocess Communication Tutorial.''
I 6
(reprinted in UNIX Programmer's Supplementary Documents Volume 1, PS1:8)
E 9
I 9
.El
.Sh SEE ALSO
.Xr accept 2 ,
.Xr bind 2 ,
.Xr connect 2 ,
.Xr getprotoent 3 ,
.Xr getsockname 2 ,
.Xr getsockopt 2 ,
.Xr ioctl 2 ,
.Xr listen 2 ,
.Xr read 2 ,
.Xr recv 2 ,
.Xr select 2 ,
.Xr send 2 ,
.Xr shutdown 2 ,
.Xr socketpair 2 ,
.Xr write 2
.Rs
.%T "An Introductory 4.3 BSD Interprocess Communication Tutorial"
.%O "reprinted in UNIX Programmer's Supplementary Documents Volume 1"
.Re
.Rs
.%T "BSD Interprocess Communication Tutorial"
.%O "reprinted in UNIX Programmer's Supplementary Documents Volume 1"
.Re
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 4.2 .
E 9
E 6
E 5
E 1
