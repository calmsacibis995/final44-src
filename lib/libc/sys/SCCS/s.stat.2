h41198
s 00000/00010/00240
d D 8.4 95/05/01 17:46:27 mckusick 18 17
c CAVEAT no longer applicable
e
s 00002/00002/00248
d D 8.3 94/04/19 06:54:41 bostic 17 16
c spell
e
s 00054/00034/00196
d D 8.2 94/04/01 08:03:56 bostic 16 15
c bring stat(2) up to date w.r.t. sys/stat.h
e
s 00002/00002/00228
d D 8.1 93/06/04 13:20:12 bostic 15 14
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00008/00000/00222
d D 6.11 93/05/31 17:02:11 mckusick 14 13
c add detail about symlinks
e
s 00001/00000/00221
d D 6.10 92/07/27 13:43:41 bostic 13 12
c readlink.2 rename.2 unlink.2
e
s 00178/00174/00043
d D 6.9 91/03/10 23:40:58 cael 12 11
c man page macro and text revisions (-mdoc version 3)
e
s 00029/00024/00188
d D 6.8 89/08/21 23:11:04 bostic 11 10
c reformat structure, add new vnode fields, document st_blocks is 512 units
e
s 00002/00002/00210
d D 6.7 87/10/25 11:57:56 bostic 10 9
c uid is uid_t, gid is gid_t
e
s 00002/00003/00210
d D 6.6 87/09/30 08:33:05 bostic 9 8
c fix st_atime description; bug report 4.3BSD/man/18
e
s 00004/00004/00209
d D 6.5 86/05/12 22:58:24 mckusick 8 7
c rename changes ctime, stat of pipe returns unique dev/ino
e
s 00006/00000/00207
d D 6.4 85/08/26 23:31:54 mckusick 7 6
c update error messages (mostly from sun!guy)
e
s 00002/00002/00205
d D 6.3 85/06/30 17:00:17 sechrest 6 5
c improved english
e
s 00007/00006/00200
d D 6.2 85/05/22 18:31:05 mckusick 5 3
c update the error return codes to reflect those in 4.3BSD
e
s 00007/00006/00200
d R 6.2 85/05/21 14:55:55 mckusick 4 3
c update error return values
e
s 00006/00013/00200
d D 6.1 85/05/09 16:41:45 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00176/00064/00037
d D 5.1 85/05/09 16:41:30 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00101/00000/00000
d D 4.1 85/05/09 16:41:22 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 12
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 12
I 12
D 15
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 15
I 15
D 17
.\" Copyright (c) 1980, 1991, 1993
E 17
I 17
.\" Copyright (c) 1980, 1991, 1993, 1994
E 17
.\"	The Regents of the University of California.  All rights reserved.
E 15
E 12
.\"
D 12
.\"	%W% (Berkeley) %G%
E 12
I 12
.\" %sccs.include.redist.man%
E 12
.\"
D 2
.TH STAT 2 
E 2
I 2
D 3
.TH STAT 2 "27 July 1983"
E 3
I 3
D 12
.TH STAT 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
stat, fstat \- get file status
E 2
I 2
stat, lstat, fstat \- get file status
E 2
.SH SYNOPSIS
.nf
D 2
.B #include <sys/types.h>
.B #include <sys/stat.h>
E 2
I 2
.ft B
#include <sys/types.h>
#include <sys/stat.h>
E 2
.PP
D 2
.B stat(name, buf)
.B char *name;
.B struct stat *buf;
E 2
I 2
.ft B
stat(path, buf)
char *path;
struct stat *buf;
E 2
.PP
D 2
.B fstat(fildes, buf)
.B struct stat *buf;
E 2
I 2
.ft B
lstat(path, buf)
char *path;
struct stat *buf;
.PP
.ft B
fstat(fd, buf)
int fd;
struct stat *buf;
E 2
.fi
I 2
.ft R
E 2
.SH DESCRIPTION
.I Stat
D 2
obtains detailed information about a named file.
E 2
I 2
obtains information about the file
.IR path .
E 12
I 12
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt STAT 2
.Os BSD 4
.Sh NAME
.Nm stat ,
.Nm lstat ,
.Nm fstat
.Nd get file status
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/stat.h>
.Ft int
D 16
.Fn stat "const char *path" "struct stat *buf"
E 16
I 16
.Fn stat "const char *path" "struct stat *sb"
E 16
.Ft int
D 16
.Fn lstat "const char *path" "struct stat *buf"
E 16
I 16
.Fn lstat "const char *path" "struct stat *sb"
E 16
.Ft int
D 16
.Fn fstat "int fd" "struct stat *buf"
E 16
I 16
.Fn fstat "int fd" "struct stat *sb"
E 16
.Sh DESCRIPTION
The
.Fn stat
function obtains information about the file pointed to by
.Fa path .
E 12
Read, write or execute
permission of the named file is not required, but all directories
D 12
listed in the path name leading to the file must be reachable.
.PP
.I Lstat
is like \fIstat\fP except in the case where the named file is a symbolic link,
E 12
I 12
D 17
listed in the path name leading to the file must be seachable.
E 17
I 17
listed in the path name leading to the file must be searchable.
E 17
.Pp
.Fn Lstat
is like
.Fn stat
except in the case where the named file is a symbolic link,
E 12
in which case
D 12
.I lstat
E 12
I 12
.Fn lstat
E 12
returns information about the link,
while
D 12
.I stat
E 12
I 12
.Fn stat
E 12
returns information about the file the link references.
I 14
Unlike other filesystem objects,
symbolic links do not have an owner, group, access mode, times, etc.
Instead, these attributes are taken from the directory that
contains the link.
The only attributes returned from an
.Fn lstat
that refer to the symbolic link itself are the file type (S_IFLNK),
size, blocks, and link count (always 1).
E 14
D 12
.PP
E 2
.I Fstat
E 12
I 12
.Pp
The
.Fn fstat
E 12
obtains the same information about an open file
D 2
known by the file descriptor from a successful
.I open, creat, dup
or
.IR pipe (2)
call.
E 2
I 2
D 12
referenced by the argument descriptor, such as would
E 12
I 12
known by the file descriptor
D 16
.Fa fd ,
such as would
E 12
D 11
be obtained by an \fIopen\fP call.
E 11
I 11
be obtained by an
D 12
.I open
E 12
I 12
.Xr open
E 12
call.
E 16
I 16
.Fa fd .
E 16
E 11
E 2
D 12
.PP
D 2
.I Name
points to a null-terminated string naming
a file;
E 2
I 2
.I Buf
E 12
I 12
.Pp
D 16
.Fa Buf
E 12
is a pointer to a
E 16
I 16
The
.Fa sb
argument is a pointer to a
E 16
D 12
.I stat
structure into which information is placed concerning the file.
The contents of the structure pointed to by
E 2
D 11
.I buf
E 11
I 11
.IR buf :
E 11
D 2
is the address of a buffer
into which information is placed concerning the file.
It is unnecessary to have any
permissions at all with respect to the file, but all directories
leading to the file must be searchable.
The layout of the structure pointed to by buf
as defined in
.I <stat.h>
is given below.
.I St_mode 
is encoded according to the `#define' statements.
E 2
.PP
.nf
D 2
.ta 5m 10m 15m 20m 25m 30m 35m 40m 45m 50m 55m 60m
.so /usr/include/sys/stat.h
E 2
I 2
D 11
.ta 1i 1.7i 2.5i
     struct stat {
	dev_t	st_dev;	/* device inode resides on */
	ino_t	st_ino;	/* this inode's number */
	u_short	st_mode;	/* protection */
	short	st_nlink;	/* number or hard links to the file */
D 10
	short	st_uid;	/* user-id of owner */
	short	st_gid;	/* group-id of owner */
E 10
I 10
	uid_t	st_uid;	/* user-id of owner */
	gid_t	st_gid;	/* group-id of owner */
E 10
	dev_t	st_rdev;	/* the device type, for inode that is device */
	off_t	st_size;	/* total size of file */
	time_t	st_atime;	/* file last access time */
	int	st_spare1;
	time_t	st_mtime;	/* file last modify time */
	int	st_spare2;
	time_t	st_ctime;	/* file last status change time */
	int	st_spare3;
	long	st_blksize;	/* optimal blocksize for file system i/o ops */
	long	st_blocks;	/* actual number of blocks allocated */
	long	st_spare4[2];
E 11
I 11
    struct stat {
        dev_t    st_dev;      /* device inode resides on */
        ino_t    st_ino;      /* inode's number */
        u_short  st_mode;     /* inode protection mode */
        short    st_nlink;    /* number or hard links to the file */
        uid_t    st_uid;      /* user-id of owner */
        gid_t    st_gid;      /* group-id of owner */
        dev_t    st_rdev;     /* device type, for special file inode */
        off_t    st_size;     /* file size, in bytes */
        time_t   st_atime;    /* time of last access */
        int      st_spare1;
        time_t   st_mtime;    /* time of last data modification */
        int      st_spare2;
        time_t   st_ctime;    /* time of last file status change */
        int      st_spare3;
        long     st_blksize;  /* optimal file system I/O ops blocksize */
        long     st_blocks;   /* blocks allocated for file */
        u_long   st_flags;    /* user defined flags for file */
        u_long   st_gen;      /* file generation number */
E 11
    };
E 2
.fi
.DT
.PP
I 2
D 11
.TP 12
E 11
I 11
.TP
E 11
st_atime
D 9
Time when file data was last read or modified.  Changed by the following system
E 9
I 9
Time when file data was last accessed.  Changed by the following system
E 12
I 12
.Fn stat
structure
as defined by
.Aq Pa sys/stat.h
(shown below)
and into which information is placed concerning the file.
.Bd -literal
struct stat {
    dev_t    st_dev;    /* device inode resides on */
    ino_t    st_ino;    /* inode's number */
    mode_t   st_mode;   /* inode protection mode */
    nlink_t  st_nlink;  /* number or hard links to the file */
    uid_t    st_uid;    /* user-id of owner */
    gid_t    st_gid;    /* group-id of owner */
    dev_t    st_rdev;   /* device type, for special file inode */
I 16
    struct timespec st_atimespec;  /* time of last access */
    struct timespec st_mtimespec;  /* time of last data modification */
    struct timespec st_ctimespec;  /* time of last file status change */
E 16
    off_t    st_size;   /* file size, in bytes */
D 16
    time_t   st_atime;  /* time of last access */
    long     st_spare1;
    time_t   st_mtime;  /* time of last data modification */
    long     st_spare2;
    time_t   st_ctime;  /* time of last file status change */
    long     st_spare3;
    long     st_blksize;/* optimal file sys I/O ops blocksize */
    long     st_blocks; /* blocks allocated for file */
E 16
I 16
    quad_t   st_blocks; /* blocks allocated for file */
    u_long   st_blksize;/* optimal file sys I/O ops blocksize */
E 16
    u_long   st_flags;  /* user defined flags for file */
    u_long   st_gen;    /* file generation number */
};
.Ed
.Pp
The time-related fields of
.Fa struct stat
are as follows:
D 16
.Bl -tag -width st_blocks
E 16
I 16
.Bl -tag -width XXXst_mtime
E 16
.It st_atime
D 16
Time when file data last accessed.  Changed by the following system
E 12
E 9
calls:
E 16
I 16
Time when file data last accessed.
Changed by the
E 16
D 12
.IR mknod (2),
.IR utimes (2),
E 12
I 12
.Xr mknod 2 ,
D 16
.Xr utimes 2 ,
E 16
I 16
.Xr utimes 2
E 16
E 12
D 9
.IR read (2),
E 9
and
D 9
.IR write (2).
E 9
I 9
D 12
.IR read (2).
E 9
For reasons of efficiency, 
st_atime is not set when a directory
is searched, although this would be more logical.
D 11
.TP 12
E 11
I 11
.TP
E 11
st_mtime
Time when data was last modified.
It is not set by changes of owner, group, link count, or mode.
E 12
I 12
D 16
.Xr read 2 .
E 16
I 16
.Xr read 2
system calls.
E 16
.It st_mtime
Time when file data last modified.
E 12
D 16
Changed by the following system calls:
E 16
I 16
Changed by the
E 16
D 12
.IR mknod (2),
.IR utimes (2),
.IR write (2).
D 11
.TP 12
E 11
I 11
.TP
E 11
st_ctime
Time when file status was last changed.
It is set both both by writing and changing the i-node.
E 12
I 12
.Xr mknod 2 ,
D 16
.Xr utimes 2 ,
.Xr write 2 .
E 16
I 16
.Xr utimes 2
and
.Xr write 2
system calls.
E 16
.It st_ctime
Time when file status was last changed (inode data modification).
E 12
D 16
Changed by the following system calls:
D 12
.IR chmod (2)
.IR chown (2),
.IR link (2),
.IR mknod (2),
I 8
.IR rename (2),
E 8
.IR unlink (2),
.IR utimes (2),
.IR write (2).
I 11
.TP
st_blocks
E 12
I 12
.Xr chmod 2
E 16
I 16
Changed by the
.Xr chmod 2 ,
E 16
.Xr chown 2 ,
.Xr link 2 ,
.Xr mknod 2 ,
.Xr rename 2 ,
.Xr unlink 2 ,
D 16
.Xr utimes 2 ,
.Xr write 2 .
E 16
I 16
.Xr utimes 2
and
.Xr write 2
system calls.
.El
.Pp
The size-related fields of the
.Fa struct stat
are as follows:
.Bl -tag -width XXXst_blksize
.It st_blksize
The optimal I/O block size for the file.
E 16
.It st_blocks
E 12
The actual number of blocks allocated for the file in 512-byte units.
I 16
As short symbolic links are stored in the inode, this number may
be zero.
E 16
E 11
D 12
.PP
The status information word \fIst_mode\fP has bits:
.nf
.in +5n
.ta 1.6i 2.5i 3i
#define S_IFMT	0170000	/* type of file */
#define\ \ \ \ S_IFDIR	0040000	/* directory */
#define\ \ \ \ S_IFCHR	0020000	/* character special */
#define\ \ \ \ S_IFBLK	0060000	/* block special */
#define\ \ \ \ S_IFREG	0100000	/* regular */
#define\ \ \ \ S_IFLNK	0120000	/* symbolic link */
#define\ \ \ \ S_IFSOCK	0140000	/* socket */
#define S_ISUID	0004000	/* set user id on execution */
#define S_ISGID	0002000	/* set group id on execution */
#define S_ISVTX	0001000	/* save swapped text even after use */
#define S_IREAD	0000400	/* read permission, owner */
#define S_IWRITE	0000200	/* write permission, owner */
#define S_IEXEC	0000100	/* execute/search permission, owner */
.fi
.in -5n
.PP
E 2
The mode bits 0000070 and 0000007 encode group and
others permissions (see
.IR chmod (2)).
D 2
The defined types,
.I 
ino_t, off_t, time_t,
name various width integer values;
.I dev_t
encodes
major and minor device numbers;
their exact definitions are in
the include file <sys/types.h>
(see
.IR types (5)).
E 2
D 3
.PP
When
D 2
.I fildes
E 2
I 2
.I fd
E 2
is associated with a pipe,
.I fstat
reports an ordinary file with an i-node number,
restricted permissions,
and a not necessarily meaningful length.
E 3
I 2
.SH "RETURN VALUE
E 12
I 12
.El
.Pp
The status information word
.Fa st_mode
D 16
has bits:
E 16
I 16
has the following bits:
E 16
.Bd -literal
#define S_IFMT 0170000           /* type of file */
#define        S_IFIFO  0010000  /* named pipe (fifo) */
#define        S_IFCHR  0020000  /* character special */
#define        S_IFDIR  0040000  /* directory */
#define        S_IFBLK  0060000  /* block special */
#define        S_IFREG  0100000  /* regular */
#define        S_IFLNK  0120000  /* symbolic link */
#define        S_IFSOCK 0140000  /* socket */
#define S_ISUID 0004000  /* set user id on execution */
#define S_ISGID 0002000  /* set group id on execution */
#define S_ISVTX 0001000  /* save swapped text even after use */
#define S_IRUSR 0000400  /* read permission, owner */
#define S_IWUSR 0000200  /* write permission, owner */
#define S_IXUSR 0000100  /* execute/search permission, owner */
.Ed
.Pp
For a list of access modes, see
.Aq Pa sys/stat.h ,
.Xr access 2
and
.Xr chmod 2 .
.Sh RETURN VALUES
E 12
Upon successful completion a value of 0 is returned.
D 12
Otherwise, a value of \-1 is returned and
.I errno
E 12
I 12
Otherwise, a value of -1 is returned and
.Va errno
E 12
is set to indicate the error.
I 16
.Sh COMPATIBILITY
Previous versions of the system used different types for the
.Li st_dev ,
.Li st_uid ,
.Li st_gid ,
.Li st_rdev ,
.Li st_size ,
.Li st_blksize
and
.Li st_blocks
fields.
E 16
D 12
.SH "ERRORS
.I Stat
E 12
I 12
.Sh ERRORS
.Fn Stat
E 12
and
D 12
.I lstat
will fail if one or more of the following are true:
.TP 15
[ENOTDIR]
E 12
I 12
.Fn lstat
will fail if:
.Bl -tag -width ENAMETOOLONGAA
.It Bq Er ENOTDIR
E 12
A component of the path prefix is not a directory.
D 12
.TP 15
D 5
[EPERM]
E 5
I 5
[EINVAL]
E 12
I 12
.It Bq Er EINVAL
E 12
E 5
The pathname contains a character with the high-order bit set.
D 12
.TP 15
D 5
[ENOENT]
The pathname was too long.
E 5
I 5
[ENAMETOOLONG]
E 12
I 12
.It Bq Er ENAMETOOLONG
E 12
A component of a pathname exceeded 255 characters,
or an entire path name exceeded 1023 characters.
E 5
D 12
.TP 15
[ENOENT]
E 12
I 12
.It Bq Er ENOENT
E 12
The named file does not exist.
D 12
.TP 15
[EACCES]
E 12
I 12
.It Bq Er EACCES
E 12
Search permission is denied for a component of the path prefix.
D 12
.TP 15
I 5
[ELOOP]
E 12
I 12
.It Bq Er ELOOP
E 12
Too many symbolic links were encountered in translating the pathname.
D 12
.TP 15
E 5
[EFAULT]
.I Buf
E 12
I 12
.It Bq Er EFAULT
D 16
.Fa Buf
E 16
I 16
.Fa Sb
E 16
E 12
or
D 12
.I name
E 12
I 12
.Em name
E 12
points to an invalid address.
I 7
D 12
.TP 15
[EIO]
E 12
I 12
.It Bq Er EIO
E 12
An I/O error occurred while reading from or writing to the file system.
E 7
I 3
D 5
.TP 15
[ELOOP]
Too many symbolic links were encountered in translating the pathname.
E 5
E 3
E 2
D 12
.PP
D 2
.I st_atime
is the file was last read.
For reasons of efficiency, it is not set when a directory
is searched, although this would be more logical.
.I st_mtime
is the time the file was last written or created.
It is not set by changes of owner, group, link count, or mode.
.I st_ctime
is set both both by writing and changing the i-node.
E 2
I 2
.I Fstat
will fail if one or both of the following are true:
.TP 15
[EBADF]
.I Fildes
E 12
I 12
.El
.Pp
.Bl -tag -width [EFAULT]
.Fn Fstat
will fail if:
.It Bq Er EBADF
.Fa fd
E 12
is not a valid open file descriptor.
D 12
.TP 15
[EFAULT]
.I Buf
E 12
I 12
.It Bq Er EFAULT
D 16
.Fa Buf
E 16
I 16
.Fa Sb
E 16
E 12
points to an invalid address.
I 7
D 12
.TP 15
[EIO]
E 12
I 12
.It Bq Er EIO
E 12
An I/O error occurred while reading from or writing to the file system.
E 7
D 3
.TP 15
[ELOOP]
Too many symbolic links were encountered in translating the pathname.
E 3
D 12
.SH CAVEAT
E 12
I 12
.El
D 18
.Sh CAVEAT
E 12
D 16
The fields in the stat structure currently marked 
E 16
I 16
The fields in the stat structure currently marked
E 16
D 12
.IR st_spare1 ,
.IR st_spare2 ,
E 12
I 12
.Fa st_spare1 ,
.Fa st_spare2 ,
E 12
and
D 12
.I st_spare3
E 12
I 12
.Fa st_spare3
E 12
are present in preparation for inode time stamps expanding
D 6
to 64 bits.  This, however, can break certain programs which
E 6
I 6
to 64 bits.  This, however, can break certain programs that
E 6
depend on the time stamps being contiguous (in calls to
D 12
.IR utimes (2)).
E 2
.SH "SEE ALSO"
D 2
ls(1), filsys(5)
.SH DIAGNOSTICS
Zero is returned if a status is available;
\-1 if the file cannot be found.
.SH ASSEMBLER
.nf
(stat = 18.)
.B sys stat; name; buf
E 2
I 2
chmod(2), chown(2), utimes(2)
.SH BUGS
E 12
I 12
.Xr utimes 2 ) .
E 18
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr chown 2 ,
.Xr utimes 2
I 13
.Xr symlink 7
E 13
.Sh BUGS
E 12
Applying
D 12
.I fstat
E 12
I 12
.Xr fstat
E 12
D 3
to a socket returns a zero'd buffer.
E 3
I 3
to a socket (and thus to a pipe)
D 8
returns a zero'd buffer, except for the blocksize field.
E 3
E 2
.PP
D 2
(fstat = 28.)
(file descriptor in r0)
.B sys fstat; buf
.fi
E 2
I 2
D 6
The list of calls which modify the various fields should be carefully
E 6
I 6
The list of calls that modify the various fields should be carefully
E 6
checked with reality.
E 8
I 8
returns a zero'd buffer,
except for the blocksize field,
and a unique device and inode number.
I 12
.Sh STANDARDS
The
.Fn stat
and
.Fn fstat
function calls are expected to
conform to IEEE Std 1003.1-1988
.Pq Dq Tn POSIX .
.Sh HISTORY
A
.Nm lstat
function call appeared in
.Bx 4.2 .
E 12
E 8
E 2
E 1
