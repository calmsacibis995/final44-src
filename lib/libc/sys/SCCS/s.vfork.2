h47058
s 00002/00002/00098
d D 8.1 93/06/04 13:20:48 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00060/00044/00040
d D 6.3 91/03/10 23:41:33 cael 5 4
c man page macro and text revisions (-mdoc version 3)
e
s 00002/00002/00082
d D 6.2 85/06/30 17:06:51 sechrest 4 3
c improved english
e
s 00001/00001/00083
d D 6.1 85/05/09 18:21:47 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00013/00020/00071
d D 5.1 85/05/09 18:21:17 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00091/00000/00000
d D 4.1 85/05/09 18:20:45 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 5
I 5
D 6
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
E 5
.\"
D 5
.\"	%W% (Berkeley) %G%
E 5
I 5
.\" %sccs.include.redist.man%
E 5
.\"
D 2
.TH VFORK 2V
E 2
I 2
D 3
.TH VFORK 2 "2 July 1983"
E 3
I 3
D 5
.TH VFORK 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
vfork \- spawn new process in a virtual memory efficient way
.SH SYNOPSIS
D 2
.B vfork()
E 2
I 2
.B pid = vfork()
.br
.B int pid;
E 2
.SH DESCRIPTION
.I Vfork
E 5
I 5
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt VFORK 2
.Os BSD 4
.Sh NAME
.Nm vfork
.Nd spawn new process in a virtual memory efficient way
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft int
.Fn vfork void
.Sh DESCRIPTION
.Fn Vfork
E 5
can be used to create new processes without fully copying the address
space of the old process, which is horrendously inefficient in a paged
environment.  It is useful when the purpose of
D 5
.IR fork (2)
E 5
I 5
.Xr fork 2
E 5
would have been to create a new system context for an
D 2
.I exec.
E 2
I 2
D 5
.IR execve .
E 2
.I Vfork
E 5
I 5
.Xr execve .
.Fn Vfork
E 5
differs from
D 5
.I fork
E 5
I 5
.Xr fork
E 5
in that the child borrows the parent's memory and thread of
control until a call to
D 2
.IR exec (2)
E 2
I 2
D 5
.IR execve (2)
E 5
I 5
.Xr execve 2
E 5
E 2
or an exit (either by a call to
D 5
.IR exit (2)
E 5
I 5
.Xr exit 2
E 5
or abnormally.)
The parent process is suspended while the child is using its resources.
D 5
.PP
.I Vfork
E 5
I 5
.Pp
.Fn Vfork
E 5
returns 0 in the child's context and (later) the pid of the child in
the parent's context.
D 5
.PP
.I Vfork
E 5
I 5
.Pp
.Fn Vfork
E 5
can normally be used just like
D 5
.I fork.
E 5
I 5
.Xr fork .
E 5
It does not work, however, to return while running in the childs context
D 4
from the procedure which called
E 4
I 4
from the procedure that called
E 4
D 5
.I vfork
E 5
I 5
.Fn vfork
E 5
since the eventual return from
D 5
.I vfork
E 5
I 5
.Fn vfork
E 5
would then return to a no longer existent stack frame.
Be careful, also, to call
D 5
.I _exit
E 5
I 5
.Xr _exit
E 5
rather than
D 5
.I exit
E 5
I 5
.Xr exit
E 5
if you can't
D 2
.I exec,
E 2
I 2
D 5
.IR execve ,
E 5
I 5
.Xr execve ,
E 5
E 2
since
D 5
.I exit
E 5
I 5
.Xr exit
E 5
will flush and close standard I/O channels, and thereby mess up the
parent processes standard I/O data structures.
(Even with
D 5
.I fork
E 5
I 5
.Xr fork
E 5
it is wrong to call
D 5
.I exit
E 5
I 5
.Xr exit
E 5
since buffered data would then be flushed twice.)
D 2
.PP
Similarly when using the new signal mechanism of
.IR sigset (3)
mechanism be sure to call
.I sigsys
rather than
.IR signal (2).
E 2
D 5
.SH SEE ALSO
D 2
fork(2), exec(2), sigsys(2), wait(2),
E 2
I 2
fork(2), execve(2), sigvec(2), wait(2),
E 2
.SH DIAGNOSTICS
E 5
I 5
.Sh SEE ALSO
.Xr fork 2 ,
.Xr execve 2 ,
.Xr sigvec 2 ,
.Xr wait 2 ,
.Sh DIAGNOSTICS
E 5
Same as for
D 5
.IR fork .
.SH BUGS
E 5
I 5
.Xr fork .
.Sh BUGS
E 5
D 2
This system call may be unnecessary if the system sharing mechanisms allow
.I fork
to be implemented more efficiently; users should not depend on the memory
E 2
I 2
This system call will be eliminated when proper system sharing
mechanisms are implemented. 
Users should not depend on the memory
E 2
sharing semantics of
D 5
.I vfork
E 5
I 5
.Xr vfork
E 5
D 2
as it could, in that case, be made synonymous to
.I fork.
E 2
I 2
as it will, in that case, be made synonymous to
D 5
.IR fork .
E 2
.PP
E 5
I 5
.Xr fork .
.Pp
E 5
To avoid a possible deadlock situation,
D 4
processes which are children in the middle
E 4
I 4
processes that are children in the middle
E 4
of a
D 5
.I vfork
are never sent SIGTTOU or SIGTTIN signals; rather,
E 5
I 5
.Fn vfork
are never sent
.Dv SIGTTOU
or
.Dv SIGTTIN
signals; rather,
E 5
output or
D 5
.IR ioctl s
E 5
I 5
.Xr ioctl 2
calls
E 5
are allowed
and input attempts result in an end-of-file indication.
I 5
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 3.0 .
E 5
D 2
.PP
This call is peculiar to this version of UNIX.
E 2
E 1
