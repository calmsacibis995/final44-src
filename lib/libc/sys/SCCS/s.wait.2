h52805
s 00003/00003/00266
d D 8.2 94/04/19 06:57:06 bostic 9 8
c spell
e
s 00002/00002/00267
d D 8.1 93/06/04 13:20:52 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00180/00170/00089
d D 6.5 91/03/10 23:41:38 cael 7 6
c man page macro and text revisions (-mdoc version 3)
e
s 00025/00016/00234
d D 6.4 91/03/02 15:14:43 karels 6 5
c document use of null status pointer, distinguish between ptr and value
e
s 00165/00054/00085
d D 6.3 89/08/14 17:49:17 karels 5 4
c converted to POSIX (I think)
e
s 00004/00004/00135
d D 6.2 85/06/30 17:04:05 sechrest 4 3
c improved english
e
s 00003/00003/00136
d D 6.1 85/05/09 16:43:48 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00103/00048/00036
d D 5.1 85/05/09 16:43:32 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00084/00000/00000
d D 4.1 85/05/09 16:43:16 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1980 Regents of the University of California.
E 6
I 6
D 8
.\" Copyright (c) 1980, 1991 Regents of the University of California.
E 6
D 7
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
.\" All rights reserved.
E 8
I 8
D 9
.\" Copyright (c) 1980, 1991, 1993
E 9
I 9
.\" Copyright (c) 1980, 1991, 1993, 1994
E 9
.\"	The Regents of the University of California.  All rights reserved.
E 8
E 7
.\"
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\" %sccs.include.redist.man%
E 7
.\"
D 2
.TH WAIT 2 
E 2
I 2
D 3
.TH WAIT 2 "27 July 1983"
E 3
I 3
D 7
.TH WAIT 2 "%Q%"
E 3
E 2
.UC 4
.SH NAME
D 2
wait \- wait for process to terminate
E 2
I 2
D 5
wait, wait3 \- wait for process to terminate
E 5
I 5
wait, waitpid, wait4, wait3 \- wait for process to terminate
E 5
E 2
.SH SYNOPSIS
I 2
.ft B
E 2
.nf
I 5
#include <sys/types.h>
E 5
D 2
.B wait(status)
.B int *status;
.fi
E 2
I 2
#include <sys/wait.h>
E 2
.PP
D 2
.B wait(0)
E 2
I 2
.ft B
D 6
pid = wait(status)
E 6
I 6
pid = wait(statp)
E 6
D 5
int pid;
union wait *status;
E 5
I 5
pid_t pid;
D 6
int *status;
E 6
I 6
int *statp;
E 6
E 5
.PP
.ft B
D 5
pid = wait(0)
int pid;
E 5
I 5
D 6
pid = waitpid(wpid, status, options)
E 6
I 6
pid = waitpid(wpid, statp, options)
E 6
pid_t pid, wpid;
D 6
int *status;
E 6
I 6
int *statp;
E 6
int options;
E 5
.PP
.ft B
#include <sys/time.h>
#include <sys/resource.h>
.PP
.ft B
I 5
D 6
pid = wait4(wpid, status, options, rusage)
E 6
I 6
pid = wait4(wpid, statp, options, rusage)
E 6
pid_t pid, wpid;
D 6
int *status;
E 6
I 6
int *statp;
E 6
int options;
struct rusage *rusage;
.PP
.ft B
E 5
D 6
pid = wait3(status, options, rusage)
E 6
I 6
pid = wait3(statp, options, rusage)
E 6
D 5
int pid;
union wait *status;
E 5
I 5
pid_t pid;
D 6
int *status;
E 6
I 6
int *statp;
E 6
E 5
int options;
struct rusage *rusage;
.fi
E 2
.SH DESCRIPTION
.I Wait
causes its caller to delay until a signal is received or
one of its child
processes terminates.
If any child has died since the last
D 2
.I wait,
return is immediate;
if there are no children, return is immediate with
the error bit set
(resp. with a value of \-1 returned).
The normal return yields the process ID of the terminated child.
In the case of several children several
.I wait
calls are needed
to learn of all the deaths.
E 2
I 2
.IR wait ,
return is immediate, returning the process id and
exit status of one of the terminated
children.
If there are no children, return is immediate with
the value \-1 returned.
E 2
.PP
E 7
I 7
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt WAIT 2
.Os BSD 4
.Sh NAME
.Nm wait ,
.Nm waitpid ,
.Nm wait4 ,
.Nm wait3
D 9
.Nd wait for process terminatation
E 9
I 9
.Nd wait for process termination
E 9
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/wait.h>
.Ft pid_t
.Fn wait "int *status"
.Fd #include <sys/time.h>
.Fd #include <sys/resource.h>
.Ft pid_t
.Fn waitpid "pid_t wpid" "int *status" "int options"
.Ft pid_t
.Fn wait3 "int *status" "int options" "struct rusage *rusage"
.Ft pid_t
.Fn wait4 "pid_t wpid" "int *status" "int options" "struct rusage *rusage"
.Sh DESCRIPTION
The
.Fn wait
function suspends execution of its calling process until
.Fa status
information is available for a terminated child process,
or a signal is received.
E 7
D 2
If
.RI (int) status
is nonzero, the high byte of the word pointed to
receives the low byte of the
argument of
E 2
I 2
On return from a successful 
D 7
.I wait
D 6
call, 
I 5
the
E 5
.I status
D 5
is nonzero, and the high byte of 
.I status
contains the low byte of the argument to
E 2
.I exit
D 2
when the child terminated.
The low byte
receives the termination status
of the process.
E 2
I 2
supplied by the child process;
the low byte of 
.I status
contains the termination status of the process.
A more precise definition of the
.I status
word is given in
.RI < sys/wait.h >.
E 5
I 5
area contains termination information about the process that exited
E 6
I 6
call with a non-null
.I statp
pointer, 
the location to which
.I statp
points contains termination information about the process that exited
E 7
I 7
.Fn wait
call, 
the
.Fa status
area contains termination information about the process that exited
E 7
E 6
as defined below.
E 5
D 7
.PP
E 7
I 7
.Pp
E 7
D 5
.I Wait3
provides an alternate interface for programs
D 4
which must not block when collecting the status
E 4
I 4
that must not block when collecting the status
E 4
of child processes.  The
E 5
I 5
The
D 7
.I wait4
E 7
I 7
.Fn wait4
E 7
call provides a more general interface for programs
D 7
that wish to wait for certain child processes,
that wish resource utilization statistics accummulated by child processes,
E 7
I 7
that need to wait for certain child processes,
D 9
that need resource utilization statistics accummulated by child processes,
E 9
I 9
that need resource utilization statistics accumulated by child processes,
E 9
E 7
or that require options.
The other wait functions are implemented using
D 7
.IR wait4 .
.PP
E 7
I 7
.Fn wait4 .
.Pp
E 7
The
D 7
.I wpid
E 7
I 7
.Fa wpid
E 7
parameter specifies the set of child processes for which to wait.
If
D 7
.I wpid
is \-1, the call waits for any child process.
E 7
I 7
.Fa wpid
is -1, the call waits for any child process.
E 7
If
D 7
.I wpid
E 7
I 7
.Fa wpid
E 7
is 0,
the call waits for any child process in the process group of the caller.
If
D 7
.I wpid
E 7
I 7
.Fa wpid
E 7
is greater than zero, the call waits for the process with process id
D 7
.IR wpid .
E 7
I 7
.Fa wpid .
E 7
If
D 7
.I wpid
is less than \-1, the call waits for any process whose process group id
E 7
I 7
.Fa wpid
is less than -1, the call waits for any process whose process group id
E 7
equals the absolute value of
D 7
.IR wpid .
.PP
E 7
I 7
.Fa wpid .
.Pp
E 7
The
E 5
D 6
.I status
E 6
I 6
D 7
.I statp
E 7
I 7
.Fa status
E 7
E 6
D 5
parameter is defined as above.  The
E 5
I 5
parameter is defined below.  The
E 5
D 7
.I options
E 7
I 7
.Fa options
E 7
D 5
parameter is used to indicate the call should not block if
D 4
there are no processes which wish to report status (WNOHANG),
D 3
and/or that only children of the current process which are stopped
due to a SIGTTIN, SIGTTOU, SIGTSTP, or SIGSTOP signal should have
E 3
I 3
and/or that children of the current process which are stopped
E 4
I 4
there are no processes that wish to report status (WNOHANG),
and/or that children of the current process that are stopped
E 4
due to a SIGTTIN, SIGTTOU, SIGTSTP, or SIGSTOP signal should also have
E 3
their status reported (WUNTRACED).  If
E 5
I 5
parameter contains the bitwise OR of any of the following options.
D 7
The WNOHANG option
E 7
I 7
The
.Dv WNOHANG
option
E 7
is used to indicate that the call should not block if
there are no processes that wish to report status.
D 7
If the WUNTRACED option is set,
E 7
I 7
If the
.Dv WUNTRACED
option is set,
E 7
children of the current process that are stopped
D 7
due to a SIGTTIN, SIGTTOU, SIGTSTP, or SIGSTOP signal also have
E 7
I 7
due to a
.Dv SIGTTIN , SIGTTOU , SIGTSTP ,
or
.Dv SIGSTOP
signal also have
E 7
their status reported.
D 7
.PP
E 7
I 7
.Pp
E 7
If
E 5
D 7
.I rusage
E 7
I 7
.Fa rusage
E 7
is non-zero, a summary of the resources used by the terminated
process and all its
children is returned (this information is currently not available
for stopped processes).
D 7
.PP
When the WNOHANG option is specified and no processes
E 7
I 7
.Pp
When the
.Dv WNOHANG
option is specified and no processes
E 7
wish to report status, 
D 5
.I wait3
E 5
I 5
D 7
.I wait4
E 7
I 7
.Fn wait4
E 7
E 5
returns a 
D 7
.I pid
E 7
I 7
process id
E 7
D 5
of 0.  The WNOHANG and WUNTRACED options may be combined by 
.IR or 'ing
the two values.
E 5
I 5
of 0.
D 7
.PP
E 7
I 7
.Pp
E 7
The
D 7
.I waitpid
E 7
I 7
.Fn waitpid
E 7
call is identical to
D 7
.I wait4
E 7
I 7
.Fn wait4
E 7
with an
D 7
.I rusage
E 7
I 7
.Fa rusage
E 7
value of zero.
The older
D 7
.I wait3
E 7
I 7
.Fn wait3
E 7
call is the same as
D 7
.I wait4
E 7
I 7
.Fn wait4
E 7
with a
D 7
.I wpid
value of \-1.
.PP
D 6
The following macros may be used to test the manner of exit of the process.
E 6
I 6
If the
.I statp
parameter is not null,
the status of the process is placed in the location to which
.I statp
points.
The following macros may be used with that status information
to test the state and/or manner of exit of the process.
E 7
I 7
.Fa wpid
value of -1.
.Pp
The following macros may be used to test the manner of exit of the process.
E 7
E 6
One of the first three macros will evaluate to a non-zero (true) value:
D 7
.IP WIFEXITED(status)
E 7
I 7
.Bl -tag -width Ds
.It Fn WIFEXITED status
E 7
True if the process terminated normally by a call to
D 7
.IR _exit (2)
E 7
I 7
.Xr _exit 2
E 7
or
D 7
.IR exit (2).
.IP WIFSIGNALED(status)
E 7
I 7
.Xr exit 2 .
.It Fn WIFSIGNALED status
E 7
True if the process terminated due to receipt of a signal.
D 7
.IP WIFSTOPPED(status)
E 7
I 7
.It Fn WIFSTOPPED status
E 7
True if the process has not terminated, but has stopped and can be restarted.
This macro can be true only if the wait call specified the
D 7
WUNTRACED
E 7
I 7
.Dv WUNTRACED
E 7
option
or if the child process is being traced (see
D 7
.IR ptrace (2)).
.LP
E 7
I 7
.Xr ptrace 2 ) .
.El
.Pp
E 7
Depending on the values of those macros, the following macros
produce the remaining status information about the child process:
D 7
.IP WEXITSTATUS(status)
If WIFEXITED(status) is true, evaluates to the low-order 8 bits
E 7
I 7
.Bl -tag -width Ds
.It Fn WEXITSTATUS status
If
.Fn WIFEXITED status
is true, evaluates to the low-order 8 bits
E 7
of the argument passed to
D 7
.IR _exit (2)
E 7
I 7
.Xr _exit 2
E 7
or
D 7
.IR exit (2)
E 7
I 7
.Xr exit 2
E 7
by the child.
D 7
.IP WTERMSIG(status)
If WIFSIGNALED(status) is true, evaluates to the number of the signal
E 7
I 7
.It Fn WTERMSIG status
If
.Fn WIFSIGNALED status
is true, evaluates to the number of the signal
E 7
that caused the termination of the process.
D 7
.IP WCOREDUMP(status)
If WIFSIGNALED(status) is true, evaluates as true if the termination
E 7
I 7
.It Fn WCOREDUMP status
If
.Fn WIFSIGNALED status
is true, evaluates as true if the termination
E 7
of the process was accompanied by the creation of a core file
containing an image of the process when the signal was received.
D 7
.IP WSTOPSIG(status)
If WIFSTOPPED(status) is true, evaluates to the number of the signal
E 7
I 7
.It Fn WSTOPSIG status
If
.Fn WIFSTOPPED status
is true, evaluates to the number of the signal
E 7
that caused the process to stop.
E 5
D 7
.SH NOTES
E 7
I 7
.El
.Sh NOTES
E 7
E 2
See
D 2
.IR signal (2)
E 2
I 2
D 5
.IR sigvec (2)
E 2
for a list of termination statuses (signals);
0 status indicates normal termination.
A special status (0177) is returned for a stopped process
D 2
which has not terminated and can be restarted.
See
E 2
I 2
D 4
which has not terminated and can be restarted;
E 4
I 4
that has not terminated and can be restarted;
E 4
see
E 2
.IR ptrace (2).
If the 0200 bit of the termination status
is set,
a core image of the process was produced
by the system.
E 5
I 5
D 7
.IR sigaction (2)
E 7
I 7
.Xr sigaction 2
E 7
for a list of termination signals.
A status of 0 indicates normal termination.
E 5
D 7
.PP
If the parent process terminates without
waiting on its children,
the initialization process
(process ID = 1)
inherits the children.
.PP
E 7
I 7
.Pp
If a parent process terminates without
waiting for all of its child processes to terminate,
the remaining child processes are assigned the parent
process 1 ID (the init process ID).
.Pp
E 7
D 2
There is another entry
.IR wait3 (2)
which is provides additional options needed by the shell
.IR csh (1)
to do job control.
.SH "SEE ALSO"
wait3(2), exit(2), fork(2), signal(2)
.SH DIAGNOSTICS
Returns
\-1 if there are no children not previously waited for.
.SH "ASSEMBLER (PDP-11)"
(wait = 7.)
.br
.B sys  wait
.br
(process ID in r0)
.br
(status in r1)
E 2
I 2
D 5
.I Wait
and
.I wait3
are automatically restarted when a process receives a
signal while awaiting termination of a child process.
E 5
I 5
If a signal is caught while any of the
D 7
.I wait
E 7
I 7
.Fn wait
E 7
calls is pending,
the call may be interrupted or restarted when the signal-catching routine
returns,
depending on the options in effect for the signal;
see
D 7
.IR intro (2),
E 7
I 7
.Xr intro 2 ,
E 7
System call restart.
E 5
D 7
.SH "RETURN VALUE
If \fIwait\fP returns due to a stopped
E 7
I 7
.Sh RETURN VALUES
If
.Fn wait
returns due to a stopped
E 7
or terminated child process, the process ID of the child
D 7
is returned to the calling process.  Otherwise, a value of \-1
is returned and \fIerrno\fP is set to indicate the error.
E 2
.PP
E 7
I 7
is returned to the calling process.  Otherwise, a value of -1
is returned and
.Va errno
is set to indicate the error.
.Pp
E 7
D 2
The high byte of the status is
the low byte of r0 in the child at termination.
E 2
I 2
D 5
.I Wait3
returns \-1 if there are no children not previously waited
for;  0 is returned if WNOHANG is specified and there are
no stopped or exited children.
E 5
I 5
If
D 7
.IR wait4 ,
.I wait3
E 7
I 7
.Fn wait4 ,
.Fn wait3
E 7
or
D 7
.I waitpid
E 7
I 7
.Fn waitpid
E 7
returns due to a stopped
or terminated child process, the process ID of the child
is returned to the calling process.
If there are no children not previously awaited,
D 7
\-1 is returned with
.I errno
set to [ECHILD].
Otherwise, if WNOHANG is specified and there are
E 7
I 7
-1 is returned with
.Va errno
set to
.Bq Er ECHILD .
Otherwise, if
.Dv WNOHANG
is specified and there are
E 7
no stopped or exited children,
0 is returned.
If an error is detected or a caught signal aborts the call,
D 7
a value of \-1
is returned and \fIerrno\fP is set to indicate the error.
E 5
.SH ERRORS
.I Wait
will fail and return immediately if one or more of the following
are true:
.TP 15
[ECHILD]
E 7
I 7
a value of -1
is returned and
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn Wait
will fail and return immediately if:
.Bl -tag -width Er
.It Bq Er ECHILD
E 7
The calling process has no existing unwaited-for
child processes.
D 7
.TP 15
[EFAULT]
D 6
The \fIstatus\fP or \fIrusage\fP arguments point to an illegal address.
E 6
I 6
The \fIstatp\fP or \fIrusage\fP arguments point to an illegal address.
E 7
I 7
.It Bq Er EFAULT
The
.Fa status
or
.Fa rusage
arguments point to an illegal address.
E 7
E 6
I 5
(May not be detected before exit of a child process.)
D 7
.TP 15
[EINTR]
E 7
I 7
.It Bq Er EINTR
E 7
The call was interrupted by a caught signal,
D 7
or the signal did not have the SA_RESTART flag set.
.SH STANDARDS
E 7
I 7
or the signal did not have the
.Dv SA_RESTART
flag set.
.El
.Sh STANDARDS
E 7
The
D 7
.I wait
E 7
I 7
.Fn wait
E 7
and
D 7
.I waitpid
E 7
I 7
.Fn waitpid
E 7
functions are defined by POSIX;
D 7
.I wait4
E 7
I 7
.Fn wait4
E 7
and
D 7
.I wait3
E 7
I 7
.Fn wait3
E 7
are not specified by POSIX.
D 7
The WCOREDUMP macro
E 7
I 7
The
.Fn WCOREDUMP
macro
E 7
and the ability to restart a pending
D 7
.I wait
E 7
I 7
.Fn wait
E 7
call are extensions to the POSIX interface.
E 5
D 7
.SH "SEE ALSO"
D 5
exit(2)
E 5
I 5
exit(2), sigaction(2)
E 7
I 7
.Sh SEE ALSO
.Xr exit 2 ,
.Xr sigaction 2
.Sh HISTORY
A
.Nm
function call appeared in Version 6 AT&T UNIX.
E 7
E 5
E 2
E 1
