h47386
s 00002/00002/00095
d D 8.1 93/06/04 16:22:21 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00064/00051/00033
d D 6.4 91/04/19 14:30:50 cael 6 5
c macro and text revision (-mdoc version 3)
e
s 00003/00001/00081
d D 6.3 89/05/17 21:53:31 bostic 5 4
c move to compatibility library
e
s 00001/00016/00081
d D 6.2 86/05/12 20:22:42 karels 4 3
c it's already gone
e
s 00001/00001/00096
d D 6.1 85/05/09 19:21:27 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00012/00008/00085
d D 5.1 85/05/09 19:20:58 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00093/00000/00000
d D 4.1 85/05/09 19:20:31 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 7
.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
E 6
.\"
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\" %sccs.include.redist.man%
E 6
.\"
D 2
.TH VLIMIT 2V
E 2
I 2
D 3
.TH VLIMIT 3C "18 July 1983"
E 3
I 3
D 6
.TH VLIMIT 3C "%Q%"
E 3
E 2
.UC 4
.SH NAME
vlimit \- control maximum system resource consumption
.SH SYNOPSIS
.B "#include <sys/vlimit.h>"
.PP
.B vlimit(resource, value)
.SH DESCRIPTION
I 2
.ft B
E 6
I 6
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt VLIMIT 3
.Os BSD 4
.Sh NAME
.Nm vlimit
.Nd control maximum system resource consumption
.Sh SYNOPSIS
.Fd #include <sys/vlimit.h>
.Fn vlimit resource value
.Sh DESCRIPTION
.Bf -symbolic
E 6
D 5
This facility is superseded by getrlimit(2).
E 5
I 5
This interface is obsoleted by getrlimit(2).
D 6
.br
E 6
It is available from the compatibility library, libcompat.
E 5
D 6
.ft R
.PP
E 6
I 6
.Ef
.Pp
E 6
E 2
Limits the consumption by the current process and each process
it creates to not individually exceed 
D 6
.I value
E 6
I 6
.Fa value
E 6
on the specified
D 6
.I resource.
E 6
I 6
.Fa resource .
E 6
If
D 6
.I value
E 6
I 6
.Fa value
E 6
is specified as \-1, then the current limit is returned and the
limit is unchanged.
The resources which are currently controllable are:
D 6
.TP 15
D 2
.B LIM_NORAISE
E 2
I 2
LIM_NORAISE
E 6
I 6
.Bl -tag -width LIM_NORAISE
.It Dv LIM_NORAISE
E 6
E 2
A pseudo-limit; if set non-zero then the limits may not be raised.
D 6
Only the super-user may remove the \fInoraise\fR restriction.
.TP 15
D 2
.B LIM_CPU
E 2
I 2
LIM_CPU
E 6
I 6
Only the super-user may remove the
.Em noraise
restriction.
.It Dv LIM_CPU
E 6
E 2
the maximum
number of cpu-seconds to be used by each process
D 6
.TP 15
D 2
.B LIM_FSIZE
E 2
I 2
LIM_FSIZE
E 6
I 6
.It Dv LIM_FSIZE
E 6
E 2
the largest single file which can be created
D 6
.TP 15
D 2
.B LIM_DATA
E 2
I 2
LIM_DATA
E 6
I 6
.It Dv LIM_DATA
E 6
E 2
the maximum growth of the data+stack region via
D 6
.IR sbrk (2)
E 6
I 6
.Xr sbrk 2
E 6
beyond the end of the program text
D 6
.TP 15
D 2
.B LIM_STACK
E 2
I 2
LIM_STACK
E 6
I 6
.It Dv LIM_STACK
E 6
E 2
the maximum
size of the automatically-extended stack region
D 6
.TP 15
D 2
.B LIM_CORE
E 2
I 2
LIM_CORE
E 6
I 6
.It Dv LIM_CORE
E 6
E 2
the size of the largest core dump that will be created.
D 6
.TP 15
D 2
.B LIM_MAXRSS
E 2
I 2
LIM_MAXRSS
E 6
I 6
.It Dv LIM_MAXRSS
E 6
E 2
a soft limit for the amount of physical memory (in bytes) to be given
to the program.  If memory is tight, the system will prefer to take memory
D 6
from processes which are exceeding their declared LIM_MAXRSS.
.PP
E 6
I 6
from processes which are exceeding their declared
.Dv LIM_MAXRSS.
.El
.Pp
E 6
Because this information is stored in the per-process information
this system call must be executed directly by the shell if it
is to affect all future processes created by the shell;
D 6
.I limit
E 6
I 6
.Xr limit
E 6
is thus a built-in command to
D 6
.IR csh (1).
.PP
E 6
I 6
.Xr csh 1 .
.Pp
E 6
The system refuses to extend the data or stack space when the limits
would be exceeded in the normal way; a
D 6
.I break
E 6
I 6
.Xr break 2
E 6
call fails if the data space limit is reached, or the process is
killed when the stack limit is reached (since the stack cannot be
extended, there is no way to send a signal!).
D 6
.PP
A file i/o operation which would create a file which is too large
will cause a signal SIGXFSZ to be generated, this normally terminates
E 6
I 6
.Pp
A file
.Tn I/O
operation which would create a file which is too large
will cause a signal
.Dv SIGXFSZ
to be generated, this normally terminates
E 6
the process, but may be caught.
D 6
When the cpu time limit is exceeded, a signal SIGXCPU is sent to the
E 6
I 6
When the cpu time limit is exceeded, a signal
.Dv SIGXCPU
is sent to the
E 6
offending process; to allow it time to process the signal it is
D 6
given 5 seconds grace by raising the cpu time limit.
.SH SEE ALSO
csh(1)
.SH BUGS
D 4
If LIM_NORAISE is set, then no grace should be given when the cpu
time limit is exceeded.
.PP
There should be 
.I limit
and
.I unlimit
commands in
.IR sh (1)
as well as in
.IR csh.
.PP
This call is peculiar to this version of UNIX.
The options and specifications of this system call and even the call itself
are subject to change.  It may be extended or replaced by other
facilities in future versions of the system.
E 4
I 4
LIM_NORAISE no longer exists.
E 6
I 6
given 5 seconds grace by raising the
.Tn CPU
time limit.
.Sh SEE ALSO
.Xr csh 1
.Sh HISTORY
The
.Fn vlimit
function appeared in 
.Bx 4.2 .
.Sh BUGS
.Dv LIM_NORAISE
no longer exists.
E 6
E 4
E 1
