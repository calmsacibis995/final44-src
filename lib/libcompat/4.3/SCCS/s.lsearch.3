h63793
s 00002/00002/00074
d D 8.1 93/06/04 16:25:07 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00002/00075
d D 5.6 91/04/20 10:12:38 cael 6 5
c text changes or conversion to -mdoc (version 3)
e
s 00049/00047/00028
d D 5.5 91/04/19 14:30:43 cael 5 4
c macro and text revision (-mdoc version 3)
e
s 00001/00001/00074
d D 5.4 91/03/19 14:30:54 bostic 4 3
c reference only bsearch(3) and db(3)
e
s 00001/00011/00074
d D 5.3 90/06/23 17:42:43 trent 3 2
c new copyright notice
e
s 00021/00047/00064
d D 5.2 90/02/21 12:58:55 bostic 2 1
c minor manual page corrections; rip out rlsearch() and wlsearch().
e
s 00111/00000/00000
d D 5.1 89/10/14 11:39:38 bostic 1 0
c date and time created 89/10/14 11:39:38 by bostic
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1989 The Regents of the University of California.
E 5
I 5
D 7
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 5
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
.\"
D 3
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 3
I 3
.\" %sccs.include.redist.man%
E 3
.\"
D 5
.\"	%W% (Berkeley) %G%
E 5
I 5
.\"     %W% (Berkeley) %G%
E 5
.\"
D 5
.TH LSEARCH 3 "%Q%"
.UC 7
.SH NAME
D 2
lsearch, lfind, rlsearch, wlsearch \- linear searching routines
E 2
I 2
lsearch, lfind, \- linear searching routines
E 2
.SH SYNOPSIS
.ft B
.nf
D 2
char *lsearch(key, base, nelp, width, compar)
char *key, base;
unsigned int *nelp, width;
int (*compar)();
E 2
I 2
char *
lsearch(const void *key, const void *base,
size_t *nelp, size_t width, 
int (*compar) (void *, void *));
E 2
.sp
D 2
char *lfind(key, base, nelp, width, compar)
char *key, base;
unsigned int *nelp, width;
int (*compar)();
.sp
char *rlsearch(fd, nelp, width)
int fd;
unsigned int *nelp, *width;
.sp
wlsearch(fd, base, nelp, width)
int fd;
char *base;
unsigned int nelp, width;
E 2
I 2
char *
lfind(const void *key, const void *base,
size_t *nelp, size_t width,
int (*compar) (void *, void *));
E 2
.ft R
.SH DESCRIPTION
I 2
.ft B
E 5
I 5
.Dd %Q%
.Dt LSEARCH 3
.Os
.Sh NAME
.Nm lsearch ,
.Nm lfind,
.Nd linear searching routines
.Sh SYNOPSIS
.Ft char *
.Fn lsearch "const void *key" "const void *base" "size_t *nelp" "size_t width" "int (*compar)(void *, void *)"
.Ft char *
.Fn lfind "const void *key" "const void *base" "size_t *nelp" "size_t width" "int (*compar)(void *, void *)"
.Sh DESCRIPTION
.Bf -symbolic
E 5
This interface was obsolete before it was written.
It is available from the compatibility library, libcompat.
D 5
.ft R
.PP
E 5
I 5
.Ef
.Pp
E 5
E 2
The functions
D 5
.IR lsearch ,
E 5
I 5
.Fn lsearch ,
E 5
D 2
.IR lfind ,
.IR rlsearch ,
E 2
and
D 2
.I wlsearch
E 2
I 2
D 5
.IR lfind
E 5
I 5
.Fn lfind
E 5
E 2
provide basic linear searching functionality.
D 5
.PP
.I Base
E 5
I 5
.Pp
.Fa Base
E 5
is the pointer to the beginning of an array.
D 5
.I Nelp
E 5
I 5
The argument
.Fa nelp
E 5
is the current number of elements in the array, where each element
is
D 5
.I width
E 5
I 5
.Fa width
E 5
bytes long.
D 5
.I Compar
E 5
I 5
The
.Fa compar
function
E 5
is a comparison routine which is used to compare two elements.
D 2
It is called with two arguments that are pointers to the two elements
to be compared and must return 0 if the elements are equal and non-zero
otherwise.
E 2
I 2
D 5
It is called with two arguments that point to the 
.I key
E 5
I 5
It takes two arguments which point to the
.Fa key
E 5
object and to an array member, in that order, and must return an integer
D 5
less than, equal to, or greater than zero if the 
.I key
E 5
I 5
less than, equivalent to, or greater than zero if the 
.Fa key
E 5
object is considered, respectively, to be less than, equal to, or greater
than the array member.
E 2
D 5
.PP
.I Lsearch
E 5
I 5
.Pp
The
.Fn lsearch
E 5
and
D 5
.I lfind
E 5
I 5
.Fn lfind
functions
E 5
return a pointer into the array referenced by
D 5
.I base
E 5
I 5
.Fa base
E 5
where
D 5
.I key
E 5
I 5
.Fa key
E 5
is located.
If
D 5
.I key
E 5
I 5
.Fa key
E 5
does not exist,
D 5
.I lfind
will return a NULL pointer and
.I lsearch
E 5
I 5
.Fn lfind
will return a null pointer and
.Fn lsearch
E 5
will add it to the array.
When an element is added to the array by
D 5
.I lsearch
E 5
I 5
.Fn lsearch
E 5
the location referenced by the argument
D 5
.I nelp
E 5
I 5
.Fa nelp
E 5
is incremented by one.
D 2
.PP
.I Wlsearch
writes the array pointed to by
.I base
to the file descriptor
.IR fd ,
preceded by a machine independent representation of the number
of elements and the element width as
.IR longs .
A value of 0 is returned on success and -1 if an error occurs.
.PP
.I Rlsearch
returns a pointer to a
.IR malloc 'd
array read from the file descriptor
.IR fd ,
as written by
.IR wlsearch .
The number of elements in the array and the width of each element is
stored in the locations referenced by
.I nelp
and
.IR width .
NULL is returned if an error occurs.
E 2
D 5
.SH "SEE ALSO"
D 4
bsearch(3), hsearch(3), tsearch(3)
E 4
I 4
bsearch(3), db(3)
E 5
I 5
.Sh SEE ALSO
.Xr bsearch 3 ,
D 6
.Xr hsearch 3 ,
.\" .Xr tsearch 3
E 6
I 6
.Xr db 3
E 6
E 5
E 4
E 1
