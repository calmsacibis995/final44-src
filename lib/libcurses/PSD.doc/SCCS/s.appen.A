h49300
s 00002/00002/00049
d D 8.1 93/06/08 18:33:03 bostic 13 12
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/00049
d D 6.8 93/06/07 00:17:14 bostic 12 9
c new doc.mk; document numbering changes for 4.4BSD
e
s 00002/00002/00049
d R 8.2 93/06/05 15:59:24 bostic 11 10
c new doc.mk; document numbering changes for 4.4BSD
e
s 00002/00002/00049
d R 8.1 93/06/04 16:41:46 bostic 10 9
c 4.4BSD snapshot (revision 8.1)
e
s 00003/00010/00048
d D 6.7 93/01/15 10:32:26 elan 9 8
c Deleted ex1.c.  Referred user to source code.
e
s 00004/00047/00054
d D 6.6 93/01/14 18:04:33 elan 8 7
c Deleted life.c and twinkle2.c.  Reorganized the examples section.
e
s 00002/00002/00099
d D 6.5 93/01/14 17:10:12 elan 7 6
c Changed names of C files.
e
s 00083/00147/00018
d D 6.4 92/12/30 15:22:32 elan 6 5
c Everything changes.  Appendix C becomes appendix A.
e
s 00001/00011/00164
d D 6.3 91/04/17 10:37:43 bostic 5 4
c new copyright; att/bsd/shared
e
s 00014/00003/00161
d D 6.2 89/03/17 11:31:51 bostic 4 3
c add Berkeley specific copyright notices
e
s 00040/00013/00124
d D 6.1 86/04/23 23:43:08 mckusick 3 2
c Ken Arnold edits for document distributed with 4.3BSD
e
s 00000/00000/00137
d D 5.1 86/04/23 23:42:46 mckusick 2 1
c document distributed with 4.2BSD
e
s 00137/00000/00000
d D 4.1 86/04/23 23:42:30 mckusick 1 0
c document distributed with 4.1BSD
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 13
.\" Copyright (c) 1980 The Regents of the University of California.
.\" All rights reserved.
E 13
I 13
.\" Copyright (c) 1980, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 13
.\"
D 5
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 5
I 5
.\" %sccs.include.redist.roff%
E 5
E 4
.\"
.\"	%W% (Berkeley) %G%
.\"
D 3
.ie t .he ''\fBAppendix A\fR''
E 3
I 3
D 12
.ie t .oh '\*(Ln Appendix A''PS1:18-%'
.eh 'PS1:18-%''\*(Ln Appendix A'
E 12
I 12
.ie t .oh '\*(Ln Appendix A''PS1:19-%'
.eh 'PS1:19-%''\*(Ln Appendix A'
E 12
E 3
.el .he ''\fIAppendix A\fR''
.bp
.(x
D 6
.sp 2
.in 0
.bi Appendixes
.sp
E 6
I 6
.ti 0
E 6
.b "Appendix A"
.)x
D 6
.nr * 1
.sh 1 "Capabilities from termcap" 1
.sh 2 Disclaimer
E 6
I 6
.sh 1 "Examples" 1
E 6
.pp
D 6
The description of terminals is a difficult business,
and we only attempt to summarize the capabilities here:
D 3
for a full description see the paper describing termcap.
E 3
I 3
for a full description see
.b termcap (5).
E 3
.sh 2 Overview
E 6
I 6
Here we present a few examples
of how to use the package.
They attempt to be representative,
though not comprehensive.  Further examples can be found in the games section
of the source tree and in various utilities that use the screen such as 
.i systat(1) .
D 8
.sh 2 "Screen Updating"
E 8
E 6
.pp
D 3
Capabilities from termcap are of three kinds:
E 3
I 3
D 6
Capabilities from
.b termcap
are of three kinds:
E 3
string valued options,
numeric valued options,
and boolean options.
The string valued options are the most complicated,
since they may include padding information,
which we describe now.
E 6
I 6
The following examples are intended to demonstrate
the basic structure of a program
D 8
using the screen updating sections of the package.
Several of the programs require calculational sections
which are irrelevant of to the example,
and are therefore usually not included.
It is hoped that the data structure definitions
give enough of an idea to allow understanding
of what the relevant portions do.
.sh 3 "Simple Character Output"
E 8
I 8
D 9
using the basic functions of the package.
E 9
I 9
using the package.  An additional, more comprehensive, program can be found in
the source code in the 
\fIexamples\fP subdirectory.
E 9
.sh 2 "Simple Character Output"
E 8
E 6
.pp
D 6
Intelligent terminals often require padding on intelligent operations
at high (and sometimes even low) speed.
This is specified by a number before the string in the capability,
and has meaning for the capabilities which have a
.b P
at the front of their comment.
This normally is a number of milliseconds to pad the operation.
In the current system which has no true programmable delays,
we do this by sending a sequence of pad characters
(normally nulls, but can be changed
(specified by
.i PC )).
In some cases, the pad is better computed as some number of milliseconds
times the number of affected lines
(to the bottom of the screen usually,
except when terminals have insert modes which will shift several lines.)
D 3
This is specified as, e.g.,
E 3
I 3
This is specified as,
i e.g. ,
E 3
.b 12* .
before the capability,
to say 12 milliseconds per affected whatever
(currently always line).
Capabilities where this makes sense say
.b P* .
.sp
.sh 2 "Variables Set By setterm()"
.TS H
c s s s
l l l l.
variables set by \fIsetterm()\fR

Type	Name	Pad	Description
_
.TH
char *	AL	P*	Add new blank Line
bool	AM		Automatic Margins
char *	BC		Back Cursor movement
bool	BS		BackSpace works
char *	BT	P	Back Tab
bool	CA		Cursor Addressable
char *	CD	P*	Clear to end of Display
char *	CE	P	Clear to End of line
char *	CL	P*	CLear screen
char *	CM	P	Cursor Motion
char *	DC	P*	Delete Character
char *	DL	P*	Delete Line sequence
char *	DM		Delete Mode (enter)
char *	DO		DOwn line sequence
char *	ED		End Delete mode
bool	EO		can Erase Overstrikes with \' \'
char *	EI		End Insert mode
char *	HO		HOme cursor
bool	HZ		HaZeltine ~ braindamage
char *	IC	P	Insert Character
bool	IN		Insert-Null blessing
char *	IM		enter Insert Mode (IC usually set, too)
char *	IP	P*	Pad after char Inserted using IM+IE
char *	LL		quick to Last Line, column 0
char *	MA		ctrl character MAp for cmd mode
bool	MI		can Move in Insert mode
bool	NC		No Cr: \er sends \er\en then eats \en
char *	ND		Non-Destructive space
bool	OS		OverStrike works
char	PC		Pad Character
char *	SE		Standout End (may leave space)
char *	SF	P	Scroll Forwards
char *	SO		Stand Out begin (may leave space)
char *	SR	P	Scroll in Reverse
char *	TA	P	TAb (not ^I or with padding)
char *	TE		Terminal address enable Ending sequence
char *	TI		Terminal address enable Initialization
char *	UC		Underline a single Character
char *	UE		Underline Ending sequence
bool	UL		UnderLining works even though !OS
char *	UP		UPline
D 3
char *	US		Underline Starting sequence\**
E 3
I 3
char *	US		Underline Starting sequence
E 3
char *	VB		Visible Bell
char *	VE		Visual End sequence
char *	VS		Visual Start sequence
bool	XN		a Newline gets eaten after wrap
.TE
D 3
.(f
\**
US and UE,
if they do not exist in the termcap entry,
are copied from SO and SE
in
.Fn setterm
.)f
E 3
Names starting with
.bi X
are reserved for severely nauseous glitches
E 6
I 6
This program demonstrates how to set up a window and output characters to it.
Also, it demonstrates how one might control the output to the window.  If
you run this program, you will get a demonstration of the character output
chracteristics discussed in the above Character Output section.
.(l I
D 7
.so t2.gr
E 7
I 7
.so ex1.gr
E 7
D 9
.)l
D 8
.sh 3 "A Small Screen Manipulator"
E 8
I 8
.sh 2 "A Small Screen Manipulator"
E 8
E 6
I 3
.pp
D 6
For purposes of
.Fn standout ,
if
.Fn SG
is not 0,
.Fn SO
is set to
.Fn NULL ,
and if
.Fn UG
is not
.Fn 0 ,
.Fn US
is set to
.Fn NULL .
If, after this,
.Fn SO
is
.Fn NULL ,
and
.Fn US
is not,
.Fn SO
is set to be
.Fn US ,
and
.Fn SE
is set to be
.Fn UE .
E 3
.sh 2 "Variables Set By gettmode()"
.TS H
c s s
l l l.
variables set by \fIgettmode()\fR

type	name	description
_
.TH
bool	NONL	Term can't hack linefeeds doing a CR
bool	GT	Gtty indicates Tabs
bool	UPPERCASE	Terminal generates only uppercase letters
.TE
E 6
I 6
The next example follows the lines of the previous one but extends then to 
demonstrate the various othe uses of the package.  Make sure you understand 
how this program works as it encompasses most of anything you will
need to do with the package.
.(l I
D 7
.so t3.gr
E 7
I 7
.so ex2.gr
E 9
E 7
.)l
D 8
.sh 3 "Twinkle"
E 8
I 8
.sh 2 "Twinkle"
E 8
.pp
This is a moderately simple program which prints
patterns on the screen.
It switches between patterns of asterisks,
putting them on one by one in random order,
and then taking them off in the same fashion.
It is more efficient to write this
using only the motion optimization,
as is demonstrated below.
.(l I
.so twinkle1.gr
D 8
.)l
.sh 3 "Life"
.pp
This program fragment models the famous computer pattern game of life
(Scientific American, May, 1974).
The calculational routines create a linked list of structures
defining where each piece is.
Nothing here claims to be optimal,
merely demonstrative.
This code, however,
is a very good place to use the screen updating routines,
as it allows them to worry about what the last position looked like,
so you don't have to.
It also demonstrates some of the input routines.
.(l I
.so life.gr
.)l
.sh 2 "Motion optimization"
.pp
The following example shows how motion optimization
is written on its own.
Programs which flit from one place to another without
regard for what is already there
usually do not need the overhead of both space and time
associated with screen updating.
They should instead use motion optimization.
.sh 3 "Twinkle"
.pp
The
.b twinkle
program
is a good candidate for simple motion optimization.
Here is how it could be written
(only the routines that have been changed are shown):
.(l
.so twinkle2.gr
E 8
.)l
E 6
E 1
