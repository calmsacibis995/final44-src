h05739
s 00004/00000/00769
d D 8.2 94/06/01 18:39:54 ah 8 7
c page breaks for the 4.4BSD manuals
e
s 00002/00002/00767
d D 8.1 93/06/04 16:44:43 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/00767
d D 1.6 93/01/15 12:21:25 elan 6 5
c Added colons.
e
s 00018/00018/00751
d D 1.5 93/01/15 10:31:04 elan 5 4
c Semicolons in 'w' fns (no commas).
e
s 00017/00016/00752
d D 1.4 93/01/14 18:47:07 elan 4 3
c TRUE/FALSE --> non-zero/zero.  Fixed typos.
e
s 00061/00069/00707
d D 1.3 93/01/14 18:02:07 elan 3 2
c Added waddbytes(), mvwprintw(), mvprintw(), mvwscanw(), mvscanw().
c Deleted longname() and fullname(). Also, misc fixes here and there.
e
s 00092/00217/00684
d D 1.2 93/01/14 17:07:23 elan 2 1
c \*m -> \(dg. Made functions ANSI style declarations.
e
s 00901/00000/00000
d D 1.1 92/12/30 15:34:18 elan 1 0
c date and time created 92/12/30 15:34:18 by elan
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1992 The Regents of the University of California.
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
.\"
.\" %sccs.include.redist.roff%
.\"
.\"     %W% (Berkeley) %G%
.\"
.Ds
D 2
.Fd addch ch \*m
char	ch;
E 2
I 2
.Fn addch "char ch" \(dg
E 2
.De
Add the character
.Vn ch
on the window
at the current \*y.
If the character is a newline
(\'\en\')
the line will be cleared to the end,
and the current \*y will be changed to the
beginning off the next line
if newline mapping is on,
or to the next line at the same x co-ordinate
if it is off.
A return
(\'\er\')
will move to the beginning of the line on the window.
Tabs
(\'\et\')
will be expanded into spaces
in the normal tabstop positions of
every eight characters.
\*(Es
.Ds
D 2
.Fd addstr str \*m
char	*str;
E 2
I 2
.Fn addstr "char *str" \(dg
E 2
.De
Add the string pointed to by
.Vn str
on the window at the current \*y.
\*(Es
In this case, it will put on as much as it can.
.Ds
D 2
.Fd baudrate "" \*m
E 2
I 2
.Fn baudrate "" \(dg
E 2
.De
Returns the output baud rate of the terminal.
This is a system dependent constant
(defined in
.b <sys/tty.h>
on BSD systems,
which is included by
.b <curses.h> ).
.Ds
D 2
.Fd box win\*,vert\*,hor
WINDOW	*win;
char	vert\*,hor;
E 2
I 2
.Fn box "WINDOW win" "char vert" "char hor"
E 2
.De
.Pp
Draws a box around the window using
.Vn vert
as the character for drawing the vertical sides, and
.Vn hor
for drawing the horizontal lines.
If scrolling is not allowed,
and the window encompasses the lower right-hand corner of the terminal,
the corners are left blank to avoid a scroll.
.Ds
D 2
.Fd cbreak "" \*m
E 2
I 2
.Fn cbreak "" \(dg
E 2
.De
Set or the terminal to cbreak mode.
.Ds
D 2
.Fd clear "" \*m
E 2
I 2
.Fn clear "" \(dg
E 2
.De
Resets the entire window to blanks.
If
.Vn win
is a screen,
this sets the clear flag,
which will cause a clear-screen sequence to be sent
on the next
.Fn refresh
call.
This also moves the current \*y
to (0\*,0).
.Ds
D 2
.Fd clearok scr\*,boolf \*m
WINDOW	*scr;
int	boolf;
E 2
I 2
.Fn clearok "WINDOW *scr" "int boolf" \(dg
E 2
.De
Sets the clear flag for the screen
.Vn scr .
If
.Vn boolf
D 4
is TRUE,
E 4
I 4
is non-zero,
E 4
this will force a clear-screen to be printed on the next
.Fn refresh ,
or stop it from doing so if
.Vn boolf
D 4
is FALSE.
E 4
I 4
is 0.
E 4
This only works on screens,
and,
unlike
.Fn clear ,
does not alter the contents of the screen.
If
.Vn scr
is
.Vn curscr ,
the next
.Fn refresh
call will cause a clear-screen,
even if the window passed to
.Fn refresh
is not a screen.
.Ds
D 2
.Fd clrtobot "" \*m
E 2
I 2
.Fn clrtobot "" \(dg
E 2
.De
Wipes the window clear from the current \*y to the bottom.
This does not force a clear-screen sequence on the next refresh
under any circumstances.
\*(Nm
.Ds
D 2
.Fd clrtoeol "" \*m
E 2
I 2
.Fn clrtoeol "" \(dg
E 2
.De
Wipes the window clear from the current \*y to the end of the line.
\*(Nm
.Ds
D 2
.Fd crmode "" \*m
E 2
I 2
.Fn crmode "" \(dg
E 2
.De
Identical to 
.Fn cbreak .
The misnamed macro
.Fn crmode
and
.Fn nocrmode
is retained for backwards compatibility
with ealier versions of the library.
.Ds
D 2
.Fd delch
E 2
I 2
.Fn delch ""
E 2
.De
Delete the character at the current \*y.
Each character after it on the line shifts to the left,
and the last character becomes blank.
.Ds
D 2
.Fd deleteln
E 2
I 2
.Fn deleteln ""
E 2
.De
Delete the current line.
Every line below the current one will move up,
and the bottom line will become blank.
The current \*y will remain unchanged.
.Ds
D 2
.Fd delwin win
WINDOW	*win;
E 2
I 2
.Fn delwin "WINDOW *win"
E 2
.De
Deletes the window from existence.
All resources are freed for future use by
.b calloc (3).
If a window has a
.Fn subwin
allocated window inside of it,
deleting the outer window
the subwindow is not affected,
even though this does invalidate it.
Therefore,
subwindows should be deleted before their
outer windows are.
.Ds
D 2
.Fd echo "" \*m
E 2
I 2
.Fn echo "" \(dg
E 2
.De
Sets the terminal to echo characters.
.Ds
D 2
.Fd endwin
E 2
I 2
.Fn endwin ""
E 2
.De
Finish up window routines before exit.
This restores the terminal to the state it was before
.Fn initscr
(or
.Fn gettmode
and
.Fn setterm )
was called.
It should always be called before exiting and before the final calls to 
.Fn delwin .
It does not exit.
This is especially useful for resetting tty stats
when trapping rubouts via
.b signal (2).
.Ds
D 2
.Fd erase "" \*m
E 2
I 2
.Fn erase "" \(dg
E 2
.De
Erases the window to blanks without setting the clear flag.
This is analagous to
.Fn clear ,
except that it never causes a clear-screen sequence to be generated
on a
.Fn refresh .
\*(Nm
.Ds
D 2
.Fd erasechar "" \*m
E 2
I 2
.Fn erasechar "" \(dg
E 2
.De
Returns the erase character
for the terminal,
.i i.e. ,
the character used by the user to erase a single character from the input.
.Ds
D 2
.Fd flushok win\*,boolf \*m
WINDOW	*win;
int	boolf;
E 2
I 2
.Fn flushok "WINDOW *win" "int boolf"
E 2
.De
Normally,
.Fn refresh
.Fn fflush 's
.Vn stdout
when it is finished.
.Fn flushok
allows you to control this.
if
.Vn boolf
D 4
is TRUE
E 4
I 4
is non-zero
E 4
(\c
.i i.e. ,
non-zero)
it will do the
D 4
.Fn fflush ;
if it is FALSE.
it will not.
E 4
I 4
.Fn fflush ,
otherwise it will not.
E 4
.Ds
D 2
.Fd fullname termbuf\*,name
char	*termbuf\*,*name;
E 2
I 2
D 3
.Fn fullname "char *termbuf"  "char *name"
E 2
.De
.Fn longname
fills in
.Vn name
with the long name of the terminal described by the
.b termcap
entry in
.Vn termbuf .
It is generally of little use,
but is nice for telling the user in a readable format what terminal
we think he has.
This is available in the global variable
.Vn ttytype .
.Vn termbuf
is usually set via the termlib routine
.Fn tgetent .
.Fn fullname
is the same as
.Fn longname ,
except that it gives the fullest name given in the entry,
which can be quite verbose.
.Ds
D 2
.Fd getcap str "" "char *"
char	*str;
E 2
I 2
.Fn getcap "char *str"
E 2
.De
Return a pointer to the
.b termcap
capability described by
.Vn str
(see
.b termcap (5)
for details).
.Ds
E 3
D 2
.Fd getch "" \*m
E 2
I 2
.Fn getch "" \(dg
E 2
.De
Gets a character from the terminal and (if necessary)
echos it on the window.
\*(Es
Otherwise, the character gotten is returned.
If
.i noecho
has been set, then the window is left unaltered.
In order to retain control of the terminal,
it is necessary to have one of
.i noecho ,
.i cbreak ,
or
.i rawmode
set.
If you do not set one,
whatever routine you call to read characters will set
.i cbreak
for you,
and then reset to the original mode when finished.
.Ds
D 2
.Fd getstr str \*m
char	*str;
E 2
I 2
.Fn getstr "char *str" \(dg
E 2
.De
Get a string through the window
and put it in the location pointed to by
.Vn str ,
which is assumed to be large enough to handle it.
It sets tty modes if necessary,
and then calls
.Fn getch
(or
D 2
.Fn wgetch ) "" win
E 2
I 2
.Fn wgetch )
E 2
to get the characters needed to fill in the string
until a newline or EOF is encountered.
The newline stripped off the string.
\*(Es
.Ds
D 2
.Fd gettmode
E 2
I 2
.Fn gettmode ""
E 2
.De
Get the tty stats.
This is normally called by
.Fn initscr .
.Ds
D 2
.Fd getyx win\*,y\*,x \*m
WINDOW	*win;
int	y\*,x;
E 2
I 2
.Fn getyx "WINDOW *win" "int y" "int x"
E 2
.De
Puts the current \*y of
.Vn win
in the variables
.Vn y
and
.Vn x .
Since it is a macro,
not a function,
you do not pass the address
of
.Vn y
and
.Vn x .
.Ds
D 2
.Fd idlok win\*,boolf
WINDOW	*win;
int	boolf;
E 2
I 2
.Fn idlok "WINDOW *win" "int boolf"
E 2
.De
Reserved for future use.
This will eventually signal to
.Fn refresh
that it is all right to use the insert and delete line sequences
when updating the window.
I 8
.ne 1i
E 8
.Ds
D 2
.Fd inch "" \*m
E 2
I 2
.Fn inch "" \(dg
E 2
.De
Returns the character at the current position on the given window.
This does not make any changes to the window.
.Ds
D 2
.Fd initscr
E 2
I 2
.Fn initscr ""
E 2
.De
Initialize the screen routines.
This must be called before any of the screen routines are used.
It initializes the terminal-type data and such,
and without it none of the routines can operate.
If standard input is not a tty,
it sets the specifications to the terminal
whose name is pointed to by
.Vn Def\*_term
D 4
(initialy "dumb").
E 4
I 4
(initially "dumb").
E 4
If the boolean
.Vn My\*_term
D 4
is true,
E 4
I 4
is non-zero,
E 4
.Vn Def\*_term
is always used.
If the system supports the
.b TIOCGWINSZ
D 4
.Fn ioctl "" "" 2
E 4
I 4
.i ioctl(2)
E 4
call,
it is used to get the number of lines and columns for the terminal,
otherwise it is taken from the
.b termcap
description.
.Ds
D 2
.Fd insch c
char	c;
E 2
I 2
.Fn insch "char c"
E 2
.De
Insert
.Vn c
at the current \*y
Each character after it shifts to the right,
and the last character disappears.
\*(Es
.Ds
D 2
.Fd insertln
E 2
I 2
.Fn insertln ""
E 2
.De
Insert a line above the current one.
Every line below the current line
will be shifted down,
and the bottom line will disappear.
The current line will become blank,
and the current \*y will remain unchanged.
.Ds
D 2
.Fd killchar "" \*m
E 2
I 2
.Fn killchar "" \(dg
E 2
.De
Returns the line kill character
for the terminal,
.i i.e. ,
the character used by the user to erase an entire line from the input.
.Ds
D 2
.Fd leaveok win\*,boolf \*m
WINDOW	*win;
int	boolf;
E 2
I 2
.Fn leaveok "WINDOW *win" "int boolf" \(dg
E 2
.De
Sets the boolean flag for leaving the cursor after the last change.
If
.Vn boolf
D 4
is TRUE,
E 4
I 4
is non-zero,
E 4
the cursor will be left after the last update on the terminal,
and the current \*y for
.Vn win
will be changed accordingly.
D 4
If it is FALSE,
it will be moved to the current \*y.
E 4
I 4
If 
.Vn boolf
 is 0 the cursor will be moved to the current \*y.
E 4
This flag
D 4
(initialy FALSE)
E 4
I 4
(initially 0)
E 4
retains its value until changed by the user.
.Ds
D 2
.Fd longname termbuf\*,name
char	*termbuf\*,*name;
E 2
I 2
D 3
.Fn longname "char *termbuf" "char *name"
E 2
.De
.Ds
E 3
D 2
.Fd move y\*,x \*m
int	y\*,x;
E 2
I 2
.Fn move "int y" "int x"
E 2
.De
Change the current \*y of the window to
.Vn y\*,x ). (
\*(Es
.Ds
D 2
.Fd mvcur lasty\*,lastx\*,newy\*,newx
int	lasty\*,lastx\*,newy\*,newx;
E 2
I 2
.Fn mvcur "int lasty" "int lastx" "int newy" "int newx"
E 2
.De
Moves the terminal's cursor from
.Vn lasty\*,lastx ) (
to
.Vn newy\*,newx ) (
in an approximation of optimal fashion.
This routine uses the functions borrowed from
.i ex
version 2.6.
It is possible to use this optimization
without the benefit of the screen routines.
With the screen routines, this should not be called by the user.
.Fn move
and
.Fn refresh
should be used to move the cursor position,
so that the routines know what's going on.
.Ds
I 3
.Fn mvprintw "int y" "int x" "const char *fmt" "..."
.De
Equivalent to:
.(l
move(y, x);
printw(fmt, ...);
.)l
.Ds 
.Fn mvscanw "int y" "int x" "const char *fmt" "..."
.De
Equivalent to:
.(l
move(y, x);
scanw(fmt, ...);
.)l
.Ds
E 3
D 2
.Fd mvwin win\*,y\*,x
WINDOW	*win;
int	y, x;
E 2
I 2
.Fn mvwin "WINDOW *win" "int y" "int x"
E 2
.De
Move the home position of the window
.Vn win
from its current starting coordinates
to
.Vn y\*,x ). (
If that would put part or all of the window
off the edge of the terminal screen,
.Fn mvwin
returns ERR and does not change anything.
For subwindows,
.Fn mvwin
also returns ERR if you attempt to move it off its main window.
If you move a main window,
all subwindows are moved along with it.
.Ds
I 3
.Fn mvwprintw "WINDOW *win" "int y" "int x" "const char *fmt" "..."
.De
D 6
Equivalent to 
E 6
I 6
Equivalent to:
E 6
.(l
wmove(win, y, x);
printw(fmt, ...);
.)l
.Ds
.Fn mvwscanw "WINDOW *win" "int y" "int x" "const char *fmt" "..."
.De
D 6
Equivalent to 
E 6
I 6
Equivalent to:
E 6
.(l
wmove(win, y, x);
scanw(fmt, ...);
.)l
.Ds
E 3
D 2
.Fd newwin lines\*,cols\*,begin\*_y\*,begin\*_x "" "WINDOW *"
int     lines\*,cols\*,begin\*_y\*,begin\*_x;
E 2
I 2
.Ft "WINDOW *"
.Fn newwin "int lines" "int cols" "int begin_y" "int begin_x" 
E 2
.De
Create a new window with
.Vn lines
lines and
.Vn cols
columns starting at position
.Vn begin\*_y\*,begin\*_x ). (
If either
.Vn lines
or
.Vn cols
is 0 (zero),
that dimension will be set to
.Vn "LINES \- begin\*_y" ) (
or
.Vn "COLS \- begin\*_x" ) (
respectively.
Thus, to get a new window of dimensions
.Vn LINES
\(mu
.Vn COLS ,
use
D 2
.Fn newwin . "" 0\*,0\*,0\*,0
E 2
I 2
.Fn newwin 0 0 0 0 .
E 2
.Ds
D 2
.Fd nl "" \*m
E 2
I 2
.Fn nl "" \(dg
E 2
.De
Set the terminal to nl mode,
.i i.e. ,
start/stop the system from mapping
.b <RETURN>
to
.b <LINE-FEED> .
If the mapping is not done,
.Fn refresh
can do more optimization,
so it is recommended, but not required, to turn it off.
.Ds
D 2
.Fd nocbreak "" \*m
E 2
I 2
.Fn nocbreak "" \(dg
E 2
.De
Unset the terminal from cbreak mode.
.Ds
D 2
.Fd nocrmode "" \*m
E 2
I 2
.Fn nocrmode "" \(dg
E 2
.De
Identical to
.Fn nocbreak .
The misnamed macro
.Fn nocrmode
is retained for backwards compatibility
with ealier versions of the library.
.Ds
D 2
.Fd noecho "" \*m
E 2
I 2
.Fn noecho "" \(dg
E 2
.De
Turn echoing of characters off.
.Ds
D 2
.Fd nonl "" \*m
E 2
I 2
.Fn nonl "" \(dg
E 2
.De
Unset the terminal to from nl mode.  See 
.Fn nl .
I 8
.ne 1i
E 8
.Ds
D 2
.Fd noraw "" \*m
E 2
I 2
.Fn noraw "" \(dg
E 2
.De
Unset the terminal from raw mode.  See 
.Fn raw .
.Ds
D 2
.Fd overlay win1\*,win2
WINDOW	*win1\*,*win2;
E 2
I 2
.Fn overlay "WINDOW *win1" "WINDOW *win2"
E 2
.De
Overlay
.Vn win1
on
.Vn win2 .
The contents of
.Vn win1 ,
insofar as they fit,
are placed on
.Vn win2
at their starting \*y.
This is done non-destructively,
i.e., blanks on
.Vn win1
leave the contents of the space on
.Vn win2
D 4
untouched.
E 4
I 4
untouched.  Note that all non-blank characters are overwritten 
destructively in the overlay.
E 4
.Ds
D 2
.Fd overwrite win1\*,win2
WINDOW	*win1\*,*win2;
E 2
I 2
.Fn overwrite "WINDOW *win1" "WINDOW *win2"
E 2
.De
Overwrite
.Vn win1
on
.Vn win2 .
The contents of
.Vn win1 ,
insofar as they fit,
are placed on
.Vn win2
at their starting \*y.
This is done destructively,
.i i.e. ,
blanks on
.Vn win1
become blank on
.Vn win2 .
.Ds
D 2
.Fd printw fmt\*,arg1\*,arg2\*,...
char	*fmt;
E 2
I 2
.Fn printw "char *fmt" "..."
E 2
.De
Performs a
.Fn printf
on the window starting at the current \*y.
It uses
.Fn addstr
to add the string on the window.
It is often advisable to use the field width options of
.Fn printf
to avoid leaving things on the window from earlier calls.
\*(Es
.Ds
D 2
.Fd \*_putchar c
char	c;
E 2
I 2
.Fn raw "" \(dg
E 2
.De
D 2
Put out a character using the
.Fn putchar
macro.
This function is used to output every character
that
.b curses
generates.
Thus,
it can be redefined by the user who wants to do non-standard things
with the output.
It is named with an initial \*(lq\*_\*(rq
because it usually should be invisible to the programmer.
.Ds
.Fd raw "" \*m
.De
E 2
Set the terminal to raw mode.
On version 7
.Un \**
.(f
\**
.Un
D 3
is a trademark of Bell Laboratories.
E 3
I 3
is a trademark of Unix System Laboratories.
E 3
.)f
D 3
this also turns of newline mapping
E 3
I 3
this also turns off newline mapping
E 3
(see
.Fn nl ).
.Ds
D 2
.Fd refresh "" \*m
E 2
I 2
.Fn refresh "" \(dg
E 2
.De
Synchronize the terminal screen with the desired window.
If the window is not a screen,
only that part covered by it is updated.
\*(Es
In this case, it will update whatever it can
without causing the scroll.
.sp
As a special case,
if
.Fn wrefresh
is called with the window
.Vn curscr
the screen is cleared
and repainted as it is currently.
This is very useful for allowing the redrawing of the screen
when the user has garbage dumped on his terminal.
.Ds
D 2
.Fd resetty "" \*m
E 2
I 2
.Fn resetty "" \(dg
E 2
.De
.Fn resetty
restores them to what
.Fn savetty
stored.
These functions are performed automatically by
.Fn initscr
and
D 3
.Fn endwin .
E 3
I 3
.Fn endwin .  
This function should not be used by the user.
E 3
.Ds
D 2
.Fd savetty "" \*m
E 2
I 2
.Fn savetty "" \(dg
E 2
.De
.Fn savetty
saves the current tty characteristic flags. See
.Fn resetty .
I 3
This function should not be used by the user.
E 3
.Ds
D 2
.Fd scanw fmt\*,arg1\*,arg2\*,...
char	*fmt;
E 2
I 2
.Fn scanw "char *fmt" "..."
E 2
.De
Perform a
.Fn scanf
through the window using
.Vn fmt .
D 2
It does this using consecutive
.Fn getch 's
E 2
I 2
It does this using consecutive calls to 
.Fn getch
E 2
(or
D 2
.Fn wgetch 's). "" win
E 2
I 2
.Fn wgetch ).
E 2
\*(Es
I 8
.ne 1i
E 8
.Ds
D 2
.Fd scroll win
WINDOW	*win;
E 2
I 2
.Fn scroll "WINDOW *win"
E 2
.De
Scroll the window upward one line.
This is normally not used by the user.
.Ds
D 2
.Fd scrollok win\*,boolf \*m
WINDOW	*win;
int	boolf;
E 2
I 2
.Fn scrollok "WINDOW *win" "int boolf" \(dg
E 2
.De
Set the scroll flag for the given window.
If
.Vn boolf
D 4
is FALSE, scrolling is not allowed.
E 4
I 4
is 0, scrolling is not allowed.
E 4
This is its default setting.
.Ds
D 2
.Fd setterm name
char	*name;
E 2
I 2
D 3
.Fn setterm "char *name"
E 2
.De
Set the terminal characteristics to be those of the terminal named
.Vn name ,
D 2
getting the terminal size from the
.b TIOCGWINSZ
.Fn ioctl "" "" 2
if it exists,
otherwise from the environment.
E 2
I 2
getting the terminal size using
.i tgetent(3).
E 2
This is normally called by
.Fn initscr .
.Ds
E 3
D 2
.Fd standend "" \*m
E 2
I 2
.Fn standend "" \(dg
E 2
.De
End standout mode initiated by
.Fn standout .
.Ds
D 2
.Fd standout "" \*m
E 2
I 2
.Fn standout "" \(dg
E 2
.De
Causes any characters added to the window
to be put in standout mode on the terminal
(if it has that capability).
.Ds
D 2
.Fd subwin win\*,lines\*,cols\*,begin\*_y\*,begin\*_x "" "WINDOW *"
WINDOW	*win;
int	lines\*,cols\*,begin\*_y\*,begin\*_x;
E 2
I 2
.Ft "WINDOW *"
.Fn subwin "WINDOW *win" "int lines" "int cols" "int begin_y" "int begin_x"
E 2
.De
Create a new window with
.Vn lines
lines and
.Vn cols
columns starting at position
.Vn begin\*_y\*,begin\*_x ) (
inside the window
.i win .
This means that any change made to either window
in the area covered
by the subwindow will be made on both windows.
.Vn begin\*_y\*,begin\*_x
are specified relative to the overall screen,
not the relative (0\*,0) of
.Vn win .
If either
.Vn lines
or
.Vn cols
is 0 (zero),
that dimension will be set to
.Vn "LINES \- begin\*_y" ) (
or
.Vn "COLS \- begin\*_x" ) (
respectively.
.Ds
D 2
.Fd touchline win\*,y\*,startx\*,endx
WINDOW	*win;
int	y\*,startx\*,endx;
E 2
I 2
.Fn touchline "WINDOW *win" "int y" "int startx" "int endx"
E 2
.De
This function performs a function similar to
.Fn touchwin
on a single line.
It marks the first change for the given line
to be
.Vn startx ,
if it is before the current first change mark,
and
the last change mark is set to be
.Vn endx
if it is currently less than
.Vn endx .
.Ds
D 2
.Fd touchoverlap win1\*,win2
WINDOW	*win1, *win2;
E 2
I 2
.Fn touchoverlap "WINDOW *win1" "WINDOW *win2"
E 2
.De
Touch the window
.Vn win2
in the area which overlaps with
.Vn win1 .
If they do not overlap,
no changes are made.
.Ds
D 2
.Fd touchwin win
WINDOW	*win;
E 2
I 2
.Fn touchwin "WINDOW *win"
E 2
.De
Make it appear that the every location on the window
has been changed.
This is usually only needed for refreshes with overlapping windows.
.Ds
D 2
.Fd unctrl ch \*m
char	ch;
E 2
I 2
D 3
.Fn unctrl "char *ch" \(dg
E 2
.De
This is actually a debug function for the library,
but it is of general usefulness.
It returns a string which is a representation of
.Vn ch .
Control characters become their upper-case equivalents preceded by a "^".
Other letters stay just as they are.
To use
.Fn unctrl ,
you may have to have
.b #include\ <unctrl.h>
in your file.
.Ds
E 3
D 2
.Fd tstp
E 2
I 2
.Fn tstp
E 2
.De
D 3
If the new
.b tty (4)
driver is in use,
this function
E 3
I 3
This function
E 3
will save the current tty state
and then put the process to sleep.
When the process gets restarted,
D 3
it restores the tty state
E 3
I 3
it restores the saved tty state
E 3
and then calls
D 2
.Fn wrefresh "" "" curscr
E 2
I 2
.Fn wrefresh "curscr"
E 2
to redraw the screen.
D 4
.Fn initscr
E 4
I 4
.Fn Initscr
E 4
sets the signal
SIGTSTP
to trap to this routine.
.Ds
I 3
.Fn unctrl "char *ch" \(dg
.De
Returns a string which is an ASCII representation of
.Vn ch .  
Characters are 8 bits long.
.Ds
.Fn unctrllen "char *ch" \(dg
.De
Returns the length of the ASCII representation of 
.Vn ch .
I 8
.ne 1i
E 8
.Ds
E 3
D 2
.Fd vwprintw win\*,fmt\*,ap
WINDOW 	*win;
const char *fmt;
va_list ap;
E 2
I 2
.Fn vwprintw "WINDOW *win" "const char *fmt" "va_list ap"
E 2
.De
Identical to 
.Fn printw 
except that it takes both a window specification and a pointer to a variable
length argument list.
.Ds
D 2
.Fd vwscanw win\*,fmt\*,ap
WINDOW	*win;
const char *fmt;
va_list ap;
E 2
I 2
.Fn vwscanw "WINDOW *win" "const char *fmt" "va_list ap"
E 2
.De
Identical to 
.Fn scanw
except that it takes both a window specification and a pointer to a variable
length argument list.
I 3
.Ds
.Fn waddbytes "WINDOW *win" "char *str" "int len"
.De
This function is the low level character output function.  
.Vn Len
characters of the string
.Vn str
are output to the current \*y position of the window specified by
.Vn win.
E 3
.sp 2
.pp
D 3
The following functions differ from the standard functions only in their 
E 3
I 3
\fIThe following functions differ from the standard functions only in their 
E 3
specification of a window, rather than the use of the default
D 3
.Vn stdscr.
E 3
I 3
.Vn stdscr.\fP
E 3
.Ds
D 2
.Fd waddch win\*,ch
WINDOW	*win;
char	ch;
.Dg
.Ds
.Fd waddstr win\*,str
WINDOW	*win;
char	*str;
.Dg
.Ds
.Fd wclear win
WINDOW	*win;
.Dg
.Ds
.Fd wclrtobot win
WINDOW	*win;
.Dg
.Ds
.Fd wclrtoeol win
WINDOW	*win;
.Dg
.Ds
.Fd wdelch win
WINDOW	*win;
.Dg
.Ds
.Fd wdeleteln win
WINDOW	*win;
.Dg
.Ds
.Fd werase win
WINDOW	*win;
.Dg
.Ds
.Fd wgetch win
WINDOW	*win;
.Dg
.Ds
.Fd wgetstr win\*,str
WINDOW	*win;
char	*str;
.Dg
.Ds
.Fd winch win \*m
WINDOW	*win;
.Dg
.Ds
.Fd winsch win\*,c
WINDOW	*win;
char	c;
.Dg
.Ds
.Fd winsertln win
WINDOW	*win;
.Dg
.Ds
.Fd wmove win\*,y\*,x
WINDOW	*win;
int	y\*,x;
.Dg
.Ds
.Fd wprintw win\*,fmt\*,arg1\*,arg2\*,...
WINDOW	*win;
char	*fmt;
.Dg
.Ds
.Fd wrefresh win
WINDOW	*win;
.Dg
.Ds
.Fd wscanw win\*,fmt\*,arg1\*,arg2\*,...
WINDOW	*win;
char	*fmt;
.Dg
.Ds
.Fd wstandend win
WINDOW	*win;
.Dg
.Ds
.Fd wstandout win
WINDOW	*win;
E 2
I 2
D 5
.Fn waddch "WINDOW *win" "char ch" ,
.Fn waddstr "WINDOW *win" "char *str" ,
.Fn wclear "WINDOW *win" , 
.Fn wclrtobot "WINDOW *win" , 
.Fn wclrtoeol "WINDOW *win" , 
.Fn wdelch "WINDOW *win" , 
.Fn wdeleteln "WINDOW *win" ,
.Fn werase "WINDOW *win" ,
.Fn wgetch "WINDOW *win" ,
.Fn wgetstr "WINDOW *win" "char *str" ,
E 5
I 5
.Fn waddch "WINDOW *win" "char ch" 
.Fn waddstr "WINDOW *win" "char *str" 
.Fn wclear "WINDOW *win"  
.Fn wclrtobot "WINDOW *win"  
.Fn wclrtoeol "WINDOW *win"  
.Fn wdelch "WINDOW *win"  
.Fn wdeleteln "WINDOW *win" 
.Fn werase "WINDOW *win" 
.Fn wgetch "WINDOW *win" 
.Fn wgetstr "WINDOW *win" "char *str" 
E 5
.Fn winch "WINDOW *win" \(dg
D 5
.Fn winsch "WINDOW *win" "char c" ,
.Fn winsertln "WINDOW *win" ,
.Fn wmove "WINDOW *win" "int y" int x" ,
.Fn wprintw "WINDOW *win" "char *fmt" "..." ,
.Fn wrefresh "WINDOW *win" ,
.Fn wscanw "WINDOW *win" "char *fmt" "..." ,
.Fn wstandend "WINDOW *win" ,
.Fn wstandout "WINDOW *win" .
E 5
I 5
.Fn winsch "WINDOW *win" "char c" 
.Fn winsertln "WINDOW *win" 
.Fn wmove "WINDOW *win" "int y" int x" 
.Fn wprintw "WINDOW *win" "char *fmt" "..." 
.Fn wrefresh "WINDOW *win" 
.Fn wscanw "WINDOW *win" "char *fmt" "..." 
.Fn wstandend "WINDOW *win" 
.Fn wstandout "WINDOW *win"
E 5
E 2
.Dg
E 1
