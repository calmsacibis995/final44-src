h21434
s 00002/00002/00221
d D 8.1 93/06/04 16:44:56 bostic 9 8
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00004/00004/00219
d D 6.6 93/01/14 18:45:47 elan 8 7
c Fixed indentation problem
e
s 00020/00052/00203
d D 6.5 93/01/14 17:09:37 elan 7 6
c Various typos and style corrections and additional text as well.
e
s 00001/00001/00254
d D 6.4 92/12/30 15:26:13 elan 6 5
c Made a bit less cute.
e
s 00001/00011/00254
d D 6.3 91/04/17 10:37:50 bostic 5 4
c new copyright; att/bsd/shared
e
s 00014/00003/00251
d D 6.2 89/03/17 11:32:07 bostic 4 3
c add Berkeley specific copyright notices
e
s 00007/00005/00247
d D 6.1 86/04/23 23:49:29 mckusick 3 2
c Ken Arnold edits for document distributed with 4.3BSD
e
s 00000/00000/00252
d D 5.1 86/04/23 23:49:22 mckusick 2 1
c document distributed with 4.2BSD
e
s 00252/00000/00000
d D 4.1 86/04/23 23:49:17 mckusick 1 0
c document distributed with 4.1BSD
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 9
.\" Copyright (c) 1980 The Regents of the University of California.
.\" All rights reserved.
E 9
I 9
.\" Copyright (c) 1980, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 9
.\"
D 5
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 5
I 5
.\" %sccs.include.redist.roff%
E 5
E 4
.\"
.\"	%W% (Berkeley) %G%
.\"
.bp
.sh 1 Overview
.pp
In making available the generalized terminal descriptions in \*(tc,
much information was made available to the programmer,
but little work was taken out of one's hands.
The purpose of this package is to allow the C programmer
to do the most common type of terminal dependent functions,
those of movement optimization and optimal screen updating,
without doing any of the dirty work,
D 7
and (hopefully) with nearly as much ease as is necessary to simply print
E 7
I 7
and with nearly as much ease as is necessary to simply print
E 7
or read things.
D 7
.pp
The package is split into three parts:
(1) Screen updating;
(2) Screen updating with user input;
and
(3) Cursor motion optimization.
.pp
It is possible to use the motion optimization
without using either of the other two,
and screen updating and input can be done
without any programmer knowledge of the motion optimization,
or indeed the \*(et \*(db itself.
E 7
D 6
.sh 2 "Terminology (or, Words You Can Say to Sound Brilliant)"
E 6
I 6
.sh 2 "Terminology"
E 6
.pp
D 7
In this document,
the following terminology is kept to with reasonable consistency:
E 7
I 7
In this document, the following terminology is used:
E 7
.de Ip
.sp
.in 5n
.ti 0n
D 8
.bi "\\$1" :
E 8
I 8
.b "\\$1" :
E 8
..
D 7
.Ip window
E 7
I 7
D 8
.b window
E 8
I 8
.Ip window
E 8
E 7
An internal representation
containing an image of what a section of the terminal screen may look like
at some point in time.
This subsection can either encompass the entire terminal screen,
or any smaller portion down to a single character within that screen.
D 7
.Ip "terminal"
E 7
I 7
D 8
.b "terminal"
E 8
I 8
.Ip terminal
E 8
E 7
Sometimes called
D 7
.bi terminal
.bi screen .
E 7
I 7
.b terminal
.b screen .
E 7
The package's idea of what the terminal's screen currently looks like,
D 3
i.e., what the user sees now.
E 3
I 3
.i i.e. ,
what the user sees now.
E 3
This is a special
.i screen :
D 7
.Ip screen
E 7
I 7
D 8
.b screen
E 8
I 8
.Ip screen
E 8
E 7
This is a subset of windows which are as large as the terminal screen,
D 3
i.e., they start at the upper left hand corner
E 3
I 3
.i i.e. ,
they start at the upper left hand corner
E 3
and encompass the lower right hand corner.
One of these,
.Vn stdscr ,
is automatically provided for the programmer.
.rm Ip
D 7
.sh 2 "Compiling Things"
E 7
I 7
.sh 2 "Compiling Applications"
E 7
.pp
In order to use the library,
it is necessary to have certain types and variables defined.
Therefore, the programmer must have a line:
.(l
.b "#include <curses.h>"
.)l
at the top of the program source.
D 7
The header file
.b <curses.h>
needs to include
.b <sgtty.h> ,
so the one should not do so oneself\**.
.(f
\**
The screen package also uses the Standard I/O library,
so
.b <curses.h>
includes
.b <stdio.h> .
It is redundant
(but harmless)
for the programmer to do it, too.
.)f
Also,
compilations should have the following form:
E 7
I 7
Compilations should have the following form:
E 7
.(l
D 3
.ie t \fBcc\fR [ \fIflags\fR ] file ... \fB\-lcurses \-ltermlib\fR
.el \fIcc\fR [ flags ] file ... \fI\-lcurses \-ltermlib\fR
E 3
I 3
.ie t \fBcc\fR [ \fIflags\fR ] file ... \fB\-lcurses \-ltermcap\fR
.el \fIcc\fR [ flags ] file ... \fI\-lcurses \-ltermcap\fR
E 3
.)l
.sh 2 "Screen Updating"
.pp
In order to update the screen optimally,
it is necessary for the routines to know what the screen currently looks like
and what the programmer wants it to look like next.
For this purpose,
a data type
(structure)
named
.Vn WINDOW
is defined
which describes a window image to the routines,
including its starting position on the screen
(the \*y of the upper left hand corner)
and its size.
One of these
(called
.Vn curscr
for
.i "current screen" )
is a screen image of what the terminal currently looks like.
Another screen
(called
.Vn stdscr ,
for
.i "standard screen" )
is provided
by default
to make changes on.
.pp
A window is a purely internal representation.
It is used to build and store
a potential image of a portion of the terminal.
It doesn't bear any necessary relation
to what is really on the terminal screen.
It is more like an array of characters on which to make changes.
.pp
When one has a window which describes
what some part the terminal should look like,
the routine
.Fn refresh
(or
.Fn wrefresh
if the window is not
.Vn stdscr )
is called.
D 7
.Fn refresh
E 7
I 7
.Fn Refresh
E 7
makes the terminal,
in the area covered by the window,
look like that window.
Note, therefore, that changing something on a window
.i does
.bi not
.i "change the terminal" .
Actual updates to the terminal screen
are made only by calling
.Fn refresh
or
.Fn wrefresh .
This allows the programmer to maintain several different ideas
of what a portion of the terminal screen should look like.
Also, changes can be made to windows in any order,
without regard to motion efficiency.
Then, at will,
the programmer can effectively say
D 3
.q "make it look like this,"
E 3
I 3
.q "make it look like this" ,
E 3
D 7
and let the package worry about the best way to do this.
E 7
I 7
and the package will execute the changes in an optimal way.
E 7
.sh 2 "Naming Conventions"
.pp
As hinted above,
the routines can use several windows,
D 7
but two are automatically given:
E 7
I 7
but two are always available:
E 7
.Vn curscr ,
D 7
which knows what the terminal looks like,
E 7
I 7
which is the image of what the terminal looks like at present, 
E 7
and
.Vn stdscr ,
D 7
which is what the programmer wants the terminal to look like next.
The user should never really access
E 7
I 7
which is the image of what the programmer wants the terminal to look like next.
The user should not access
E 7
.Vn curscr
directly.
Changes should be made to
the appropriate screen,
and then the routine
.Fn refresh
(or
.Fn wrefresh )
should be called.
.pp
Many functions are set up to deal with
.Vn stdscr
as a default screen.
For example, to add a character to
.Vn stdscr ,
one calls
.Fn addch
with the desired character.
If a different window is to be used,
the routine
.Fn waddch
(for
.b w indow-specific
.Fn addch )
is provided\**.
.(f
\**
Actually,
.Fn addch
is really a
.q #define
macro with arguments,
D 7
as are most of the "functions" which deal with
.Vn stdscr
as a default.
E 7
I 7
as are most of the "functions" which act upon
.Vn stdscr .
E 7
.)f
This convention of prepending function names with a
.Bq w
when they are to be applied to specific windows
is consistent.
The only routines which do
.i not
do this are those
to which a window must always be specified.
.pp
In order to move the current \*y from one point to another,
the routines
.Fn move
and
.Fn wmove
are provided.
However,
it is often desirable to first move and then perform some I/O operation.
D 7
In order to avoid clumsyness,
E 7
I 7
In order to avoid clumsiness,
E 7
most I/O routines can be preceded by the prefix
.Bq mv
D 7
and the desired \*y then can be added to the arguments to the function.
E 7
I 7
and the desired \*y can then be added to the arguments to the function.
E 7
For example,
the calls
.(l
move(y\*,x);
addch(ch);
.)l
can be replaced by
.(l
mvaddch(y\*,x\*,ch);
.)l
and
.(l
wmove(win\*,y\*,x);
waddch(win\*,ch);
.)l
can be replaced by
.(l
mvwaddch(win\*,y\*,x\*,ch);
.)l
Note that the window description pointer
.Vn win ) (
comes before the added \*y.
D 7
If such pointers are need,
they are always the first parameters passed.
E 7
I 7
If a window pointer is needed, it is always the first parameter passed.
E 7
E 1
