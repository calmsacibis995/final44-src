h44685
s 00002/00002/00200
d D 8.1 93/06/04 16:45:04 bostic 11 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/00201
d D 6.8 93/02/03 16:51:51 elan 10 9
c origtermio -> curses_termios.
e
s 00003/00002/00199
d D 6.7 93/01/14 18:46:07 elan 9 8
c Fixed typos.
e
s 00003/00003/00198
d D 6.6 93/01/14 18:03:02 elan 8 7
c CURSES_ERR/OK --> ERR/OK
e
s 00042/00049/00159
d D 6.5 93/01/14 17:09:38 elan 7 6
c Various typos and style corrections and additional text as well.
e
s 00014/00010/00194
d D 6.4 92/12/30 15:33:30 elan 6 5
c Redid documentation to reflect new package.
e
s 00001/00011/00203
d D 6.3 91/04/17 10:37:52 bostic 5 4
c new copyright; att/bsd/shared
e
s 00014/00003/00200
d D 6.2 89/03/17 11:32:10 bostic 4 3
c add Berkeley specific copyright notices
e
s 00011/00008/00192
d D 6.1 86/04/23 23:50:04 mckusick 3 2
c Ken Arnold edits for document distributed with 4.3BSD
e
s 00000/00000/00200
d D 5.1 86/04/23 23:49:58 mckusick 2 1
c document distributed with 4.2BSD
e
s 00200/00000/00000
d D 4.1 86/04/23 23:49:52 mckusick 1 0
c document distributed with 4.1BSD
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 11
.\" Copyright (c) 1980 The Regents of the University of California.
.\" All rights reserved.
E 11
I 11
.\" Copyright (c) 1980, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 11
.\"
D 5
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 5
I 5
.\" %sccs.include.redist.roff%
E 5
E 4
.\"
.\"	%W% (Berkeley) %G%
.\"
.sh 1 Usage
.pp
This is a description of how to actually use the screen package.
D 7
In it, we assume all updating, reading, etc.
E 7
I 7
For simplicity, we assume all updating, reading, etc.
E 7
is applied to
D 7
.Vn stdscr .
All instructions will work on any window,
with changing the function name and parameters as mentioned above.
.sh 2 "Starting up"
E 7
I 7
D 9
.Vn stdscr, although a different window can of course be specified.
E 9
I 9
.Vn stdscr , 
although a different window can of course be specified.
E 9
.sh 2 "Initialization"
E 7
.pp
In order to use the screen package,
the routines must know about terminal characteristics,
and the space for
.Vn curscr
and
.Vn stdscr
must be allocated.
These functions are performed by
.Fn initscr .
Since it must allocate space for the windows,
it can overflow core when attempting to do so.
On this rather rare occasion,
.Fn initscr
D 6
returns ERR.
E 6
I 6
D 8
returns CURSES_ERR.
E 8
I 8
returns ERR.
E 8
E 6
D 7
.Fn initscr
E 7
I 7
.Fn Initscr
E 7
must
.bi always
be called before any of the routines which affect windows are used.
If it is not,
the program will core dump as soon as either
.Vn curscr
or
.Vn stdscr
are referenced.
However, it is usually best to wait to call it
until after you are sure you will need it,
like after checking for startup errors.
Terminal status changing routines
like
.Fn nl
and
D 3
.Fn crmode
E 3
I 3
.Fn cbreak
E 3
should be called after
.Fn initscr .
.pp
D 7
Now that the screen windows have been allocated,
you can set them up for the run.
If you want to, say, allow the window to scroll,
use
E 7
I 7
After the initial window allocation done by 
.Fn initscr ,
specific window characteristics can be set.
Scrolling can be enabled by calling
E 7
.Fn scrollok .
If you want the cursor to be left after the last change, use
.Fn leaveok .
If this isn't done,
.Fn refresh
will move the cursor to the window's current \*y after updating it.
D 7
New windows of your own can be created, too, by using the functions
E 7
I 7
Additional windows can be created by using the functions
E 7
.Fn newwin
and
.Fn subwin .
D 7
.Fn delwin
will allow you to get rid of old windows.
If you wish to change the official size of the terminal by hand,
just set the variables
E 7
I 7
.Fn Delwin
allows you to delete an exisiting window.
The variables
E 7
.Vn LINES
and
.Vn COLS
D 7
to be what you want,
and then call
.Fn initscr .
This is best done before,
but can be done either before or after,
the first call to
E 7
I 7
control the size of the terminal.  They are initially implicitly set by 
E 7
.Fn initscr ,
D 7
as it will always delete any existing
E 7
I 7
but can be altered explicitly by the user followed by a call to 
.Fn initscr .
Note that any call to 
D 9
Fn initscr ,
E 9
I 9
.Fn initscr ,
E 9
will always delete any existing
E 7
.Vn stdscr
and/or
.Vn curscr
D 7
before creating new ones.
E 7
I 7
before creating new ones so this change is best done before the initial call to
.Fn initscr .
E 7
.pp
D 7
.sh 2 "The Nitty-Gritty"
.sh 3 Output
E 7
I 7
.sh 2 "Output"
E 7
.pp
D 7
Now that we have set things up,
we will want to actually update the terminal.
E 7
The basic functions
used to change what will go on a window are
.Fn addch
and
.Fn move .
D 7
.Fn addch
E 7
I 7
.Fn Addch
E 7
adds a character at the current \*y,
D 6
returning ERR if it would cause the window to illegally scroll,
E 6
I 6
D 8
returning CURSES_ERR if it would cause the window to illegally scroll,
E 8
I 8
returning ERR if it would cause the window to illegally scroll,
E 8
E 6
D 3
i.e.,
E 3
I 3
.i i.e. ,
E 3
printing a character in the lower right-hand corner
of a terminal which automatically scrolls
if scrolling is not allowed.
D 7
.Fn move
E 7
I 7
.Fn Move
E 7
changes the current \*y to whatever you want them to be.
D 6
It returns ERR if you try to move off the window when scrolling is not allowed.
E 6
I 6
D 7
It returns CURSES_ERR if you try to move off the window when scrolling is not allowed.
E 7
I 7
D 8
It returns CURSES_ERR if you try to move off the window.
E 8
I 8
It returns ERR if you try to move off the window.
E 8
E 7
E 6
As mentioned above, you can combine the two into
.Fn mvaddch
D 7
to do both things in one fell swoop.
E 7
I 7
to do both things in one call.
E 7
.pp
D 7
The other output functions,
such as
E 7
I 7
The other output functions 
(such as
E 7
.Fn addstr
and
D 7
.Fn printw ,
E 7
I 7
.Fn printw )
E 7
all call
.Fn addch
to add characters to the window.
.pp
D 7
After you have put on the window what you want there,
when you want the portion of the terminal covered by the window
to be made to look like it,
you must call
E 7
I 7
After a change has been made to the window,
you must call 
E 7
.Fn refresh .
I 7
when you want the portion of the terminal covered by the window
to reflect the change.
E 7
In order to optimize finding changes,
.Fn refresh
assumes that any part of the window not changed
since the last
.Fn refresh
of that window has not been changed on the terminal,
D 3
i.e.,
E 3
I 3
.i i.e. ,
E 3
that you have not refreshed a portion of the terminal
with an overlapping window.
If this is not the case,
D 3
the routine
.Fn touchwin
is provided to make it look like the entire window has been changed,
thus making
E 3
I 3
the routines
.Fn touchwin ,
.Fn touchline ,
and
.Fn touchoverlap
are provided to make it look like a desired part of window has been changed,
thus forcing
E 3
.Fn refresh
D 3
check the whole subsection of the terminal for changes.
E 3
I 3
D 7
check that whole subsection of the terminal for changes.
E 7
I 7
to check that whole subsection of the terminal for changes.
E 7
E 3
.pp
If you call
.Fn wrefresh
with
.Vn curscr ,
D 7
it will make the screen look like
.Vn curscr
thinks it looks like.
E 7
I 7
it will make the screen look like the image of 
.Vn curscr .
E 7
This is useful for implementing a command
D 7
which would redraw the screen in case it get messed up.
.sh 3 Input
E 7
I 7
which would redraw the screen in case it got messed up.
.sh 2 Input
E 7
.pp
Input is essentially a mirror image of output.
The complementary function to
.Fn addch
is
.Fn getch
which,
if echo is set,
will call
.Fn addch
to echo the character.
Since the screen package needs to know what is on the terminal at all times,
if characters are to be echoed,
the tty must be in raw or cbreak mode.
If it is not,
.Fn getch
sets it to be cbreak,
and then reads in the character.
D 6
.sh 3 Miscellaneous
.pp
All sorts of fun functions exists for maintaining and changing information
about the windows.
For the most part,
the descriptions in section 5.4. should suffice.
E 6
D 7
.sh 2 "Finishing up"
E 7
I 7
.sh 2 "Termination"
E 7
.pp
D 7
In order to do certain optimizations,
and,
E 7
I 7
In order to perform certain optimizations,
and, 
E 7
on some terminals,
to work at all,
some things must be done
before the screen routines start up.
These functions are performed in
.Fn getttmode
and
.Fn setterm ,
which are called by
.Fn initscr .
In order to clean up after the routines,
the routine
.Fn endwin
is provided.
It restores tty modes to what they were
when
.Fn initscr
was first called.
I 6
D 7
The terminal state module use the variable 
E 7
I 7
The terminal state module uses the variable 
E 7
D 10
.Vn origtermio
E 10
I 10
.Vn curses_termios
E 10
to save the original terminal state which is then restored upon a call to 
.Fn endwin .
E 6
Thus,
anytime after the call to initscr,
.Fn endwin
D 6
should be called before exiting.
E 6
I 6
should be called before exiting.  Note however, that 
.Fn endwin 
should always be called 
.b before
the final calls to
D 7
.Fn delwin 
E 7
I 7
.Fn delwin ,
E 7
which free the storage of the windows.
E 6
E 1
