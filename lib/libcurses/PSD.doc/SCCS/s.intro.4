h11715
s 00002/00002/00041
d D 8.1 93/06/04 16:45:07 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00003/00041
d D 6.5 93/01/14 17:09:39 elan 7 6
c Various typos and style corrections and additional text as well.
e
s 00003/00182/00041
d D 6.4 92/12/30 15:33:31 elan 6 5
c Redid documentation to reflect new package.
e
s 00001/00011/00222
d D 6.3 91/04/17 10:37:52 bostic 5 4
c new copyright; att/bsd/shared
e
s 00014/00003/00219
d D 6.2 89/03/17 11:32:12 bostic 4 3
c add Berkeley specific copyright notices
e
s 00015/00010/00207
d D 6.1 86/04/23 23:50:23 mckusick 3 2
c Ken Arnold edits for document distributed with 4.3BSD
e
s 00000/00000/00217
d D 5.1 86/04/23 23:50:17 mckusick 2 1
c document distributed with 4.2BSD
e
s 00217/00000/00000
d D 4.1 86/04/23 23:50:11 mckusick 1 0
c document distributed with 4.1BSD
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 8
.\" Copyright (c) 1980 The Regents of the University of California.
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1980, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
.\"
D 5
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 5
I 5
.\" %sccs.include.redist.roff%
E 5
E 4
.\"
.\"	%W% (Berkeley) %G%
.\"
D 6
.sh 1 "Cursor Motion Optimization: Standing Alone"
E 6
I 6
.sh 1 "Cursor Movement Optimizations"
E 6
.pp
D 6
It is possible to use the cursor optimization functions of this screen package
without the overhead and additional size of the screen updating functions.
The screen updating functions are designed for uses
where parts of the screen are changed,
but the overall image remains the same.
This includes such programs as
D 3
.b eye
E 3
I 3
.b rogue
E 3
and
.b vi \**.
.(f
\**
D 3
.b Eye
E 3
I 3
.b rogue
E 3
actually uses these functions,
.b vi
does not.
.)f
Certain other programs
will find it difficult to use these functions in this manner
without considerable unnecessary program overhead.
For such applications,
such as some
.q "\fIcrt hacks\fR\|" \**
.(f
\**
Graphics programs designed to run on character-oriented terminals.
I could name many,
but they come and go,
so the list would be quickly out of date.
Recently, there have been programs such as
D 3
.b rocket
E 3
I 3
.b rain ,
.b rocket ,
E 3
and
.b gun .
.)f
and optimizing
D 3
.b cat (1)-type
E 3
I 3
.b more (1)-type
E 3
programs,
all that is needed is the motion optimizations.
This, therefore, is a description
of what some of what goes on at the lower levels of this screen package.
The descriptions assume a certain amount of familiarity
with programming problems and some finer points of C.
None of it is terribly difficult,
but you should be forewarned.
.sh 2 "Terminal Information"
.pp
In order to use a terminal's
features to the best of a program's abilities,
it must first know what they are\**.
.(f
\**
If this comes as any surprise to you,
there's this tower in Paris they're thinking of junking
that I can let you have for a song.
.)f
The \*(tc \*(db describes these,
but a certain amount of decoding is necessary,
and there are, of course,
both efficient and inefficient ways of reading them in.
The algorithm that the uses is taken from
.b vi
and is hideously efficient.
It reads them
in a tight loop
into a set of variables
whose names are two uppercase letters with some mnemonic value.
For example,
.Vn HO
is a string which moves the cursor to the "home" position\**.
.(f
\**
These names are identical to those variables
used in the
D 3
.b /etc/termcap
E 3
I 3
.b termcap (5)
E 3
\*(db to describe each capability.
See Appendix A for a complete list of those read,
D 3
and
E 3
I 3
and the
E 3
.b termcap (5)
I 3
manual page
E 3
for a full description.
.)f
As there are two types of variables involving ttys,
there are two routines.
The first,
.Fn gettmode ,
sets some variables based upon the tty modes accessed by
.b gtty (2)
and
.b stty (2) .
The second,
.Fn setterm ,
a larger task by reading in the descriptions from the \*(tc \*(db.
This is the way these routines are used by
.Fn initscr :
.(b
.(l I
\*fif\fP (isatty(0)) {
       gettmode();
D 3
       \*fif\fP (sp=getenv("TERM"))
E 3
I 3
       \*fif\fP ((sp=getenv("TERM")) != NULL)
E 3
               setterm(sp);
I 3
	\*felse\fP
	       setterm(Def\*_term);
E 3
}
\*felse\fP
       setterm(Def\*_term);
\*_puts(TI);
\*_puts(VS);
.)l
.)b
.pp
.Fn isatty
checks to see if file descriptor 0 is a terminal\**.
.(f
\**
.Fn isatty
is defined in the default C library function routines.
It does a
.b gtty (2)
on the descriptor and checks the return value.
.)f
If it is,
.Fn gettmode
sets the terminal description modes from a
.b gtty (2) .
.Fn getenv
is then called to get the name of the terminal,
and that value (if there is one) is passed to
.Fn setterm ,
which reads in the variables from \*(tc
associated with that terminal.
.Fn getenv "" (
returns a pointer to a string containing the name of the terminal,
which we save in the character pointer
.Vn sp .)
If
.Fn isatty
returns false,
the default terminal
.Vn Def\*_term
is used.
The
.Vn TI
and
.Vn VS
sequences initialize the terminal
.Fn \*_puts "" (
is a macro which uses
.Fn tputs
(see
.b termcap (3))
I 3
and 
.Fn \*_putchar ""
E 3
to put out a string).
D 3
It is these things which
E 3
.Fn endwin
D 3
undoes.
E 3
I 3
undoes these things.
E 3
.sh 2 "Movement Optimizations, or, Getting Over Yonder"
.pp
Now that we have all this useful information,
D 3
it  would be nice to do something with it\**.
E 3
I 3
it would be nice to do something with it\**.
E 3
.(f
\**
Actually,
it
.i can
be emotionally fulfilling just to get the information.
This is usually only true, however,
if you have the social life of a kumquat.
.)f
The most difficult thing to do properly is motion optimization.
When you consider how many different features various terminals have
(tabs, backtabs, non-destructive space, home sequences, absolute tabs, .....)
you can see that deciding how to get from here to there
can be a decidedly non-trivial task.
The editor
.b vi
uses many of these features,
and the routines it uses to do this take up many pages of code.
Fortunately, I was able to liberate them with the author's permission,
and use them here.
.pp
E 6
I 6
One of the most difficult things to do properly is motion optimization.
E 6
After using
.Fn gettmode
and
.Fn setterm
to get the terminal descriptions,
the function
.Fn mvcur
deals with this task.
It usage is simple:
D 6
you simply tell it where you are now and where you want to go.
E 6
I 6
simply tell it where you are now and where you want to go.
E 6
For example
.(l
D 7
mvcur(0\*,0\*,LINES/2\*,COLS/2)
E 7
I 7
mvcur(0\*,0\*,LINES/2\*,COLS/2);
E 7
.)l
.lp
would move the cursor from the home position (0\*,0)
to the middle of the screen.
If you wish to force absolute addressing,
you can use the function
.Fn tgoto
from the
.b termlib (7)
routines,
or you can tell
.Fn mvcur
that you are impossibly far away,
D 7
like Cleveland.
E 7
For example,
to absolutely address the lower left hand corner of the screen
from anywhere
just claim that you are in the upper right hand corner:
.(l
D 7
mvcur(0\*,COLS\-1\*,LINES\-1\*,0)
E 7
I 7
mvcur(0\*,COLS\-1\*,LINES\-1\*,0);
E 7
.)l
E 1
