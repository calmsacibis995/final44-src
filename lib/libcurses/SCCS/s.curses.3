h01129
s 00002/00002/00169
d D 8.1 93/06/04 16:47:30 bostic 9 8
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00158/00101/00013
d D 6.6 91/04/19 14:50:58 cael 8 7
c macro and text revision (-mdoc version 3)
e
s 00001/00011/00113
d D 6.5 90/06/23 18:00:05 trent 7 6
c new copyright notice
e
s 00015/00005/00109
d D 6.4 88/12/20 10:22:19 bostic 6 5
c written by Ken Arnold; add Berkeley specific copyright
e
s 00009/00028/00105
d D 6.3 86/04/23 23:37:06 mckusick 5 4
c update from Ken Arnold
e
s 00038/00016/00095
d D 6.2 86/04/15 15:35:25 mckusick 4 3
c from Ken Arnold
e
s 00001/00001/00110
d D 6.1 85/05/15 15:23:48 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00012/00016/00099
d D 5.1 85/05/15 15:23:20 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00115/00000/00000
d D 4.1 85/05/15 15:22:50 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 8
.\" Copyright (c) 1985 The Regents of the University of California.
E 8
I 8
D 9
.\" Copyright (c) 1985, 1991 The Regents of the University of California.
E 8
.\" All rights reserved.
E 9
I 9
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 9
E 6
.\"
I 6
D 7
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 7
I 7
.\" %sccs.include.redist.man%
E 7
.\"
E 6
D 8
.\"	%W% (Berkeley) %G%
E 8
I 8
.\"     %W% (Berkeley) %G%
E 8
.\"
D 2
.TH CURSES 3
E 2
I 2
D 3
.TH CURSES 3X "19 January 1983"
E 3
I 3
D 6
.TH CURSES 3X "%Q%"
E 6
I 6
D 8
.TH CURSES 3 "%Q%"
E 6
E 3
E 2
.UC 4
.SH NAME
curses \- screen functions with ``optimal'' cursor motion
.SH SYNOPSIS
I 4
D 5
.B # include <curses.h>
.sp
E 5
E 4
.B cc
D 4
[ flags ] files
E 4
I 4
D 5
\&...
E 5
I 5
[ flags ] files
E 5
E 4
.B \-lcurses \-ltermcap
I 5
[ libraries ]
E 5
D 4
[ libraries ]
E 4
.SH DESCRIPTION
E 8
I 8
.Dd %Q%
.Dt CURSES 3
.Os BSD 4
.Sh NAME
.Nm curses
.Nd screen functions with ``optimal'' cursor motion
.Sh SYNOPSIS
.Nm cc
.Op Ar flags
.Ar files
.Fl lcurses ltermcap
.Op Ar libraries
.Sh DESCRIPTION
E 8
D 2
These routines give the user a method
of updating screens with reasonable optimization.
They keep an image of the current screen,
and the user sets up an image of a new one.
Then the
E 2
I 2
These routines give the user a method of updating screens with reasonable
optimization.  They keep an image of the current screen,
and the user sets up an image of a new one.  Then the
E 2
D 8
.I refresh()
E 8
I 8
.Fn refresh
E 8
D 2
tells the routines to make the current screen look
like the new one.
In order to initialize the routines,
the routine
E 2
I 2
tells the routines to make the current screen look like the new one.
In order to initialize the routines, the routine
E 2
D 8
.I initscr()
E 8
I 8
.Fn initscr
E 8
D 2
must be called before any of the other routines
that deal with windows and screens
are used.
The routine
E 2
I 2
must be called before any of the other routines that deal with windows and
screens are used.  The routine
E 2
D 8
.I endwin()
E 8
I 8
.Fn endwin
E 8
D 4
should be called before exiting.
E 4
I 4
D 5
should always called before exiting.
E 5
I 5
should be called before exiting.
E 5
E 4
D 8
.SH SEE ALSO
.I "Screen Updating and Cursor Movement Optimization: A Library Package,"
Ken Arnold,
.br
D 2
stty(2),
setenv(3),
E 2
I 2
ioctl(2),
getenv(3),
tty(4),
E 2
termcap(5)
.SH AUTHOR
Ken Arnold
.SH FUNCTIONS
.nf
D 4
.ds w \fIwin\fR
.ds s \fIstdscr\fR
E 4
I 4
.ds w \fIwin\fP
.ds s \fIstdscr\fP
D 5
.ds yx (\fIy\fP,\fIx\fP\|)
E 5
E 4
.ta 3i
addch(ch)	add a character to \*s
addstr(str)	add a string to \*s
box(win,vert,hor)	draw a box around a window
D 4
crmode()	set cbreak mode
E 4
I 4
D 5
baudrate()	return current baud rate
E 5
cbreak()	set cbreak mode
E 4
clear()	clear \*s
D 4
clearok(scr,boolf)	set clear flag for \fIscr\fR
E 4
I 4
clearok(scr,boolf)	set clear flag for \fIscr\fP
E 4
clrtobot()	clear to bottom on \*s
clrtoeol()	clear to end of line on \*s
delch()	delete a character
deleteln()	delete a line
delwin(win)	delete \*w
echo()	set echo mode
endwin()	end window modes
erase()	erase \*s
I 4
D 5
erasechar()	return user's erase char
flusok(win,boolf)	set flush-on-refresh flag for \*w
fullname(termbuf,name)	get full name from \fItermbuf\fP
E 5
I 5
flusok(win,boolf)	set flush-on-refresh flag for \fIwin\fP
E 5
E 4
getch()	get a char through \*s
D 4
getcap(name)	get terminal capability \fIname\fR
E 4
I 4
getcap(name)	get terminal capability \fIname\fP
E 4
getstr(str)	get a string through \*s
gettmode()	get tty modes
D 4
getyx(win,y,x)	get (y,x) co-ordinates
inch()	get char at current (y,x) co-ordinates
E 4
I 4
D 5
getyx(win,y,x)	get \*(yx co-ordinates
idlok(win,boolf)	set use-insert/delete-line for \*w
inch()	get char at current \*(yx co-ordinates
E 5
I 5
getyx(win,y,x)	get (y,x) co-ordinates
inch()	get char at current (y,x) co-ordinates
E 5
E 4
initscr()	initialize screens
insch(c)	insert a char
insertln()	insert a line
I 4
D 5
killchar()	return user's kill char
E 5
E 4
leaveok(win,boolf)	set leave flag for \*w
D 4
longname(termbuf,name)	get long name from \fItermbuf\fR
move(y,x)	move to (y,x) on \*s
E 4
I 4
longname(termbuf,name)	get long name from \fItermbuf\fP
D 5
move(y,x)	move to \*(yx on \*s
E 5
I 5
move(y,x)	move to (y,x) on \*s
E 5
E 4
mvcur(lasty,lastx,newy,newx)	actually move cursor
I 4
D 5
mvwin(win,y,x)	move \*w pos to \*(yx
E 5
E 4
newwin(lines,cols,begin_y,begin_x)\ 	create a new window
nl()	set newline mapping
D 4
nocrmode()	unset cbreak mode
E 4
I 4
nocbreak()	unset cbreak mode
E 4
noecho()	unset echo mode
nonl()	unset newline mapping
noraw()	unset raw mode
overlay(win1,win2)	overlay win1 on win2
overwrite(win1,win2)	overwrite win1 on top of win2
printw(fmt,arg1,arg2,...)	printf on \*s
raw()	set raw mode
refresh()	make current screen look like \*s
resetty()	reset tty flags to stored value
savetty()	stored current tty flags
scanw(fmt,arg1,arg2,...)	scanf through \*s
scroll(win)	scroll \*w one line
scrollok(win,boolf)	set scroll flag
setterm(name)	set term variables for name
standend()	end standout mode
standout()	start standout mode
subwin(win,lines,cols,begin_y,begin_x)\ 	create a subwindow
I 4
touchline(win,y,sx,ex)	mark line \fIy\fP \fIsx\fP through \fIsy\fP as changed
touchoverlap(win1,win2)	mark overlap of \fIwin1\fP on \fIwin2\fP as changed
E 4
touchwin(win)	\*(lqchange\*(rq all of \*w
D 4
unctrl(ch)	printable version of \fIch\fR
E 4
I 4
unctrl(ch)	printable version of \fIch\fP
E 4
waddch(win,ch)	add char to \*w
waddstr(win,str)	add string to \*w
wclear(win)	clear \*w
wclrtobot(win)	clear to bottom of \*w
wclrtoeol(win)	clear to end of line on \*w
wdelch(win,c)	delete char from \*w
wdeleteln(win)	delete line from \*w
werase(win)	erase \*w
wgetch(win)	get a char through \*w
wgetstr(win,str)	get a string through \*w
D 4
winch(win)	get char at current (y,x) in \*w
E 4
I 4
D 5
winch(win)	get char at current \*(yx in \*w
E 5
I 5
winch(win)	get char at current (y,x) in \*w
E 5
E 4
winsch(win,c)	insert char into \*w
winsertln(win)	insert line into \*w
D 4
wmove(win,y,x)	set current (y,x) co-ordinates on \*w
E 4
I 4
D 5
wmove(win,y,x)	set current \*(yx co-ordinates on \*w
E 5
I 5
wmove(win,y,x)	set current (y,x) co-ordinates on \*w
E 5
E 4
wprintw(win,fmt,arg1,arg2,...)\ 	printf on \*w
wrefresh(win)	make screen look like \*w
wscanw(win,fmt,arg1,arg2,...)\ 	scanf through \*w
wstandend(win)	end standout mode on \*w
wstandout(win)	start standout mode on \*w
E 8
I 8
.Sh SEE ALSO
.Xr ioctl 2 ,
.Xr getenv 3 ,
.Xr tty 4 ,
.Xr termcap 5
.Rs
.%T Screen Updating and Cursor Movement Optimization: A Library Package
.%A Ken Arnold
.Re
.Sh AUTHOR
.An Ken Arnold
.Sh FUNCTIONS
.Bl -column "subwin(win,lines,cols,begin_y,begin_x)   "
.It addch(ch)	add a character to
.Em stdscr
.It addstr(str)	add a string to
.Em stdscr
.It box(win,vert,hor)	draw a box around a window
.It cbreak()	set cbreak mode
.It clear()	clear
.Em stdscr
.It clearok(scr,boolf)	set clear flag for
.Em scr
.It clrtobot()	clear to bottom on
.Em stdscr
.It clrtoeol()	clear to end of line on
.Em stdscr
.It delch()	delete a character
.It deleteln()	delete a line
.It delwin(win)	delete
.Em stdscr
.It echo()	set echo mode
.It endwin()	end window modes
.It erase()	erase
.Em stdscr
.It flusok(win,boolf)	set flush-on-refresh flag for
.Em win
.It getch()	get a char through
.Em stdscr
.It getcap(name)	get terminal capability
.Em name
.It getstr(str)	get a string through
.Em stdscr
.It gettmode()	get tty modes
.It getyx(win,y,x)	get (y,x) co-ordinates
.It inch()	get char at current (y,x) co-ordinates
.It initscr()	initialize screens
.It insch(c)	insert a char
.It insertln()	insert a line
.It leaveok(win,boolf)	set leave flag for
.Em stdscr
.It longname(termbuf,name)	get long name from
.Em termbuf
.It move(y,x)	move to (y,x) on
.Em stdscr
.It mvcur(lasty,lastx,newy,newx)	actually move cursor
.It newwin(lines,cols,begin_y,begin_x)\ 	create a new window
.It nl()	set newline mapping
.It nocbreak()	unset cbreak mode
.It noecho()	unset echo mode
.It nonl()	unset newline mapping
.It noraw()	unset raw mode
.It overlay(win1,win2)	overlay win1 on win2
.It overwrite(win1,win2)	overwrite win1 on top of win2
.It printw(fmt,arg1,arg2,...)	printf on
.Em stdscr
.It raw()	set raw mode
.It refresh()	make current screen look like
.Em stdscr
.It resetty()	reset tty flags to stored value
.It savetty()	stored current tty flags
.It scanw(fmt,arg1,arg2,...)	scanf through
.Em stdscr
.It scroll(win)	scroll
.Em win
one line
.It scrollok(win,boolf)	set scroll flag
.It setterm(name)	set term variables for name
.It standend()	end standout mode
.It standout()	start standout mode
.It subwin(win,lines,cols,begin_y,begin_x)\ 	create a subwindow
.It touchline(win,y,sx,ex)	mark line
.Em y
.Em sx
through
.Em sy
as changed
.It touchoverlap(win1,win2)	mark overlap of
.Em win1
on
.Em win2
as changed
.It touchwin(win)	\*(lqchange\*(rq all of
.Em win
.It unctrl(ch)	printable version of
.Em ch
.It waddch(win,ch)	add char to
.Em win
.It waddstr(win,str)	add string to
.Em win
.It wclear(win)	clear
.Em win
.It wclrtobot(win)	clear to bottom of
.Em win
.It wclrtoeol(win)	clear to end of line on
.Em win
.It wdelch(win,c)	delete char from
.Em win
.It wdeleteln(win)	delete line from
.Em win
.It werase(win)	erase
.Em win
.It wgetch(win)	get a char through
.Em win
.It wgetstr(win,str)	get a string through
.Em win
.It winch(win)	get char at current (y,x) in
.Em win
.It winsch(win,c)	insert char into
.Em win
.It winsertln(win)	insert line into
.Em win
.It wmove(win,y,x)	set current (y,x) co-ordinates on
.Em win
.It wprintw(win,fmt,arg1,arg2,...)\ 	printf on
.Em win
.It wrefresh(win)	make screen look like
.Em win
.It wscanw(win,fmt,arg1,arg2,...)\ 	scanf through
.Em win
.It wstandend(win)	end standout mode on
.Em win
.It wstandout(win)	start standout mode on
.Em win
.El
.Sh HISTORY
The
.Nm
package appeared in 
.Bx 4.0 .
E 8
I 2
D 6
.SH BUGS
E 6
I 4
D 5
.PP
.IR getch() ,
.IR getstr() ,
and
.IR scanw()
have been rarely used,
and are probably buggy.
.PP
Insert/delete line and char sequences
are not used as often as they should be,
and scrolling regions are not used at all.
E 5
E 4
E 2
E 1
