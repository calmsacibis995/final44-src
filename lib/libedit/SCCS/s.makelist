h53270
s 00002/00002/00159
d D 5.3 93/06/04 16:56:28 bostic 3 2
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00003/00160
d D 5.2 92/07/15 10:41:24 marc 2 1
c use regular awk again
e
s 00163/00000/00000
d D 5.1 92/07/06 18:07:53 marc 1 0
c date and time created 92/07/06 18:07:53 by marc
e
u
U
t
T
I 1
#!/bin/sh -
#
D 3
# Copyright (c) 1992 The Regents of the University of California.
# All rights reserved.
E 3
I 3
# Copyright (c) 1992, 1993
#	The Regents of the University of California.  All rights reserved.
E 3
#
# This code is derived from software contributed to Berkeley by
# Christos Zoulas of Cornell University.
#
# %sccs.include.redist.sh%
#
#	%W% (Berkeley) %G%

# makelist.sh: Automatically generate header files...

D 2
# On vangogh /usr/bin/awk is broken; christos Fri Jul  3 14:01:03 EDT 1992
AWK=/usr/old/bin/awk
#AWK=/usr/bin/awk
E 2
I 2
AWK=/usr/bin/awk
E 2
USAGE="Usage: $0 -h|-e|-fc|-fh|-bc|-bh <filenames>" 

if [ "x$1" = "x" ]
then
    echo $USAGE 1>&2
    exit 1
fi

FLAG="$1"
shift

FILES="$@"

case $FLAG in
-h)
    OIFS="$IFS"
    IFS=".$IFS"
    set - $FILES
    IFS="$OIFS"
    hdr="_h_`basename $1`_$2"
    cat $FILES | $AWK '
	BEGIN {
	    printf("/* Automatically generated file, do not edit */\n");
	    printf("#ifndef %s\n#define %s\n", "'$hdr'", "'$hdr'");
	}
	/\(\):/ {
	    pr = substr($2, 1, 2);
	    if (pr == "vi" || pr == "em" || pr == "ed") {
		name = substr($2, 1, length($2) - 3);
		printf("protected el_action_t\t%-25.25s __P((EditLine *, int));\n", name);
	    }
	}
	END {
	    printf("#endif /* %s */\n", "'$hdr'");
	}';;
-bc)
    cat $FILES | $AWK '
	BEGIN {
	    printf("/* Automatically generated file, do not edit */\n");
	    printf("#include \"sys.h\"\n#include \"el.h\"\n");
	    printf("private struct el_bindings_t el_func_help[] = {\n");
	    low = "abcdefghijklmnopqrstuvwxyz_";
	    high = "ABCDEFGHIJKLMNOPQRSTUVWXYZ_";
	    for (i = 1; i <= length(low); i++)
		tr[substr(low, i, 1)] = substr(high, i, 1);
	}
	/\(\):/ {
	    pr = substr($2, 1, 2);
	    if (pr == "vi" || pr == "em" || pr == "ed") {
		name = substr($2, 1, length($2) - 3);
		uname = "";
		fname = "";
		for (i = 1; i <= length(name); i++) {
		    s = substr(name, i, 1);
		    uname = uname tr[s];
		    if (s == "_")
			s = "-";
		    fname = fname s;
		}
		     
		printf("    { %-30.30s %-30.30s\n","\"" fname "\",", uname ",");
		ok = 1; 
	    }
	}
	/^ \*/ {
	    if (ok) {
		printf("      \"");
		for (i = 2; i < NF; i++)
		    printf("%s ", $i);
		printf("%s\" },\n", $i);
		ok = 0;
	    }
	}
	END {
	    printf("    { NULL, 0, NULL }\n");
	    printf("};\n");
	    printf("\nprotected el_bindings_t* help__get()");
	    printf("{ return el_func_help; }\n");
	}';;
-bh)
    $AWK '
	BEGIN { 
	    printf("/* Automatically generated file, do not edit */\n");
	    printf("#ifndef _h_help_c\n#define _h_help_c\n");
	    printf("protected el_bindings_t *help__get\t__P((void));\n");
	    printf("#endif /* _h_help_c */\n");
	}' /dev/null;;
-fh)
    cat $FILES | $AWK '/el_action_t/ { print $3 }' | \
    sort | tr '[a-z]' '[A-Z]' | $AWK '
	BEGIN { 
	    printf("/* Automatically generated file, do not edit */\n");
	    printf("#ifndef _h_fcns_c\n#define _h_fcns_c\n");
	    count = 0; 
	}
	{ 
	    printf("#define\t%-30.30s\t%3d\n", $1, count++);
	}
	END {
	    printf("#define\t%-30.30s\t%3d\n", "EL_NUM_FCNS", count);

	    printf("typedef el_action_t (*el_func_t) __P((EditLine *, int));");
	    printf("\nprotected el_func_t* func__get __P((void));\n");
	    printf("#endif /* _h_fcns_c */\n");
	}';;
-fc)
    cat $FILES | $AWK '/el_action_t/ { print $3 }' | sort | $AWK '
	BEGIN {
	    printf("/* Automatically generated file, do not edit */\n");
	    printf("#include \"sys.h\"\n#include \"el.h\"\n");
	    printf("private el_func_t el_func[] = {");
	    maxlen = 80;
	    needn = 1;
	    len = 0;
	}
	{
	    clen = 25 + 2;
	    len += clen;
	    if (len >= maxlen) 
		needn = 1;
	    if (needn) {
		printf("\n    ");
		needn = 0;
		len = 4 + clen;
	    }
	    s = $1 ",";
	    printf("%-26.26s ", s);
	}
	END {
	    printf("\n};\n");
	    printf("\nprotected el_func_t* func__get() { return el_func; }\n");
	}';;
-e)
	echo "$FILES" | tr ' ' '\012' | $AWK '
	BEGIN {
	    printf("/* Automatically generated file, do not edit */\n");
	    printf("#define protected static\n");
	    printf("#define SCCSID\n");
	}
	{
	    printf("#include \"%s\"\n", $1);
	}';;
*)
    echo $USAGE 1>&2
    exit 1;;
esac
E 1
