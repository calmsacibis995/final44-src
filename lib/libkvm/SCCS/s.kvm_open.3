h44807
s 00001/00001/00159
d D 8.3 94/04/19 07:19:55 bostic 8 7
c spell
e
s 00001/00001/00159
d D 8.2 93/12/11 22:37:51 mckusick 7 6
c copyediting for Usenix manuals
e
s 00002/00002/00158
d D 8.1 93/06/04 16:53:58 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/00159
d D 5.5 92/06/29 13:36:44 bostic 5 4
c errbuf isn't const
e
s 00001/00001/00159
d D 5.4 92/06/24 09:12:47 bostic 4 3
c add include file for the open(2) flags
e
s 00004/00000/00156
d D 5.3 92/05/26 14:37:36 bostic 3 2
c add LBL credit line
e
s 00055/00018/00101
d D 5.2 92/04/29 11:49:53 bostic 2 1
c update from LBL (Chris, Craig and Steve)
e
s 00119/00000/00000
d D 5.1 92/04/01 18:29:02 mckusick 1 0
c from Steve McCanne
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1992 The Regents of the University of California.
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
.\"
I 3
.\" This code is derived from software developed by the Computer Systems
.\" Engineering group at Lawrence Berkeley Laboratory under DARPA contract
.\" BG 91-66 and contributed to Berkeley.
.\"
E 3
.\" %sccs.include.redist.man%
.\"
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt KVM_OPEN 3
.Os
.Sh NAME
.Nm kvm_open ,
I 2
.Nm kvm_openfiles ,
E 2
.Nm kvm_close
.Nd initialize kernel virtual memory access
.Sh SYNOPSIS
I 4
.Fd #include <fcntl.h>
E 4
.Fd #include <kvm.h>
D 4
.\" .Fa kvm_t *kd
E 4
.br
.Ft kvm_t *
.Fn kvm_open "const char *execfile" "const char *corefile" "char *swapfile" "int flags" "const char *errstr"
.Ft kvm_t *
D 5
.Fn kvm_openfiles "const char *execfile" "const char *corefile" "char *swapfile" "int flags" "const char *errbuf"
E 5
I 5
.Fn kvm_openfiles "const char *execfile" "const char *corefile" "char *swapfile" "int flags" "char *errbuf"
E 5
.Ft int
.Fn kvm_close "kvm_t *kd"
.Sh DESCRIPTION
I 2
The functions
E 2
.Fn kvm_open
and 
.Fn kvm_openfiles
return a descriptor used to access kernel virtual memory
via the 
.Xr kvm 3
library routines.  Both active kernels and crash dumps are accessible
through this interface.
.Pp
.Fa execfile
is the executable image of the kernel being examined.
This file must contain a symbol table.
D 2
If this argument is NULL, the currently running system is assumed,
which is indicated by _PATH_UNIX in <paths.h>.
E 2
I 2
If this argument is
.Dv NULL ,
the currently running system is assumed,
which is indicated by
.Dv _PATH_UNIX
in <paths.h>.
E 2
.Pp
.Fa corefile 
is the kernel memory device file.  It can be either /dev/mem
or a crash dump core generated by 
.Xr savecore 8 .
If
.Fa corefile
D 2
is null, the default indicated by _PATH_MEM is used.
E 2
I 2
is
.Dv NULL ,
the default indicated by
.Dv _PATH_MEM
from <paths.h> is used.
E 2
.Pp
.Fa swapfile
D 2
should indicate the swap device.  If NULL, _PATH_DRUM from <paths.h>
is used.
E 2
I 2
should indicate the swap device.  If
.Dv NULL ,
.Dv _PATH_DRUM
from <paths.h> is used.
E 2
.Pp
The
.Fa flags 
D 2
argument indicates the read/write access as in
E 2
I 2
argument indicates read/write access as in
E 2
.Xr open 2
D 7
and applies to only the core file.
E 7
I 7
and applies only to the core file.
E 7
D 2
Only O_RDONLY, O_WRONLY, and O_RDWR are permitted.
E 2
I 2
Only
.Dv O_RDONLY ,
.Dv O_WRONLY ,
and
.Dv O_RDWR
are permitted.
E 2
.Pp
There are two open routines which differ only with respect to 
the error mechanism.
One provides backward compatibility with the SunOS kvm library, while the
other provides an improved error reporting framework.
.Pp
The
.Fn kvm_open
function is the Sun kvm compatible open call.  Here, the
.Fa errstr
D 2
argument indicates how errors should be handled.  If it is NULL,
then no errors are reporting and the application cannot know the 
E 2
I 2
argument indicates how errors should be handled.  If it is
.Dv NULL ,
no errors are reported and the application cannot know the 
E 2
specific nature of the failed kvm call.
D 2
If it is not NULL, then errors are printed to stderr with 
E 2
I 2
If it is not
.Dv NULL ,
errors are printed to stderr with 
E 2
.Fa errstr
prepended to the message, as in
.Xr perror 3 .
Normally, the name of the program is used here.
D 2
The string is assumed to be persistent.
E 2
I 2
The string is assumed to persist at least until the corresponding
.Fn kvm_close
call.
E 2
.Pp
The
.Fn kvm_openfiles
function provides BSD style error reporting.
Here, error messages are not printed out by the library.
Instead, the application obtains the error message
corresponding to the most recent kvm library call using
.Fn kvm_geterr
(see
.Xr kvm_geterr 3 ).
The results are undefined if the most recent kvm call did not produce
an error.
Since
.Fn kvm_geterr
D 2
requires a kvm descriptor, but the open routines return NULL on failure,
E 2
I 2
requires a kvm descriptor, but the open routines return
.Dv NULL
on failure,
E 2
.Fn kvm_geterr
cannot be used to get the error message if open fails.
Thus,
D 2
.Fn kvm_openfiles ,
E 2
I 2
.Fn kvm_openfiles
E 2
will place any error message in the
.Fa errbuf
argument.  This buffer should be _POSIX2_LINE_MAX characters large (from
D 2
<limits.h>)
E 2
I 2
<limits.h>).
E 2
.Sh RETURN VALUES
I 2
The
E 2
.Fn kvm_open
and 
.Fn kvm_openfiles
D 2
both return a descriptor to be used in all subsequent kvm library calls.
E 2
I 2
functions both return a descriptor to be used
in all subsequent kvm library calls.
E 2
The library is fully re-entrant.
D 2
On failure, NULL is returned, in which case
E 2
I 2
On failure,
.Dv NULL
is returned, in which case
E 2
.Fn kvm_openfiles
writes the error message into 
.Fa errbuf .
.Pp
I 2
The
E 2
.Fn kvm_close
D 2
returns 0 on sucess and -1 on failure.
E 2
I 2
D 8
function returns 0 on sucess and -1 on failure.
E 8
I 8
function returns 0 on success and -1 on failure.
E 8
E 2
.Sh BUGS
There should not be two open calls.  The ill-defined error semantics
of the Sun library and the desire to have a backward-compatible library
for BSD left little choice.
.Sh SEE ALSO
D 2
.Xr kvm 3
E 2
I 2
.Xr open 2 ,
.Xr kvm 3 ,
.Xr kvm_getargv 3 ,
.Xr kvm_getenvv 3 ,
.Xr kvm_geterr 3 ,
.Xr kvm_getprocs 3 ,
.Xr kvm_nlist 3 ,
.Xr kvm_read 3 ,
.Xr kvm_write 3
E 2
E 1
