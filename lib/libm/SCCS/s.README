h36803
s 00002/00002/00251
d D 8.1 93/06/04 16:57:54 bostic 9 8
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00016/00252
d D 5.4 90/10/09 17:32:56 bostic 8 7
c change to be the standard copyright notice
e
s 00010/00005/00258
d D 5.3 88/06/30 17:47:40 bostic 7 6
c install approved copyright notice
e
s 00021/00022/00242
d D 5.2 88/04/29 12:13:38 bostic 6 5
c add Berkeley specific copyright
e
s 00000/00000/00264
d D 5.1 87/11/30 18:33:46 bostic 5 4
c tahoe release
e
s 00095/00098/00169
d D 1.3 85/09/12 20:12:12 elefunt 4 2
c 4.3BSD version dated 09/12/85.
e
s 00112/00115/00152
d R 1.3 85/09/11 23:53:00 elefunt 3 2
c 4.3BSD version dated 09/11/85.
e
s 00094/00094/00173
d D 1.2 85/09/08 23:28:55 zliu 2 1
c minor modifications to make it look more like the troffed source
c from README.txt.
e
s 00267/00000/00000
d D 1.1 85/09/06 17:52:33 zliu 1 0
c date and time created 85/09/06 17:52:33 by zliu
e
u
U
t
T
I 1
D 4
# %W% (ELEFUNT) %G%
-1.  The machine-independent Version 7 math library found in 4.2BSD
D 2
     is now /usr/lib/libom.a.  To compile with those routines use -lom.
E 2
I 2
     is now "/usr/lib/libom.a".  To compile with those routines use -lom.
E 4
I 4
D 6
***************************************************************************
*                                                                         * 
* Copyright (c) 1985 Regents of the University of California.             *
*                                                                         * 
* Use and reproduction of this software are granted  in  accordance  with *
* the terms and conditions specified in  the  Berkeley  Software  License *
* Agreement (in particular, this entails acknowledgement of the programs' *
* source, and inclusion of this notice) with the additional understanding *
* that  all  recipients  should regard themselves as participants  in  an *
* ongoing  research  project and hence should  feel  obligated  to report *
* their  experiences (good or bad) with these elementary function  codes, *
* using "sendbug 4bsd-bugs@BERKELEY", to the authors.                     *
*                                                                         *
* K.C. Ng, with Z-S. Alex Liu, S. McDonald, P. Tang, W. Kahan.            *
* Revised on 5/10/85, 5/13/85, 6/14/85, 8/20/85, 8/27/85, 9/11/85.        *
*                                                                         *
***************************************************************************
E 4
E 2

D 4
K.C. Ng, March 7, 1985, with Z-S. Alex Liu, S. McDonald, P. Tang, W. Kahan.
Revised on 5/10/85, 5/13/85, 6/14/85, 8/20/85, 8/27/85.
E 4
I 4
/*	%Z%%M%	1.6 (Berkeley) 9/12/85; %I% (ucb.elefunt) %G% */
E 4

I 4
NB.  The machine-independent Version 7 math library found in 4.2BSD
     is now /usr/lib/libom.a.  To compile with those routines use -lom.
E 6
I 6
/*
D 9
 * Copyright (c) 1985 Regents of the University of California.
 * All rights reserved.
E 9
I 9
 * Copyright (c) 1985, 1993
 *	The Regents of the University of California.  All rights reserved.
E 9
 *
D 8
 * Redistribution and use in source and binary forms are permitted
D 7
 * provided that this notice is preserved and that due credit is given
 * to the University of California at Berkeley. The name of the University
 * may not be used to endorse or promote products derived from this
 * software without specific prior written permission. This software
 * is provided ``as is'' without express or implied warranty.
E 7
I 7
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 7
 *
 * All recipients should regard themselves as participants in an ongoing
 * research project and hence should feel obligated to report their
 * experiences (good or bad) with these elementary function codes, using
 * the sendbug(8) program, to the authors.
E 8
I 8
 * %sccs.include.redist.c%
E 8
 *
 * K.C. Ng, with Z-S. Alex Liu, S. McDonald, P. Tang, W. Kahan.
 * Revised on 5/10/85, 5/13/85, 6/14/85, 8/20/85, 8/27/85, 9/11/85.
 *
 *	%W% (Berkeley) %G%
 */
E 6

E 4
******************************************************************************
*  This is a description of the upgraded elementary functions (listed in 1). *
*  Bessel functions (j0, j1, jn, y0, y1, yn), floor, and fabs passed over    *
*  from 4.2BSD without change except perhaps for the way floating point      *
D 4
*  exception is signaled on a VAX.  Three lines that contain "errno in erf.c *
*  (error function erf, erfc) have been deleted to prevent overriding the    *
E 4
I 4
*  exception is signaled on a VAX.  Three lines that contain "errno" in erf.c*
*  (error functions erf, erfc) have been deleted to prevent overriding the   *
E 4
*  system "errno".                                                           *
******************************************************************************

0. Total number of files: 40

D 4
        IEEE/Makefile   VAX/Makefile    VAX/support.s   erf.c       lgama.c
E 4
I 4
        IEEE/Makefile   VAX/Makefile    VAX/support.s   erf.c       lgamma.c
E 4
        IEEE/atan2.c    VAX/argred.s    VAX/tan.s       exp.c       log.c
        IEEE/cabs.c     VAX/atan2.s     acosh.c         exp__E.c    log10.c
        IEEE/cbrt.c     VAX/cabs.s      asincos.c       expm1.c     log1p.c
        IEEE/support.c  VAX/cbrt.s      asinh.c         floor.c     log__L.c
        IEEE/trig.c     VAX/infnan.s    atan.c          j0.c        pow.c
        Makefile        VAX/sincos.s    atanh.c         j1.c        sinh.c
        README          VAX/sqrt.s      cosh.c          jn.c        tanh.c

D 2
1. Functions implemented :
    (A). Standard elementary functions (total 22) :
        acos(x)                 ...in file  asincos.c 
        asin(x)                 ...in file  asincos.c
        atan(x)                 ...in file  atan.c
        atan2(x,y)              ...in files IEEE/atan2.c, VAX/atan2.s
        sin(x)                  ...in files IEEE/trig.c , VAX/sincos.s
        cos(x)                  ...in files IEEE/trig.c , VAX/sincos.s
        tan(x)                  ...in files IEEE/trig.c , VAX/tan.s
        cabs(x,y)               ...in files IEEE/cabs.c , VAX/cabs.s
        hypot(x,y)              ...in files IEEE/cabs.c , VAX/cabs.s
        cbrt(x)                 ...in files IEEE/cbrt.c , VAX/cbrt.s
        exp(x)                  ...in file  exp.c
        expm1(x):=exp(x)-1      ...in file  expm1.c
        log(x)                  ...in file  log.c
        log10(x)                ...in file  log10.c
        log1p(x):=log(1+x)      ...in file  log1p.c
        pow(x,y)                ...in file  pow.c
        sinh(x)                 ...in file  sinh.c
        cosh(x)                 ...in file  cosh.c
        tanh(x)                 ...in file  cosh.c
        asinh(x)                ...in file  asinh.c
        acosh(x)                ...in file  acosh.c
        atanh(x)                ...in file  atanh.c
                        
E 2
I 2
D 4
1. Functions implemented:
    (A). Standard elementary functions (total 22):
        acos(x)                 ... in file  "asincos.c"
        asin(x)                 ... in file  "asincos.c"
        atan(x)                 ... in file  "atan.c"
        atan2(x,y)              ... in files "IEEE/atan2.c", "VAX/atan2.s"
        sin(x)                  ... in files "IEEE/trig.c",  "VAX/sincos.s"
        cos(x)                  ... in files "IEEE/trig.c",  "VAX/sincos.s"
        tan(x)                  ... in files "IEEE/trig.c",  "VAX/tan.s"
        cabs(x,y)               ... in files "IEEE/cabs.c",  "VAX/cabs.s"
        hypot(x,y)              ... in files "IEEE/cabs.c",  "VAX/cabs.s"
        cbrt(x)                 ... in files "IEEE/cbrt.c",  "VAX/cbrt.s"
        exp(x)                  ... in file  "exp.c"
        expm1(x):=exp(x)-1      ... in file  "expm1.c"
        log(x)                  ... in file  "log.c"
        log10(x)                ... in file  "log10.c"
        log1p(x):=log(1+x)      ... in file  "log1p.c"
        pow(x,y)                ... in file  "pow.c"
        sinh(x)                 ... in file  "sinh.c"
        cosh(x)                 ... in file  "cosh.c"
        tanh(x)                 ... in file  "tanh.c"
        asinh(x)                ... in file  "asinh.c"
        acosh(x)                ... in file  "acosh.c"
        atanh(x)                ... in file  "atanh.c"

E 4
I 4
1. Functions implemented :
    (A). Standard elementary functions (total 22) :
        acos(x)                 ...in file  asincos.c 
        asin(x)                 ...in file  asincos.c
        atan(x)                 ...in file  atan.c
        atan2(x,y)              ...in files IEEE/atan2.c, VAX/atan2.s
        sin(x)                  ...in files IEEE/trig.c,  VAX/sincos.s
        cos(x)                  ...in files IEEE/trig.c,  VAX/sincos.s
        tan(x)                  ...in files IEEE/trig.c,  VAX/tan.s
        cabs(x,y)               ...in files IEEE/cabs.c,  VAX/cabs.s
        hypot(x,y)              ...in files IEEE/cabs.c,  VAX/cabs.s
        cbrt(x)                 ...in files IEEE/cbrt.c,  VAX/cbrt.s
        exp(x)                  ...in file  exp.c
        expm1(x):=exp(x)-1      ...in file  expm1.c
        log(x)                  ...in file  log.c
        log10(x)                ...in file  log10.c
        log1p(x):=log(1+x)      ...in file  log1p.c
        pow(x,y)                ...in file  pow.c
        sinh(x)                 ...in file  sinh.c
        cosh(x)                 ...in file  cosh.c
        tanh(x)                 ...in file  tanh.c
        asinh(x)                ...in file  asinh.c
        acosh(x)                ...in file  acosh.c
        atanh(x)                ...in file  atanh.c
                        
E 4
E 2
    (B). Kernel functions :
D 2
        exp__E(x,c) ...in file exp__E.c, used by expm1/exp/pow/cosh
        log__L(s)   ...in file log__L.c, used by log1p/log/pow
        libm$argred ...in file VAX/argred.s, used by VAX/tan.s and VAX/sincos.s
E 2
I 2
D 4
        exp__E(x,c) ... in file "exp__E.c", used by
		        expm1(), exp(), pow() and cosh()
        log__L(s)   ... in file "log__L.c", used by
		        log1p(), log() and pow()
        libm$argred ... in file "VAX/argred.s", used by VAX version of
		        sin(), cos() and tan()
E 4
I 4
        exp__E(x,c) ...in file exp__E.c, used by expm1/exp/pow/cosh
        log__L(s)   ...in file log__L.c, used by log1p/log/pow
        libm$argred ...in file VAX/argred.s, used by VAX version of sin/cos/tan
E 4
E 2

    (C). System supported functions :
D 2
        sqrt()      ...in files IEEE/support.c , VAX/sqrt.s
        drem()      ...in files IEEE/support.c , VAX/support.s
        finite()    ...in files IEEE/support.c , VAX/support.s
        logb()      ...in files IEEE/support.c , VAX/support.s
        scalb()     ...in files IEEE/support.c , VAX/support.s
        copysign()  ...in files IEEE/support.c , VAX/support.s
        rint()      ...in file  floor.c
E 2
I 2
D 4
        sqrt()      ... in files "IEEE/support.c", "VAX/sqrt.s"
        drem()      ... in files "IEEE/support.c", "VAX/support.s"
        finite()    ... in files "IEEE/support.c", "VAX/support.s"
        logb()      ... in files "IEEE/support.c", "VAX/support.s"
        scalb()     ... in files "IEEE/support.c", "VAX/support.s"
        copysign()  ... in files "IEEE/support.c", "VAX/support.s"
        rint()      ... in file  "floor.c"
E 4
I 4
        sqrt()      ...in files IEEE/support.c, VAX/sqrt.s
        drem()      ...in files IEEE/support.c, VAX/support.s
        finite()    ...in files IEEE/support.c, VAX/support.s
        logb()      ...in files IEEE/support.c, VAX/support.s
        scalb()     ...in files IEEE/support.c, VAX/support.s
        copysign()  ...in files IEEE/support.c, VAX/support.s
        rint()      ...in file  floor.c
E 4
E 2


   Notes: 
D 2
       i. The codes in files ending with .s are written in VAX assembly 
E 2
I 2
       i. The codes in files ending with ".s" are written in VAX assembly 
E 2
          language. They are intended for VAX computers.

D 2
          Files that end with .c are written in C. They are intended
E 2
I 2
          Files that end with ".c" are written in C. They are intended
E 2
          for either a VAX or a machine that conforms to the IEEE 
D 2
          standard 754 for (double-precision) floating-point arithmetic.
E 2
I 2
          standard 754 for double precision floating-point arithmetic.
E 2

      ii. On other than VAX or IEEE machines, run the original math 
D 2
          library, formerly libm.a, now libom.a, if nothing better
          is available.
E 2
I 2
D 4
          library, formerly "/usr/lib/libm.a", now "/usr/lib/libom.a",
	  if nothing better is available.
E 4
I 4
          library, formerly "/usr/lib/libm.a", now "/usr/lib/libom.a", if
	  nothing better is available.
E 4
E 2

D 2
     iii. The trigonometric functions sin/cos/tan/atan2 in files "VAX/sincos.s",
          "VAX/tan.s" and "VAX/atan2.s" are different from those in
          "IEEE/trig.c" and "IEEE/atan2.c".  The VAX assembler code uses the
          true value of pi to perform argument reduction, while the C code uses
          a machine value of PI (see "IEEE/trig.c").
E 2
I 2
D 4
     iii. The trigonometric functions sin(), cos(), tan() and atan2() in files
	  "VAX/sincos.s", "VAX/tan.s" and "VAX/atan2.s" are different from
	  those in "IEEE/trig.c" and "IEEE/atan2.c".  The VAX assembler code
	  uses the true value of pi to perform argument reduction, while the
	  C code uses the machine's value of PI rounded (see "IEEE/trig.c").
E 4
I 4
     iii. The trigonometric functions sin/cos/tan/atan2 in files "VAX/sincos.s",
          "VAX/tan.s" and "VAX/atan2.s" are different from those in
          "IEEE/trig.c" and "IEEE/atan2.c".  The VAX assembler code uses the
          true value of pi to perform argument reduction, while the C code uses
          a machine value of PI (see "IEEE/trig.c").
E 4
E 2


2. A computer system that conforms to IEEE standard 754 should provide 
D 2
                sqrt(x),
                drem(x,p), (double precision remainder function)
                copysign(x,y),
                finite(x),
                scalb(x,N),
                logb(x) and
                rint(x).
   These functions are required or recommended by the standard.
E 2
I 2
D 4
	  sqrt(x),
	  drem(x,p), (double precision remainder function)
	  copysign(x,y),
	  finite(x),
	  scalb(x,N),
	  logb(x) and
	  rint(x).
E 4
I 4
                sqrt(x),
                drem(x,p), (double precision remainder function)
                copysign(x,y),
                finite(x),
                scalb(x,N),
                logb(x) and
                rint(x).
E 4
   These functions are either required or recommended by the standard.
E 2
   For convenience, a (slow) C implementation of these functions is 
D 2
   provided in the file IEEE/support.c.
E 2
I 2
   provided in the file "IEEE/support.c".
E 2

D 2
   Warning: The functions in IEEE/support.c are somewhat machine dependent.
E 2
I 2
D 4
   Warning: The functions in "IEEE/support.c" are somewhat machine dependent.
E 4
I 4
   Warning: The functions in IEEE/support.c are somewhat machine dependent.
E 4
E 2
   Some modifications may be necessary to run them on a different machine.
D 2
   Currently, if compiled with a suitable flag, IEEE/support.c will work on a 
E 2
I 2
D 4
   Currently, if compiled with a suitable flag, "IEEE/support.c" will work on a
E 2
   National 32000, a Zilog 8000, a VAX, and a SUN (cf. the "Makefile" in
   this directory). Invoke the C compiler thus:
E 4
I 4
   Currently, if compiled with a suitable flag, "IEEE/support.c" will work
   on a National 32000, a Zilog 8000, a VAX, and a SUN (cf. the "Makefile"
   in this directory). Invoke the C compiler thus:
E 4

        cc -c -DVAX IEEE/support.c              ... on a VAX, D-format
D 2
        cc -c -DNATIONAL IEEE/support.c         ... on a National 32081
E 2
I 2
        cc -c -DNATIONAL IEEE/support.c         ... on a National 32000
E 2
        cc -c  IEEE/support.c                   ... on other IEEE machines,
                                                    we hope.

   Notes: 
      1. Faster versions of "drem" and "sqrt" for IEEE double precision
         (coded in C but intended for assembly language) are given at the
D 2
         end of support.c but commented out since they require certain
E 2
I 2
         end of "IEEE/support.c" but commented out since they require certain
E 2
         machine-dependent functions.

      2. A fast VAX assembler version of the system supported functions
         copysign(), logb(), scalb(), finite(), and drem() appears in file 
D 2
         VAX/support.s.  A fast VAX assembler version of sqrt() is in
         file sqrt.s .
E 2
I 2
         "VAX/support.s".  A fast VAX assembler version of sqrt() is in
         file "VAX/sqrt.s".
E 2

3. Two formats are supported by all the standard elementary functions: 
D 2
   the VAX D-format (56 bits' precision), and the IEEE double format 
   (53 bits' precision).  The cbrt() in IEEE/cbrt.c is for IEEE machines 
E 2
I 2
   the VAX D-format (56-bit precision), and the IEEE double format 
   (53-bit precision).  The cbrt() in "IEEE/cbrt.c" is for IEEE machines 
E 2
   only. The functions in files that end with ".s" are for VAX computers 
D 2
   only. The functions in files that end with ".c" (except IEEE/cbrt.c) are
E 2
I 2
D 4
   only. The functions in files that end with ".c" (except "IEEE/cbrt.c") are
E 2
   for VAX and IEEE machines. To use the VAX D-format, compile the code 
E 4
I 4
   only. The functions in files that end with ".c" (except "IEEE/cbrt.c")
   are for VAX and IEEE machines. To use the VAX D-format, compile the code 
E 4
   with -DVAX; to use IEEE double format on various IEEE machines, see 
D 2
   Makefile in this directory). 
E 2
I 2
   "Makefile" in this directory). 
E 2

    Example:
        cc -c -DVAX sin.c               ... for VAX D-format

       Warning: The values of floating-point constants used in the code are
                given in both hexadecimal and decimal.  The hexadecimal values
D 2
                are the intended ones. The decimal values may be use provided 
E 2
I 2
                are the intended ones. The decimal values may be used provided 
E 2
                that the compiler converts from decimal to binary accurately
                enough to produce the hexadecimal values shown. If the
                conversion is inaccurate, then one must know the exact machine 
D 2
                representation of the constants and alter the assembly-
                language output from the compiler, or apply tricks like 
E 2
I 2
                representation of the constants and alter the assembly
D 4
                language output from the compiler, or play tricks like 
E 4
I 4
                language output from the compiler, or play tricks like
E 4
E 2
                the following in a C program.

                        Example: to store the floating-point constant 

                             p1= 2^-6 * .F83ABE67E1066A (Hexadecimal)

D 2
                        on a VAX in C, we use two long word to store its 
E 2
I 2
                        on a VAX in C, we use two longwords to store its 
E 2
                        machine value and define p1 to be the double constant 
D 2
                        at the location of these two long words:
E 2
I 2
                        at the location of these two longwords:
E 2

D 2
                        static long  p1x[] = { 0x3abe3d78, 0x066a67e1};
E 2
I 2
D 4
                        static long  p1x[] = {0x3abe3d78, 0x066a67e1};
E 4
I 4
                        static long  p1x[] = { 0x3abe3d78, 0x066a67e1};
E 4
E 2
                        #define      p1      (*(double*)p1x)

D 2
    Note:  On a VAX, some functions have two codes. For example, cabs() 
           has one implementation in cabs.c, and another in VAX/cabs.s. 
           In this case, the assembly version is preferred.
E 2
I 2
    Note:  On a VAX, some functions have two codes. For example, cabs() has
D 4
	   one implementation in "IEEE/cabs.c", and another in "VAX/cabs.s".
E 4
I 4
	   one implementation in "IEEE/cabs.c", and another in "VAX/cabs.s". 
E 4
           In this case, the assembly language version is preferred.
E 2


4. Accuracy. 

            The errors in expm1(), log1p(), exp(), log(), cabs(), hypot()
            and cbrt() are below 1 ULP (Unit in the Last Place).

            The error in pow(x,y) grows with the size of y. Nevertheless,
            for integers x and y, pow(x,y) returns the correct integer value 
            on all tested machines (VAX, SUN, NATIONAL, ZILOG), provided that 
            x to the power of y is representable exactly.

D 2
            cosh, sinh, acosh, asinh, tanh, atanh and log10 have errors below
            about 3 ULPs. 
E 2
I 2
D 4
            cosh(), sinh(), acosh(), asinh(), tanh(), atanh() and log10() have
	    errors below about 3 ULPs. 
E 4
I 4
            cosh, sinh, acosh, asinh, tanh, atanh and log10 have errors below
            about 3 ULPs. 
E 4
E 2

D 2
            For trigonometric and inverse trigonometric functions: 
E 2
I 2
D 4
            For trigonometric and inverse trigonometric functions, let
	    [trig(x)] denote the value actually computed for trig(x).
E 4
I 4
            For trigonometric and inverse trigonometric functions: 
E 4
E 2

I 4
                Let [trig(x)] denote the value actually computed for trig(x),

E 4
D 2
                Let [trig(x)] denote the value actually computed for trig(x),

E 2
                1) Those codes using the machine's value PI (true pi rounded):
D 2
                   (source codes: IEEE/{trig.c,atan2.c}, asincos.c and atan.c)
E 2
I 2
D 4
                   (in files "IEEE/trig.c", "IEEE/atan2.c", "asincos.c" and
		   "atan.c".)
E 4
I 4
                   (source codes: IEEE/{trig.c,atan2.c}, asincos.c and atan.c)
E 4
E 2

                   The errors in [sin(x)], [cos(x)], and [atan(x)] are below 
                   1 ULP compared with sin(x*pi/PI), cos(x*pi/PI), and 
                   atan(x)*PI/pi respectively, where PI is the machine's
D 2
                   value of pi rounded. [Tan(x)] returns tan(x*pi/PI) within
E 2
I 2
                   value of pi rounded. [tan(x)] returns tan(x*pi/PI) within
E 2
                   about 2 ULPs; [acos(x)], [asin(x)], and [atan2(y,x)] 
                   return acos(x)*PI/pi, asin(x)*PI/pi, and atan2(y,x)*PI/pi
                   respectively to similar accuracy.

I 4

E 4
I 2
                2) Those using true pi (for VAX D-format only):
D 4
                   (in files "VAX/sincos.s", "VAX/tan.s", "VAX/atan2.s",
		   "asincos.c" and "atan.c".)
E 4
I 4
                   (source codes: VAX/{sincos.s,tan.s,atan2.s}, asincos.c and
                   atan.c)
E 4
E 2

D 2
                2) Those using true pi (for VAX D-format only)
                   (source codes: VAX/{sincos.s,tan.s,atan2.s}, asincos.c and
                   atan.c)

E 2
                   The errors in [sin(x)], [cos(x)], and [atan(x)] are below
D 2
                   1 ULP. [Tan(x)], [atan2(y,x)], [acos(x)], and [asin(x)] 
E 2
I 2
D 4
                   1 ULP.  [tan(x)], [atan2(y,x)], [acos(x)], and [asin(x)] 
E 4
I 4
                   1 ULP. [tan(x)], [atan2(y,x)], [acos(x)], and [asin(x)] 
E 4
E 2
                   have errors below about 2 ULPs. 

I 4

E 4
D 2

E 2
            Here are the results of some test runs to find worst errors on 
            the VAX :

    tan   :  2.09 ULPs          ...1,024,000 random arguments (machine PI)
    sin   :  .861 ULPs          ...1,024,000 random arguments (machine PI)
    cos   :  .857 ULPs          ...1,024,000 random arguments (machine PI)
    (compared with tan, sin, cos of (x*pi/PI))

    acos  :  2.07 ULPs          .....200,000 random arguments (machine PI)
    asin  :  2.06 ULPs          .....200,000 random arguments (machine PI)
    atan2 :  1.41 ULPs          .....356,000 random arguments (machine PI)
    atan  :  0.86 ULPs          ...1,536,000 random arguments (machine PI)
    (compared with (PI/pi)*(atan, asin, acos, atan2 of x))

    tan   :  2.15 ULPs          ...1,024,000 random arguments (true pi)
    sin   :  .814 ULPs          ...1,024,000 random arguments (true pi)
    cos   :  .792 ULPs          ...1,024,000 random arguments (true pi)
    acos  :  2.15 ULPs          ...1,024,000 random arguments (true pi)
    asin  :  1.99 ULPs          ...1,024,000 random arguments (true pi)
    atan2 :  1.48 ULPs          ...1,024,000 random arguments (true pi)
    atan  :  .850 ULPs          ...1,024,000 random arguments (true pi)

    acosh :  3.30 ULPs          .....512,000 random arguments
    asinh :  1.58 ULPs          .....512,000 random arguments
    atanh :  1.71 ULPs          .....512,000 random arguments  
    cosh  :  1.23 ULPs          .....768,000 random arguments
    sinh  :  1.93 ULPs          ...1,024,000 random arguments
    tanh  :  2.22 ULPs          ...1,024,000 random arguments
    log10 :  1.74 ULPs          ...1,536,000 random arguments
    pow   :  1.79 ULPs          .....100,000 random arguments, 0 < x, y < 20.
        
    exp   :  .768 ULPs          ...1,156,000 random arguments
    expm1 :  .844 ULPs          ...1,166,000 random arguments
    log1p :  .846 ULPs          ...1,536,000 random arguments
    log   :  .826 ULPs          ...1,536,000 random arguments
    cabs  :  .959 ULPs          .....500,000 random arguments
    cbrt  :  .666 ULPs          ...5,120,000 random arguments


5. Speed.

D 2
        Some functions coded in VAX assembly language (cabs, hypot, sqrt)
        are significantly faster than the corresponding ones in 4.2BSD.
        In general, to improve performance, all functions in IEEE/support.c
        should be written in assembler and, whenever possible, should be
        called via short subroutine calls.
E 2
I 2
        Some functions coded in VAX assembly language (cabs(), hypot() and
	sqrt()) are significantly faster than the corresponding ones in 4.2BSD.
        In general, to improve performance, all functions in "IEEE/support.c"
        should be written in assembly language and, whenever possible, should
	be called via short subroutine calls.
E 2


D 4
6. j0,j1,jn.
E 4
I 4
6. j0, j1, jn.
E 4

        The modifications to these routines were only in how an invalid
D 2
        floating point operation is signaled.
E 2
I 2
D 4
        floating point operation is signaled on a VAX.
E 2


7. Copyright notice, and Disclaimer:

***************************************************************************
*                                                                         * 
* Copyright (c) 1985 Regents of the University of California.             *
*                                                                         * 
* Use and reproduction of this software are granted  in  accordance  with *
* the terms and conditions specified in  the  Berkeley  Software  License *
* Agreement (in particular, this entails acknowledgement of the programs' *
* source, and inclusion of this notice) with the additional understanding *
* that  all  recipients  should regard themselves as participants  in  an *
* ongoing  research  project and hence should  feel  obligated  to report *
* their  experiences (good or bad) with these elementary function  codes, *
* using "sendbug 4bsd-bugs@BERKELEY", to the authors.                     *
*                                                                         *
***************************************************************************
E 4
I 4
        floating point operations is signaled.
E 4
D 2

E 2
E 1
