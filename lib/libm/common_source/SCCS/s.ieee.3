h20876
s 00002/00002/00239
d D 8.1 93/06/04 17:02:34 bostic 11 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00004/00006/00237
d D 6.5 93/03/02 18:00:11 bostic 10 9
c fixes, wordsmithing from Donn Seeley at BSDI
e
s 00001/00003/00242
d D 6.4 91/05/06 13:36:49 cael 9 8
c remove author section
e
s 00232/00114/00013
d D 6.3 91/04/19 14:50:45 cael 8 7
c macro and text revision (-mdoc version 3)
e
s 00002/00002/00125
d D 6.2 86/05/12 17:11:07 karels 7 6
c intro(3M) => math(3M), move see also's to end
e
s 00009/00003/00118
d D 6.1 85/09/11 18:53:15 mckusick 6 5
c new from Kahan
e
s 00093/00070/00028
d D 1.5 85/08/21 15:13:20 miriam 5 4
c Revision by Prof. Kahan.
e
s 00013/00008/00085
d D 1.4 85/06/03 16:48:24 miriam 4 3
c Update man page
e
s 00001/00001/00092
d D 1.3 85/05/24 14:43:07 miriam 3 2
c terminate sentence with a period.
e
s 00006/00000/00087
d D 1.2 85/05/24 14:38:53 miriam 2 1
c .if for screen/typesetter
e
s 00087/00000/00000
d D 1.1 85/05/24 11:55:40 miriam 1 0
c date and time created 85/05/24 11:55:40 by miriam
e
u
U
t
From Prof. Kahan at UC at Berkeley
T
I 1
D 5
.TH IEEE 3M  "8 May 1985"
E 5
I 5
D 6
.TH IEEE 3M  "7 August 1985"
E 5
.UC 4
E 6
I 6
D 8
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 8
I 8
D 11
.\" Copyright (c) 1985, 1991 Regents of the University of California.
.\" All rights reserved.
E 11
I 11
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 11
E 8
.\"
D 8
.\"	%W% (Berkeley) %G%
E 8
I 8
D 9
.\" %sccs.include.redist.man%
E 9
I 9
.\" %sccs.include.redist.roff%
E 9
E 8
.\"
D 8
.TH IEEE 3M  "%Q%"
.UC 6
E 6
I 5
.ds nn \fINaN\fR
E 5
.SH NAME
D 5
copysign, drem, logb, scalb \- copysign, remainder, exponent manipulations
E 5
I 5
copysign, drem, finite, logb, scalb \- copysign, remainder,
exponent manipulations
E 5
.SH SYNOPSIS
.nf
.B #include <math.h>
.PP
D 5
.B double copysign(x, y)
.B double x, y;
E 5
I 5
.B double copysign(x,y)
.B double x,y;
E 5
.PP
D 5
.B double drem(x, y)
.B double x, y;
E 5
I 5
.B double drem(x,y)
.B double x,y;
E 5
.PP
I 5
.B int finite(x)
.B double x;
.PP
E 5
.B double logb(x)
.B double x;
.PP
D 5
.B double scalb(x, n)
E 5
I 5
.B double scalb(x,n)
E 5
.B double x;
.B int n;
.fi
.SH DESCRIPTION
D 5
These functions are necessary for, or recommended by the IEEE standard
754 for floating-point arithmetic.
E 5
I 5
These functions are required for, or recommended by the IEEE standard
E 8
I 8
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt IEEE 3
.Os BSD 4.3
.Sh NAME
.Nm copysign ,
.Nm drem ,
.Nm finite ,
.Nm logb ,
.Nm scalb
D 10
.Nm copysign ,
.Nm remainder,
.Nd exponent manipulations
E 10
I 10
.Nd "IEEE 754 floating point support
E 10
.Sh SYNOPSIS
.Fd #include <math.h>
.Ft double 
.Fn copysign "double x" "double y"
.Ft double 
.Fn drem "double x" "double y"
.Ft int 
.Fn finite "double x"
.Ft double 
.Fn logb "double x"
.Ft double 
.Fn scalb "double x" "int n"
.Sh DESCRIPTION
These functions are required for, or recommended by the
.Tn IEEE
standard
E 8
754 for floating\-point arithmetic.
E 5
D 8
.PP
D 5
.I Copysign(x,y)
returns
.I x
with the sign of
.I y.
E 5
I 5
Copysign(x,y)
returns x with its sign changed to y's.
E 5
.PP
D 5
.I Drem(x,y)
returns
.I r
when
.I y
is not equal to 0; the remainder
.I r
is defined by the mathematical relation
.I r=x\-y*n
where
.I n
is the integer nearest the exact value
.I x/y;
whenever
.I |n\-x/y|=1/2,
then
.I n
is even.
Thus, the remainder is always exact.
E 5
I 5
Drem(x,y) returns the remainder r := x \- n\(**y
where n is the integer nearest the exact value of x/y;
moreover if |n\|\-\|x/y|\|=\|1/2 then n is even.  Consequently
the remainder is computed exactly and |r| \(<= |y|/2.  But
drem(x,0) is exceptional; see below under DIAGNOSTICS.
E 5
.PP
D 5
.I Logb(x)
returns the exponent of
.I x,
D 4
a signed integer in double precision.
When
E 4
I 4
a signed integer represented as a double precision number.
Here the exponent of a non-zero
E 4
.I x
D 4
is positive, the expression
.I scalb(x,(int)(\-logb(x)))
lies strictly between 1 and 2; the expression equals 1 only if
.I x
is a power of 2.
E 4
I 4
is defined to be the integer
.I n
such that
.br
1 \(<= |
E 5
I 5
.nf
.ta \w'Finite(x)'u+1n +\w'= 0 otherwise'u+1n
E 5
.if n \
D 5
.I x*(2**n)|
E 5
I 5
Finite(x)	= 1 just when \-infinity < x < +infinity,
E 5
.if t \
D 5
.I x*2\u\s8n\s10\d|
< 2.
E 4
.PP
.I Scalb(x,n)
returns
E 5
I 5
Finite(x)	= 1 just when \-\(if < x < +\(if,
E 5
I 2
.if n \
D 5
.I  x*(2**n),
E 5
I 5
	= 0 otherwise	(when |x| = infinity or x is \*(nn or
E 5
.if t \
E 2
D 5
.I  x*2\u\s8n\s10\d,
for integer values
.I n
without computing
E 5
I 5
	= 0 otherwise	(when |x| = \(if or x is \*(nn or
		\0x is the VAX's reserved operand.)
.ta
.fi
.PP
Logb(x) returns x's exponent n,
E 8
I 8
.Pp
The
.Fn copysign
function
returns
.Fa x
with its sign changed to
.Fa y Ns 's.
.Pp
The
.Fn drem
function
returns the remainder
.Fa r
:=
.Fa x
\-
.Fa n\(**y
where
.Fa n
is the integer nearest the exact value of
.Bk -words
.Fa x Ns / Ns Fa y ;
.Ek
moreover if
.Pf \\*(Ba Fa n
\-
.Sm off
.Fa x No / Fa y No \\*(Ba
.Sm on
=
1/2
then
.Fa n
is even.  Consequently
the remainder is computed exactly and
.Sm off
.Pf \\*(Ba Fa r No \\*(Ba
.Sm on
\*(Le
.Sm off
.Pf \\*(Ba Fa y No \\*(Ba/2.
.Sm on
But
.Fn drem x 0
is exceptional.
(See below under
.Sx DIAGNOSTICS . )
.Pp
The
.Fn finite
function returns the value 1 just when
\-\*(If \*(Lt
.Fa x
\*(Lt +\*(If;
otherwise a
zero is returned
(when
.Pf \\*(Ba Ns Fa x Ns \\*(Ba
= \*(If or
.Fa x
is \*(Na or
is the
.Tn VAX Ns 's
reserved operand).
.Pp
The
.Fn logb
function returns
.Fa x Ns 's exponent
.Fa n ,
E 8
a signed integer converted to double\-precision floating\-point and so
D 8
chosen that 1\0\(<=\0|x|/2**n\0<\02 unless x = 0 or
(only on machines that conform to IEEE 754)
E 8
I 8
chosen that
1 (<=
.Pf \\*(Ba Ns Fa x Ns \\*(Ba2** Ns Fa n
< 2
unless
.Fa x
= 0 or
(only on machines that conform to
.Tn IEEE
754)
.Pf \\*(Ba Fa x Ns \\*(Ba
= \*(If
or
.Fa x
lies between 0 and the Underflow Threshold.
(See below under
.Sx BUGS . )
.Pp
The
D 10
Fn calb
returns
E 10
I 10
.Fn scalb
function returns
E 10
.Fa x Ns \(**(2** Ns Fa n )
computed, for integer n, without first computing
.Pf 2\(** Fa n .
.Sh RETURN VALUES
The
.Tn IEEE
standard
754 defines
.Fn drem x 0
and
.Fn drem \\*(If y
to be invalid operations that produce a \*(Na.
On the
.Tn VAX , 
.Fn drem x 0
generates a reserved operand fault.  No \*(If
exists on a
.Tn VAX . 
.Pp
.Tn IEEE
754 defines
E 8
E 5
I 2
.if n \
D 3
.I 2**n
E 3
I 3
D 5
.I 2**n.
E 5
I 5
D 8
|x| = infinity
E 5
E 3
.if t \
E 2
D 5
.I 2\u\s8n\s10\d.
E 5
I 5
|x| = \(if
or x lies between 0 and the Underflow Threshold; see below under "BUGS".
.PP
Scalb(x,n) = x\(**(2**n) computed, for integer n, without first computing
2**n.
E 5
D 7
.SH SEE ALSO
D 5
intro(3M)
E 5
I 5
D 6
intro(3M), infnan(3M)
E 6
I 6
floor(3M), intro(3M), infnan(3M)
E 7
E 6
E 5
.SH DIAGNOSTICS
D 5
.I Drem(x,y)
returns the reserved operand on the VAX when y is equal to 0.
.I Logb(x)
D 4
returns the hugest negative number on the VAX when x is equal to 0.
E 4
I 4
returns -2,147,483,647.0 on the VAX when x is equal to 0.
E 4
If the correct value would overflow,
.I scalb(x,n)
returns the reserved operand on the VAX
and sets
.I errno
to ERANGE.
E 5
I 5
IEEE 754 defines drem(x,0) and
.if n \
drem(infinity,y)
.if t \
drem(\(if,y)
to be invalid operations that produce a \*(nn.
On a VAX, drem(x,0) returns the reserved operand.  No
.if n \
infinity
.if t \
\(if
exists on a VAX.
.PP
IEEE 754 defines
.if n \
logb(\(+-infinity) = +infinity and logb(0) = \-infinity,
.if t \
logb(\(+-\(if) = +\(if and logb(0) = \-\(if, and
E 8
I 8
.Fn logb \(+-\\*(If
= \*(If and
.Fn logb 0
= \-\*(If, and
E 8
requires the latter to signal Division\-by\-Zero.
D 8
But on a VAX, logb(0) = 1.0 \- 2.0**31 = \-2,147,483,647.0.
And if the correct value of scalb(x,n) would overflow on a VAX,
it returns the reserved operand and sets \fIerrno\fR to ERANGE.
I 7
.SH SEE ALSO
floor(3M), math(3M), infnan(3M)
E 7
E 5
.SH AUTHOR
E 8
I 8
But on a
.Tn VAX , 
.Fn logb 0
= 1.0 \- 2.0**31 = \-2,147,483,647.0.
And if the correct value of
.Fn scalb
would overflow on a
.Tn VAX , 
it generates a reserved operand fault and sets the global variable
.Va errno
to
.Dv ERANGE . 
.Sh SEE ALSO
.Xr floor 3 ,
.Xr math 3 ,
.Xr infnan 3
D 9
.Sh AUTHOR
E 8
D 5
Kwok-Choi Ng
E 5
I 5
Kwok\-Choi Ng
E 9
E 5
D 8
.SH BUGS
D 5
Logb(0) should return \-infinity.
E 5
I 5
Should drem(x,0) and logb(0) on a VAX signal invalidity 
by setting \fIerrno\fR = EDOM?  Should  logb(0) return  \-1.7e38?
.PP
IEEE 754 currently specifies that
logb(denormalized no.) = logb(tiniest normalized no. > 0)
E 8
I 8
.Sh HISTORY
The
.Nm ieee
functions appeared in 
.Bx 4.3 .
.Sh BUGS
Should
.Fn drem x 0
and
.Fn logb 0
on a
.Tn VAX
signal invalidity 
by setting
.Va errno No = Dv EDOM ?
Should
.Fn logb 0
return  \-1.7e38?
.Pp
.Tn IEEE
754 currently specifies that
.Fn logb "denormalized no."
=
.Fn logb "tiniest normalized no. > 0"
E 8
but the consensus has changed to the specification in the new 
D 8
proposed IEEE standard p854, namely that logb(x) satisfy 
.RS
1 \(<= scalb(|x|,\-logb(x)) < Radix\0\0\0... = 2 for IEEE 754
.RE
E 8
I 8
proposed
.Tn IEEE
standard p854, namely that
.Fn logb x
satisfy 
.Bd -filled -offset indent
1 \(<=
.Fn scalb \\*(Bax\\*(Ba \-logb(x)
<
Radix\0 ... = 2
for
.Tn IEEE
754
.Ed
.Pp
E 8
for every x except 0, 
D 8
.if n \
infinity
.if t \
\(if
and \*(nn.
E 8
I 8
\*(If
and \*(Na.
E 8
Almost every program that assumes 754's specification will work
D 8
correctly if logb follows 854's specification instead.
.PP
IEEE 754 requires copysign(x,\*(nn) = \(+-x  but says nothing
else about the sign of a \*(nn.  A \*(nn (\fIN\fRot \fIa\fR \fIN\fRumber) is
similar in spirit to the VAX's reserved operand, but very
E 8
I 8
correctly if
.Fn logb
follows 854's specification instead.
.Pp
.Tn IEEE
754 requires
.Fn copysign x \\*(Na)
=
.Pf \(+- Ns Fa x
but says nothing
else about the sign of a \*(Na.  A \*(Na
D 10
.Em N Ns ot
E 10
I 10
.Em (N Ns ot
E 10
.Em a
.Em N Ns umber )
is
similar in spirit to the
.Tn VAX Ns 's
reserved operand, but very
E 8
different in important details.  Since the sign bit of a
reserved operand makes it look negative,  
D 8
.RS
copysign(x,reserved operand) = \-x;
.RE
E 8
I 8
.Bd -filled -offset indent
.Fn copysign x "reserved operand"
=
.Pf \- Fa x ;
.Ed
.Pp
E 8
should this return the reserved operand instead?
E 5
E 1
