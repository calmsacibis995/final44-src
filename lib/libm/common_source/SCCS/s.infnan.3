h52995
s 00002/00002/00152
d D 8.1 93/06/04 17:02:42 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00129/00078/00025
d D 6.5 91/04/19 14:50:43 cael 6 5
c macro and text revision (-mdoc version 3)
e
s 00001/00001/00102
d D 6.4 86/05/27 10:39:44 kjd 5 4
c add comma
e
s 00002/00003/00101
d D 6.3 86/05/12 17:11:27 karels 4 3
c intro(3M) => math(3M), move see also's to end
e
s 00001/00001/00103
d D 6.2 86/05/10 20:29:30 mckusick 3 2
c style
e
s 00016/00010/00088
d D 6.1 85/09/11 18:52:06 mckusick 2 1
c new from Kahan
e
s 00098/00000/00000
d D 1.1 85/08/21 15:33:50 miriam 1 0
c date and time created 85/08/21 15:33:50 by miriam
e
u
U
t
T
I 1
D 2
.TH INFNAN 3M  "20 August 1985"
.UC 4
E 2
I 2
D 6
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 7
.\" Copyright (c) 1985, 1991 Regents of the University of California.
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
E 6
.\"
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\" %sccs.include.redist.man%
E 6
.\"
D 6
.TH INFNAN 3M  "%Q%"
.UC 6
E 2
.ds nn \fINaN\fR
.SH NAME
D 2
.nf
.ta \w'infnan \- 'u+1n
infnan \- 	signals invalid floating\-point operations on a VAX
	TEMPORARY! ... Subject to Change.
.ta
.fi
E 2
I 2
D 3
infnan \- signals invalid floating-point operations on a VAX ... TEMPORARY
E 3
I 3
infnan \- signals invalid floating-point operations on a VAX (temporary)
E 3
E 2
.SH SYNOPSIS
.nf
.B #include <math.h>
.PP
.B double infnan(iarg)
.B int iarg;
.SH DESCRIPTION
E 6
I 6
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt INFNAN 3
.Os BSD 4.3
.Sh NAME
.Nm infnan
.Nd signals invalid floating\-point operations on a
.Tn VAX
(temporary)
.Sh SYNOPSIS
.Fd #include <math.h>
.Ft double 
.Fn infnan "int iarg"
.Sh DESCRIPTION
E 6
At some time in the future, some of the useful properties of
D 6
the Infinities and \*(nns in the IEEE standard 754 for Binary
Floating\-Point Arithmetic will be simulated in UNIX on the
DEC VAX by using its Reserved Operands.  Meanwhile, the
E 6
I 6
the Infinities and \*(Nas in the
.Tn IEEE
standard 754 for Binary
Floating\-Point Arithmetic will be simulated in
.Tn UNIX
on the
.Tn DEC VAX
by using its Reserved Operands.  Meanwhile, the
E 6
Invalid, Overflow and Divide\-by\-Zero exceptions of the
D 6
IEEE standard are being approximated on a VAX by calls to a
procedure \fIinfnan\fR in appropriate places in \fIlibm\fR.  When
better exception\-handling is implemented in UNIX, only
\fIinfnan\fR among the codes in \fIlibm\fR will have to be changed.
And users of \fIlibm\fR can design their own \fIinfnan\fR now to
E 6
I 6
.Tn IEEE
standard are being approximated on a
.Tn VAX
by calls to a
procedure
.Fn infnan
in appropriate places in
.Xr libm 3 .
When
better exception\-handling is implemented in
.Tn UNIX , 
only
.Fn infnan
among the codes in
.Xr libm
will have to be changed.
And users of
.Xr libm
can design their own
.Fn infnan
now to
E 6
insulate themselves from future changes.
D 6
.PP
Whenever an elementary function code in \fIlibm\fR has to
simulate one of the aforementioned IEEE exceptions, it calls
infnan(iarg) with an appropriate value of \fIiarg\fR.  Then a
reserved operand fault stops computation.  But \fIinfnan\fR could
E 6
I 6
.Pp
Whenever an elementary function code in
.Xr libm
has to
simulate one of the aforementioned
.Tn IEEE
exceptions, it calls
.Fn infnan iarg
with an appropriate value of
.Fa iarg .
Then a
reserved operand fault stops computation.  But
.Fn infnan
could
E 6
be replaced by a function with the same name that returns
some plausible value, assigns an apt value to the global
D 6
variable \fIerrno\fR, and allows computation to resume.
E 6
I 6
variable
.Va errno ,
and allows computation to resume.
E 6
Alternatively, the Reserved Operand Fault Handler could be
D 5
changed to respond by returning that plausible value etc.
E 5
I 5
changed to respond by returning that plausible value, etc.
E 5
instead of aborting.
D 6
.PP
E 6
I 6
.Pp
E 6
In the table below, the first two columns show various
D 6
exceptions signaled by the IEEE standard, and the default
E 6
I 6
exceptions signaled by the
.Tn IEEE
standard, and the default
E 6
result it prescribes.  The third column shows what value is
D 6
given to \fIiarg\fR by functions in \fIlibm\fR when they
invoke infnan(iarg) under analogous circumstances on a VAX.
Currently \fIinfnan\fR stops computation under all those
E 6
I 6
given to
.Fa iarg
by functions in
.Xr libm
when they
invoke
.Fn infnan iarg
under analogous circumstances on a
.Tn VAX . 
Currently
.Fn infnan
stops computation under all those
E 6
circumstances.  The last two columns offer an alternative;
D 6
they suggest a setting for \fIerrno\fR and a value for a
revised \fIinfnan\fR to return.  And a C program to
E 6
I 6
they suggest a setting for
.Va errno
and a value for a
revised
.Fn infnan
to return.  And a C program to
E 6
implement that suggestion follows. 
.sp 0.5
D 6
.RS
.nf
.ta \w'Div\-by\-0'u+2n +\w'+Infinity'u+1n +\w'+ERANGE'u+1n +\w'ERANGE or EDOM'u+4n +\w'+HUGE'u+1n
IEEE	IEEE
Signal	Default	\fIiarg\fR	\fIerrno\fR	\fIinfnan\fR
D 2
.if t \
\l'4i'
E 2
I 2
.if t \{\
.sp -0.5
.ta \w'Div\-by\-0'u+2n+\w'+Infinity'u+1n+\w'+ERANGE'u+1n+\w'ERANGE or EDOM'u+4n+\w'+HUGE'u+1n
.tc \(ru
	
.ta \w'Div\-by\-0'u+2n +\w'+Infinity'u+1n +\w'+ERANGE'u+1n +\w'ERANGE or EDOM'u+4n +\w'+HUGE'u+1n
.tc \}
E 2
.if n \
\l'5i'
Invalid	\*(nn	EDOM	EDOM	0
.if n \{\
Overflow	\(+-Infinity	ERANGE	ERANGE	HUGE
Div\-by\-0	\(+-Infinity	\(+-ERANGE	ERANGE or EDOM	\(+-HUGE \}
.if t \{\
Overflow	\(+-\(if	ERANGE	ERANGE	HUGE
Div\-by\-0	\(+-\(if	\(+-ERANGE	ERANGE or EDOM	\(+-HUGE \}
.sp 0.5
	(HUGE = 1.7e38 ... nearly  2.0**127)
.ta
.fi
.RE
.sp 0.5
.PP
.nf
.ta \w'\fBextern int\fR'u+1n +\w'\fBdefault:\fR'u+1n +\w'\fB\-ERANGE:\fR'u+1n +\w'\fBerrno = ERANGE;\fR'u+1n
ALTERNATIVE  \fIinfnan\fR:\fB
.sp 0.5
E 6
I 6
.Bd -filled -offset indent
.Bl -column "IEEE Signal" "IEEE Default" XXERANGE ERANGEXXorXXEDOM
.It IEEE Signal	IEEE Default Ta
.Fa iarg Ta
.Va errno Ta
.Fn infnan
.It Invalid	\*(Na Ta
.Dv EDOM	EDOM	0
.It Overflow	\(+-\*(If Ta
.Dv ERANGE	ERANGE	HUGE
.It Div\-by\-0	\(+-Infinity Ta
.Dv \(+-ERANGE	ERANGE or EDOM	\(+-HUGE
.It 	( Ns Dv HUGE No "= 1.7e38 ... nearly  2.0**127)"
.El
.Ed
.Pp
ALTERNATIVE
.Fn infnan :
.Bd -literal -offset indent
E 6
#include	<math.h>
#include	<errno.h>
extern int	errno ;
double	infnan(iarg)
int	iarg ;
{
	switch(iarg) {
D 6
	case	\0ERANGE:	errno = ERANGE;	return(HUGE);
E 6
I 6
	case	\0ERANGE:	errno = ERANGE; return(HUGE);
E 6
	case	\-ERANGE:	errno = EDOM;	return(\-HUGE);
	default:		errno = EDOM;	return(0);
	}
D 6
}\fR
.ta
.fi
.SH SEE ALSO
D 4
intro(3M), intro(2), signal(3).
E 4
I 4
math(3M), intro(2), signal(3).
E 4
.PP
ERANGE and EDOM are defined in <errno.h>.  See intro(2)
D 4
for interpretations of EDOM and ERANGE from the operating
system's point of view.
E 4
I 4
for explanation of EDOM and ERANGE.
E 6
I 6
}
.Ed
.Sh SEE ALSO
.Xr math 3 ,
.Xr intro 2 ,
.Xr signal 3 .
.Pp
.Dv ERANGE
and
.Dv EDOM
are defined in
.Aq Pa errno.h .
(See
.Xr intro 2
for explanation of
.Dv EDOM
and
.Dv ERANGE . )
.Sh HISTORY
The
.Fn infnan
function appeared in 
.Bx 4.3 .
E 6
E 4
E 1
