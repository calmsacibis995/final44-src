h19378
s 00001/00001/00096
d D 8.2 93/12/11 22:37:53 mckusick 11 10
c copyediting for Usenix manuals
e
s 00002/00002/00095
d D 8.1 93/06/04 17:03:25 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00048/00083/00049
d D 6.6 92/12/03 16:35:35 bostic 9 8
c new version with gamma function, from Peter McIlroy
e
s 00003/00001/00129
d D 6.5 91/07/31 15:05:00 cael 8 7
c tranpose two lines
e
s 00102/00060/00028
d D 6.4 91/05/06 13:43:56 cael 7 6
c mdoc version three (the orginal equation was left in)
e
s 00003/00002/00085
d D 6.3 91/04/20 10:37:34 cael 6 4
c added redist.man
e
s 00070/00048/00039
d R 6.3 91/04/20 10:14:51 cael 5 4
c text changes or conversion to -mdoc (version 3)
e
s 00003/00003/00084
d D 6.2 86/05/12 17:11:46 karels 4 3
c intro(3M) => math(3M), move see also's to end
e
s 00075/00018/00012
d D 6.1 85/09/11 18:52:34 mckusick 3 2
c new from Kahan
e
s 00002/00001/00028
d D 1.2 85/08/22 19:55:54 miriam 2 1
c Update diagnastics to reflect the return of reserve operan for
c negative numbers.
e
s 00029/00000/00000
d D 1.1 85/08/22 12:02:40 miriam 1 0
c date and time created 85/08/22 12:02:40 by miriam
e
u
U
t
T
I 1
D 3
.TH GAMMA 3M  "19 January 1983"
E 3
I 3
D 7
.\" Copyright (c) 1985 Regents of the University of California.
E 7
I 7
D 10
.\" Copyright (c) 1985, 1991 Regents of the University of California.
E 7
D 6
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
.\" All rights reserved.
E 10
I 10
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 10
.\"
D 7
.\" %sccs.include.redist.man%
E 7
I 7
.\" %sccs.include.redist.roff%
E 7
E 6
.\"
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\"     %W% (Berkeley) %G%
E 7
.\"
D 7
.TH LGAMMA 3M  "%Q%"
.UC 6
E 3
.SH NAME
D 3
gamma \- log gamma function
E 3
I 3
lgamma \- log gamma function
E 3
.SH SYNOPSIS
.nf
.B #include <math.h>
.PP
D 3
.B double gamma(x)
E 3
I 3
.B double lgamma(x)
E 3
.B double x;
.fi
.SH DESCRIPTION
D 3
.I Gamma
returns ln \||\|\(*G(\||\|\fIx\fR\||\|)\||\|.
The sign of \(*G(\||\|\fIx\fR\||\|) is returned in the external integer
.IR signgam .
The following C program might be used to calculate \(*G:
E 3
I 3
.nf
E 7
I 7
.Dd %Q%
.Dt LGAMMA 3
.Os BSD 4.3
.Sh NAME
.Nm lgamma
D 9
.Nd log gamma function
E 9
I 9
.Nm gamma
.Nd log gamma function, gamma function
E 9
.Sh SYNOPSIS
.Fd #include <math.h>
I 9
.Ft extern int
.Fa signgam ;
.sp
E 9
.Ft double
.Fn lgamma "double x"
I 9
.Ft double
.Fn gamma "double x"
E 9
.Sh DESCRIPTION
E 7
D 9
.ta \w'Lgamma returns ln\||\(*G(x)| where'u+1n +1.7i
E 9
I 9
.Fn Lgamma x
E 9
.if t \{\
D 7
Lgamma returns ln\||\(*G(x)| where	\(*G(x) = \(is\d\s8\z0\s10\u\u\s8\(if\s10\d t\u\s8x\-1\s10\d e\u\s8\-t\s10\d dt	for x > 0 and
E 7
I 7
D 9
Lgamma returns ln\||\(*G(x)| where
E 9
I 9
returns ln\||\(*G(x)| where
E 9
.Bd -unfilled -offset indent
\(*G(x) = \(is\d\s8\z0\s10\u\u\s8\(if\s10\d t\u\s8x\-1\s10\d e\u\s8\-t\s10\d dt	for x > 0 and
E 7
.br
D 7
	\(*G(x) = \(*p/(\(*G(1\-x)\|sin(\(*px))	for x < 1.  \}
E 7
I 7
D 8
\(*G(x) = \(*p/(\(*G(1\-x)\|sin(\(*px))	for x < 1.  \}
E 8
I 8
\(*G(x) = \(*p/(\(*G(1\-x)\|sin(\(*px))	for x < 1.
E 8
.Ed
I 8
.\}
E 8
E 7
.if n \
D 9
Lgamma returns ln\||\(*G(x)|.
.ta
E 9
I 9
returns ln\||\(*G(x)|.
E 9
D 7
.fi
E 3
.PP
I 3
The external integer signgam returns the sign of
E 7
I 7
.Pp
The external integer
.Fa signgam
D 9
returns the sign of
E 7
\(*G(x) .
E 9
I 9
returns the sign of \(*G(x).
.Pp
.Fn Gamma x
returns \(*G(x), with no effect on
.Fa signgam .
E 9
D 7
.SH IDIOSYNCRASIES
Do \fBnot\fR use the expression signgam\(**exp(lgamma(x))
E 7
I 7
.Sh IDIOSYNCRASIES
D 9
Do
.Em not
use the expression
E 9
I 9
Do not use the expression
E 9
.Dq Li signgam\(**exp(lgamma(x))
E 7
D 9
to compute g := \(*G(x).  Instead use a program like this (in C):
E 9
I 9
to compute g := \(*G(x).
Instead use a program like this (in C):
E 9
D 7
.RS
E 7
I 7
.Bd -literal -offset indent
E 7
lg = lgamma(x); g = signgam\(**exp(lg);
D 7
.RE
.PP
Only after lgamma has returned can signgam be correct.
E 7
I 7
.Ed
.Pp
Only after
.Fn lgamma
has returned can signgam be correct.
E 7
D 9
Note too that \(*G(x) must overflow when x is large enough,
underflow when \-x is large enough, and spawn a division by zero
when x is a nonpositive integer.
E 9
D 7
.PP
Only in the UNIX math library for C was the name gamma ever attached
to ln\(*G.  Elsewhere, for instance in IBM's FORTRAN library, the name
GAMMA belongs to \(*G and the name ALGAMA to ln\(*G in single precision;
in double the names are DGAMMA and DLGAMA.  Why should C be different?
.PP
Archaeological records suggest that C's gamma originally delivered
E 7
I 7
.Pp
D 9
Only in the
.Tn UNIX
math library for C was the name gamma ever attached
to ln\(*G.  Elsewhere, for instance in
.Tn IBM Ns 's
.Tn FORTRAN
library, the name
.Tn GAMMA
belongs to \(*G and the name
.Tn ALGAMA
to ln\(*G in single precision;
in double the names are
.Tn DGAMMA
E 9
I 9
For arguments in its range,
.Fn gamma
is preferred, as for positive arguments
it is accurate to within one unit in the last place.
Exponentiation of
.Fn lgamma
will lose up to 10 significant bits.
.Sh RETURN VALUES
.Fn Gamma
E 9
and
D 9
.Tn DLGAMA .
Why should C be different?
.Pp
Archaeological records suggest that C's
.Em gamma
originally delivered
E 7
ln(\(*G(|x|)).  Later, the program gamma was changed to
cope with negative arguments x in a more conventional way, but
the documentation did not reflect that change correctly.  The most
recent change corrects inaccurate values when x is almost a
negative integer, and lets \(*G(x) be computed without
conditional expressions.  Programmers should not assume that
E 9
D 7
lgamma has settled down.
.PP
At some time in the future, the name \fIgamma\fR will be rehabilitated
and used for the gamma function, just as is done in FORTRAN.
The reason for this is not so much compatibility with FORTRAN as a
E 7
I 7
.Fn lgamma
D 9
has settled down.
.Pp
At some time in the future, the name
.Em gamma
will be rehabilitated
and used for the gamma function, just as is done in
.Tn FORTRAN .
The reason for this is not so much compatibility with
.Tn FORTRAN
as a
E 7
desire to achieve greater speed for smaller values of |x| and greater
accuracy for larger values.
D 7
.PP
Meanwhile, programmers who have to use the name \fIgamma\fR in its former
sense, for what is now \fIlgamma\fR, have two choices:
.IP 1) \w'1)\0'u
Use the old math library, \fIlibom\fR.
.IP 2) \w'1)\0'u
E 7
I 7
.Pp
Meanwhile, programmers who have to use the name
.Em gamma
in its former
sense, for what is now
.Fn lgamma ,
have two choices:
.Bl -enum -width indent
.It
Use the old math library,
.Pa libom .
.It
E 7
Add the following program to your others:
D 7
.RS
E 3
.nf
D 3
	y = gamma(x);
	if (y > 88.0)
		error();
	y = exp(y);
	if(signgam)
		y = \-y;
E 3
I 3
\fB#include <math.h>
E 7
I 7
.Bd -literal -offset indent
#include <math.h>
E 7
double gamma(x)
double x;
{
D 7
.RS
\fBreturn (lgamma(x));
.RE
}\fR
.RE
E 3
.fi
I 3
D 4
.SH SEE ALSO
intro(3M), infnan(3M)
E 4
E 3
.SH DIAGNOSTICS
D 2
A huge value is returned for negative integer arguments.
E 2
I 2
D 3
The reserved operand is returned on a VAX for negative integer
arguments, \fIerrno\fR is set to ERANGE.
E 2
.SH BUGS
There should be a positive indication of error.
E 3
I 3
The reserved operand is returned on a VAX for negative integer arguments,
\fIerrno\fR is set to ERANGE; for very large arguments over/underflows will
D 4
occur inside the program lgamma.
E 4
I 4
occur inside the \fIlgamma\fP routine.
.SH SEE ALSO
math(3M), infnan(3M)
E 7
I 7
	return (lgamma(x));
}
.Ed
I 8
.El
E 8
.Sh DIAGNOSTICS
The reserved operand is returned on a
.Tn VAX
for negative integer arguments,
E 9
I 9
D 11
return appropriate values unless an arguent is out of range.
E 11
I 11
return appropriate values unless an argument is out of range.
E 11
Overflow will occur for sufficiently large positive values, and
non-positive integers.
On the
.Tn VAX,
the reserved operator is returned,
and
E 9
.Va errno
is set to
D 9
.Er ERANGE ;
for very large arguments over/underflows will
occur inside the
.Fn lgamma
routine.
E 9
I 9
.Er ERANGE
For large non-integer negative values,
.Fn gamma
will underflow.
E 9
.Sh SEE ALSO
.Xr math 3 ,
.Xr infnan 3
.Sh HISTORY
The
D 9
.Nm
E 9
I 9
.Nm lgamma
E 9
function appeared in 
.Bx 4.3 .
I 9
The
.Nm gamma
function appeared in
.Bx 4.4 .
The name
.Fn gamma
was originally dedicated to the
.Fn lgamma
function, so some old code may no longer be compatible.
E 9
E 7
E 4
E 3
E 1
