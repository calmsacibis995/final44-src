h39006
s 00002/00002/00044
d D 8.1 93/06/04 17:04:29 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00043/00194/00003
d D 6.7 91/04/19 14:50:39 cael 9 8
c macro and text revision (-mdoc version 3)
e
s 00002/00002/00195
d D 6.6 86/05/12 17:11:50 karels 8 7
c intro(3M) => math(3M), move see also's to end
e
s 00012/00005/00185
d D 6.5 85/09/11 18:52:44 mckusick 7 6
c new from Kahan
e
s 00146/00177/00044
d D 6.4 85/08/21 15:23:35 miriam 6 5
c Revision by Prof. Kahan.
e
s 00140/00002/00081
d D 6.3 85/06/19 10:56:42 miriam 5 4
c Expand the Notes section.
e
s 00037/00021/00046
d D 6.2 85/05/24 12:11:20 miriam 4 3
c From Prof. Kahan
e
s 00001/00001/00066
d D 6.1 85/05/15 15:04:41 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00004/00007/00063
d D 5.1 85/05/15 15:04:31 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00070/00000/00000
d D 4.1 85/05/15 15:04:24 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 4
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH SIN 3M 
E 2
I 2
D 3
.TH SIN 3M  "19 January 1983"
E 3
I 3
.TH SIN 3M  "%Q%"
E 3
E 2
.AT 3
E 4
I 4
D 6
.TH SIN 3M  "8 May 1985"
E 6
I 6
D 7
.TH SIN 3M  "6 August 1985"
E 7
I 7
D 9
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 9
I 9
D 10
.\" Copyright (c) 1991 The Regents of the University of California.
.\" All rights reserved.
E 10
I 10
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 10
E 9
.\"
.\"	%W% (Berkeley) %G%
I 9
.\" %sccs.include.redist.man%
E 9
.\"
D 9
.TH SIN 3M  "%Q%"
E 7
E 6
.UC 4
I 6
.de Pi		\" PI stuff sign
.if n \\
\\$2pi\\$1
.if t \\
\\$2\\(*p\\$1
..
.ds up \fIulp\fR
E 6
E 4
.SH NAME
sin, cos, tan, asin, acos, atan, atan2 \- trigonometric functions
I 6
and their inverses
E 6
.SH SYNOPSIS
.nf
.B #include <math.h>
.PP
.B double sin(x)
.B double x;
.PP
.B double cos(x)
.B double x;
.PP
I 4
.B double tan(x)
.B double x;
.PP
E 4
.B double asin(x)
.B double x;
.PP
.B double acos(x)
.B double x;
.PP
.B double atan(x)
.B double x;
.PP
D 4
.B double atan2(x, y)
.B double x, y;
E 4
I 4
D 6
.B double atan2(y, x)
.B double y, x;
E 6
I 6
.B double atan2(y,x)
.B double y,x;
E 6
E 4
.fi
.SH DESCRIPTION
D 6
.I Sin, cos
and
.I tan
return trigonometric functions of radian arguments.
E 6
I 6
Sin, cos and tan
return trigonometric functions of radian arguments x.
E 6
D 4
The magnitude of the argument should be checked
by the caller to make sure the result is meaningful.
E 4
.PP
D 6
.I Asin
returns the arc sin in the range \-\(*p/2 to \(*p/2.
E 6
I 6
Asin returns the arc sine in the range 
.Pi /2 \-
to
.Pi /2.
E 6
.PP
D 6
.I Acos
D 2
returns the arc cosine in the range
0 to \(*p.
E 2
I 2
returns the arc cosine in the range 0 to \(*p.
E 6
I 6
Acos returns the arc cosine in the range 0 to
.Pi.
E 6
E 2
.PP
D 6
.I Atan
returns the arc tangent of
.I x
in the range \-\(*p/2 to \(*p/2.
E 6
I 6
Atan returns the arc tangent in the range
.Pi /2 \-
to
.Pi /2.
E 6
.PP
D 6
.I Atan2
D 4
returns the arc tangent of
.I x/y
in the range \-\(*p to \(*p.
E 4
I 4
returns
.I atan(y/x)
if
.I x
> 0,
.br
.I sign(y)*(\(*p \- atan(|y/x|))
if
.I x
< 0,
.br
.I zero
if
.I x
= 
.I y
= 0 and
.br
.I sign(y)*\(*p/2
if
.I x
= 0 but
.I y
not equal to 0.
E 6
I 6
On a VAX,
.nf
.if n \{\
.ta \w'atan2(y,x) := 'u+2n +\w'sign(y)\(**(pi \- atan(|y/x|))'u+2n
atan2(y,x) := 	atan(y/x)	if x > 0,
	sign(y)\(**(pi \- atan(|y/x|))	if x < 0,
	0	if x = y = 0, or
	sign(y)\(**pi/2	if x = 0 != y.  \}
.if t \{\
.ta \w'atan2(y,x) := 'u+2n +\w'sign(y)\(**(\(*p \- atan(|y/x|))'u+2n
atan2(y,x) := 	atan(y/x)	if x > 0,
	sign(y)\(**(\(*p \- atan(|y/x|))	if x < 0,
	0	if x = y = 0, or
	sign(y)\(**\(*p/2	if x = 0 \(!= y.  \}
.ta
.fi
E 6
D 8
.SH SEE ALSO
D 5
intro(3M)
E 5
I 5
D 6
intro(3M), hypot(3M), sqrt(3M)
E 6
I 6
intro(3M), hypot(3M), sqrt(3M), infnan(3M)
E 8
E 6
E 5
E 4
.SH DIAGNOSTICS
D 2
Arguments of magnitude greater than 1
cause
E 2
I 2
D 6
Arguments of magnitude greater than 1 cause
E 2
.I asin
and
.I acos
D 4
to return value 0;
E 4
I 4
to return the reserved operand on the VAX;
E 4
.I errno
D 2
is set to EDOM.
The value of
E 2
I 2
D 4
is set to EDOM.  The value of
E 2
.I tan
at its singular points is a huge number, and
.I errno
is set to ERANGE.
.SH BUGS
The value of
.I tan
for arguments greater than about 2**31 is garbage.
E 4
I 4
is set to EDOM.
E 6
I 6
On a VAX, if |x| > 1 then asin(x) and acos(x)
will return reserved operands and \fIerrno\fR will be set to EDOM.
E 6
I 5
.SH NOTES
D 6
.I Atan2
defines
.I atan2(0,0)
=
.I 0
on the VAX despite that previously
.I atan2(0,0)
may have generated an error message.
The reasons for assigning a value to
.I atan2(0,0)
are these:
.IP (1)
Any program that already tests whether
.I y
=
.I x
=
.I 0
before computing
.I atan2(y,x)
will be indifferent to whether
.I atan2(0,0)
=
.I 0
or not.
Any program that expects
.I atan2(0,0)
to be invalid is dubious because the consequence of that
invalidity will vary from one computer system to another.
.IP (2)
The principal use for
.I atan2
is conversion between rectangular (\fIx, y\fR) and polar
(\fIr\fR,
E 6
I 6
Atan2 defines atan2(0,0) = 0 on a VAX despite that previously
atan2(0,0) may have generated an error message.
The reasons for assigning a value to atan2(0,0) are these:
.IP (1) \w'\0\0\0\0'u
Programs that test arguments to avoid computing
atan2(0,0) must be indifferent to its value.
Programs that require it to be invalid are vulnerable
to diverse reactions to that invalidity on diverse computer systems. 
.IP (2) \w'\0\0\0\0'u
Atan2 is used mostly to convert from rectangular (x,y)
to polar
E 6
.if n\
D 6
\fItheta\fR)
E 6
I 6
(r,theta)
E 6
.if t\
D 6
\fI\(*h\fR)
coordinates that must satisfy
.br
.I x
=
.I r
\(**
.I cos
E 6
I 6
(r,\(*h)
coordinates that must satisfy x =
E 6
.if n\
D 6
.I theta
E 6
I 6
r\(**cos theta
E 6
.if t\
D 6
\(*h
and
.I y
=
.I r
\(**
.I sin
E 6
I 6
r\(**cos\(*h
and y =
E 6
.if n\
D 6
.I theta.
E 6
I 6
r\(**sin theta.
E 6
.if t\
D 6
\(*h.
Then mapping (\fIx\fR = \fI0\fR, \fIy\fR = \fI0\fR) to
(\fIr\fR = \fI0\fR,
.if n\
.I theta
.if t\
.I \(*h
= \fI0\fR)
without fuss saves a programmer from nuisance tests.
In general, given
.I x
and
.I y
the conversion should be effected by computing
E 6
I 6
r\(**sin\(*h.
These equations are satisfied when (x=0,y=0)
is mapped to 
.if n \
(r=0,theta=0)
.if t \
(r=0,\(*h=0)
on a VAX.  In general, conversions to polar coordinates
should be computed thus:
.nf
.ta 1iR +1n +\w' := hypot(x,y);'u+0.5i
.if n \{\
	r	:= hypot(x,y);	... := sqrt(x\(**x+y\(**y)
	theta	:= atan2(y,x).
.ta \}
.if t \{\
	r	:= hypot(x,y);	... := \(sr(x\u\s82\s10\d+y\u\s82\s10\d)
	\(*h	:= atan2(y,x).
.ta \}
.fi
.IP (3) \w'\0\0\0\0'u
The foregoing formulas need not be altered to cope in a
reasonable way with signed zeros and infinities
on a machine that conforms to IEEE 754;
the versions of hypot and atan2 provided for
such a machine are designed to handle all cases.
That is why atan2(\(+-0,\-0) =
.Pi , \(+-
for instance.
In general the formulas above are equivalent to these:
E 6
.RS
D 6
.I r
=
\fIhypot\fR(\fIx\fR,\fIy\fR)			... :=
.if n\
\fIsqrt\fR(\fIx**2\fR+\fIy**2\fR)
.if t\
\fIsqrt\fR(\fIx\u\s82\s10\d\fR+\fIy\u\s82\s10\d\fR)
E 6
I 6
.nf
.if n \
r := sqrt(x\(**x+y\(**y); if r = 0 then x := copysign(1,x);
.if t \
r := \(sr(x\(**x+y\(**y);\0\0if r = 0 then x := copysign(1,x);
E 6
.br
D 6
.if n\
.I theta
.if t\
\(*h
=
.I atan2(y,x).
E 6
I 6
.if n \
.ta 1i
.if t \
.ta \w'if x > 0'u+2n +\w'then'u+2n
.if n \
if x > 0	then theta := 2\(**atan(y/(r+x))
.if t \
if x > 0	then	\(*h := 2\(**atan(y/(r+x))
.if n \
	else theta := 2\(**atan((r\-x)/y);
.if t \
	else	\(*h := 2\(**atan((r\-x)/y);
.fi
E 6
.RE
D 6
.IP (3)
On a machine that conforms to IEEE
.I 754,
the foregoing conversion has to cope with signed
.I zeroes
and
.I infinities.
For that purpose the formula above is compatible
with the following:
.br
if
.I x
\(>=
.I 0
then
.if n\
.I theta
.if t\
\(*h
=
.I 2\(**atan(y/(r\fR+\fIx))
else
.if n\
I theta
.if t\
\(*h
=
.I 2\(**atan((r\-x)/y)
.br
except if
.I r
=
.I 0
then replace
.I x
by
.I copysign(1,x)
here, and if
.I r
is infinite take limits to get a multiple of
.if n\
.I pi/4
.if t\
\(*p/4
for
.if n\
.I theta.
.if t\
\(*h.
E 6
I 6
except if r is infinite then atan2 will yield an
appropriate multiple of
.Pi /4
that would otherwise have to be obtained by taking limits.
.SH ERROR (due to Roundoff etc.)
Let P stand for the number stored in the computer in place of
.Pi " = 3.14159 26535 89793 23846 26433 ... ."
Let "trig" stand for one of "sin", "cos" or "tan".  Then
the expression "trig(x)" in a program actually produces an
approximation to
.Pi /P), trig(x\(**
and "atrig(x)" approximates
.Pi )\(**atrig(x). (P/
The approximations are close,  within 0.9 \*(ups for sin,
cos and atan, within 2.2 \*(ups for tan, asin,
acos and atan2 on a VAX.  Moreover,
.Pi \& "P = "
in the codes that run on a VAX.

In the codes that run on other machines, P differs from
.Pi
by a fraction of an \*(up; the difference matters only if the argument
x is huge, and even then the difference is likely to be swamped by
the uncertainty in x.  Besides, every trigonometric identity that
does not involve
.Pi
explicitly is satisfied equally well regardless of whether
.Pi . "P = "
For instance,
.if n \
sin(x)**2+cos(x)**2\0=\01
.if t \
sin\u\s62\s10\d(x)+cos\u\s62\s10\d(x)\0=\01
and sin(2x)\0=\02\|sin(x)cos(x) to within a few \*(ups no matter how big
D 7
x may be.  Therefore scientific and engineering calculations
are most unlikely to be affected by the difference between P and
.Pi .
E 7
I 7
x may be.  Therefore the difference between P and
.Pi
is most unlikely to affect scientific and engineering computations.
I 8
.SH SEE ALSO
math(3M), hypot(3M), sqrt(3M), infnan(3M)
E 8
E 7
E 6
E 5
.SH AUTHOR
D 5
Robert P. Corbett, W. Kahan, Stuart McDonald, Kwok-Choi Ng
E 5
I 5
D 6
Robert P. Corbett, W. Kahan, Stuart McDonald, Kwok\-Choi Ng
E 6
I 6
D 7
Robert P. Corbett, W. Kahan, Stuart I. McDonald, Kwok\-Choi\0Ng
E 7
I 7
Robert P. Corbett, W. Kahan, Stuart\0I.\0McDonald, Peter\0Tang and,
for the codes for IEEE 754, Dr. Kwok\-Choi\0Ng.
E 9
I 9
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt SIN 3
.Os
.Sh NAME
.Nm sin
.Nd sine function
.Sh SYNOPSIS
.Fd #include <math.h>
.Ft double
.Fn sin "double x"
.Sh DESCRIPTION
The
.Fn sin
function computes the sine of
.Fa x
(measured in radians).
A large magnitude argument may yield a result with little
or no significance.
.Sh RETURN VALUES
The
.Fn sin
function returns the sine value.
.Sh SEE ALSO
.Xr acos 3 ,
.Xr asin 3 ,
.Xr atan 3 ,
.Xr atan2 3 ,
.Xr cos 3 ,
.Xr cosh 3 ,
.Xr sinh 3 ,
.Xr tan 3 ,
.Xr tanh 3 ,
.Xr math 3 ,
.Sh STANDARDS
The
.Fn sin
function conforms to
.St -ansiC .
E 9
E 7
E 6
E 5
E 4
E 1
