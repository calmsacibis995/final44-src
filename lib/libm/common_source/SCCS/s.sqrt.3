h33391
s 00002/00002/00092
d D 8.1 93/06/04 17:04:43 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00003/00093
d D 6.4 91/05/06 13:36:51 cael 7 6
c remove author section
e
s 00093/00038/00003
d D 6.3 91/04/19 14:50:35 cael 6 5
c macro and text revision (-mdoc version 3)
e
s 00002/00002/00039
d D 6.2 86/05/12 17:11:59 karels 5 4
c intro(3M) => math(3M), move see also's to end
e
s 00008/00002/00033
d D 6.1 85/09/11 18:53:21 mckusick 4 3
c new from Kahan
e
s 00016/00014/00019
d D 1.3 85/08/21 15:28:14 miriam 3 2
c Revision by Prof. Kahan.
e
s 00033/00001/00000
d D 1.2 85/05/24 12:14:25 miriam 2 1
c From Prof. Kahan
e
s 00001/00000/00000
d D 1.1 85/05/24 12:13:30 miriam 1 0
c date and time created 85/05/24 12:13:30 by miriam
e
u
U
t
T
I 1
D 2
.so man3/exp.3m
E 2
I 2
D 3
.TH SQRT 3M  "8 May 1985"
E 3
I 3
D 4
.TH SQRT 3M  "7 August 1985"
E 3
.UC 4
E 4
I 4
D 6
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 8
.\" Copyright (c) 1985, 1991 Regents of the University of California.
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
E 6
.\"
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
D 7
.\" %sccs.include.redist.man%
E 7
I 7
.\" %sccs.include.redist.roff%
E 7
E 6
.\"
D 6
.TH SQRT 3M  "%Q%"
.UC 6
E 4
I 3
.ds up \fIulp\fR
E 3
.SH NAME
cbrt, sqrt \- cube root, square root
.SH SYNOPSIS
.nf
.B #include <math.h>
.PP
.B double cbrt(x)
.B double x;
.PP
.B double sqrt(x)
.B double x;
.fi
.SH DESCRIPTION
D 3
.I Cbrt
returns the cube root of
.I x.
E 3
I 3
Cbrt(x) returns the cube root of x.
E 3
.PP
D 3
.I Sqrt
returns the square root of 
.I x.
E 3
I 3
Sqrt(x) returns the square root of x.
E 3
D 5
.SH SEE ALSO
D 3
intro(3M)
E 3
I 3
intro(3M), infnan(3M)
E 5
E 3
.SH DIAGNOSTICS
D 3
.I Sqrt
returns the reserved operand on the VAX when 
.I x
is negative;
.I errno
is set to EDOM.
E 3
I 3
On a VAX, sqrt(negative)
returns the reserved operand and sets \fIerrno\fR to EDOM .
.SH ERROR (due to Roundoff etc.)
Cbrt is accurate to within 0.7 \*(ups.
.br
Sqrt on a VAX is accurate to within 0.501 \*(ups.
.br
Sqrt on a machine that conforms to IEEE 754 is correctly rounded
E 6
I 6
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt SQRT 3
.Os
.Sh NAME
.Nm cbrt ,
.Nm sqrt
.Nd cube root and square root functions
.Sh SYNOPSIS
.Fd #include <math.h>
.Ft double
.Fn cbrt "double x"
.Ft double
.Fn sqrt "double x"
.Sh DESCRIPTION
The
.Fn cbrt
function computes
the cube root of
.Ar x .
.Pp
The
.Fn sqrt
computes the
non-negative square root of x.
.Sh RETURN VALUES
The
.Fn cbrt
function returns the requested cube root.
The
.Fn sqrt
function returns the requested square root
unless an error occurs.
On the
.Tn VAX
or
.Tn Tahoe
processor an attempt to take the
.Fn sqrt
of negative
.Fa x
causes an error; in this event,
the global variable
.Va errno
is set to
.Dv EDOM
and a reserved operand fault is generated.
.Sh ERROR (due to Roundoff etc.)
The
.Fn cbrt
function
is accurate to within 0.7
.Em ulps .
.Pp
The
.Fn sqrt
function on a
.Tn VAX
is accurate to within 0.501
.Em ulps .
Sqrt on a machine that conforms to
.Tn IEEE
754 is correctly rounded
E 6
in accordance with the rounding mode in force; the error is less than
D 6
half an \*(up in the default mode (round\-to\-nearest).
An \*(up is one \fIU\fRnit in the \fIL\fRast \fIP\fRlace carried.
I 5
.SH SEE ALSO
math(3M), infnan(3M)
E 5
E 3
.SH AUTHOR
W. Kahan
E 6
I 6
half an
.Em ulp
in the default mode (round\-to\-nearest).
An
.Em ulp
is one
.Em U Ns nit
in the
.Em L Ns ast
.Em P Ns lace
carried.
.Sh SEE ALSO
.Xr math 3 ,
.Xr infnan 3
D 7
.Sh AUTHOR
.An W. Kahan
E 7
.Sh STANDARDS
The
.Nm sqrt
function conforms to
.St -ansiC .
.Sh HISTORY
The
.Nm cbrt
function appeared in
.Bx 4.3 .
E 6
E 2
E 1
