h12926
s 00002/00002/00169
d D 5.4 93/12/30 15:39:10 mckusick 4 3
c copyediting for Usenix manuals
e
s 00122/00128/00049
d D 5.3 92/07/12 13:00:56 cael 3 2
c mdoc version three
e
s 00004/00002/00173
d D 5.2 91/07/31 17:31:48 cael 2 1
c change \(lq and \(rq to defined strings
e
s 00175/00000/00000
d D 5.1 91/07/31 17:20:57 bostic 1 0
c date and time created 91/07/31 17:20:57 by bostic
e
u
U
t
T
I 1
D 3
.\" @(#)rpcgen.1	2.2 88/08/02 4.0 RPCSRC
I 2
.ds lq \|(\|
.ds rq \|)\|
E 2
.TH RPCGEN 1 "18 January 1988"
.SH NAME
rpcgen \- an RPC protocol compiler
.SH SYNOPSIS
.BI rpcgen " infile"
.br
.B rpcgen
.BR \-c \|| \|\-h \|| \|\-l \||\fB\|\-m
[
.BI \-o " outfile"
]
[
.I infile
]
.br
.B rpcgen \-s
.I transport
[
.BI \-o " outfile"
]
[
.I infile
]
.br
.SH DESCRIPTION
.IX "compilers" rpcgen "" "\fLrpcgen\fR \(em generate RPC protocols, C header files"
.IX rpcgen "" "\fLrpcgen\fR \(em generate RPC protocol, C header files, and server skeleton"
.IX RPC "generate protocols \(em \fLrpcgen\fR"
.B rpcgen
is a tool that generates C
E 3
I 3
.\" Copyright 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Derived from Sun Microsystems rpcgen.1        2.2 88/08/02 4.0 RPCSRC
.\"
.\" %sccs.include.redist.roff%
.\"
.\"	%W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt RPCGEN 1
.Sh NAME
.Nm rpcgen
.Nd an
.Tn RPC
protocol compiler
.Sh SYNOPSIS
.Nm rpcgen Ar infile
.Nm rpcgen
.Fl c | Fl h | Fl l |
.Fl m
.Op Fl o Ar outfile
.Op Ar infile
.Nm rpcgen Fl s Ar transport
.Op Fl o Ar outfile
.Op Ar infile
.Sh DESCRIPTION
.Nm rpcgen
is a tool that generates
.Tn \&C
E 3
code to implement an
D 3
.SM RPC
E 3
I 3
.Tn RPC
E 3
protocol.  The input to
D 3
.B rpcgen
E 3
I 3
.Nm rpcgen
E 3
is a language similar to C
known as
D 3
.SM RPC
E 3
I 3
.Tn RPC
E 3
Language (Remote Procedure Call Language).  Information
about the syntax of
D 3
.SM RPC
E 3
I 3
.Tn RPC
E 3
Language is available in the
D 3
.RI ` rpcgen ' " Programming Guide."
.LP
.B rpcgen
E 3
I 3
.Rs
.%T "Rpcgen Programming Guide"
.Re
.Pp
Available options:
.Bl -tag -width indent
.It Fl c
Compile into
.Dv XDR
routines.
.It Fl h
Compile into
.Tn \&C
data-definitions (a header file)
.It Fl l
Compile into client-side stubs.
.It Fl m
Compile into server-side stubs, but do not generate a
.Em main
routine.
This option is useful for doing callback-routines and for people who
need to write their own
.Em main
routine to do initialization.
.It Fl o Ar outfile
Specify the name of the output file.
If none is specified, standard output is used
.Pf ( Fl c ,
.Fl h ,
.Fl l
and
.Fl s
modes only).
.It Fl s Ar transport
D 4
Compile into server-side stubs, using the the given transport.  The
E 4
I 4
Compile into server-side stubs, using the given transport.  The
E 4
supported transports
are
.Tn UDP
and
.Tn TCP .
This option may be invoked more than once
so as to compile a server that serves multiple transports.
.El
.Pp
.Nm rpcgen
E 3
is normally used as in the first synopsis where it takes an input file
and generates four output files. If the
D 3
.I infile
E 3
I 3
.Ar infile
E 3
is named
D 3
.BR proto.x ,
E 3
I 3
.Pa proto.x ,
E 3
then
D 3
.B rpcgen
E 3
I 3
.Nm rpcgen
E 3
will generate a header file in
D 3
.BR proto.h ,
.SM XDR
E 3
I 3
.Pa proto.h ,
.Dv XDR
E 3
routines in
D 3
.BR proto_xdr.c ,
E 3
I 3
.Pa proto_xdr.c ,
E 3
server-side stubs in
D 3
.BR proto_svc.c ,
E 3
I 3
.Pa proto_svc.c ,
E 3
and client-side stubs in
D 3
.BR proto_clnt.c .
.LP
E 3
I 3
.Pa proto_clnt.c .
.Pp
E 3
The other synopses shown above are used when one does not want to
generate all the output files, but only a particular one.  Their
usage is described in the
D 3
.SM USAGE
E 3
I 3
.Sx USAGE
E 3
section below.
D 3
.LP
E 3
I 3
.Pp
E 3
The C-preprocessor,
D 3
.BR cpp (1),
E 3
I 3
.Xr cpp 1 ,
E 3
is run on all input files before they are actually
interpreted by
D 3
.BR rpcgen ,
E 3
I 3
.Nm rpcgen ,
E 3
so all the
D 3
.B cpp
E 3
I 3
.Xr cpp
E 3
directives are legal within an
D 3
.B rpcgen
E 3
I 3
.Nm rpcgen
E 3
input file.  For each type of output file,
D 3
.B rpcgen
E 3
I 3
.Nm rpcgen
E 3
defines a special
D 3
.B cpp
E 3
I 3
.Xr cpp
E 3
symbol for use by the
D 3
.B rpcgen
E 3
I 3
.Nm rpcgen
E 3
programmer:
D 3
.PP
.PD 0
.TP 12
.SM RPC_HDR
E 3
I 3
.Pp
.Bl -tag -width "RPC_CLNT"
.It Dv RPC_HDR
E 3
defined when compiling into header files
D 3
.TP
.SM RPC_XDR
E 3
I 3
.It Dv RPC_XDR
E 3
defined when compiling into
D 3
.SM XDR
E 3
I 3
.Dv XDR
E 3
routines
D 3
.TP
.SM RPC_SVC
E 3
I 3
.It Dv RPC_SVC
E 3
defined when compiling into server-side stubs
D 3
.TP
.SM RPC_CLNT
E 3
I 3
.It Dv RPC_CLNT
E 3
defined when compiling into client-side stubs
D 3
.PD
.LP
E 3
I 3
.El
.Pp
E 3
In addition,
D 3
.B rpcgen
E 3
I 3
.Nm rpcgen
E 3
does a little preprocessing of its own.
Any line beginning with
D 3
.RB ` % '
E 3
I 3
.Ql \&%
E 3
is passed directly into the output file, uninterpreted by
D 3
.BR rpcgen .
.LP
E 3
I 3
.Nm rpcgen .
.Pp
E 3
You can customize some of your
D 3
.SM XDR
E 3
I 3
.Dv XDR
E 3
routines by leaving those data
types undefined.  For every data type that is undefined,
D 3
.B rpcgen
E 3
I 3
.Nm rpcgen
E 3
will assume that there exists a routine with the name
D 3
.B xdr_
E 3
I 3
.Em xdr_
E 3
prepended to the name of the undefined type.
D 3
.SH OPTIONS
.TP
.B \-c
Compile into
.SM XDR
routines.
.TP
.B \-h
Compile into
.B C
data-definitions (a header file)
.TP
.B \-l
Compile into client-side stubs.
.TP
.B \-m
D 2
Compile into server-side stubs, but do not generate a \(lqmain\(rq routine.
E 2
I 2
Compile into server-side stubs, but do not generate a \*(lqmain\*(rq routine.
E 2
This option is useful for doing callback-routines and for people who
D 2
need to write their own \(lqmain\(rq routine to do initialization.
E 2
I 2
need to write their own \*(lqmain\*(rq routine to do initialization.
E 2
.TP
.BI \-o " outfile"
Specify the name of the output file.
If none is specified, standard output is used
.RB ( \-c ,
.BR \-h ,
.B \-l
and
.B \-s
modes only).
.TP
.BI \-s " transport"
Compile into server-side stubs, using the the given transport.  The
supported transports
are
.B udp
and
.BR tcp .
This option may be invoked more than once
so as to compile a server that serves multiple transports.
.br
.ne 5
.SH "SEE ALSO"
.BR cpp (1)
.LP
.RI ` rpcgen ' " Programming Guide."
.br
.ne 4
.SH BUGS
.LP
E 3
I 3
.Sh SEE ALSO
.Xr cpp 1
.Rs
.%T "Rpcgen Programming Guide"
D 4
.%I "Sun Micropsystems"
E 4
I 4
.%I "Sun Microsystems"
E 4
.Re
.Sh BUGS
.Pp
E 3
Nesting is not supported.
As a work-around, structures can be declared at
top-level, and their name used inside other structures in order to achieve
the same effect.
D 3
.LP
E 3
I 3
.Pp
E 3
Name clashes can occur when using program definitions, since the apparent
scoping does not really apply. Most of these can be avoided by giving
unique names for programs, versions, procedures and types.
E 1
