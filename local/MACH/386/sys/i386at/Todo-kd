/* 
 * Mach Operating System
 * Copyright (c) 1989 Carnegie-Mellon University
 * Copyright (c) 1988 Carnegie-Mellon University
 * All rights reserved.  The CMU software License Agreement specifies
 * the terms and conditions for use and redistribution.
 */
/*
 * HISTORY
 * $Log:	Todo-kd,v $
 * Revision 1.4.1.2  90/06/07  08:05:21  rvb
 * 	From orc.
 * 
 * 
 * Revision 1.8  90/05/09  16:49:03  kupfer
 * Remove notes that no longer seem to apply.
 * 
 * Revision 1.7  90/02/26  17:54:58  kupfer
 * Synch with CMU.  h/w workarounds ifdef'd by h/w type.
 * 
 * Revision 1.4  89/09/20  17:27:11  rvb
 * 	Revision 1.5  89/08/01  18:18:51  kupfer
 * 	Track recent changes.
 * 
 * 	Revision 1.4  89/07/07  17:56:03  kupfer
 * 	X79 merge, 2nd attempt.
 * 
 * Revision 1.3  89/02/26  12:40:02  gm0w
 * 	Changes for cleanup.
 * 
 */

is there anything in addition to ivect[] that you should set when
turning on the mouse?

Once the vanilla serial port driver is done, make sure there
aren't any conflicts with your mouse driver.

Can you use Alt as a Meta key (e.g., for running Emacs outside of
X)?

What should the driver do if it goes back to Ascii mode while there
are still unread events in the queue?  Similarly, what should you do
with pending input on /dev/console's queue?

Use Scancode typedef.  Should probably also use a typedef for
keyboard state.

kd.h may still need some work to make it less likely to conflict with
user programs that might use it.  Also, fix the comments for "struct
kbentry" - there's no keyboard(7) man page.

is there a race condition at the beginning of kdopen(), initializing
"tp"?  In fact, you might want to compare the kd routines with their
VAX and/or RT equivalents.  Check for their use of spl's.

Check the robustness of your mouse driver.  What happens if you
open /dev/mouse when the mouse isn't hooked up?

Check the routines that do outb's for various reasons (esp. for
turning the bell on or off).  Should they have SPLKD's or splhi's in
them?

i386at/i386_pic.c lists the interrupt level for kdintr as SPL6.
Should you make that SPLTTY?

Quick mouse events (e.g., double-clicking, or even quickly clicking
adjacent buttons) are missed if the console is scrolling.  Maybe
because the reader process is running at spltty?  Or maybe because the
driver used incorrect priority values when setting up the Blit?

Are there any mechanisms (e.g., for queueing) that you managed to
re-invent?  (Send mail to info-mach about this.  Maybe you should make
your package more generic and donate it.)

kd_event and kd_mouse should share code, rather than use cloned code.

Maybe key_map should be initialized in kd.h, so that, e.g., kbd.c can
use it for "Reset".

cnputc() and pmap_pte() should probably share a macro to determine
whether a pmap (in particular, kernel_pmap) has been set up.

You should probably implement the TIOCSPGRP ioctl for /dev/kbd and
/dev/mouse.  Should you put back the code in
server/ddx/blit/blit{Mouse,Kbd}.c that does fcntl(...SETOWN...)?

"more -c" doesn't do the right thing when a line wraps around.  Is
this a bug in "more" or a bug in the kd driver?

Shouldn't you be more selective about when you do a wakeup() in
kd_event.c?

Better locking for (future) multiprocessors?  (Don't forget kd_event.c.)

Finish scancode definitions in kd.h?

Should really write test program to ensure that all the escape processing
is handled correctly.

Should simplify the "abstract screen" model to use 1 char per
character position (instead of ONE_SPACE char's).  (Having ONE_SPACE
appear in all the high-level code is pretty ugly.)

Support for additional ioctl's (see keyboard(7) and display(7) in
System V man pages & at tty(4) from BSD man pages)?

Copyright printf at startup?

Should cngetc recognize caps lock?


