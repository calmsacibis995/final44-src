12-Sep-90 12:05    Mary.Thompson                Version 5.1(X130)
From: Mary.Thompson@MRT.MACH.CS.CMU.EDU
New features:
--- --------

Added implementation of the TASK_EVENTS_INFO flavor of task_info().
  - from Sandro
 
Additional support for DecStation 5000 hardware.

Bug fixes:
--- -----

Break pointing in gdb works again. It has been broken since X126
    - fix from Sandro and Jonathon

Various cleanups in mac2 files - from Dave Bohman

Made some optimizations to the pmax kernels for Lisp users
   - from Sandro

Organizational changes:
-------------- -------

Moved ux_exception.h back from builtin to sys, so that it would be exported
to /usr/cs/include/sys. 

Made a new file sys/ux_pager.h to export the inode_swapping definitions to 
the users.

Special notes:
------- -----

This kernel will be released as default.latest and STD+WS+EXP.latest
to make it available to users of DecStation 5000's and the CODA and
PIE groups.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********

[ ./src/Makefile ]
Changed cleaner rule to clean, as sudirectory config did not
have cleaner rule.  Change courtesy of Zon Williams
[90/09/07            mrt]
[ ./vm/vm_map.c ]
Initialized result=KERN_SUCCESS at begining of
vm_map_copy_overwrite.
[90/09/05            mrt]
[ ./mach/kern_return.h ]
Changed value of KERN_MEMORY_PRESENT to 23 to agree with its
value in Mach 3.
[90/09/08            mrt]

[ ./conf/MASTER.mips ]
Configure 2 lance boards by default, cuz thick-ether 3maxen.
[90/08/24            af]
Added 3max support (kmax3 option).
Added pmap pagetable cache option.
[90/05/20  13:49:21  af]
Enabled fast_csw by default.
[90/03/15  13:17:00  af]
[ ./mips/PMAX/cfb.c ]
Fixed positioning of the cursor on screen resets.
[90/09/06  09:24:08  af]
[ ./mips/PMAX/if_ln.c ]
Initial support for multiple ethers: find how many off ln.h
[90/09/06  08:59:35  af]
Found a hardware bug.  Contrary to spec, the Lance chip might
screwup CSR1 while in operation.  See note in the code.
[90/08/17  11:26:38  af]
[ ./mips/PMAX/pm_lk201.c ]
Disabled HOLD code: did not work anyways and makes no sense.
[90/09/06            af]
[ ./mips/PMAX/pm_tty.c ]
Added key-remapping ioctl.
[90/09/06            af]
[ ./mips/PMAX/pmioctl.h ]
Added QIOC_REMAP_KEY and related typedefs.
[90/09/06            af]
[ ./mips/PMAX/qfont.c ]
Long-awaited fix: shifted comma and period get back to less and
greater.  Added a little function to play with the map tables.
[90/08/03            af]
[ ./mips/PMAX/scsi_sii.c ]
Added an extra wbflush in sii_select_target. Bug fix courtesy of
jvs of OSF.
[90/09/07            mrt]
[ ./mips/machdep.c ]
Dropped antique and buggy use of useracc in sendsig & friends:
3maxen are fast enough to realize the prophecy in vm/vm_unix.c
[90/08/29            af]
[ ./mips/pmap.c ]
Fixed bug in pmap_attribute_lookup().
[90/08/23            af]
[ ./mips/swapgeneric.c ]
To support thick ethernets on 3max, look for "se" on slots 0/1/2
of the tc bus.
[90/09/06  08:56:28  af]
[ ./mips/trap.c ]
Fixed off-by-one in pmap pcache code.
[90/09/06            af]

[ ./mips/check_dbg.c ]
Only way to reliably get the boot image name on new DEC proms
is to query the prom for "boot".
[90/09/10  15:23:35  af]
[ ./mips/trap.c ]
Added task_traced facility.
And let's see if this time we manage to rid of the vm_fault()
call in tlb_miss() that RCS put back in.
[90/09/10  15:46:04  af]
[ ./mips/pmap.c ]
Made pmap_collect() work for real.  It still is not reliable enough, but
it is a step forward.  I think it screws up the pv_list, somehow.
Made pmap_lock recursive, to support pmap_collect().
[90/09/10  15:55:18  af]
[ ./mips/startup.c ]
Reduced the default size of the buffer cache in half.
This supports greedy users, and should not harm performance
since most machines have about 12/16 meg anyways.
[90/09/08            af]
[ ./mips/PMAX/dc_tty.c ]
Deal with the new style of the "osconsole" prom var.  This breaks
the rcline thing on new proms: patch the kernel if you want it.
[90/09/10  16:11:47  af]
[ ./vm/vm_object.c ]
New calling sequence of vm_fault_page().
[90/09/10  17:30:31  af]
[ ./vm/vm_map.h ]
Added vm_map_t->vm_stat, to support task_info(events).
[90/09/06            af]
[ ./vm/vm_map.c ]
Zero the stat info when creating a map./
[90/09/10  17:31:45  af]
[ ./vm/vm_resident.c ]
Fixed vm_page_zero_fill() to account for zerofills itself
in the vm_stat structure, rather then relying on the caller.
[90/09/10  17:34:09  af]
[ ./vm/vm_fault.c ]
Added per-map statistics to support the EVENTS flavor of
task_info, which wasn't implemented and now is.
vm_fault_page() now takes an extra parameter which is
a vm_statistics structure where to cherge the fault to.
[90/09/10  17:37:29  af]
[ ./kern/thread.h ]
Added IPC metering fields.
[90/09/06            af]
[ ./kern/thread.c ]
Initialize IPC metering info in thread structure.
[90/09/10  17:39:31  af]
[ ./kern/ipc_basics.c ]
Keep track of the number of messages sent/received per-thread.
[90/09/10  17:40:24  af]
[ ./kern/task.c ]
Added implementation of the TASK_EVENTS_INFO flavor of task_info().
[90/09/10  17:41:40  af]


[ ./bsd/kern_exit.c ]
[ ./mac2/clock.c ]
[ ./mac2/mac2_mach_process.c ]
[ ./mac2/machdep.c ]
[ ./mac2/ostrap.c ]
[ ./mac2/pcb.c ]
[ ./mac2/pcb.h ]
[ ./mac2/trap.c ]
[ ./mac2dev/via.c ]
[ ./mac2slotmgr/slotmgr_dispatch.c ]
[ ./mach/mac2/frame.h ]
[ ./mach/mac2/reg.h ]
[ ./mach/mac2/thread_status.h ]
Final cleanup.
[90/09/07            bohman]

[ ./builtin/inode_pager.h ]
	Moved the swapon calls and flags to sys/ux_pager.h
and  included it.
[90/09/07            mrt]
[ ./sys/ux_exception.h ]
Moved back to sys becuse it needed to be part of the kernel's
exported interface.
[90/09/07            mrt]
[ ./sys/ux_pager.h ]
Moved declaration of mach_swapon, inode_swap_preference and
flags from builtin/inode_pager.h to here where it can be
exported to the user.
[90/09/07            mrt]
[ ./builtin/ux_exception.c ]
[ ./mips/trap.c ]
[ ./ca/trap.c ]
[ ./sun3/trap.c ]
[ ./sun4/trap.c ]
[ ./mmax/trap.c ]
[ ./mac2/trap.c ]
[ ./vax/trap.c ]
[ ./bsd/init_main.c ]
[ ./bsd/uipc_socket.c ]
[ ./ca/float.c ]
[ ./ca/fpa.c ]
[ ./ca/mc881.c ]
Changed include of ux_exception from builtin/ to sys/
[90/09/09            mrt]
----------
05-Sep-90 16:44    Dave.Bohman                  Version 5.1(X129)
From: Dave.Bohman@MRT.MACH.CS.CMU.EDU
New features:
--- --------

Macintosh II support added.  This includes the Macintosh II, IIx, IIcx and
SE/30.

Made changes required to compile system using the GNU Preprocessor &
GNU C Compiler.

Bug fixes:
--- -----

vm/vm_resident.c:
Made vm_page_free() not mess with vm_page_wire_count for private pages.

vm/vm_map.c:
Fixed vm_map_copy_overwite() to return result rather than KERN_SUCCESS.

vm/vm_pageout.c:
Changed the value of m->busy from FALSE to TRUE in vm_pageout_scan
before the call to vm_pageout_out.

bsd/init_main.c:
Moved call to kalloc_init() from main() into setup_main()
and inserted it before call to startup().

Organizational changes:
-------------- -------

Added mac2 directories.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./afs/afs_osinet.c ]
Changed some calls to MGET() and m_get() that could be called
from interrupt context from M_WAIT to M_DONTWAIT.
[90/08/28            bohman]
[ ./afs/afs_pioctl.c ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./afs/afs_vfsops.c ]
Turned off setting of VFS_NOSUID flag under CMU_MACMACH conditional.
[90/08/28            bohman]
[ ./bsd/kern_sig.c ]
Changes for mac2.  Changed reference to __GNU__ to __GNUC__.
[90/08/28            bohman]
[ ./bsd/tty.c ]
Ioctl changes for STDC.  Other changes for STDC.
[90/08/28            bohman]
[ ./bsd/tty_pty.c ]
Changes for STDC.
[90/08/28            bohman]
[90/08/28            bohman]
[ ./bsd/uipc_domain.c ]
Changes for STDC.
[90/08/28            bohman]
[ ./bsd/uipc_socket.c ]
Changed enabling of SO_GREEDY code from #if VICE to #ifdef SO_GREEDY. 
[90/08/28            bohman]
[ ./kern/host.c ]
Moved external declaration of ipc_kernel_map out from
inside declaration of function host_processors().
[90/08/28            bohman]
[ ./kern/inode_macros.h ]
Changes for STDC.
[90/08/28            bohman]
[ ./mach/mach_types.h ]
Added KERNEL definitions for vm_task_t and host_priv_t
which are used by function prototypes in mach_interface.h.
[90/08/28            bohman]
[ ./netinet/agent_var.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./netinet/bbn.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./netinet/igmp_user.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./netinet/in_var.h ]
Added missing semicolon.
[90/08/28            bohman]
[ ./netinet/tcp_debug.c ]
Changes for STDC.
[90/08/28            bohman]
[ ./netinet/vmtp_so.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./rx/rx_clock.h ]
Removed unused parameter from macro declaration of
clock_NewTime().
[90/08/28            bohman]
[ ./sys/cmupty.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/disklabel.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/enet.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/fe.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/fpsreg.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/ioctl.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/jioctl.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/mtio.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/socket.h ]
Made SO_GREEDY always defined.
[90/08/28            bohman]
[ ./sys/socketvar.h ]
Made SBMAXCC always defined.
[90/08/28            bohman]
[ ./sys/syslog.h ]
Added missing third argument to openlog() prototype.
[90/08/28            bohman]
[ ./sys/tablet.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/ttychars.h ]
Changes for STDC.
[90/08/28            bohman]
[ ./sys/vcmd.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/viceioctl.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./sys/vsio.h ]
Ioctl changes for STDC.
[90/08/28            bohman]
[ ./vfs/inode_macros.h ]
Changes for STDC.
[90/08/28            bohman]
[ ./vfs/vfs.h ]
Removed unused parameter from crget().
[90/08/28            bohman]
[ ./vfs/vfs_io.c ]
Ioctl changes for STDC.  Changes for mac2.
[90/08/28            bohman]
[ ./vfs/vfs_sysnames.h ]
Changes for mac2.
[90/08/28            bohman]
[ ./vm/vm_resident.c ]
Made vm_page_free() not mess with vm_page_wire_count
for private pages.
[90/08/28            bohman]
[ ./vm/vm_unix.c ]
Changes for mac2.
[90/08/28            bohman]
[ ./conf/Makefile.mac2 ]
Created.
[ ./src/config/Makefile ]
Changed invocation of 'install', removed '-q', added '-c'.
Made LDFLAGS machine dependent: macmach does not have a libcs.a
instead, those functions are in the default libc.
[90/08/28            bohman]
[ ./vm/vm_map.c ]
Fixed vm_map_copy_overwite to return result rather than
KERN_SUCCESS.
[90/09/05            mrt]
----------
17-Aug-90 12:06    Mary.Thompson                Version 5.1(X128)
From: Mary.Thompson@MRT.MACH.CS.CMU.EDU
New features:
--- --------
[PMAX] - Added  support for DECstation 5000 aka 3max. The same pmax
	kernel now runs on both the pmax and the 3max

[SUN4] - Added the cab (controller acceleration board) driver that is used
	on nectar machine to all configurations.

Bug fixes:
--- -----

The careful_bcopy routines have been written for mmax, pmax, sun3, sun4
vax, ibmrt.

[SUN3],[PMAX] - now pass xptest with 0 errors. 

[SUN3,SUN4]  I replaced the SunOS DKIOCTL's and now /etc/dkinfo works
again.  The sd driver will send warning messages to the console when dkinfo
opens partitions that overlap already open partitions. This is harmless and
generally the correct thing for the driver to do. 

[SUN] Included Rudy's version of the SunOS 4 tapedrivers that were erronously
left out of X127.

*************** summary of significant log messages ****************
		see latest/UpdateLog for a complete list
[ ./bsd/cmu_syscalls.c ]
One more twist for mips arguments since execve aligns
them on a 16-byte boundary.  Bug report from gm@osf.
[90/05/09            af]
[ ./bsd/init_sysent.c ]
Added more Ultrix4.0 compat entries for mips.
[90/05/20  13:46:44  af]
[ ./bsd/kern_exit.c ]
Added POSIX-compat waitpid() variation of wait.  Modified
wait3() to take an extra argument so that waitpid shares
it too.
[90/05/20  13:44:43  af]

[ ./kern/sched_prim.c ]
'volatile'-ized the idle_thread().
[90/05/20  14:04:32  af]
[ ./mach/machine.h ]
Added subtypes for SUN4C_{60,65} and mips' R3000
[90/08/02            mrt]
[ ./nectar/cab.c ]
[ ./nectar/cabreg.h ]
[ ./nectar/nectar.h ]
    Created
[90/08/08  12:39:42  mrt]
[ ./sundev/sc.c ]
 Replaced with SunOS 4.0.3. source.
    - Fix up include files a bit.
    - Add MACH copyright notice.
    - Add RCS log entry.
    - get around bug splr(constant)
    - mach does not use dk_read field yet.
[90/05/05            ern]
[ ./sundev/st.c ]
 Replaced with SunOS 4.0.3. source.
   - Fix up include files a bit.
   - Add MACH copyright notice.
   - Add RCS log entry.
    - Lots of bug fixes:
	- avoid race condition in timer routine
	- consistently run deadman timer (deadman times reset the bus)
	- ignore deadman timeouts on closing connection
	- improve debugging output
	- fix unit test operation not to be fooled by random bits
	  in status register.
	- fix open bug where drive in use would trigger timer.
	- set mode on every open for sanity sake. drive could be reset.
	- handle writing tape file marks more consistently with other
	  platforms.
	- set errno value on errors.
	- fix backspace file and record operations to use the commands
	  or error. no easy way to simulate!
	- set no bys and even byte disconnect for exabyte
	- clear timeout on interrupt to prevent deadman timer from 
	  nailing device when interrupt happens during timer routine 
	  execution.
	- correct bug in file count for write_file_mark operation.
	- add timeout settings when interrupt retrys a command.
	- print more info on request sense data.
	- deal with conflict between STIOCGET and MTIOCGET ioctl defs.
Did not fix two bugs:
    - write after rewind, skip file which requires a re-writing of the
      eof marker.
    - open always causes a rewind even for nrst0 device. 
[90/05/15            ern]
[ ./sundev/streg.h ]
Replaced with SunOS 4.0.3. source.
[90/05/15            ern]
[ ./sys/mtio.h ]
Added some DEC-specific codes.
[90/05/20  14:50:51  af]

./mips/PMAX
Added and changed most files to provide 3max support
[90/05/20  13:48:09  af]

[ ./mips/pmap.c ]
Optimization to pmap_remove_range() for sparse ranges: check
if there is a kernel mapping for the ptepage before dereferencing
the user's pte.  This test can save 1,024 useless iterations of
the inner loop and avoids allocating ptepages for nothing.
[Numbers: allocating/deallocating the whole address space 100 times
 used to take 11.2 secs on a 3max, now it takes 2.4 and saves
 496 ptepages as well]
Finessed the above by putting a cap to the amount of ptepages we might
ever allocate (virtually).  The calculation goes like: 3 ptepage avg
per task times max 400 tasks gives 5 meg, take ten times as much.
Put in Rich Draves proctection changes from the Mach 3.0 version.
[90/08/03  15:02:28  af]
Quick (temporary) fix for 3maxen with lots of memory: scale down the
pmap_submap to a more reasonable size.  Even this is too much, and will have
to scale down on the max number of pmaps too.
[90/08/02  17:26:28  af]
[ ./rx/rx.c ]
Warning message was causing kernel crash cuz arguments swapped.
[90/08/12  11:30:21  af]
[ ./ca/pmap.c ]
Add careful_bcopy.
[90/08/13            dlb]
[ ./vax/locore.s ]
Add Careful_bcopy, called via inline jsb linkage.
[90/08/13            dlb]
[ ./vax/inline/langpats.c ]
Added careful_bcopy.
[90/08/13            dlb]
[ ./bsd/ufs_physio.c ]
Also ask for read access when wiring for write case.
[90/08/03            dlb]
[ ./mmax/phys.c ]
Wire for both read and write permission in copyout.
[90/08/03            dlb]
[ ./mmax/pmap.c ]
Change pmap_protect to only reduce protections.
Change ns32k_protection_init to remove support for protection
combinations not supported by hardware.  Change pmap_protect
and pmap_enter to check for them.
[90/08/03            dlb]
Redo kernel virtual address space calculation to ensure enough
virtual space to map physical memory twice.
[90/05/21            dlb]
[ ./mmax/pmap.h ]
Change NS32K_NO_ACCESS to -1.  Pmap module checks for this and
removes mappings if it is found.
[90/08/03            dlb]
[ ./kern/kalloc.c ]
Increased size of 512 zone, the new pager seems to use much more of it.
[90/08/13  14:29:05  af]
[ ./mips/usercopy.s ]
Added careful_bcopy
[90/08/14            af]
[ ./mips/pmap.h ]
Added macro for careful_bcopy.
[90/08/14            af]
[ ./vm/vm_kern.c ]
Removed ns3200 conditionals in careful_copy_to_physical_page
around the call to careful_bcopy. Now each machine type must
define a careful_bcopy call, unless it defines a macro for
careful_copy_to_physical_page like the pmax does to catch
the problem at a higher level.
[90/08/14            mrt]
[ ./sun3/movc.s ]
Wrote careful_bcopy() for careful_copy_to_physical().
[90/08/14            jjc]
[ ./sun4/copy.s ]
Wrote careful_bcopy() for careful_copy_to_physical().
[90/08/14            jjc]
[ ./sun3/movc.s ]
Added include of sys/errno.h for EFAULT
[90/08/15            mrt]
[ ./sun4/pmap.c ]
Put in the pmap_proctect changes from the sun3 pure 
kernel.
[90/08/16            mrt]
[ ./sun3/pmap.c ]
Picked up pmap_protect changes from pure kernel.
[90/08/16            mrt]
[ ./sundev/sd.c ]
Put the Sun OS DKIOCtl's back in under conditional SUNOS_COM
for compatiblity with SUN OS disk utilities.
[90/08/10            mrt]
[ ./sundev/xy.c ]
Replaced the Sun OS DKIOctl's under conditional SUNOS_COM for
compatibilty with Sun OS disk utilities.
[90/08/10            mrt]
[ ./kern/thread.c ]
Fixed thred_info to return the correct count in the 
THREAD_SCHED_INFO case. Bug found by Greg Kellogg of NeXT.
[90/08/16            mrt]
[ ./kern/processor.c ]
Fixed processor_set_info to return the correct count value
in the SCHED_INFO count. Bug found by Greg Kellogg of NeXT.
[90/08/16            mrt]

----------
31-Jul-90 13:48    Mary.Thompson                Version 5.1(X127)
From: Mary.Thompson@MRT.MACH.CS.CMU.EDU
New features:
--- --------
[SUN3 and SUN4]	 Picked up the new Sun OS 4 drivers that support the
  Sun4/330 from Jonathon Chew.  These drivers also include the changes
  made by Rudy Nedved in CS7, as well as the Mt Xinu disk label additions.
  Also got the Sun4 OS sunstand directories from Jonathon.

Organizational changes:
-------------- -------
Changed to kernel/sup/list file to no longer sup the sunstand directory
or the Sun OS 4 drivers to wb1. This is to prevent our distributing
Sun OS 4 sources outside of CMU. Hopefully, the old drivers will continue
to work.

The following files in sunstand were defuncted:

./boot/bootxx.c
./bootblk/Makefile
./bootblk/bootnd.c
./bootblk/sizecheck.sh
./bootblk/tftp.c
./bootblk/udp.c
./include/mon/sun3/cpu.addrs.h
./include/mon/sun3/cpu.map.h
./include/mon/cpu.addrs.h
./include/mon/cpu.map.h
./include/mon/sun4/cpu.addrs.h
./include/mon/sun4/cpu.map.h
./include/sundev/arreg.h
./lib/common/conf.c
./lib/common/copy.c
./lib/common/genassym.c
./lib/common/ipreg.h
./lib/common/llib-lsa.c
./lib/common/prf.c
./lib/common/strops.c
./lib/m68k/Makefile
./lib/m68k/SYS.h
./lib/m68k/genassym.c
./lib/m68k/srt0.s
./lib/sparc/Makefile
./lib/stand/ardef.h
./lib/stand/sdreg.h
./lib/sun3/libxx/Makefile
./lib/sun4/Makefile.standalone
./lib/sun4/_setjmp.s
./lib/sun4/big_copy.s
./lib/sun4/copy.s
./lib/sun4/misc.s
./lib/sun4/probe.s
./lib/sun4/sadiv.s
./lib/sun4/samul.s
./lib/sun4/srt0.s
./lib/sun4/subr.s
./m68k/Makefile.arch
./os/af.c
./os/bootparam_xdr.c
./os/clnt_perror.c
./os/mountxdr.c
./os/pmap_prot.c
./os/pmap_rmt.c
./os/rpc_prot.c
./os/xdr.c
./os/xdr_array.c
./os/xdr_mem.c
./os/xdr_reference.c
./sparc/Makefile.arch
./sparc/stubs1.s
./sun3/srt0.s

Most of the files in sunstand were picked up from Sun OS 4.0.3

[ ./conf/version.edit ]
127
[ ./conf/MASTER.sun4 ]
Added lines for Sun 4/330.
[90/05/10            jjc]
[ ./conf/Makefile.sun4 ]
Link setjmp.h, signal.h, stdio.h, and strings.h to 
/usr/cs/include instead of /usr/include.
[90/05/17            jjc]
[ ./conf/files.sun3 ]
	Added lines for sm, SCSI-ESP host adaptor.
	Needed to add line for wds driver on 80386 to get wds.h
	generated for sundev/sc_conf.c.
[90/06/08            jjc]
[ ./conf/files.sun4 ]
Added lines for sm, SCSI-ESP host adaptor.
Needed to add line for wds driver on 80386 to get wds.h
generated for sundev/sc_conf.c.
[90/05/10            jjc]
[ ./sun/dkio.h ]
Carried over Mary Thompson's changes from Mt. Xinu.
[90/07/02            jjc]
Added backward compatibility for old drivers under else leg
of #ifdef REL4.
[90/06/18            jjc]
Picked up from SunOS 4.0.3 and added macros replacing interleaving
functions from SunOS version of sys/param.h.
[90/05/27            jjc]
[ ./sun/dklabel.h ]
Picked up from SunOS 4.0.3.
[90/05/27            jjc]
[ ./sun4/autoconf.c ]
Carried over Mary Thompson's changes from Mt. Xinu.
[90/07/02            jjc]
Added changes for Sun 4/330.
Changed doprobe() to allocate kernel virtual memory for devices
in the top 16 meg. of the virtual address space where it can dvma.
[90/05/07            jjc]
[ ./sun4/clock.c ]
Picked up from SunOS 4.0.3.
	Changed synctodr() to adjust time like adjtime() in kern_time.c.
[90/05/07            jjc]
[ ./sun4/clock.h ]
Picked up from SunOS 4.0.3.
     Changed "#ifndef LOCORE" statements to "#if !defined(LOCORE) &&
     !defined(ASSEMBLER).
[90/05/07            jjc]
[ ./sun4/cpu.h ]
Added changes for Sun 4/330.
[90/05/07            jjc]
[ ./sun4/genassym.c ]
Picked up definition of COUNTER_PTE from SunOS 4.0.3 for the
Sun 4/330.
[90/05/08            jjc]
[ ./sun4/kdb.c ]
Flush cache on Sun 4/330 in kdbwlong().
[90/05/09            jjc]
[ ./sun4/kdb/sparc/accesssr.c ]
Changed to use nwindows variable instead of NWINDOW constant.
[90/05/21            jjc]
[ ./sun4/kdb/sparc/allregs.h ]
Changed number of register windows kept in allregs from NWINDOW
to MAXWIN.
Included machine/pcb.h for MAXWIN too.
[90/05/21            jjc]
[ ./sun4/kdb/sparc/sparc.h ]
Changed to use nwindows variable instead of NWINDOW constant.
[90/05/21            jjc]
[ ./sun4/locore.s ]
Added changes for Sun 4/330.
	1) Modified code near "start" to map in Mostek 48t02
	   clock and map out Intersil 7170 clock if we are on
	   a Sun 4/330 or Sun 4/460.
	2) Changed level10() and test_prof() to work for either
	   the Intersil 7170 or the Mostek 48t02.
	3) Changed fault() to pass the fault type and memory
	   error register to trap().
	4) Defined VM_PROT_{EXECUTE,READ,WRITE} to use in fault().
	5) From SunOS 4.0.3, picked up fiximp() which sets
	   "nwindows" and patches flush_windows() (sigh).
	6) Replaced instances of constant NWINDOW with variable
	   "nwindows".
	7) Picked up definition of NO_OP for fiximp().
[90/05/07            jjc]
[ ./sun4/machdep.c ]
Carried over Mary Thompson's changes from Mt. Xinu.
[90/07/02            jjc]
Added support for Sun 4/330:
	1) Turn on virtual address cache.
	2) Pick up monitor memory register setting in startnmi().
	3) Took memory error handling code from SunOS 4.0.3 and
	   put it in memerr().
	4) Added parity error recovery routines from SunOS 4.0.3.
[90/05/08            jjc]
[ ./sun4/map.s ]
Modified for Sun 4/330:
	1) Added vac_flushone() to flush a single cache line.
	   Needed by parity error recovery routines on Sun 4/330.
	2) Picked up read_confreg() from SunOS 4.0.3.
	3) Defined SUN_VAC.
[90/05/08            jjc]
[ ./sun4/memerr.h ]
Picked up from SunOS 4.0.3.
	Changed "#ifndef LOCORE" statements to "#if !defined(LOCORE) &&
	!defined(ASSEMBLER).
[90/05/29            jjc]
[ ./sun4/overflow.s ]
Replaced instances of constant NWINDOW with variable 
"nwindows".
[90/05/21            jjc]
[ ./sun4/pcb.h ]
Picked up definition of MAXWIN from SunOS 4.0.3 and changed
definition of pcb to use it.
[90/05/21            jjc]
[ ./sun4/pmap.c ]
Changed pmeg_valid() to return 0 if the virtual address is
in the hole.
[90/06/20            jjc]
Defined SUN_VAC for Sun 4/330.
[90/05/08            jjc]
[ ./sun4/reg.h ]
Commented out definition of NWINDOW constant since it is a
variable now.
[90/05/21            jjc]
[ ./sun4/sun_init.c ]
Added support for Sun 4/330:
	1) Call to set_clock_type() which figures out which
	   clock chip is on the Sun 4.
	2) Initialize virtual address cache and memory error 
	   register for Sun 4/330.
	3) Don't cache scb on Sun 4/330 because it dislikes cache
	   hits on the first cycle of a trap.
	4) Don't map out counter from last segment.
[90/05/07            jjc]
[ ./sun4/swtch.s ]
Replaced instances of constant NWINDOW with variable 
"nwindows".
[90/05/21            jjc]
[ ./sun4/trap.c ]
Added code to trap() to print out message if we fault on the
hole in the MMU.
[90/06/20            jjc]
Added changes for Sun 4/330.
	1) Changed trap() to take two more arguments specifying
	   what kind of fault we took and the contents of the
	   memory error register.
	2) Added code to trap() for trying to recover from faults
	   caused by parity errors on the Sun 4/330.
[90/05/09            jjc]
[ ./sun4/underflow.s ]
Replaced instances of constant NWINDOW with variable 
"nwindows".
[90/05/21            jjc]
[ ./sundev/mb.c ]
Flush cache in mbsetup() and mbrelse() on Sun 4/330.
[90/05/09            jjc]
[ ./sundev/sc.c ]
Picked up from SunOS 4.0.3 and modified for Mach.
[90/05/27            jjc]
[ ./sundev/sc_conf.c ]
Carried over Mary Thompson's changes from Mt. Xinu.
[90/07/02            jjc]
Uncommented out includes of se.h, sm.h, sw.h, and wds.h.
[90/06/13            jjc]
Changed definition of sictlrs from a pointer back to an array
since it no longer has to be dynamically allocated.
[90/06/13            jjc]
[ ./sundev/screg.h ]
Picked up from SunOS 4.0.3.
[90/05/27            jjc]
[ ./sundev/scsi.h ]
Carried over Mary Thompson's changes from Mt. Xinu.
[90/07/02            jjc]
[ ./sundev/sd.c ]
Carried over Mary Thompson's changes from Mt. Xinu.
[90/07/02            jjc]
Uncommented out uses of field, dkg_pcyl, of dk_geom structure.
[90/06/13            jjc]
[ ./sundev/se.c ]
Replaced with SunOS 4.0.3. source.
    - Fix up include files a bit.
    - Add MACH copyright notice.
    - Add RCS log entry.
[90/05/15            ern]
[ ./sundev/sereg.h ]
Defined DVMA_OFFSET in terms of SYSBASE instead of KERNELBASE,
since the Mach kernel is lower in memory than SunOS.
[90/05/27            jjc]
[ ./sundev/sf.c ]
Picked up from SunOS 4.0.3.
[90/05/27            jjc]
[ ./sundev/sfreg.h ]
Fixed garbled SunOS copyright.
[90/06/15            jjc]
[ ./sundev/si.c ]
Removed code that dynamically allocates memory for "sictlrs",
since the driver is smart enough to just allocate memory for
the sensitive fields of the structure and the structure 
definition has these fields as pointers.
[90/06/13            jjc]
[ ./sundev/sireg.h ]
Changed DVMA_OFFSET to be defined relative to SYSBASE 
instead of KERNELBASE, since the Mach kernel starts
lower than the SunOS kernel.
[90/06/13            jjc]
[ ./sundev/sm.c ]
Modified for Mach.
[90/05/27            jjc]
[ ./sundev/smreg.h ]
Picked up from SunOS 4.0.3.
[90/05/27            jjc]
[ ./sundev/st.c ]
Picked up from SunOS 4.0.3 and carried over Mach changes
from old driver.
[90/05/27            jjc]
[ ./sundev/streg.h ]
Picked up from SunOS 4.0.3.
[90/05/27            jjc]
[ ./sundev/sw.c ]
Modified for Mach.
[90/05/27            jjc]
[ ./sundev/swreg.h ]
Modified for Mach.
[90/05/27            jjc]
[ ./sunif/if_le.c ]
Picked up from Mach port to SPARCstation I.  This driver
is originally from SunOS 4.0.3.
[90/05/31            jjc]
[ ./sunif/if_lereg.h ]
Picked up from Mach port to SPARCstation I.  This driver
is originally from SunOS 4.0.3.
[90/05/31            jjc]
[ ./sunif/if_levar.h ]
Picked up from Mach port to SPARCstation I.  This driver
is originally from SunOS 4.0.3.
[90/05/31            jjc]
----------
27-Jul-90 15:09    Mary.Thompson                Version 5.1(X126)
From: Mary.Thompson@MRT.MACH.CS.CMU.EDU
New features:
--- --------
Picked up the kernel additions from the Mt Xinu 2.6MSD release. This is
the BSD 4.4 Van Jacobson networking code and Berkeley tahoe style disk
labels for vaxes, sun3s and rts. This kernel will deal with both labeled
and unlabeled disks. The soon to be released program disklabel will
write the labels on disks with either this kernel or with older kernels
using the raw device.

Added support for the CODA filesystem including the release 5 multicast
code from Stanford. The code was writen by David Steere and Jay Kistler

Added pager/vm improvements from David Black. Pages may now be specified
as .PRECIOUS and the kernel will not destroy them without giving them
back to the pager. So the temporary pages do not need to be both in
memory and on disk.

Put new improved sun3/movc.s from Randy Dean back in again.

Added machine/endian.h files for all machine types to be like
Berkely Tahoe, and added some new Tahoe items to machine/machparam.h

Bug fixes:
--- -----
All the bug fixes from CS7 up to CS7e were incorporated. 

Organizational changes:
-------------- -------
Defuncted some old pager files, vm/{old_pagout.c,vm_pager.c,vm_pager.h}
Added the cfs directory for CODA sources.

[IBMRT]
   EXP configuration now includes CODA

[PMAX]
    Changed to  build both a STD+WS and STE+WS+EXP configuration.
    EXP configuration now includes CODA and kernel monitoring.

[SUN3]	
    EXP configuration now includes kernel monitoring

[VAX]
    EXP configuration now includes kernel monitoring.
    uda.c is now the Chris Torbek version as released by Berkely
    uda_umd.c has been defuncted.

****** Listing of the highlights of the files changes. Many more files
	were changed.

[ ./bsd/init_main.c ]
Eliminate MACH_XP conditionals.  Resize inode pager's
map to 64 pages per set because new page stealing code
uses the map aggressively.
[90/06/28            dlb]
Run inode_pager, device_pager, and device_server at high
priority.
[90/06/20            dlb]

[ ./bsd/kern_resource.c ]
Rework donice() to use task->priority as base instead of
BASEPRI_USER and to nice all threads, not just the first one in
the task.  Based on code from Gregg Kellogg at NeXT.
[90/05/08            dlb]

[ ./bsd/sys_inode.c ]
Remove !MACH_XP code.  Use memory_object_lock_request instead of
pager_lock_request.
[90/06/28            dlb]

[ ./builtin/inode_pager.c ]
Try to be a little smarter about when to use precious attribute
on supplied data.  Use inode_pager_setup_lock to avoid
race between 2 threads setting up the same inode.

Take advantage of precious functionality to allow space to be
freed when a page is paged in from a paging file.  Added
pager_dealloc_page to implement freeing of space.

Renamed pf_alloc, pf_dealloc, and pf_bmap to pager_alloc,
pager_dealloc, and pager_bmap to make it clear that these
operate on pagers rather than paging files.

Fix pagein buffer management code to reuse buffer space when
I/O fails instead of abandoning it.  Set base address for vm_map_find.

Removed MACH_XP conditionals: use builtin/old_pager.c if !MACH_VFS.
Use power of 2 backoff to get smaller buffers if vm_map_find
fails in ipset_buffer_allocate.

Clean up and turn on USE_SUPPLY code.

USE_SUPPLY modifications to use deallocate version of
memory_object_data_supply and take advantage of page stealing.

Use privileged host port for new vm_set_default_memory_manager.
[90/07/02            dlb]
[ ./builtin/old_pager.c ]
Fix pagein buffer management code to reuse buffer space when
I/O fails instead of abandoning it.  Set base address for vm_map_find.
[90/06/29            dlb]
Use power of 2 backoff to get smaller buffer if vm_map_find fails
in ipset_buffer_allocate.
[90/06/28            dlb]
Upgrade to use memory_object_data_supply (page stealing).
Delete all !MACH_XP code.
[90/06/28            dlb]
Use privileged host port for vm_set_default_memory_manager.
[90/06/12  14:43:55  dlb]
[ ./ca/machdep.c ]
Changed microtime to use the Data Translation clock if present.
[90/05/25            dcs]
[ ./conf/MASTER ]
	Delete bogus vm options: MACH_OLD_VM_COPY, MACH_XP_FPD.
[90/06/27            dlb]
Added the MACH_CFS option and the mach_cfs pseudo-device.
[90/05/23            dcs]
Removed MULTICAST_AGENT and IGMPROTO options as they are not used
by the new ipl.rel5 of multicast code. Added MROUTING option as
it may be used by the new code.
[90/06/26            mrt]
[ ./conf/Makefile.template ]
Added . and ${SOURCE_DIR}/sys to the INCLUDES flags so
[90/05/21  17:06:29  mrt]
[ ./conf/newvers.sh ]
" Upgraded version string from Mach 2.5 to Mach 2.6 to reflect "
" integrating the 2.6 MSD changes. "
[90/05/21            mrt]
[ ./i386/endian.h ]
Created this to match the other machine/endian.h files as
expected by the Tahoe release of BSD.
[90/06/28            mrt]
[ ./kern/ipc_copyin.c ]
Replace move_msg_data macro with check for internal memory type.
This results from the purge of fast_pager_data functionality.
[90/06/27            dlb]
Add discard argument (TRUE) to vm_map_copyout.
[90/06/21            dlb]
[ ./kern/ipc_copyout.c ]
Purge fast_pager_data functionality.
[90/06/27            dlb]
Add discard argument (TRUE) to vm_map_copyout.
[90/06/21            dlb]
[ ./kern/ipc_globals.c ]
Set wait_for_space on ipc_kernel_map.
[90/06/19            dlb]
[ ./kern/ipc_kmesg.h ]
Purge MACH_XP_FPD.  Removed associated fast_pager_data
	and move_msg_data macros.
[90/06/27            dlb]
[ ./kern/ipc_kport.c ]
Eliminate MACH_XP conditional.
[90/06/28            dlb]
[ ./kern/ipc_pobj.c ]
Allow privileged host port to be used where host port is
expected.  Allow processor set port to be used where processor
name port is expected.
[90/06/18            dlb]
[ ./kern/kernel_monitor.c ]
28-Jun-90 eddie caplan (egc) at Carnegie-Mellon University
Fixed problem in monitor_create that used MONITOR_NULL when
PORT_NULL should have been used.  changed the variable name
from 'monitor' to 'the_monitor' since 'monitor' is the name
of the monitor_t type.  this seems to only be a problem with
the compiler on the PMAX.
[90/06/28  16:43:41  mrt]
[ ./kern/thread.c ]
Add max_priority init to kernel_thread().
[90/06/20            dlb]
Initialize priority and do first priority computation in
thread_create.  Default maximum priority to BASEPRI_USER
instead of current pset maximum; override still occurs if
pset maximum is lower.  Suggested by Gregg Kellogg at NeXT.
Take priority inits out of thread template.  Remove in transit
check from thread_max_priority.
[90/05/08            dlb]
[ ./mach/kern_return.h ]
Add KERN_MEMORY_PRESENT.
[90/06/21  19:55:20  dlb]
[ ./mach/mach.defs ]
Eliminate MACH_XP conditionals.  Prefix pager_cache with xxx.
Add deallocate support to memory_object_data_supply.  Until MiG
is fixed, this always deallocates its data (XXX).
Remove pager_data_provided_inline.
Add memory_object_data_supply.
Convert vm_set_default_memory_manager to use real host port.
[90/06/11            dlb]
[ ./mach/memory_object.defs ]
Add memory_object_supply_completed, memory_object_data_return.
[90/06/13            dlb]
[ ./mips/endian.h ]
Created to match the machine/endian.h file expected by
the BSD tahoe release.
[90/06/28            mrt]
[ ./mips/kdb.c ]
Flush I-cache when writing to k0seg, so that changing kernel code
works.  Redefine AST name.
[89/10/16  15:19:10  af]
Made it callable for kernel traps, if everything else fails.
Fixed unaligned accesses, made them byteorder indep. too.
[89/09/15  15:54:01  af]

Created.
[89/08/08            af]
[ ./mips/machparam.h ]
Added definitions generally exported by the BSD tahoe 
machine/machparam.h
[90/06/01            mrt]
[ ./mmax/endian.h ]
Created to match the machine/endian.h file that is expected
by BSD tahoe
[90/06/28            mrt]
[ ./mmax/locore.s ]
Add careful_bcopy, a version of bcopy that recovers from bad
page faults and returns an error code.
[90/06/18            dlb]
[ ./mmax/machparam.h ]
Added DELAY macro and include of machine/endian.h.
[90/06/08            mrt]
[ ./mmax/mmax_init.c ]
Reset vm_pageout_burst_wait to a reasonable value.
[90/06/29            dlb]
[ ./mmax/pmap.c ]
Redo kernel virtual address space calculation to ensure enough
virtual space to map physical memory twice.
[90/05/21            dlb]

./net,netinet,netns - most files changed for new network code

[90/05/17  18:10:55  mrt]
[ ./rfs/rfs_subr.c ]
Changed unlocking in failure case in rfsCache, since the
previous code could cause a kernel panic.
[90/05/14            mrt]
[ ./sys/inode.h ]
Added an inode type for the Coda file system.
[90/05/23            dcs]
[ ./vfs/vfs.h ]
Added a file system type for the Coda file system.
[90/05/23            dcs]
[ ./vfs/vfs_conf.c ]
Added VFS and Vnode entry points for the Coda file system.
[90/05/23            dcs]

[ ./vm/memory_object.c ]
Reject attempts to pagein partial pages.

Modify page stealing code to deal with multi-page pageins.
Add annoying printf for pager_cache.
Purge MACH_XP_FPD.

Modify page stealing code to deal with memory shortages.
Precious pages are returned to the manager w/o changing postion
on the pageout queues.  Non-precious pages are freed.

Gut memory_object_data_provided, and replace by calling
memory_object_data_supply.

Remove vm_map_copy_discard operations done by ipc code.  Add
discard argument (FALSE) to vm_map_copyout to tell it not
to discard copies.

First version of page-stealing code.  Also remove erroneous free
of fictitious page in memory_object_data_provided.  Remove
memory_object_debug code.

Add memory_object_data_supply.  Still needs page stealing code.
Use careful_copy_to_physical_page in memory_object_data_provided.
Remove pager_data_provided_inline.

Support precious pages in memory_object_lock_request.  Note that
flushing by itself drops their contents on the floor; cleaning
and flushing returns clean precious pages to the manager (as
well as any dirty pages).

Pick up new version of memory_object_lock_request from pure
kernel to get "clean without flush" functionality.  This also
sends pages to pager in contiguous chunks.  Also convert
vm_set_default_memory_manager to use the privileged host post.
[90/06/29            dlb]
[ ./vm/vm_fault.c ]
Add flush argument to vm_pageout_page.
[90/06/11            dlb]
[ ./vm/vm_init.c ]
Remove !MACH_XP code.
[90/06/28            dlb]
[ ./vm/vm_kern.c ]
Purge MACH_XP_FPD.
[90/06/27            dlb]
Replace copy_user_to_physical_page with careful_copy_to_physical
page.  Latter routine can copy from either kernel or user space
to physical memory and catch unrecoverable page faults.
[90/06/14            dlb]
[ ./vm/vm_kern.h ]
Add careful_copy_to_physical_page.
[90/06/14            dlb]
[ ./vm/vm_map.c ]
Add vm_map_copy_entry_delete.
Purge MACH_OLD_VM_COPY.  Minor optimization to vm_map_copyin.

Change vm_map_copyout, vm_map_copy_insert, and
vm_map_copy_overwrite to use a parameter to decide whether
to destroy copy.  Corresponding change to vm_map_fork.

Have vm_map_copyin mark each entry in the copy as single_use
or not.  single_use == TRUE is only reliable for temporary
objects; it must be rechecked for permanent ones.  If it's
FALSE, there is some other use of the object.
[90/06/26            dlb]

Pick up pure kernel optimization to vm_map_copyin that tries to
avoid making a copy if the source of the copy is being destroyed.
From dbg.  Also make sure a copy is never wired.
[90/06/20            dlb]
Fix vm_map_fork() to take out a sharing map reference for each
shared region in the parent map, not just the first.  Found by
Dave Bohman (bohman+@andrew.cmu.edu).
[90/06/07            dlb]
[ ./vm/vm_map.h ]
Purge MACH_OLD_VM_COPY.
[90/06/26            dlb]
Add single_use field to map entries for use in map copies.
See vm_map_copyin.
[90/06/20            dlb]
[ ./vm/vm_object.c ]
Support precious pages in vm_object_terminate.
[90/06/29            dlb]
New version of vm_object_pmap_protect from pure kernel to fix
a couple of bugs: range check for pmap_protect was wrong, and
if removing all access, must also do so for shadows.
[90/06/12            dlb]
Pass flush argument to vm_pageout_page.
[90/06/11            dlb]
[ ./vm/vm_page.h ]
Add precious bit.
[90/06/26            dlb]
[ ./vm/vm_pageout.c ]
Add precious functionality.  A precious page must be paged back
to its manager even if it is clean.
[90/06/13            dlb]
Pick up pure kernel version of vm_pageout_page to get "clean
without flush" functionality.  Bug fix to that version of
vm_pageout_page; must pick up object lock at end.
[90/06/11            dlb]
[ ./vm/vm_pageout.h ]
Add vm_pageout_setup declaration.
[90/06/11            dlb]
[ ./vm/vm_resident.c ]
Add init of precious bit and other bits to vm_page_template.
[90/06/13            dlb]
Pick up pure kernel changes: make vm_page_free handle wired
count correctly.  Make vm_page_deactivate work on pages that
aren't active.  Also increase number of kernel map entries.
[90/06/11            dlb]
Reserved more virtual addresses in vm_page_startup for the
vm_page_array. The sun may call vm_page_create after autoconf
to give back some physical memory and may need those addresses.
[90/06/19            mrt]
[ ./vm/vm_unix.c ]
Remove priority init from procdup.  Now done in thread_create.
From Gregg Kellogg at NeXT.
[90/05/08            dlb]
[ ./vm/vm_user.c ]
Add discard argument to vm_map_copy_overwrite calls.
[90/06/21            dlb]
[ ./ca/rdb.h ]
Increased RDB_SYMLEN to cover the addition of hte
kernel_monitor to EXP
[90/07/03            mrt]
[ ./cfs/* ]
Created for the Coda File System.
[90/05/23            dcs]
[ ./conf/MASTER.mips ]
Removed EXP from all the configurations. If you want EXP build 
with +EXP. Left pm included.
[90/07/05            mrt]
[ ./vm/memory_object.c ]
Fix bugs and improve handling of paging references in
memory_object_lock_request.
[90/07/03            dlb]
Reject attempts to pagein partial pages.
Modify page stealing code to deal with multi-page pageins.
Add annoying printf for pager_cache.

Purge MACH_XP_FPD.
Precious pages are returned to the manager w/o changing postion
on the pageout queues.  Non-precious pages are freed.

Gut memory_object_data_provided, and replace by calling
memory_object_data_supply. 

Remove vm_map_copy_discard operations done by ipc code.  Add
discard argument (FALSE) to vm_map_copyout to tell it not
to discard copies.

First version of page-stealing code.  Also remove erroneous free
of fictitious page in memory_object_data_provided.  Remove
memory_object_debug code.

Add memory_object_data_supply.  Still needs page stealing code.
Use careful_copy_to_physical_page in memory_object_data_provided.
Remove pager_data_provided_inline.

Support precious pages in memory_object_lock_request.  Note that
flushing by itself drops their contents on the floor; cleaning
and flushing returns clean precious pages to the manager (as
well as any dirty pages).

Pick up new version of memory_object_lock_request from pure
kernel to get "clean without flush" functionality.  This also
sends pages to pager in contiguous chunks.  Also convert
vm_set_default_memory_manager to use the privileged host post.
[90/06/11            dlb]
[ ./vm/memory_object.c ]
Bug fix to make multiple entry page stealing work.
[90/07/05            dlb]
[ ./bsd/tty.c ]
Restored return of -1 in ttioctl().  This indicates to the device 
driver that the tty driver is incapable of doing the ioctl at
this level.
[90/04/17            berman]
[ ./mips/PMAX/dc_tty.c ]
Added definition of ncons to initialize to 1 physical console.
[90/05/14            berman]
Added pm_video_on() inside cnpollc() to force screen on
whenever entering or leaving polled mode.
[90/05/04            berman]
[ ./mips/PMAX/if_ln.c ]
Removed debugging console printf.
[90/05/21            berman]
[ ./mips/PMAX/pm_lk201.c ]
Added pm_allow_kdb patchable variable to disable kdb
invocation with the "Do" key.  Set to 1 to allow keyboard
kdb trap.
[90/05/14            berman]
[ ./ultrix/tmscp.c ]
Added VAX_650 to tmscpslave() test to allow tape drive on uVax-III
[90/05/08            berman]
[ ./vax/Locore.c ]
Removed UNI1vec definition.  Obsoleted by companion changes in
locore.s
[90/04/17            berman]
[ ./vax/autoconf.c ]
Rearranged allocation of uhp->uh_vec and vec_offset in
unifind() to handle NUBA unibuses and DWBUA correctly. 
[90/04/17            berman]
[ ./vax/scb.s ]
Eliminated UNI1vec and made UNIvec last NUBA * 512 bytes to
allow sufficient static allocation for all the unibuses.
[90/04/17            berman]
Eliminated UNI1vec and made UNIvec last NUBA * 512 bytes to
allow sufficient static allocation for all the unibuses.
[90/04/17            berman]
[ ./vaxuba/ubavar.h ]
Remove UNI1vec declaration.
[90/04/17            berman]
[ ./mips/PMAX/scsi_data.c ]
Picked up the following changes from CS7e
Shortened name to match on Hitachi DK312C as well.
	Added TTI tape drive entry.  Shortened string to match HP-793 
	since the model revision number keeps changing.  This way
	any revision will still match the first characters of the id
	string.  Changes by berman.
[90/07/06            mrt]
[ ./mach/machine.h ]
Added changes for Sun 4/330.
[90/05/07            jjc]
[ ./sys/mtio.h ]
Merged in more stuff for Sun tape drives from SunOS 4.0.3.
[90/05/28            jjc]
[ ./conf/buildconf.mips ]
Added STD+WS+EXP configuration
[90/07/09            mrt]
[ ./vm/memory_object.c ]
	Bug fix to memory_object_lock_request to avoid corrupting
	offsets for pageout.  Found by rwd.
[90/07/20            dlb]
[ ./mach/mach_host.defs ]
Delete thread_depress_abort.  Subsumed by thread_abort.
[90/07/16            dlb]
Convert host_processor_sets to non-privileged form: return name
ports given host port instead of returning control ports given
privileged host port.
[90/07/13            dlb]
[ ./mach/mach_types.defs ]
Add processor_set_name_array_t to replace processor_set_array_t.
[90/07/13            dlb]
Add monitor types.
[90/06/29            dlb]
[ ./mach/mach_types.h ]
processor_set_array_t --> processor_set_name_array_t.
[90/07/13            dlb]
[ ./kern/host.c ]
Convert host_processor_sets to unprivileged version -
return name ports given host port instead of returning
control port given privileged host port.
[90/07/13            dlb]
[ ./kern/processor.h ]
processor_set_array_t --> processor_set_name_array_t.
[90/07/13            dlb]
[ ./kern/thread.c ]
Add depression abort functionality to thread_abort.
[90/07/16            dlb]
Add max_priority init to kernel_thread().
[90/06/20            dlb]
Initialize priority and do first priority computation in
thread_create.  Default maximum priority to BASEPRI_USER
instead of current pset maximum; override still occurs if
pset maximum is lower.  Suggested by Gregg Kellogg at NeXT.
Take priority inits out of thread template.  Remove in transit
check from thread_max_priority.
[90/05/08            dlb]
[ ./kern/ipc_copyout.c ]
Change error printf to distinguish internal and normal cases if data
cannot be inserted into target map.
[90/07/05            dlb]
[ ./conf/MASTER ]
Added comments to define the km and CODA options.
[ ./sun3/movc.s ]
It's back and working this time.  New bcopy and ovbcopy.
[90/05/07            rwd]
[ ./builtin/old_pager.c ]
20-Jul-89 Mary Thompson (mrt)
	Added a few missing declarations.
[ ./mach/monitor.defs ]
Move monitor types to mach_types.defs.
[90/06/29            dlb]
[ ./sun3/pmap.c ]
Changed pmap_init() to include the frame buffer in the
physical memory that we manage.
[90/07/24            jjc]
[ ./conf/MASTER.vax ]
Add hp12-hp15.
[90/05/02  15:13:40  mja]

Add de1 second DEUNA at 164100. 
[90/05/01  15:30:26  mja]
[ ./Directories/ALL ]
Added cfs directory for CODA files
[90/07/25            mrt]

----------
02-May-90 18:11    Jonathan.Chew                Version 5.1(X125)
From: Jonathan.Chew@ROCKY.MACH.CS.CMU.EDU
New features:
--- --------

[SUN3]
	Picked up newer version of sys/exec.h from SunOS  needed by adb on
	Sun 4 to read Sun 4 binaries.


Bug fixes:
--- -----

[SUN3]
	1) Changed assembly language syscall routine to skip FPA exception
	   code	on return to user.

	2) Added code to allow kernels bigger than a megabyte to be booted on
	   the Sun 3/50.  You must use the SunOS 4.0 boot program which will
	   load the kernel around the Sun 3/50 frame buffer in physical 
	   memory.  The necessary kernel changes have compatibility code, so
	   new kernels will work with old and new boot programs.

	3) Backed out Randy's new version of sun3/movc.s until we can find out
	   what is interacting with it badly enough to cause the machine to 
	   reset when compiling the multiserver.

[SUN4]
	1) Fixed problem with zs driver that made keyboard on Sun 4/260 flakey
	   by adding delays to driver.

	2) Fixed kdb{r,w}long routines to be able to make unaligned 
	   references.

	3) Defined INCLUDE_VERSION for kernel dependent programs.

	4) Save and restore out registers on traps, so kdb will always know
	   the correct values of the out registers.

	5) Allocate buffer pool and mbufs in top megabyte of virtual address
	   space where Ethernet drivers can dvma.

	6) Check for thread termination after AST in trap().

	7) Changed MAX{T,D,S}SIZ to be in bytes not clicks.


Organizational changes:
-------------- -------

Changed how wait() is conditonalized in bsd/init_sysent.c and bsd/kern_exit.c,
so the machine independent case is the default.


Special notes:
------- -----

Picked up change to sys/syslog.h from Mike Accetta (see below for more
details).

Compiled for Sun 3, Sun 4, Vax, RT, and Pmax.
Booted on jjc, rocky, crux, concord, scotland, bullwinkle, and testarossa.


******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
125
[ ./sys/syslog.h ]
Added LOG_NEWS facility.
[90/04/13            cap]
[ ./sys/exec.h ]
Picked up changes for exec header for Suns, splitting machine type
short field into two character fields.
[90/04/17  21:11:41  jjc]

Added definition of M_SPARC.
[90/04/17            jjc]
[ ./bsd/init_sysent.c ]
Changed "#ifndef mips" around wait() to "#if defined(multimax) ||
defined(ibmrt) || defined(balance) || defined(vax) || defined(sun3) ||
defined(i386)", so the machine independent version of wait() is used
unless otherwise specified.
[90/03/01            jjc]
[ ./bsd/kern_exit.c ]
Changed "#ifndef mips" around wait() to "#if defined(multimax) ||
defined(ibmrt) || defined(balance) || defined(vax) || defined(sun3) ||
defined(i386)", so the machine independent version of wait() is used
unless otherwise specified.
[90/03/01            jjc]
[ ./conf/files.sun4 ]
Removed line for sun4/BINARY/zs_asm.b and added line for
sun4/zs_asm.s, since we have source now.
[90/04/15            jjc]
[ ./sun3/locore.s ]
Changed Mach emulation code in syscall() to skip FPA
exception code on return to user.
[90/04/03            jjc]
[ ./sun3/machdep.c ]
Modified code in startup() that gives back frame buffer memory
to work for the SunOS 4.0 boot program which loads big kernels
around the frame buffer.
Moved warning that kernel overlaps frame buffer and changed it
to panic if the frame buffer is really going to be used and the
kernel has been loaded on top of it.
[90/04/23            jjc]
[ ./sun3/sun_init.c ]
Always set address of first available physical page to be
above Sun 3/50 frame buffer.  We'll return the memory later
if this isn't a Sun 3/50.
[90/04/23            jjc]
[ ./sun4/kdb.c ]
Added call to stopnmi() to kdb_trap().
Changed kdb{r,w}long() to be able to read from and write to
unaligned addresses.
[90/04/10            jjc]
[ ./sun4/locore.s ]
Added INCLUDE_VERSION definition.
Conditionalized saving and restoring outs in sys_trap() and
sys_rtt() on MACH_KDB instead of DEBUG.
[90/04/03            jjc]
[ ./sun4/machdep.c ]
Added Joe Barrera's Sun 3 changes to make the mbufs and
buffer pool accessable to the Ethernet chips.
	Updated ether_kmem_suballoc() to use vm_submap_object.
[90/03/16            jjc]
[ ./sun4/trap.c ]
Really added check for thread termination after AST.
[90/03/06            jjc]
[ ./sun4/vmparam.h ]
Changed MAX{T,D,S}SIZ to be in bytes not clicks!
[90/02/28            jjc]
[ ./sun4/zs_asm.s ]
Picked up from SunOS 4.0.3.
[90/04/15            jjc]
[ ./sundev/zs_async.c ]
Picked up changes from SunOS 4.0.3 that add delays to
various routines.
[90/04/15            jjc]
[ ./sundev/zs_common.c ]
Needed definition of zsNcurr from SunOS 4.0.3 for
sun4/zs_asm.s.
Picked up changes from SunOS 4.0.3 that add delays to
various routines.
[90/04/15            jjc]
[ ./sundev/zscom.h ]
Picked up definition of ZSDELAY() from SunOS 4.0.3.
[90/04/15            jjc]
[ ./conf/buildconf.sun4 ]
	Created from buildconf.sun3.
[90/04/30            jjc]
[ ./conf/buildconf.sun4 ]
Just make one configuration.
[90/04/30  15:18:05  jjc]
[ ./sun3/movc.s ]
Backed out Randy Dean's new versions of bcopy() and ovbcopy() until the
bug associated with it is found.
[90/05/01  14:45:30  jjc]
----------
02-Apr-90 12:40    Richard.Draves               Version 5.1(X124)
From: Richard.Draves@RPD.MACH.CS.CMU.EDU
Summary:  Primarily a maintenance release.  Important bugs fixed here:
	New inode pager was supplying zero filled memory when it ran out
		of paging space (again).
	Scheduler bug could fail to force threads to their allocated
		processors.
	[MMAX] Conspiracy between assembler and loader was causing
		hardware glitches to crash system.

Also contains scheduler macro removal, and other scheduler and vm bug fixes.
Filesystem bug fixes for configurations not used at CMU.  Several Multimax
bug fixes.  Contains fixes for most bugs recently discussed on mk.  This
should be the last kernel merge I'm associated with --dlb.

New features:
--- --------

Interprocessor interrupts for thread suspension.  Only works on mmax
at moment, vax needs some simple machine-dependent work.

Garbage collection for kernel monitor structures.  Requires a hack
in monitor.defs until this can be done right with no-more-senders.

[MMAX]	Timer code rewritten in inline assembly language.  Lots of
associated assembly language changes to make this run fast.

Bug fixes:
--- -----

Check for processor set mismatch when looking to run same thread in
thread_block().  This fixes a bug that could fail to force threads
to their assigned processors.  With diagnosis help from tfl (PIE).

Fix MACH_FIXPRI version of csw_needed macro to be less aggressive about
context switching time-sharing threads.

Fix vm_map_fork() to create at most one sharing map per fork operation
instead of one map per shared region.  With help from mwyoung.

Clear uu_rfscode in procdup to prevent a core dump from being attempted
over RFS when MACH_VFS is on.

Change TBL_UAREA case of table() to hold references instead of a task lock
across the call to fake_u because it touches pageable memory.  Found by Encore.

Split freefp() out of closef().  Change failing open operations to call
freefp() instead of zeroing f_count.  Prevents a leak of identity structures
in !MACH_VFS configurations.  From Olivetti.

Fix reincarnation of inode pager bug that supplied zero filled memory
when it runs out of paging space.  From rpd.

Remove VFS-RFS dependency by defining versions of LOOKUP macros for exec
that don't depend on RFS.  vfs/inode_macros.h gets a bit messy as a result.
Makes it possible to build MACH_VFS without MACH_RFS.  Found by U of MD.

Use a special object as placeholder between vm_map_find and vm_map_submap.
Prevents coalesce code from causing submap failure.  Found by ISI.

If afs gets badly squeezed for space, just flush the local cache instead
of panicing.  With help from jsb.

Fix for vm_region to cope with submaps.  From gk at NeXT.

Fixes for vm_map_copy technology.  Zero-sized OOL memory should work now.
vm_write/vm_copy can overwrite multiple entries now.  From rpd.

[MMAX]	Make unexpected interrupts really call hw_isr (instead of bcopy
	thanks to !@#$ assembler and loader).

[MMAX]	Remove extranneous vm_map_verify_done from grab_phys_page (copyin).

[MMAX]	Increase size of user_pt_map and pmap_zone.

[MMAX]  Correct interrupt state handling for abt (page fault) traps.

Organizational changes:
-------------- -------

Macro removal from scheduler and timer code as advertised.

Special notes (known bugs/features):
------- -----

Because of AFS space problems, I didn't build the final X124 on the RT.
I did build and boot an early version that lacked the vm_region fix.
The Vax and Sun versions got built/booted; Mips was built but not booted.
----------
09-Mar-90 15:15    Alessandro.Forin             Version 5.1(X123)
From: Alessandro.Forin@TESTAROSSA.MACH.CS.CMU.EDU
New features:
--- --------

New Mach syscall to take care of big-caches and numa boxes: 
	vm_machine_attribute()
For now it is just a pass-through to the pmap module, and I did all
the pmap macros to void it where it is not necessary.

This was part of the general revision to make the Mach GDB work
on pmaxen, and to support CMU Common Lisp there.

Changes to sys/exec.h to provide some better support for COFF images to
users bringing over BSD programs.


Bug fixes:
--- -----

Corrected a bug in vm_map_copy_overwrite [mwyoung] that caused debuggers
to fail to ptrace the last page of the inferior's text segment (seen on
suns and pmaxen).

[PMAX]	Bug in ethernet driver. Made scsi disk labels less picky (fixes rz55).
	KDB now stands a better chance of giving you a ":J" and of working
	during the boot sequence.  KDB might actually work on a multiP now.
	Fixed three locking bugs in the pmap module.  Disabled automatic
	fix of unaligned references.


Organizational changes:
-------------- -------

None.

Special notes:
------- -----

Versions compiled:
	pmax: STD+WS
	sun:  STD+WS
	rt:   STD+ANY+EXP
	vax:  STD+MF STD+WS STD+MP+16 STD+WS+EXP STD+WS-afs-nfs+vice

Booted on:
	testarossa	(pmax STD+WS)
	rocky		(sun  STD+WS)
	bullwinkle	(rt   STD+ANY+EXP)
	r2d2		(vax  STD+MP+16)

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
123
[ ./bsd/kern_exec.c ]
Remove execute permission from stack segment for coff boxes.
On the only machine where it matters it is uselessly expensive.
[90/01/21            af]
[ ./bsd/subr_prf.c ]
Removed MIPSCo's %R additions, they overlapped the %b
options and I got rid of all the code that used them.
[89/11/10            af]
[ ./conf/MASTER.mips ]
Cleaned up a bit now that I understand how this thing works.
Broke name clash on 'pm', kept pagemap code enabled since it
seems to work.
[90/03/08  22:48:15  af]
[ ./conf/files.mips ]
Fixed long-standing name clash pm-the-screen <-> pm-pagemap.
Added some pmap options.
[90/03/08  22:46:30  af]
[ ./conf/newvers.sh ]
This is Mach 2.5, Berkeley is on the other coast.
[89/11/19  10:39:04  af]
[ ./mach/mach.defs ]
	Added vm_machine_attribute.
[90/01/14            af]
[ ./mach/mach_types.defs ]
	Added vm_attribute's types.
[90/01/14            af]
[ ./mach/mach_types.h ]
Added vm_attributes.h
[90/01/14            af]
[ ./mach/mips/thread_status.h ]
Added single-stepping interface, via setstatus of the exception
flavor.  Sounded like an "exception" state is the closest thing
to a vax with a T bit set.  Added relevant defs.
[89/12/13            af]
[ ./mach/vm_attributes.h ]
.
[90/01/21  13:05:49  af]

Created.
[89/12/08            af]
[ ./mips/PMAX/if_ln.c ]
Fixed a bug in lnget(), which would blow up if it could not get the very
first mbuf of the chain. [Original af bug, wasn't in Ultrix]
[ ./mips/PMAX/pm_graphics.c ]
Always scroll, even with X running.
[90/01/21  13:34:47  af]
[ ./mips/PMAX/scsi_sii.c ]
Changed sii_dodev() to be less picky on the disk label:
now if it cannot find a perfect match it will look for
a valid prefix and use it if found.
[This makes RZ55 work again]
[ ./mips/PMAX/stand/csu.mips.s ]
Reflected use of new asm.h file.
[89/11/14  00:19:20  af]
[ ./mips/PMAX/stand/libasm.s ]
Reflected use of new asm.h file
[89/11/14  00:19:48  af]
[ ./mips/PMAX/stand/mipsboot.c ]
Well, I realized that "mach_boot" was a little childish.
It's "boot" in the known universe.
[89/11/14            af]
[ ./mips/PMAX/stand/prom_entry.s ]
Reflected use of new asm.h file.
[89/11/14  00:20:05  af]
[ ./mips/check_dbg.c ]
Removed invocation of KDB here, since it is too early in the game.
[It wasn't working anyways..].  Moved it where it does work.
[89/11/09  12:13:22  af]
[ ./mips/context.h ]
Moved over from pure Mack kernel.
[89/11/09  16:46:20  af]

Define usage of safe tlb entries for kernel stack pages.
[89/11/03  16:37:45  af]

Moved here definitions about use of the TLB 'safe' entries.
Which is now just the first, as the kernel stack shrinked
to just one page.
[89/10/29  15:15:42  af]
[ ./mips/context.s ]
Separated setjmp/longjmp for KDB, so that sstepping through
syscall() works.  Why, I mean WHY didn't the MIPS guys put
a T bit in the machine ?  Ohh, Lord!
[90/03/06            af]
Forgot to preserve a1 across pmap_set_modify() calls.
Only the pure kernel triggered this (pure luck).
[89/11/27            af]
[ ./mips/coproc_control.s ]
Updated includes.
[90/01/21  13:07:36  af]
[ ./mips/emulate_instr.s ]
Updated includes.
[90/01/21  13:08:53  af]
[ ./mips/entry.s ]
Removed code that unnecessarily was in assembly and lived here
(vax heritage), now it lives in mips_init().  Minor cleanups.
[90/02/10  11:54:34  af]

Updated includes.
[90/01/21  13:09:24  af]
[ ./mips/fp_intr.s ]
Updated includes.
[90/01/21  13:15:33  af]
[ ./mips/kdb/format.c ]
Disabled impossible use of floating point instructions
by the kernel.  Who needs it anyways ?
[90/03/06  13:21:48  af]
[ ./mips/kdb/kdb_main.c ]
Check if we should NOT take a temporary breakpoint.
[90/03/06  13:19:24  af]
[ ./mips/kdb/kdbdefine.h ]
Use private setjmp/longjmp functions.
[90/03/06  13:11:23  af]
[ ./mips/kdb/mips_symtab.c ]
Fixed includes to be self-containing.
[90/01/21            af]
[ ./mips/kdb/mips_trace.c ]
Updated to use defs from new mips_instruction.h file.
[90/01/21  13:41:28  af]
[ ./mips/kdb/mode.h ]
Make more room for temporary breakpoints, as the new logic
for sstepping requires it.
[90/03/06  13:18:21  af]
[ ./mips/kdb/runpcs.c ]
New sstepping code.  Stash away both the SP that we should
have when hitting the temporary breakpoint (so that other
threads do not get it) and the instruction following the
one we remove.  In this way I can fix the PC for the thread
that is not supposed to get the breakpoint to point to
the place where we saved those instructions and let it go
without need for emulating instructions.

There is still a problem with functions that cannot take
exceptions, like load_context.  Sigh.
[90/03/06  13:17:07  af]
[ ./mips/kdb/sym.c ]
Fixed includes to be self-containing.
[90/01/21            af]
[ ./mips/kdb/syms.h ]
Created, collapsing various MIPS header files into this one.
[90/01/21            af]
[ ./mips/kdb/unasm.c ]
Updated to use defs from new mips_instruction.h file.
[90/01/21  13:40:25  af]
[ ./mips/locore.s ]
Changed KDB to stay on the thread's kernel stack. This makes it
possible to debug the early boot stages, when we run on the boot
stack which KDB would otherwise clobber.
Keep crash-debug enabled by default.
Renamed ref-bits option.
[90/03/08  22:40:36  af]

Added optional reference bits handling.
Added missing INCLUDE_VERSION.
Updated includes.
[90/01/21  13:17:20  af]
[ ./mips/mcount.s ]
Updated includes.
[90/01/21  13:14:56  af]
[ ./mips/mips_exception.c ]
Let the MI code handle BAD_ACCESS, like everyone else.
Drop dead code.
[90/01/21  13:18:26  af]
[ ./mips/mips_init.c ]
Moved here code that used to be in entry.s to further dispatch
to setup_main and main() on return from mips_init().
This way I can keep the fake_xx variables on the stack and use
KDB in setup_main() as well.
[90/02/10  11:53:29  af]

Added fake task and thread structures on the stack so that KDB
will work if one boots with "boothowto=0xc".
[89/11/09  12:14:52  af]
[ ./mips/pcb.c ]
Added single-stepping interface, via setstatus of the exception
flavor.  Sounded like an "exception" state is the closest thing
to a vax with a T bit set.  Added relevant defs.
[89/12/13            af]
[ ./mips/pmap.c ]
Fixed three locking bugs:
1- pmap_remove() -> read_lock(&pmap_lock) ->get_more_ptepages() 
   -> vm_wait().  swapout_scan() -> pmap_remove_all -> write_lock!
2- pmap_protect(kernel_pmap,..) -> simple_lock(kernel_map) ->
   get_more_ptepages() -> kmem_alloc() -> ..simple_lock !
3- get_more_ptepages -> kmem_alloc -> lock kernel map ->....
Thanks to Rich Draves for tickling both #1 & #2 (#3 was already popular)
To fix #3, use a separate submap.
[90/03/08            af]
Added pmap_attribute() and reference bits.  Other code
still disabled pending further testing.
[90/01/14            af]
[ ./mips/pmap.h ]
Removed unused wired bit.  Added machine attribute pointer in
pmap structure.  Remove macro for ref bits, as we might have
them (in software) now.
[90/01/21            af]
[ ./mips/softfp.s ]
Updated includes.
[90/01/21  13:33:08  af]
[ ./mips/softfp_unusable.s ]
Updated includes.
[90/01/21  13:42:26  af]
[ ./mips/tlb.s ]
Renamed ref-bits option to be consistent with conf rules.
[90/03/08  22:38:16  af]

Added reference bits code.  Updated includes.
[90/01/21  13:32:20  af]
[ ./mips/trap.c ]
Fixed trap() to generate more standard exception codes, needed to get
the Mach GDB  to work.
Removed some old crap.
[90/01/21  13:13:20  af]

Disabled "Fixed unaligned.." code.  Allegro CL actually depends on
NOT having this feature enabled.  And I never liked it anyways.
NOTE: this was actually only needed for some old FORTRAN
compilers when they could not align properly data. New MIPS
FORTRAN compilers now generate the appropriate lwr/lws
instructions, and this feature is not needed anymore.
[89/12/07            af]
The change to ldstr_addr broke kernel mode DBEs, as it
was always trying to get the instruction from user space.
[89/10/30            af]
Optim the above fix. (gm0w)
[89/10/25            af]
[ ./mips/usercopy.s ]
Updated includes.
[90/01/21  13:33:52  af]
[ ./vm/vm_map.c ]
Added vm_map_machine_attributes().
Correct check for holes in vm_map_copy_overwrite() [mwyoung]
[ ./vm/vm_user.c ]
Added vm_machine_attribute().
[90/01/14            af]
[ ./conf/MASTER.mips ]
Ooops, restored EXP to get emulation & co.
[ ./vax/pmap.h ]
Added null pmap_attribute() macro.
[90/03/09            af]
[ ./sun3/pmap.h ]
Added null pmap_attribute() macro.

[ ./ca/pmap.h ]
Added null pmap_attribute() macro.
[90/03/09            af]
[ ./sun4/pmap.h ]
Added null pmap_attribute() macro.
[90/03/09            af]
[ ./i386/pmap.h ]
Added null pmap_attribute() macro.
[90/03/09            af]
[ ./mmax/pmap.h ]
Added null pmap_attribute() macro.
[90/03/09            af]
[ ./sys/exec.h ]
Added (optional) definition of the coff_exec structure and
related definitions to help porting BSD user programs to
coff-based architectures.
[90/03/09            af]
----------
23-Feb-90 17:06    Mary.Thompson                Version 5.1(X122)
From: Mary.Thompson@NATASHA.MACH.CS.CMU.EDU
Removed very obsolete vm_allocate_with_pager from mach.defs
Removed LINTLIBRARY code from message.h since it was messing
up the building of the lintlibrary

SUN3
Fixed the number of parameters in calls to if_set_addr in
sunif/{if_ie,if_ec}.c

Another couple of attempts from Randy to get the faster copyin
and copyout to work. The code is now correct, works on Rocky
but does not work on Randy's machine


******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
122
[ ./sun3/locore.s ]
Fixed bug in copyin/copyout.
[90/02/20            rwd]
[ ./sun3/movc.s ]
Fixed bug in bcopy.
[90/02/20            rwd]
[ ./mach/mach.defs ]
Removed vm_allocate_with_pager. It has obsolete for some
time and its inclusion messes up the libmach.a write around.
Removed ancient history and content free log mesages.
[90/02/20            mrt]
[ ./mach/message.h ]
Removed LINTLIBRARY code since this is now the wrong file
to include in a lint library and these definitions clash
with the ones in msg.c. Removed ancient history and content
free revision comments.
[90/02/20            mrt]
[ ./sunif/if_ec.c ]
Removed extraneous third argument to if_set_addr
[90/02/20            mrt]
[ ./sunif/if_ie.c ]
Removed extranous third argument from set_if_addr call.
[90/02/20            mrt]


----------
20-Feb-90 15:25    Jonathan.Chew                Version 5.1(X121)
From: Jonathan.Chew@JJC.FAC.CS.CMU.EDU
New features:
--- --------

Two changes to mmap().  See change log message below.

[SUN4]    Made changes for HW_AST.
	  Added more exceptions.
	  Added support to pmap module for pmegs with more than 32 pages.
	  Added SYS_wait4 to sys/syscall.h for Sun 4.
	  Picked up SunOS 3.5 drivers for bwtwo monitor, keyboard, and mouse.
	  Picked up SunOS 4.0 version of sys/ieeefp.h.


Bug fixes:
--- -----

[SUN4]	1) Fixed bogus pointer dereference problem in sun4/float.s.
	2) Fixed kdb printtrace routine to use machine independent 
	   KDB_PRINT_CASES macro to do most of its work.
	3) Fixed bug in locore.s that set context number of initial thread
	   incorrectly.
	4) Fixed bad trap entries in SCB, since assembler can't handle Sun's
	   BAD_TRAP() macro.
	5) Fixed wait4() to return rusage correctly.
	6) Fixed thread_setstatus() to save all the bits in the saved PSR 
	   except the user settable ones (ie. condition code bits).
	7) Fixed pcb_init() to set PC to be 8 less than where we want to start
	   since return instruction jumps to return address + 8.
	8) Fixed syscall() for negative system call numbers.
	9) Fixed pmap_protect() never to increase protection.
       10) More fixes described below with change logs.

[SUN3]	1) Faster copy{in,out} from RWD.
	2) Fix for bcopy() getting negative size from RWD.


Organizational changes:
-------------- -------


Special notes:
------- -----

Built and tested on Sun 4/260, crux.
Incremental make done on rocky, ra, and natasha.
Booted on jjc, bullwinkle, and mrt.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
121
[ ./bsd/kern_mman.c ]
Two semantic changes to mmap:
1.	Allow mmap to allocate an unused address range.
2.	Mapping a read-only file for read/write gets a
	copy(on-write) of the file.
[89/11/08            dbg]
[ ./conf/MASTER.sun4 ]
	Add hw_ast to MSTD.
[89/10/24            jjc]
[ ./mach/sun4/exception.h ]
Jul-24-89  Jonathan J. Chew (jjc) at Carnegie Mellon University
	Added more exceptions.
[ ./mach/sun4/syscall_sw.h ]
Created.
[89/07/23            jjc]
[ ./sun4/ast.h ]
Copied Sun 3 version for Sun 4.
[89/10/23            jjc]
[ ./sun4/float.s ]
Forgot to get pointer to pcb from current thread before
dereferencing it....Oops!
[89/08/09            jjc]
[ ./sun4/kdb/common/print.c ]
Use macro "KDB_PRINT_CASES" in printtrace() to handle
machine independent printing commands like $[kKlLQfFtTmP].
Added print_stack_trace() for use by KDB_PRINT_CASES.
[89/10/25            jjc]
[ ./sun4/locore.s ]
Thanks to Mike Grossman for pointing out that I left out
one indirection in accessing the context number for the
initial thread.
[90/01/09            jjc]
Changed all of the bad trap entries in the SCB to explicitly
put the trap number into a register because the assembler can't
seem to handle moving (. - _scb) >> 4 or . - _scb into a register.
How the heck did Sun do this???
[89/10/20            jjc]
[ ./sun4/machdep.c ]
Fixed wait4() to correctly return rusage.
[90/01/11            jjc]
[ ./sun4/pcb.c ]
Fixed thread_setstatus() to keep bits of saved psr.
Also, fixed bug in pcb_init() which did not set PC in PCB
with correct offset for return instruction from 
load_context().
[89/08/22            jjc]
[ ./sun4/pcb.h ]
Removed include of <sys/features.h> and conditionalized definitions for kdb
under MACH instead of MACH_KDB.
[89/11/16  21:54:00  jjc]
[ ./sun4/pmap.c ]
	Correct pmap_protect() to never increase access rights.
Added support for pmegs with more than 32 pages.
[89/10/23            jjc]
[ ./sun4/pmap.h ]
Conditionalized more of this file under "#ifdef KERNEL" so
this will compile outside the kernel.
     Add PMAP_CONTEXT macro - does nothing.
[89/10/23            jjc]
[ ./sun4/trap.c ]
Set Mach exception codes appropriately in trap().
Fixed syscall() and indir() to use signed system call numbers,
since Mach has negative system call numbers.
Only check for termination after an AST.  Add rpd fix to
termination check after page faults.  CHECK_SIGNALS macro change.
Use csw_needed instead of runrun and friends.
[89/10/25            jjc]
[ ./sun4/vmparam.h ]
Removed include of <sys/features.h>.
[89/11/16            jjc]
[ ./sundev/bw2reg.h ]
Picked up SunOS 3.5 version.
[90/02/12            jjc]
[ ./sundev/bwtwo.c ]
Picked up SunOS 3.5 driver and modified for Mach.
[90/02/12            jjc]
[ ./sundev/fbutil.c ]
Picked up SunOS 3.5 version and modified for Mach.
[90/02/12            jjc]
[ ./sundev/kbd.c ]
Picked up SunOS 3.5 driver and modified for Mach.
[90/02/13            jjc]
[ ./sundev/kbd.h ]
Picked up SunOS 3.5 version.
[90/02/12            jjc]
[ ./sundev/ms.c ]
Picked up SunOS 3.5 driver and modified for Mach.
[90/02/13            jjc]
[ ./sys/ieeefp.h ]
Upgraded to SunOS 4.0 version.
[90/01/29            jjc]
[ ./sys/syscall.h ]
Defined SYS_wait4 for Sun 4.
[89/09/02            jjc]
[ ./mach/sun4/exception.h ]
Added more exceptions.
[89/07/24            jjc]
[ ./sun3/locore.s ]
Faster copyin/copyout.
[90/02/12            rwd]
[ ./sun3/movc.s ]
Change bcopy to return on < 0 also
[90/02/19            rwd]
New bcopy and ovbcopy which are faster.
[90/02/08            rwd]
----------
12-Feb-90 12:43    Steven.Berman                Version 5.1(X120)
From: Steven.Berman@BERMAN.FAC.CS.CMU.EDU
New features:
--- --------

New cache manager expansion system will help reduce afs problems with
cache partition filling up.  [from jsb]

[PMAX]  Initialize the ttylocation on console open.
	Disk tables for wren6 wren7 and rz56.

Bug fixes:
--- -----

Fixed inode.h to make definition of i_socket point to the right thing
	[from parker]

Reworked resource pausing in afs so that kernel core dumps do not
pause, and user setmodes are observed in afs directories.

Sticky bit directory semantics fixed to work as in sticky(8)

RFS fd system calls fixed to work correctly. [ftruncate(), fsync(),
	fchown(), fchmod()]

[SUN]   Fixes for movc [faster bcopy and ovbcopy] and inline_machdep
	[from rwd]

[PMAX]  Fix scsi start routine to recognize correct EOF tape marks.

Organizational changes:
-------------- -------

Added some minor changes to kmerge.csh to make mv into mv -f and set nonomatch

Special notes:
------- -----
Booted on:
	ANDI.FAC	rt
	BERMAN.FAC	pmax
	WB2.MACH	VAX780
	FREW.FAC	sun3

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
120

[ ./sys/inode.h ]
Fixed #define for i_socket to point into vnode (inode_header),
not inode.
[90/02/09            parker]

[ ./afs/afs_cache.c ]
Complete rewrite of afs_GetDownD() and changes to afs_CheckSize
to implement new disk space allocation technique.  This lets
the afs cache grow whenever it is feasible.   from jsb
[90/02/09            berman]

[ ./afs/afs_call.c ]
Changed print out of cache size and blocks used in afs_call()
and print outs of shutdown stages.
[90/02/09            berman]

[ ./afs/afs_daemons.c ]
Added jsb's fixes for rpause mechanism.
Set BUQUIT flag in afs_BQueue() when user has u_rpause cleared.
Also clear shouldpause in afs_fspause() if u_rpause is clear.
This prevents resource pausing in afs if the user requested not 
to, or the kernel is core dumping a user process.
[90/02/09            berman]

[ ./afs/afs_osifile.c ]
Changed VOP_RDWR() in osi_Write() to use osi_cred. from jsb
[90/02/09            berman]

[ ./bsd/init_main.c ]
Added initialization of new u_VOPuid field in main(). 
from jsb
[90/02/09            berman]

[ ./bsd/ufs_alloc.c ]
Added checks on u_VOPuid field in alloc() and realloccg() 
to allow afsd to write into the file system reserve.
[90/02/09            berman]

[ ./mips/PMAX/scsi.c ]
In sz_start() after giving EOF, turn off DEV_TPMARK 
from ern
[90/02/09            berman]

[ ./mips/PMAX/scsi_data.c ]
Added wren6, wren7, and rz56 disk types and tables.
[90/02/09            berman]

[ ./sys/user.h ]
Added field u_VOPuid to uthread and user structures.
from jsb
[90/02/09            berman]

[ ./vfs/ufs_dir.c ]
Reworked the sticky bit directory permission checks in
dirrename() to protect against renaming other's files.
Added code in direnter() to protect against duplicating
other's files.
[90/02/09            berman]

[ ./vfs/ufs_vnodeops.c ]
Added manipulation of u_VOPuid in ufs_rdwr() to carry the 
credentials down to the file system code in the u-area.
from jsb
[90/02/09            berman]

[ ./mips/PMAX/pm_tty.c ]
Added initialization of ttyloc information in pmopen().
[90/02/09            berman]

[ ./sun3/inline/inline_machdep.c ]
Fix rewrite to write correct number with address register
and rewrite all logic for pea case.  The old version did
not work for most cases.
[90/02/06            rwd]

[ ./sun3/movc.s ]
New bcopy and ovbcopy which are faster.
[90/02/08            rwd]

[ ./src/kmerge.csh ]
Added -f to mv when replacing the UpdateLog with the new one.
Added set nonomatch  before trying to remove .BCS*~
[90/02/09            berman]

[ ./vfs/vfs_syscalls.c ]
Added MACH_RFS code to fsyc(), fchown(), fchmod(),
and ftruncate() to make these syscalls work properly 
with RFS files.
[90/02/10            berman]
----------
16-Jan-90 16:32    Steven.Berman                Version 5.1(X119)
From: Steven.Berman@BERMAN.FAC.CS.CMU.EDU
New features:
--- --------

Added generic unsys() syscall to gracefully handle unsupported vendor
specific syscalls.  Fixes messages on the vax.

Added standard C declarations to the ntohs ntohl htons htonl functions
in netinet/in.h

Made mountfs() only complain about really dirty file systems.

[IBMRT]	  When dropping into the debugger, clear the apa16 screen
	memory and re-init the font memory.

[PMAX]    Support for HP-793 and Hitachi DK312C disk drives.
	Reworked the pmktimer to blank only after initial console
	open.

Bug fixes:
--- -----

Fixed recognition of setuid bits in afs files   [from jsb]

Added sleep to work around asynchronicity in inode_uncache_try() [from jsb]

[VAX]	  Added syscalls to 257 to handle getsysinfo and setsysinfo as
	unsys() to make ultrix 3 binaries work under MACH (messages).

[PMAX]	Added SCSI_PHASE_DELAY to help work around slow disks like
	the Hitachi DK312.  This replaces a manifest constant wait
	loop in the scsi bus arbitration.

	Added INCLUDE_VERSION name list entries 	[from af]

	Fixed include file references to make PMAX kernel compile.

	Deleted all references to use_paging_file to make PMAX kernel
	compile with newer gentler pager.

	Added include of vm/vm_map.h to make PMAX kernel
	compile with newer gentler pager.

Organizational changes:
-------------- -------

	<none>

Special notes:
------- -----

	I resurected WB2 to test X119.STD+MF on a vax780 and 
also tested on:
	PMAX	berman.fac
	SUN3	rocky.mach
	RT	bullwinkle.mach
	VAX-MP	r2d2.mach

As in Rich's post, you must have a new mach_swapon and a paging file
defined in /etc/rc.local to use the pager.  I am in the process
of integrating Rich's swapon code to the facilitie's standard /etc/swapon
and will make it available soon.

******** CUT HERE ******** summary of log messages ******** CUT HERE ********
[ ./conf/version.edit ]
119

[ ./afs/afs_vfsops.c ]
Set VFS_NOSUID flag under #ifdef AFS_MACH_ENV conditional to
disallow setid programs to be run from AFS.
[89/12/13            jsb]

[ ./bsd/ufs_mount.c ]
Changed check in mountfs() to only complain if file system
is really dirty.  Changed message to indicate that mount happens
anyway.
[90/01/04            berman]
Picked up Rudy's changes to this module.  Changed many SMART_FSCK
conditionals to #if 1.  Enhanced error print out for mount.
Changed the values of fs_clean some.
[89/11/15            berman]
Do not print warnings for the first mount, as the root
filesystem is not clean by definition.
[89/10/26            af]

[ ./bsd/init_sysent.c ]
Added declaration of unsys() under 2.? vendor specific emul.
Added vax extensions to 257 providing get/setsysinfo -> unsys
syscalls.  This is to prevent Ultrix 3 vax binaries from core
dumping on MACH.
[90/01/04            berman]

[ ./mips/PMAX/pm_tty.c ]
Reorganized pmktimer() initialization to happen after console is
opened first time.  This keeps the screen from blanking off
during booting.
[89/12/25            berman]

[ ./mips/PMAX/scsi_sii.c ]
Added SCSI_PHASE_DELAY constant to manipulate the timeout
value used in waiting for targets to switch bus phases.
Made the default value 10 times old value for Hitachi disks.
[89/12/18            berman]

[ ./mips/PMAX/pm_tty.c ]
Reorganized pmktimer() initialization to happen after console is
opened first time.  This keeps the screen from blanking off
during booting.
[90/01/11            berman]

[ ./afs/afs_vnodeops.c ]
Put the code to hide the setuid and setgid bits under an #ifndef
AFS_MACH_ENV conditional. We want to see the bits so we can tell
why execution fails. [jsb]

[ ./bsd/cmu_syscalls.c ]
Added unsys() for general use when the syscall is unsupported.
[90/01/11            berman]

[ ./mips/PMAX/scsi_data.c ]
Added Hitachi DK312C tables.
Changed identification string from CM70 to CM73 for 
newer Hitachi disk.
[90/01/11            berman]

[ ./vfs/ufs_vfsops.c ]
Changed check in mountfs() to only complain if file system
is really dirty.  Changed message to indicate that mount happens
anyway.
Added a sleep to ufs_umount if the device was EBUSY. This will
allow any asychronous inode_uncache_try calls to finish. [jsb]

[ ./mips/locore.s ]
Added INCLUDE_VERSION and INCLUDE_VERSION to the name list.
[90/01/10            af]

[ ./standca/debug.c ]
Added apa16_screen_init() to debugger start up.
Made call to apa16_screen_init() selective.  Do it only if
one exists.
[90/01/11            berman]

[ ./netinet/in.h ]
Added under __STDC__ conditionals the ansi C declarations for 
ntohs(), ntohl(), htons(), and htonl().
[90/01/11            berman]

[ ./bsd/ufs_mount.c ]
Changed check in mountfs() to only complain if file system
is really dirty.  Changed message to indicate that mount happens
anyway. [berman]

Enhanced error print out for mount.
Changed the values of fs_clean some. [ern]

Do not print warnings for the first mount, as the root
filesystem is not clean by definition. [af]
[ ./mips/kdb/mips_symtab.c ]
Changed include of /usr/include/syms.h to
/usr/include/mips/syms.h
[90/01/12            berman]

[ ./mips/kdb/sym.c ]
Changed include of /usr/include/syms.h to
/usr/include/mips/syms.h
[90/01/12            berman]

[ ./mips/kopt.c ]
Deleted references to use_paging_file since it is no longer
a valid configuration switch.
[90/01/12            berman]

[ ./mips/startup.c ]
Added include of vm/vm_map.h to define vm_map_pageable.
[90/01/12            berman]

[ ./mips/PMAX/scsi_data.c ]
Added HP-793 disk info.
[90/01/15            berman]
----------
25-Dec-89 16:00    Richard.Draves               Version 5.1(X118)
From: Richard.Draves@RPD.MACH.CS.CMU.EDU
The summary:  a kinder, gentler inode pager (which happens to be
multi-threaded), and a host of bug fixes, mostly obscure VM problems.

The new pager assumes XP/VFS configurations, so I left the old code
in builtin/old_pager.c.

The new pager uses files for backing store, not anonymous inodes.
You must tell the kernel about candidate files with the mach_swapon()
system call.  I have a mach_swapon user program for this purpose.
The kernel boots fine without paging files, but eventually it will try
to page out and then it will be unhappy.

The new pager is multi-threaded (five threads by default), but
it isn't very smart about assigning memory objects to threads.
The number of threads and assignment of objects to threads
should probably be tied to the paging resources.

Obviously before this kernel can see general use somebody needs
to think about policy things like where these paging files
come from by default, modifying /etc/rc, etc.  On the test
systems I just modified /etc/rc.local to use /etc/mach_swapon
(the new program) to inform the kernel about some files I handpicked.
(You can still boot older kernels on these machines; just ignore
the errors from /etc/mach_swapon.)

You can find source/binaries/documentation for mach_swapon
in ~rpd/mach/src/bin/mach_swapon/.

Tested as follows:
	bullwinkle		STD+WS
	rocky			STD+WS-afs-nfs+vice, STD+ANY
	r2d2			STD+MP+16
	rpd			STD+ANY+EXP

Rich

[ ./conf/version.edit ]
118
[ ./sun/fbio.h ]
Update to SunOS revision 5.14.
[89/12/11            mja]
[ ./sundev/cg6reg.h ]
Installed.
[ ./bsd/kern_sig.c ]
Obscure bug fix: always send SIGMSG and SIGEMSG to traced
processes to avoid dropping SIGUSR1 and SIGUSR2 on the floor.
Found by Chia Chao at HP Labs.
[89/12/01            dlb]
[ ./bsd/ufs_inode.c ]
Fix typo in previous version.
[89/12/13  14:49:44  dlb]

Clean up inode reference checking in iflush as suggested by
Glenn Marcy.  Remove MACH_XP conditionals.
[89/12/11            dlb]
[ ./builtin/device_pager.c ]
PAGE_WAKEUP --> PAGE_WAKEUP_DONE.  See vm/vm_page.h.
[89/12/13            dlb]
[ ./kern/exception.c ]
Oops, must pass thread to thread_exception_abort!
[89/12/14            dlb]
[ ./kern/ipc_host.c ]
Take out extra reference on new processor set ports in
ipc_pset_init for reply message; these ports are now
returned untranslated.  Assume caller of ipc_pset_disable
has pset locked as well as referenced.
[89/12/15            dlb]
[ ./kern/kernel_monitor.c ]
Add missing MONITOR_PAUSE cases to monitor_cpu_{in,out}.
[89/12/11            dlb]
[ ./kern/machine.c ]
Use references to protect processor->processor_set_next and the
local variable which holds that value during assignment.  Put
more code under MACH_HOST in processor_doaction.  Check if
new processor set is dead in processor_doaction.
[89/12/15            dlb]
Locking bug fix to processor_assign.
[89/11/06            dlb]
[ ./kern/parallel.c ]
MACH_HOST support: when releasing master, context switch away
immediately if thread is not assigned to default processor set.
[89/11/16            dlb]
[ ./kern/processor.c ]
Changes to implement pset garbage collection:
1.  Add pset_is_garbage to detect abandoned processor sets.
	Add do_pset_scan to look for them.
2.  Pass back the actual ports from processor_set_create, so they
        will always have extra references; this way a newly created
	processor set never looks like garbage.

Also optimized processor_set_destroy.
[89/12/15            dlb]
Put all fixed priority support code under MACH_FIXPRI switch.
Add thread_change_psets for use by thread_assign.
[89/11/10            dlb]
Check for null processor set in pset_deallocate.
[89/11/06            dlb]
[ ./kern/sched_prim.c ]
Kick off processor set garbage collection from sched thread.
[89/12/18  21:05:17  dlb]

Add second argument to thread_swapin.
[89/11/28            dlb]
Check for processor set mismatch in thread_setrun.
[89/11/16            dlb]
Rewrite choose_thread and split it into two pieces to speed it
up somewhat.  The new piece, choose_pset_thread, is called only
from choose_thread and thread_block when the processor runq is
known to be empty.
[89/11/16            dlb]
MACH_FIXPRI changes: always set first_quantum for any thread
that is run.  Always use min_quantum if thread comes off of local
run queue.  Don't do set_pri for fixed priority threads in
scanner.  Set first_quantum if thread_block runs same thread.
[89/11/15            dlb]
Put all fixed priority code under MACH_FIXPRI switch.
[89/11/10            dlb]
In thread_setrun, only preempt for thread being put onto run
queue, not for threads already on it (use th->sched_pri instead
of rq->low).
[89/11/09            dlb]
Fix walking zombie problem by making sure running threads are
interruptible in clear_wait() and thread_wakeup_prim().  Remove
panic that checked this.
[89/10/30            dlb]
[ ./kern/syscall_subr.c ]
Only check counts on a multiprocessor; thread_block does these
checks anyway, but grabs a lock to do them.
[89/12/01            dlb]
Check runq counts in swtch() and thread_switch() before calling
thread_block().
[89/11/20            dlb]
Set first_quantum to true when switching to a fixed-priority
thread.
[89/11/15            dlb]
Encase fixed priority support code in MACH_FIXPRI switch.
[89/11/10            dlb]
[ ./kern/task.c ]
Redirect task assignment to default_pset if target pset is dead.
[89/12/15            dlb]
[ ./kern/thread.c ]
Check for inactive pset in thread_doassign.
[89/12/15            dlb]
Add second argument to thread_swapin.
[89/11/28            dlb]
Round user-supplied quanta for fixed priority threads up to
multiples of clock interrupt period.
[89/11/15            dlb]

Fix up AST_HALT code.
[89/11/13            dlb]
Put all fixed priority support code under MACH_FIXPRI flag.
Replace use of thread_freeze/unfreeze in thread_deallocate.
Use thread_change_psets in thread_doassign.
Use thread_sleep in thread_freeze.
[89/11/10            dlb]
Add missing success return value to thread_assign.
Remove zombie panic from thread_release.
[89/11/08            dlb]
[ ./kern/thread_swap.c ]
Add code to make thread_swappable work on any thread no matter
what its swap state is.
[89/11/28            dlb]
[ ./kern/thread_swap.h ]
Add MAKE_UNSWAPPABLE flag.
[89/11/28            dlb]
[ ./kern/timer.h ]
Minor stylistic change to TIMER_DELTA, plus explanatory comment.
[89/11/28            dlb]
[ ./mach/mach_host.defs ]
Under KERNEL_SERVER, pass the out arguments of
processor_set_create as port_t's.  They really are
the appropriate processor set types, but processor_set_create
does the type conversions internally.  This isn't pretty.
[89/12/15            dlb]
[ ./mmax/mmax_init.c ]
Uncomment nxprbufs init.
[89/12/13  14:51:03  dlb]
[ ./mmax/pcb.c ]
Set count on return from thread_getstatus.
Add FLAVOR_LIST flavor.
[89/12/20            dlb]
[ ./mmax/phys.c ]
Add PAGE_WAKEUP after vm_page_unwire in release_phys_page.
[89/12/13            dlb]
PAGE_WAKEUP --> PAGE_WAKEUP_DONE in grab_phys_page() to reflect
the fact that it clears the busy flag.
[89/12/13            dlb]
Save and restore ptes as needed in all physical memory access
routines to allow interrupt protection to be removed (and remove it).
Also eliminate use of phys_pte2_in_use array.
Use TBIS instead of TBIA on 32332 (APC).
[89/10/31            dlb]
[ ./mmaxio/ms.c ]
Delete two UMAX assertions that don't apply to Mach.
[89/12/12            dlb]
[ ./vfs/ufs_vnodeops.c ]
Fix fastlink code in rfs_make_symlink, and put under
MACH_FASTLINK switch.
[89/11/16            dlb]
[ ./vm/memory_object.c ]
Fix placeholder page handling in memory_object_data_provided.  Old
code was calling zalloc while holding a lock.
[89/12/13  19:58:28  dlb]

Don't clear busy flags on any pages in memory_object_lock_page
(from memory_object_lock_request)!!  Implemented by changing
PAGE_WAKEUP to not clear busy flag and using PAGE_WAKEUP_DONE
when it must be cleared.  See vm/vm_page.h.  With dbg's help.
[89/12/13            dlb]

Don't activate fictitious pages after freeing them in
memory_object_data_{unavailable,error}.  Add missing lock and
unlock of page queues when activating pages in same routines.
[89/12/11            dlb]
Retry lookup after using CLEAN_DIRTY_PAGES in
memory_object_lock_request().  Also delete old version of
memory_object_data_provided().  From mwyoung.
[89/11/17            dlb]
[ ./vm/vm_fault.c ]
Assert that page is not busy before marking it busy.
[89/12/21            dlb]
Check for absent as well as busy before freeing a page when
pagein fails.
[89/12/13            dlb]
Change all occurrences of PAGE_WAKEUP to PAGE_WAKEUP_DONE to
reflect the fact that they clear the busy flag.  See
vm/vm_page.h.  Add PAGE_WAKEUP_DONE to vm_fault_unwire().
[89/12/13            dlb]

Break out of fault loop after zero filling in response to
finding an absent page; the zero filled page was either absent
or newly allocated and so can't be page locked.
[89/12/12            dlb]

Must recheck page to object relationship before freeing
page if pagein fails.
[89/12/11            dlb]
[ ./vm/vm_map.c ]
Make sure object lock is held before calling
vm_object_copy_slowly.  Release old destination object in wired
case of vm_map_copy_entry.  Fixes from rpd.
[89/12/15            dlb]
Modify vm_map_pageable to allow both user and kernel to wire
memory.  New routine is vm_map_pageable_common, but should be
called via macros in vm/vm_map.h.
[89/12/11            dlb]
[ ./vm/vm_map.h ]
Make both wired counts short.
[89/12/15            dlb]
Add user_wired_count field and vm_map_pageable macros.
[89/12/11            dlb]
[ ./vm/vm_object.c ]
Add vm_object_disaster under VM_OBJECT_DEBUG for use in debugging.
[89/12/21  16:31:59  dlb]

Fix comment on vm_object_delayed.
[89/12/18            dlb]
Revised use of PAGE_WAKEUP macros.  Don't clear busy flag when
restarting unlock requests.
[89/12/13            dlb]

Fix locking problems in vm_object_copy_slowly:
    1.  Must hold lock on object containing page being copied from
        (result_page) object when activating that page.
    2.  Fix typo that tried to lock source object twice if
        vm_fault_page returned two objects; this rare case
        would hang a multiprocessor if it occurred.
[89/12/11            dlb]
[ ./vm/vm_object.h ]
Fix vm_object_absent_assert_wait to use vm_object_assert_wait
instead of vm_object_wait.  Also expanded object lock macros
under VM_OBJECT_DEBUG to check LockHolder.
[89/12/21            dlb]
[ ./vm/vm_page.h ]
Rename PAGE_WAKEUP to PAGE_WAKEUP_DONE to reflect the fact that
it clears the busy flag.  Add new PAGE_WAKEUP that only does the
wakeup, and leaves the busy flag alone.
[89/12/13            dlb]
[ ./vm/vm_pageout.c ]
PAGE_WAKEUP --> PAGE_WAKEUP_DONE to reflect the fact that it
clears the busy flag.
[89/12/13            dlb]
Eliminate page lock when writing back a page.
[89/11/09            mwyoung]
[ ./vm/vm_resident.c ]
Remove scaffolding code -- Bug found.
[89/12/21            dlb]
Added scaffolding code to panic in vm_page_activate; looking for
XP bug that crashes kernel when heavy use is made of memory objects
backed by netmemory server on a multiprocessor.

PAGE_WAKEUP --> PAGE_WAKEUP_DONE in vm_page_free() to reflect
the fact that it clears the busy flag.  Remove PAGE_WAKEUP from
vm_page_unwire; callers are responsible for this, and it didn't
work right if the page was wired more than once.
[89/12/13            dlb]
[ ./bsd/init_main.c ]
Size the inode_pager's map according to how many threads it has.
[89/11/28  21:30:21  rpd]
[ ./bsd/ufs_inode.c ]
Restored inode_pager_active code, under conditionals,
so that it is used in conjunction with builtin/old_pager.c.
[89/12/22  16:11:55  rpd]

Purged inode_pager_active because anonymous inodes are no longer used.
[89/11/28  21:31:31  rpd]
[ ./builtin/device_pager.c ]
Updated to new SERVER_LOOP interface.
[89/11/24  23:02:40  rpd]
[ ./builtin/inode_pager.c ]
If this isn't a MACH_VFS/MACH_XP kernel, use builtin/old_pager.c.
[89/12/22  16:14:15  rpd]

Added missing <mach/vm_param.h> include.
[89/12/01  13:50:25  rpd]

Purged inode_pager_active, inode_pager_shutdown.
[89/11/28  21:32:33  rpd]

Updated to new SERVER_LOOP interface.
Updated to new vm_map_pageable interface.
Fixed various unix_master/unix_release bugs.
Added support for multiple threads.
[89/11/24  23:04:36  rpd]

Revamped and simplified in the following ways:
1)  Purged non-MACH_XP, non-MACH_VFS code.
2)  Purged anonymous inode code; revised mach_swapon call.
3)  Purged internal queue of data requests.
4)  Simplified the no-senders detection.
5)  Dropped support for multiple client kernels.
[89/11/24  15:04:06  rpd]
[ ./builtin/inode_pager.h ]
Declared mach_swapon() and flags for it.
[89/11/24  15:05:09  rpd]
[ ./builtin/old_pager.c ]
Created from the X117 builtin/inode_pager.c, for use in
non-MACH_VFS and non-MACH_XP kernels.
[89/12/22  16:16:05  rpd]
[ ./ca/machdep.c ]
When NBC, use 32 pages for buffers.  16 isn't enough.
[89/12/01  14:13:20  rpd]
[ ./kern/device.c ]
Updated to new SERVER_LOOP interface.
[89/11/24  23:05:18  rpd]
[ ./kern/ipc_basics.c ]
Modified memory_object_terminate_hack to use
msg_send_from_kernel_options, so memory_object_terminate
gets sent with the same options as the other upcalls.
[89/12/01  22:26:39  rpd]

Added memory_object_terminate_hack.
[89/11/28  21:33:50  rpd]
[ ./kern/ipc_copyout.c ]
Print a warning message if vm_map_find fails.
[89/11/28  21:35:31  rpd]
[ ./kern/ipc_kport.c ]
Added port_lookup() call.
[89/11/24  15:05:37  rpd]
[ ./kern/kern_port.h ]
Declared port_lookup() call.
[89/11/24  15:06:05  rpd]
[ ./kern/mfs_prim.c ]
Updated vm_allocate_with_pager to vm_map.
Fixed vmp_push so it doesn't rely on non-preemptive scheduling.
[89/12/01  13:52:21  rpd]
[ ./kern/server_loop.c ]
Replaced LOCAL_PORT with two arguments to SERVER_LOOP.
[89/11/24  23:05:48  rpd]
[ ./kern/syscall_sw.c ]
Added mach_swapon() syscall.
[89/11/24  15:06:55  rpd]
[ ./mach/syscall_sw.h ]
Added rfs_make_symlink() and mach_swapon() syscalls.
[89/11/24  15:07:28  rpd]
[ ./vax/inline/langpats.c ]
Added copybzero.
[89/12/01  13:52:51  rpd]
[ ./vax/locore.s ]
Added Copybzero.
[89/12/01  13:53:17  rpd]
[ ./vfs/ufs_vnodeops.c ]
Fixed NBC typo in fast symlink code.
[89/12/01  13:54:29  rpd]
[ ./vm/vm_external.c ]
Fixed off-by-one error in vm_external_create.
[89/12/18  23:40:56  rpd]
[ ./vm/vm_map.c ]
Fixed use of vm_object_copy_slowly in vm_map_copyin.
Restored similar fix to vm_map_copy_entry.
[89/12/01  13:56:30  rpd]
[ ./vm/vm_object.c ]
Use memory_object_terminate_hack instead
of memory_object_terminate/port_release.
[89/11/28  21:37:08  rpd]
[ ./builtin/old_pager.c ]
MACH_XP:  Added dummy inode_pager_num_sets variable,
to keep bsd/init_main.c happy.  Updated SERVER_LOOP call.
[ ./kern/thread_swap.c ]
Fixed thread_sleep call to use simple_lock_addr.
[ ./vm/vm_map.c ]
Fixed syntax errors in vm_map_print.
[ ./builtin/old_pager.c ]
Added dummy mach_swapon.
[ ./kern/sched_prim.c ]
Only call do_pset_scan when MACH_HOST.
[ ./src/kmerge.csh ]
After creating new UpdateLog, make it non-writable so that
the next kmerge will ignore it.
[ ./Directories/ALL ]
Added the mips directories
[89/11/14            mrt]
----------
22-Nov-89 16:42    Mike.Accetta                 Version 5.1(X117)
From: Mike.Accetta@MJA.FAC.CS.CMU.EDU
New features:
--- --------

A couple of minor scheduler tweaks.  [dlb]

[SUN3]  Increased maximum number of SCSI disks to 5 and tapes to 2 on a
single controller.  Disks are at bus address 0-4 and tapes at 5-6 (7 is
reserved for the controller).  [mja]

[PMAX]  Added QIOCFADE for screen blanking interval and added
QIOCGSTATE for detecting frame buffer type.  [berman]


Bug fixes:
--- -----

Fix FIOCFSPARAM call in VFS code for non-512 byte fragment sizes (this
fix was made to the UFS code months ago).  [mja]

Several bug fixes to the processor allocation code.  If you want to use
this code, you need these fixes (machine.c, processor.c, thread.c).
[dlb]

Installed fix to reset TS_ONDELAY when closing the control end of a
pseudo-terminal so that the next process to grab the application end
won't see unexpected non-blocking I/O error returns.  [berman]

Installed fix to flush application terminal buffers when opening the
control end of a pesudo-terminal so that a new process doesn't see old
output.  [berman]

Installed fix to wake processes blocked in open waiting for a prior
close to complete once it finally happens.  [berman]

Pick up a vm bug fix from mwyoung via jsb that is required by the
netmemoryserver.  [dlb]

[MMAX]  Minor bug fixes; the only major one is a rewrite of
mapfrcounter() to reuse a single object and pager.  This prevents a
zone exhaustion panic caused by heavy use of mapfrcounter().  [dlb]


Organizational changes:
-------------- -------

Upgraded kmerge.csh script for use with non-latest releases.  A switch
of "-release latest" is assumed in most cases although the script tries
to confirm that you really meant to grab the lock on the latest release
by checking either that kmerge.csh is comming from a path like
".../latest/src/kmerge.csh" or that the current directory ends in
"latest".  As a result of this upgrade, the set file is now checked in
as "UpdateSet" rather than ".BCSset-TRUNK" since it is used for
multiple releases.  There is also now a "UpdateLog" file at the top of
the source tree which accumulates the log messages for each version.
[mja]

Installed PMAX include files tweaks.  [mrt]
 
Installed fix to make_snapshots.csh to include Makeconf and Makefile in
ALL.  [mrt]

Installed new hinstall.csh for MMAX and PMAX with assorted other bug
fixes.  [mrt]

All of the fixed priority code is now under a MACH_FIXPRI switch
(configuration tag - fixpri).  This code should be considered
experimental.  [dlb]
----------
02-Nov-89 13:26    David.Black                  Version 5.1(X116)
From: David.Black@DLB.MACH.CS.CMU.EDU
Minor merge to fix zombie problem and incorporate a few multimax-specific
bug fixes and improvements.

New features:
--- ---------

[MMAX] [ ./mmax/phys.c ]
Save and restore ptes as needed in all physical memory access
routines to allow interrupt protection to be removed (and remove it).
Also eliminate use of phys_pte2_in_use array.
Use TBIS instead of TBIA on 32332 (APC).
[89/10/31            dlb]

[MMAX] [ ./mmax/pmap.c ]
Remove phys_pte2_in_use array initialization.  See phys.c.
[89/10/31            dlb]

[MMAX] [ ./mmax/pmap.h ]
Remove phys_pte2_in_use array; see phys.c for details.
[89/10/31            dlb]

Bug fixes:
--- -----

[ ./kern/sched_prim.c ]
Fix walking zombie problem by making sure running threads are
interruptible in clear_wait() and thread_wakeup_prim().  Remove
panic that checked this.
[89/10/30            dlb]

[MMAX] [ ./mmax/mmax_ast.c ]
Move include file missed in merge.
[89/10/30            dlb]

Organizational changes:
-------------- -------

[MMAX] [ ./conf/buildconf.mmax ]
Created.  Multimax is currently using non-standard configuration names.
[89/11/01            dlb]

Special notes:
------- -----

make buildconf on a multimax does a serial build.  This is slow, but it
works.
----------
20-Oct-89 13:10    Alessandro.Forin             Version 5.1(X115)
From: Alessandro.Forin@TESTAROSSA.MACH.CS.CMU.EDU

This is largely a pmax-only merge, to upgrade to the latest changes.
I compiled but not booted for Vax (STD+WS+EXP), Sun and RT (STD+ANY+EXP).

Highlights:

[ ./afs/afs_cache.c]
Print a warning when stuck in looking for space in the 
cache. Presumably users will take action and enlarge the AFS cache.

[ ./bsd/kern_sig.c ]
In core(), allocate fake uarea on kernel pageable map, not on stack.

[ ./bsd/mach_process.c ]
Fixed Mips case that got botched in previous merge.
Also, added a 'flush' argument to the ptrace_write_data()
function, in anticipation of other architectures (besides MIPS)
which might need to flush the Icache in ptrace.

[ ./vm/vm_external.c,h ./vm/vm_pageout.c ./vm/vm_fault.c ./vm/vm_object.c ]
Made use of MACH_PAGEMAP (used nowhere but on pmaxen) more reliable by
keeping the zone size information around, considering paging_offset
when looking for external state, and existence_info in vm_object_collapse.

[PMAX]
Made assembly silent by default.
Added fast context switching code. Actually, it is just doing
the same thing as before (for now).
Removed old MIPS ast mechanism, replaced with new Mach one.
Various fixes for KDB.
Upgraded pmap module as per mwyoung specs and dlb PMAP_CONTEXT requirements
Fixed the bug discussed on the mk list in trap.c.
Fixed a bug in the cache sizing code from MIPS.
----------
15-Oct-89 14:14    Richard.Draves               Version 5.1(X114)
From: Richard.Draves@DLB.MACH.CS.CMU.EDU
I fixed kmerge so that it uses .BCSmerge-TRUNK instead of .BCSset-TRUNK
to trigger the increment of the kernel version number.  This should allow
people to use bci before kmerge.

I fixed the sup control files so that dlb.mach can reverse sup.
X114 did sup to wb1 properly.

I did some minor cleanup on the new files from X113.
See my forthcoming mk mail for details.

I recompiled on Vax, Sun, and RT, but I didn't boot any of the resulting
kernels.  There weren't any real source changes.

Rich
----------
13-Oct-89 02:44    David.Black                  Version 5.1(X113)
From: David.Black@DLB.MACH.CS.CMU.EDU
Remerge to get new version number.  Will someone who understands the
kmerge process/script please:

	1.  Clean up whatever damage has resulted from two merges
		numbered 112.
	2.  Fix the logic in the kmerge script that bumps the version
		number to be more reliable.  It's obviously error-prone
		in its current form.

Also, there's still no reverse sup to wb1.
----------
13-Oct-89 02:24    David.Black                  Version 5.1(X112)
From: David.Black@DLB.MACH.CS.CMU.EDU
Overall note: Due to the number of files involved in this merge, I haven't
reproduced the history entries for the files involved in new features.
This post is long enough already.

The reverse sup failed; will someone please fix this, and add DLB.MACH to
whatever magic list is involved in doing this.

New features:
--- --------

Extensive rewrite of scheduler.  Includes support for faster context switch
within tasks.  Machine-dependent work for all architectures to implement
this (FAST_CSW) should be done before this goes to alpha release.  Scheduler
uses an internal thread for mach factor and thread scan.

Priority range has changed from 0-127 to 0-31.  This will confuse ps;
old ps's work, but print funny things as a result.  A new ps is coming.

Support for individually settable thread priorities and fixed priority
threads.  This and the next item use a new MiG interface (mach_host.defs)
starting at 2600.  Please don't add unrelated things to this file.

Support for processor allocation and control.  Internal thread used in
implementation.  (MACH_HOST)

Handoff and Discouragement scheduling support.

host_info, slot_info, and cpu_control are now prefixed with xxx_;
replacements are available.  WARNING: there is a new host_info call that is
not compatible with the old one (new one incorporates flavors for
extensibility).  This was deemed acceptable due to the small number of
applications that depend on it.

Kernel monitoring support (with help from the PIE folks).

Removed kern_timestamp().

Added HW_FOOTPRINT option to support multiprocessors where cache/tlb
footprints are important.  Tries to reschedule threads onto same processor.

Support for use of interprocessor interrupts for scheduling bound threads
on multiprocessors.  Speeds up some processor allocation operations.

Bug fixes:
--- -----

Lots of little things.  HIGHLIGHTS:

Fix exit() to record time from all threads.

Several signal fixes, including one ugly bug that required task and
thread hackery.

Make exceptions abortable, as per mk discussion.

kalloc and zalloc improvements.  kalloc zone sizes are now patchable.

Replaced exit_code termination mechanism with ast-based mechanism to
eliminate thread_should_halt() checks from critical trap and syscall paths.
HW_AST option indicates whether ast implementation is machine-dependent
(i.e. takes advantage of hardware support); on for vax and sun3, off
for ibmrt and mmax.

Rewrote task/thread termination and thread_abort to avoid races and
deadlocks.

Major optimizations to timers, as suggested by dbg.

dbg reorganization to mach.defs to avoid message id conflicts.

Rewrote vm_map_pageable to fix two major bugs.  Calling sequence changed;
I've the history entries in other files for this out of the post.

Pick up some header files from mrt and mbj for user compilation.

>From mbj: pick up 4.3-tahoe sl-ip driver.

[MMAX] Bring multimax up to date, including mapfrcounter().

[VAX] ni ethernet driver bug fix from mbj.  kernel boots on r2d2!!

GORY DETAILS:

[ ./bsd/init_main.c ]
Remove obsolete service_timers() kickoff
[89/02/03            dlb]

[ ./bsd/kern_exit.c ] Fix time calculation in exit() to record time from all
threads, not just current thread.

[ ./bsd/kern_sig.c ]
1.  psignal: Break thread out of an exception for SIGKILL.
2.  psignal: Take out reference on thread that is being signalled.
       Requires hackery to deallocate at interrupt level.
3.  issig: Ignore signals sent to internal tasks.
4.  issig: Really stop the task in STRC case to avoid confusing debuggers.
5.  psignal: Yet more switch statement nonsense to deal with
       compiler peculiarities.

[ ./bsd/kern_synch.c ] Use task->kernel_vm_space to figure out whether pmap
needs to be activated.

[ ./kern/exception.c ] Add thread_exception_abort(), and modify
thread_doexception() to deal with the RCV_INVALID_PORT code it causes
exception_raise to return.

[ ./kern/ipc_basics.c ] Fix order of statments bug in msg_rpc().
Add ABORTED check for kernel reply messages.  Plus minor changes
for fixed-priority threads, kernel monitors and processor allocation.

[ ./kern/ipc_globals.c ] Bump size of large messages zone to 1024.  XXX

[ ./kern/ipc_tt.c ] Move code to clear exception clear port to
thread_exception_abort.

[ ./kern/kalloc.c ] Rewrite kallocinit() to allow the k_zones to be
individually sized with the sizes in a static (patchable) array.  Loosely
based on code from Joe Boykin (boykin@encore.com).  If zone exhaustion
panics reappear, this is the place to look.

[ ./kern/lock.c ] Add debugging panics to check for lock corruption (-1 read
count).

[ ./kern/mach_factor.c ]  Complete rewrite, and don't divide by ncpus in
calculating load average on a multiprocessor.

[ ./kern/machine.c ]  Almost complete rewrite, and rvb's cpu_control()
changes are vax-specific.

[ ./kern/sched_prim.c ] Massive rewrite plus the following bug fixes:
Change preempt check in thread_setrun() to preempt on any
       priority difference instead of 2 or greater.
Use task->kernel_vm_space instead of pmap to figure out whether
       to do PMAP_DEACTIVATE and PMAP_ACTIVATE.
Add sched_thread() and scanner to unstick stuck threads.
Rename thread_switch to thread_run to allow use of former name
       for a trap.
Change ticks to unsigned in update_priority. (found by jjc).

[ ./kern/syscall_subr.c ]  Reimplement swtch and swtch_pri.  Latter
uses depression internals of thread_switch.  Also implement thread_switch
(Handoff and Discouragement scheduling) here.

[ ./kern/task.c ]  Support new features, and:
Init thread_list_lock in task_create, and use it in
       task_terminate.  This is to deal with a messy signal problem.
Check for termination of current thread or task in task_terminate.
Use thread_force_terminate in task_terminate.
Deleted obsolete xxx routines and user_suspend_count field.

[ ./kern/task.h ] Support new features, and:
XXX need separate lock for thread_list that can only be held at
XXX splsched() to solve nasty problem with signals.
Delete user_suspend_count field.

[ ./kern/thread.c ]  Support new features, and:
Make thread_abort abort exceptions too.
Add thread_deallocate_interrupt for use in fixing a nasty
       multiprocessor signal problem.  Use thread_list_lock for
       same reason.
Major rewrites to thread_halt and thread_terminate to deal with
       potential races and deadlocks.  thread_abort also affected.
Fix thread_halt_self to not take extra hold on thread; thread_halt
       already holds thread instead.
Rewrote exit logic to use new ast mechanism.

[ ./kern/thread.h ]  Support new features, and:
Add active field.  Used to avoid termination races and deadlocks.
Deleted user_suspend_count field.
Change all usage and delta fields to unsigned to prevent
negative priorities.
Split exit_code field into ast and halted fields.
Changed thread_should_halt() macro.

[ ./kern/timer.c ] Optimize timer_normalize and timer_grab based on new
timer representation.  This is a simple version of a Lamport clock based on
a suggestion by dbg (again!).  The savings in timer_grab are impressive.
New overflow logic.  Check low_bits directly for risk of
overflow.  Gets rid of service_timers().  Suggested by dbg.

[ ./kern/timer.h ] Representation changes to match kern/timer.c improvements.

[ ./kern/zalloc.c ] Changes suggested by boykin@encore.com to avoid duplicate
memory allocation in zalloc and die a little more gracefully when the
zone_map runs out of memory.

[ ./mach/mach.defs ] Move memory_object_get_attributes and
vm_set_default_memory_manager to unused msg IDs within the mach subsystem ID
range (they had been OUTSIDE the range).  Msg IDs used belong to the
obsolete calls pager_data_lock and pager_clean_request (removed as of
21-Jan-88, before the external pager interface was even in experimental
use).  WARNING! There are NO more msg IDs left at the end of this
subsystem.  From dbg.

[ ./net/if_sl.c ] Picked up vanilla 4.3-tahoe driver.  From mbj.

[ ./src/config/mkmakefile.c ] Take out ${BASE} hack to SOURCE_DIR.

[ ./vm/vm_map.c ]  Rewrite vm_map_pageable to:
1.  Create new objects BEFORE clipping map entries to avoid object
	proliferation.
2.  Check for holes when wiring memory.  The calling sequence
	is changed to pass the requested access type which is checked.
	This avoids extra vm_map_check protection calls (which aren't
	quite right anyway), and requires changes to all code that
	calls vm_map_pageable.

[IBMRT]	[ ./ca/machdep.c ] Fix mb_map size.

[IBMRT] [ ./ca/pmap.h ] Put macro, zalloc and lock stuff under #ifdef KERNEL
conditionals so that the file would compile outside of the kernel where it
is included by adb.  From mrt.

[MMAX]	[ ./bsd/kern_clock.c ] Don't reset timeofday clock here on multimax
because multimax routine might block (XXX).

[MMAX] [ ./conf/MASTER.mmax ] Add SIMPLE_CLOCK here, tripped by <dpc> tag.
Add MMAX_KDB option as standard replacement for CMUCS_KDB.  Change system
name to machmm.  Put device configuration back in MASTER.mmax.local.  This
file should not know about slots or device unit numbers.

[MMAX] [ ./conf/MASTER.mmax.local ] Add MACHMM to specify default
configuration. 

[MMAX] [ ./conf/Makefile.mmax ] Update inline technology.  Add hack rule to
haul in extra header files that it needs.  Move all locore rules here.
Remove special ioconf dependency.  Use ${KCC} for all kernel sources.  Use
SOURCE_DIR to find sources for inline, locore, dbmon.

[MMAX] [ ./mmax/inline/multimaxpats.c ] Add pmap_pte for benefit of pmap
module.

[MMAX] [ ./mmax/locore.s ] Check for ridiculous string length in strcpy.
MACH_NFS also needs the string manipulation routines.

[MMAX] [ ./mmax/machdep.c ] Set size of user_pt_map to 8 Meg.

[MMAX] [ ./mmax/mmax_init.c ] Always set RB_DEBUG in boothowto if MMAX_KDB
is turned on.  WARNING: this change is probably CMU-specific!!!
vm_cache_max --> vm_object_cached_max.

[MMAX] [ ./mmax/mmax_ptrace.h ] Include <aouthdr.h> when outside of the
kernel.  From mbj.

[MMAX] [ ./mmax/pcb.h ] Removed include of pmap.h outside the kernel.  It
isn't needed since we're only using a struct pt_entry pointer.  From mbj.

[MMAX] [ ./mmax/phys.c ]
Tell pmap module to set modify bit when copyout uses copy_to_phys.
Rewrite copyin again to avoid vm_map_copy problems:
	vm_map_copy consumes a map entry in some common cases.
	vm_map_copy is very slow.
Unfortunately the new code knows a fair amount about
the internals of vm_fault(), but there doesn't seem to be a better
way to do this (vm_map_pageable also consumes a map entry).
Can't rewrite copyout similarly because that would violate copy on
write semantics in certain cases.

[MMAX] [ ./mmax/pmap.c ] Add semicolons to ends of macro invocations.
Replace pte1_zone with pte1_alloc() and pte1_free() because new zone package
does not make alignment guarantees.  pmap_pte is now done by inline.  Add
pmap_set_modify.

[MMAX] [ ./mmax/trap.c ] master_rett and master_reti are needed on all
hardware.

[MMAX] [ ./mmax/vm_tuning.h ] Created by swiping vax file.  Can be diddled
later.  [89/08/03            dlb]

[MMAX] [ ./netinet/in.h ] Multimax uses inline for byte ordering.

[SUN3]	[ ./sun3/pmap.h ] Put maco, zalloc and lock stuff under #ifdef
KERNEL conditionals so that this will compile outside the kernel where it is
used by adb.

[VAX] [ ./vax/cons.c ] Encase slave routines in NCPUS > 1.  New processor
shutdown logic.

[VAX]  [ ./vax/machdep.c ] Encase multiprocessor shutdown code in NCPUS > 1.
Replace should_exit with processor shutdown logic.

[VAX] [ ./vax/pmap.h ] Put lock and macro stuff under #ifdef KERNEL
conditionals so that this file would compile outside the kernel.

[VAX]	 [ ./vaxif/if_ni.c ] Corrected pointer comparison of >= 0 to == 0.
The 4.3-tahoe compiler (correctly) optimizes the (unsigned) pointer
comparison away.  Older compilers (incorrectly) used signed comparisons for
pointers, and catch this -- since the pointer being tested was in system
space, it was indeed < 0 when != 0 -- it worked.  The bugs used to cancel
each other out!  Kernel now boots on r2d2!!!   From mbj.

Organizational changes:
-------------- -------

[ ./sys/version.h ] Bump include version to 26 for new 0-31 priorities.

Special notes:
------- -----

This kernel requires some machine-dependent changes.  They've been done for
ibmrt, mmax, sun3, and vax.  See X113-changes.README in
/afs/cs/mach/src/kernel/latest for details.

The reverse sup failed.  DLB.MACH needs to be added to some magic list.

Tested (booted) as follows:
	sun3:	rocky		All 5 configurations.
	ibmrt: 	bullwinkle	STD+WS, STD+ANY+EXP
	vax:	wb2		STD+MF
		r2d2		STD+MP+16
	mmax:	m.speech	MACHMM+apc (std. multimax configuration)

All other architectures (i386, mips, pmax, sun4 ...) are currently broken
pending implementation of the machine dependent changes noted above.

The separation of MACH_RFS is apparently not complete (I accidentally
turned it off at one point, and the kernel failed to build).

hc is complaining about a lot of lint.

New versions of ps and libraries should be coming shortly.

FAST_CSW should be implemented for all machines, and some of the debugging
panics removed from the scheduler before this goes to alpha release.
----------
11-Oct-89 00:07    Michael.Young                Version 5.1(X112)
From: Michael.Young@F.GP.CS.CMU.EDU
New implementation: virtual memory copy
-----------------------------------------

I have redesigned the virtual memory copy implementation as announced
on the mach-kernel mailing list.  Basically, the old monolithic
"copy from one map to another" operation has been broken down into
several smaller operations:
	a)  copy in existing memory, resulting in a "map copy" thing;
	b)  copy out a "map copy" thing, dropping it into a
	     newly-allocated address range;
	c)  copy a "map copy" thing on top of existing memory; and
	d)  throw away a "map copy" thing without using it.

Operations (a) and (b) are used in normal message transfer.  Operation
(c) supports the vm_write() call.

The "map copy" thing is represented much the way a vm_map is: it's
a linked list of address map entries.  This makes step (b) cheap.

All of those modules that allocate memory to be returned as the
result of a Mach interface call must "copy in" the memory to
obtain a "map copy" thing, rather than copying to the (now deceased)
ipc_soft_map.

Port arrays are still copied into the ipc_kernel_map, although this
should be changed as wel.  There's no reason to use the virtual memory
copy technology for them, as they always get written.  It would be
better to allocate fresh memory, use pure copyin() to get the
user port names, and translate them in msg_copyin().  At msg_copyout()
time, the ports get translated again, and then the memory gets
dropped in the user address space using vm_map_copyin() and vm_map_copyout()
in rapid succession.  I have not made this change -- I merely converted
the existing port array copyin code in a straightforward way.

Another internal use of vm_map_copy was for ptrace.  In order to
simplify fixing both the MI and Sun3 versions of ptrace, I broke
out routines to read/write small amounts of user memory.

I have left a version of the new interface that uses the old vm_map_copy
technology in the vm_map module under the MACH_OLD_VM_COPY option,
just in case any new bugs show up as the new implementation gets
deployed more widely.

Old feature finally implemented: overwriting permanent objects
------------------------------------------------------------

The virtual memory copy redesign was motivated by the desire to
be able to overwrite permanent memory object mappings using vm_write.
I have done an implementation of this overwrite operation, and have
sketched an optimization that avoids asking for data (and possibly
permission) that it will overwrite in its entirety.

This required splitting up the routine that copies a virtual memory
object into two separate routines: one that tries to perform
a symmetric copy (or the asymmetric copy if the copy strategy
can be read) without blocking; and one that may require unlocking
or blocking.  The latter routine is also called with the map
unlocked, requiring that it be relocked, verified, possibly
restarting the copy.

New semi-feature: maps allocations automatically wait for space
---------------------------------------------------------------

The vm_map module now supports the ability to wait for space to
become available when allocating memory, and to wake up waiters
when freeing memory.  This was previously done using special
functions in the vm_kern module.

It would be nice to be able to export this notion to user-level
programs, at the very least during msg_receive operations.  I haven't
done so, though.

Make an old feature better: fast symbolic links
------------------------------------------------

The fast symbolic link technology that is in constant use on the
Multimax is now an architecture-independent option [MACH_FASTLINK].
Existing "fast links" will be treated properly, but new fast links
will only be created on the Multimax for now -- there are runtime
patches to decide policy.

I also changed the RFS node handling to permit those nodes to
be symbolic links instead of normal files.  The combination of
these two features permits RFS nodes to consume only an inode,
instead of an inode and a fragment, resulting in a significant
savings on the root filesystem.

Unfortunately, it is not sufficient to use symbolic links when
creating RFS links, as they may need to have null bytes in them --
they're just IP addresses.  I added a new system call (two
implementations, VFS and not) to create a fast link style RFS node.

Machine-dependent interface change: pmap_protect
------------------------------------------------

The pmap_protect and pmap_page_protect functions are now defined to
never increase permission for a translation.  See the recent
discussion on the mach-kernel mailing list for rationale.

I have made this change for the Vax, RT/PC, and Sun3 architectures *only*.
[It was not terribly difficult on any of them.  The pmap_page_protect
functions already adhered to the rule.]

Sundry external memory management improvements:
-----------------------------------------------

Eliminate the unnecessary layer of type conversion for
memory object control ports, leaving only vm_object_lookup.

Make memory_object_data_provided atomic, interruptible,
and serializable.  To do so for multiple-page operations,
this requires two passes: the first moves each original
pages elsewhere, puts in a placeholder page, copies the data into,
the original and makes it pageable (so that a later delay doesn't
leave lots of memory wired); the second pass moves all of the pages
back atomically, throwing away the placeholder pages.  It is
also necessary to attempt to read every page of data, even if
it cannot be accepted, in order to give the appearance of a
msg_send operation.  An optimized path is provided for the case
where a single page is provided in response to a request.

Split up memory_object_lock_request implementation into a
routine that does work for a single page.  This enables
the search for pages to be unrolled either by looking
for each page by offset (as is done now) or by traversing
the object's list of pages (not yet implemented).

Work toward making memory_object_lock_request A,I&S.
In particular, do as much work as possible while holding
the object lock -- delay writing back pages until the
entire request has been processed, or it is necessary
to unlock to process a busy (or wired) page.  If it
is necessary to unlock, it should restart the operation
if an intervening memory_object_data_provided took place,
but this isn't implemented yet.

In the fault handler, when traversing beyond a top-level
virtual memory object, only ask the memory manager for
read access.

In msg_send_from_kernel, use SEND_SWITCH to cause the memory
manager to be invoked immediately.

Allocate fictitious placeholder pages from a zone, rather than
using a page structure on the thread's kernel stack.  A stack
may become unwired, leaving the VP table threaded through
memory that may cause a fault when touched.  [An alternative
would be to have user threads queue up dirty pages for the
pageout daemon to clean and wait for them to complete, but
that introduces other problems.]

Corrected the handling of the reserved pool in the pageout
daemon.  The reserved pool size, at which ordinary threads
can no longer allocate memory, must be the largest number.
At some later point, the pageout daemon must only page
out to the default memory manager.  At yet some later point,
the pageout daemon must stop paging out entirely, leaving
some memory for the default memory manager to use.

Simplify the pageout daemon code that creates a new memory object
for temporary backing storage.

In general, remove non-XP code where it is no longer useful.

Basic VM system improvements:
-----------------------------

Add vm_object_pmap_protect to perform pmap protection
operations (e.g., copy-on-write or remove) in the most
efficient manner -- either by making a pmap_protect
call on the particular pmap, or by making a pmap_page_protect
on each page in the range for sparsely populated objects.
This is particularly useful during fork(), where an
enormous stack region must be made copy-on-write, but only
a few pages are actually in memory.  It may also be useful
for deallocation, but I haven't installed that use.

Add page_aligned macro to <mach/vm_param.h>.  THIS FILE
SHOULD NOT BE VISIBLE TO USERS -- it should be moved back
to the implementation directory.

VAX-specific changes:
---------------------

Save and restore PTEs in the physical memory copying routines,
rather than using interrupt protection.  Aside from the obvious
benefit of not holding interrupts for lengthy copy operations,
this also allows tracing to proceed through this code.

Pick up modify bits while processing PTEs in pmap_copy_on_write,
since the pmap_is_modified implementation doesn't traverse
the list.

Compilation and testing notes:
------------------------------

Tested on the following machines:

	Vax:	MWYOUNG		STD+WS-afs-nfs+vice
		WB4		STD+MF
	Sun3:	ROCKY		STD+ANY+EXP, STD+WS
	RT:	BULLWINKLE	STD+WS, STD+ANY+EXP

As Rich noted for X111, R2D2 hangs in the network initialization,
due to a compiler problem.
----------
05-Oct-89 19:12    Richard.Draves               Version 5.1(X111)
From: Richard.Draves@RPD.MACH.CS.CMU.EDU
New features:
--- --------

I added a new EXC_SOFTWARE code, EXC_UNIX_ABORT,
which the unix exception handler translates into SIGABRT (SIGIOT).
Now all per-thread signals can be generated with exceptions.

From NeXT:  Now when you give vm_region() an address in the middle
of a region, it uses and returns the start of the region.

Bug fixes:
--- -----

Makefile fixes:  I fixed the top-level Makefile to build buildconf
correctly; it broke recently.  I fixed standca/Makefile to not assume
/usr/mach/bin is on PATH.

TT fixes:  I fixed a locking problem in thread_block()/thread_switch()
that could cause deadlocks.  I also reorganized thread_wakeup_with_result()
and thread_wakeup_one() into a common function, thread_wakeup_prim().

IPC fixes:  The timeout_scaling_factor is now microseconds/tick.
This makes IPC timeouts more accurate.  task_secure() now looks
at exception ports; this fixes a major security hole.

VM fixes:  I fixed vm_fault_page() in the must_be_resident case when
descending down the chain of objects.  I fixed vm_map_copy_entry()
to use uprintf() instead of printf() when it warns about copying
over permanent data.  I expunged vm_fault_copy_entry()
(it was bogus) and now vm_map_copy_entry() uses vm_object_copy_slowly()
directly in the copy-from-wired case.  From NeXT:  vm_map_protect()
wasn't unlocking in the is_sub_map case.  From NeXT:  I fixed off-by-one
errors in useracc(), vslock(), vsunlock().

VM optimizations:  I removed vm_object_list and vm_object_count;
this makes objects smaller.  I restructured how maps contain map entries
to make maps smaller.  From NeXT:  I put in an optimization
that deactivates the original page when it is copied because of COW.
From NeXT:  I converted some map entry fields into bitfields.
From NeXT: vm_object_deactivate_pages() checks that the page isn't inactive
before calling vm_page_deactivate().  From NeXT:  changed the
ref_count and resident_page_count fields in objects to shorts,
put the LockHolder field under VM_OBJECT_DEBUG; this makes objects smaller.
From NeXT:  added a deactivate-behind optimization to vm_page_alloc(),
with a corresponding last_alloc field in objects.  This is enabled
by vm_page_alloc_deactivate_behind, which is FALSE for now.

FS fixes:  I backed out various hacks that were just masking problems
elsewhere.  This includes dlb's hacks to bwrite() and do_bio(), jsb's hack
to binval(), rfr's NBC hacks to nfs_getattr() and sync_vp().  I wrote new,
cleaner, versions of ufs_page_read() and nfs_page_read().  They return
EINVAL when you try to read out past the end of the file; this is
important for NBC.  They also use a new flag, B_USELESS, which works
like B_AGE except it isn't ignored.  This fixes a problem with B_NOCACHE
getting set on B_DELWRI buffers.  I removed calls to unix_master() and
unix_release() from the page_read/page_write functions; they should already
be on the master.  I fixed an NBC truncation bug in itrunc().  I fixed
file truncation in nfs_create() and nfs_setattr(), to make sure buffers
are flushed so do_bio() won't panic.  I fixed the check for IC_FASTLINK
in ufs_readlink().  I fixed ufs_symlink() so it doesn't mark with IACC
when creating a fastlink.  I fixed vmp_push() to actually wait until
the pages have been cleaned.  From NeXT:  I added a new vnode operation,
VOP_NLINKS, which the MFS code uses.  From NeXT:  Various MFS changes,
including fixes to mfs_trunc() and changes to error handling in mfs_io().
From NeXT:  Fixed rfs_setattr() to handle file-extension properly.
From NeXT:  Also changed rfs_server.c so that NFS server operations
use vn_rdwr(), and hence get MFS caching when appropriate.  From NeXT:
Fixed vn_open() to check for sockets in all cases.

Pager fixes:  I renamed some functions so that memory_object_foo
is always really named inode_pager_foo.  I added a separate
memory_object_data_unlock(), which just panics.  I changed
memory_object_lock_completed() so that (when NBC) it wakes up a
thread in vmp_push() waiting for the completion of its cleaning operation.
I fixed inode_pager_setup() to use inode_pager_lookup_external()
instead of inode_pager_lookup().  I reworked is_page_initialize()
to handle pager-files correctly.  From NeXT:  Reduced PAGEMAP_THRESHOLD
to 64.  From NeXT:  Added code to pf_bmap() to grow the page map.

[IBMRT]	  I fixed trap to not terminate the thread after a system-mode
page fault.  The thread might hold locks or other resources.
Instead, if thread_should_halt() is indicated, we pretend that vm_fault()
failed.  This gets us out of the page fault and avoids looping calling
vm_fault(), which will do nothing and yet return KERN_SUCCESS anyway.


Special notes:
------- -----

The other architectures should pick up the RT trap fix.
We should also check that they handle kernel_vm_space appropriately
in system-mode page-faults.

Non-RT architectures need to define a copybzero() function,
like bzero() except protected against faults, before NBC
configurations will compile.

I compiled using standard environments:
	on dist and rigel:	setpath -r -d0
	on leo:			setpath -r -d0 -i99 /usr/misc
Note RTs need /usr/misc/lib on LPATH so cc will use hccom.

STD+MP+16 didn't boot on r2d2.  Bob & I traced this to a compiler
problem with nirecv() in vaxif/if_ni.c.

I have tested the file system functionality with exercising programs
which do random operations on files.  I think NBC users don't have
to worry about file corruption.  However.

Some NBC problems remain.  The text-file busy bug is back.
RFS files aren't recognized as executable.  AFS is slow Slow SLOW
because it bypasses MFS and thrashes in the small buffer cache.
And there are performance/usability problems with the single-threaded
inode_pager.
----------
26-Sep-89 13:48    Mike.Accetta                 Version 5.1(X110)
From: Mike.Accetta@DIST.FAC.CS.CMU.EDU
New features:
--- --------

[PMAX]	Implement Ultrix SIOCRPHYSADDR call (for Mathematica).


Bug fixes:
--- -----

Allow first component of VPATH to be an absolute pathname (e.g. as
generated when OBJECTDIR is set to an absolute local path on the make
command line).

[PMAX]	Support the standard ANY, WS and MF macros in MASTER.mips.


Organizational changes:
-------------- -------

Install fixes from Brad White to use SOURCEDIR instead of VPATH for
shadowing to eliminate SRCSUFFIX and allow make files to use VPATH
themselves.  Also, install Brad's fixes to simplify the specification
of the default configuration (which is always either STD+ANY+EXP for
uni-processor architectures or STD+ANY+EXP+<n> for multi-processor
capable architectures).


Special notes:
------- -----

Version X110 was built for the SUN3, IBMRT, VAX and PMAX (in the
standard place for the first time) but not actually booted anywhere but
the PMAX since these changes were strictly organizational everywhere
else.

Compilation of a PMAX kernel currently requires the alpha-test release
of cs.misc.mach, the beta-test version of /usr/cs/bin/cc and either
manually deleting the MACH_KDB option from the generated configuration
file or manually installing missing symbol table include files along
your CPATH (until the standard include environment catches up to the
kdb sources).
----------
