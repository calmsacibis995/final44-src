.\"
.\" HISTORY
.\" $Log:	fstab.5,v $
.\" Revision 2.2  90/01/25  09:36:07  berman
.\" 	Created to reflect /usr/cs/include version of fstab.h
.\" 	[90/01/24            berman]
.\" 
.TH FSTAB 5 1/24/90
.CM 4
.SH NAME
fstab \- static information about the filesystems
.SH SYNOPSIS
.B #include <fstab.h>
.SH DESCRIPTION
The file
.I /etc/fstab
contains descriptive information about the various file
systems.
.I /etc/fstab
is only
.I read
by programs, and not written;
it is the duty of the system administrator to properly create 
and maintain this file.
The order of records in
.I /etc/fstab
is important because
.I fsck,
.I mount,
and
.I umount
sequentially iterate through
.I /etc/fstab
doing their thing.
.PP
The special file name is the 
.B block
special file name, 
and not the character special file name.
If a program needs the character special file name,
the program must create it by appending a ``r'' after the
last ``/'' in the special file name.
.PP
If
.I fs_type
is ``rw'' or ``ro'' then the file system whose name is given in the
.I fs_file
field is normally mounted read-write or read-only on the
specified special file.  If
.I fs_type
is ``rq'', then the file system is normally mounted read-write
with disk quotas enabled.
The
.I fs_freq
field is used for these file systems by the
.IR dump (8)
command to determine which file systems need to be dumped.
The
.I fs_passno
field is used by the
.IR fsck (8)
program to determine the order in which file system checks are done
at reboot time.
The root file system should be specified with a
.I fs_passno
of 1, and other file systems should have larger numbers.  File systems
within a drive should have distinct numbers, but file systems on different
drives can be checked on the same pass to utilize parallelism available in
the hardware.
.PP
If
.I fs_type
is ``sw'' then the special file is made available as a piece of swap
space by the
.IR swapon (8)
command at the end of the system reboot procedure.
The fields other than
.I fs_spec
and
.I fs_type
are not used in this case.
.PP
If
.I fs_type
is ``rq'' then at boot time the file system is automatically
processed by the
.IR quotacheck (8)
command and disk quotas are then enabled with
.IR quotaon (8).
File system quotas are maintained in a file ``quotas'', which is
located at the root of the associated file system.
.PP
If
.I fs_type
is specified as ``xx'' the entry is ignored.
This is useful to show disk partitions which are currently not used.
.PP
The
.I fs_name
field is used for specifying the file system name such as ``ufs'' or ``nfs''.
.PP
The
.I fs_opts
field is used for a comma separated list of special options 
which are specific to each named file
system.  Under MACH
the option ``paging'' specifies this file system for use in 
paging out kernel memory objects.
.sp 1
.nf
.DT
#define	FSTAB_RW	"rw"	/* read-write device */
#define	FSTAB_RO	"ro"	/* read-only device */
#define	FSTAB_RQ	"rq"	/* read-write with quotas */
#define	FSTAB_SW	"sw"	/* swap device */
#define	FSTAB_XX	"xx"	/* ignore totally */
.PP
.ta \w'#define 'u +\w'char\ \ 'u +\w'fs_passno; 'u
struct fstab {
	char	*fs_spec;	/* block special device name */
	char	*fs_file;	/* file system path prefix */
	char	*fs_type;		/* rw,ro,sw or xx */
	int	fs_freq;		/* dump frequency, in days */
	int	fs_passno;		/* pass number on parallel dump */
	char	*fs_name;	/* file system name, ufs, nfs ... */
	char	*fs_opts;	/* file system options */
};
.fi
.PP
The proper way to read records from
.I /etc/fstab
is to use the routines getfsent(), getfsspec(), getfstype(),
and getfsfile().
.SH FILES
/etc/fstab
.SH "SEE ALSO"
getfsent(3X)
