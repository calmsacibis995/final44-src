#
# Mach Operating System
# Copyright (c) 1989 Carnegie-Mellon University
# All rights reserved.  The CMU software License Agreement specifies
# the terms and conditions for use and redistribution.
#
#
# HISTORY
# $Log:	Makefile.arch,v $
# Revision 2.2  89/07/12  01:16:52  jjc
# 	      Modified for CMU CS make.
# 	[88/11/14            jjc]
# 
#
#
# @(#)Makefile.arch 1.8 88/02/08 SMI
#
# This file is included by ../boot/Makefile.com
# It defines the targets and rules needed to build the machine-dependent
# sources for the boot os library.
# 
# The target library is built in ../$(ARCH) 

#
# LOAD is the text segment start for booted user programs.
# It is also used by srt0.s for the initial stack.
#
LOAD=	4000
#
# BRELOC is the text segment start for final stage (2nd or 3rd stage) boots.
# Note that this must be higher than the kernel's edata and should be
# higher than the kernel's bss so the bss can be cleared.
#
BRELOC=	200000
#
# BBRELOC is the text segment start for boot blocks.
# Note that this must be higher than boot's edata and should be
# higher than boot's bss so the bss can be cleared.
#
BBRELOC= 240000

# Machine-dependent boot os object files
MACHDIR= ../sparc
MACHOBJ= stubs1.o

# Standalone start-off.
#if	CMU
#
#	I don't think that SRTOPT is used anywhere!?
#
#else	CMU
#srt0.o	:=	SRTOPT= -DLOAD=0x$(LOAD)
#srt0xx.o:=	SRTOPT= -DLOAD=0x$(LOAD) -DBOOTBLOCK
#endif	CMU

#assym.s
srt0.o srt0xx.o:  $(MACHDIR)/srt0.s
	${RM} tmp.c tmp.i $@
	cp $(MACHDIR)/srt0.s tmp.c
	cc -E -DBOOTBLOCK ${CFLAGS} ${BOOTOPT} -DLOAD=0x${LOAD} tmp.c > tmp.i
	${AS} tmp.i -o $@
	${RM} tmp.c tmp.i

# srt0.s needs to have some symbols defined from kernel header files
#assym.s: $(MACHDIR)/genassym.c
#	@$(CC) $(CPPOPTS) -o genassym $(MACHDIR)/genassym.c
#	./genassym >$@
#	@$(RM) genassym

# Rules for machine-dependent .s files
#if	CMU
$(MACHOBJ): $(MACHDIR)/$$(@:.o=.s)
	${RM} tmp.c tmp.i $%
	cp $(MACHDIR)/$(@:.o=.s) tmp.c
	/lib/cpp -P -DBOOTBLOCK ${CFLAGS} ${BOOTOPT} -DLOAD=0x${LOAD} tmp.c > tmp.s
	${AS} -P -Q  tmp.s -o $@
	${RM} tmp.c tmp.i
	${AR} rv $(BOOT_LIB) $@
#else	CMU
#$$(BOOT_LIB)(%.o): $(MACHDIR)/%.s
#	${RM} tmp.c tmp.i $%
#	cp $(MACHDIR)/$< tmp.c
#	/lib/cpp -P -DBOOTBLOCK ${CFLAGS} ${BOOTOPT} -DLOAD=0x${LOAD} tmp.c > tmp.s
#	${AS} -P -Q  tmp.s -o $%
#	${RM} tmp.c tmp.i
#	${AR} rv $(BOOT_LIB) $%
#endif	CMU
