/* $XConsortium: archive.pi,v 5.1 91/02/16 10:01:48 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## archive.pi -
## Test simple archive operations 
## test in particular, archival on an empty structure and
## retrieve structure identifiers operation
## 
## archive structures:  	archive a simple structure
## archive structure networks:	archive a structure network
## archive all structures :	archive two structures 
## Verify by comparing the list of structure ids in archive 
## against the expected

source macro.pi
source armacro.pi

macro im_cleanup()
	# cleanup: remove existing archive file and structure in CSS
	pclose_ar_file(1);
	unlink("archfile1");
	pdel_all_structs();
endmacro

tbegintest("archive","simple archive operations");

#INITIALIZE: archive str list and storage for inquired str ids
ia1 = IA_Pint(1,1);
arstrs = I_Pint_list(1,ia1);
buf = malloc(256)
inqids = I_Pint_list(0,buf);

#SETUP: open phigs, remove existing archive file
i_open_phigs(NULL,PDEF_MEM_SIZE);
unlink("archfile1");

#
# TEST 1: Test archive structure
#

# create an empty structure

pempty_struct(1);

# verify str ids in CSS = (1)
im_confirm_CSS_strids(1,1,NULL,NULL,NULL,
	"failed: struct ids in CSS != (1) %s\n","after creating str 1 in CSS");

# create archive file
popen_ar_file(1,"archfile1");

# verify str ids in archive = empty list
im_confirm_archive_strids(1,0,NULL,NULL,NULL,NULL,
	"failed: struct ids in archive != empty %s\n","before archiving str");

# archive structure 1
par_structs(1,&arstrs);

# verify str ids in archive = (1) list
im_confirm_archive_strids(1,1,1,NULL,NULL,NULL,
	"failed: struct ids in archive != (1) %s\n","after archiving str 1");

im_cleanup();


#
# TEST 2: Test archive structure  network
#

# create a hierachical structure

popen_struct(1);
pexec_struct(2);
pclose_struct();

# verify str ids in CSS = (1,2) list
im_confirm_CSS_strids(2,1,2,NULL,NULL,
	"failed: struct ids in CSS != (1,2) %s\n","after creating str 1&2");

# create archive file
popen_ar_file(1,"archfile1");

# verify str ids in archive = empty list
im_confirm_archive_strids(1,0,NULL,NULL,NULL,NULL,
	"failed: struct ids in archive != empty %s\n","before archiving str net");

# archive structure network 1
par_struct_nets(1,&arstrs);

# verify str ids in archive = (1,2) list
im_confirm_archive_strids(1,2,1,2,NULL,NULL,
	"failed: struct ids in archive != (1,2) %s\n","after archiving str net 1");

im_cleanup();


#
# TEST 3: Test archive all structures  
#

# create 2 structures

pempty_struct(1);
pempty_struct(2);

# verify str ids in CSS = (1,2) list
im_confirm_CSS_strids(2,1,2,NULL,NULL,
	"failed: struct ids in CSS != (1,2) %s\n","after creating str 1&2");

# create archive file
popen_ar_file(1,"archfile1");

# verify str ids in archive = empty list
im_confirm_archive_strids(1,0,NULL,NULL,NULL,NULL,
	"failed: struct ids in archive != empty %s\n","before archiving all strs");

# archive all structures
par_all_structs(1);

# verify str ids in archive = (1,2) list
im_confirm_archive_strids(1,2,1,2,NULL,NULL,
	"failed: struct ids in archive != (1,2) %s\n","after archiving all strs");

im_cleanup();

tendtest();
