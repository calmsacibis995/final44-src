/* $XConsortium: delnetar.pi,v 5.1 91/02/16 10:01:54 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## delnetar.pi -
## Test delete structure networks from archive operation 
##
## Verify the structure identifiers in archive, the structure identifiers  
## and contents in CSS after retrieving all remaining structures in archive
##
## Note: a->b means str a executes str b, ae means struct a is empty,
##       a' means this str a has same name as str a, but different contents
##
## setup in archive:  ( a->b => a executes b)
## 	0->1->2  3
## operations: 
##	delete archived str networks 0
## expected results in archive:
##	3

source macro.pi
source armacro.pi

tbegintest("delnetar","delete structure network from archive");

#INITIALIZE: storage for inq str ids
ia1 = IA_Pint(1,0);
delstrs = I_Pint_list(1,ia1);

buf = malloc(256)
inqids = I_Pint_list(0,buf);

#SETUP: open phigs, remove existing archive file
i_open_phigs(NULL,PDEF_MEM_SIZE);
unlink("archfile1");

## flag: 	archive conflict resolution flag
## @N: 		number of remaining structure after the delete operation
## @A-@D:	ids of remaining structures
## st0-st3:	structure state for str0-str3
## ct0-ct3:	element type of the first element of structure 

foreach @N @A @B @C @D
	@st0 @ct0 @st1 @ct1 @st2 @ct2 @st3 @ct3 (

	1; 3; NULL; NULL; NULL;
	PSTRUCT_STATUS_NON_EXISTENT; NULL; 
	PSTRUCT_STATUS_NON_EXISTENT; NULL; 
	PSTRUCT_STATUS_NON_EXISTENT; NULL; 
	PSTRUCT_STATUS_NON_EMPTY; PELEM_LABEL; 
	)


	# SETUP:
	# create archive file
	popen_ar_file(1,"archfile1");
	# set up strs in archive
	im_buildstr0();
	im_buildstr1();
	im_buildstr2();
	im_buildstr3();
	par_all_structs(1);
	pdel_all_structs();

	#OPERATION:
	# delete archived strs 
	pdel_struct_nets_ar(1,&delstrs);

	# VERIFICATION:
	# verify ids in archive 
	im_confirm_archive_strids(1,@N,@A,@B,@C,@D,
		"failed: struct ids in archive != expected %s\n",
		"after deleting archived str 0");

	# retrieve all structures
	pret_all_structs(1);

	# verify ids in CSS 
	im_confirm_CSS_strids(@N,@A,@B,@C,@D,
		"failed: struct ids in CSS != expected %s\n",
		"after retrieving from archive which had str 0 deleted");

	# verify the contents of the retrieved strs
	im_confirm_status_content(0,@st0,@ct0,NULL, 
		"failed: after retrieving from archive which had str 0 deleted");
	im_confirm_status_content(1,@st1,@ct1,NULL, 
		"failed: after retrieving from archive which had str 0 deleted");
	im_confirm_status_content(2,@st2,@ct2,NULL, 
		"failed: after retrieving from archive which had str 0 deleted");
	im_confirm_status_content(3,@st3,@ct3,NULL, 
		"failed: after retrieving from archive which had str 0 deleted");

	# CLEANUP: 	
	# delete all structures in CSS
	pdel_all_structs();

	#close and remove created archive file
	pclose_ar_file(1);
	unlink("archfile1");
end


tendtest();

