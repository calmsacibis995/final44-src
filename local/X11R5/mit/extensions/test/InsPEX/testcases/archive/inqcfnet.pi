/* $XConsortium: inqcfnet.pi,v 5.1 91/02/16 10:01:56 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## inqcfnet.pi -
## Test inquire conflicting structures in network
##
## Note: a->b means str a executes str b, ae means struct a is empty,
##       a' means this str a has same name as str a, but different contents
##
## Test the following cases:
##
##	   in CSS	in archive	src	str	conflicting structures
##
## case 1: 0->1->2 3  	NULL		CSS     0 	NULL
##						1	NULL
##						2	NULL
##						3	NULL
##
## case 2: 0->1->2 3	0->1->2 3	CSS	0	0 1 2
##                                         	1	1 2
##                                         	2	2
##                                         	3	3
##
## case 3: 0->1->2 3	0->1->2 3	archive	0	0 1 2
##                                         	1	1 2
##                                         	2	2
##                                         	3	3
##
## case 4: NULL     	0->1->2 3	archive 0	NULL
##						1	NULL
##						2	NULL
##						3	NULL
##
## case 5: 2' 3' 4	0->1->2 3	archive 0	2
##                                              1	2
##                                              2	2
##                                              3	3
##
## Verify by comparing the list of conflicting structures with the expected
##

source macro.pi
source armacro.pi

/*
 * inquire conflicting structures in network expected,
 * print with specified format string if doesn't match
 *
 * NOTE: this macro requires the initialization of the variable "inqids"
 *       @number determines the number of significant arguments that follows
 *       assuming enough buffer spaces for 10 ids
 */
macro im_conflict_strs_innet_test(@source,@struct,@number,
                @struct1,@struct2,@struct3,@text1,@text2)
        err = i_bogus_error();
        pinq_conf_structs_net(1,@struct,@source,10,0,&err,&inqids,&total);
        im_ifneq(err,0,"ERROR: %d in pinq_conf_structs_net\n",err);
        status = i_compare_Pint_list_to_ints(inqids,@number,@struct1,@struct2,
                        @struct3);
        if (status != 1)
                tfprintf("failed: %s: conflicting structures != %s\n",
			@text1,@text2);
        endif
endmacro


tbegintest("inqcfnet","inquire conflicting structures in network");

#INITIALIZE: storage for inq str ids
buf = malloc(256)
inqids = I_Pint_list(0,buf);

#SETUP: open phigs, remove existing archive file, create archive file
i_open_phigs(NULL,PDEF_MEM_SIZE);
unlink("archfile1");
popen_ar_file(1,"archfile1");

# case 1: some structures in CSS, none in archive, src is CSS

im_buildstr0();
im_buildstr1();
im_buildstr2();
im_buildstr3();

im_conflict_strs_innet_test(PNET_CSS,0,0,NULL,NULL,NULL,"case 1","NULL");
im_conflict_strs_innet_test(PNET_CSS,1,0,NULL,NULL,NULL,"case 1","NULL");
im_conflict_strs_innet_test(PNET_CSS,2,0,NULL,NULL,NULL,"case 1","NULL");
im_conflict_strs_innet_test(PNET_CSS,3,0,NULL,NULL,NULL,"case 1","NULL");

# case 2: same structures in archive and in CSS, src is CSS

par_all_structs(1);

im_conflict_strs_innet_test(PNET_CSS,0, 3, 0,    1,    2,    "case2", "(0,1,2)");
im_conflict_strs_innet_test(PNET_CSS,1, 2, 1,    2,    NULL, "case2", "(1,2)");
im_conflict_strs_innet_test(PNET_CSS,2, 1, 2,    NULL, NULL, "case2", "(2)");
im_conflict_strs_innet_test(PNET_CSS,3, 1, 3,    NULL, NULL, "case2", "(3)");

# case 3: same structures in archive and in CSS, src is archive

im_conflict_strs_innet_test(PNET_ARCHIVE,0,3,0,1,    2,    "case 3", "(0,1,2)");
im_conflict_strs_innet_test(PNET_ARCHIVE,1,2,1,2,    NULL, "case 3", "(1,2)");
im_conflict_strs_innet_test(PNET_ARCHIVE,2,1,2,NULL, NULL, "case 3", "(2)");
im_conflict_strs_innet_test(PNET_ARCHIVE,3,1,3,NULL, NULL, "case 3", "(3)");

# case 4: some structures in archive, none in CSS, src is archive

pdel_all_structs();

im_conflict_strs_innet_test(PNET_ARCHIVE,0, 0, NULL, NULL, NULL, "case 4", "NULL");
im_conflict_strs_innet_test(PNET_ARCHIVE,1, 0, NULL, NULL, NULL, "case 4", "NULL");
im_conflict_strs_innet_test(PNET_ARCHIVE,2, 0, NULL, NULL, NULL, "case 4", "NULL");
im_conflict_strs_innet_test(PNET_ARCHIVE,3, 0, NULL, NULL, NULL, "case 4", "NULL");

# case 5: structures in CSS different from structures in archive, src is archive

im_buildstr2_();
im_buildstr3_();
popen_struct(4);
pclose_struct();

im_conflict_strs_innet_test(PNET_ARCHIVE,0, 1, 2,    NULL, NULL, "case 5", "(2)");
im_conflict_strs_innet_test(PNET_ARCHIVE,1, 1, 2,    NULL, NULL, "case 5", "(2)");
im_conflict_strs_innet_test(PNET_ARCHIVE,2, 1, 2,    NULL, NULL, "case 5", "(2)");
im_conflict_strs_innet_test(PNET_ARCHIVE,3, 1, 3,    NULL, NULL, "case 5", "(3)");


# CLEANUP: remove created archive files
unlink("archfile1");

tendtest();

