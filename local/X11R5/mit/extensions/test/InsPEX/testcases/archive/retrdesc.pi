/* $XConsortium: retrdesc.pi,v 5.1 91/02/16 10:01:59 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## retrdesc.pi -
## Test retrieve paths to descendants with different order and depth
## 	order:  TOP, BOTTOM
##      depth:  0,1,2
##
## set up in archive:
## 	str1: execute str2 & str3
## 	str2: execute str3 
##      str3: a leaf str
##
## Verify by comparing the returned paths with the expected
##

source macro.pi
source armacro.pi

tbegintest("retrdesc","retrieve paths to descendants");

# INTIALIZATION:
# initialize execute reference structures

er11 = I_Pelem_ref(1,1);
er12 = I_Pelem_ref(1,2);
er20 = I_Pelem_ref(2,0);
er21 = I_Pelem_ref(2,1);
er30 = I_Pelem_ref(3,0);

# initialize array of execute reference structures

ers1121 = IA_Pelem_ref(2,er11,er21);
ers1230 = IA_Pelem_ref(2,er12,er30);
ers2130 = IA_Pelem_ref(2,er21,er30);
ers112130 = IA_Pelem_ref(3,er11,er21,er30);

# initialize execute reference list structures

erL11 = I_Pelem_ref_list(1,&er11);
erL12 = I_Pelem_ref_list(1,&er12);
erL21 = I_Pelem_ref_list(1,&er21);
erL30 = I_Pelem_ref_list(1,&er30);
erL1121 = I_Pelem_ref_list(2,ers1121);
erL1230 = I_Pelem_ref_list(2,ers1230);
erL2130 = I_Pelem_ref_list(2,ers2130);
erL112130 = I_Pelem_ref_list(3,ers112130);

# initialize array of execute reference list structures
erLs0 = IA_Pelem_ref_list(2,erL112130,erL1230);
erLs1 = IA_Pelem_ref_list(2,erL11,erL12);
erLs2 = IA_Pelem_ref_list(2,erL1121,erL1230);
erLs3 = IA_Pelem_ref_list(2,erL2130,erL1230);

# initialize execute reference list of list structures
erLLnull = I_Pelem_ref_list_list(0,NULL);
erLL0 = I_Pelem_ref_list_list(2,erLs0);
erLL1 = I_Pelem_ref_list_list(2,erLs1);
erLL2 = I_Pelem_ref_list_list(2,erLs2);
erLL3 = I_Pelem_ref_list_list(2,erLs3);
erLL4 = I_Pelem_ref_list_list(1,&erL2130);
erLL5 = I_Pelem_ref_list_list(1,&erL21);
erLL6 = I_Pelem_ref_list_list(1,&erL30);

# initialize storage for text string
textstring = malloc(128);

# storage for structure paths
pcreate_store(&err,&store);
im_ifneq(err,0,"ERROR: %d in pcreate_store\n",err);

#SETUP:
# open phigs
i_open_phigs(NULL,PDEF_MEM_SIZE);

# remove existing archive files
unlink("archfile1");

# set up structure in archive
popen_struct(1);
	pexec_struct(2);
	pexec_struct(3);
pclose_struct();
popen_struct(2);
	pexec_struct(3);
pclose_struct();
popen_struct(3);
	plabel(3);
pclose_struct();
popen_ar_file(1,"archfile1");
par_all_structs(1);

foreach @po @textstring @str @pd @exp ( 

	PORDER_TOP_FIRST; "TOP_FRIST"; 1; 0; erLL0;
	PORDER_TOP_FIRST; "TOP_FIRST"; 1; 1; erLL1;
	PORDER_TOP_FIRST; "TOP_FIRST"; 1; 2; erLL2;

	PORDER_TOP_FIRST; "TOP_FIRST"; 2; 0; erLL4;
	PORDER_TOP_FIRST; "TOP_FIRST"; 2; 1; erLL5;
	PORDER_TOP_FIRST; "TOP_FIRST"; 2; 2; erLL4;

	PORDER_TOP_FIRST; "TOP_FIRST"; 3; 0; erLLnull;
	PORDER_TOP_FIRST; "TOP_FIRST"; 3; 1; erLLnull;
	PORDER_TOP_FIRST; "TOP_FIRST"; 3; 2; erLLnull;

	PORDER_BOTTOM_FIRST; "BOTTOM_FIRST"; 1; 0; erLL0;
	PORDER_BOTTOM_FIRST; "BOTTOM_FIRST"; 1; 1; erLL6;
	PORDER_BOTTOM_FIRST; "BOTTOM_FIRST"; 1; 2; erLL3;

	PORDER_BOTTOM_FIRST; "BOTTOM_FIRST"; 2; 0; erLL4;
	PORDER_BOTTOM_FIRST; "BOTTOM_FIRST"; 2; 1; erLL6;
	PORDER_BOTTOM_FIRST; "BOTTOM_FIRST"; 2; 2; erLL4;

	PORDER_BOTTOM_FIRST; "BOTTOM_FIRST"; 3; 0; erLLnull;
	PORDER_BOTTOM_FIRST; "BOTTOM_FIRST"; 3; 1; erLLnull;
	PORDER_BOTTOM_FIRST; "BOTTOM_FIRST"; 3; 2; erLLnull;
	) 
        pret_paths_descs(1,@str,@po,@pd,store,&efll,&stat);
	status = i_compare_Pelem_ref_list_list(*efll,@exp);
	if (status != 1)
		tfprintf("failed: (order:%s, depth:%d, str:%d) paths to decendents != expected\n",@textstring,@pd,@str);
	endif
end

# CLEANUP: remove created archive file, delete storage for structure paths
unlink("archfile1");
pdel_store(store);

tendtest();
