/* $XConsortium: retrieve.pi,v 5.1 91/02/16 10:02:00 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## retrieve.pi -
## Test simple retrieve operations 
## 
## retrieve structures:  	retrieve a simple structure
## retrieve structure networks:	retrieve a structure network
## retrieve all structures :	retrieve two structures 
## Verify by comparing the list of structure ids in CSS 
## against the expected

source macro.pi
source armacro.pi

tbegintest("retrieve","simple retrieve operations");

#INITIALIZE: archive str lists and storage for inquired str ids
ia1 = IA_Pint(1,1);
ids1 = I_Pint_list(1,ia1);

ia3 = IA_Pint(1,3);
ids3 = I_Pint_list(1,ia3);

buf = malloc(256)
inqids = I_Pint_list(0,buf);

#SETUP: open phigs, remove existing archive file
i_open_phigs(NULL,PDEF_MEM_SIZE);
unlink("archfile1");

# set up structures in archive

popen_struct(1);
pexec_struct(2);
pclose_struct();

popen_struct(2);
plabel(2);
pclose_struct();

popen_struct(3);
plabel(3);
pclose_struct();

popen_ar_file(1,"archfile1");
par_all_structs(1);

# verify initial ids in archive
im_confirm_archive_strids(1,3,1,2,3,NULL,
	"failed: struct ids in archive != (1,2,3) %s\n","after archiving all strs");

pdel_all_structs();

#
# TEST 1: Test retrieve structure
#

# OPERATION: retrieve structure 3
pret_structs(1,&ids3);

# VERIFICATION: verify that ids in CSS = (3) list
im_confirm_CSS_strids(1,3,NULL,NULL,NULL,
	"failed: (%s) struct ids in CSS != (3) %s\n","after retrieving str 3");

# CLEANUP:
pdel_all_structs();

#
# TEST 2: Test retrieve structure network
#

# OPERATION: retrieve structure network 1
pret_struct_nets(1,&ids1);


# VERIFICATION: verify that ids in CSS = (1,2) list
im_confirm_CSS_strids(2,1,2,NULL,NULL,
	"failed: struct ids in CSS != (1,2) %s\n","after retrieving str net 1");

# CLEANUP:
pdel_all_structs();

#
# TEST 3: Test retrieve all structures  
#

# OPERATION: retrieve all structures
pret_all_structs(1);

# VERIFICATION: verify that ids in CSS = (1,2,3) list
im_confirm_CSS_strids(3,1,2,3,NULL,
	"failed: struct ids in CSS != (1,2,3) %s\n","after retrieving all strs");

tendtest();
