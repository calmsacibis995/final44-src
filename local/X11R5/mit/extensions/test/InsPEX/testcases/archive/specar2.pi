/* $XConsortium: specar2.pi,v 5.1 91/02/16 10:02:03 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## specar2.pi -
## Test special cases archive and retrieve operations 
##
## archive an open structure, verify the structure ids in archive and 
## that the structure remain open in CSS
##
## retrieve, using UPDATE resolution, a structure which is open in CSS, 
## verify that the structure remains open in CSS and verify its contents 
##

source macro.pi
source armacro.pi

/*
 * confirm open structure id: inquire open structure, test against expected,
 * print with specified format string if doesn't match
 */
macro im_confirm_openstructid(@expid,@formatstring)
        pinq_open_struct(&e,&status,&id);
        im_ifneq(e,0,"failed: pinq_open_struct error %d\n",e);
        im_ifneq(id,@expid,@formatstring,id);
endmacro

tbegintest("specar2","special cases archive operation on open structure");

# INITIALIZE: structure list
buf = malloc(256)
inqids = I_Pint_list(0,buf);

# SETUP: open phigs, remove existing archive file
i_open_phigs(NULL,PDEF_MEM_SIZE);
unlink("archfile1");

# create archive file
popen_ar_file(1,"archfile1");

# create an open str 1 in CSS
popen_struct(1);
plabel(1);

# verify str 1 is open at the beginning
im_confirm_openstructid(1,
	"failed: open str is %d expected 1 after opening str1\n");

# archive str
par_all_structs(1);

# verify str 1 is still open
im_confirm_openstructid(1,
"failed: open str is %d expected 1 after archiving str1 which was opened\n");

# verify that ids in archive 
im_confirm_archive_strids(1,1,1,NULL,NULL,NULL,
	"failed: struct ids in archive != (1) %s\n",
	"after archiving str1 which was opened");

# delete original str 1
pclose_struct()
pdel_all_structs();

# create an open str 1 which is different from the one in archive
popen_struct(1);
pset_marker_type(0);

# set conflict resolution flag to UPDATE
pset_conf_res(PRES_UPD,PRES_UPD);

# retrieve str 
pret_all_structs(1);

# verify str 1 is still open
im_confirm_openstructid(1,
"failed: open str is %d expected 1 after retrieving the str with PRES_UPD\n");

# verify the contents of str 1 have been updated
im_confirm_status_content(1,PSTRUCT_STATUS_NON_EMPTY,PELEM_LABEL,NULL, 
	"failed: after retrieving the str with PRES_UPD, ");

tendtest();

