
/* $XConsortium: cull1.pi,v 5.1 91/02/16 10:03:55 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

# cull1.pi
# Test face culling using back facing triangle strip with data:
#	Test with geometric normal derived from:
#		. vertex coordinates
#		. specified facet normal

tbegintest("cull1","face culling");

source macro.pi

macro im_facetest(@flag,@data1,@data2,@on1,@on2,@msg1,@msg2)
	ptri_strip3_data(@flag,PVERT_COORD,PMODEL_RGB,3,@data1,&vdata1);
	ptri_strip3_data(@flag,PVERT_COORD,PMODEL_RGB,3,@data2,&vdata2);
	im_confirm_point3(xdisplay,xwindow,1,0,testpt1,@on1,5,1,@msg1);
	im_confirm_point3(xdisplay,xwindow,1,0,testpt2,@on2,5,1,@msg2);
	i_pause();
	pdel_elem();
	pdel_elem();
endmacro

# triangle strip data initialization 
pts1 = IA_Ppoint3(3, 0.3,0.1,0.0, 0.2,0.2,0.0, 0.1,0.1,0.0);
vdata1 = I_Pfacet_vdata_arr3(PVERT_COORD, pts1);
pts2 = IA_Ppoint3(3, 0.4,0.1,0.0, 0.5,0.2,0.0, 0.6,0.1,0.0);
vdata2 = I_Pfacet_vdata_arr3(PVERT_COORD, pts2);
testpt1 = I_Ppoint3(0.2,0.15,0.0);
testpt2 = I_Ppoint3(0.5,0.15,0.0);
fnorm1 = IA_Pvec3(1, 0.0,0.0,-1.0);
fdata1 = I_Pfacet_data_arr3(PFACET_NORMAL, fnorm1);
fnorm2 = IA_Pvec3(1, 0.0,0.0,1.0);
fdata2 = I_Pfacet_data_arr3(PFACET_NORMAL, fnorm2);


# setup: open phigs, a workstation and a structure, post structure 
# set interior style to SOLID
i_open_phigs(NULL,0);
i_open_x_ws(1,&xdisplay,&xwindow,0,0,200,200);
popen_struct(1);
ppost_struct(1,1,1.0);
pset_int_style(PSTYLE_SOLID);

# Testing face culling with geometric normals derived from vertex coordinates
# face culling NONE - default
im_facetest(PFACET_NONE,NULL,NULL,1,1,
	"default, front face", "default, back face");

# face culling BACKFACE 
pset_face_cull_mode(PCULL_BACKFACE);
im_facetest(PFACET_NONE,NULL,NULL,1,0,
	"CULL_BACKFACE, front face", "CULL_BACKFACE, back face");

# face culling FRONTFACE 
pset_face_cull_mode(PCULL_FRONTFACE);
im_facetest(PFACET_NONE,NULL,NULL,0,1,
	"CULL_FRONTFACE, front face", "CULL_FRONTFACE, back face");

# Testing face culling with geometric normals derived from facet normal, 
# and with BACKFACE
pset_face_cull_mode(PCULL_BACKFACE);
im_facetest(PFACET_NORMAL,&fdata1,&fdata2,0,1,
	"CULL_BACKFACE, back face", "CULL_BACKFACE, front face");

# Testing face culling with geometric normals derived from facet normal, 
# and with CULL NONE
pset_face_cull_mode(PCULL_NONE);
im_facetest(PFACET_NORMAL,&fdata1,&fdata2,1,1,
	"CULL_NONE, back face", "CULL_NONE, front face");


tendtest();
