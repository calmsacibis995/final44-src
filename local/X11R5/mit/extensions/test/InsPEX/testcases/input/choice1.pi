/* $XConsortium: choice1.pi,v 5.1 91/02/16 10:03:16 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## choice1.pi -  
## Test initialize choice, inquire choice state (verify initialized values)
## Sample choice, verify the value is same as the initialized
 
source macro.pi

tbegintest("choice1","initialize choice");

# setup: open phigs and workstation 
i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_ws(1);

# INITIALIZE: echo area/volume
earea = I_Plimit(0.0,300.0, 0.0,300.0);
evol = I_Plimit3(0.0,300.0, 0.0,300.0, 0.0,1.0);

# create storage
pcreate_store(&err,&store);
im_ifneq(err,0,"ERROR: %d in preate_store\n",err);
pcreate_store(&err,&store3);
im_ifneq(err,0,"ERROR: %d in preate_store\n",err);

# retrieve default data
pinq_choice_st(1,1,store,&err,&inqmode,&inqswitch,&inqstatus,&inqchoice,
	&inqpet,&inqevol, &data);
im_ifneq(err,0,"ERROR: %d in pinq_choice_st\n",err);
pinq_choice_st3(1,1,store3,&err,&inqmode,&inqswitch,&inqstatus,&inqchoice,
	&inqpet,&inqevol, &data3);
im_ifneq(err,0,"ERROR: %d in pinq_choice_st3\n",err);

# operation: initialize choice device
pinit_choice( 1, 1, PIN_STATUS_OK, 2, 1, &earea, data);

# verify: inquire choice states and verify against the expected values

pinq_choice_st(1,1,store,&err,&inqmode,&inqswitch,&inqstatus,&inqchoice,
	&inqpet, &inqearea, &inqdata);
im_ifneq(err,0,"ERROR: %d in pinq_choice_st\n",err);

im_ifneq(inqstatus,PIN_STATUS_OK,
	"failed: choice init status %d, expected PIN_STATUS_OK\n", inqstatus);
im_ifneq(inqchoice,2,
	"failed: choice init value %d, expected 2\n", inqchoice);
im_ifneq(inqpet,1,"failed: choice init prompt and echo type %d, expected 1\n",
	inqpet);

status = i_compare_Plimit(inqearea,earea);
im_ifneq(status,1,"failed: choice init echo area != expected\n",NULL);

# test sample choice
pset_choice_mode(1,1,POP_SAMPLE,PSWITCH_ECHO);
psample_choice(1,1,&inqstatus,&inqchoice);
im_ifneq(inqstatus,PIN_STATUS_OK,
  "failed: after init choice, sample choice status %d, expected PIN_STATUS_OK\n", inqstatus);
im_ifneq(inqchoice,2,
  "failed: after init choice, sample choice value %d, expected 2\n", inqchoice);
pset_choice_mode(1,1,POP_REQ,PSWITCH_ECHO);



# operation: initialize choice(3) device
pinit_choice3( 1, 1, PIN_STATUS_OK, 3, 1, &evol, data3);

# verify: inquire choice(3) states and verify against the expected values

pinq_choice_st3(1,1,store3,&err,&inqmode,&inqswitch,&inqstatus,&inqchoice,
	&inqpet,&inqevol, &inqdata3);
im_ifneq(err,0,"ERROR: %d in pinq_choice_st3\n",err);

im_ifneq(inqstatus,PIN_STATUS_OK,
	"failed: choice3 init status %d, expected PIN_STATUS_OK\n", inqstatus);
im_ifneq(inqchoice,3,
	"failed: choice3 init value %d, expected 3\n", inqchoice);
im_ifneq(inqpet,1,"failed: choice3 init prompt and echo type %d, expected 1\n",
	inqpet);

status = i_compare_Plimit3(inqevol,evol);
im_ifneq(status,1,"failed: choice3 init echo volume != expected\n",NULL);

# test sample choice
pset_choice_mode(1,1,POP_SAMPLE,PSWITCH_ECHO);
psample_choice(1,1,&inqstatus,&inqchoice);
im_ifneq(inqstatus,PIN_STATUS_OK,
  "failed: after init choice3, sample choice status %d, expected PIN_STATUS_OK\n", inqstatus);
im_ifneq(inqchoice,3,
  "failed: after init choice3, sample choice value %d, expected 3\n", inqchoice);


tendtest();
