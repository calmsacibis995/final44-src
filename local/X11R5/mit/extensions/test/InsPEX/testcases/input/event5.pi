/* $XConsortium: event5.pi,v 5.1 91/02/16 10:03:15 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## event5.pi -  
## Test inquire more simultaneous events
## verify that simultaneous events are handled properly
 
source macro.pi

tbegintest("event5","simultaneous events");

# initialize: locator positions
pos = I_Ppoint(0.1,0.3);

# setup: open phigs and workstations , set up ws in EVENT mode
i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_ws(1);

pset_loc_mode(1,1,POP_EVENT,PSWITCH_ECHO);

# fake locator events
i_fake_button(1,0,pos,0);
sleep(1);

# remove locator event from input queue 
pawait_event(1.0,&ws,&class,&dev);

# verify NOMORE simultaneously events
pinq_more_simult_events(&err, &events);
im_ifneq(err,0, "ERROR %d in pinq_more_simult_events\n",err);
im_ifneq(events,PSIMULT_NO_MORE, "failed: simultaneous events = %d, expected PSIMULT_NO_MORE\n",events);

# set pick mode to EVENT
pset_pick_mode(1,1,POP_EVENT,PSWITCH_ECHO);

# fake locator and pick events simultaneously
i_fake_button(1,0,pos,0);
sleep(1);

# remove simultaneous event from input queue 
pawait_event(1.0,&ws,&class,&dev);

# verify MORE simultaneously events
pinq_more_simult_events(&err, &events);
im_ifneq(err,0, "ERROR %d in pinq_more_simult_events\n",err);
im_ifneq(events,PSIMULT_MORE, 
  "failed: simultaneous events = %d, expected PSIMULT_MORE\n",events);

# remove event from input queue 
pawait_event(1.0,&ws,&class,&dev);

# verify NOMORE simultaneously events
pinq_more_simult_events(&err, &events);
im_ifneq(err,0, "ERROR %d in pinq_more_simult_events\n",err);
im_ifneq(events,PSIMULT_NO_MORE, 
  "failed: simultaneous events = %d, expected PSIMULT_NO_MORE\n",events);

tendtest();
