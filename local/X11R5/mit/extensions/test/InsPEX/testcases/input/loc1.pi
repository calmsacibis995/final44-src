/* $XConsortium: loc1.pi,v 5.1 91/02/16 10:03:08 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## loc1.pi -  
## Test initialize locator, inquire locator state (verify initialized values)
## Sample locator, verify the values is same as intialized
 
source macro.pi

tbegintest("loc1","initialize locator");

# setup: open phigs and workstation 
i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_ws(1);

# INITIALIZE: initial postions and echo area/volume
initpos = I_Ppoint(0.5,0.3);
initpos3 = I_Ppoint3(0.2,0.4,0.1);
earea = I_Plimit(0.0,300.0, 0.0,300.0);
evol = I_Plimit3(0.0,300.0, 0.0,300.0, 0.0,1.0);

# create store
pcreate_store(&err,&store);
im_ifneq(err,0,"ERROR: %d in preate_store\n",err);
pcreate_store(&err,&store3);
im_ifneq(err,0,"ERROR: %d in preate_store\n",err);

# retrieve default data
pinq_loc_st(1,1,PINQ_SET,store,&err,&inqmode,&inqswitch,&inqview,&inqpos,
	&inqpet,&inqearea,&data);
im_ifneq(err,0,"ERROR: %d in pinq_loc_st3\n",err);
pinq_loc_st3(1,1,PINQ_SET,store3,&err,&inqmode,&inqswitch,&inqview,&inqpos3,
	&inqpet,&inqevol,&data3);
im_ifneq(err,0,"ERROR: %d in pinq_loc_st3\n",err);

# operation: initialize locator device
pinit_loc( 1, 1, 1, &initpos, 1, &earea, data);

# verify: inquire locator states and verify against the expected values

pinq_loc_st(1,1,PINQ_SET,store,&err,&inqmode,&inqswitch,&inqview,&inqpos,
	&inqpet,&inqearea,&inqdata);
im_ifneq(err,0,"ERROR: %d in pinq_loc_st\n",err);

im_ifneq(inqview,1,"failed: locator init view idx %d, expected 1\n",inqview);

im_ifneq(inqpet,1,"failed: locator init prompt and echo type %d, expected 1\n",
	inqpet);

status = i_compare_Plimit(inqearea,earea);
im_ifneq(status,1,"failed: locator init echo area != expected\n",NULL);

status = i_compare_Ppoint(inqpos,initpos);
im_ifneq(status,1,"failed: locator init position != expected\n",NULL);

# test sample locator
pset_loc_mode(1,1,POP_SAMPLE,PSWITCH_ECHO);
psample_loc(1,1,&inqview,&inqpos);
im_ifneq(inqview,1,
  "failed: after init loc, sample locator view idx %d, expected 1\n", inqview);
status = i_compare_Ppoint(inqpos,initpos);
im_ifneq(status,1,"failed: after init loc, sample locator position != expected\n",NULL);
pset_loc_mode(1,1,POP_REQ,PSWITCH_ECHO);


# operation: initialize locator(3) device
pinit_loc3( 1, 1, 1, &initpos3, 1, &evol, data3);

# verify: inquire locator(3) states and verify against the expected values
pinq_loc_st3(1,1,PINQ_SET,store3,&err,&inqmode,&inqswitch,&inqview,&inqpos3,
	&inqpet,&inqevol,&inqdata);
im_ifneq(err,0,"ERROR: %d in pinq_loc_st3\n",err);

im_ifneq(inqview,1,"failed: locator3 init view idx %d, expected 1\n",inqview);
im_ifneq(inqpet,1,"failed: locator3 init prompt and echo type %d, expected 1\n",
	inqpet);
status = i_compare_Plimit3(inqevol,evol);
im_ifneq(status,1,"failed: locator3 init echo volume != expected\n",NULL);
status = i_compare_Ppoint3(inqpos3,initpos3);
im_ifneq(status,1,"failed: locator3 init position != expected\n",NULL);

# test sample locator3
pset_loc_mode(1,1,POP_SAMPLE,PSWITCH_ECHO);
psample_loc3(1,1,&inqview,&inqpos3);
im_ifneq(inqview,1,
  "failed: after init loc3, sample locator view idx %d, expected 1\n", inqview);
status = i_compare_Ppoint3(inqpos3,initpos3);
im_ifneq(status,1,"failed: after init loc3, sample locator position != expected\n",NULL);
pset_loc_mode(1,1,POP_REQ,PSWITCH_ECHO);

pclose_ws(1);

tendtest();
