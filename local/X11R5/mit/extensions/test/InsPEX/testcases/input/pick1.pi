/* $XConsortium: pick1.pi,v 5.2 92/02/24 16:02:29 mor Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## pick1.pi -  
## Test initialize pick, inquire pick state (verify initialized values)
## Sample pick, verify the pick path and status is as initialized
 
source macro.pi

tbegintest("pick1","initialize pick");

# setup: open phigs and workstation 
i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_ws(1);

# INITIALIZE: initial pick paths and echo area/volume
pelem1 = I_Ppick_path_elem(1,2,3);
path1 = I_Ppick_path(1,&pelem1);
pelem2 = I_Ppick_path_elem(1,1,1);
path2 = I_Ppick_path(1,&pelem2);
pelem3 = I_Ppick_path_elem(0,0,0);
inqpath = I_Ppick_path(1,&pelem3);
earea = I_Plimit(0.0,300.0, 0.0,300.0);
evol = I_Plimit3(0.0,300.0, 0.0,300.0, 0.0,1.0);

# create store
pcreate_store(&err,&store3);
im_ifneq(err,0,"ERROR: %d in preate_store\n",err);
pcreate_store(&err,&store);
im_ifneq(err,0,"ERROR: %d in preate_store\n",err);

# retrieve default data
pinq_pick_st(1,1,PINQ_SET,store,&err,&inqmode,&inqswitch,&filter,&inqstatus,
	&pinqpath, &inqpet, &inqearea, &data, &inqorder);
im_ifneq(err,0,"ERROR: %d in pinq_pick_st\n",err);
pinq_pick_st3(1,1,PINQ_SET,store3,&err,&inqmode,&inqswitch,&filter,&inqstatus,
	&pinqpath, &inqpet, &inqevol, &data3, &inqorder3);
im_ifneq(err,0,"ERROR: %d in pinq_pick_st3\n",err);

# operation: initialize pick device
pinit_pick( 1, 1, PIN_STATUS_OK, &path1, 1, &earea, &data, PORDER_BOTTOM_FIRST);

# verify: inquire pick states and verify against the expected values

pinq_pick_st(1,1,PINQ_SET,store,&err,&inqmode,&inqswitch,&filter,&inqstatus,
	&pinqpath, &inqpet, &inqearea, &inqdata, &inqorder);
im_ifneq(err,0,"ERROR: %d in pinq_pick_st\n",err);

im_ifneq(inqstatus,PIN_STATUS_OK,
	"failed: pick init status %d, expected PIN_STATUS_OK\n", inqstatus);
im_ifneq(inqorder,PORDER_BOTTOM_FIRST,
	"failed: pick init path order %d, expected PORDER_BOTTOM_FIRST\n", inqorder);
im_ifneq(inqpet,1,"failed: pick init prompt and echo type %d, expected 1\n",
	inqpet);

status = i_compare_Plimit(inqearea,earea);
im_ifneq(status,1,"failed: pick init echo area != expected\n",NULL);

status = i_compare_Ppick_path(*pinqpath,path1);
im_ifneq(status,1,"failed: pick init path != expected\n",NULL);

# test sample pick
pset_pick_mode(1,1,POP_SAMPLE,PSWITCH_ECHO);
psample_pick(1,1,1,&inqstatus,&inqpath);
status = i_compare_Ppick_path(inqpath,path1);
im_ifneq(status,1,"failed: after init pick, pick path != expected\n",NULL);
im_ifneq(inqstatus,PIN_STATUS_OK,
  "failed: after init pick, pick status %d, expected PIN_STATUS_OK\n", inqstatus);
pset_pick_mode(1,1,POP_REQ,PSWITCH_ECHO);


# operation: initialize pick(3) device
pinit_pick3( 1, 1, PIN_STATUS_OK, &path2, 1, &evol, &data3, PORDER_BOTTOM_FIRST);

# verify: inquire pick(3) states and verify against the expected values

pinq_pick_st3(1,1,PINQ_SET,store3,&err,&inqmode,&inqswitch,&filter,&inqstatus,
	&pinqpath, &inqpet,&inqevol, &inqdata3, &inqorder);
im_ifneq(err,0,"ERROR: %d in pinq_pick_st3\n",err);

im_ifneq(inqstatus,PIN_STATUS_OK,
	"failed: pick3 init status %d, expected PIN_STATUS_OK\n", inqstatus);
im_ifneq(inqorder,PORDER_BOTTOM_FIRST,
	"failed: pick3 init path order %d, expected PORDER_BOTTOM_FIRST\n", inqorder);
im_ifneq(inqpet,1,"failed: pick3 init prompt and echo type %d, expected 1\n",
	inqpet);

status = i_compare_Plimit3(inqevol,evol);
im_ifneq(status,1,"failed: pick3 init echo volume != expected\n",NULL);

status = i_compare_Ppick_path(*pinqpath,path2);
im_ifneq(status,1,"failed: pick3 init path != expected\n",NULL);


# test sample pick
pset_pick_mode(1,1,POP_SAMPLE,PSWITCH_ECHO);
psample_pick(1,1,1,&inqstatus,&inqpath);
status = i_compare_Ppick_path(inqpath,path2);
im_ifneq(status,1,"failed: after init pick3, pick path != expected\n",NULL);
im_ifneq(inqstatus,PIN_STATUS_OK,
  "failed: after init pick3, pick status %d, expected PIN_STATUS_OK\n", inqstatus);
pset_pick_mode(1,1,POP_REQ,PSWITCH_ECHO);

pclose_ws(1);

tendtest();
