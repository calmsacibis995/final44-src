/* $XConsortium: stroke1.pi,v 5.2 91/07/18 15:06:29 hersh Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## stroke1.pi -  
## Test initialize stroke, inquire stroke state (verify initialized values)
## Sample stroke, verify the values is same as initialized
 
source macro.pi

tbegintest("stroke1","initialize and sample stroke");

# setup: open phigs and workstation 
i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_ws(1);

# INITIALIZE: initial stroke positions inquire stoke storage 
# and echo area/volume
pts = IA_Ppoint(2, 0.1,0.2, 0.5,0.5);
pts3 = IA_Ppoint3(2, 0.2,0.4,0.0, 0.1,0.1,0.0);
ptlst = I_Ppoint_list(2, pts);
ptlst3 = I_Ppoint_list3(2, pts3);

ipts = IA_Ppoint(2, 0.0,0.0, 0.0,0.0);
ipts3 = IA_Ppoint3(2, 0.0,0.0,0.0, 0.0,0.0,0.0);
inqstroke = I_Ppoint_list(2, ipts);
inqstrokep = IA_Ppoint_list(1, inqstroke);
inqstroke3 = I_Ppoint_list3(2, ipts3);
inqstroke3p = IA_Ppoint_list3(1, inqstroke3);

earea = I_Plimit(0.0,300.0, 0.0,300.0);
evol = I_Plimit3(0.0,300.0, 0.0,300.0, 0.0,1.0);

# create store
pcreate_store(&err,&store);
im_ifneq(err,0,"ERROR: %d in preate_store\n",err);
pcreate_store(&err,&store3);
im_ifneq(err,0,"ERROR: %d in preate_store\n",err);

# retrieve default data
pinq_stroke_st(1,1,PINQ_SET,store,&err,&inqmode,&inqswitch,&inqview,&inqstrokep,
	&inqpet,&inqearea,&data);
im_ifneq(err,0,"ERROR: %d in pinq_stroke_st\n",err);
pinq_stroke_st3(1,1,PINQ_SET,store3,&err,&inqmode,&inqswitch,&inqview,
	&inqstroke3p,&inqpet,&inqevol,&data3);
im_ifneq(err,0,"ERROR: %d in pinq_stroke_st3\n",err);

# operation: initialize stroke device
pinit_stroke( 1, 1, 1, &ptlst, 1, &earea, data);

# verify: inquire stroke states and verify against the expected values

pinq_stroke_st(1,1,PINQ_SET,store,&err,&inqmode,&inqswitch,&inqview,&inqstrokep,
	&inqpet,&inqearea,&inqdata);
im_ifneq(err,0,"ERROR: %d in pinq_stroke_st\n",err);

im_ifneq(inqview,1,"failed: stroke init view idx %d, expected 1\n",inqview);

im_ifneq(inqpet,1,
  "failed: stroke init prompt and echo type %d, expected 1\n",inqpet);

status = i_compare_Plimit(inqearea,earea);
im_ifneq(status,1,"failed: stroke init echo area != expected\n",NULL);

status = i_compare_Ppoint_list(*inqstrokep,ptlst);
im_ifneq(status,1,"failed: stroke init positions != expected\n",NULL);

# test sample stroke
pset_stroke_mode(1,1,POP_SAMPLE,PSWITCH_ECHO);
psample_stroke(1,1,&inqview,&inqstroke);
im_ifneq(inqview,1,
  "failed: after init stroke, sample stroke view idx %d, expected 1\n",inqview);
status = i_compare_Ppoint_list(inqstroke,ptlst);
im_ifneq(status,1,
  "failed: after init stroke, sample stroke positions != expected\n",NULL);
pset_stroke_mode(1,1,POP_REQ,PSWITCH_ECHO);


# operation: initialize stroke(3) device
pinit_stroke3( 1, 1, 0, &ptlst3, 1, &evol, data3);

# verify: inquire stroke(3) states and verify against the expected values
pinq_stroke_st3(1,1,PINQ_SET,store3,&err,&inqmode,&inqswitch,&inqview,
	&inqstroke3p,&inqpet,&inqevol,&inqdata);
im_ifneq(err,0,"ERROR: %d in pinq_stroke_st3\n",err);

im_ifneq(inqview,0,"failed: stroke3 init view idx %d, expected 0\n",inqview);
im_ifneq(inqpet,1,"failed: stroke3 init prompt and echo type %d, expected 1\n",
	inqpet);
status = i_compare_Plimit3(inqevol,evol);
im_ifneq(status,1,"failed: stroke3 init echo volume != expected\n",NULL);

status = i_compare_Ppoint_list3(*inqstroke3p,ptlst3);
im_ifneq(status,1,"failed: stroke3 init positions != expected\n",NULL);

# test sample stroke3
pset_stroke_mode(1,1,POP_SAMPLE,PSWITCH_ECHO);
psample_stroke3(1,1,&inqview,&inqstroke3);
im_ifneq(inqview,0,
  "failed: after init stroke3, sample stroke view idx %d, expected 0\n",inqview);
status = i_compare_Ppoint_list3(inqstroke3,ptlst3);
im_ifneq(status,1,
  "failed: after init stroke3, sample stroke positions != expected\n",NULL);
pset_stroke_mode(1,1,POP_REQ,PSWITCH_ECHO);

pclose_ws(1);

tendtest();
