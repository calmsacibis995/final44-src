/* $XConsortium: val1.pi,v 5.1 91/02/16 10:03:18 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## val1.pi -  
## Test initialize valuator, inquire valuator state (verify initialized values)
## Sample valuator, verify the value is same as initialized
 
source macro.pi

tbegintest("val1","initialize valuator");

# setup: open phigs and workstation 
i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_ws(1);

# INITIALIZE: echo area/volume
earea = I_Plimit(0.0,300.0, 0.0,300.0);
evol = I_Plimit3(0.0,300.0, 0.0,300.0, 0.0,1.0);

# create storage
pcreate_store(&err,&store);
im_ifneq(err,0,"ERROR: %d in preate_store\n",err);
pcreate_store(&err,&store3);
im_ifneq(err,0,"ERROR: %d in preate_store\n",err);

# retrieve default data
pinq_val_st(1,1,store,&err,&inqmode,&inqswitch,&inqval,
	&inqpet,&inqearea, &data);
im_ifneq(err,0,"ERROR: %d in pinq_val_st\n",err);
pinq_val_st3(1,1,store3,&err,&inqmode,&inqswitch,&inqval,
	&inqpet,&inqevol, &data3);
im_ifneq(err,0,"ERROR: %d in pinq_val_st3\n",err);

# operation: initialize val device
pinit_val( 1, 1, 0.2,  1, &earea, data);

# verify: inquire val states and verify against the expected values

pinq_val_st(1,1,store,&err,&inqmode,&inqswitch,&inqval,
	&inqpet, &inqearea, &inqdata);
im_ifneq(err,0,"ERROR: %d in pinq_val_st\n",err);

im_ifneq(inqpet,1,"failed: valuator init prompt and echo type %d, expected 1\n",
	inqpet);

status = i_compare_Plimit(inqearea,earea);
im_ifneq(status,1,"failed: valuator init echo area != expected\n",NULL);

status = fequal(inqval,0.2);
tmp = ftod(inqval);
im_ifneq(status,1,"failed: valuator init value %.4f != expected 0.2\n",tmp);

# test sample valuator
pset_val_mode(1,1,POP_SAMPLE,PSWITCH_ECHO);
psample_val(1,1,&inqval);
status = fequal(inqval,0.2);
tmp = ftod(inqval);
im_ifneq(status,1,
  "failed: after init val3, valuator value %.4f != expected 0.2\n",tmp);
pset_val_mode(1,1,POP_REQ,PSWITCH_ECHO);


# operation: initialize val(3) device
pinit_val3( 1, 1, 0.8, 1, &evol, data3);

# verify: inquire val(3) states and verify against the expected values

pinq_val_st3(1,1,store3,&err,&inqmode,&inqswitch,&inqval,
	&inqpet,&inqevol, &inqdata3);
im_ifneq(err,0,"ERROR: %d in pinq_val_st3\n",err);

im_ifneq(inqpet,1,"failed: valuator3 init prompt and echo type %d, expected 1\n",
	inqpet);

status = fequal(inqval,0.8);
tmp = ftod(inqval);
im_ifneq(status,1,"failed: valuator3 init value %.4f != expected 0.8\n",tmp);

status = i_compare_Plimit3(inqevol,evol);
im_ifneq(status,1,"failed: valuator3 init echo volume != expected\n",NULL);

# test sample valuator
pset_val_mode(1,1,POP_SAMPLE,PSWITCH_ECHO);
psample_val(1,1,&inqval);
status = fequal(inqval,0.8);
tmp = ftod(inqval);
im_ifneq(status,1,
  "failed: after init val3, valuator value %.4f != expected 0.8\n",tmp);
pset_val_mode(1,1,POP_REQ,PSWITCH_ECHO);

pclose_ws(1);

tendtest();
