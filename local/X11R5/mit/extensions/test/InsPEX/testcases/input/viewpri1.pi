/* $XConsortium: viewpri1.pi,v 5.1 91/02/16 10:03:20 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## viewpri1.pi -  
## Test setting of view tranform input priority, 
## inquire list of view indices and verify the order of the view indices
 
source macro.pi

tbegintest("viewpri1","setting view transform input priority");

# setup: open phigs and workstation 
i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_ws(1);

# INITIALIZE: data storage and expected results
buf = IA_Pint(2,NULL,NULL);
inqidx = I_Pint_list(2,buf);
ints1 = IA_Pint(2,1,0);
ints2 = IA_Pint(2,0,1);
idx1 = I_Pint_list(2,ints1);
idx2 = I_Pint_list(2,ints2);

# get default view representation and set it with view index 1
pinq_view_rep(1,0,&err,&upd,&currep,&reqrep);
im_abort_if_error(err,"pinq_view_rep");
pset_view_rep3(1,1,&currep);

# operation: set view 0 lower than view 1
pset_view_tran_in_pri( 1, 0, 1, PPRI_LOWER);

# verify: that idx 0 is lower than 1
pinq_list_view_inds(1,2,0,&err,&inqidx,&total);
im_abort_if_error(err,"pinq_list_view_inds");
status = i_compare_ordered_Pint_list(inqidx,idx1);
im_ifneq(status,1,"failed: (view0<view1)list of prioritized view index not as expected\n",NULL);

# operation: set view 0 higher than view 1
pset_view_tran_in_pri( 1, 0, 1, PPRI_HIGHER);

# verify: that idx 0 is higher than 1
pinq_list_view_inds(1,2,0,&err,&inqidx,&total);
im_abort_if_error(err,"pinq_list_view_inds");
status = i_compare_ordered_Pint_list(inqidx,idx2);
im_ifneq(status,1,"failed: (view0>view1)list of prioritized view index not as expected\n",NULL);

# operation: set view 1 higher than view 1 => NOOP
pset_view_tran_in_pri( 1, 1, 1, PPRI_HIGHER);

# verify: that idx 0 is higher than 1
pinq_list_view_inds(1,2,0,&err,&inqidx,&total);
im_abort_if_error(err,"pinq_list_view_inds");
status = i_compare_ordered_Pint_list(inqidx,idx2);
im_ifneq(status,1,"failed: (view0>view1)list of prioritized view index not as expected\n",NULL);

tendtest();
