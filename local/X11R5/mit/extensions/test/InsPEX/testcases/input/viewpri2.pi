/* $XConsortium: viewpri2.pi,v 5.1 91/02/16 10:03:21 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## viewpri2.pi -  
## Test view tranform input priority with locator input
## set view 1 to be of the highest priority, perform SAMPLE locator,
## verify that the resulting locator position has been transfromed
## using view 1.
 
source macro.pi

tbegintest("viewpri2","view transform input priority with locator");

# setup: open phigs and workstation 
i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_ws(1);

# INITIALIZE: view rep for view 1 and input position
i_identity(mapmtx);
cliplimit = I_Plimit(0.0,1.0, 0.0,1.0);
vrp = I_Ppoint(0.25,0.25);
vup = I_Ppoint(0.0,1.0);
pos = I_Ppoint3(0.5,0.5,0.0);

# setting view 1
peval_view_ori_matrix(&vrp,&vup,&e,orientmtx);
im_ifneq(e,0,"ERROR: %d in peval_view_ori_matrix\n",err);
viewrep = I_Pview_rep(orientmtx,mapmtx,cliplimit,PIND_CLIP);
pset_view_rep(1,1,&viewrep);

# operation: set view 0 lower than view 1
pset_view_tran_in_pri( 1, 0, 1, PPRI_LOWER);

# fake input using view index 1
i_fake_button(1,1,pos,2);
preq_loc3(1,1,&instatus,&view,&inqpos);
im_ifneq(instatus,PIN_STATUS_OK,"request locator status=%d, expected PIN_STATUS_OK\n", instatus);
im_ifneq(view,1,"(view1 > view0)view index %d expected 1\n",view);
status = i_compare_Ppoint3(inqpos,pos);
im_ifneq(status,1,"(view1 > view0)locator position != expected\n",NULL);


# verify: that idx 0 is higher than 1
pset_view_tran_in_pri( 1, 0, 1, PPRI_HIGHER);

# fake input using view index 0
i_fake_button(1,0,pos,2);
preq_loc3(1,1,&instatus,&view,&inqpos);
im_ifneq(instatus,PIN_STATUS_OK,"request locator status=%d, expected PIN_STATUS_OK\n", instatus);

im_ifneq(view,0,"(view0 > view1)view index %d expected 0\n",view);
status = i_compare_Ppoint3(inqpos,pos);
im_ifneq(status,1,"(view0 > view1)locator position != expected\n",NULL);

tendtest();
