
/* $XConsortium: iss6.pi,v 5.2 91/07/24 18:47:04 hersh Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

## iss6.pi -
## Test incremental spatial search with different primitives


source macro.pi
source shmacro.pi

macro im_iss_test(@msg)
	# with search distance = 0.0 => search should fail
	pincr_spa_search3(&refpt,0.0,&startpath,PIND_NO_CLIP,1,&normfilter,
		&invfilter,128,0,&err,&foundpath,&total_len);
	im_ifneq(err,0,"ERROR: %d in pincr_spa_search\n",err);
	status = i_compare_Pelem_ref_list(foundpath,nullpath);
	im_ifneq(status,1,"%s, search dist=0.0, found path != expected\n",@msg);

	# with search distance = 1.0 => search should succeed
	pincr_spa_search3(&refpt,1.0,&startpath,PIND_NO_CLIP,1,&normfilter,
		&invfilter,128,0,&err,&foundpath,&total_len);
	im_ifneq(err,0,"ERROR: %d in pincr_spa_search\n",err);
	status = i_compare_Pelem_ref_list(foundpath,exppath);
	im_ifneq(status,1,"%s, search dist=1.0, found path != expected\n",@msg);
	pdel_elem();
endmacro

tbegintest("iss6","incremental spatial search with different primitives");

# INITIALIZE: start,found and expected paths
er00 = I_Pelem_ref(0,0);
er01 = I_Pelem_ref(0,3);
startpath = I_Pelem_ref_list(1,&er00);
exppath = I_Pelem_ref_list(1,&er01);
nullpath = I_Pelem_ref_list(0,NULL);
buf = malloc(128);
foundpath = I_Pelem_ref_list(0,buf);

# initialize the reference point to be a point near but outside of
# primitive
refpt = I_Ppoint3(0.3,0.5,0.0);

# initialize normal and inverted filter to NULL
normfilter = I_Pfilter_list(0,NULL);
invfilter = I_Pfilter_list(0,NULL);


# setup: open phigs, open workstation, open structure

i_open_phigs(NULL,0)
i_open_x_ws(1,&xdisplay,&xwindow,0,0,200,200);
popen_struct(0)
ppost_struct(1,0,1.0)
pset_anno_char_ht(0.03);
pset_char_ht(0.03);

# draw different primitives 

# 1. annotation text
atxpos = I_Ppoint3(0.4,0.5,0.0);
atxoffset = I_Ppoint3( 0.0,0.0,0.0);
panno_text_rel3(&atxpos,&atxoffset,"annotation text");
im_iss_test("annotation text");

# 2. nurb curve
cfloatarr = IA_Pfloat(7, 0.0,0.0,0.0,0.1,0.2,0.2,0.2);
ncknots = I_Pfloat_list(7, cfloatarr);
ncpts = IA_Ppoint3(4, 0.4,0.5,0.0, 0.45,0.6,1.0, 0.55,0.6,1.0, 0.6,0.5,0.0);
ncctlpts = I_Ppoint_list34(4,"3D",ncpts);
pnuni_bsp_curv(3,&ncknots,PNON_RATIONAL,&ncctlpts,0.0,0.2);
im_iss_test("nurb curve");

# 3. polyline
plpts = IA_Ppoint3(2, 0.4,0.5,0.0, 0.6,0.5,1.0);
pl = I_Ppoint_list3(2,plpts);
ppolyline3(&pl);
im_iss_test("polyline");

# 4. polymarker
pmpts = IA_Ppoint3(2, 0.4,0.5,0.0, 0.6,0.5,0.0);
pm = I_Ppoint_list3(2,pmpts);
ppolymarker3(&pm);
im_iss_test("polymarker");

# 5. polyline set with data
psptarr = IA_Ppoint3(2,0.4,0.5,0.0, 0.6,0.5,0.0);
lva = I_Pline_vdata_arr3(PVERT_COORD,psptarr);
lv = I_Pline_vdata_list3(2,lva);
psvdata = IA_Pline_vdata_list3(1,lv);

ppolyline_set3_data(PVERT_COORD,PMODEL_RGB,1,psvdata);
im_iss_test("polyline set with data");

# 6 text
txpos = I_Ppoint3( 0.4,0.5,0.0);
txdir = IA_Pvec3(2, 1.0,0.0,0.0, 0.0,1.0,0.0);
ptext3(&txpos,txdir,"regular text");
im_iss_test("text");

# 7. fill area
fapts = IA_Ppoint3(3, 0.4,0.5,0.0, 0.5,0.6,0.0, 0.6,0.5,0.0);
fa = I_Ppoint_list3(3,fapts);
pfill_area3(&fa);
im_iss_test("fill area");

# 8. fill area set
faspts = IA_Ppoint3(3, 0.4,0.5,0.0, 0.5,0.6,0.0, 0.6,0.5,0.0);
fas = I_Ppoint_list3(3,faspts);
fas_l = I_Ppoint_list_list3(1,&fas);
pfill_area_set3(&fas_l);
im_iss_test("fill area set");

# 9. fill area set with data
fwptarr = IA_Ppoint3(3, 0.4,0.5,0.0, 0.5,0.6,0.0, 0.6,0.5,0.0);
fwvarr = I_Pfacet_vdata_arr3(PVERT_COORD,fwptarr);
fwvlst = I_Pfacet_vdata_list3(3,fwvarr);
fwvdata = IA_Pfacet_vdata_list3(1,fwvlst);
fwedataarr = I_Pedge_data_arr(3,PEDGE_ON,PEDGE_ON,PEDGE_ON)
fwedata = I_Pedge_data_list(3,fwedataarr)
pfill_area_set3_data(PFACET_NONE,PEDGE_VISIBILITY,PVERT_COORD,PMODEL_RGB,NULL,1,&fwedata,fwvdata);
im_iss_test("fill area set with data");

# 10. quad mesh with data
qmdim = I_Pint_size(2,2);
qmptarr = IA_Ppoint3(4,0.5,0.6,0.0, 0.5,0.6,0.0, 0.4,0.5,0.0, 0.6,0.5,0.0);
qmvdata = I_Pfacet_vdata_arr3(PVERT_COORD, qmptarr);

pquad_mesh3_data(PFACET_NONE,PVERT_COORD,PMODEL_RGB,&qmdim,NULL,&qmvdata);
im_iss_test("quad mesh with data");

# 11. triangle strip with data
tsptarr = IA_Ppoint3(3,0.4,0.5,0.0, 0.5,0.6,0.0, 0.6,0.5,0.0);
tsvdata = I_Pfacet_vdata_arr3(PVERT_COORD, tsptarr);
 
ptri_strip3_data(PFACET_NONE,PVERT_COORD,PMODEL_RGB,3,NULL,&tsvdata); 
im_iss_test("triangle strip with data");
 
# 12. set of fill area set with data
ia = IA_Pint(3,0,1,2);
il = I_Pint_list(3,ia);
ill = I_Pint_list_list(1,&il);
sofavlist = IA_Pint_list_list(1,ill);

sofaedataarr = I_Pedge_data_arr(3,PEDGE_ON,PEDGE_ON,PEDGE_ON)
sofaelst = I_Pedge_data_list(3,sofaedataarr)
sofaelstlst = I_Pedge_data_list_list(1,&sofaelst)
sofaedata = IA_Pedge_data_list_list(1,sofaelstlst)

sofaptarr = IA_Ppoint3(3, 0.4,0.5,0.0, 0.5,0.6,0.0, 0.6,0.5,0.0);
sofavarr = I_Pfacet_vdata_arr3(PVERT_COORD, sofaptarr);
sofavdata = I_Pfacet_vdata_list3(3,sofavarr);

pset_of_fill_area_set3_data(PFACET_NONE,PEDGE_VISIBILITY,PVERT_COORD,PMODEL_RGB,1,NULL,sofaedata,sofavlist,&sofavdata);
im_iss_test("set of fill area set with data");

# 13. nurb surface
nsfloatarr = IA_Pfloat(6, 0.0,0.0,0.0,0.1,0.1,0.1);
nsknots = I_Pfloat_list(6, nsfloatarr);
nspts = IA_Ppoint3(9, 0.4,0.3,1.0, 0.5,0.35,1.0, 0.6,0.3,1.0,
                     0.4,0.4,0.5, 0.5,0.45,0.5, 0.6,0.4,0.5,
                     0.4,0.5,0.0, 0.5,0.55,0.0, 0.6,0.5,0.0);
nsgrid = I_Ppoint_grid34(3,3,"3D",nspts);

pnuni_bsp_surf(3,3,&nsknots,&nsknots,PNON_RATIONAL,&nsgrid,0,NULL)
im_iss_test("nurb surface");


tendtest();
