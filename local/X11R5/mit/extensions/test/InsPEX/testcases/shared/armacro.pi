
/* $XConsortium: armacro.pi,v 5.2 91/11/26 15:00:37 hersh Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


/*
 * retrieve structure identifiers, test against expected,
 * print with specified format string if doesn't match
 *
 * NOTE: this macro requires the initialization of the variable "inqids"
 *       @num determines the number of significant arguments that follows
 *       assuming enough buffer spaces for 10 ids
 */
macro im_confirm_archive_strids(@arid,@num,@s1,@s2,@s3,@s4,@formatstring,@value)
	pret_struct_ids(@arid,10,0,&inqids,&total);
	status = i_compare_Pint_list_to_ints(inqids,@num,@s1,@s2,@s3,@s4);
	im_ifneq(status,1,@formatstring,@value);
endmacro

/*
 * inquire structure identifiers, test against expected,
 * print with specified format string if doesn't match
 *
 * NOTE: this macro requires the initialization of the variable "inqids"
 *       @num determines the number of significant arguments that follows
 *	 assuming enough buffer spaces for 10 ids
 */
macro im_confirm_CSS_strids(@num,@s1,@s2,@s3,@s4,@formatstring,@value)
	err = i_bogus_error();
	pinq_struct_ids(10,0,&err,&inqids,&total);
	im_ifneq(err,0,"ERROR: %d in pinq_struct_ids\n",err);
	status = i_compare_Pint_list_to_ints(inqids,@num,@s1,@s2,@s3,@s4);
	im_ifneq(status,1,@formatstring,@value);
endmacro


/*
 * check the status of the structure and test against expected.
 * check content only if structure is not empty
 * check only the type of the first element of the structure against expected
 * print with specified format string if doesn't match
 */
macro im_confirm_status_content(@str,@status,@elemtype,@flagstring,@formatstring)
	#
	# verify structure status
	#
	err = i_bogus_error();
	pinq_struct_status(@str,&err,&structstatus);
	im_ifneq(err,0,"ERROR: %d in pinq_struct_status\n",err);
	if (structstatus != @status)
		tfprintf(@formatstring,@flagstring);
		printf( "status of structure %d is %d expected %d\n",
			@str,structstatus,@status);
	endif
	#
	# verify type of first element in structure
	#
	if (structstatus == PSTRUCT_STATUS_NOT_EMPTY)
		err = i_bogus_error();
        	pinq_elem_type_size(@str, 1, &err, &actualtype, &elemsize);
		im_ifneq(err,0,"ERROR: %d in pinq_elem_type_size\n",err);
		if (actualtype != @elemtype)
			tfprintf(@formatstring,@flagstring);
			printf( "1st element of structure %d is %d expected %d\n",
				@str,actualtype,@elemtype);
		endif
	endif
endmacro

/*
 * build structure 0 which executes structure 1:
 */
macro im_buildstr0()
	popen_struct(0);
	pexec_struct(1);
	pclose_struct();
endmacro

/*
 * build structure 1 which executes structure 2:
 */
macro im_buildstr1()
	popen_struct(1);
	pexec_struct(2);
	pclose_struct();
endmacro

/*
 * build structure 2 which contains a label element:
 */
macro im_buildstr2()
	popen_struct(2);
	plabel(2);
	pclose_struct();
endmacro

/*
 * build structure 2 which contains a setmarkertype element:
 */
macro im_buildstr2_()
	popen_struct(2);
	pset_marker_type(0);
	pclose_struct();
endmacro

/*
 * build structure 3 which contains a label element:
 */
macro im_buildstr3()
	popen_struct(3);
	plabel(3);
	pclose_struct();
endmacro

/*
 * build structure 3 which contains a setmarkertype element:
 */
macro im_buildstr3_()
	popen_struct(3);
	pset_marker_type(0);
	pclose_struct();
endmacro

resume



