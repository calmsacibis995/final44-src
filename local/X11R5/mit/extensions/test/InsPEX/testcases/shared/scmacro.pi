
/* $XConsortium: scmacro.pi,v 5.2 91/07/24 18:50:46 hersh Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


/* 
 * macros for state control testing
 */
/*
 * inquire system state, test against expected,
 * print with specified format string if doesn't match
 *	expected - expected system state value
 *	formatstring - format string for failure message
 */
macro im_confirm_sysstate(@expected,@formatstring)
	pinq_sys_st(&sysstate);
	im_ifneq(sysstate,@expected,@formatstring,sysstate);
endmacro

/*
 * inquire workstation state, test against expected,
 * print with specified format string if doesn't match
 *	expected - expected workstation state value
 *	formatstring - format string for failure message
 */
macro im_confirm_wsstate(@expected,@formatstring)
	pinq_ws_st(&wsstate);
	im_ifneq(wsstate,@expected,@formatstring,wsstate);
endmacro

/*
 * inquire structure state, test against expected,
 * print with specified format string if doesn't match
 *	expected - expected structure state value
 *	formatstring - format string for failure message
 */
macro im_confirm_structstate(@expected,@formatstring)
	pinq_struct_st(&strstate);
	im_ifneq(strstate,@expected,@formatstring,strstate);
endmacro

/*
 * inquire archive state, test against expected,
 * print with specified format string if doesn't match
 *	expected - expected archive state value
 *	formatstring - format string for failure message
 */
macro im_confirm_archivestate(@expected,@formatstring)
	pinq_ar_st(&arstate);
	im_ifneq(arstate,@expected,@formatstring,arstate);
endmacro

/*
 * inquire set of open ws, test against expected
 * print with specified format string if doesn't match
 * NOTE: the variable "inqsetws" must be created and initialized
 *	num - number of following arguments to use
 *      w1,w2 - workstation id
 *	formatstring - format string for failure message
 */
macro im_confirm_setopenws(@num,@w1,@w2,@formatstring)
	err = i_bogus_error();
	pinq_open_wss(10,0,&err,&inqsetws,&total);
	im_ifneq(err,0,"ERROR: %d in pinq_open_wss\n",err);
	status = i_compare_Pint_list_to_ints(inqsetws,@num,@w1,@w2);
	im_ifneq(status,1,@formatstring,NULL);
endmacro

/*
 * inquire structure identifiers, test against expected
 * print with specified format string if doesn't match
 * NOTE: the variable "inqids" should be must and initialized
 *	num - number of following arguments to use
 *      s1,s2 - structure id
 *	formatstring - format string for failure message
 */
macro im_confirm_strids(@num,@s1,@s2,@formatstring)
	err = i_bogus_error();
	pinq_struct_ids(10,0,&err,&inqids,&total);
	im_ifneq(err,0,"ERROR: %d in pinq_struct_ids\n",err);
	status = i_compare_Pint_list_to_ints(inqids,@num,@s1,@s2);
	im_ifneq(status,1,@formatstring,NULL);
endmacro

/*
 * inquire list of archive files, test against expected
 * print with specified format string if doesn't match
 *	num - number of pairs of following arguments to use
 *      f1,f2 - archive file id
 *      s1,s2 - archive file name
 *	formatstring - format string for failure message
 */
macro im_confirm_archfiles(@num,@f1,@s1,@f2,@s2,@formatstring)
 	pcreate_store(&err,&store);
	im_ifneq(err,0,"ERROR: %d in pcreate_store\n",err);
	err = i_bogus_error();
	pinq_ar_files(store,&err,&inqarlst);
	im_ifneq(err,0,"ERROR: %d in pinq_ar_files\n",err);
	status = i_compare_Par_file_list_to_ids_names(*inqarlst,@num,@f1,@s1,@f2,@s2);
	im_ifneq(status,1,@formatstring,NULL);
 	pdel_store(store);
endmacro

/*
 * inquire open structure, test against expected,
 * print with specified format string if doesn't match
 *	expected - expected open structure status value
 *	formatstring - format string for failure message
 */
macro im_confirm_openstructstatus(@expstatus,@formatstring)
	err = i_bogus_error();
	pinq_open_struct(&err,&status,&id);
	im_ifneq(err,0,"ERROR: %d in pinq_open_struct\n",err);
	im_ifneq(status,@expstatus,@formatstring,status);
endmacro

/*
 * inquire open structure, test against expected,
 * print with specified format string if doesn't match
 *	expected - expected open structure id value
 *	formatstring - format string for failure message
 */
macro im_confirm_openstructid(@expid,@formatstring)
	err = i_bogus_error();
	pinq_open_struct(&err,&status,&id);
	im_ifneq(err,0,"ERROR: %d in pinq_open_struct\n",err);
	im_ifneq(id,@expid,@formatstring,id);
endmacro

resume


