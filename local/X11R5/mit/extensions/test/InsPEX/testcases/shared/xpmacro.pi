/* $XConsortium: xpmacro.pi,v 5.1 91/02/16 10:02:46 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


/*
 * confirm workstation transformation state macro: 
 * inquire and test against expected,
 * print with specified format string if doesn't match
 * 	expups - update state
 *	exprwin - requested window
 *	expcwin - current window
 *	exprvp - requested viewport
 *	expcvp - current viewport
 *	formatstring - format string for failure message
 */
macro im_confirm_wsxform(@expups,@exprwin,@expcwin,@exprvp,@expcvp,
	@formatstring)
	err = i_bogus_error();
	pinq_ws_tran(1,&err,&ups,&rwin,&cwin,&rvp,&cvp);
	im_ifneq(err,0,"ERROR: %d in pinq_ws_tran\n",err);
	if (ups != @expups)
	    tfprintf("failed: %s: updst=%d, expected %d\n",
		@formatstring,ups,@expups);
	endif
	status = i_compare_Plimit(rwin,@exprwin);
	if (status != 1)
	    tfprintf("failed: %s: request window != expected\n",@formatstring);
	endif
	status = i_compare_Plimit(cwin,@expcwin);
	if (status != 1)
	    tfprintf("failed: %s: current window != expected\n",@formatstring);
	endif
	status = i_compare_Plimit(rvp,@exprvp);
	if (status != 1)
	    tfprintf("failed: %s: request viewport != expected\n",@formatstring);
	endif
	status = i_compare_Plimit(cvp,@expcvp);
	if (status != 1)
	    tfprintf("%s: current viewport != expected\n",@formatstring);
	endif
endmacro

/*
 * confirm workstation transformation3 state macro: 
 * inquire and test against expected,
 * print with specified format string if doesn't match
 * 	expups - update state
 *	exprwin - requested window
 *	expcwin - current window
 *	exprvp - requested viewport
 *	expcvp - current viewport
 *	formatstring - format string for failure message
 */
macro im_confirm_wsxform3(@expups,@exprwin3,@expcwin3,@exprvp3,@expcvp3,
	@formatstring)
	err = i_bogus_error();
	pinq_ws_tran3(1,&err,&ups,&rwin3,&cwin3,&rvp3,&cvp3);
	im_ifneq(err,0,"ERROR: %d in pinq_ws_tran3\n",err);
	if (ups != @expups)
	    tfprintf("failed: %s: updst=%d, expected %d\n",
		@formatstring,ups,@expups);
	endif
	status = i_compare_Plimit3(rwin3,@exprwin3);
	if (status != 1)
	    tfprintf("failed: %s: request window != expected\n",@formatstring);
	endif
	status = i_compare_Plimit3(cwin3,@expcwin3);
	if (status != 1)
	    tfprintf("failed: %s: current window != expected\n",@formatstring);
	endif
	status = i_compare_Plimit3(rvp3,@exprvp3);
	if (status != 1)
	    tfprintf("failed: %s: request viewport != expected\n",@formatstring);
	endif
	status = i_compare_Plimit3(cvp3,@expcvp3);
	if (status != 1)
	    tfprintf("failed: %s: current viewport != expected\n",@formatstring);
	endif
endmacro


/*
 * Confirm the presence of a 3D line by examining pixels around the endpoints 
 * and a median point of the line 
 * given:
 *      @display - 	X display
 *      @window - 	X window
 *      @ws - 		PHIGS workstation number
 * 	@view - 	view index 
 *      @line - 	an array of the two endpoints of the line
 *      @dim -		dimension of pixel grid to be examined
 *      @col - 		colour index
 * Print with specified format string if not found
 *
 */
macro im_confirm_line3(@display,@window,@ws,@view,@line,@dim,@col,@formatstring,@msg)
        status = i_check_line3(@display,@window,@ws,@view,@line,@dim,@col);
        im_ifneq(status,1,@formatstring,@msg);
endmacro


resume


