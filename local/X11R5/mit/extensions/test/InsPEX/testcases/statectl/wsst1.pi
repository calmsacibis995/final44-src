/* $XConsortium: wsst1.pi,v 5.1 91/02/16 10:01:12 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## wsst1.pi -
## Test X drawable workstation operating state 
## Test the following sequences:
## open ws1, close ws1, open ws1, open ws2, close ws2
## Verify workstation states changes 
## Verify the set of opened workstations

source macro.pi
source scmacro.pi

tbegintest("wsst1","X drawable workstation operating state");

# INITIALIZE: 1. structure to store info return from inquiries, 2. ws type
buf = malloc(256)
inqsetws = I_Pint_list(0,buf)
wstype = i_get_ws_type("phigs_ws_type_x_drawable");

# SETUP: open phigs
i_open_phigs(NULL,PDEF_MEM_SIZE);

# TEST begin:

# verify that ws state is WSCL and set of open ws is ()
im_confirm_wsstate(PWS_ST_WSCL,
	"failed: state = %d, expected PWS_ST_WSCL before opening ws\n");
im_confirm_setopenws(0,NULL,NULL,
	"failed: set of ws != empty before opening ws1\n");

# create X window and open ws1
i_make_xwindow(&display,&window1,&conn1,0,0,100,100);
popen_ws(1,&conn1,wstype);

# verify that ws state is WSOP and set of open ws is (1)
im_confirm_wsstate(PWS_ST_WSOP,
	"failed: state = %d expected PWS_ST_WSOP after opening ws1\n");
im_confirm_setopenws(1,1,NULL,
	"failed: set of ws != (1) after opening ws1\n");

# close ws1 and destroy associated X window
pclose_ws(1);
XDestroyWindow(display,window1);
sleep(1);

# verify that ws state is WSCL and set of open ws is ()
im_confirm_wsstate(PWS_ST_WSCL,
	"failed: state = %d, expected PWS_ST_WSCL after closing ws1\n");
im_confirm_setopenws(0,NULL,NULL,
	"failed: set of ws != empty after closing ws1\n");

# create X window and open ws1
i_make_xwindow(&display,&window1,&conn1,0,0,100,100);
popen_ws(1,&conn1,wstype);

# verify that ws state is WSCL and set of open ws is ()
im_confirm_wsstate(PWS_ST_WSOP,
	"failed: state = %d expected PWS_ST_WSOP after re-opening ws1\n");
im_confirm_setopenws(1,1,NULL,
	"failed: set of ws != (1) after re-opening ws1\n");

# create X drawable and open ws2
i_make_xwindow(&display,&window2,&conn2,100,100,100,100);
popen_ws(2,&conn2,wstype);

# verify that ws state is WSOP and set of open ws is (1)
im_confirm_wsstate(PWS_ST_WSOP,
	"failed: state = %d, expected PWS_ST_WSOP after opening ws2\n");
im_confirm_setopenws(2,1,2,
	"failed: set of ws != (1,2) after opening ws2\n");

# close ws2 and destroy associated X window
pclose_ws(2);
XDestroyWindow(display,window2);
sleep(1);

# verify that ws state is WSOP and set of open ws is (1)
im_confirm_wsstate(PWS_ST_WSOP,
	"failed: state = %d expected PWS_ST_WSOP after closing ws2\n");
im_confirm_setopenws(1,1,NULL,
	"failed: set of ws != (1) after closing ws2\n");

tendtest()
