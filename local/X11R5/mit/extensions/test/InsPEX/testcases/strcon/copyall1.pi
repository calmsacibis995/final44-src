/* $XConsortium: copyall1.pi,v 5.1 91/02/16 10:00:44 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

## copyall1.pi - test pcopy_all_elems_struct() by copying from
## non-existent and empty structure, and from multi-element
## structure.  Copy into beginning, middle, and end of a 
## structure.

tbegintest("copyall1.pi", "test COPY ALL ELEMENTS FROM STRUCTURE");

source macro.pi		/* general testing utility macros */
source strmacro.pi	/* macros for structure content area */
source apimacro.pi	/* macros for api-specific functions */

@WS1 = 1
@STRUCT1 = 1
@STRUCT2 = 2
@STRUCT3 = 3
@EMPTY_STRUCT = 10
@NONEXIST_STRUCT = 11

# Set up phigs, workstation
i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_ws(@WS1);

# Create an empty structure, for later usage
popen_struct(@EMPTY_STRUCT);
pclose_struct();

# Open the first destination structure
popen_struct(@STRUCT1);
ppost_struct(@WS1, @STRUCT1, 1.0);

# add a couple items to structure, set element pointer in between,
# Copy from non-existent structure, confirm that elem ptr doesn't change
pset_linetype(1);
plabel(2);
pset_elem_ptr(1);
pcopy_all_elems_struct(@NONEXIST_STRUCT);
im_confirm_elemptr(1, "failed: elem pointer %d should still be one after copy from non-existent structure\n");

# Copy the previously-created empty structure  into destination structure, 
# confirm that element pointer does not change.
pcopy_all_elems_struct(@EMPTY_STRUCT);
im_confirm_elemptr(1, "failed: elem pointer %d should still be one after copy from empty structure\n");

# Close STRUCT1, open a new STRUCT2, copy STRUCT1 into it
pclose_struct();
popen_struct(@STRUCT2);
pcopy_all_elems_struct(@STRUCT1);
im_confirm_elemptr(2, "failed: elem pointer %d, should be 2 after copying 2-element structure into empty structure\n");

# Close STRUCT2, open new STRUCT3, add a couple elements
pclose_struct();
popen_struct(@STRUCT3);
pset_marker_type(1);
pset_marker_size(1.5);

# Copy STRUCT2 into the middle of STRUCT3, confirm elem pointer and 
# element types
pset_elem_ptr(1);
pcopy_all_elems_struct(@STRUCT2);
im_confirm_elemptr(3, "failed: elem pointer %d should be 3 after copying 2-element structure\n");
im_confirm_elemtype(@STRUCT3, 3, PELEM_LABEL, "failed: element 3 should be PELEM_LABEL, not %d, after copying struct 2 into struct 3\n");
im_confirm_elemtype(@STRUCT3, 4, PELEM_MARKER_SIZE, "failed: element 4 should be PEL_MARKER_SIZE, not %d, after copying 2-element structure in before it\n");

# copy STRUCT2 into end of STRUCT3, confirm element pointer and
# element types
pset_elem_ptr(99);
pcopy_all_elems_struct(@STRUCT2);
im_confirm_elemptr(6, "failed: elem pointer %d should be 6 after copying 2-element structure onto end\n");
im_confirm_elemtype(@STRUCT3, 6, PELEM_LABEL, "failed: element 6 should be PELEM_LABEL, not %d, after copying struct 2 onto end of struct 3\n");


tendtest();
