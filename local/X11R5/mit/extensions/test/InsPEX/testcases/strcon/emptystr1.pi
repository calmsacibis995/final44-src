
/* $XConsortium: emptystr1.pi,v 5.1 91/02/16 10:00:54 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

## emptystr1.pi - test pempty_struct() on a non-existent structure,
## a closed structure, and an open structure (with and without contents).
## Verify with pinq_struct_status().

tbegintest("emptystr1", "test function EMPTY STRUCTURE");

source macro.pi		/* generic macros */
source strmacro.pi	/* macros specific to structure content area */
source apimacro.pi	/* macros isolating api-specific functionality */

@WS1 = 1
points1 = IA_Ppoint(3, 0.3,0.95, 0.7,0.5, 0.1,0.5);
points2 = IA_Ppoint(3, 0.1,0.5, 0.1,0.0, 0.8,0.1);
lines1 = I_Ppoint_list(3, points1);
lines2 = I_Ppoint_list(3, points2);

# Set up phigs
i_open_phigs(NULL,PDEF_MEM_SIZE);

# test pempty_struct() on a non-existent structure before workstation opened;
# an empty structure should be created.
pempty_struct(1);
im_confirm_struct_status(1, PSTRUCT_STATUS_EMPTY, "failed: previously non-existent structure should have status PSTRUCT_STATUS_EMPTY, not %d, after pempty_struct()\n");

# open a workstation
i_open_ws(@WS1);

# Testing a closed structure: put some things in a struct, close it,
# call pempty_struct().
popen_struct(2);
pset_line_colr_ind(3);
ppolyline(&lines1);
pclose_struct();
pempty_struct(2);
im_confirm_struct_status(2, PSTRUCT_STATUS_EMPTY, "failed: closed structure should have been emptied, has status %d\n");

# Testing an empty open structure
popen_struct(3);
pempty_struct(3);
im_confirm_struct_status(3, PSTRUCT_STATUS_EMPTY, "failed: empty open structure should have stayed empty, has status %d\n");
pclose_struct();

# Testing a non-empty open structure: confirm with pinq_struct_status()
# and with pinq_elem_ptr().
popen_struct(4);
pset_line_colr_ind(2);
ppolyline(&lines2);
pempty_struct(4);
im_confirm_struct_status(4, PSTRUCT_STATUS_EMPTY, "failed: non-empty open structure should have been emptied, has status %d\n");
im_confirm_elemptr(0, "failed: element pointer %d should have been reset to 0 by pempty_struct() on open structure\n");

tendtest();
