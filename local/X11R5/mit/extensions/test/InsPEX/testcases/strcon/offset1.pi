
/* $XConsortium: offset1.pi,v 5.1 91/02/16 10:00:55 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

## offset1.pi - test poffset_elem_ptr() with positive, negative, and zero offset,
## with negative offset where current+offset < 0, and 
## with positive offset where current+offset > length of structure.

tbegintest("offset1", "test OFFSET ELEMENT POINTER");

source macro.pi
source strmacro.pi
source apimacro.pi

# open Phigs, open workstation
i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_ws(1);

# open and post a structure, put a few things into it
# (should become: (LINE_COLOUR_INDEX, LINETYPE, EDGE_COLOUR_INDEX,
# MARKER_TYPE))
popen_struct(1);
ppost_struct(1,1,1.0);
pset_line_colr_ind(1);
pset_linetype(2);
pset_edge_colr_ind(3);
plabel(4);
pset_marker_type(5);

# Set element pointer at 0, offset by 2, confirm
pset_elem_ptr(0);
poffset_elem_ptr(2);
im_confirm_elemptr(2, "failed: Element pointer, %d, should be offset to 2\n");

# Set element pointer at 2, offset by 2, confirm again
pset_elem_ptr(2);
poffset_elem_ptr(2);
im_confirm_elemptr(4, "failed: element pointer %d should be offset to 4\n");

# Set elemement pointer at 3, offset by -2, confirm
pset_elem_ptr(3);
poffset_elem_ptr(-2);
im_confirm_elemptr(1, "failed: element pointer %d should be 1 after negative offset\n");

# Set element pointer at 2, offset by 0, confirm
pset_elem_ptr(2);
poffset_elem_ptr(0);
im_confirm_elemptr(2, "failed: element pointer %d should be 2 after zero offset\n");

# Set element pointer at 3, offset by 10 (past end of structure) and
# confirm that element pointer is at end of structure
pset_elem_ptr(3);
poffset_elem_ptr(10);
im_confirm_elemptr(5, "failed: element pointer %d should be at 5, the end of structure, after large offset\n");

#Set element pointer at 4, offset by -6, confirm that element
# pointer is 0
pset_elem_ptr(4);
poffset_elem_ptr(-6);
im_confirm_elemptr(0, "failed: element pointer %d should be 0 after large negative offset\n");


pclose_struct();
pclose_ws(1);
pclose_phigs();
tendtest();
