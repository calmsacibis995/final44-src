/* $XConsortium: delstr4.pi,v 5.1 91/02/16 10:02:33 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

## delstr4.pi - deleting posted structures:
## delete empty and non-empty posted structures,
## and empty and non-empty open posted structures.
 
tbegintest("delstr4", "deleting posted structures");

source macro.pi		/* general testing utility macros */
source strmacro.pi	/* macros for structure testing */
source apimacro.pi	/* macros for api-specific functions */

points1 = IA_Ppoint(2, 0.1,0.3, 0.75,0.75);
points2 = IA_Ppoint(2, 0.5,0.6, 0.1,0.9);
line = I_Ppoint_list(2, points1);
line2 = I_Ppoint_list(2, points2);

@WS1 = 1
# initialize phigs 
i_open_phigs(NULL, PDEF_MEM_SIZE);
i_open_ws(@WS1);

#
# empty posted structure case: create an empty (closed) structure,
# post it, and delete it.  The resulting structure should
# be un-posted and non-existent.
#
popen_struct(1);
pclose_struct();
ppost_struct(@WS1, 1, 1.0);
pdel_struct(1);

poststat = i_is_posted_struct(@WS1, 1, &priority);
im_ifneq(poststat, 0, "failed: deleted posted structure still posted\n", NULL);
im_confirm_struct_status(1, PSTRUCT_STATUS_NON_EXISTENT,
	"failed: deleted empty posted structure has status %d\n");

#
# non-empty posted structure case: create a structure with
# some things in it, close it, post it, and delete it.
# Result should be un-posted and non-existent.
#
popen_struct(2);
pset_line_colr_ind(2);
pset_marker_type(2);
ppolyline(&line);
pclose_struct();

ppost_struct(@WS1, 2, 1.0);
pdel_struct(2);

poststat = i_is_posted_struct(@WS1, 2, &priority);
im_ifneq(poststat, 0, "failed: deleted non-empty posted structure still posted\n", NULL);
im_confirm_struct_status(2, PSTRUCT_STATUS_NON_EXISTENT,
	"failed: deleted non-empty posted structure has status %d\n");


#
# empty open posted structure case: create an empty open structure,
# post it, and delete it.  The resulting structure should
# be un-posted and empty.
#
popen_struct(3);
ppost_struct(@WS1, 3, 1.0);
pdel_struct(3);


poststat = i_is_posted_struct(@WS1, 3, &priority);
im_ifneq(poststat, 0, "failed: deleted empty open posted structure still posted\n", NULL);
im_confirm_struct_status(3, PSTRUCT_STATUS_EMPTY,
	"failed: deleted empty open posted structure has status %d, should be NON_EXISTENT\n");
pclose_struct();

punpost_struct(@WS1, 3);

#
# non-empty open posted structure case: create a structure with
# some things in it,  post it, and delete it.
# Result should be un-posted and non-existent.
popen_struct(4);
pset_line_colr_ind(4);
pset_marker_type(4);
ppolyline(&line2);
ppost_struct(@WS1, 4, 1.0);
pdel_struct(4);

poststat = i_is_posted_struct(@WS1, 4, &priority);
im_ifneq(poststat, 0, 
	"failed: deleted non-empty open posted structure still posted\n", 
	NULL);
im_confirm_struct_status(4, PSTRUCT_STATUS_EMPTY ,
	"failed: deleted non-empty open posted structure has status %d\n");


tendtest();




