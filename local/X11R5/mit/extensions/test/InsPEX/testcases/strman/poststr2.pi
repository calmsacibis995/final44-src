/* $XConsortium: poststr2.pi,v 5.1 91/02/16 10:02:40 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

## poststr2.pi - post overlapping structures with different
## priority. Re-post the lower priority structure at a higher priority.
## Confirm that the fill area in the higher-priority
## structure is drawn on top, using pixel readback.

tbegintest("poststr2","post overlapping structures of different priority");

source macro.pi		/* general testing utility macros */
source strmacro.pi	/* macros for structure testing */
source apimacro.pi	/* macros for api-specific functions */

# initialize phigs 
i_open_phigs(NULL, PDEF_MEM_SIZE);
i_open_x_ws(1, &xdisplay, &xwindow, 100, 200, 200, 200);

# create a right-pointing triangle of color 4 (blue), and post
# at priority 0.5.
triangle_1_pts = IA_3_Ppoint3(0.1,0.1,0.0,  0.9,0.5,0.0, 0.1,0.9,0.0);
triangle_1 = I_Ppoint_list(3, triangle_1_pts);
popen_struct(1);
pset_int_style(PSTYLE_SOLID);
pset_int_colr_ind(4);
pfill_area3(&triangle_1);
pclose_struct();
ppost_struct(1, 1, 0.5);

i_pause();

# create a left-pointing triangle of color 5 (yellow), and
# post at priority 0.3
triangle_2_pts = IA_3_Ppoint3(0.9,0.1,0.0,  0.1,0.5,0.0, 0.9,0.9,0.0);
triangle_2 = I_Ppoint_list(3, triangle_2_pts);
popen_struct(2);
pset_int_style(PSTYLE_SOLID);
pset_int_colr_ind(5);
pfill_area3(&triangle_2);
pclose_struct();
ppost_struct(1, 2, 0.3);

# confirm that pixel in the middle of the overlapping triangles
# is color of the higher-priority structure (4=blue).
middle_point = I_Ppoint3(0.5, 0.5, 0.0);
pixelfound = i_check_pixel3(xdisplay, xwindow, 1, 0, middle_point, 3, 4);
im_ifneq(pixelfound, 1, 
   "failed: higher-priority structure color not found in center\n", NULL);

i_pause();

# re-post the left-pointing (color 5=yellow) triangle at
# a higher priority, 0.7.  Confirm that the center is yellow.
ppost_struct(1, 2, 0.7);
pixelfound = i_check_pixel3(xdisplay, xwindow, 1, 0, middle_point, 3, 5);
im_ifneq(pixelfound, 1, 
   "failed: left-pointing triangle not on top after re-posting at higher priority\n", NULL);
i_pause();

tendtest();




