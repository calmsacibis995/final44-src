
/* $XConsortium: faswd2.pi,v 5.1 91/02/16 10:04:01 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## faswd2.pi
## Test fill area set with data interior attributes: 
##	. back int colour
##	. back int style
##	. int colour
##	. int style
##	. edge flag 
##	. edge colour 
##	. edge type
##	. edge width

source macro.pi

# data structures initialization section
tbegintest("faswd2",
	"fill area set with data with data - interior and edge attributes");

# initialize geometry for fill area set with data and colours
gc1 = I_Pgcolr(PMODEL_RGB,1.0,0.0,0.0);
gc2 = I_Pgcolr(PMODEL_RGB,0.0,1.0,0.0);
gc3 = I_Pgcolr(PMODEL_RGB,0.0,0.0,1.0);

# 2-set - facet none, vertex coordinate, edge data
ptarr11 = IA_Ppoint3(4, 0.1,0.1,0.0, 0.1,0.2,0.0, 0.3,0.2,0.0, 0.3,0.1,0.0);
ptarr12 = IA_Ppoint3(3, 0.4,0.1,0.0, 0.5,0.2,0.0, 0.6,0.1,0.0);
varr11 = I_Pfacet_vdata_arr3(PVERT_COORD, ptarr11);
varr12 = I_Pfacet_vdata_arr3(PVERT_COORD, ptarr12);
vlst11 = I_Pfacet_vdata_list3(4, varr11);
vlst12 = I_Pfacet_vdata_list3(3, varr12);
vdata1 = IA_Pfacet_vdata_list3(2, vlst11,vlst12);
edataarr11 = I_Pedge_data_arr(4,PEDGE_ON,PEDGE_ON,PEDGE_ON,PEDGE_ON)
edataarr12 = I_Pedge_data_arr(3,PEDGE_ON,PEDGE_ON,PEDGE_OFF)
elst11 = I_Pedge_data_list(4,edataarr11)
elst12 = I_Pedge_data_list(3,edataarr12)
edata1 = IA_Pedge_data_list(2,elst11,elst12)

# 2-set - facet none, vertex coordinate, edge data
ptarr21 = IA_Ppoint3(4, 0.1,0.3,0.0, 0.1,0.4,0.0, 0.3,0.4,0.0, 0.3,0.3,0.0);
ptarr22 = IA_Ppoint3(3, 0.4,0.3,0.0, 0.5,0.4,0.0, 0.6,0.3,0.0);
varr21 = I_Pfacet_vdata_arr3(PVERT_COORD, ptarr21);
varr22 = I_Pfacet_vdata_arr3(PVERT_COORD, ptarr22);
vlst21 = I_Pfacet_vdata_list3(4, varr21);
vlst22 = I_Pfacet_vdata_list3(3, varr22);
vdata2 = IA_Pfacet_vdata_list3(2, vlst21,vlst22);
edataarr21 = I_Pedge_data_arr(4,PEDGE_ON,PEDGE_ON,PEDGE_ON,PEDGE_ON)
edataarr22 = I_Pedge_data_arr(3,PEDGE_ON,PEDGE_ON,PEDGE_OFF)
elst21 = I_Pedge_data_list(4,edataarr21)
elst22 = I_Pedge_data_list(3,edataarr22)
edata2 = IA_Pedge_data_list(2,elst21,elst22)
 

# state initialization 
i_open_phigs(NULL,0);
i_open_x_ws(1,&xdisplay,&xwindow,0,0,200,200);
popen_struct(1);

pset_back_int_style(PSTYLE_HOLLOW);
pset_back_int_colr(&gc1);
pset_int_style(PSTYLE_SOLID);
pset_int_colr(&gc2);
pset_edge_flag(PEDGE_ON);
pset_edgetype(PLINE_DASH);
pset_edge_colr(&gc3);
pset_edgewidth(3.0);

# testing back face
pset_face_disting_mode(PDISTING_YES);	
pfill_area_set3_data(PFACET_NONE,PEDGE_VISIBILITY,PVERT_COORD,PMODEL_RGB,
        NULL,2,edata1,vdata1);
pset_face_disting_mode(PDISTING_NO);	
pfill_area_set3_data(PFACET_NONE,PEDGE_VISIBILITY,PVERT_COORD,PMODEL_RGB,
        NULL,2,edata2,vdata2);
ppost_struct(1,1,1.0)

# verify image
i_check_image("faswd2",xdisplay,xwindow,0,0,199,199,
	"fill area set with data with data - interior and edge attributes");

im_def_grid();
i_pause();

tendtest();
