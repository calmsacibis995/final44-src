
/* $XConsortium: faswd3.pi,v 5.1 91/02/16 10:04:08 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## faswd3.pi
## Test fill area set with data bundle interior, edge and reflectance attributes: 
##	. int index
##	. int colour
##	. int style
##	. edge index
##	. edge flag
##	. edge colour 
##	. edge type
##	. edge width
##	. int reflectance eq
##	. int shading method
##	. area properties
##	. back int style
##	. back int colour
##	. back int reflectance eq
##	. back int shading method
##	. back area properties

source macro.pi

# data structures initialization section
tbegintest("faswd3",
"fill area set with data with data - bundled interior, edge and reflectance attributes");

# initialize: an interior and edge representation plus

gc1 = I_Pgcolr(PMODEL_RGB,1.0,0.5,0.5);
gc2 = I_Pgcolr(PMODEL_RGB,0.5,0.5,1.0);
gc3 = I_Pgcolr(PMODEL_RGB,0.5,1.0,1.0);
areaprops = I_Prefl_props(0.9,1.0,1.0,gc1,1.0,1.0);
bareaprops = I_Prefl_props(0.6,1.0,1.0,gc1,1.0,1.0);
irep = I_Pint_bundle_plus(PSTYLE_SOLID,0,gc1,PREFL_AMBIENT,PSD_NONE,areaprops
                ,PSTYLE_SOLID,0,gc1,PREFL_AMBIENT,PSD_NONE,bareaprops
                ,PSURF_CONSTANT_PARAMETRIC_BETWEEN_KNOTS,10.0,10.0);

erep = I_Pedge_bundle_plus(PEDGE_ON,PLINE_DASH,3.0,gc2);

# initialize geometry for fill area set with data 

# 2-set, facet none, vertex coordinater
ptarr11 = IA_Ppoint3(4, 0.1,0.1,0.0, 0.1,0.2,0.0, 0.3,0.2,0.0, 0.3,0.1,0.0);
ptarr12 = IA_Ppoint3(3, 0.4,0.1,0.0, 0.5,0.2,0.0, 0.6,0.1,0.0);
varr11 = I_Pfacet_vdata_arr3(PVERT_COORD, ptarr11);
varr12 = I_Pfacet_vdata_arr3(PVERT_COORD, ptarr12);
vlst11 = I_Pfacet_vdata_list3(4, varr11);
vlst12 = I_Pfacet_vdata_list3(3, varr12);
vdata1 = IA_Pfacet_vdata_list3(2, vlst11,vlst12);

ptarr21 = IA_Ppoint3(4, 0.1,0.3,0.0, 0.3,0.3,0.0, 0.3,0.4,0.0, 0.1,0.4,0.0);
ptarr22 = IA_Ppoint3(3, 0.4,0.3,0.0, 0.6,0.3,0.0, 0.5,0.4,0.0);
varr21 = I_Pfacet_vdata_arr3(PVERT_COORD, ptarr21);
varr22 = I_Pfacet_vdata_arr3(PVERT_COORD, ptarr22);
vlst21 = I_Pfacet_vdata_list3(4, varr21);
vlst22 = I_Pfacet_vdata_list3(3, varr22);
vdata2 = IA_Pfacet_vdata_list3(2, vlst21,vlst22);

# light attribute initialization
ia = IA_Pint(1,1);
active = I_Pint_list(1,ia);
deactive = I_Pint_list(0,0);
ambsrc = I_Plight_src_bundle(PLIGHT_AMBIENT,gc3);

# setup: open phigs, workstation 
# set interior and edge representations
# open structure

i_open_phigs(NULL,0);
i_open_x_ws(1,&xdisplay,&xwindow,0,0,200,200);

pset_int_rep_plus(1,1,&irep);
pset_edge_rep_plus(1,1,&erep);

popen_struct(1);

# operation: draw fill area set with data with bundled interior, edge attributes
#            with ambient light

pset_light_src_rep(1,1,&ambsrc);
pset_light_src_state(&active,&deactive);
pset_int_ind(1);
pset_edge_ind(1);

pset_indiv_asf(PASPECT_EDGE_FLAG,PASF_BUNDLED);
pset_indiv_asf(PASPECT_EDGETYPE,PASF_BUNDLED);
pset_indiv_asf(PASPECT_EDGEWIDTH,PASF_BUNDLED);
pset_indiv_asf(PASPECT_EDGE_COLR_IND,PASF_BUNDLED);
pset_indiv_asf(PASPECT_INT_STYLE,PASF_BUNDLED);
pset_indiv_asf(PASPECT_INT_COLR_IND,PASF_BUNDLED);
pset_indiv_asf(PASPECT_INT_REFL_EQN,PASF_BUNDLED);
pset_indiv_asf(PASPECT_INT_SHAD_METH,PASF_BUNDLED);
pset_indiv_asf(PASPECT_REFL_PROPS,PASF_BUNDLED);
pset_indiv_asf(PASPECT_BACK_INT_STYLE,PASF_BUNDLED);
pset_indiv_asf(PASPECT_BACK_INT_COLR,PASF_BUNDLED);
pset_indiv_asf(PASPECT_BACK_INT_REFL_EQN,PASF_BUNDLED);
pset_indiv_asf(PASPECT_BACK_INT_SHAD_METH,PASF_BUNDLED);
pset_indiv_asf(PASPECT_BACK_REFL_PROPS,PASF_BUNDLED);

ppost_struct(1,1,1.0);

pset_face_disting_mode(PDISTING_YES);

# test back face attributes
pfill_area_set3_data(PFACET_NONE,PEDGE_NONE,PVERT_COORD,PMODEL_RGB,
        NULL,2,NULL,vdata1);
# test front face attributes
pfill_area_set3_data(PFACET_NONE,PEDGE_NONE,PVERT_COORD,PMODEL_RGB,
        NULL,2,NULL,vdata2);

# verify image
i_check_image("faswd3",xdisplay,xwindow,0,0,199,199,
"fill area set with data with data - bundled interior, edge and reflectance attributes");
i_pause();

tendtest();
