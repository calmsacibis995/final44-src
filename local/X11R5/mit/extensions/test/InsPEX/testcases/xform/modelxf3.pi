/* $XConsortium: modelxf3.pi,v 5.1 91/02/16 10:01:30 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## modelxf3.pi -  
## Test requirements:
##   Test that global transformation attribute,which is set in a parent 
##   structure, is inherited by a child structure.
##   Test that global transformation attribute, which is set in a child 
##   structure, affects the child structure, but not the parent.
#  Setup:
#    Open phigs and a workstation, open a post a structure 
#  Operations:
#    parent structure- Set the global transformation with certain translation,
#    draw a line, execute a child structure, and draw another line. 
#    child structure- draw a line, then set the global transformation
#    with certain translation, draw another line.
#    The first and second line from the parent should be rendered with 
#        the composite transformation of the parent structure only.
#    The first line from the child should be rendered with the inherited 
#        global transformation, which is the composite transformation of 
#        the parent structure.
#    The second line from the child should be rendered with the composite
#        transformation, in which the global transformation is the one set
#  Verifications:
#        within the child structure.
#    Calculate the locations of the transformed line and verify their 
#    existence using i_check_pixel3().

source macro.pi

tbegintest("modelxf3","global transformation attribute inheritance");

# set up phigs, a workstation , post and open a structure 

i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_x_ws(1,&xdisplay,&xwindow,0,0,200,200);
popen_struct(1);
ppost_struct(1,1,1.0);


# initialize matrices for translations

vector_1 = I_Pvec(0.1, 0.0);
vector_2 = I_Pvec(0.0, 0.1);
err = i_bogus_error();
ptranslate(&vector_1, &err, xlate_mtx_1);
im_ifneq(err,0,"ERROR: %d in ptranslate",err);
ptranslate(&vector_2, &err, xlate_mtx_2);
im_ifneq(err,0,"ERROR: %d in ptranslate",err);

vector3_1 = I_Pvec3(0.1, 0.0, 0.0);
vector3_2 = I_Pvec3(0.0, 0.1, 0.0);
err = i_bogus_error();
ptranslate3(&vector3_1, &err, xlate_mtx3_1);
im_ifneq(err,0,"ERROR: %d in ptranslate3",err);
ptranslate3(&vector3_2, &err, xlate_mtx3_2);
im_ifneq(err,0,"ERROR: %d in ptranslate3",err);

# initialize data for the lines to be drawn 

line_1 = IA_Ppoint(2, 0.25,0.25, 0.35,0.25);
line_2 = IA_Ppoint(2, 0.75,0.25, 0.85,0.25);
line_3 = IA_Ppoint(2, 0.25,0.75, 0.35,0.75);
line_4 = IA_Ppoint(2, 0.75,0.75, 0.85,0.75);
line3_1 = IA_Ppoint3(2, 0.25,0.25,0.0, 0.35,0.25,0.0);
line3_2 = IA_Ppoint3(2, 0.75,0.25,0.0, 0.85,0.25,0.0);
line3_3 = IA_Ppoint3(2, 0.25,0.75,0.0, 0.35,0.75,0.0);
line3_4 = IA_Ppoint3(2, 0.75,0.75,0.0, 0.85,0.75,0.0);
pl1 = I_Ppoint_list(2,line_1);
pl2 = I_Ppoint_list(2,line_2);
pl3 = I_Ppoint_list(2,line_3);
pl4 = I_Ppoint_list(2,line_4);
pl31 = I_Ppoint_list3(2,line3_1);
pl32 = I_Ppoint_list3(2,line3_2);
pl33 = I_Ppoint_list3(2,line3_3);
pl34 = I_Ppoint_list3(2,line3_4);

# calculate xlated points

xlated_pt_1 = I_Ppoint3(0.35,0.25,0.0);
xlated_pt_2 = I_Ppoint3(0.85,0.25,0.0);
xlated_pt_3 = I_Ppoint3(0.35,0.75,0.0);
xlated_pt_4 = I_Ppoint3(0.75,0.85,0.0);

text = malloc(128);

# testing 2D case:

pset_global_tran(xlate_mtx_1);
ppolyline(&pl1);
pexec_struct(2);
ppolyline(&pl2);
pclose_struct();

# edit child structure
popen_struct(2);
ppolyline(&pl3);
pset_global_tran(xlate_mtx_2);
ppolyline(&pl4);
pclose_struct();

foreach @xformed_pt3 @text (
	xlated_pt_1; "parent's 2D composite xform (lower left)";
	xlated_pt_2; "parent's 2D composite xform (lower right)";
	xlated_pt_3; "child's 2D composite xform (upper left)";
	xlated_pt_4; "child's 2D composite xform (upper right)";
)
	status = i_check_pixel3(xdisplay,xwindow,1,0,@xformed_pt3,5,1);
	im_ifneq(status,1,
	"failed: rendering with %s\n",@text); 
	i_pause();
end

# testing 3D case:

# empty both parent and child structures
pempty_struct(1);
pempty_struct(2);

popen_struct(1);
pset_global_tran3(xlate_mtx3_1);
ppolyline3(&pl31);
pexec_struct(2);
ppolyline3(&pl32);
pclose_struct();

# edit child structure
popen_struct(2);
ppolyline3(&pl33);
pset_global_tran3(xlate_mtx3_2);
ppolyline3(&pl34);
pclose_struct();

foreach @xformed_pt3 @text (
	xlated_pt_1; "parent's 3D composite xform (lower left)";
	xlated_pt_2; "parent's 3D composite xform (lower right)";
	xlated_pt_3; "child's 3D composite xform (upper left)";
	xlated_pt_4; "child's 3D composite xform (upper right)";
)
	status = i_check_pixel3(xdisplay,xwindow,1,0,@xformed_pt3,5,1);
	im_ifneq(status,1,
	"failed: rendering with %s\n",@text); 
	i_pause();
end

tendtest();
