
/* $XConsortium: modelxf6.pi,v 5.1 91/02/16 10:01:32 rws Exp $ */

/*****************************************************************
Copyright (c) 1989, 1990, 1991,1990 by Sun Microsystems, Inc. and the X Consortium.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the names of Sun Microsystems,
the X Consortium, and MIT not be used in advertising or publicity 
pertaining to distribution of the software without specific, written 
prior permission.  

SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, 
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT 
SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/


## modelxf6.pi -  
## Test requirements:
##   Test modelling clipping volume(3) with operators PMC_INTERSECT 
##   and PMC_REPLACE

source macro.pi

tbegintest("modelxf6","modelling clipping volume");

text = malloc(128);

# INITIALIZE: 2D data for a fillareas, test points and a halfspace for 2D cases
farea = IA_Ppoint(4, 0.3,0.3,  0.3,0.7, 0.7,0.7, 0.7,0.3);
fa = I_Ppoint_list(4,farea);
testpt1 = I_Ppoint3 (0.3,0.3,0.0);
testpt2 = I_Ppoint3 (0.7,0.3,0.0);
testpt3 = I_Ppoint3 (0.7,0.7,0.0);
testpt4 = I_Ppoint3 (0.3,0.7,0.0);

pt1 = I_Ppoint(0.4,0.4);
norm1 = I_Pvec(0.5,0.5);
hs1 = I_Phalf_space(pt1,norm1);
hslst1 = I_Phalf_space_list(1,hs1);

pt2 = I_Ppoint(0.6,0.6);
norm2 = I_Pvec(-0.5,-0.5);
hs2 = I_Phalf_space(pt2,norm2);
pt3 = I_Ppoint(0.6,0.4);
norm3 = I_Pvec(-0.5,0.5);
hs3 = I_Phalf_space(pt3,norm3);
hslst2 = I_Phalf_space_list(2,hs2,hs3);

# INITIALIZE: 3D data for a fillareas, test points and a halfspace for 3D cases
farea3 = IA_Ppoint3(4, 0.3,0.3,0.3,  0.3,0.7,0.3, 0.7,0.7,0.7, 0.7,0.3,0.7);
fa3 = I_Ppoint_list3(4,farea3);
testpt31 = I_Ppoint3 (0.3,0.3,0.3);
testpt32 = I_Ppoint3 (0.7,0.3,0.7);
testpt33 = I_Ppoint3 (0.7,0.7,0.7);
testpt34 = I_Ppoint3 (0.3,0.7,0.3);

pt31 = I_Ppoint3(0.4,0.4,0.4);
norm31 = I_Pvec3(0.5,0.5,0.5);
hs31 = I_Phalf_space3(pt31,norm31);
hslst31 = I_Phalf_space_list3(1,hs31);

pt32 = I_Ppoint3(0.6,0.6,0.6);
norm32 = I_Pvec3(-0.5,-0.5,0.0);
hs32 = I_Phalf_space3(pt32,norm32);
hslst32 = I_Phalf_space_list3(1,hs32);

# SETUP: open phigs, a workstation , post and open a structure , and set 
# clipping indicator ON

i_open_phigs(NULL,PDEF_MEM_SIZE);
i_open_x_ws(1,&xdisplay,&xwindow,0,0,200,200);
popen_struct(1);
ppost_struct(1,1,1.0);
pset_model_clip_ind(PIND_CLIP);

pset_int_style(PSTYLE_SOLID);

# 2D test:
foreach @op1 @op2 @text @ll @lr @ur @ul (
	PMC_REPLACE; PMC_INTERSECT; "REPLACE then INTERSECT";0;0;0;1; 
	PMC_REPLACE; PMC_REPLACE; "REPLACE then REPLACE";1;0;0;1; 
	PMC_INTERSECT; PMC_REPLACE; "INTERSECT then REPLACE";1;0;0;1; 
	PMC_INTERSECT; PMC_INTERSECT;"INTERSECT then INTERSECT"; 0;0;0;1; 
)
	# OPERATIONS: set 2D model clip volumes
	pset_model_clip_vol(@op1,&hslst1);
	pset_model_clip_vol(@op2,&hslst2);
	pfill_area(&fa);
	# VERIFICATIONS: verify absence/presence of pixels
	tvprintf(1, "setmodelclipvolume operations using %s\n",@text);
        im_confirm_point3(xdisplay,xwindow,1,0,testpt1,@ll,5,1,
		"(2D)lower left corner");
        im_confirm_point3(xdisplay,xwindow,1,0,testpt2,@lr,5,1,
		"(2D)lower right corner");
        im_confirm_point3(xdisplay,xwindow,1,0,testpt3,@ur,5,1,
		"(2D)upper left corner");
        im_confirm_point3(xdisplay,xwindow,1,0,testpt4,@ul,5,1,
		"(2D)upper right corner");
	i_pause();
	# CLEANUP: delete fillarea and all setmodelclipvolumes elements
	pdel_elem();
	pdel_elem();
	pdel_elem();
end

# 3D test:
foreach @op1 @op2 @text @ll @lr @ur @ul (
	PMC_REPLACE; PMC_INTERSECT;"REPLACE then INTERSECT"; 0;1;0;1; 
	PMC_REPLACE; PMC_REPLACE;"REPLACE then REPLACE"; 1;1;0;1; 
	PMC_INTERSECT; PMC_REPLACE;"INTERSECT then REPLACE"; 1;1;0;1; 
	PMC_INTERSECT; PMC_INTERSECT; "INTERSECT then INTERSECT";0;1;0;1; 
)
	# OPERATIONS: set 3D model clip volumes 
	pset_model_clip_vol3(@op1,&hslst31);
 	pset_model_clip_vol3(@op2,&hslst32);
	pfill_area3(&fa3);
	# VERIFICATIONS: verify absence/presence of pixels
	tvprintf(1, "setmodelclipvolume3 operations using %s\n",@text);
        im_confirm_point3(xdisplay,xwindow,1,0,testpt31,@ll,5,1,
		"(3D)lower left corner");
        im_confirm_point3(xdisplay,xwindow,1,0,testpt32,@lr,5,1,
		"(3D)lower right corner");
        im_confirm_point3(xdisplay,xwindow,1,0,testpt33,@ur,5,1,
		"(3D)upper left corner");
        im_confirm_point3(xdisplay,xwindow,1,0,testpt34,@ul,5,1,
		"(3D)upper right corner");
	i_pause();
	# CLEANUP: delete fillarea and all setmodelclipvolumes elements
	pdel_elem();
	pdel_elem();
	pdel_elem();
end


tendtest();
