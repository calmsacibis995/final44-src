#!/bin/sh
# $Author: leres $ $Date: 88/09/14 03:36:56 $
# $Header: Configure,v 1.4 88/09/14 03:36:56 leres Exp $
# $Revision: 1.4 $
# CAP configuration shell script.  This ain't perfect, but it's a start
# execute with /bin/sh Configure if your system won't run it (ksh is okay
# too)
# 
# Usage: Configure [output file name]
#
fastether="define([fastether],1) # For papif and samples"
needselfdef="define([selfdefinetypes],1)"
ccompiler=cc
# ccompiler="define([thecompiler],[cc])"
# lpd system "bsd" or sys v "lp"
lpd="bsd"
mydir=`pwd`
PCAT=/bin/cat
PGREP=grep
PNM=/bin/nm
# define to sh or /bin/sh if shell scripts can't be "executed" for some reason
USESH=""
export PGREP
os=""
ossecondary=""

echo "This is the CAP configuration script.  This will attempt to help"
echo "you get the CAP libraries and component programs configured"
echo "Please refer to NOTES before you run if you haven't already"
echo "before you run through this"
echo
echo 

echo
echo "MAJOR CONFIGURATION"

# Configure OS
echo "Checking for Ultrix 2.0 or later versions of Ultrix"
# Ultrix2.0
if [ -f /vmb.exe ]; then
	if [ -d /var ]; then
		ossecondary="ultrix22"
		echo "Ultrix 2.2 or later version of Ultrix"
	else
		echo "Ultrix 2.0 or later version of Ultrix"
	fi
	osdefault="ultrix20"
fi
# sunos
if [ -z "${osdefault}" ]; then
	echo "Checking for SunOS"
	if [ -f /bin/sun ]; then
		/bin/sun 2>/dev/null >/dev/null
		if [ $? -eq 0 ]; then
			echo "SunOS"
			osdefault="sunos"
		fi
	fi
fi
# IBM RT
if [ -z "${osdefault}" ]; then
	echo "Checking for IBM RT running ACIS 4.2/4.3"
	if [ -f /lib/ropt ]; then
	  if [ -d /usr/ibm ]; then
		osdefault="bsd"
		echo "IBM RT with ACIS 4.x"
		ossecondary="acis 4.x"
	   if [ -f /bin/pcc ]; then
echo "I see /bin/pcc - I will use this instead of cc in case"
echo "you have the MetaWare High C compiler set as default"
		ccompiler="pcc"
	   else
echo "WARNING: the MetaWare High C compiler and CAP are not compatible"
echo "modify the thecompiler define to point to the portable C compiler"
echo "if the default happens to be hc"
	   fi
	  fi
	fi
fi
# Pyramid
if [ -z "${osdefault}" ]; then
	echo "Checking for Pyramid"
	if [ -f /bin/pyr ]; then
		/bin/pyr
		rc=$?
		if [ $rc -eq 0 ]; then
			echo "Pyramid"
			osdefault="pyr"
		fi
	fi
fi
# A/UX, hpux
if [ -z "${osdefault}" ]; then
	echo "Checking for System V based machines"
	if [ -f /bin/uname ]; then
		case "`uname`" in
		"A/UX")
			echo "A/UX"
			osdefault="aux"
			lpd="lp"
			break
		;;
		"HP-UX")
			echo "HP-UX"
			osdefault="hpux"
			lpd="lp"
			if [ `uname -r` -ge 6 ]; then
				echo "Release 6.0 or later"
			else
echo "OLD hpux version: you will have to define NEEDMSGHDR in CAPOSDEFS"
echo "by hand (c.f. PORTING and NOTES)"
			fi
			break
		;;
		esac
	fi
fi
# Default
if [ -z "${osdefault}" ]; then
  echo "Establishing default as BSD"
  echo "Warning: unable to guess unix variant, setting to bsd standard"
  echo "bsd should be good for the following:"
  echo "  IBM-RT (ACIS 4.2,4.3), Ultrix 1.0, Ultrix 1.1, BSD 4.2,"
  echo "  and BSD 4.3"
  osdefault="bsd"
fi
echo
valid=0
while [ ${valid} -eq 0 ];
do
  echo "Operating System type? (default ${osdefault}, ? for valid items)"
  read os arg1
  if [ -z "${os}" ]; then
	os=${osdefault}
  fi
  case ${os} in
	"ultrix20") valid=1;;
	"ultrix12") valid=1;;
	"bsd") valid=1;;
	"hpux") valid=1;;
	"aux") valid=1;;
	"pyr") valid=1;;
	"sunos") valid=1;;
	"?"|*)
		if [ "${os}" != "?" ]; then
			echo "unknown type ${os}, valid are:"
		fi
		echo "	bsd - try if you aren't sure";
		echo "	ultrix12 - Ultrix 1.2";
		echo "	ultrix20 - Ultrix 2.0 or later";
		echo "	hpux - HP-UX for series 9000";
		echo "	aux - A/UX";
		echo "	pyr - pyramid";
		echo "	sunos - suns";
	 ;;
  esac
done
echo "Will configure for ${os}"
echo
echo
echo "Some machines send packets fast enough to overrun the Kinetics box"
echo "running KIP.  You should answer yes if you know this is the case.  If"
echo "you aren't sure, answer no.  You can go back and recompile the"
echo "relevant programs later.  Generally, the programs affected are the"
echo "LaserWriter printing programs."
echo
echo "Systems affected are generally those whose network interfaces are faster"
echo "than the DEQNA (DEC Q-Bus Network Adapter).  Machines at risk may"
echo "include, but are not limited to, Sun 3's and 4's and DEC VAX 8xxx class"
echo "machines with DEBNT/DEBNA's"
echo
result=0
while :
do
  echo "Do you want to throttle output to the Kinetics box (default no)?"
  read ans
  if [ -z "${ans}" ]; then
	ans="no"
  fi
  case ${ans} in
	"y"|"ye"|"yes") result=1; break;;
	"no"|"n") fastether="# $fastether"; result=0; break;;
	*) echo "you must answer yes or no or carriage return for no" ;;
  esac
done
if [ $result -eq 0 ]; then
  echo "We won't slow down printing code"
else
  echo "We will slow down printing code"
fi
# check types.h
echo
echo "Checking to see if the sequence"
echo "	#include <sys/param.h>"
echo "	#include <sys/types.h>"
echo "causes a problem at your site.  Assuming your C compiler returns error"
echo "codes."
echo " Temporary files: /tmp/cx$$.c, cx$$.o"
echo "[Hit carriage return to continue]"
read ans
trap "
echo Exiting... Wait...
if [ -f /tmp/cx$$.c ]; then rm -f /tmp/cx$$.c; fi; 
if [ -f cx$$.o ]; then rm -f cx$$.o fi
exit 255" 2
echo "#include <sys/param.h>" > /tmp/cx$$.c
echo "#ifndef _TYPES" >> /tmp/cx$$.c
echo "# include <sys/types.h>" >> /tmp/cx$$.c
echo "#endif" >> /tmp/cx$$.c
${ccompiler} -c /tmp/cx$$.c > /dev/null 2>/dev/null
rc=$?
if [ $rc -ne 0 ]; then
  echo
  echo "The sequence does cause a problem, checking to see if the"
  echo "actual sequence:"
  echo "	#include <sys/param.h>"
  echo "	#ifndef _TYPES"
  echo "	# include <sys/types.h>"
  echo "	#endif"
  echo "can be made to work by define _TYPES everywhere"
  echo "[Hit carriage return to continue]"
  read ans
  ${ccompiler} -c -D_TYPES /tmp/cx$$.c > /dev/null 2>/dev/null
  rc=$?
  if [ $rc -ne 0 ]; then
    echo
    echo "This failed, continuing configuration, but you probably won't be"
    echo "able to compile because sys/param.h or sys/types are probably not"
    echo "there and even if they are, CAP sources make invalid assumptions"
    echo "about them"
  fi
else
  echo
  echo "No problems here"
  needselfdef="# ${needselfdef}"
fi
rm -f /tmp/cx$$.c
if [ -f cx$$.o ]; then
  rm -f cx$$.o
fi
trap 2
echo
echo "Checking for various system calls.  (But not the list of system"
echo "call for system V compatibility). Temp files: m4.tmp, /tmp/cx$$"
echo
echo "[Hit carriage return to continue]"
read ans
echo
trap "
echo Exiting... Wait...
if [ -f /tmp/cx$$ ]; then rm -f /tmp/cx$$; fi; exit 255" 2
echo "Getting name list for /lib/libc.a..."
${PNM} /lib/libc.a > /tmp/cx$$
names=$?
if [ $names -ne 0 ]; then
 echo "Couldn't get the name list!"
else
 echo "Done, running function configuration"
 ${USESH} ./conf.func.sh /tmp/cx$$ conf.func.lst m4 m4.tmp
 rc=$?
 if [ $rc -eq 1 ]; then
   if [ -z "${USESH}" ]; then
     sh ./conf.func.sh /tmp/cx$$ conf.func.lst m4 m4.tmp
   fi
 fi
 echo "Done."
fi
rm -f /tmp/cx$$
trap 2
# now setup
if [ -z "$1" ]; then
 of=m4.setup
else
 of=$1
fi
echo
echo "[Hit carriage return to continue]"
read ans
echo
if [ -f ${of} ]; then
  echo "Getting ready to overwrite existing ${of}"
else
  echo "Getting ready to create ${of}"
fi
echo "[Hit carriage return to continue]"
read ans
echo "Creating ${of}"
exec > ${of}
${PCAT} <<\EOT
define(`concat',$1$2$3$4$5$6$7$8$9)
changequote([,])

# os - one of:
#   "bsd" - bsd 4.2, bsd 4.3, ultrix 1.1, acis 4.2,4.3 other
#       "standard" bsd systems without nfs
#   "ultrix12" - Ultrix 1.2
#   "ultrix20" - Ultrix 2.0 or greater
#   "hpux" - HP/UX
#   "aux" - A/UX
#   "pyr" - pyramid (in BSD universe)
#   "sunos" - SunOS
# Warning: hpux, pyr are hardcoded in some of the makefiles (sorry)

# MAJOR CONFIGURATION
# set to one of the above (or configure your own below)
EOT
echo "define([os],[$os])"
echo
echo "# System call configuration (not for system v compatibilty)"
echo "# known: X_GETOPT, X_VPRINTF, X_GETMNT, X_STATFS, X_QUOTA,"
echo "# X_SUNQUOTA, X_FLOCK, X_LOCKF, X_FCNTLLOCKF"
${PCAT} m4.tmp
echo
echo "# GETOPT support"
echo "ifdef([X_GETOPT],[],[define([needgetopt],[att_getopt.o])])"
echo "# VPRINTF support"
echo "ifdef([X_VPRINTF],[define([usevprintf], 1)],[])"
echo
echo "# Path to cap sources: useful for testing"
echo "define([cwd],[${mydir}])" 
echo "# turn on if your system sends packets very quickly (see"
echo "# applications/aufs/INSTALLATION)"
echo "${fastether}"
echo
echo "# uncomment if your param.h includes types.h and types.h doesn't"
echo "# prevent itself from being included twice"
echo "# define _TYPES"
echo "${needselfdef}"
${PCAT} <<\EOT1
# MINOR CONFIGURATION: configure various programs

#define([columbia],1) # so columbia can do things quickly
#define([debug],1) # testing things (without disrupting)
define([syslog],1) # use syslog(3) routines

# location of include files
define([includedir],[[/usr/include]])
# location of des subroutine source (see lib/afp/README)
define([desloc],[[../../extras]])
# location of atalk.local, etc.
define([etcdest],[[/etc]])
ifdef([columbia],[define([etcdest],[[/usr/local/lib/cap]])])
# location of user cap programs
define([capdestdir],[[/usr/local/cap]])
# location of cap "server" programs
define([caplibdestdir],[[/usr/local/lib/cap]])
# location of cap libraries
define([libdestdir],[[/usr/local/lib]])
# override for aux (doesn't search /usr/local/lib)
ifelse(os,[aux],[define([libdestdir],[[/usr/lib]])])
# cap library names
define([caplib],[[libcap.a]])
define([afplib],[[libafp.a]])
define([afpclib],[[libafpc.a]])
# names to load cap libraries with
define([libcap],[[-lcap]])
define([libafp],[[-lafp]])
define([libafpc],[[-lafpc]])
# any special libraries
define([libspecial],[])

# Aufs: see applications/aufs/INSTALLATION

# WARNING: OS DEPENDENT
#define([smartunixfinderinfo],1)

# valid here are -DNONXLATE, -DFULL_NCS_SUPPORT
#  or GGTYPE="gid_t"
# Others: USESTATFS, USEGETMNT, USECHOWN, USEQUOTA, USESUNQUOTA are
#  autoconfigured
define([aufsosdefs],[])

#lwsrv: see applications/lwsrv/README
# Valid is: -DADOBE_DSC2_CONFORMANT
define([simpleflags],[])

#papif: see applications/papif/README

# uncomment and set to right location to turn on printing "plain text files"
# define([pstextloc],[[\"/usr/local/lib/ps/pstext\"]])

# uncomment and set to right location to turn on page reversal
# define([psrevloc],[[\"/usr/local/lib/ps/psrev\"]])

# valid are:
#  -DVERBOSELOG - default (set =0 to turn off)
#  -DNO_STRUCT - default is on (structured)
#  -DNOACCT - default is on (accounting)
#  -DIDLESTUFF - default is off
#  -DSFLOWQ - default is 8 (min 1, max 8)
#  -DRFLOWQ - default is 8 (min 1, max 8)
#  -DATPRESPONSETIMEOUT - default is 120 (2 minutes) - in seconds
#  -DWATCHTIME - default is 10 seconds (in seconds)
#  -DDEBUG - default is off
#  -DSTRIPCONTROLD - default is off
#  -DMAPCRTOLF - default is off
#  see papif README file for explanations of the above
# The following defines are recommended for System V lp model printers
# (vs. bsd lpd)
#  -DWATCHTIME=0 (no status) -DNOACCT
EOT1
if [ "${lpd}" = "lp" ]; then
	echo "define([papflags],[-DWATCHTIME=0 -DNOACCT])"
else
	echo "define([papflags],[-DIDLESTUFF])"
fi
echo
echo "# Set -DBANNERFIRST if you want the banner page to come out as the"
echo "#  first page instead of the last page "
echo "# Set -DBANNERLAST if want it last"
echo "# add -DCHARGEBANNER if you want to charge the banner page to the user"
echo "# on system V - there is no accounting, so leave blank"
if [ "${lpd}" = "lp" ]; then
	echo "define([papbanner],[])"
else
	echo "define([papbanner],[-DCHARGEBANNER])"
fi
${PCAT} <<\EOT3

# for cap.printers - uncomment and change the following line to point
# papif, et. al. to a location other than /etc/cap.printers.  (Note:
# line below would set it to $etcdir/cap.printers)
# define([capprinters],concat([\"],etcdest,[/],[cap.printers],[\"]))
ifdef([columbia],
       [define([capprinters],concat([\"],etcdest,[/],[cap.printers],[\"]))])
# for atalkdbm - allows change following line(s) to modify atalk.local
# (probably shouldn't).  Remember that atalk.local is expected to
# be in etcdest
define([atalklocal],concat([\"],etcdest,[/],[atalk.local],[\"]))
define([configdir],concat([\"],etcdest,[\"]))

# in case you want to globally change the c compiler
EOT3
echo "define([thecompiler],[${ccompiler}])"
${PCAT} <<\EOT4
define([theloader],[ld])

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#		      END OF CONFIGABLE OPTIONS                            #
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# You should only edit past here if you are "porting"
# Automatics
define([osname],
	ifelse(	os,[ultrix12],[Ultrix 1.2],
		os,[ultrix20],[Ultrix 2.0],
		os,[aux],[A/UX],
		os,[sunos],[SunOS],
		os,[hpux],[HP-UX (for 9000 series)],
		os,[bsd],[Standard BSD],
		os,[pyr],[Pyramid in BSD universe],
		[Unknown]))
define([cflags],ifdef([selfdefinetypes],[-O -D_TYPES],[-O]))
define([bigcflags],ifelse(os,[hpux],[+Nd2000 +Ns2000]))
ifelse(os,[pyr],[
	define([cflags],concat(cflags,[ -q]))])
# was used for nbp, but found we needed more... leave in case
define([nbpflags],[])

define([lflags],[])
define([mflags],[])
# aux's c compiler isn't nice - it doesn't have a preprocessor
# definition for aux.  So, let's invent one.  Also turn on -n
# for shared code.
ifelse(os,[aux],[
	define([cflags],concat(cflags,[ -n -Daux]))
	define([lflags],concat(lflags,[ -n]))
])
# check to see if we need sysvinstall usage
ifelse(	os,[aux],[define([sysvinstall],[yes])],
	os,[hpux],[define([sysvinstall],[yes])])
# for cap library
# Valid are:
#  NOFFS - no ffs function defined, fake it out
#  LOCALTIME_GTOD - uses pd localtime, but gettimeofday always reads
#   disk based time of day.  Always defined for AUX for now.  Probably
#   needs to be changed for versions of Aux after 1.0
#  NORECVMSG - no recvmsg in system (fake it out)
#  NOSENDMSG - no recvmsg in system (fake it out)
define([caposdefs],
	concat( ifdef([X_NOFFS],[ -DNOFFS],[]),
		ifelse(os,[aux],[ -DLOCALTIME_GTOD],[]),
		ifdef([X_NORECVMSG], [ -DNORECVMSG],[]),
		ifdef([X_NOSENDMSG], [ -DNOSENDMSG],[])))
# for afp library
# two cases for X_LOCKF - if lockf isn't defined
# first: X_FCNTLLOCKF is defined, so just note that lockf uses fcntl.h
# second: "         " isn't defined so define no lockf
define([afposdefs],
	concat(	ifdef([X_FLOCK],[],[ -DNOFLOCK]),
		ifdef([X_LOCKF],[],
		   [ifdef([X_FCNTLLOCKF],[-DLOCKFUSESFCNTL],[-DNOLOCKF])])))
# for aufs
define([aufsosdefs],
	concat(	aufsosdefs,
		ifdef([X_STATFS],[ -DUSESTATFS],[]),
		ifdef([X_GETMNT],[ -DUSEGETMNT],[]),
		ifdef([X_QUOTA],[ -DUSEQUOTA],[]),
		ifdef([X_SUNQUOTA],[ -DUSESUNQUOTA],[])))
# if no ranlib (or fakeout like hpux) and need to order libaries
ifelse(os, [dummy], [define(uselordertsort,1)],
       os, [aux], [define(uselordertsort,1)])

# lw config
define([lwflags],ifdef([fastether],[-DSFLOWQ=1],[]))

# syslog support
ifdef([syslog],[
	define([libspecial],concat(libspecial,[ -lsyslog]))
	define([cflags],concat(cflags,[[[ -DSYSLOG -I/usr/include/4.3syslog]]])))])

#NBPFLAGS = nbpflags()
#BIGCFLAGS = bigcflags()
#CFLAGS = cflags()
#LFLAGS = lflags()
#AFPOSDEFS = afposdefs()
#AUFSOSDEFS = aufsosdefs()

ifdef([debug],[
# location of include files
 define([includedir],[cwd])
# location of des subroutine source (see lib/afp/README)
 define([desloc],[[../../extras]])
# location of atalk.local, etc.
 define([etcdest],concat(cwd,[[[/etc]]]))
# location of user cap programs
 define([capdestdir],concat(cwd,[[[/bin]]]))
# location of cap "server" programs
 define([caplibdestdir],concat(cwd,[[[/bin]]]))
# location of cap libraries
 define([libdestdir],concat(cwd,[[[/lib]]]))
# cap library names
 define([caplib],[[libcap.a]])
 define([afplib],[[libafp.a]])
 define([afpclib],[[libafpc.a]])
# names to load cap libraries with
 define([libcap],concat(cwd,[[[/lib/libcap.a]]]))
 define([libafp],concat(cwd,[[[/lib/libafp.a]]]))
 define([libafpc],concat(cwd,[[[/lib/libafpc.a]]]))
 define([capprinters],concat([\"],etcdest,[/],[cap.printers],[\"]))
 define([cflags],concat(cflags,[ -I],includedir))
 define([atalklocal],concat([\"],etcdest,[/],[atalk.local],[\"]))
 define([configdir],concat([\"],etcdest,[\"]))
])

define([datestring],maketemp(/tmp/capcXXXXXX))
syscmd(date > datestring())
##########MARKER##########
# Makefile autoconfigured for a: \
	osname() system on include(datestring())
syscmd(rm datestring())

MFLAGS=mflags()
LFLAGS=lflags()
CC=thecompiler()
LD=theloader()
EOT4
exec > /dev/tty
echo "${of} configured"
echo "Generate makefiles by typing: gen.makes (or sh gen.makes) from"
echo "the top level directory"
echo
echo "MAKE SURE YOU HAVE READ NOTES.  There are machine dependencies"
echo "that are not handled by Configure!!!!!"
echo
echo "Program configuration can be done by modifying ${of}"
echo "under the minor configuration parameters"
