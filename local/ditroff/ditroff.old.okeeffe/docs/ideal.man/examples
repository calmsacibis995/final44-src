.NH 1
Examples
.NH 2
B-Trees
.PP
This example depicts a B-tree whose nodes have many children.*
.FS
*P. J. Weinberger, Unix B-trees, Bell Laboratories, 1981.
.FE
.IS
...colwid 6.0
...width 3.0
...libfile rect
arrow {
	var tl, hd, headvec, head;
	headvec = hd + head*(tl - hd)/abs(tl - hd);
	conn tl to hd;
	conn hd + cis(20)*(headvec - hd)
		to hd
		to hd + cis(-20)*(headvec - hd);
}

dot {
	var s, e;
	'\(bu' at 0.5[s, e] - (0,0.1);
}

per {
	var s, e;
	'.' at 0.5[s, e];
}

main {
var rw, rh;
rw = 2;
rh = 1;
var hmv, vmv;
hmv = 0.6;
vmv = 0.3;
var ah;
ah = 0.2;
put root:rect{
	sw = (0,1);
	wd = rw;
	ht = 1;
	};
put next:rect{
	sw = youngest.sw + 2*(hmv, vmv);
	wd = rw;
	ht = rh;
	};
put youngest:rect{
	sw = bro.sw + (hmv, vmv);
	wd = rw;
	ht = rh;
	opaque;
	};
put bro:rect{
	sw = eldest.sw + (hmv, vmv);
	wd = rw;
	ht = rh;
	opaque;
	};
put eldest:rect{
	im(nw) = im(3[root.nw,root.sw]);
	re(0.5[nw, next.nw]) = re(0.5[root.nw, root.ne]);
	wd = rw;
	ht = rh;
	opaque;
	put arrow{
		head = ah;
		tl = 0.0[sw, se] + 0.5 * (nw - sw);
		hd = tl - (0, 1) * cis(-27);
	};
	put arrow{
		head = ah;
		tl = 0.33[sw, se] + 0.5 * (nw -sw);
		hd = tl - (0,1) * cis(-9);
	};
	put arrow{
		head = ah;
		tl = 0.67[sw, se] + 0.5 * (nw - sw);
		hd = tl - (0,1) * cis(9);
	};
	put arrow{
		head = ah;
		tl = 1.0[sw, se] + 0.5 * (nw -sw);
		hd = tl - (0,1) * cis(27);
	};
	};
put arrow{
	head = ah;
	tl=root.sw + 0.5 * (root.nw - root.sw);
	hd=eldest.nw;
};
put arrow{
	head = ah;
	tl=0.1[root.sw,root.se] + 0.5 * (root.nw - root.sw);
	hd=bro.nw;
};
put a:arrow{
	head = ah;
	tl=0.2[root.sw,root.se] + 0.5 * (root.nw - root.sw);
	hd=youngest.nw;
};
put b:arrow{
	head = ah;
	tl = 0.5[root.ne, root.se];
	hd = next.nw;
};
put arrow{
	head = ah;
	hd = root.nw;
	tl = 0.5[root.nw, root.ne] + (0, 1.0);
};
conn next.nw to youngest.nw using 3 dot{}<s, e>;
conn next.se to youngest.se using 3 dot{}<s, e>;
conn b.tl to a.tl using 4 per{}<s, e>;
}
.IF
.P1
\&...libfile rect
arrow {
	var tl, hd, headvec, head;
	headvec = hd + head*(tl - hd)/abs(tl - hd);
	conn tl to hd;
	conn hd + cis(20)*(headvec - hd)
		to hd
		to hd + cis(-20)*(headvec - hd);
}

dot {
	var s, e;
	'\e(bu' at 0.5[s, e] - (0,0.1);
}

per {
	var s, e;
	'.' at 0.5[s, e];
}

main {
	var rw, rh;
	rw = 2;
	rh = 1;
	var hmv, vmv;
	hmv = 0.6;
	vmv = 0.3;
	var ah;
	ah = 0.2;
	put root: rect {
		sw = (0,1);
		wd = rw;
		ht = 1;
	};
	put next: rect {
		sw = youngest.sw + 2*(hmv, vmv);
		wd = rw;
		ht = rh;
	};
	put youngest: rect {
		sw = bro.sw + (hmv, vmv);
		wd = rw;
		ht = rh;
		opaque;
	};
	put bro: rect {
		sw = eldest.sw + (hmv, vmv);
		wd = rw;
		ht = rh;
		opaque;
	};
	put eldest: rect {
		im(nw) = im(3[root.nw,root.sw]);
		re(0.5[nw, next.nw]) = re(0.5[root.nw, root.ne]);
		wd = rw;
		ht = rh;
		opaque;
		put arrow {
			head = ah;
			tl = 0.0[sw, se] + 0.5 * (nw - sw);
			hd = tl - (0, 1) * cis(-27);
		};
		put arrow {
			head = ah;
			tl = 0.33[sw, se] + 0.5 * (nw -sw);
			hd = tl - (0,1) * cis(-9);
		};
		put arrow {
			head = ah;
			tl = 0.67[sw, se] + 0.5 * (nw - sw);
			hd = tl - (0,1) * cis(9);
		};
		put arrow {
			head = ah;
			tl = 1.0[sw, se] + 0.5 * (nw -sw);
			hd = tl - (0,1) * cis(27);
		};
	};
	put arrow {
		head = ah;
		tl=root.sw + 0.5 * (root.nw - root.sw);
		hd=eldest.nw;
	};
	put arrow {
		head = ah;
		tl=0.1[root.sw,root.se] + 0.5 * (root.nw - root.sw);
		hd=bro.nw;
	};
	put a: arrow {
		head = ah;
		tl=0.2[root.sw,root.se] + 0.5 * (root.nw - root.sw);
		hd=youngest.nw;
	};
	put b: arrow {
		head = ah;
		tl = 0.5[root.ne, root.se];
		hd = next.nw;
	};
	put arrow {
		head = ah;
		hd = root.nw;
		tl = 0.5[root.nw, root.ne] + (0, 1.0);
	};
	conn next.nw to youngest.nw using 3 dot{}<s, e>;
	conn next.se to youngest.se using 3 dot{}<s, e>;
	conn b.tl to a.tl using 4 per{}<s, e>;
}
.P2
.NH 2
A Sector Grid
.PP
Norm Schryer used this figure to show how numerical integration
is used to find the area of planar regions.
.IS
...colwid 8.0
...width 2.0
...libfile hole
gridline {
	var a,b;
	var neg, pos;
	conn a - neg to a + pos;
}

main {
	var n;
	n = 21;
	conn (0,0) to (0,1+1/(n-1)) using n gridline {neg = 0; pos = 1;} <a,b>;
	conn (0,0) to (1+1/(n-1),0) using n gridline {neg = 0; pos = (0,1);} <a,b>;
	put hole {
		radius = 1;
		center = (0,0);
		opaque exterior;
	};
}
.IF
.P1





\&...libfile hole
gridline {
	var a,b;
	var neg, pos;
	conn a - neg to a + pos;
}

main {
	var n;
	n = 21;
	conn (0,0) to (0,1+1/(n-1))
		using n gridline {
			neg = 0;
			pos = 1;
		} <a,b>;
	conn (0,0) to (1+1/(n-1),0)
		using n gridline {
			neg = 0;
			pos = (0,1);
		} <a,b>;
	put hole {
		radius = 1;
		center = (0,0);
		opaque exterior;
	};
}
.P2
.NH 2
Polygon Clipping
.PP
This example illustrates all possible positions of a line
segment with respect to a polygon.
It will appear in a book on graphics and image processing.*
.FS
*T. Pavlidis, Graphics and Image Processing, to be published.
.FE
.ps 8
.EQ
delim $$
gsize 8
define P12 " P sub 1 ( P sub 2 ) "
define P21 " P sub 2 ( P sub 1 )"
.EN
.IS
...width 4.5
...colwid 6.0
...libfile circle
box spot{
	var loc;
	put circle{
		var center, radius;
		center = loc;
		radius = 0.02;
		opaque;
		};
	}
box vert{
	var midd, llength;
	conn midd+llength to midd-llength;
	}
box poly{
	var c1,p1,p2,p3,p4,p5,r1,tp,bp,ta,tb;
	p1 = c1+r1;
	p2 = cis(65)[c1,p1];
	p3 = cis(170)[c1,p1];
	p4 = cis(190)[c1,p1];
	p5 = cis(300)[c1,p1];
	tp = c1+(0,ta)*r1;
	bp = c1+(0,tb)*r1;
	conn p1 to p2;
	conn p2 to p3;
	conn p3 to p4;
	conn p4 to p5;
	conn p5 to p1;
	put vert{ midd=c1; llength=(0,1.6)*r1; };
	put spot{ loc=tp; };
	put spot{ loc=bp; };
	left '$P12$' at tp+0.1;
	left '$P21$' at bp+0.1;
	}
...minx -1
...maxx 6
...miny -1
...maxy 12
box main {
	put poly{
		c1 =(1,9); r1 = (1,0); ta=1.1; tb=1.4;
		left '$++--$' at p2-1.5;
		right '(a)' at c1-(0.7,1.2);
		};
	put poly{
		c1 =(3.5,9); r1 = (1,0); ta=1.1; tb=0.2;
		left '$+---$' at p2+0.5;
		left '$(-+--)$' at p2+(0.5,-0.15);
		right '(b)(b1)' at c1-(0.7,1.2);
		};
	put poly{
		c1 =(1,5); r1 = (1,0); ta=1.1; tb=-1;
		left '$+--+$' at p2-1.5;
		left '$(-++-)$' at p2-(1.5,0.15);
		right '(c)(c1)' at c1-(0.7,1.2);
		};
	put poly{
		c1 =(3.5,5); r1 = (1,0); ta=0.2; tb=-1;
		left '$---+$' at p2+(0.5,-0.3);
		left '$(--+-)$' at p2+(0.5,-0.45);
		right '(d)(d1)' at c1-(0.7,1.2);
		};
	put poly{
		c1 =(1,1); r1 = (1,0); ta=-1; tb=-1.4;
		left '$--++$' at p4-(0,0.5);
		right '(e)' at c1-(0.7,1.2);
		};
	put poly{
		c1 =(3.5,1); r1 = (1,0); ta=0.2; tb=-0.2;
		left '$----$' at p1+0.2;
		right '(f)' at c1-(0.7,1.2);
		};
}
.IE
.ps
.P1
\&.ps 8
.EQ
delim off
.EN
\&.EQ
gsize 8
define P12 " P sub 1 ( P sub 2 ) "
define P21 " P sub 2 ( P sub 1 )"
\&.EN
\&...libfile circle
\&...minx -1
\&...maxx 6
\&...miny -1
\&...maxy 12
box spot{
	var loc;
	put circle{
		var center, radius;
		center = loc;
		radius = 0.02;
		opaque;
		};
	}
box vert{
	var midd, llength;
	conn midd+llength to midd-llength;
	}
box poly{
	var c1,p1,p2,p3,p4,p5,r1,tp,bp,ta,tb;
	p1 = c1+r1;
	p2 = cis(65)[c1,p1];
	p3 = cis(170)[c1,p1];
	p4 = cis(190)[c1,p1];
	p5 = cis(300)[c1,p1];
	tp = c1+(0,ta)*r1;
	bp = c1+(0,tb)*r1;
	conn p1 to p2;
	conn p2 to p3;
	conn p3 to p4;
	conn p4 to p5;
	conn p5 to p1;
	put vert{ midd=c1; llength=(0,1.6)*r1; };
	put spot{ loc=tp; };
	put spot{ loc=bp; };
	left '$P12$' at tp+0.1;
	left '$P21$' at bp+0.1;
	}
box main {
	put poly{
		c1 =(1,9); r1 = (1,0); ta=1.1; tb=1.4;
		left '$++--$' at p2-1.5;
		right '(a)' at c1-(0.7,1.2);
		};
	put poly{
		c1 =(3.5,9); r1 = (1,0); ta=1.1; tb=0.2;
		left '$+---$' at p2+0.5;
		left '$(-+--)$' at p2+(0.5,-0.15);
		right '(b)(b1)' at c1-(0.7,1.2);
		};
	put poly{
		c1 =(1,5); r1 = (1,0); ta=1.1; tb=-1;
		left '$+--+$' at p2-1.5;
		left '$(-++-)$' at p2-(1.5,0.15);
		right '(c)(c1)' at c1-(0.7,1.2);
		};
	put poly{
		c1 =(3.5,5); r1 = (1,0); ta=0.2; tb=-1;
		left '$---+$' at p2+(0.5,-0.3);
		left '$(--+-)$' at p2+(0.5,-0.45);
		right '(d)(d1)' at c1-(0.7,1.2);
		};
	put poly{
		c1 =(1,1); r1 = (1,0); ta=-1; tb=-1.4;
		left '$--++$' at p4-(0,0.5);
		right '(e)' at c1-(0.7,1.2);
		};
	put poly{
		c1 =(3.5,1); r1 = (1,0); ta=0.2; tb=-0.2;
		left '$----$' at p1+0.2;
		right '(f)' at c1-(0.7,1.2);
		};
}
.P2
