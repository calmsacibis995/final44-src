.NH 1
Putting Boxes Together
.PP
In this section we present several complete
\*(id programs to show how to build up
pictures from boxes.
.NH 2
Naming Instances of Boxes
.PP
Most pictures involve more than placements of simple boxes.
And when pictures involve several boxes, certain geometrical
relationships should exist among them.
We can refer to the local variables of a box that has been put\(emall
we need to do is name the put statement.
Here is a simple example showing a diagram that could be used to illustrate
Pythagoras's Theorem for isoceles triangles:
.IS
...libfile rect
...width 1.0
main {
	put first: rect {
		sw = 0;
		ht = wd = 1;
	};
	put next: rect {
		nw = first.se;
		ht = wd = first.ht;
	};
	put last: rect {
		sw = first.ne;
		se = next.ne;
		ht = wd;
	};
}
.IF
.P1
main {
	put first: rect {
		sw = 0;
		ht = wd = 1;
	};
	put next: rect {
		nw = first.se;
		ht = wd = first.ht;
	};
	put last: rect {
		sw = first.ne;
		se = next.ne;
		ht = wd;
	};
}
.P2
.LP
First we place an instance of
.IT rect
called
.IT first .
Then we place another
.IT rect
with its upper left corner ($ne$)
at the lower right of
.IT first .
Finally, we draw a third square,
two of whose adjacent points are
identified with points on the first
two squares placed.
We could have used any two adjacent points on
.IT last :
if we had placed
$last.ne$ at $first.ne$
and $last.nw$ at $next.ne$,
\*(id would have figured all the relationships
out right, although the program might be quite
inscrutable to humans.
.PP
How can we circumscribe a triangle?
If we name the put statement that produces
the instance, we can just give its three
vertices as values for $z1$, $z2$, and $z3$
in an instance of
.IT circle .
.IS
...libfile circle
triangle {
	var z1, z2, z3;
	conn z1 to z2 to z3 to z1;
}
main {
	put T: triangle {
		z1 = 0;
		z2 = 1;
		z3 = (2,2);
	};
	put circle {
		z1 = T.z1;
		z2 = T.z2;
		z3 = T.z3;
	};
}
.IF
.P1
triangle {
	var z1, z2, z3;
	conn z1 to z2 to z3 to z1;
}

main {
	put T: triangle {
		z1 = 0;
		z2 = 1;
		z3 = (2,2);
	};
	put circle {
		z1 = T.z1;
		z2 = T.z2;
		z3 = T.z3;
	};
}
.P2
.NH 2
Parameter Section Commands
.PP
Any \*(id statement may appear in the parameter
section of a put statement.
This section illustrates some uses of this feature.
.PP
Suppose we will need to draw
pictures of a linked list before and after
insertion of a new node.
We might start with this definition
of a
.IT listnode :
.IS
...width 1.0
...colwid 8.0
listnode {
	put info: rect {
		var hook;
		hook = (nw + sw)/2;
		ht = lht;
		wd = lwd/2;
	};
	put next: rect {
		var c;
		c = (nw + se)/2;
		sw = info.se;
		ht = lht;
		wd = lwd/2;
	};
}
main {
	put listnode {
		info.sw = 0;
		var lht, lwd;
		lht = 1;
		lwd = 2;
	};
}
.IF
.P1
listnode {
	put info: rect {
		var hook;
		hook = (nw + sw)/2;
		ht = lht;
		wd = lwd/2;
	};
	put next: rect {
		var c;
		c = (nw + se)/2;
		sw = info.se;
		ht = lht;
		wd = lwd/2;
	};
}
.P2
.LP
This version of
.IT listnode
depends on
.IT rect .
Notice that it references two variables
($lwd$ and $lht$) that are not local to
itself:
these variables must be defined in any
environment in which $listnode$ is put.
(They are global to it.)
We have added statements that define new
variables ($hook$ in $first$ and $c$ in $next$)
that are local to the particular instance of
.IT rect .
.PP
Now we draw the list as it is before insertion:
.IS
arrow {
	var hd, tl, head, wing;
	head = 0.2;
	wing = head*(tl-hd)/abs(tl-hd);
	conn hd to tl;
	conn hd + cis(25)*wing to hd to hd + cis(-25)*wing;
}
...width 2.0
main {
	var lht, lwd;
	lht = 1;
	lwd = 2*lht;
	put first: listnode {
		info.sw = 0;
	};
	put last: listnode {
		info.sw = 2[first.info.sw,first.next.se];
		conn next.sw to next.ne;
	};
	put new: listnode {
		info.nw = 2[first.next.ne,first.next.se];
	};
	put arrow {
		hd = last.info.hook;
		tl = first.next.c;
	};
	put arrow {
		hd = new.info.hook;
		tl = hd - 1;
		right 'new ' at tl;
	};
	put arrow {
		hd = first.info.hook;
		tl = hd - 1;
		right 'list ' at tl;
	};
}
.IF
.P1
main {
	var lht, lwd;
	lht = 1;
	lwd = 2*lht;
	put first: listnode {
		info.sw = 0;
	};
	put last: listnode {
		info.sw = 2[first.info.sw,first.next.se];
		conn next.sw to next.ne;
	};
	put new: listnode {
		info.nw = 2[first.next.ne,first.next.se];
	};
	put arrow {
		hd = last.info.hook;
		tl = first.next.c;
	};
	put arrow {
		hd = new.info.hook;
		tl = hd - 1;
		right "new " at tl;
	};
	put arrow {
		hd = first.info.hook;
		tl = hd - 1;
		right "list " at tl;
	};
}
.P2
.LP
Here we have added statements directly to the
parameter section of two of the calls to
.IT arrow
to avoid either naming each instance of
.IT arrow
or naming the tails of these arrows so that
text could be placed there.
We have also added a statement to draw the
null pointer in box
.IT last .
.PP
The program to draw the list after insertion of the
new node remains largely unchanged:
the nodes haven't moved; only the arrows hooking them
together have moved.
.ne 4i
.IS
main {
	var lht, lwd;
	lht = 1;
	lwd = 2*lht;
	put first: listnode {
		info.sw = 0;
	};
	put last: listnode {
		info.sw = 2[first.info.sw,first.next.se];
		conn next.sw to next.ne;
	};
	put new: listnode {
		info.nw = 2[first.next.ne,first.next.se];
	};
	put arrow {
		hd = new.info.nw;
		tl = first.next.c;
	};
	put arrow {
		hd = last.info.sw;
		tl = new.next.c;
	};
	put arrow {
		hd = new.info.hook;
		tl = hd - 1;
		right 'new ' at tl;
	};
	put arrow {
		hd = first.info.hook;
		tl = hd - 1;
		right 'list ' at tl;
	};
}
.IF
.P1
main {
	var lht, lwd;
	lht = 1;
	lwd = 2*lht;
	put first: listnode {
		info.sw = 0;
	};
	put last: listnode {
		info.sw = 2[first.info.sw,first.next.se];
		conn next.sw to next.ne;
	};
	put new: listnode {
		info.nw = 2[first.next.ne,first.next.se];
	};
	/* These two arrows are different: */
	put arrow {
		hd = new.info.nw;
		tl = first.next.c;
	};
	put arrow {
		hd = last.info.sw;
		tl = new.next.c;
	}
	/* These are the same as before: */
	put arrow {
		hd = new.info.hook;
		tl = hd - 1;
		right "new " at tl;
	};
	put arrow {
		hd = first.info.hook;
		tl = hd - 1;
		right "list " at tl;
	};
}
.P2
.NH 2
A Shorter Version
.PP
The previous example is somewhat long-winded
because it demonstrates many features of \*(id
that really aren't needed.
For instance, it would probably have made better
sense to define
.IT listnode
as a basic element rather than building it out
of
.IT rect s.
This would reduce the need for delving deep
into the internals of boxes from outside
(e.g.
.IT first.info.hook ).
Here is the same example reworked:
.IS
...width 2
listnode {
	var n, s, e, w, ne, nw, se, sw, next;
	n = s + (0,1)*lht;
	ne = n + 0.5*lwd = nw + lwd;
	se = s + 0.5*lwd = sw + lwd;
	e = (ne + se)/2;
	w = (nw + sw)/2;
	next = (ne + s)/2;
	conn nw to ne to se to sw to nw;
	conn n to s;
}

main {
	var lht, lwd;
	lht = 1;
	lwd = 2;
	put first: listnode {
		sw = 0;
	};
	put last: listnode {
		sw = 2[first.sw,first.se];
		conn s to ne;
	};
	put new: listnode {
		nw = 2[first.ne,first.se];
	};
	put arrow {
		hd = new.nw;
		tl = first.next;
	};
	put arrow {
		hd = last.sw;
		tl = new.next;
	};
	put arrow {
		hd = new.w;
		tl = hd - 1;
		right "new " at tl;
	};
	put arrow {
		hd = first.w;
		tl = hd - 1;
		right "list " at tl;
	};
}
.IE
.P1
listnode {
	var n, s, e, w, ne, nw, se, sw, next;
	n = s + (0,1)*lht;
	ne = n + 0.5*lwd = nw + lwd;
	se = s + 0.5*lwd = sw + lwd;
	e = (ne + se)/2;
	w = (nw + sw)/2;
	next = (ne + s)/2;
	conn nw to ne to se to sw to nw;
	conn n to s;
}

main {
	var lht, lwd;
	lht = 1;
	lwd = 2;
	put first: listnode {
		sw = 0;
	};
	put last: listnode {
		sw = 2[first.sw,first.se];
		conn s to ne;
	};
	put new: listnode {
		nw = 2[first.ne,first.se];
	};
	put arrow {
		hd = new.nw;
		tl = first.next;
	};
	put arrow {
		hd = last.sw;
		tl = new.next;
	};
	put arrow {
		hd = new.w;
		tl = hd - 1;
		right "new " at tl;
	};
	put arrow {
		hd = first.w;
		tl = hd - 1;
		right "list " at tl;
	};
}
.P2
Notice that equations need not be just a left side and a right side:
they may include several expressions that should be equal.
