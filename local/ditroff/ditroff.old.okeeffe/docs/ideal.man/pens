.NH 1
Iteration of \*(id Constructs
.NH 2
Pens
.PP
In Donald Knuth's \s-2METAFONT\s0
.[[
knuth tex metafont
.]]
system, pens are different
shapes\(emcircles, ellipses, and polygons\(emthat draw along
curves.
\*(id includes pens as a generalization of this idea:
.IT any
box may be used to draw along a line.
For instance, users may define ``dashed'' or ``dotted'' pens.
A pen statement looks like this:
.P1
conn $x$ to $y$
	using $n$ $pen$ {
		...
	} <$a$,$b$>;
.P2
(The only keywords in this statement are $conn$, $"to"$, and $using$.)
.IT Pen
may be any box.
\*(id will place $n$ copies of
.IT pen
in the space from $x$ to $y$.
$a$ and $b$ are expressions known to
.IT pen .
The first instance of
.IT pen
will have $a$ at $x$, and
the last instance of
.IT pen
will have $b$ at $y$;
every instance in between will have
its $a$ at the preceding one's $b$,
and its $b$ at the succeeding one's $a$,
as shown in this picture:
.IS
...colwid 6.0
...width 4.0
...libfile rect
pen {
	var e, w, c;
	var s;
	e = r.e;
	s = r.s;
	w = r.w;
	c = r.c;
	put r: rect {
		ht = wd = 1;
	};
	left ' \f2a\fP' at w;
	right '\f2b\fP ' at e;
}
main {
	put first: pen {
		w = 0;
		right '\f2x\fP ' at w;
		'1' at s+(0,0.1);
	};
	put second: pen {
		w = first.e;
		'2' at s+(0,0.1);
	};
	'...' at (second.e + ipth.w)/2;
	put ipth: pen {
		w = 2[second.w,second.e];
		'\f2i\fP\-1' at s+(0,0.1);
	};
	put ith: pen {
		w = ipth.e;
		'\f2i\fP' at s+(0,0.1);
	};
	put inth: pen {
		w = ith.e;
		'\f2i\fP+1' at s+(0,0.1);
	};
	'...' at (inth.e + last.w)/2;
	put last: pen {
		w = 2[inth.w,inth.e];
		'\f2n\fP' at s+(0,0.1);
		left ' \f2y\fP' at e;
	};
}
.IE
.PP
Here is an example box that contains an angular wavy path:
.ne 2i
.IS
...colwid 9.0
...width 1.0
wavy {
	var start, end, perp, pt1, pt2, ht;
	perp = (0,1)*(start - end)/abs(start - end);
	pt1 = 0.25[start,end] + perp*ht;
	pt2 = 0.75[start,end] - perp*ht;
	conn start to pt1 to pt2 to end;
}
main {
	put wavy {
		start = 0;
		end = 1;
		ht = 0.2;
		right '(start) ' at start;
		left ' (end)' at end;
	};
}
.IE
.P1
wavy {
	var start, end, perp, pt1, pt2, ht;
	perp = (0,1)*(start - end)/abs(start - end);
	pt1 = 0.25[start,end] + perp*ht;
	pt2 = 0.75[start,end] - perp*ht;
	conn start to pt1 to pt2 to end;
}
.P2
.LP
Here we use
.IT wavy
as a pen to indicate that part of a rectangle is missing.
.IS
main {
	var ne, nw, se, sw;
	var n1, s1, n2, s2;
	sw = 0;
	ne = nw + 2;
	se = sw + 2;
	ne = se + (0,1);
	n2 - 0.4 = n1 = 0.6[nw,ne];
	s2 - 0.4 = s1 = 0.4[sw,se];
	conn n1 to nw to sw to s1;
	conn n1 to s1
		using int(5*abs(n1-s1)) wavy {
			ht = -0.1;
		} <start,end>;
	conn n2 to ne to se to s2;
	conn n2 to s2
		using int(5*abs(n2-s2)) wavy {
			ht = -0.1;
		} <start,end>;
}
.IF
.P1
main {
	var ne, nw, se, sw;
	var n1, s1, n2, s2;
	ne = nw + 2;
	se = sw + 2;
	ne = se + (0,1);
	n2 - 0.4 = n1 = 0.6[nw,ne];
	s2 - 0.4 = s1 = 0.4[sw,se];
	conn n1 to nw to sw to s1;
	conn n1 to s1
		using int(5*abs(n1-s1)) wavy {
			ht = -0.1;
		} <start,end>;
	conn n2 to ne to se to s2;
	conn n2 to s2
		using int(5*abs(n2-s2)) wavy {
			ht = -0.1;
		} <start,end>;
}
.P2
.LP
We can change
.IT wavy
to contain a smooth wave
by changing the word
.IT conn
in the fifth line of its definition to
.IT spline ,
and use the same instructions above to draw
the picture with the new pen.
.IS
wavy {
	var start, end, perp, pt1, pt2, ht;
	perp = (0,1)*(start - end)/abs(start - end);
	pt1 = 0.25[start,end] + perp*ht;
	pt2 = 0.75[start,end] - perp*ht;
	spline start to pt1 to pt2 to end;
}
main {
	var ne, nw, se, sw;
	var n1, s1, n2, s2;
	sw = 0;
	ne = nw + 2;
	se = sw + 2;
	ne = se + (0,1);
	n2 - 0.4 = n1 = 0.6[nw,ne];
	s2 - 0.4 = s1 = 0.4[sw,se];
	conn n1 to nw to sw to s1;
	conn n1 to s1
		using int(5*abs(n1-s1)) wavy {
			ht = -0.1;
		} <start,end>;
	conn n2 to ne to se to s2;
	conn n2 to s2
		using int(5*abs(n2-s2)) wavy {
			ht = -0.1;
		} <start,end>;
}
.IE
.NH 2
Pens as For-Statements
.PP
The pen statement
.P1
conn $x$ to $y$
	using $n$ $pen$ {
		...
	} <$a$,$b$>;
.P2
.LP
has the same effect as
.P1
for $i$ = 1 to $n$ {
	put $pen$ {
		$a$ = (($i$-1)/$n$)[$x$,$y$];
		$b$ = ($i$/$n$)[$x$,$y$];
		...
	};
}
.P2
.LP
imagining for a moment that \*(id had for-statements.
.Ts
This means a pen statement can be used to synthesize
a for-statement in an \*(id program.
Here is a pen statement to draw a dashed arc:
.IS
...libfile arc
main {
	conn 0 to 180
		using 10 arc {
			center = 0;
			radius = 1;
		}<startang, 9+endang>;
}
.IF
.P1
conn 0 to 180
	using 10 arc {
		center = 0;
		radius = 1;
	}<startang, 9+endang>;
.P2
.Te
.Ts
To draw a set of concentric circles
we can say:
.IS
...libfile circle
main {
	conn 1 to 6
		using 5 circle {
			center = 0;
			} <radius, radius+1>;
}
.IF
.P1
main {
	conn 1 to 6
		using 5 circle {
			center = 0;
			} <radius,radius+1>;
}
.P2
.sp 1
.Te
.Ts
In the first example, the second expression in angle
brackets is important: it means that each ``dash''
covers nine degrees.
In the second example, this expression is redundant:
its only purpose is to prevent \*(id from generating
a stream of error messages about inconsistent equations.
This contorted way of simulating for-statements
is necessary only because pens are meant to do
the right thing at each end of and all along a path that is
being drawn with some box, and not as general
iteration constructs.
.Te
.Ts
Why doesn't \*(id have
for-statements?
Notice that every variable in an \*(id program
is assigned a value exactly once.
Obviously the index of a for-statement must be
an exception to that rule.
Generating the index internally prevents the
need to have two kinds of variables\(emchanging
and fixed.
The local variables of boxes placed by pen statements
cannot be referenced outside the pen statement,
because the boxes are not named when they are placed.
A general for-statement could lead to the need to
generate automatically names for different instances of boxes,
a hard problem that I don't understand well enough yet.
.Te
.NH 2
Filling Regions
.PP
Because any box can be used as a pen, we can shade regions.
(We can have not only dashed and dotted ink, but checkered paint!)
Take box
.IT wavy ,
for instance.
First we construct a box
.IT brush ,
which consists of seven copies of
.IT wavy
going horizontally:
.IS
wavy {
	var start, end, perp, pt1, pt2, ht;
	perp = (0,1)*(start - end)/abs(start - end);
	pt1 = 0.25[start,end] + perp*ht;
	pt2 = 0.75[start,end] - perp*ht;
	conn start to pt1 to pt2 to end;
}
brush {
	var top, bot;
	var bwd, bht;
	var leftpt, rightpt;
	leftpt = 0.5*(top+bot) - bwd/2;
	rightpt = 0.5*(top+bot) +bwd/2;
	conn leftpt to rightpt
		using 7 wavy {
			ht = bht;
		}<start,end>;
}
main {
	put brush {
		leftpt = 0;
		rightpt = 7;
		bht = 0.3;
	};
}
.IF
.P1
brush {
	var top, bot;
	var bwd, bht;
	var leftpt, rightpt;
	leftpt = 0.5*(top+bot) - bwd/2;
	rightpt = 0.5*(top+bot) + bwd/2;
	conn leftpt to rightpt
		using 7 wavy {
			ht = bht;
		}<start,end>;
}
.P2
Then we use ``brush'' to draw vertically
over the region of interest.
.IS
background {
	conn (0,1) to (0,-1)
		using 6 brush {
			bwd = 2;
			bht = 0.1;
			}<top,bot>;
}
main {
	put background {
	};
}
.IF
.P1
conn (0,1) to (0,-1)
	using 6 brush {
		bwd = 2;
		bht = 0.1;
		}<top,bot>;




.P2
