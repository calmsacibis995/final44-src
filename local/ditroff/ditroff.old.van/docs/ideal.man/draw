.NH 1
Paper Commands
.PP
\*(id includes two commands that are analogous
to the way people draw on paper.
.NH 2
Construct
.PP
The
.IT construct
statement looks just like a put statement,
with the keyword
.IT put
replaced by
.IT construct .
It is best to think of it as laying a sheet of
tracing paper over the current drawing.
Anything constructed will be drawn on this sheet.
When you return to the layer underneath,
you may refer to any of the local variables
as with a put statement, but the lines and curves
in the constructed picture don't show.
.IS
...maxy 2.0
...minx -1.0
...maxx 1.0
...libfile rect arrow
main {
	construct A: rect {
		sw = 0;
		wd = ht = 1;
	};
	construct B: rect {
		n = A.s - (0,1);
		wd = ht = 1;
	};
	'top' at A.c;
	'bottom' at B.c;
	put arrow {
		hd = B.n;
		tl = A.s;
	};
}
.IF
.P1
main {
	construct A: rect {
		sw = 0;
		wd = ht = 1;
	};
	construct B: rect {
		n = A.s - (0,1);
		wd = ht = 1;
	};
	'top' at A.c;
	'bottom' at B.c;
	put arrow {
		hd = B.n;
		tl = A.s;
	};
}
.P2
.LP
Here we have used ``invisible boxes'' to place the
arrow around the text without drawing the boxes.
.NH 2
Draw
.PP
The
construct command may also be used to localize the
effects of opaque boxes.
We saw above how to draw a filled polygon:
paint over the area, then opaque the exterior
of the polygon.
But how can we draw
.IT two
filled polygons in the same picture?
.PP
One solution is to construct them both, then use the
.IT draw
command to add them to the main picture.
The draw command transfers the contents of the
named sheet of tracing paper to the sheet below.
.IS
...libfile circle
...width 2.0
...colwid 8.0
null {
}
pentagon {
	var center, radius,
		pt1, pt2, pt3, pt4, pt5;
	pt1 = center + radius;
	pt2 = center + cis(72)*radius;
	pt3 = center + cis(144)*radius;
	pt4 = center + cis(-144)*radius;
	pt5 = center + cis(-72)*radius;
	conn pt1 to pt2 to pt3 to pt4 to pt5 to pt1;
	bdlist = pt1, pt2, pt3, pt4, pt5;
}
main {
	construct A: null {
		conn (0,1) to 0
			using 7 brush {
				bwd = 1;
				bht = 0.1;
				}<top,bot>;
		put pentagon {
			center = (0,0.5);
			radius = (0,0.5);
			opaque exterior;
		};
	};
	construct B: null {
		conn (0.5,0.5) to (1.5,0.5)
			using 5 brush {
				bwd = (0,1);
				bht = 0.1;
				}<top,bot>;
		put circle {
			center = (1,0.5);
			radius = 0.5;
			opaque exterior;
		};
	};
	draw A;
	draw B;
}
.IF
.P1
null {
}

pentagon {
	var center, radius,
		pt1, pt2, pt3, pt4, pt5;
	pt1 = center + radius;
	pt2 = center + cis(72)*radius;
	pt3 = center + cis(144)*radius;
	pt4 = center + cis(-144)*radius;
	pt5 = center + cis(-72)*radius;
	conn pt1 to pt2 to pt3 to pt4 to pt5 to pt1;
	bdlist = pt1, pt2, pt3, pt4, pt5;
}

main {
	construct A: null {
		conn (0,1) to 0
			using 7 brush {
				bwd = 1;
				bht = 0.1;
				}<top,bot>;
		put pentagon {
			center = (0,0.5);
			radius = (0,0.5);
			opaque exterior;
		};
	};
	construct B: null {
		conn (0.5,0.5) to (1.5,0.5)
			using 5 brush {
				bwd = (0,1);
				bht = 0.1;
				}<top,bot>;
		put circle {
			center = (1,0.5);
			radius = 0.5;
			opaque exterior;
		};
	};
	draw A;
	draw B;
}
.P2
.LP
Even put statements can be added to the parameter sections
of construct (and put) statements!
Believe it or not, box
.IT null
defined above is one of the most useful:
it gives us a way to name a set of commands and variables
so that we may reference them later, yet it doesn't
require us to define a box that will be used only once.
.PP
Given construct and draw, why do we need a special box
.IT hole
to opaque a circular area without drawing anything?
Why not just construct an opaque circle, then draw it
on the main picture?
The problem is that the effect of opaquing is localized
just as much as the drawing, so an opaque constructed
circle won't opaque anything that lies underneath.
