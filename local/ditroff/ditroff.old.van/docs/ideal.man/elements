.NH 1
Elements of the \*(id Language
.PP
This section presents statements that make up the
fundamental units of \*(id programs, so the
displayed program text represents fragments of
complete programs.
Text that appears between $/*$ and $*/$ is a comment.
.NH 2
Boxes
.PP
The building blocks of \*(id programs are called
.IT boxes ,
which readers familiar with programming may think
of as procedures or subroutines.
In fact,
the picture drawn by an \*(id program must itself
be a box,
called
.IT main ;
we suppress this extra level
of box-nesting for all of Section 3.
.NH 3
Defining Boxes
.PP
Here is a simple box
and one instance of it:
.IS
...libfile rect
...width 0.5
...colwid 8.0
main {
	put A:rect {
		ht = 0.5;
		wd = 1;
		sw = 0;
	};
	right '(sw) ' at A.sw;
	right '(nw) ' at A.nw;
	left ' (se)' at A.se;
	left ' (ne)' at A.ne;
}
.IF
.P1
rect {
	var ne, nw, se, sw,
		wd, ht;
	nw = sw + (0,1)*ht;
	ne = nw + wd;
	se = sw + wd;
	conn ne to nw to sw to se to ne;
}
.P2
.LP
It is called
.IT rect ,
has six local complex variables:
.IT ne ,
.IT nw ,
.IT se ,
.IT sw ,
.IT wd ,
and
.IT ht ,
three equations among these variables,
and an instruction to draw four lines.
.NH 3
Placing Boxes
.PP
To ask for an instance of
.IT rect ,
we use a
.IT put
statement with a
.IT "parameter section"
containing enough additional
equations that the local variables of
this instance of
.IT rect
are determined uniquely.
For example, we might give the dimensions
.IT ht "" (
and
.IT wd )
and one of the corners
(say
.IT sw ):
.IS
...width 0.25
main {
	put rect {
		sw = 0;
		ht = 1;
		wd = 0.5;
	};
}
.IF
.P1
put rect {
	ht = 2;
	wd = 1;
	sw = 0;
};
.P2
Any of the following put
statements would draw the same rectangle:
(C programmers will recognize the $/*$ and $*/$ comment brackets.)
.P1
/* giving one corner, one dimension
   and a relation on the dimensions */
put rect {
	ht = 2;
	wd = 0.5*ht;
	nw = (0,2);
};
.P2
.P1
/* giving two adjacent corners
   and the perpendicular dimension */
put rect {
	nw = (0,2);
	sw = 0;
	wd = 1;
};
.P2
.P1
/* giving two diagonal corners
   and a relation on the dimensions */
put rect {
	ne = (1,2);
	sw = 0;
	wd = 0.5*ht;
};
.P2
.P1
/* giving three corners */
put rect {
	ne = (1,2);
	nw = (0,2);
	se = 1;
};
.P2
.P1
/* giving the center of a side,
   a corner, and another dimension */
put rect {
	(nw+sw)/2 = (0,1);
	nw = (0,2);
	wd = 1;
};
.P2
.LP
The put statement is to \*(id what a procedure
call is to a conventional programming language.
The difference is that none of the variables
of a box must be specified to be a parameter
whose value is expected in any call:
any of the box's variables may be set by the
put statement, and \*(id will determine the
rest by means of the equations
in the definition of the box.
This means we can give whatever
information we know about this instance of the box,
as long as it is enough to determine everything uniquely.
This mechanism is useful because we often want to
set down a rectangle by giving one of its corners,
but not necessarily the same corner each time;
in a conventional programming language, we would
need to provide a different procedure for each
corner, and the code to solve for the other
corners from it.
(Almost certainly, not all of the put statements
above are equally useful; but it is good to be
able to use any of them when the need arises.)
.Ts
Here is how \*(id solves the system of equations
implicit in a program:
First, all equations are placed on a queue.
Every time a box is called, the solutions
to these equations may\(emand probably will\(embe
different, so all the equations of a box
are enqueued separately for each time that
box is put.
(Of course, different copies of the equation
refer to different copies of the variable,
but \*(id keeps that straight.)
During processing, \*(id maintains two classes
of variables: dependent and independent.
Each dependent variable is represented as a
linear combination of independent variables
plus a constant term.
(Variables whose values are known are a trivial
case of dependent variables.)
All variables start out independent.
As long as there are equations on the queue, \*(id
examines the head equation:
if, after substituting for all dependent variables,
the equation is linear, \*(id determines new
information from it if possible\(emthat is,
\*(id tries to make one variable dependent
on the others, thus reducing the number of
independent variables\(emor decides
whether it is redundant or inconsistent;
if the equation remains non-linear after substitution,
\*(id adds it to the end of the queue and proceeds.
If \*(id ever goes through the whole queue without
discovering any new information, the system cannot
be solved
(by \*(id, anyway)
and \*(id complains bitterly.
If there are any independent variables left after
this processing, \*(id will complain too, because
there is no way they can become known.
.Te
.PP
The variables
.IT wd
and
.IT ht
above are complex numbers just like the corners,
so we can rotate the rectangle
by giving them complex non-real values:
.IS
...width 0.5
main {
	put rect {
		sw = 0;
		wd = (1,1)/abs((1,1));
		ht = 2*wd;
	};
}
.IF
.P1
put rect {
	sw = 0;
	wd = (1,1)/abs((1,1));
	ht = 2*wd;
};
.P2
.LP
(The double parentheses are needed in ``$abs((1,1))''$ because
``$abs(1,1)$'' is parsed as a function with two arguments.)
One point about this example often confuses new users:
the vectors
.IT wd
and
.IT ht
point in the
.IT same
direction.
It is in the definition of
.IT rect
that the $ht$ vector is rotated ninety degrees
and added to the southern points to arrive
at the northern points.
Thus, if we give a
.IT ht
that is perpendicular to
.IT wd ,
we get a very flat rectangle.
.PP
On the other hand, the definition of
.IT rect
does not assure that
.IT ht
and
.IT wd
will point in the same direction.
This put statement
draws a parallelogram:
.IS
...width 0.25
main {
	put rect {
		ht = 1;
		wd = (1,1)/abs((1,1));
		sw = 0;
	};
}
.IF
.P1
put rect {
	ht = 1;
	wd = (1,1)/abs((1,1));
	sw = 0;
};
.P2
.LP
Some people who feel that
a box called
.IT rect
should draw only rectangles
are disturbed by this example.
One remedy is to add another equation
to the definition of
.IT rect ,
asserting that two adjacent sides
are perpendicular;
\*(id will complain if this equation
is not satisfied
(although it won't stop drawing).
One such equation is
.P1
wd/abs(wd) = ht/abs(ht);
.P2
.PP
Here is a definition for box
.IT arrow
that keeps the head of the arrow symmetrical
about its shaft:
.IS
arrow {
	var hd, tl, head, wing;
	head = 0.2;
	wing = head*(tl-hd)/abs(tl-hd);
	conn hd to tl;
	conn hd + cis(25)*wing to hd to hd + cis(-25)*wing;
}
main {
	put arrow {
		hd = 0;
		tl = (1,1);
	};
}
.IF
.P1
arrow {
	var hd, tl, head, wing;
	head = 0.1;
	wing = head*(tl-hd)/abs(tl-hd);
	conn hd to tl;
	conn hd + cis(25)*wing to hd to hd + cis(-25)*wing;
}
.P2
.LP
Note the definition of
.IT wing
in the example above:
the second part of the expression is a unit vector
that points from
.IT tl
to
.IT hd ;
this is multiplied by
.IT head ,
the length of the ``wings'' on the arrowhead.
.Ts
When a put
statement is interpreted, the equations in
its parameter section are processed before
the equations in its definition.
Thus, if there are inconsistent equations
between the put
statement
and the box definition, the equations in
the put
statement take precedence.
This can be useful to provide
default values for variables of a box.
For instance, if the definition of
.IT rect
gave such default values to
.IT ht
and
.IT wd ,
they would take effect unless overridden
by equations in the parameter section
of the put statement.
.Te
.Ts
\*(id ignores inconsistent equations, but it
does generate error messages about them.
To avoid this error message
about a particular equation, use a
tilde (``\f8~\fP'') instead of an equals
sign in the equation.
The tilde does
.IT not
give the equation any lower ``priority''
than an equation with an equals sign:
all it does is shut off the error message.
So, the two ordered systems ``$x ~ = ~ 1$, $x ~ font 8 "~" ~ 2$''
and ``$x ~ font 8 "~" ~ 2$, $x ~ = ~ 1$'' are
.IT different:
in the former, $x$ receives the value 1, and no error
message appears when the second equation is processed;
in the latter, $x$ receives the value 2, and an error
is generated when the second equation is encountered.
.Te
.NH 2
Special Boxes\(emCircles and Arcs
.PP
Boxes to draw circles and circular arcs are defined
in special library files.
.NH 3
Circles
.PP
The box named
.IT circle
has five local variables:
.IT center ,
.IT radius ,
.IT z1 ,
.IT z2 ,
and
.IT z3 .
The last three may be any points on the circle.
As above, we must give enough information to
determine a circle;
giving two points on it is insufficient, and
giving three collinear points is inconsistent.
Here are three ways to draw
a circle of radius one centered at the origin.
.IS
...width 0.5
...libfile circle
dot {
	var center;
	center = ZAP.center;
	put ZAP:circle {
		radius = 0.1;
	};
}
main {
	put A:circle {
		center = 0;
		radius = 1;
	};
	left ' (z1)' at cis(0);
	right '(z2) ' at cis(135);
	right '(z3)  ' at cis(245);
	put dot {center = cis(0);};
	put dot {center = cis(135);};
	put dot {center = cis(245);};
}
.IF
.P1
/* giving center and radius */
put circle {
	center = 0;
	radius = 1;
};
.P2
.P1
/* giving center and a point on the circle */
put circle {
	center = 0;
	z1 = 1; /* could also have given z2 or z3 */
};
.P2
.P1
/* giving three points on the circle */
put circle {
	z1 = (1,0);
	z2 = cis(135);
	z3 = cis(235);
};
.P2
.LP
Once the circle has been determined, all five of its
internal variables are known.
So, if we ask for a circle giving three points, the
radius and center will be known afterward.
On the other hand, if we ask for a circle by giving
the center and the radius, the three points $z1$, $z2$,
and $z3$, will be known, and will be on the circle,
but there is no guarantee where they will be.
.NH 3
Arcs
.PP
Box
.IT arc
has eight local variables:
.IT center ,
.IT radius ,
.IT start ,
.IT midway ,
.IT end ,
.IT startang ,
.IT midang ,
and
.IT endang .
It is an arc centered at point
.IT center
with radius
.IT radius ,
starting at point
.IT start
at an angle
.IT startang ,
passing through point
.IT midway
at an angle
.IT midang ,
and ending at point
.IT end
at an angle
.IT endang .
(All angles are measured with respect to $center$,
in degrees, with the positive $x$-axis taken to be
zero degrees, and the counterclockwise direction to
be positive.)
Note that $midway$ is
.IT not
necessarily the midpoint of the arc!
If neither
.IT midway
nor
.IT midang
is given, the arc is drawn
counterclockwise from
.IT start
to
.IT end .
Once again, a variety of put statements draw the same arc:
.IS
...libfile arc
main {
	put A:arc {
		start = 1;
		end = cis(235);
		center = 0;
	};
	left ' (start)' at A.start;
	right '(midway) ' at cis(180);
	left ' (end)' at A.end;
	put dot {center = A.start;};
	put dot {center = cis(180);};
	put dot {center = A.end;};
}
.IF
.P1
/* giving center, radius, and
   starting and ending angles */
put arc {
	center = 0;
	radius = 1;
	startang = 0;
	endang = 235;
};
.P2
.P1
/* giving center, starting point,
   and ending angle */
put arc {
	center = 0;
	start = 1;
	endang = 235;
};
.P2
.IS
main {
	put A:arc {
		start = 1;
		end = cis(235);
		center = 0;
	};
	left ' (end)' at A.start;
	right '(midway) ' at cis(180);
	left ' (start)' at A.end;
	put dot {center = A.start;};
	put dot {center = cis(180);};
	put dot {center = A.end;};
}
.IF
.P1
/* giving three points on the arc */
put arc {
	start = cis(235);
	midway = -1;
	end = 0;
};
.P2
.NH 2
Other Elements of \*(id Pictures
.PP
\*(id pictures also may contain text and splines.
.NH 3
Text Captions
.PP
There are three commands to place text with respect to a point.
The
.IT left
command left-justifies the text with respect to the specified location:
the text will start there.
The
.IT right
command right-justifies the text so that it ends at the specified
location.
The default is to center the text at the point.
(The arrows in this picture point to the locations of the named points.)
.P1
left "some text" at x;
.P2
.P1
\&"some centered text" at y;
.P2
.P1
right "some other text" at z;
.P2
.IS
...colwid 6.0
...width 4.0
arrow {
	var tl, hd, head, perp, headang;
	conn tl to hd;
	perp = head*(tl-hd)/abs(tl-hd);
	conn hd + cis(headang)*perp to hd to hd + cis(-headang)*perp;
	head ~ 0.1;
        headang ~ 25;
	var start, end;
	start = tl;
	end = hd;
}
main {
	var x, y, z;
	var offset;
	offset = (1,-1);
	x = 0;
	left 'some text' at x;
	put arrow {
		start = x + offset;
		end = x;
		left ' (x)' at start;
	};
	y = 3;
	'some centered text' at y;
	put arrow {
		start = y + offset;
		end = y;
		left ' (y)' at start;
	};
	z = 6;
	right 'some other text' at z;
	put arrow {
		start = z + offset;
		end = z;
		left ' (z)' at start;
	};
}
.IE
.LP
To include a double quote mark in a string, escape it with a back-slash.
If you have a line running through a point at which you place some text,
you may want to add a space to one end of the text so that the line
doesn't chop through the text.
The string may include \*(tf special characters (like \e(bu)
and commands to other preprocessors (notably \s-2EQN\s0),
but \*(id should be run before any other preprocessors.
.NH 3
Splines
.PP
\*(id provides quadratic splines that are drawn with a
B-spline basis:
the user supplies a sequence of guiding points, and \*(id
draws a smooth curve that is tangent to the polygonal
path they define at the midpoint of each segment;
the spline also starts at the first point and ends at the last.
.IS
...colwid 8.0
...width 1.0
...maxx 2.0
...minx -1.0
...maxy 2.0
...miny 0.0
main {
	var x, y, z, w;
	x = 0;
	y = 1;
	z = (-1,1);
	w = (2,2);
	spline x to y to z to w;
	right '(x) ' at x;
	left ' (y)' at y;
	right '(z) ' at z;
	left ' (w)' at w;
	put dot {center = x;};
	put dot {center = y;};
	put dot {center = z;};
	put dot {center = w;};
}
.IF
.P1
spline x to y to z to w;


.P2
