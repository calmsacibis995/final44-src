.NH 1
Elements of the \*(id Language
.PP
\*(id expects to be presented with a collection of boxes.
\*(id prepares instructions to draw the picture specified by box
.IT main .
If no such box exists, no picture is drawn, but the definitions
that did appear are remembered.
A box looks like this:
.P1
$identifier$ {
	$(statement)*$
}
.P2
.LP
The sections below describe allowed statements.
An $identifier$ is a sequence of letters and digits that starts with a letter.
A $string$ is a sequence of characters between double quotes.
.NH 2
Variable Declarations
.P1
var $identifier$ $( font 8 "," identifier)*$ ;
.P2
.PP
This declares complex variables for which space will be allocated whenever
the box in which this statement appears is instantiated.
These declarations should appear before any other statements,
though this order is not enforced at the moment.
.NH 2
Equations
.P1
$expr$ = $expr$ $( ~ font 8 "=" ~ expr)*$ ;
$expr$ ~ $expr$ $( ~ font 8 "~" ~ expr)*$ ;
.P2
.PP
These statements declare relations that should exist among the named variables.
Equations that involve more than two expressions to be equated are processed left to right.
The second form (an equation with a $font 8 "~"$ instead of an equals sign)
requests that no error message be generated if the equation is inconsistent.
Built-in operators include $+$, $-$ (both unary and binary),
$*$, and $/$, with unary minus binding more tightly than multiplication
and division, which in turn bind more tightly than addition or subtraction.
Parentheses may be used to enforce a particular order of evaluation.
The expression
.P1
( $expr sub 1$ , $expr sub 2$ )
.P2
.LP
has as real part the real part of $expr sub 1$ and as imaginary
part the real part of $expr sub 2$.
(The parentheses in this example are not metacharacters.)
The expression
.P1
$expr sub 1$ [ $expr sub 2$ , $expr sub 3$ ]
.P2
.LP
is evaluated as $expr sub 2 + expr sub 1 * ( expr sub 3 - expr sub 2 )$,
that is
``$expr sub 1$ of the way from $expr sub 2$ to $expr sub 3$.''
Built-in functions are described below.
.NH 3
Manipulating Complex Numbers
.P1
re ( $expr$ )
im ( $expr$ )
conj ( $expr$ )
.P2
.PP
These functions return, respectively, the real part, the imaginary part,
and the complex conjugate of $expr$.
.NH 3
Absolute Value
.P1
abs ( $expr$ )
.P2
.PP
This returns the absolute value of $expr$.
.NH 3
Unit Vector Functions
.P1
cis ( $expr$ )
E ( $expr$ )
unit ( $expr$ )
.P2
.PP
Function $font 8 "cis" ()$ returns a unit vector in the direction
of its argument,
which is interpreted as an angle.
For $theta$ in radians, $font 8 "cis" ~ theta$ is defined as
$e sup { i theta } ~ == ~ cos ~ theta ~ + ~ i sin ~ theta$,
and
$font 8 "E" (x)$ is defined as $font 8 "cis" ~ 2 pi x$.
If $theta$ is in degrees, which it usually is in \*(id
programs (see below), \*(id makes the necessary conversion
so that $font 8 "cis" ()$ and $font 8 "E" ()$ work right.
.PP
Function $font 8 "unit" ()$ returns a unit vector in the direction
of its argument,
which is a vector.
For $z$ a complex number,
$font 8 "unit" (z) ~ == ~ z / font 8 "abs" (z)$.
.NH 3
Floating Truncation
.P1
int ( $expr$ )
.P2
.PP
This function returns the integer part of the real part of $expr$.
.NH 3
Inverse Trigonometric Function
.P1
angle ( $expr$ )
.P2
.PP
This function returns the arctangent of $font 8 "im" (expr)/ font 8 "re" (expr)$.
.NH 2
Square Root Function
.P1
sqrt ( $expr$ )
.P2
.PP
This function returns the square root of its complex argument.
.NH 2
Line Drawing
.P1
conn $expr$ to $expr$ $($ to $~ expr)*$ ;
.P2
.PP
This statement directs that lines be drawn between each successive
pair of points.
.NH 2
Box Placement
.P1
$[ident sub 1 font 8 ":" ]$ put $ident sub 2$ { $(statement)*$ } ;
put $ident sub 1$ : $ident sub 2$ { $(statement)*$ } ;
.P2
.PP
This statement directs that box $ident sub 2$ be instantiated with the
statements in braces prepended to those already present in its definition.
If $ident sub 1$ is present in the statement (the optional first form,
or the second form), the instantiated box's name is $ident sub 1$,
and a local variable $x$ of the box may be referenced as $ident sub 1$.$x$.
.NH 2
Pen Drawing
.P1
conn $expr sub 1$ to $expr sub 2$ using $expr sub 3$ $identifier$ { $(statement)*$ } < $expr sub 4$ , $expr sub 5$ > ;
.P2
.PP
This statement is shorthand for the following loop:
.P1
for i = 1 to $expr sub 3$ by 1
	put $identifier$ {
		$expr sub 4$ = ((i-1)/$expr sub 3$)[$expr sub 1$,$expr sub 2$];
		$expr sub 5$ = (i/$expr sub 3$)[$expr sub 1$,$expr sub 2$];
		$(statement)*$
	};
.P2
.LP
Note that it is different from mere text expansion because the upper limit
($expr sub 3$) may not be known explicitly when the program is written.
Note too that \*(id does
.I not
include a for-statement!
.NH 2
Drawing Splines
.P1
spline $expr$ to $expr$ $( font 8 "to" ~ expr)*$ ;
.P2
.PP
This statement draws a spline guided by the named points in order.
.NH 2
Placing Captions
.P1
left $string$ at $expr$;
$string$ at $expr$;
right $string$ at $expr$;
.P2
.PP
Use these statements to place $string$ at $expr$.
The default is to center the string at $expr$.
The keyword $"left"$ causes the string to start at $expr$,
while the keyword $"right"$ causes the string to end there.
.NH 2
Constructing and Drawing Boxes
.P1
construct $ident sub 1$ : $ident sub 2$ { $(statement)*$ } ;
$ident sub 1$ : construct $ident sub 2$ { $(statement)*$ } ;
draw $identifier$ ;
.P2
.PP
The first two of these statements are like the $put$-statements defined above,
but they add to a picture named $ident sub 1$, instead of to the current picture.
The third directs that the named picture (created by a $construct$ command)
be added to the current picture.
.NH 2
Statements Related to Opaquing
.P1
boundary = $expr$ , $expr$ , $expr$ $( font 8 "," expr)*$ ;
opaque [ interior ] ;
opaque exterior ;
.P2
.PP
The $boundary$ statement specifies the vertices of a polygon
to be opaqued.
The first $opaque$ statement directs that the interior of the polygon
be opaque.
The second directs that the exterior be made opaque.
If no boundary list is given for a circle, it will opaque a
circular region.
To get an opaque circular region without drawing the circle,
use the box $hole$ instead.
Two other boxes are available for opaquing: $sector$ opaques
a sector of an arc and $segment$ opaques a segment of an arc.
The variables in these boxes are the same as in $arc$.
