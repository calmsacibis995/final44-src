.pn8
.tr |
.tr ~|
.rm mx
.br
.ce
.ftB
.ps+2
.rs
.sp1.0i-1v
REFERENCE MANUAL
.ftR
.ps-2
.sp
.mh
General Explanation
.sc
Form of input.
Input consists of \fItext lines\fR, which are destined to be printed,
interspersed with \fIcontrol lines\fR,
which set parameters or otherwise control subsequent processing.
Control lines begin with a \fIcontrol character\fR\(em\
normally \fB.\fR (period) or \fB\'\fR (acute accent)\(em\
followed by a one or two character name that specifies
a basic \fIrequest\fR or the substitution of
a user-defined \fImacro\fR in place of the control line.
The control character \fB\'\fR suppresses the \fIbreak\fR function\(em\
the forced output of a partially filled line\(em\
caused by certain requests.
The control character may be separated from the request/macro name by
white space (spaces and/or tabs) for esthetic reasons.
Names must be followed by either
space or new-line.
Control lines with unrecognized names are ignored.
.pg
Various special functions may be introduced anywhere in the input by
means of an \fIescape\fR character, normally \fB\e\fR.
For example, the function
\fB\en\fIR\fR
causes the interpolation of the contents of the
\fInumber register R\fR
in place of the function;
here \fIR\fR is either a single character name
as in \fB\en\fIx\fR,
or left-parenthesis-introduced, two-character name as in \fB\en(\fIxx\fR.
.sc
Formatter and device resolution.
For historical reasons,
\*(TR internally uses 432 units\(slinch,
and has a horizontal resolution of
1\(sl432 inch and a vertical resolution
of 1\(sl144 inch.
\*(NR internally uses 240 units\(slinch,
corresponding to the least common multiple of the
horizontal and vertical resolutions of various
current typewriter-like output devices.
\*(TR rounds horizontal\(slvertical numerical parameter input to its internal
horizontal\(slvertical resolution.
\*(NR similarly rounds numerical input to the actual resolution
of the output device indicated by the \fB\(miT\fR option
(default \s-1\f2TELETYPE\fR\s+1 Model\ 37).
.sc
Numerical parameter input.
Both \*(NR and \*(TR
accept numerical input with the appended scale
indicators
shown in the following table,
where
\fIS\fR is the current type size in points,
\fIV\fR is the current vertical line spacing in
basic units,
and
\fIC\fR is a \fInominal character width\fR in basic units.
.TS
center box;
c|c|ls
c|c|ll
c|l|l|l.
Scale		Number of basic units
Indicator	Meaning	\*(TR	\*(NR
_
\fBi\fR	Inch	432	240
\fBc\fR	Centimeter	432\^\(mu\^50\(sl127	240\^\(mu\^50\(sl127
\fBP\fR	Pica = 1\(sl6 inch	72	240\(sl6
\fBm\fR	Em = \fIS\fR points	6\^\(mu\^\fIS\fR	\fIC\fR
\fBn\fR	En = Em\(sl2	3\^\(mu\^\fIS\fR	\fIC, same as Em\fR
\fBp\fR	Point = 1\(sl72 inch	6	240\(sl72
\fBu\fR	Basic unit	1	1
\fBv\fR	Vertical line space	\fIV\fR	\fIV\fR
none	Default, see below
.TE
In \*(NR, \fIboth\fR the em and the en are taken to be equal to the \fIC\fR,
which is output-device dependent;
common values are 1\(sl10 and 1\(sl12 inch.
Actual character widths in \*(NR need not be all the same and constructed characters
such as \(mi> (\(->) are often extra wide.
The default scaling is ems for the horizontally-oriented requests
and functions
\fBll\fR,
\fBin\fR,
\fBti\fR,
\fBta\fR,
\fBlt\fR,
\fBpo\fR,
\fBmc\fR,
\fB\eh\fR,
and
\fB\el\fR;
\fIV\^\fRs
for the vertically-oriented requests and functions
\fBpl\fR,
\fBwh\fR,
\fBch\fR,
\fBdt\fR,
\fBsp\fR,
\fBsv\fR,
\fBne\fR,
\fBrt\fR,
\fB\ev\fR,
\fB\ex\fR,
and
\fB\eL\fR;
\fBp\fR for the \fBvs\fR request;
and \fBu\fR for the requests
\fBnr\fR,
\fBif\fR,
and
\fBie\fR.
\fIAll\fR other requests ignore any scale indicators.
When a number register containing an already appropriately scaled number
is interpolated to provide numerical input,
the unit scale indicator
\fBu\fR may need to be appended to prevent
an additional inappropriate default scaling.
The number, \fIN\fR, may be specified in decimal-fraction form
but the parameter finally stored is rounded to an integer number of basic units.
.pg
The \fIabsolute position\fR indicator \fB~\fR may be prepended
to a number \fIN\fR
to generate the distance to the vertical or horizontal place \fIN\fR.
For vertically-oriented requests and functions, \fB~\|\fIN\fR
becomes the distance in basic units from the current vertical place on the page or in a \fIdiversion\fR (\(sc7.4)
to the the vertical place \fIN\fR.
For \fIall\fR other requests and functions,
\fB~\|\fIN\fR
becomes the distance from
the current horizontal place on the \fIinput\fR line to the horizontal place \fIN\fR.
For example,
.x1
\&\fB.sp  ~\|3.2c\fR
.x2
will space \fIin the required direction\fR to 3.2\|centimeters from the top of the page.
.sc
.tr &&
Numerical expressions.
Wherever numerical input is expected an expression involving parentheses,
the arithmetic operators \fB\(pl\fR, \fB\(mi\fR, \fB\(sl\fR, \fB\(**\fR, \fB%\fR (mod),
and the logical operators
\fB<\fR,
\fB>\fR,
\fB<\(eq\fR,
\fB>\(eq\fR,
\fB\(eq\fR (or \fB\(eq\(eq\fR),
\fB&\fR\ (and),
\fB:\fR\ (or)
may be used.
Except where controlled by parentheses, evaluation of expressions is left-to-right;
there is no operator precedence.
In the case of certain requests, an initial \fB\(pl\fR or \fB\(mi\fR is stripped
and interpreted as an increment or decrement indicator respectively.
In the presence of default scaling, the desired scale indicator must be
attached to \fIevery\fR number in an expression
for which the desired and default scaling differ.
For example,
if the number register \fBx\fR contains 2
and the current point size is 10,
then
.br
.tr &.
.x1
.ftB
\&.ll  (4.25i\(pl\enxP\(pl3)\(sl2u
.ftR
.x2
will set the line length to 1\(sl2 the sum of 4.25 inches \(pl 2 picas \(pl 30 points.
.sc
Notation.
Numerical parameters are indicated in this manual in two ways.
\(+-\fIN\fR means that the argument may take the forms \fIN\fR, \(pl\fIN\fR, or \(mi\fIN\fR and
that the corresponding effect is to set the affected parameter
to \fIN\fR, to increment it by \fIN\fR, or to decrement it by \fIN\fR respectively.
Plain \fIN\fR means that an initial algebraic sign is \fInot\fR
an increment indicator,
but merely the sign of \fIN\fR.
Generally, unreasonable numerical input is either ignored
or truncated to a reasonable value.
For example,
most requests expect to set parameters to non-negative
values;
exceptions are
\fBsp\fR,
\fBwh\fR,
\fBch\fR,
\fBnr\fR,
and
\fBif\fR.
The requests
\fBps\fR,
\fBft\fR,
\fBpo\fR,
\fBvs\fR,
\fBls\fR,
\fBll\fR,
\fBin\fR,
and
\fBlt\fR
restore the \fIprevious\fR parameter value in the \fIabsence\fR
of an argument.
.pg
Single character arguments are indicated by single lower case letters
and
one/two character arguments are indicated by a pair of lower case letters.
Character string arguments are indicated by multi-character mnemonics.
.mh
Font and Character Size Control
.sc
Character set.
The \*(TR character set consists of the so-called Commercial|II
character set plus a Special Mathematical Font character
set\(emeach having 102 characters.
These character sets are shown in the attached Table|I.
All \s-1ASCII\s+1 \fIgraphic\fP characters are included,
with some on the Special Font.
With three exceptions, these \s-1ASCII\s+1 characters are input as themselves,
and non-\s-1ASCII\s+1 characters are input in the form \fB\e(\fIxx\fR where
\fIxx\fR is a two-character name given in the attached Table|II.
The three \s-1ASCII\s+1 exceptions are mapped as follows:
.TS
center box;
cs|cs
cc|cc
cl|cl.
\s-1ASCII\s+1 Input	Printed by \*(TR
Character	Name	Character	Name
_
\'	acute accent	'	close quote
\`	grave accent	`	open quote
\(mi	minus	-	hyphen
.TE
.tr ~~
The characters
\fB\'\fR,
\fB\`\fR,
and
\fB\-\fR
may be input
by \fB\e\'\fR, \fB\e\`\fR, and \fB\e\-\fR respectively or by their names (Table II).
The \s-1ASCII\s+1 characters \fB@\fR, \fB#\fR, \fB"\fR, \fB\(aa\fR, \fB\(ga\fR, \fB<\fR, \fB>\fR, \fB\e\fR, \fB{\fR, \fB}\fR, \fB~\fR, \fB^\fR, and \fB\(ul\fR exist
only on the Special Font and are printed as a 1-em space if that font
is not mounted.
(\s-1ASCII\s+1 \fIcontrol\fP characters are discussed in \(sc10.1.)
.pg
.tr ~|
\*(NR understands the entire \*(TR character set,
but can in general print only \s-1ASCII\s+1
characters,
additional characters as may be available on
the output device,
such characters as may be able to be constructed
by overstriking or other combination,
and those that can reasonably be mapped
into other printable characters.
The exact behavior is determined by a driving
table prepared for each device.
The characters
\fB\'\fR,
\fB\`\fR,
and
\fB\(ul\fR
print
as themselves.
.sc
Fonts.
The default mounted fonts are
Times Roman (\fBR\fR),
Times Italic (\fBI\fR),
Times Bold (\fBB\fR),
and the Special Mathematical Font (\fBS\fR)
on physical typesetter positions 1, 2, 3, and 4 respectively.
These fonts are used in this document.
The \fIcurrent\fR font, initially Roman, may be changed
(among the mounted fonts)
by use of the \fBft\fR request,
or by imbedding at any desired point
either \fB\ef\fIx\fR, \fB\ef(\fIxx\fR, or \fB\ef\fIN\fR
where
\fIx\fR and \fIxx\fR are the name of a mounted font
and \fIN\fR is a numerical font position.
It is \fInot\fR necessary to change to the Special Font;
characters on that font are automatically handled.
A request for a named but not-mounted font is \fIignored\fR.
\*(TR can be informed that any particular font is mounted
by use of the \fBfp\fR request.
The list of known fonts is installation dependent.
In the subsequent discussion of font-related requests,
\fIF\fR represents either a one\(sltwo-character
font name or the numerical font position, 1-4.
The current font is available (as numerical position) in the read-only number register \fB.f\fR.
.pg
\*(NR understands font control
and normally underlines Italic characters (see \(sc10.5).
.sc
Character size.
Available character point sizes are
6, 7, 8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 28, and 36.
This is a range of 1\(sl12 inch to 1\(sl2 inch.
The \fBps\fR request is used to change or restore the point size.
Alternatively, the point size may be changed between any two characters
by imbedding a \fB\es\fIN\fR
at the desired point
to set the size to \fIN\fR,
or a \fB\es\fI\(+-N\fR (1\(<=\fIN\fR\(<=9)
to increment\(sldecrement the size by \fIN\fR;
\fB\es0\fR restores the \fIprevious\fR size.
Requested point size values that are between two valid
sizes yield the larger of the two.
The current size is available in the \fB.s\fR register.
\*(NR ignores type size control.
.h1 *
.fn
.xx
* Notes are explained at the end of the Summary and Index above.
.ef
.bt
\fB&ps\fI|\(+-N\fR	10\|point	previous	E	Point size
set to \(+-\fIN\fR.
Alternatively, imbed \fB\es\fIN\fR or \fB\es\fI\(+-N\fR.
Any positive size value may be requested;
if invalid, the next larger valid size will result, with a
maximum of 36.
A paired sequence
\(pl\fIN\fR,\|\(mi\fIN\fR
will work because the previous requested value is also remembered.
Ignored in \*(NR.
.bt
\fB&ss\fI|N\fR	12\(sl36\|em	ignored	E	Space-character size
is set to \fIN\fR\(sl36\|ems.
This size is the minimum word spacing in adjusted text.
Ignored in \*(NR.
.bt
\fB&cs\|\fIF\|N\|M\fR	off	-	P	Constant character space
(width) mode is
set on for font \fIF\fR (if mounted); the width of every character will be
taken to be \fIN\fR\(sl36 ems.
If \fIM\fR is absent,
the em is that of the character's point size;
if \fIM\fR is given,
the em is \fIM\fR-points.
All affected characters
are centered in this space, including those with an actual width
larger than this space.
Special Font characters occurring while the current font
is \fIF\fR are also so treated.
If \fIN\fR is absent, the mode is turned off.
The mode must be still or again in effect when the characters are physically printed.
Ignored in \*(NR.
.bt
\fB&bd\fI|F|N\fR	off	-	P	The characters in font \fIF\fR will be artificially
emboldened by printing each one twice, separated by \fIN\fR\^\(mi1 basic units.
A reasonable value for \fIN\fR is 3 when the character size is in the vicinity
of 10 points.
If \fIN\fR is missing the embolden mode is turned off.
The column heads above were printed with \fB.bd|I|3\fR.
The mode must be still or again in effect when the characters are physically printed.
See \(sc2.2 of the Addendum for the effect of \fBbd\fR in \*(NR.
.bt
\fB&bd|S|\fIF|N\fR	off	-	P	The characters in the Special Font
will be emboldened whenever the current font is \fIF\fR.
This manual was printed with \fB.bd\|S\|B\|3\fR.
The mode must be still or again in effect when the characters are physically printed.
.bt
\fB&ft|\fIF\fR	Roman	previous	E	Font changed to
\fIF\fR.
Alternatively, imbed \fB\ef\fIF\fR.
The font name \fBP\fR is reserved to mean the previous font.
.bt
\fB&fp|\fIN|F\fR	R,I,B,S	ignored	-	Font position.
This is a statement
that a font named \fIF\fR is mounted on position \fIN\fR (1-4).
It is a fatal error if \fIF\fR is not known.
The phototypesetter has four fonts physically mounted.
Each font consists of a film strip which can be mounted on a numbered
quadrant of a wheel.
The default mounting sequence assumed by \*(TR is
R, I, B, and S on positions 1, 2, 3 and 4.
.mh
Page control
.pg
Top and bottom margins are \fInot\fR automatically provided;
it is conventional to define two \fImacros\fR and to set \fItraps\fR
for them at vertical positions 0 (top) and \fI\(miN\fR (\fIN\fR from the bottom).
See \(sc7 and Tutorial Examples \(scT2.
A pseudo-page transition onto the \fIfirst\fR page occurs
either when the first \fIbreak\fR occurs or
when the first \fInon-diverted\fR text processing occurs.
Arrangements
for a trap to occur at the top of the first page
must be completed before this transition.
In the following, references to the \fIcurrent diversion\fR (\(sc7.4)
mean that the mechanism being described works during both
ordinary and diverted output (the former considered as the top diversion level).
.pg
The usable page width on the phototypesetter
is about 7.54|inches,
beginning about 1\(sl27|inch from the left edge of the
8|inch wide, continuous roll paper.
The physical limitations on \*(NR output
are output-device dependent.
.h1
.bt
\fB&pl\fI|\(+-N\fR	11\|in	11\|in	\fBv\fR	Page length set to \fI\(+-N\fR.
The internal limitation is about 75|inches in \*(TR and
about 136|inches in \*(NR.
The current page length is available in the \fB.p\fR register.
.bt
\fB&bp\fI|\(+-N\fR	\fIN\(eq\fR1	-	B*,\fBv\fR	Begin page.
.fn
.xx
* The use of ``\|\fB\'\fR\|'' as control character (instead of ``\fB.\fR'')
suppresses the break function.
.ef
The current page is ejected and a new page is begun.
If \fI\(+-N\fR is given, the new page number will be \fI\(+-N\fR.
Also see request \fBns\fR.
.bt
\fB&pn\fI|\(+-N\fR	\fIN\fR\(eq1	ignored	-	Page number.
The next page (when it occurs) will have the page number \fI\(+-N\fR.
A \fBpn\fR must occur before the initial pseudo-page transition
to affect the page number of the first page.
The current page number is in the \fB%\fR register.
.bt
\fB&po\fI|\(+-N\fR	0;|26\(sl27\|in\(dg	previous	\fBv\fR	Page offset.
.fn
.xx
\(dg Values separated by ``;'' are for \*(NR and \*(TR respectively.
.ef
The current \fIleft margin\fR is set to \fI\(+-N\fR.
The \*(TR initial value provides about 1|inch of paper margin
including the physical typesetter margin of 1\(sl27|inch.
In \*(TR the maximum (line-length)+(page-offset) is about 7.54 inches.
See \(sc6.
The current page offset is available in the \fB.o\fR register.
.bt
\fB&ne\fI|N\fR	-	\fIN\(eq\fR1\|\fIV\fR	D,\fBv\fR	Need \fIN\fR vertical space.
If the distance, \fID\fR, to the next trap position (see \(sc7.5) is less than \fIN\fR,
a forward vertical space of size \fID\fR occurs,
which will spring the trap.
If there are no remaining
traps on the page,
\fID\fR is the distance to the bottom of the page.
If \fID\|<\|V\fR, another line could still be output
and spring the trap.
In a diversion, \fID\fR is the distance to the \fIdiversion trap\fR, if any,
or is very large.
.bt
\fB&mk\fI|R\fR	none	internal	D	Mark the \fIcurrent\fR vertical place
in an internal register (both associated with the current diversion level),
or in register \fIR\fR, if given.
See \fBrt\fR request.
.bt
\fB&rt\fI|\(+-N\fR	none	internal	D,\fBv\fR	Return \fIupward only\fR to a marked vertical place
in the current diversion.
If \fI\(+-N\fR (w.r.t. current place) is given,
the place is \fI\(+-N\fR from the top of the page or diversion
or, if \fIN\fR is absent, to a
place marked by a previous \fBmk\fR.
Note that the \fBsp\fR request (\(sc5.3) may be used
in all cases instead of \fBrt\fR
by spacing to the absolute place stored in a explicit register;
e.g., using the sequence \fB.mk|\fIR\fR ... \fB.sp|~\|\en\fIR\fBu\fR.
.mh
Text Filling, Adjusting, and Centering
.sc
Filling and adjusting.
Normally,
words are collected from input text lines
and assembled into a output text line
until some word doesn't fit.
An attempt is then made
the hyphenate the word in effort to assemble a part
of it into the output line.
The spaces between the words on the output line
are then increased to spread out the line
to the current \fIline length\fR
minus any current \fIindent\fR.
A \fIword\fR is any string of characters delimited by
the \fIspace\fR character or the beginning/end of the input line.
Any adjacent pair of words that must be kept together
(neither split across output lines nor spread apart
in the adjustment process)
can be tied together by separating them with the
\fIunpaddable space\fR character
``\fB\e\ \ \fR'' (backslash-space).
The adjusted word spacings are uniform in \*(TR
and the minimum interword spacing can be controlled
with the \fBss\fR request (\(sc2).
In \*(NR, they are normally nonuniform because of
quantization to character-size spaces;
however,
the command-line option \fB\-e\fR causes uniform
spacing with full output device resolution.
Filling, adjustment, and hyphenation (\(sc13) can all be
prevented or controlled.
The \fItext length\fR on the last line output is available in the \fB.n\fR register,
and text base-line position on the page for this line is in the \fBnl\fR register.
The text base-line high-water mark (lowest place) on the current page is in
the \fB.h\fR register.
.pg
An input text line ending with \fB.\fR\^, \fB?\fR, or \fB!\fR is taken
to be the end of a \fIsentence\fR, and an additional space character is
automatically provided during filling.
Multiple inter-word space characters found in the input are retained,
except for trailing spaces;
initial spaces also cause a \fIbreak\fR.
.pg
When filling is in effect, a \fB\ep\fR may be imbedded or attached to a word to
cause a \fIbreak\fR at the \fIend\fR of the word and have the resulting output
line \fIspread out\fR to fill the current line length.
.pg
.tr &&
A text input line that happens to begin
with a control character can
be made to not look like a control line
by prefacing it with
the non-printing, zero-width filler character \fB\e&\fR.
Still another way is to specify output translation of some
convenient character into the control character
using \fBtr\fR (\(sc10.5).
.tr &.
.sc
Interrupted text.
The copying of a input line in \fIno-fill\f (i.e., non-fill)
mode can be \fIinterrupted\fR
by terminating
the partial line with a \fB\ec\fR.
The \fInext\fR encountered input text line will be considered to be a continuation
of the same line of input text.
Similarly,
a word within \fIfilled\fR text may be interrupted by terminating the
word (and line) with \fB\ec\fR;
the next encountered text will be taken as a continuation of the
interrupted word.
If the intervening control lines cause a break,
any partial line will be forced out along with any partial word.
.h1
.bt
\fB&br\fR	-	-	B	Break.
The filling of the line currently
being collected is stopped and
the line is output without adjustment.
Text lines beginning with space characters
and empty text lines (blank lines) also cause a break.
.bt
.lg0
\fB&fi\fR	\(fill|on	-	B,E	Fill subsequent output lines.
.lg
The register \fB.u\fR is 1 in fill mode and 0 in no-fill mode.
.bt
\fB&nf\fR	fill|on	-	B,E	No-fill.
Subsequent output lines are \fIneither\fR filled \fInor\fR adjusted.
Input text lines are copied directly to output lines
\fIwithout regard\fR for the current line length.
.bt
\fB&ad\fI|c\fR	adj,both	adjust	E	\
Line adjustment is begun.
If fill mode is not on, adjustment will be deferred until
fill mode is back on.
If the type indicator \fIc\fR is present,
the adjustment type is changed as shown in the following table.
.TS
center box;
c|c
c|l.
Indicator	Adjust Type
_
\fBl\fR	adjust left margin only
\fBr\fR	adjust right margin only
\fBc\fR	center
\fBb\fR or \fBn\fR	adjust both margins
absent	unchanged
.TE
See \(sc2.2 of the Addendum for additional details.
.bt
\fB&na\fR	adjust	-	E	No-adjust.
Adjustment is turned off;
the right margin will be ragged.
The adjustment type for \fBad\fR is not changed.
Output line filling still occurs if fill mode is on.
.bt
\fB&ce\fI|N\fR	off	\fIN\fR\(eq1	B,E	Center the next \fIN\fR input text lines
within the current (line-length minus indent).
If \fIN\fR\(eq\^0, any residual count is cleared.
A break occurs after each of the \fIN\fR input lines.
If the input line is too long,
it will be left adjusted.
.mh
Vertical Spacing
.sc
Base-line spacing.
The vertical spacing \fI(V)\fR between the base-lines of successive
output lines can be set
using the \fBvs\fR request
with a resolution of 1\(sl144\|inch\|\(eq\|1\(sl2|point
in \*(TR,
and to the output device resolution in \*(NR.
\fIV\fR must be large enough to accommodate the character sizes
on the affected output lines.
For the common type sizes (9-12 points),
usual typesetting practice is to set \fIV\fR to 2\ points greater than the
point size;
\*(TR default is 10-point type on a 12-point spacing
(as in this document).
The current \fIV\fR is available in the \fB.v\fR register.
Multiple-\fIV\|\fR line separation (e.\|g. double spacing) may be requested
with \fBls\fR.
.sc
Extra line-space.
If a word contains a vertically tall construct requiring
the output line containing it to have extra vertical space
before and\(slor after it,
the \fIextra-line-space\fR function \fB\ex\fI\'N\|\|\'\fR
can be imbedded in or attached to that word.
In this and other functions having a pair of delimiters around
their parameter (here \fB\'\fR\|),
the delimiter choice is arbitrary,
except that it can't look like the continuation of a number expression for \fIN\fR.
If \fIN\fR is negative,
the output line containing the word will
be preceded by \fIN\fR extra vertical space;
if \fIN\fR is positive,
the output line containing the word
will be followed by \fIN\fR extra vertical space.
If successive requests for extra space apply to the same line,
the maximum values are used.
The most recently utilized post-line extra line-space is available in the \fB.a\fR register.
.sc
Blocks of vertical space.
A block of vertical space is ordinarily requested using \fBsp\fR,
which honors the \fIno-space\fR mode and which does
not space \fIpast\fR a trap.
A contiguous block of vertical space may be reserved using \fBsv\fR.
.h1
.bt
\fB&vs\fI\|N\fR	1\(sl6in;12pts	previous	E,\fBp\fR	Set vertical base-line spacing size \fIV\fR.
Transient \fIextra\fR vertical space available with \fB\ex\fI\'N\|\|\'\fR (see above).
.bt
\fB&ls\fI\|N\fR	\fIN\(eq\^\fR1	previous	E	\fILine\fR spacing
set to \fI\(+-N\fR.
\fIN\(mi\fR1 \fIV\fR\^s \fI(blank lines)\fR are
appended to each output text line.
Appended blank lines are omitted, if the text or previous appended blank line reached a trap position.
.bt
\fB&sp\fI|N\fR	-	\fIN\fR\(eq1\fIV\fR	B,\fBv\fR	Space vertically in \fIeither\fR direction.
If \fIN\fR is negative, the motion is \fIbackward\fR (upward)
and is limited to the distance to the top of the page.
Forward (downward) motion is truncated to the distance to the
nearest trap.
If the no-space mode is on,
no spacing occurs (see \fBns\fR and \fBrs\fR below).
.bt
\fB&sv\fI|N\fR	-	\fIN\(eq\fR1\fIV\fR	\fBv\fR	Save a contiguous vertical block of size \fIN\fR.
If the distance to the next trap is greater
than \fIN\fR, \fIN\fR vertical space is output.
No-space mode has \fIno\fR effect.
If this distance is less than \fIN\fR,
no vertical space is immediately output,
but \fIN\fR is remembered for later output (see \fBos\fR).
Subsequent \fBsv\fR requests will overwrite any still remembered \fIN\fR.
.bt
\fB&os\fR	-	-	-	Output saved vertical space.
No-space mode has \fIno\fR effect.
Used to finally output a block of vertical space requested
by an earlier \fBsv\fR request.
.bt
\fB&ns\fR	space	-	D	No-space mode turned on.
When on, the no-space mode inhibits \fBsp\fR requests and
\fBbp\fR requests \fIwithout\fR a next page number.
The no-space mode is turned off when a line of
output occurs, or with \fBrs\fR.
.bt
\fB&rs\fR	space	-	D	Restore spacing.
The no-space mode is turned off.
.bt
Blank|text|line	-	B	Causes a break and
outputs a blank line exactly like \fBsp|1\fR.
.tr |
.rm mx
.br
.mh
Line Length and Indenting
.pg
The maximum line length for fill mode may be set with \fBll\fR.
The indent may be set with \fBin\fR;
an indent applicable to \fIonly\fR the \fInext\fR output line may be set with \fBti\fR.
The line length includes indent space but \fInot\fR
page offset space.
The line-length minus the indent is the basis for centering with \fBce\fR.
The effect of \fBll\fR, \fBin\fR, or \fBti\fR
is delayed, if a partially collected line exists,
until after that line is output.
In fill mode the length of text on an output line is less than or equal to
the line length minus the indent.
The current line length and indent are available in registers \fB.l\fR and \fB.i\fR respectively.
The length of \fIthree-part titles\fR produced by \fBtl\fR
(see \(sc14) is \fIindependently\fR set by \fBlt\fR.
.h1
.bt
\fB&ll\fI|\(+-N\fR	6.5\|in	previous	E,\fBm\fR	Line length is set to \(+-\fIN\fR.
In \*(TR the maximum (line-length)+(page-offset) is about 7.54 inches.
.bt
\fB&in\fI|\(+-N\fR	\fIN\(eq\^\fR0	previous	B,E,\fBm\fR	Indent is set to \fI\(+-N\fR.
The indent is prepended to each output line.
.bt
\fB&ti\fI|\(+-N\fR	-	ignored	B,E,\fBm\fR	Temporary indent.
The \fInext\fR output text line will be indented a distance \fI\(+-N\fR
with respect to the current indent.
The resulting total indent may not be negative.
The current indent is not changed.
.mh
Macros, Strings, Diversion, and Position Traps
.sc
Macros and strings.
A \fImacro\fR is a named set of arbitrary \fIlines\fR that may be invoked by name or
with a \fItrap\fR.
A \fIstring\fR is a named string of \fIcharacters\fR,
\fInot\fR including a new-line character,
that may be interpolated by name at any point.
Request, macro, and string names share the \fIsame\fR name list.
Macro and string names
may be one or two characters long and may usurp previously defined
request, macro, or string names.
Any of these entities may be renamed with \fBrn\fR
or removed with \fBrm\fR.
Macros are created by \fBde\fR and \fBdi\fR, and appended to by \fBam\fR and \fBda\fR;
\fBdi\fR and \fBda\fR cause normal output to be stored in a macro.
Strings are created by \fBds\fR and appended to by \fBas\fR.
A macro is invoked in the same way as a request;
a control line beginning \fB.\fIxx\fR will interpolate the contents of macro \fIxx\fR.
The remainder of the line may contain up to nine \fIarguments\fR.
The strings \fIx\fR and \fIxx\fR are interpolated at any desired point with
\fB\e\(**\fIx\fR and \fB\e\(**(\fIxx\fR respectively.
String references and macro invocations may be nested.
.sc
Copy mode input interpretation.
During the definition and extension
of strings and macros (not by diversion)
the input is read in \fIcopy mode\fR.
The input is copied without interpretation
\fIexcept\fR that:
.x1
.ds + \v'-.1m'\s-4\(bu\s+4\v'+.1m'
\*+ The contents of number registers indicated by \fB\en\fR are interpolated.
\*+ Strings indicated by \fB\e\(**\fR are interpolated.
\*+ Arguments indicated by \fB\e$\fR are interpolated.
\*+ Concealed new-lines indicated by \fB\e\fR(new-line) are eliminated.
\*+ Comments indicated by \fB\e"\fR are eliminated.
\*+ \fB\et\fR and \fB\ea\fR are interpreted as \s-1ASCII\s+1 horizontal tab and \s-1SOH\s+1 respectively (\(sc9).
\*+ \fB\e\e\fR is interpreted as \fB\e\fR.
\*+ \fB\e.\fR is interpreted as ``\fB.\fR''.
.x2
These interpretations can be suppressed by
prepending
a \fB\e\fR.
For example, since \fB\e\e\fR maps into a \fB\e\fR, \fB\e\en\fR will copy as \fB\en\fR which
will be interpreted as a number register indicator when the
macro or string is reread.
.sc
Arguments.
When a macro is invoked by name, the remainder of the line is
taken to contain up to nine arguments.
The argument separator is the space character, and arguments
may be surrounded by double-quotes to permit imbedded space characters.
Pairs of double-quotes may be imbedded in double-quoted arguments to
represent a single double-quote.
If the desired arguments won't fit on a line,
a concealed new-line may be used to continue on the next line.
.pg
When a macro is invoked the \fIinput level\fR is \fIpushed down\fR and
any arguments available at the previous level become unavailable
until the macro is completely read and the previous level is restored.
A macro's own arguments can be interpolated at \fIany\fR point
within the macro with \fB\e$\fIN\fR, which interpolates the \fIN\fR\^th
argument
(1\(<=\fIN\fR\^\(<=9).
If an invoked argument doesn't exist,
a null string results.
For example, the macro \fIxx\fR may be defined by
.x1
.ftB
.ta .75i
&de xx	\e"begin definition
Today is \e\e$1 the \e\e$2.
&.	\e"end definition
.ftR
.x2
and called by
.x1
.ftB
&xx Monday 14th
.ftR
.x2
to produce the text
.x1
.ftB
Today is Monday the 14th.
.ftR
.x2
Note that the \fB\e$\fR
was concealed in the definition with a prepended \fB\e\fR.
The number of currently available
arguments is in the \fB.$\fR register.
.pg
No arguments are available at the top (non-macro) level
in this implementation.
Because string referencing is implemented
as a input-level push down,
no arguments are available from \fIwithin\fR a string.
No arguments are available within a trap-invoked macro.
.pg
Arguments are copied in \fIcopy mode\fR onto a stack
where they are available for reference.
The mechanism does not allow an argument to contain
a direct reference to a \fIlong\fR string
(interpolated at copy time) and it is advisable to
conceal string references (with an extra \fB\e\fR\|)
to delay interpolation until argument reference time.
.sc
Diversions.
Processed output may be diverted into a macro for purposes
such as footnote processing (see Tutorial \(scT5)
or determining the horizontal and vertical size of some text for
conditional changing of pages or columns.
A single diversion trap may be set at a specified vertical position.
The number registers \fBdn\fR and \fBdl\fR respectively contain the
vertical and horizontal size of the most
recently ended diversion.
Processed text that is diverted into a macro
retains the vertical size of each of its lines when reread
in \fIno-fill\fR mode
regardless of the current \fIV\fR.
Constant-spaced (\fBcs\fR) or emboldened (\fBbd\fR) text that is diverted
can be reread correctly only if these modes are again or still in effect
at reread time.
One way to do this is to imbed in the diversion the appropriate
\fBcs\fR or \fBbd\fR requests with the \fItransparent\fR
mechanism described in \(sc10.6.
.br
.ne 3v
.pg
Diversions may be nested
and certain parameters and registers
are associated
with the current diversion level
(the top non-diversion level may be thought of as the
0th diversion level).
These are the diversion trap and associated macro,
no-space mode,
the internally-saved marked place (see \fBmk\fR and \fBrt\fR),
the current vertical place (\fB.d\fR register),
the current high-water text base-line (\fB.h\fR register),
and the current diversion name (\fB.z\fR register).
.sc
Traps.
Three types of trap mechanisms are available\(empage traps, a diversion trap, and
an input-line-count trap.
Macro-invocation traps may be planted using \fBwh\fR at any page position including the top.
This trap position may be changed using \fBch\fR.
Trap positions at or below the bottom of the page
have no effect unless or until
moved to within the page or rendered effective by an increase in page length.
Two traps may be planted at the \fIsame\fR position only by first planting them at different
positions and then moving one of the traps;
the first planted trap will conceal the second unless and until the first one is moved
(see Tutorial Examples \(scT5).
If the first one is moved back, it again conceals the second trap.
The macro associated with a page trap is automatically
invoked when a line of text is output whose vertical size \fIreaches\fR
or \fIsweeps past\fR the trap position.
Reaching the bottom of a page springs the top-of-page trap, if any,
provided there is a next page.
The distance to the next trap position is available in the \fB.t\fR register;
if there are no traps between the current position and the bottom of the page,
the distance returned is the distance to the page bottom.
.pg
A macro-invocation trap effective in the current diversion may be planted using \fBdt\fR.
The \fB.t\fR register works in a diversion; if there is no subsequent trap a \fIlarge\fR
distance is returned.
For a description of input-line-count traps, see \fBit\fR below.
.h1
.bt
\fB&de\fI|xx|yy\fR	-	\fI.yy=\fB..\fR	-	Define or redefine the macro \fIxx\fR.
The contents of the macro begin on the next input line.
Input lines are copied in \fIcopy mode\fR until the definition is terminated by a
line beginning with \fB.\fIyy\fR,
whereupon the macro \fIyy\fR is called.
In the absence of \fIyy\fR, the definition
is terminated by a
line beginning with ``\fB..\fR''.
A macro may contain \fBde\fR requests
provided the terminating macros differ
or the contained definition terminator is concealed;
\&``\fB..\fR'' can be concealed as
``\fB\e\e..\fR'' which will copy as ``\fB\e..\fR'' and be reread as ``\fB..\fR''.
.bt
\fB&am\fI|xx|yy\fR	-	\fI.yy=\fB..\fR	-	Append to macro (append version of \fBde\fR).
.bt
\fB&ds\fI|xx|string\fR	-	ignored	-	Define a string
\fIxx\fR containing \fIstring\fR.
Any initial double-quote in \fIstring\fR is stripped off to permit
initial blanks.
.bt
\fB&as\fI|xx|string\fR	-	ignored	-	Append
\fIstring\fR to string \fIxx\fR
(append version of \fBds\fR).
.bt
\fB&rm\fI|xx\fR	-	ignored	-	Remove
request, macro, or string.
The name \fIxx\fR is removed from the name list and
any related storage space is freed.
Subsequent references will have no effect.
.bt
\fB&rn\fI|xx|yy\fR	-	ignored	-	Rename request, macro, or string
\fIxx\fR to \fIyy\fR.
If \fIyy\fR exists, it is first removed.
.bt
\fB&di|\fIxx\fR	-	end	D	Divert output to macro \fIxx\fR.
Normal text processing occurs during diversion
except that page offsetting is not done.
The diversion ends when the request \fBdi\fR or \fBda\fR is encountered without an argument;
extraneous
requests of this type should not appear when nested diversions are being used.
.bt
\fB&da|\fIxx\fR	-	end	D	Divert, appending to \fIxx\fR
(append version of \fBdi\fR).
.bt
\fB&wh\fI|N|xx\fR	-	-	\fBv\fR	Install
a trap to invoke \fIxx\fR at page position \fIN;\fR
a \fInegative N\fR will be interpreted with respect to the
page \fIbottom\fR.
Any macro previously planted at \fIN\fR is replaced by \fIxx\fR.
A zero \fIN\fR refers to the \fItop\fR of a page.
In the absence of \fIxx\fR, the first found trap at \fIN\fR, if any, is removed.
.bt
\fB&ch\fI|xx|N\fR	-	-	\fBv\fR	Change
the trap position for macro \fIxx\fR to be \fIN\fR.
In the absence of \fIN\fR, the trap, if any, is removed.
.bt
\fB&dt\fI|N|xx\fR	-	off	D,\fBv\fR	Install a diversion trap
at position \fIN\fR in the \fIcurrent\fR diversion to invoke
macro \fIxx\fR.
Another \fBdt\fR will redefine the diversion trap.
If no arguments are given, the diversion trap is removed.
.bt
\fB&it\fI|N|xx\fR	-	off	E	Set an input-line-count trap
to invoke the macro \fIxx\fR after \fIN\fR lines of \fItext\fR input
have been read
(control or request lines don't count).
The text may be in-line text or
text interpolated by in-line or trap-invoked macros.
.bt
\fB&em\fI|xx\fR	none	none	-	The
macro \fIxx\fR will be invoked
when all input has ended.
The effect is the same as if the contents of \fIxx\fR had been at the end
of the last file processed.
.mh
Number Registers
.pg
A variety of parameters are available to the user as
predefined, named \fInumber registers\fR (see Summary and Index, page 7).
In addition, the user may define his own named registers.
Register names are one or two characters long and \fIdo not\fR conflict
with request, macro, or string names.
Except for certain predefined read-only registers,
a number register can be read, written, automatically
incremented or decremented, and interpolated
into the input in a variety of formats.
One common use of user-defined registers is to
automatically number sections, paragraphs, lines, etc.
A number register may be used any time numerical input is expected or desired
and may be used in numerical \fIexpressions\fR (\(sc1.4).
.pg
Number registers are created and modified using \fBnr\fR, which
specifies the name, numerical value, and the auto-increment size.
Registers are also modified, if accessed
with an auto-incrementing sequence.
If the registers \fIx\fR and \fIxx\fR both contain
\fIN\fR and have the auto-increment size \fIM\fR,
the following access sequences have the effect shown:
.TS
center box;
c2|c2|c
c2|c2|c2
l2|c2|c2
l2|c2|c2
l2|l2|c2.
	Effect on	Value
Sequence	Register	Interpolated
_
\fB\en\fIx\fR	none	\fIN\fR
\fB\en(\fIxx\fR	none	\fIN\fR
\fB\en+\fIx\fR	\fIx\fR incremented by \fIM\fR	\fIN+M\fR
\fB\en\-\fIx\fR	\fIx\fR decremented by \fIM\fR	\fIN\-M\fR
\fB\en+(\fIxx\fR	\fIxx\fR incremented by \fIM\fR	\fIN+M\fR
\fB\en\-(\fIxx\fR	\fIxx\fR decremented by \fIM\fR	\fIN\-M\fR
.TE
When interpolated, a number register is converted to
decimal (default),
decimal with leading zeros,
lower-case Roman,
upper-case Roman,
lower-case sequential alphabetic,
or
upper-case sequential alphabetic
according to the format specified by \fBaf\fR.
.h1
.bt
\fB&nr\fI|R|\(+-N|M\fR	-	\fBu\fR	\
The number register \fIR\fR is assigned the value \fI\(+-N\fR
with respect to the previous value, if any.
The increment for auto-incrementing is set to \fIM\fR.
.bt
\fB&af\fI|R|c\fR	arabic	-	-	Assign format \fIc\fR to register \fIR\fR.
The available formats are:
.TS
center box;
c2|c
c2|c
c2|l.
	Numbering
Format	Sequence
_
\fB1\fR	0,1,2,3,4,5,...
\fB001\fR	000,001,002,003,004,005,...
\fBi\fR	0,i,ii,iii,iv,v,...
\fBI\fR	0,I,II,III,IV,V,...
\fBa\fR	0,a,b,c,...,z,aa,ab,...,zz,aaa,...
\fBA\fR	0,A,B,C,...,Z,AA,AB,...,ZZ,AAA,...
.TE
An arabic format having \fIN\fR digits
specifies a field width of \fIN\fR digits (example 2 above).
The read-only registers and the \fIwidth\fR function (\(sc11.2)
are always arabic.
.bt
\fB&rr\fI|R\fR	-	ignored	-	Remove register \fIR\fR.
If many registers are being created dynamically, it
may become necessary to remove no longer used registers
to recapture internal storage space for newer registers.
.tr |
.rm mx
.mh
Tabs, Leaders, and Fields
.sc
Tabs and leaders.
The \s-1ASCII\s+1 horizontal tab character and the \s-1ASCII\s+1
\s-1SOH\s+1 (hereafter known as the \fIleader\fR character)
can both be used to generate either horizontal motion or
a string of repeated characters.
The length of the generated entity is governed
by internal \fItab stops\fR specifiable
with \fBta\fR.
The default difference is that tabs generate motion and leaders generate
a string of periods;
\fBtc\fR and \fBlc\fR
offer the choice of repeated character or motion.
There are three types of internal tab stops\(em\
\fIleft\fR adjusting, \fIright\fR adjusting,
and \fIcentering\fR.
In the following table:
\fID\fR is the distance from the current position on the \fIinput\fR line
(where a tab or leader was found)
to the next tab stop;
\fInext-string\fR consists
of the input characters following the tab (or leader) up to the next tab (or leader) or end of line;
and
\fIW\fR is the width of \fInext-string\fR.
.TS
center box;
c2|c2|c
c2|c2|c
c2|c2|l.
Tab	Length of motion or	Location of
type	repeated characters	\fInext-string\fR
_
Left	\fID\fR	Following \fID\fR
Right	\fID\-W\fR	Right adjusted within \fID\fR
Centered	\fID\-W\(sl\fR2	Centered on right end of \fID\fR
.TE
The length of generated motion is allowed to be negative, but
that of a repeated character string cannot be.
Repeated character strings contain an integer number of characters, and
any residual distance is prepended as motion.
Tabs or leaders found after the last tab stop are ignored, but may be used
as \fInext-string\fR terminators.
.pg
Tabs and leaders are not interpreted in \fIcopy mode\fR.
\fB\et\fR and \fB\ea\fR always generate a non-interpreted
tab and leader respectively, and
are equivalent to actual tabs and leaders in \fIcopy mode\fR.
.sc
Fields.
A \fIfield\fR is contained between
a \fIpair\fR of \fIfield delimiter\fR characters,
and consists of sub-strings
separated by \fIpadding\fR indicator characters.
The field length is the distance on the
\fIinput\fR line from the position where the field begins to the next tab stop.
The difference between the total length of all the sub-strings
and the field length is incorporated as horizontal
padding space that is divided among the indicated
padding places.
The incorporated padding is allowed to be negative.
For example,
if the field delimiter is \fB#\fR and the padding indicator is \fB^\fR,
\fB#^\fIxxx\fB^\fIright\|\fB#\fR
specifies a right-adjusted string with the string \fIxxx\fR centered
in the remaining space.
.h1
.bt
\fB&ta\fI|Nt|...\fR	8n;|0.5in	none	E,\fBm\fR	\
Set tab stops and types.
\fIt=\fBR\fR, right adjusting;
\fIt=\fBC\fR, centering;
\fIt\fR absent, left adjusting.
\*(TR tab stops are preset every 0.5in.;
\*(NR every 8 nominal character widths.
The stop values are separated by spaces, and
a value preceded by \fB+\fR
is treated as an increment to the previous stop value.
.bt
\fB&tc\fI|c\fR	none	none	E	\
The tab repetition character becomes \fIc\fR,
or is removed specifying motion.
.bt
\fB&lc\fI|c\fR	\fB.\fR	none	E	\
The leader repetition character becomes \fIc\fR,
or is removed specifying motion.
.bt
\fB&fc\fI|a|b\fR	off	off	-	\
The field delimiter is set to \fIa\fR;
the padding indicator is set to the \fIspace\fR character or to
\fIb\fR, if given.
In the absence of arguments the field mechanism is turned off.
.mh
Input and Output Conventions and Character Translations
.sc
Input character translations.
Ways of typing in the graphic character set were
discussed in \(sc2.1.
The \s-1ASCII\s+1 control characters
\s-1SOH\s+1 (\(sc9.1),
horizontal tab (\(sc9.1),
and backspace (\(sc10.3)
are discussed elsewhere;
the new-line delimits input lines.
In addition,
\s-1STX\s+1, \s-1ETX\s+1, \s-1ENQ\s+1, \s-1ACK\s+1, \s-1BEL\s+1,
\s-1SO\s+1, \s-1SI\s+1, and \s-1ESC\s+1
may be used as delimiters or translated
into a graphic with \fBtr\fR (\(sc10.5);
\*(TR normally passes none of these characters to its output
(but it passes all 8 if invoked with the \fB\-a\fR command-line option);
\*(NR passes the last 4,
with their effect
depending on the output device used.
\fIAll\fR others are ignored.
.pg
The \fIescape\fR character \fB\e\fR
introduces \fIescape sequences\fR\(em\
causes the following character to mean
another character, or to indicate
some function.
A complete list of such sequences is given in the Summary and Index on page 6.
\fB\e\fR
should not be confused with the \s-1ASCII\s+1 control character \s-1ESC\s+1 of the
same name.
The escape character \fB\e\fR can be input with the sequence \fB\e\e\fR.
The escape character can be changed with \fBec\fR,
and all that has been said about the default \fB\e\fR becomes true
for the new escape character.
\fB\ee\fR can be used to print whatever the current escape character is.
If necessary or convenient, the escape mechanism may be turned off with \fBeo\fR,
and restored with \fBec\fR.
.h1
.bt
\fB&ec\fI|c\fR	\fB\e\fR	\fB\e\fR	-	\
Set escape character to \fB\e\fR, or to \fIc\fR, if given.
.bt
\fB&eo\fR	on	-	-	Turn escape mechanism off.
.sc
Ligatures.
.lg0
Five ligatures are available
in the current \*(TR character set:
\fB\(fi\fR, \fB\(fl\fR, \fB\(ff\fR, \fB\(Fi\fR, and \fB\(Fl\fR.
They may be input (even in \*(NR) by
\fB\e(fi\fR, \fB\e(fl\fR, \fB\e(ff\fR, \fB\e(Fi\fR, and \fB\e(Fl\fR respectively.
.lg
The ligature mode is normally on in \*(TR, and \fIautomatically\fR invokes 
ligatures during input.
.h1
.bt
\fB&lg\fI|N\fR	off;|on	on	-	Ligature mode
is turned on if \fIN\fR is absent or non-zero,
and turned off if \fIN\(eq\^\fR0.
If \fIN\fR\(eq\^2, only the two-character ligatures are automatically invoked.
Ligature mode is inhibited for
request, macro, string, register, or file names,
and in \fIcopy mode\fR.
No effect in \*(NR.
.sc
Backspacing, underlining, overstriking, etc.
Unless in \fIcopy mode\fR, the \s-1ASCII\s+1 backspace character is replaced
by a backward horizontal motion having the width of the
space character.
Underlining as a form of line-drawing is discussed in \(sc12.4.
A generalized overstriking function is described in \(sc12.1.
.pg
\*(NR automatically underlines
characters in the \fIunderline\fR font
specifiable with \fBuf\fR
(normally Times Italic on font position 2\(emsee \(sc2.2).
In addition to \fBft\fR and \fB\ef\fIF\fR,
the underline font is selected by \fBul\fR and \fBcu\fR.
Underlining is restricted to an output-device-dependent
subset of \fIreasonable\fR characters.
.h1
.bt
\fB&ul\fI|N\fR	off	\fIN\(eq\fR1	E	\
Underline in \*(NR (italicize in \*(TR) the next \fIN\fR
input text lines.
Actually, switch to \fIunderline\fR font, saving the
current font for later restoration;
\fIother\fR font changes within the span of a \fBul\fR
will take effect,
but the restoration will undo the last change.
Output generated by \fBtl\fR (\(sc14) \fIis\fR affected by the
font change, but does \fInot\fR decrement \fIN\fR.
If \fIN\fR\^>\^1, there is the risk that
a trap interpolated macro may provide text
lines within the span;
environment switching can prevent this.
.bt
\fB&cu\fI|N\fR	off	\fIN\(eq\fR1	E	\
A variant of \fBul\fR that causes \fIevery\fR character to be underlined in \*(NR.
Identical to \fBul\fR in \*(TR.
.bt
\fB&uf\fI|F\fR	Italic	Italic	-	\
Underline font set to \fIF\fR.
In \*(NR,
\fIF\fR may \fInot\fR be on position 1 (initially Times Roman).
.sc
Control characters.
Both the control character \fB.\fR and the \fIno-break\fR
control character \fB\'\fR may be changed, if desired.
Such a change must be compatible with the design
of any macros used in the span of the change,
and
particularly of any trap-invoked macros.
.h1
.bt
\fB&cc\fI|c\fR	\fB.\fR	\fB.\fR	E	\
The basic control character is set to \fIc\fR,
or reset to ``\fB.\fR''.
.bt
\fB&c2\fI|c\fR	\fB\'	\'\fR	E	The \fIno-break\fR control character is set
to \fIc\fR, or reset to \|''\|\fB\'\fR".
.sc
Output translation.
One character can be made a stand-in for another character using \fBtr\fR.
All text processing (e.g., character comparisons) takes place
with the input (stand-in) character which appears to have the width of the final
character.
The graphic translation occurs at the moment of output
(including diversion).
.h1
.bt
\fB&tr\fI|abcd....\fR	none	-	O	Translate \
\fIa\fR into \fIb\fR, \fIc\fR into \fId\fR, etc.
If an odd number of characters is given,
the last one will be mapped into the space character.
To be consistent, a particular translation
must stay in effect from \fIinput\fR to \fIoutput\fR time.
.sc
Transparent throughput.
An input line beginning with a \fB\e!\fR is read in \fIcopy mode\fR and \fItransparently\fR output
(without the initial \fB\e!\fR);
the text processor is otherwise unaware of the line's presence.
This mechanism may be used to pass control information to a post-processor
or to imbed control lines in a macro created by a diversion.
.sc
Comments and concealed new-lines.
An uncomfortably long input line that must stay
one line (e.g., a string definition, or no-filled text)
can be split into many physical lines by ending all but
the last one with the escape \fB\e\fR.
The sequence \fB\e\fR(new-line) is \fIalways\fR ignored\(em\
except in a comment.
Comments may be imbedded at the \fIend\fR of any line by
prefacing them with \fB\e"\fR.
The new-line at the end of a comment cannot be concealed.
A line beginning with \fB\e"\fR will appear as a blank line and
behave like \fB.sp|1\fR;
a comment can be on a line by itself by beginning the line with \fB.\e"\fR.
.mh
Local Horizontal and Vertical Motions, and the Width Function
.sc
Local Motions.
The functions \fB\ev\'\fIN\fB\|\'\fR and
\fB\eh\'\fIN\fB\|\'\fR
can be used for \fIlocal\fR vertical and horizontal motion respectively.
The distance \fIN\fR may be negative; the \fIpositive\fR directions
are \fIrightward\fR and \fIdownward\fR.
A \fIlocal\fR motion is one contained \fIwithin\fR a line.
To avoid unexpected vertical dislocations, it is necessary that
the \fInet\fR vertical local motion within a word in filled text
and otherwise within a line balance to zero.
The above and certain other escape sequences providing local motion are
summarized in the following table.
.tr ||
.ds X \0\0\0
.TS
center box;
c2|cs2||c2|cs2
c1|c2c2||c2|c2c2.
Vertical	Effect in	Horizontal	Effect in
Local Motion	\*(TR	\*(NR	Local Motion	\*(TR	\*(NR
_
.sp.4
.TC
l2|ls2||l2|ls2.
\fB\*X\ev\'\fIN\|\^\fB\'\fR	Move distance \fIN\fR	\
\fB\*X\eh\'\fIN\|\^\fB\'\fR	Move distance \fIN\fR
.TC
_2|_2_2||l2|ls2.
			\fB\*X\e\fR(space)	Unpaddable space-size space
.TC
l2|l2|l2||l2|ls2.
\fB\*X\eu\fR	\(12 em up	\(12 line up	\fB\*X\e0\fR	Digit-size space
.TC
l2|l2|l2||_2|_2_2.
\fB\*X\ed\fR	\(12 em down	\(12 line down			
.TC
l2|l2|l2||l2|l2|l2.
\fB\*X\er\fR	1 em up	1 line up	\fB\*X\e\||\fR	1\(sl6 em space	ignored
			\fB\*X\e^\fR	1\(sl12 em space	ignored
.sp.4
.TE
.rm X
.tr |
As an example,
\fBE\s-2\v'-.4m'2\v'.4m'\s+2\fR
could be generated by the sequence
\fBE\es\-2\ev\'\-0.4m\'2\ev\'0.4m\'\es+2\fR;
it should be noted in this example that
the 0.4|em vertical motions are at the smaller size.
.sc
Width Function.
The \fIwidth\fR function \fB\ew\'\fIstring\fB\|\'\fR
generates the numerical width of \fIstring\fR (in basic units).
Size and font changes may be safely imbedded in \fIstring\fR,
and will not affect the current environment.
For example,
\&\fB.ti|\-\\w\'1.|\'u\fR could be used to
temporarily indent leftward a distance equal to the
size of the string ``\fB1.|\fR''.
.pg
The width function also sets three number registers.
The registers \fBst\fR and \fBsb\fR are set respectively to the highest and
lowest extent of \fIstring\fR relative to the baseline;
then, for example,
the total \fIheight\fR of the string is \fB\en(stu\-\en(sbu\fR.
In \*(TR the number register \fBct\fR is set to a value
between 0|and|3:
0 means that all of the characters in \fIstring\fR were short lower
case characters without descenders (like \fBe\fR);
1 means that at least one character has a descender (like \fBy\fR);
2 means that at least one character is tall (like \fBH\fR);
and 3 means that both tall characters and characters with
descenders are present.
.sc
Mark horizontal place.
The escape sequence \fB\ek\fIx\fR will cause the \fIcurrent\fR horizontal
position in the \fIinput line\fR to be stored in register \fIx\fR.
As an example,
the construction \fB\ekx\fIword\|\fB\eh\'\|~\|\enxu+2u\'\fIword\fB\fR
will embolden \fIword\fR by backing up to almost its beginning and overprinting it,
resulting in \kz\fIword\fR\h'|\nzu+2u'\fIword\fR.
.mh
Overstrike, Bracket, Line-drawing, and Zero-width Functions
.sc
Overstriking.
Automatically centered overstriking of up to nine characters
is provided by the \fIoverstrike\fR function
\fB\eo\'\fIstring\fB\|\'\fR.
The characters in \fIstring\fR are overprinted with centers aligned; the total width
is that of the widest character.
\fIstring\fR should \fInot\fR contain local vertical motion.
As examples,
\fB\eo\'e\e\'\'\fR produces \fB\o'e\''\fR, and
\fB\eo\'\e(mo\e(sl\'\fR produces \fB\o'\(mo\(sl'\fR.
.sc
Zero-width characters.
The function \fB\ez\fIc\fR will output \fIc\fR without spacing over
it, and can be used to produce left-aligned overstruck
combinations.
As examples,
\fB\ez\e(ci\e(pl\fR will produce \fB\z\(ci\(pl\fR, and
\fB\e(br\ez\e(rn\e(ul\e(br\fR will produce the smallest possible
constructed box \fB\(br\z\(rn\(ul\(br\fR\|.
.sc
Large Brackets.
The Special Mathematical Font contains a number of bracket construction pieces
(\|\|\(lt\|\|\(lb\|\|\(rt\|\|\(rb\|\|\(lk\|\|\(rk\|\|\(bv\|\|\(lf\|\|\(rf\|\|\(lc\|\|\(rc\|\|)
that can be combined into various bracket styles.
The function \fB\eb\'\fIstring\fB\|\'\fR may be used to pile
up vertically the characters in \fIstring\fR
(the first character on top and the last at the bottom);
the characters are vertically separated by 1|em and the total
pile is centered 1\(sl2\|em above the current baseline
(\(12 line in \*(NR).
For example,
\fB\eb\'\|\e(lc\e(lf\|\'E\e\|~\|\eb\'\|\e(rc\e(rf\|\'\|\ex\'\|\-0.5m\'\|\ex\'0.5m\'\|\fR
produces
\x'-.5m'\x'.5m'\fB\b'\(lc\(lf'E\|\b'\(rc\(rf'\fR.
.sc
Line drawing.
.tr &&
The function \fB\e\|l\|\'\fINc\fB\|\'\fR will draw a string of repeated \fIc\fR\|'s towards the right for a distance \fIN\fR.
(\|\fB\el\fR is \fB\e\fR(lower case L).
If \fIc\fR looks like a continuation of
an expression for \fIN\fR, it may insulated from \fIN\fR with a \fB\e&\fR.
If \fIc\fR is not specified, the \fB\(ru\fR (baseline rule) is used
(underline character in \*(NR).
If \fIN\fR is negative, a backward horizontal motion
of size \fIN\fR is made \fIbefore\fR drawing the string.
Any space resulting from \fIN\fR\|\(sl(size of \fIc\fR) having a remainder is put at the beginning (left end)
of the string.
In the case of characters
that are designed to be connected such as
baseline-rule\ \fB\(ru\fR\|,
underrule\ \fB\(ul\fR\|,
and
root-en\ \fB\(rn\fR\|,
the remainder space is covered by over-lapping.
If \fIN\fR is \fIless\fR than the width of \fIc\fR,
a single \fIc\fR is centered on a distance \fIN\fR.
As an example, a macro to underscore a string can be written
.br
.tr &.
.x1
.ftB
.ne 2.1
&de us
\e\e$1\e\|l\|\'\|~\|0\e(ul\'
&&
.ftR
.x2
.ne2.1
.de xu
\\$1\l'|0\(ul'
..
or one to draw a box around a string
.x1
.ftB
&de bx
\e(br\e\|~\|\e\e$1\e\|~\|\e(br\e\|l\|\'\|~\|0\e(rn\'\e\|l\|\'\|~\|0\e(ul\'
&&
.ftR
.x2
.de bx
\(br\|\\$1\|\(br\l'|0\(rn'\l'|0\(ul'
..
such that
.x1
.ftB
&us "underlined words"
.ftR
.x2
and
.x1
.ftB
&bx "words in a box"
.ftR
.x2
yield
.xu "underlined words"
and
.bx "words in a box"
\h'-\w'.'u'.
.pg
The function \fB\eL\'\|\fINc\fB\|\'\fR will draw a vertical line consisting
of the (optional) character \fIc\fR stacked vertically apart 1\|em
(1 line in \*(NR),
with the first two characters overlapped,
if necessary, to form a continuous line.
The default character is the \fIbox rule\fR |\(br| (\fB\|\e(br\fR);
the other suitable character is the \fIbold vertical\fR \|\(bv\| (\fB\|\e(bv\fR).
The line is begun without any initial motion relative to the
current base line.
A positive \fIN\fR specifies a line drawn downward and
a negative \fIN\fR specifies a line drawn upward.
After the line is drawn \fIno\fR compensating
motions are made;
the instantaneous baseline is at the \fIend\fR of the line.
.pg
.de eb
.sp -1
.nf
\h'-.5n'\L'|\\nzu-1'\l'\\n(.lu+1n\(ul'\L'-|\\nzu+1'\l'|0u-.5n\(ul'
.fi
..
.ne 2i
.mk z
The horizontal and vertical line drawing functions may be used
in combination to produce large boxes.
The zero-width \fIbox-rule\fR and the \(12-em wide \fIunderrule\fR
were \fIdesigned\fR to form corners when using 1-em vertical
spacings.
For example the macro
.x1
.ftB
\&.de eb
\&.sp \-1	\e"compensate for next automatic base-line spacing
\&.nf	\e"avoid possibly overflowing word buffer
.tr ||
\&\eh\'\-.5n\'\eL\'\||\|\e\enau\-1\'\el\'\e\en(.lu+1n\e(ul\'\eL\'\-\||\|\e\enau+1\'\el\'\||\|0u\-.5n\e(ul\'    \e"draw box
.tr |
.lg0
\&.fi
.lg
\&..
.ftR
.x2
will draw a box around some text whose beginning vertical place was
saved in number register \fIa\fR
(e.g., using \fB.mk|a\fR)
as done for this paragraph.
.eb
.tr |
.mh
Hyphenation.
.pg
The automatic hyphenation may be switched off and on.
When switched on with \fBhy\fR,
several variants may be set.
A \fIhyphenation indicator\fR character may be imbedded in a word to
specify desired hyphenation points,
or may be prepended to suppress hyphenation.
In addition,
the user may specify a small exception word list.
.pg
Only words that consist of a central alphabetic string
surrounded by (usually null) non-alphabetic strings
are considered candidates for automatic hyphenation.
Words that were input containing hyphens
(minus),
em-dashes (\fB\e(em\fR),
or hyphenation indicator characters\
\(emsuch as mother-in-law\(em\
are \fIalways\fR subject to splitting after those characters,
whether or not automatic hyphenation is on or off.
.h1
.bt
\fB&nh\fR	no|hyphen.	-	E	\
Automatic hyphenation is turned off.
.bt
\fB&hy\fI|N\fR	off,\fIN=\fR0	on,\fIN=\fR1	E	\
Automatic hyphenation is turned on
for \fIN\fR\|\(>=1, or off for \fIN=\fR\|0.
If \fIN=\fR\|2, \fIlast\fR lines (ones that will cause a trap)
are not hyphenated.
For \fIN=\fR\|4 and 8, the last and first two characters
respectively of a word are not split off.
These values are additive;
i.e., \fIN=\fR\|14 will invoke all three restrictions.
.bt
\fB&hc\fI|c\fR	\fB\e%	\e%\fR	E	Hyphenation indicator character is set
to \fIc\fR or to the default \fB\e%\fR.
The indicator does not appear in the output.
.bt
\fB&hw\fI|word1|...\fR	ignored	-	Specify hyphenation points in words
with imbedded minus signs.
Versions of a word with terminal \fIs\fR are implied;
i.e., \fIdig\-it\fR implies \fIdig\-its\fR.
This list is examined initially \fIand\fR after
each suffix stripping.
The space available is small\(emabout 128 characters.
.mh
Three Part Titles.
.pg
The titling function \fBtl\fR provides for automatic placement
of three fields at the left, center, and right of a line
with a title-length
specifiable with \fBlt\fR.
\fBtl\fR may be used anywhere, and is independent of the
normal text collecting process.
A common use is in header and footer macros.
.h1
.bt
\fB&tl\fI|\'left\|\'center\|\'right\|\'\fR	-	-	\
The strings \fIleft\fR, \fIcenter\fR, and \fIright\fR are
respectively left-adjusted, centered, and right-adjusted
in the current title-length.
Any of the strings may be empty,
and overlapping is permitted.
If the page-number character (initially \fB%\fR) is found within any of the fields it is replaced
by the current page number having the format assigned to register \fB%\fR.
Any character may be used as the string delimiter.
.bt
\fB&pc\fI|c\fR	\fB%\fR	off	-	The page number character is set to \fIc\fR,
or removed.
The page-number register remains \fB%\fR.
.bt
\fB&lt\fI|\(+-N\fR	6.5\|in	previous	E,\fBm\fR	Length of title set to \fI\(+-N\fR.
The line-length and the title-length are \fIindependent\fR.
Indents do not apply to titles; page-offsets do.
.mh
Output Line Numbering.
.pg
.ll -\w'0000'u
.nm 1 3
Automatic sequence numbering of output lines may be
requested with \fBnm\fR.
When in effect,
a three-digit, arabic number plus a digit-space
is prepended to output text lines.
The text lines are thus offset by four digit-spaces,
and otherwise retain their line length;
a reduction in line length may be desired to keep the right margin
aligned with an earlier margin.
Blank lines, other vertical spaces, and lines generated by \fBtl\fR
are \fInot\fR numbered.
Numbering can be temporarily suspended with \fBnn\fR,
or with an \fB.nm\fR followed by a later \fB.nm|+0\fR.
In addition,
a line number indent \fII\fR, and the number-text separation \fIS\fR
may be specified in digit-spaces.
Further, it can be specified that only those line numbers that are
multiples of some number \fIM\fR are to be printed (the others will appear
as blank number fields).
.br
.nm
.ll
.h1
.bt
\fB&nm\fI|\(+-N|M|S|I\fR	off	E	\
Line number mode.
If \fI\(+-N\fR is given,
line numbering is turned on,
and the next output line numbered is numbered \fI\(+-N\fR.
Default values are \fIM=\fR\|1, \fIS=\fR\|1, and \fII=\fR\|0.
Parameters corresponding to missing arguments are unaffected;
a non-numeric argument is considered missing.
In the absence of all arguments, numbering is turned off;
the next line number is preserved for possible further use
in number register \fBln\fR.
.bt
\fB&nn\fI|N\fR	-	\fIN=\fR1	E	The next \fIN\fR text output lines are not
numbered.
.pg
.ll -\w'0000'u
.nm +0
As an example, the paragraph portions of this section
are numbered with \fIM=\fR\|3:
\&\fB.nm|1|3\fR was placed at the beginning;
\&\fB.nm\fR was placed at the end of the first paragraph;
and \fB.nm|+0\fR was placed in front of this paragraph;
and \fB.nm\fR finally placed at the end.
Line lengths were also changed (by \fB\ew\'0000\'u\fR) to keep the right side aligned.
Another example is
\&\fB.nm|+5|5|x|3\fR which turns on numbering with the line number of the next
line to be 5 greater than the last numbered line,
with \fIM=\fR\|5, with spacing \fIS\fR untouched, and with the indent \fII\fR set to 3.
.br
.ll
.nm
.mh
Conditional Acceptance of Input
.pg
In the following,
\fIc\fR is a one-character, built-in \fIcondition\fR name,
\fB!\fR signifies \fInot\fR,
\fIN\fR is a numerical expression,
\fIstring1\fR and \fIstring2\fR are strings delimited by any non-blank, non-numeric character \fInot\fR in the strings,
and
\fIanything\fR represents what is conditionally accepted.
.h1
.bt
\fB&if\fI|c|anything\fR		-	-	If condition \fIc\fR true, accept \fIanything\fR as input;
in multi-line case use \fI\e{anything\|\e}\fR.
.bt
\fB&if|!\fIc|anything\fR	-	-	If condition \fIc\fR false, accept \fIanything\fR.
.bt
\fB&if\fI|N|anything\fR	-	\fBu\fR	If expression \fIN\fR > 0, accept \fIanything\fR.
.bt
\fB&if|!\fIN|anything\fR	-	\fBu\fR	If expression \fIN\fR \(<= 0, accept \fIanything\fR.
.bt
\fB&if\fI|\|\'string1\|\'string2\|\'|anything\fR	-	If \fIstring1\fR identical to \fIstring2\fR,
accept \fIanything\fR.
.bt
\fB&if|!\fI\|\'string1\|\'string2\|\'|anything\fR	-	If \fIstring1\fR not identical to \fIstring2\fR,
accept \fIanything\fR.
.bt
\fB&ie\fI|c|anything\fR	-	\fBu\fR	If portion of if-else; all above forms (like \fBif\fR).
.bt
\fB&el\fI|anything\fR		-	-	Else portion of if-else.
.pg
The built-in condition names are:
.TS
center box;
c2|c2
c2|c2
c2|l2.
Condition
Name	True If
_
\fBo\fR	Current page number is odd
\fBe\fR	Current page number is even
\fBt\fR	Formatter is \*(TR
\fBn\fR	Formatter is \*(NR
.TE
If the condition \fIc\fR is \fItrue\fR, or if the number \fIN\fR is greater than zero,
or if the strings compare identically (including motions and character size and font),
\fIanything\fR is accepted as input.
If a \fB!\fR precedes the condition, number, or string comparison,
the sense of the acceptance is reversed.
.pg
Any spaces between the condition and the beginning of \fIanything\fR are skipped over.
The \fIanything\fR can be either a single input line (text, macro, or whatever)
or a number of input lines.
In the multi-line case,
the first line must begin with a left delimiter \fB\e{\fR and
the last line must end with a right delimiter \fB\e}\fR.
.pg
The request \fBie\fR (if-else) is identical to \fBif\fR
except that the acceptance state is remembered.
A subsequent and matching \fBel\fR (else) request then uses the reverse sense of that state.
\fBie\fR|-|\fBel\fR pairs may be nested.
.pg
Some examples are:
.x1
.ftB
.ne 1
&if e .tl \'\|Even Page %\'\'\'
.ftR
.x2
which outputs a title if the page number is even; and
.x1
.ftB
.ne 3.1
&ie \en%>1 \e{\e
\&\'sp 0.5i
&tl \'\|Page %\'\'\'
\&\'sp ~\|1.2i|\e}
&el .sp ~\|2.5i
.ftR
.x2
which treats page 1 differently from other pages.
.mh
Environment Switching.
.pg
A number of the parameters that
control the text processing are gathered together into an
\fIenvironment\fR, which can be switched by the user.
The environment parameters are those associated
with requests noting E in their \fINotes\fR column;
in addition, partially collected lines and words are in the environment.
Everything else is global; examples are page-oriented parameters,
diversion-oriented parameters, number registers, and macro and string definitions.
All environments are initialized with default parameter values.
.h1
.bt
\fB&ev\fI|N\fR	\fIN\(eq\fR0	previous	-	Environment switched to
environment 0\(<=\fIN\fR\(<=2.
Switching is done in push-down fashion so that
restoring a previous environment \fImust\fR be done with \fB.ev\fR
rather than specific reference.
.mh
Insertions from the Standard Input
.pg
The input can be temporarily switched to the system \fIstandard input\fR
with \fBrd\fR,
which will switch back when \fItwo\fR new-lines
in a row are found (the \fIextra\fR blank line is not used).
This mechanism is intended for insertions in form-letter-like documentation.
On \s-1UNIX\s+1, the \fIstandard input\fR can be the user's keyboard,
a \fIpipe\fR, or a \fIfile\fR.
.h1
.bt
\fB&rd\fI|prompt\fR	-	\fIprompt=\fR\s-1BEL\s+1	-	\
Read insertion from the standard input until two new-lines in a row are found.
If the standard input is the user's keyboard, \fIprompt\fR (or a \s-1BEL\s+1)
is written onto the user's terminal.
\fBrd\fR behaves like a macro,
and arguments may be placed after \fIprompt\fR.
.bt
\fB&ex\fR	-	-	-	Exit from \*(NR\(sl\*(TR.
Text processing is terminated exactly as if all input had ended.
.pg
If insertions are to be
taken from the terminal keyboard \fIwhile\fR output is being printed
on the terminal, the command-line option \fB\-q\fR will turn off the echoing
of keyboard input and prompt only with \s-1BEL\s+1.
The regular input and insertion input \fIcannot\fR
simultaneously come from the standard input.
.pg
As an example,
multiple copies of a form letter may be prepared by entering the insertions
for all the copies in one file to be used as the standard input,
and causing the file containing the letter to reinvoke itself using \fBnx\fR (\(sc19);
the process would ultimately be ended by an \fBex\fR in the insertion file.
.mh
Input\(slOutput File Switching
.h1
.bt
\fB&so\fI|filename\fR		-	-	Switch source file.
The top input (file reading) level is switched to \fIfilename\fR.
When the new file ends,
input is again taken from the original file;
\fBso\fR's may be nested.
See \(sc2.2 of the Addendum for additional details.
.bt
\fB&nx\fI|filename\fR		end-of-file	-	Next file is \fIfilename\fR.
The current file is considered ended, and the input is immediately switched
to \fIfilename\fR.
.bt
\fB&pi\fI|program\fR		-	-	Pipe output to \fIprogram\fR (\*(NR only).
This request must occur \fIbefore\fR any printing occurs.
No arguments are transmitted to \fIprogram\fR.
.mh
Miscellaneous
.pg
.h1
.bt
.mc \s12\(br\s0
\fB&mc\fI|c|N\fR	-	off	E,\fBm\fR	\
Specifies that a \fImargin\fR character \fIc\fR appear a distance
\fIN\fR to the right of the right margin
after each non-empty text line (except those produced by \fBtl\fR).
If the output line is too-long (as can happen in no-fill mode)
the character will be appended to the line.
If \fIN\fR is not given, the previous \fIN\fR is used; the initial \fIN\fR is
0.2|inches in \*(NR and 1\|em in \*(TR.
The margin character used with this paragraph was a 12-point box-rule.
.br
.mc
.bt
\fB&tm\fI|string\fR	-	new-line	-	\
After skipping initial blanks, \fIstring\fR (rest of the line) is read in \fIcopy mode\fR
and written on the user's terminal.
.bt
\fB&ig\fI|yy\fR	-	\fI.yy=\fB..\fR	-	Ignore \
input lines.
\fBig\fR behaves exactly like \fBde\fR (\(sc7) except that the
input is discarded.
The input is read in \fIcopy mode\fR, and any auto-incremented
registers will be affected.
.bt
\fB&pm\fI|t\fR	-	all	-	\
Print macros.
The names and sizes of all of the defined macros and strings are printed
on the user's terminal;
if \fIt\fR is given, only the total of the sizes is printed.
The sizes is given in \fIblocks\fR
of 128 characters.
.bt
.lg0
\fB&fl\fR	-	-	B	\c
.lg
Flush output buffer.
Used in interactive debugging to force output.
.mh
Output and Error Messages.
.pg
The output from \fBtm\fR, \fBpm\fR, and the prompt from \fBrd\fR,
as well as various \fIerror\fR messages are written onto
\s-1UNIX\s+1's \fIstandard message\fR output.
The latter is different from the \fIstandard output\fR,
where \*(NR formatted output goes.
By default, both are written onto the user's terminal,
but they can be independently redirected.
.pg
Various \fIerror\fR conditions may occur during
the operation of \*(NR and \*(TR.
Certain less serious errors having only local impact do not
cause processing to terminate.
Two examples are \fIword overflow\fR, caused by a word that is too large
to fit into the word buffer (in fill mode), and
\fIline overflow\fR, caused by an output line that grew too large
to fit in the line buffer;
in both cases, a message is printed, the offending excess
is discarded,
and the affected word or line is marked at the point of truncation
with a \(** in \*(NR and a \(lh in \*(TR.
The philosophy is to continue processing, if possible,
on the grounds that output useful for debugging may be produced.
If a serious error occurs, processing terminates,
and an appropriate message is printed.
Examples are the inability to create, read, or write files,
and the exceeding of certain internal limits that
make future output unlikely to be useful.
.pg
.bp
