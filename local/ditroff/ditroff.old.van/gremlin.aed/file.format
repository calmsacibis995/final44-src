This file describes the format for Gremlin files.

Overall File Format
------- ---- ------

1. The first line of each Gremlin file contains the
string "gremlinfile".

2. The second line of the file contains an orientation,
and x and y values for a positioning point, separated by
spaces.  The orientation is either "0" or "1".  0 means
that Gremlin will display things in horizontal format
(drawing area wider than it is tall, with menu across top).
1 means that Gremlin will display things in vertical format
(drawing area taller than it is wide, with menu on left
side).  X and y are floating point values giving a positioning
point to be used when this file is read into another file.
The stuff on this line really isn't all that important;
I suggest using "1 0.00 0.00".

3. The rest of the file consists of zero or more element
specifications.  After the last element specification is
a line containing the string "-1".

Element Specifications
------- --------------

1. The first line of each element contains a single decimal
number giving the type of the element.  Valid types are:

	0 -	bottom-left-justified text
	1 -	bottom-right-justified text
	2 -	center-justified text
	3 -	vector
	4 -	arc
	5 -	curve
	6 -	polygon
	10-	top-left-justified text
	11-	top-center-justified text
	12-	top-right-justified text
	13-	left-center-justified text
	14-	right-center-justified text
	15-	bottom-center-justified text

2. After the type come a variable number of lines, each specifying
a point used to display the element.  Each line contains an
x-coordinate and a y-coordinate in floating point format, separated
by spaces.  The list of points is terminated by a line containing
the string "-1.0 -1.0".  The meaning of the points depends on the
type of the element:

	vectors: straight lines will be drawn between consecutive
		points.
	polygons: straight lines (as in vectors) bound a filled
		polygon.  If the vectors don't make up a closed
		object, it is closed for purposes of fill.
	curves:	a smooth curve will be drawn between the points.
	arcs: there are either two or three points.  The first
		point gives the center of curvature of the arc.
		The second point gives a point on the
		circumference of a circle about the first point.
		If there are just two points, a circle is drawn.
		If there is a third point, a circular arc is
		drawn counter-clockwise from the second point
		until it intersects a line between the first and
		third points (the third point need not lie on the
		circle).
	text: there is usually just one point, which is used to
		position the text.  If there are two points,
		the mid-point between them is used to position
		the text.  Justifying is done by placing the
		text so that the point is in the given position
		relative to the text.  For example, "top-center-
		justified" means that the center of the top side
		of the text's bounding box lies on the given point.

3. After the points comes a line containing two decimal values,
giving the brush and size for the element.  The brush determines
the style in which things are drawn.  For vectors, arcs, and
curves there are six legal brush values:

	1 -	thin dotted lines
	2 -	thin dot-dashed lines
	3 -	thick solid lines
	4 -	thin dashed lines
	5 -	thin solid lines
	6 -	medium solid lines

For polygons one more value, 0, is legal.  It specifies a
polygon with an invisible border.

For text, the brush selects a font as follows:

	1 -	roman (R font in troff)
	2 -	italics (I font in troff)
	3 -	bold (B font in troff)
	4 -	special (S font in troff?)

If you're using grn to run your pictures through ditroff, the
font is really just a starting font:  the text string can
contain formatting sequences like "\fI" or "\d" which may
change the font (as well as do many other things).


For text, the size field is a decimal value between 1 and 4.
It selects the size of the font in which the text will be drawn.

For polygons, this size field is interpreted as a stipple
number to fill the polygon with.  The number is used to index
into a stipple "font" at print time.


4. The last line of each element contains a decimal number and a
string of characters, separated by a single space.  The number
is a count of the number of characters in the string.  This
information is only used for text elements, and contains the text
string.  There can be spaces inside the text.  For arcs, curves,
and vectors, this line of the element contains the string "0".

Notes on Coordinates
----- -- -----------

Gremlin was designed for AEDs, and its coordinates reflect the
AED coordinate space.  For vertical pictures, x-values range
116 to 511, and y-values range from 0 to 483.  For horizontal
pictures, x-values range from 0 to 511 and y-values range from
0 to 367.  Although you needn't absolutely stick to this range,
I suspect you'll get best results if you at least stay in this
vicinity.  This is because some of the plotting programs do
scaling on the assumption that the range above is to just fit on
an 8.5x11-inch piece of paper.  Also, point lists are terminated
by a point of (-1, -1), so you shouldn't ever use negative
coordinates.  Gremlin writes out coordinates using format
"%f1.2";  it's probably a good idea to use the same format if
you want to be absolutely safe.

