 
#include <suntool/tool_hs.h>
#include <suntool/gfxsw.h>
#include <suntool/menu.h>
#include <suntool/wmgr.h>
#include <stdio.h>
#include <ctype.h>
#include <sys/ioctl.h>
#include <signal.h>
#include "framebuf.h"
#include "dev.h"
#include "defs.h"
/***************************/

typedef struct {
	int width, height, depth;
	short *bits;
} rast_type;


struct header {
	short	magic;
	unsigned short	size;
	short	maxx;
	short	maxy;
	short	xtnd;
} header;

struct	dispatch{
	unsigned short	addr;
	short	nbytes;
	char	up;
	char	down;
	char	left;
	char	right;
	short	width;
};
struct	fontdes {
	int	fnum;			/* if == -1, this position unused */
	int	psize;
	struct	dispatch *disp;
	char	*bits;
} fontdes[NFONTS+1];			/* is initialized at start of main */


#define DISPATCHSIZE	256		/* must be a power of two */
#define CHARMASK	(DISPATCHSIZE-1)
#define DSIZ		((sizeof *dispatch)*DISPATCHSIZE)
#define OUTFILE 	fileno (stdout)

#define	RES		120		/* resolution of device (dots/"inch") */
#define RASTER_LENGTH	1024		/* device line length (pixels) */
#define CROP_LENGTH	800		/* Length of line if the pages are to
					 * be cropped of extra white space to
					 * the left hand margin.
					 */
#define RASTER_WORDS	((RASTER_LENGTH + 15 ) / 16)
#define PAGELEN		11		/* length of page (inches) */
#define NLINES		1300		/* size of actual page (pixels) */
#define SLOP_SIZE	(PAGELEN * RES - NLINES)
#define BUFFER_SIZE	(SLOP_SIZE * RASTER_WORDS)
#define BUFFTOP (&buffer[0])
short   buffer[BUFFER_SIZE];

struct page{
	struct pixrect * pg_image; /* Bit map image */
	struct page * next_page;   /* Next page in list...not used I think */
	struct page * prev_page;   /* Previous page in list...also not used */
	long temp_loc;		/* Location in file of current processing */
	int v_pos, h_pos;	/* Current pixel location of processing */
	int font;		/* Font currently being used for printing */
	int size;		/* Point size for the current font */
	int min_h_pos;		/* Minimal hor. position used for cropping */
	int done;		/* Processing has been completed */
	int page_number;	/* Number of page */
};

struct list{
	int num;		/* Page number */
	struct list * next;	/* Next element in list */
	int x;			/* Position in tool name stripe border for
				 * the number of the page to go.
				 */
	int y;
};

