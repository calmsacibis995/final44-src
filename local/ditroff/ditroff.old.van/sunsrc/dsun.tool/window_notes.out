






         _D_s_u_n._t_o_o_l - _A _W_i_n_d_o_w _T_o_o_l _V_e_r_s_i_o_n _o_f _D_s_u_n
Dsun.tool is  a  conversion  of  dsun,  which  used  to  run
independent  of  the  Sun  II window system, that allows the
user to display his/her document in the window system.

The conversion consists of two basic parts:

    1) Document Production - Taking what  dsun  used  to
    write  anywhere  it  saw fit and making it go into a
    specific window of specific dimensions.

    2) Optimization of Production - The method  used  by
    dsun to display text doesn't run very fast under the
    window system. Thus, there need to be some  improve-
    ments made in the production of bit maps for the do-
    cument.


_1.  _D_o_c_u_m_e_n_t _P_r_o_d_u_c_t_i_o_n

Most of what dsun does is device independent.  Lots of  cal-
culations  and  scalings  and  loading of fonts (gross) take
place before a character bit map is actually written to  the
screen.

The first thing to note is that dsun.tool doesn't  write  to
the  "screen"  as  did  dsun.  It  writes  to  a pixwin that
represents the exposed area of a specific  window.  This  is
nice  since  pixwin  operations  allow us to do all sorts of
things such as changing the window size, moving  the  window
around,  etc...  The  character bit maps could be written to
the bare pixrect, but there is little point  since  that  is
effectively what dsun is doing and the pixrect level doesn't
afford the same power as the pixwin level.

Every page in a document is represented by  a  page  struct.
Each  one of these structs has a memory pixrect allocated to
it(There are only five such memory pixrects kept  around  at
any  one  time  due to memory considerations-- although this
will probably change).

When dsun.tool produces a character for a specific page,  it
always  writes  it into the memory pixrect for that page. If
this page is the one desired for display by the  user,  then
it is also written to the pixwin for the display window.

The reason for maintaining a memory pixrect  for  each  page
produced  (remember,  only five right now) is that dsun.tool
will continue processing pages after the  one  currenlty  on
display  has  been  completed.  Thus, if you read page 5 and
spend a little more than a few seconds doing so then you can
flip  to  page 6 which has already been produced and have it
displayed immediatly since its  bit  map  has  already  been













generated.(See optimizations below).

The display of  a  page  whose  bit  map  has  already  been
displayed  is  simply  a pw_write() of the bit map stored in
memory to the window pixwin.

Thus, the places where dsun.tool interfaces  to  the  window
system are:

    outc()          -       Store the bit map for a character in memory
                            and maybe on the screen.

    page_control()  -       Manage the buffer of bit maps(page structs)
                            and deal with I/O interrupts.

    display()       -       Display a page struct's bit map in the window.

    scroll_up()     -       Scroll the current page up the screen.

    scroll_down()   -       Scroll the current page down the screen.

    point()         -       Used for drawing a point on the screen.
                            Used in the construction of tables,etc.

    sigwincher()    -       Repairs damage to window surface.


Note: These are the interface to the "graphics" part of  the
window  system.  dsun.tool makes use of interrupt driven I/O
which also interfaces to the window system  (  at  the  tool
level ).

_2.  _O_p_t_i_m_i_z_a_t_i_o_n_s

This part of this document still needs  to  be  written.   A
quick  note  though...dsun.tool processes pages until it's 5
page buffer is full. If at any time the user requests either
a  page  change  or some other action, processing is halted,
the state of the current page is saved and  the  request  is
serviced.












9

9



