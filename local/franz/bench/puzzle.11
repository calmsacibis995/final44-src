(eval-when (compile)
  (defknown vref (form fnp)
    (if fnp (fnp-barf form)
      (let (((vec idx) (cdr form)))
	(binding-stacknum
	 (h vec ())
	 (emitpush 'ar1)
	 (h idx ())
	 (emit '#(bicl3 #(reg slp cl$tcm_vect_adr) #(reg+ sp ()) r0))
	 (setq *stacknum* (1- *stacknum*))
	 (emit '#(addl2 ar1 r0))
	 (emit '#(movl #(reg r0 ()) ar1))))))
  (defknown vset (form fnp)
    (if fnp (fnp-barf form)
      (let (((vec idx new) (cdr form)))
	(binding-stacknum
	 (h vec ())
	 (emitpush 'ar1)
	 (h idx ())
	 (emitpush 'ar1)
	 (h new ())
	 (emit '#(bicl3 #(reg slp cl$tcm_vect_adr) #(reg sp 4) r0))
	 (emit '#(addl2 #(reg sp ()) r0))
	 (emit '#(movl ar1 #(reg r0 ())))
	 (popstack 2)))))
  )

(declare (special pieceCount class pieceMax puzzle p kount)
	 (fixnum m n i j k kount))

(eval-when (eval load compile)
  (setq size 511)
  (setq classMax 3)
  (setq typeMax 12)
  (setq d 8)
  (setq true #t)
  (setq false ()))

(defmacro zerop (x) `(= 0 ,x))		;less generic...

(defun varray (&restl dims)
  (cond ((null dims) ())
	((null (cdr dims)) (make-vector (car dims)))
	(#T (let ((v (make-vector (car dims))))
		 (dotimes (i (car dims))
		     (vset v i (apply #'varray (cdr dims))))
		 v))))


(defmacro areff (array . indices)
  (do ((form array `(vref ,form ,(car ind)))
       (ind indices (cdr ind)))
      ((null ind) form)))

(defmacro aref (array . indices) `(areff ,array ,@indices))

(setq pieceCount (varray (1+ #.classMax)))
(setq class (varray (1+ #.typeMax)))
(setq pieceMax (varray (1+ #.typeMax)))
(setq puzzle (varray (1+ #.size)))
(setq p (varray (1+ #.typeMax) (1+ #.size)))

(defun fit (i j)
  (do ((k 0 (1+ k))
       (lim (areff pieceMax i)))
      ((> k lim)
       #.true)
    (if (and (aref p i k)
	     (aref puzzle (+ j k)))
	(return #.false))))

(defun place (i j)
  (do ((k 0 (1+ k))
       (lim (areff pieceMax i)))
      ((> k lim))
    (if (aref p i k)
	(setf (aref puzzle (+ j k)) #.true)))
  (setf (areff pieceCount (areff class i))
	(1- (areff pieceCount (areff class i))))
  (do ((k j (1+ k)))
      ((> k #.size)
       (format tyo '|puzzle filled~%|)
       0)
    (if (null (aref puzzle k))
	(return k))))

(defun remove (i j)
  (do ((k 0 (1+ k))
       (lim (areff pieceMax i)))
      ((> k lim))
    (if (aref p i k)
	(setf (aref puzzle (+ j k)) #.false)))
  (setf (areff pieceCount (areff class i))
	(1+ (areff pieceCount (areff class i)))))

(defun trial (j)
  (do ((i 0 (1+ i))
       (k 0))
      ((> i #.typeMax)
       (setq kount (1+ kount))
       #.false)
    (if (not (zerop (areff pieceCount (areff class i))))
	(cond ((fit i j)
	       (setq k (place i j))
	       (cond ((or (trial k) (zerop k))
		      (format tyo '|piece ~d at ~d ~%| (1+ i) (1+ k))
		      (setq kount (1+ kount))
		      (return #.true))
		     (#T (remove i j))))))))

(defun fill-pieceMax (class nn a b c iclass)
 (progn (do i 0 (1+ i) (> i a)
	    (do j 0 (1+ j) (> j b)
		(do k 0 (1+ k) (> k c)
		(setf (aref p nn (+ i (* #.d (+ j (* #.d k)))))
		      #.true))))
	(setf (areff class nn) iclass)
	(setf (areff pieceMax nn)
	      (+ a (* b #.d) (* c #.d #.d)))))

(defun main ()
  (let ((m 0)  (n 0))
    (do m 0 (1+ m) (> m #.size)
	(setf (aref puzzle m) #.true))
    (do i 1 (1+ i) (> i 5)
	(do j 1 (1+ j) (> j 5)
	    (do k 1 (1+ k) (> k 5)
		(setf (aref puzzle (+ i (* #.d (+ j (* #.d k)))))
		      #.false))))
    (do i 0 (1+ i) (> i #.typeMax)
	(do m 0 (1+ m) (> m #.size)
	    (setf (aref p i m) #.false)))
    (fill-pieceMax class 0 3 1 0 0)
    (fill-pieceMax class 1 1 0 3 0)
    (fill-pieceMax class 2 0 3 1 0)
    (fill-pieceMax class 3 1 3 0 0)
    (fill-pieceMax class 4 3 0 1 0)
    (fill-pieceMax class 5 0 1 3 0)
    (fill-pieceMax class 6 2 0 0 1)
    (fill-pieceMax class 7 0 2 0 1)
    (fill-pieceMax class 8 0 0 2 1)
    (fill-pieceMax class 9 1 1 0 2)
    (fill-pieceMax class 10 1 0 1 2)
    (fill-pieceMax class 11 0 1 1 2)
    (fill-pieceMax class 12 1 1 1 3)
    (setf (areff pieceCount 0) 13)
    (setf (areff pieceCount 1) 3)
    (setf (areff pieceCount 2) 1)
    (setf (areff pieceCount 3) 1)
    (setq m (+ 1 (* #.d (+ 1 (* #.d 1)))))
    (setq kount 0)
    (if (fit 0 m)
	(setq n (place 0 m))
	(format tyo '|error 1~%|))
    (if (trial n)
	(format tyo '|success in ~d~%| kount)
	(format tyo '|failure~%|))))

(defun timain ()
  (let ((old (runtime)))
    (main)
    (- (runtime) old)))


;; Local Modes:
;; Mode:LISP
;; Fill Column:78
;; Auto Fill Mode:1
;; Comment Column:40
;; END:

