head     1.1;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.1
date     83.01.31.07.09.06;  author jkf;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@." $Header$
.Lc The\ Advise\ Package 17
.de Tf
.sp 2v
.ti -.5i
\fB\\$1\fP -
..
.pp
     ADVISE allows the user to modify functions and their interfaces.  This is
done by inserting commands (called ADVICE) before, after or around the function
definition, or anywhere within existing advice.  A function that has been advised can be advised again, unadvised,
or readvised. This is also true when advising interfaces between functions.
This package is based on the advise system in Interlisp. The advise package is available by (load 'advise).  
.pp
     ADVISE is a lambda function of four arguments.
The first argument is the function specification, the second and third designate where the advice is to be placed, and the fourth is the advice itself.  Below are examples of the possible formats for the first argument, ignoring, for the moment, the additional arguments WHEN, WHERE, and WHAT.
.Tf "(ADVISE 'FN 'WHEN 'WHERE 'WHAT)"
Here a single function will be modified.
.Tf "(ADVISE '(FN1 FN2 FN3 ...) 'WHEN 'WHERE 'WHAT)"
A list of functions may be modified at once.
.Tf "(ADVISE '(FN1 IN FN2) 'WHEN 'WHERE 'WHAT)"
In this case, FN1 will be modified whenever it is called from FN2.  ADVISE does this by creating its own version of FN1, called FN1-IN-FN2.  This new function name is substituted for FN1 whenever it is referenced in FN2.
.Tf "(ADVISE '((FN1 FN2 FN3) IN FN4) 'WHEN 'WHERE 'WHAT)"
All occurrences of FN1, FN2, and FN3 that are in FN4 will be modified with the specified advice.
.Tf "(ADVISE '(FN1 IN (FN2 FN3 FN4))  'WHEN 'WHERE 'WHAT)"
All occurrences of FN1 that are in FN2, FN3, and FN4 will be advised.
.Tf "(ADVISE '((FN1 FN2 ...) IN (FN3 FN4 ...))  'WHEN 'WHERE 'WHAT)"
All of the first list's functions, when found within the body of the second list's functions, will be advised.
.sp 2v
.pp
     The second argument to ADVISE specifies whether advice is to be placed AFTER, BEFORE or AROUND the body of the function or functions.  If this argument is NIL, advise will default to BEFORE.  To place advice AROUND a function, simply put a "*" within the advice.  ADVISE will then insert the function definition at that point.  Note that the value of the "where" argument is ignored if "when" is AROUND.
.pp

	After "when", ADVISE has a third argument;  "where".  This allows the user to further indicate where, in a sequence of advice, a new piece or a modification of an existing piece, should be placed.  After having specified "when" the advice is to placed,  LAST, BOTTOM, END, or NIL will cause the new advice to be placed after all other previous advice, BEFORE or AFTER the function definition.  TOP or FIRST will place the advice before other advice BEFORE or AFTER the definition.  
.pp

	If "where" is neither LAST, BOTTOM, END, NIL, TOP, or FIRST, the argument is used to construct an editor command that can exactly determine where the new advice is to be placed, within existing advice.
It is important to  note that the new advice is then inserted 
.i after 
the specified position.
.pp

	The last argument to advise is the advice itself.  It is inserted according to the "when" and "where" specifications, or their default values.  Below are some examples of calls to ADVISE.
.Tf "(ADVISE 'FN1 NIL NIL '(PRINT 'FOO))"
This call will cause (PRINT 'FOO) to be inserted BEFORE FN1 is executed.  
.Tf "(ADVISE '(FN1 FN2) 'AFTER NIL '(SETQ THIS THAT))"
The value of THIS will be set to THAT AFTER FN1 and FN2 have finished executing.
.Tf "(ADVISE '(FN1 IN (FN2 FN3)) 'AROUND NIL '(PUTD FN5 *))"
This will cause FN5 to assume the value of function definition FN1 when FN1 has been called from either FN2 or FN3.  Note that the body of FN1 will be substituted for * in the advice.
.Tf "(ADVISE '((FN1 FN2) IN FN3) 'AFTER 'TOP '(GO EXIT))"
As soon as FN1 and FN2 complete execution when called from FN3,  the (GO EXIT) will be performed.  Note that the TOP specification causes (GO EXIT) to be placed before all other advice that is AFTER the function.
.Tf "(ADVISE 'FN1 'AFTER '(LC EXIT) '(PRINT '(FN1 EXITED)))
In this case, the third argument to advise is executed by the editor.  The advise is inserted after the atom "EXIT" .  Note that "EXIT" must exist within advice that has been placed AFTER FN1.  Any valid scope of attention changing command may be used to locate the correct position after which the advice is to be placed.
.sp 2v
.pp
     After a function has been changed by ADVISE, it can be UNADVISED.  This will restore it to its unmodified state, by removing all advice.  Advice is stored on the READVICE property list for use by READVISE.  READVISE will put back all of the latest series of advice placed before an UNADVISE.  UNADVISE and READVISE are nlambdas, and have three possible forms, as follows:
.Tf "(UNADVISE 'FN1 'FN2 ...)"
This call will unadvise the list of functions given.
.Tf "(READVISE 'FN1 'FN2 ...)"
This call will readvise the list of functions given.
.Tf "(UNADVISE)"
Unadvise will unadvise all functions that have been advised previously.  A list of functions that have been advised is maintained in advisedfns.
.Tf "(READVISE)"
Readvise will put back all advice on all previously advised functions, up to the point they were last unadvised. A list of functions that have been unadvised is maintained in advinfolst.
.Tf "(UNADVISE T)"
Calling UNADVISE with an argument T causes the most recent function that has been ADVISED to be UNADVISED.
.Tf "(READVISE T)"
Calling READVISE with an argument T causes the most recent function that has been UNADVISED to be READVISED.

@
