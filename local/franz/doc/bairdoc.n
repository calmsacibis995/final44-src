." Chapter 3.2, after lessp
." contributed by biar group
.Lf <= "'fx_arg1 'fx_arg2 ..."
.Lx <=& "'x_arg1 'x_arg2"
.Re
t iff
\fI(> 'fx_arg1 'fx_arg2)\fR
[or \fI(>\fR&\fI 'x_arg1 'x_arg2)\fR] is nil, otherwise nil.
The general fucntion, \fI<=\fP, can take more than two arguments.
.Lf >= "'fx_arg1 'fx_arg2"
.Lx >=& "'x_arg1 'x_arg2"
.Re
t iff
\fI(< 'fx_arg1 'fx_arg2 ...)\fR
[or \fI(<\fR&\fI 'x_arg1 'x_arg2)\fR] is nil, otherwise nil.
.No
The general function, \fI>=\fP, can take more than two arguments.
." Chapter 2.2, after listp
.Lf litatom "'g_arg"
.Re
t iff g_arg is an atom, but not a number.
." after equal
.Lf nequal "'g_x 'g_y"
.Re
t iff g_x is not \fIequal\fR
to g_y, otherwise nil.
." Chapter 5, after infile
.Lf lineread "[['p_port] ['s_flag]]"
.Re
a list consisting of s-expressions on a line from the port p_port 
(or piport if p_port is not given).
If an s-expression (e.g., a list) takes more than one line,
or a line terminates in a space or tab, then
\fIlineread\fR continues reading until an
expression ends at the end of a line.
.No
If s_flag is t, then if the first character on a line is a newline,
\fIlineread\fR performs a \fItyi\fR and returns nil.
If s_flag is nil or not present, \fIlineread\fR
does a \fIread\fR skipping over any blank lines to make sure that an
s-expression is actually read.
.Se
\fIlineread\fP uses \fIread\fP, advancing the port character pointer.
." Chapter 2.3.4, after setq
.Lf defv "g_arg1 g_arg2"
.Eq
\fI(set g_arg1 g_arg2)\fR
.Lf pp-form "'g_form ['p_port] ['n_lmar]"
.Re 
nil
.Se
g_form is pretty-printed to the port p_port (or poport if
p_port is not given).  If \fIpp-form\fP is also supplied with an integer
(n_lmar), that integer will be used as a left margin setting (0 is the
default).
This is the  function which \fIpp\fP uses (n_lmar = 0). 
\fIpp-form\fP does not look for
function definitions or values of variables, it just prints out the form
it is given.
.No
This is useful as a top-level-printer, c.f. 
.i top-level
in Chapter 6.
.Lf sload "'s_file1 ..."
.Se
The files named are opened for reading and each
form is read, optionally printed, and evaluated.
.No
What \fIsload\fR prints is
controlled by the special atom \fI$sldprint\fR.  If \fI$sldprint\fR is t
(default), then if a form is recognizable as a function definition, only the
function name is printed, otherwise the whole form is printed.  If
\fI$sldprint\fR is \fIeq\fR to \fIvalue\fR, then the result of
each form's evaluation will
also be printed.  Printing the forms' values can be controlled by setting
\fIsload-print\fR equal to the name of the function to be called.
\fIsload\fR recognizes named functions by looking at the \fIsloadprintarg\fR
property of the function name.  The value of the \fIsloadprintarg\fR property
should be the argument number of the function name.  For the standard Franz
Lisp functions, the properties are already set.
.Ex
(defprop def 1 sloadprintarg)	\fI; This is the default--declaring that
.br
				; the name of the function definition is the 
.br
				; first argument.\fR
.br
.bp
." Chapter 2.3.1
.pp
The functions described below are an alternative to the gensym facility.
They generate new symbols by attaching counter numbers to the ends of the
symbols' names.  An example follows of how the functions are used.
.Eb
-> (initsym 'joe '(john 5))	\fI; initializing new symbol counters\fR
(joe0 john5)
-> (newsym 'john)		\fI; create a new symbol\fR
john6
-> (newsym 'chuck)		\fI; symbol need not be \fRinitsym\fI'ed\fR
chuck0
-> (oldsym 'john)		\fI; get current symbol\fR
john6
-> (allsym 'john)		\fI; get all symbols between 0 and counter\fR
(john0 john1 john2 john3 john4 john5 john6)
-> (allsym '(john 5))		\fI; get all symbols between 5 and counter\fR
(john5 john6)
-> (remsym 'joe '(john 4))	\fI; \fRremob\fI all interned symbols
				; associated with \fRjoe\fI and from
				; \fRjohn4\fI to the current \fRjohn\fI
				; symbol--returns symbols with symbol counters
				; before doing \fRremsym
(joe0 john6)
-> (symstat 'joe 'john)
((joe nil) (john 3))
.Ee
.Lf initsym "'g_arg1 ..."
.Wh
g_arg\fIi\fR is a list (n_counter\fIi\fR s_arg\fIi\fR) or a string
s_arg\fIi\fR
(which is equivalent to (0 s_arg\fIi\fR)).
.Re
a list of interned identifiers using the symbol counters
n_counter\fIi\fR, i.e., the result of concatenating s_arg\fIi\fR
to n_counter\fIi\fR.
.Ex
(initsym 'joe '(john 5)) ==> (joe0 john5)
.No
See also newsym, oldsym, allsym, remsym, and
symstat functions.
.Lf newsym "'s_arg"
.Re
an interned identifier formed by concatenating the name s_arg
to the symbol counter for s_arg.  The symbol counter is stored
on the property list of s_arg under \fIsymctr\fR.
If there is no counter, a counter of 0 is used and added to the property
list.  Thus, a symbol need not be \fIinitsym\fRed.
.Ex
(initsym 'joe '(john5)) ==> (joe0 john5)
.br
(newsym 'john) ==> john6
.br
(newsym 'joe) ==> joe1
.No
See also initsym, oldsym, allsym, remsym, and
symstat functions.
.Lf oldsym "'s_arg"
.Re
the identifier using the current symbol counter for s_arg, 
rather than creating a new identifier.  If no symbol counter exists for
s_arg, then s_arg is returned.
.No
See also initsym, newsym, allsym, remsym, and symstat functions.
.Lf allsym "'g_arg"
.Wh
g_arg is a list (s_arg n_counter) or a string s_arg (equivalent
to (s_arg 0)).
.Re
a list of all the created identifiers between n_counter and the current
symbol counter for s_arg.
.Ex
(allsym 'john) ==> (john0 john1 john2)
.No
See also initsym, newsym, oldsym, remsym, and symstat functions.
.Lf remsym "'g_arg1 ..."
.Wh
g_arg\fIi\fR is a list (s_arg\fIi\fR n_counter\fIi\fR) or a string
s_arg\fIi\fR (which is equivalent to (s_arg\fIi\fR 0)).
.Re
a list of symbols s_arg\fIi\fR with the current symbol counters.
.Se
remsym \fIremob\fR's all the created identifiers between zero and the
current symbol counter for s_arg\fIi\fR.
.No
See also initsym, newsym oldsym, allsym, and symstat functions.
.Lf symstat "'s_arg1 ..."
.Re
a list of pairs consisting of (s_arg\fIi\fR symctr\fIi\fR) where
symctr\fIi\fR is s_arg\fIi\fR's current symbol counter.
.No
See also initsym, newsym, oldsym, allsym, and remsym functions.
