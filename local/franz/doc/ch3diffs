1d0
< ." @(#)ch3.n	34.1 1/29/81
3c2
< .sh 2 "" \n(ch 1
---
> .sh 2 "" \n(ch 0
22c21,22
< An attempt to divide by zero will cause a floating exception signal
---
> An attempt to divide by zero a similar bogus operation
> will cause a floating exception signal
27a28,33
> .sh 2 Generic\ Functions
> .pp
> This section describes the usual arithmatic function. Standard floating point
> double precision library elementary function routines are used.
> The next section
> has the fixnum-only functions.
34c40
< abs.
---
> .i abs.
52c58
< the arc cosine of fx_arg in the range 0 to \(*pi.
---
> the (flonum) arc cosine of fx_arg in the range 0 to \(*pi.
55c61
< the arc sine of fx_arg in the range \(mi\(*p/2 to \(*p/2.
---
> the arc (flonum) sine of fx_arg in the range \(mi\(*p/2 to \(*p/2.
58c64
< the arc tangent of fx_arg1/fx_arg2 in the range -\(*p to \(*p.
---
> the arc (flonum) tangent of fx_arg1/fx_arg2 in the range -\(*p to \(*p.
90c96
< the cosine of fx_angle (which is assumed to be in radians).
---
> the (flonum) cosine of fx_angle (which is assumed to be in radians).
116c122
< raised to the fx_arg power.
---
> raised to the fx_arg power (flonum) .
127c133
< x_arg factorial.
---
> x_arg factorial. (fixnum or bignum)
180a187,189
> .No
> see 
> .i sticky-bignum-lsh
217a227,229
> .Lf *quo "i_x i_y"
> .Re
> the integer part of i_x / i_y.
249a262,264
> .Lf sticky-bignum
> .Re
> this is useful in conesly rounded high-preison floating point calculations.
252c267,269
< add and plus.
---
> .i add 
> and
> .i plus.
262,265c279,285
< These functions are restricted to fixnum arguments in Maclisp.
< The lisp compiler will assume the arguments are fixnums and open
< code most of these functions.
< .Lf 1+ "'n_arg"
---
> These functions are restricted to fixnum arguments and results
> and are based on identically named functions in Maclisp.
> The 
> .Fr lisp
> compiler will assume the arguments are fixnums and open
> code most of these functions. 
> .Lf 1+ "'x_arg"
267,268c287,288
< add1.
< .Lf 1\(mi "'n_arg"
---
> .i add1.
> .Lf 1\(mi "'x_arg"
270,271c290,291
< sub1.
< .Lf \(pl "'n_arg"
---
> .i sub1.
> .Lf \(pl "'x_arg"
273,274c293,294
< add.
< .Lf \(** "'n_arg"
---
> .i add.
> .Lf \(** "'x_arg"
276,277c296,297
< times. 
< .Lf \(mi "'n_arg"
---
> .i times. 
> .Lf \(mi "'x_arg"
279,280c299,300
< difference.
< .Lf  / "'n_arg1 'n_arg2"
---
> .i difference.
> .Lf  / "'x_arg1 'x_arg2"
282,283c302,303
< quotient
< .Lf < "'n_arg1 'n_arg2"
---
> .i quotient
> .Lf < "'x_arg1 'x_arg2"
285c305
< lessp.
---
> .i lessp.
288,289c308,309
< equal.
< .Lf > "'n_arg1 'n_arg2"
---
> .i equal.
> .Lf > "'x_arg1 'x_arg2"
291c311
< greaterp.
---
> .i greaterp.
