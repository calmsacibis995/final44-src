.Lc dummy\ chapter 111
.sh +0 format
.Lf format 'sp_destination\ 'st_control-string\ 'g_arg1\ ...\ 'g_arg\fIn\fP
.Wh
sp_destination is either nil, t, or a port;
.Re 
if sp_destination is nil then the formatted string, else it returns
a list of the arguments not used.
.No
The control-string  (st_control-string) contains characters to be printed,
and 
.i directives
which describe how the arguments should be printed.
.i Format
comes with a set of built-in directives, and the user is free to add more
directives with the 
.i defformat
macro.
The following sections describe how a 
.i format
directive is written, what the default directives are, and then
how new directives are written.
The 
.i format
function is a 
.Fr
adaptation of the function which runs on the Lisp Machine and Maclisp.
The default directives are compatible with the Maclisp version of 
.i format.
.Ex
\fI(format t "~r + ~@r + ~2r = ~10d~%" 12 23 123 (+ 12 23 123))\fP
.br
prints
.br
twelve + XXIII + 1111011 =        158
.br
.sh +1 "directive format"
.pp
A directive begins with a tilde (~), and ends with a directive name. 
Between the tilde and the name there may be flags
and comma-seperated parameters.
There are two flags, the colon (:) and the atsign (@). 
The parameters come in three types: numeric, run-time supplied, or 
character.
Numeric parameters are simply a sequence of decimal digits.
There are two run-time supplied parameters: v and #.
The value of the v parameter is the value of the next unused argument.
The value of the # parameter is the number of unused arguments left.
A character parameter is written as a single quote (') followed by 
a character.  Its value is the ascii value of that character.
Parameters are seperated by commas. 
Parameters which are missing are given the value 
.i nil.
.pp
The interpretation of the 
flags and parameters depends on the particular directive.  
Extra parameters are usually ignored and missing parameters are usually
given a reasonable default value.
.pp
The directive name is usually the first character which doesn't look like
a parameter, flag or comma.
It can be a multi-character string if surrounded by backslashes (\\).
Since the backslash is normally the escape character, this means that
a multi-character directive must be surrounded by a pair of doubled 
backslashes.
For compatibility, all directive names are converted to lower case.
Examples of directives are:
.br
.tl ''~d  ~@d ~3,2:@x ~:@3,,4\\\\multi\\\\''
.sh +0 directives
.ip \fB~a\fP
print the next argument without slashification, that is, using 
.i patom.
There are a four optional parameters for this directive:
.br
\fB~\fP\fImincol,colinc,minpad,padchar\fP\fBa\fP
.br
where
.i  mincol
(default 0)
is the minimum width to be output.  Padding is done
to the right using the 
.i padchar 
(which defaults to space).
The are at least 
.i minpad
(default 0)
padding characters output
and when padding is done,
it is done in groups
of 
.i colinc
(default 1)
pad characters.
In general the only parameter likely to be supplied is the first, which
specifies the minimum field width.
The colon and atsign flags are ignored for now.
.ip \fB~s\fP
This is identical to \fB~a\fP except slashification is done, that
is 
.i print
is used instead of
.i patom .
.ip \fB~d\fP
prints the next argument as a decimal integer.
The optional parameters are
.br
\fB~\fP\fImincol,padchar\fP\fBd\fP
.br
where 
.i mincol 
(default 0)
is the minimum field width.
Padding is done to the left using the padding 
character
.i padchar
(default space).
.ip \fB~o\fP
prints the next argument in octal (base 8).
The optional parameters are the same as those to \fB~d\fP.
.ip \fB~p\fP
prints the character 's' if the next argument is not one.
(The \fBp\fP stands for 'plural').
.ip \fB~*\fP
ignores the next argument. \fB~\fP\fIn\fP\fB*\fP ignores the next 
.i n
arguments.
.ip \fB~\fP\fIn\fP\fBg\fP
goes to argument number 
.i n.
The next directives will use argument 
.i n.
\fB~0g\fP will go to the first argument.
.ip \fB~%\fP
will print a newline (with
.i terpr ).
\fB~\fP\fIn\fP\fB%\fP will print
.i n
newlines.
No argument is used.
.ip \fB~&\fP
will print a newline only if the the cursor is not at the beginning of
the line already.
No argument is used.
.ip \fB~x\fP
will print a space.
\fB~\fP\fIn\fP\fBx\fP will print 
.i n
spaces.
No argument is used.
.ip \fB~~\fP
prints a tilde.
\fB~\fP\fIn\fP\fB~\fP will print 
.i n
tildes.
No argument is used.
.ip \fB~|\fP
prints a form feed.
\fB~\fP\fIn\fP\fB|\fP  prints
.i n
form-feeds.
No argument is used.
.ip \fB~q\fP
applies the next argument to the parameters given to the directive.
.ip \fB~[\fP
This is used to introduce a case contstruct. 
The complete form is:
.br
\fB~\fIn\fB[\fIstr0\fB~;\fIstr1\fB~;\fR...\fB~;\fIstrn\fB~]\fR
.br
If the parameter 
.i n
is given, then it selects one of the
.i stri
for further interpretation, the others are ignored.
Zero selects the first string (str0).
If a parameter is not supplied, then the next argument selects one of the
.i stri.
If the colon-flag is provided then if the argument is nil, 
.i str0
is selected, else
.i str1 
is selected.
.ip \fB~f\fP
prints the next argument in a floating point format.
\fB~\fIn\fBf\fP will print the number with 
.i n 
digits of precision.
.Lf defformat s_name\ l_args\ s_type\ g_body
.Se
defines the  format directive s_name.
s_name will usually be a single character symbol.
s_type is either 'none', 'one' or 'many' and it describes how many of the
arguments are used by the directive.
A directive whose s_type is 'many' may use any number of parameters, and 
should return the parameters it doesn't use.
If s_type is none, then l_args is a list of one symbol which,
when this directive is seen, is bound
to a hunk containing  the parameters given to this directive.
If s_type is 'one', then l_args is a list of two symbols.
The first symbol is bound to argument for this directive,and the second
symbol is bound to the parameters.
If s_type is 'many', then l_args is a list of two symbols.
The first symbol is bound to the  list of remaining arguments, the secnod
symbol is bound to the parameters.













