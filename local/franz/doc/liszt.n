;	Liszt documentation

Addresses
There are four types of addresses used internally in Franz.

Symbolic:
	These are the names of lisp objects, such as `a', `foo', 34,
	or 3.234234.
	A name is either a local variable, a special variable or a
	number.  A number is either a small fixnum, large fixnum,
	bignum or floating point number.

IADR (intermediate address)
	This type of address is generated from a symbolic address by
	d-loc, d-loclit and the routines d-simple, d-rsimple which
	call them. The forms are

	Nil - the location or value of nil.
	T   - the location or value of t.
	reg - register r0, which is where the result of function calls
	      are stored.
	stack - the address pointed to by np with np incremented after
		the value is stored.  I.E. this is (r6)+
	unstack - the address one word below np (np is decremented before
		  accessing. I.E this is -(r6)
	<atom> - this is just <atom> .  This allows strange forms to be
		 passed directly.
	(stack n) - The n'th value on the namestack for this function.
		    The first value 0(r10) is (stack 1).
	(vstack n) - The cdr of the n'th value on the namestack.  
		     That is, (stack 1) is *0(r10)
	(bind n) - The value of the n'th value on the bindstack.  If 
		   we are talking about a symbol, then this is the value
		   of the symbol, if we are talking about a list this
		   this is the cdr of the list (although this is a rare
		   use). (bind 1) corresponds to *0(r8).
	(lbind n) - The n'th value on the bindstack.  If we are talking
		   about object foo then this is the address of foo
		   in memory.
	(fixnum n) - This is the address of small fixnum n in memory.
		     A small fixnum is in the range -1024 to 1023.
	(immed n)  - The is the immediate constant n. 


EIADR (extended intermediate address)
	This address is generated from an IADR by e-cvt.  It 
	represents symbolically a vax address.  

	<atom> - This corresponds to <atom>.
	(n <atom>)  - This corresponds to n(<atom>)
		      (stack n+1) and (lbind n+1) are converted to these forms.
	(n <atom1> <atom2>) - This corresponds to n(<atom1>)[<atom2>]
			There is currently no IADR which generates this.
	(* n <atom>) - This corresponds to *n(<atom>)
		      (vstack n+1) and (bind n+1) are converted to these forms.
	(+ <atom>) - This corresponds to (<atom>)+
		     stack is converted to this form.
	(- <atom>) - This corresponds to -(<atom>)
		     unstack is converted to this form.
	($ <numb>) - This corresponds to $<atom>
		     (immed <numb>) is converted to this form.
	(# <numb>) - This corresponds to $<loc> where <loc> equals 
		     the base of the fixnums (0x1400) plus 4 * <numb>
		     (fixnum <numb>) is converted to this form
	(* # <numb>) - This corresponds to $<numb>.  It is generated
		     by d-rsimple occasionally when you ask for the
		     cdr of a number (which you do sometimes when you
		     are compiling fixnum operators).
	
Vax Unix assembler addresses
	The addresses are printed from a EIADR by e-cvtas.  The conversions
	are shown in the above section.



--------------
   The  main  compiling function in liszt is d-exp. It is passed an expression
to compile which is bound to the special variable v-form. d-exp is also passed
implicitly three special variables, g-loc, g-cc and g-ret.
   g-loc  is  either  nil  or  an  IADR.  If  g-loc  is nil then the result of
evaluating  v-form  is  not required, but we still must evaluate it to get any
side  effects. If g-loc is non nil, then it tell where the value of the v-form
should be placed.
   g-cc  controls jumping on condition. If g-cc is non nil, then its value has
either a non-null car or non-null cdr but not both. If the car is non-nil then
if  the  value  of  v-form  is  non-nil, a branch should be done to the symbol
stored  in  (car g-cc). If the cdr is non-nil then then if the value of v-form
is  nil,  a branch should be done to the symbol stored in (cdr g-cc). Since at
every  conditional  branch  you  either jump or continue, the car and cdr will
never both be specified.
   g-ret is non nil if the result of evaluating v-form will be returned as the
value of the function we are evaluating. This is used to allow liszt to detect
tail recursion.

    g-locs maintains current information about the state of the stacks:
the bindstack (for specials), the namestack (for locals) and the
exception stack (for errsets and catches).  How can it keep track of all
of that?, well the answer is this:
The form of g-locs is a stack of tokens, with the car of the list being
the first token.  If the token is:
nil :: this represents an unnamed object on the namestack.  This happens
	when calling functons, when the arguments are stacked prior
	to a function call.
<symbol>     :: the named symbol is the name of a local variable
(prog . <n>) :: prog statement which binds <n> special variables
(do . 0)     :: head of a do statement.
(catcherrset . 0) :: catch/errset frame on stack
(lambda . <n>)  :: lambda expression which binds <n> special variables


;; g-labs is another stack of values, it is kept in sync with the
;; dtpr forms in g-locs, each entry is 

nil :: no labels in this form
(endlab (real . gen) (real2 . gen2) ...) :: endlab is the label to go to
		to get out of this body.  after this label will be code
		to unwind specials and locals.
		the 'real' labels are those found in the code. the gen
		labels are those generated and put in the assembler code.
