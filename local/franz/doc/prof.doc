  there are two choices for profiling.
1) /usr/lib/lisp/prof.l : this contains a profiler written in lisp that uses
the evalhook function of lisp.  It gives you a count of the number of times
a funtcion is called, and who calls it.  
[personal comment: I use this profiler exclusively and through its use, I 
can usually double the speed of any program but macroing out the most called 
functions, or by using alternative data structures (e.g using hash 
tables where it is obvious that all the time is spent in assoc).]
The instructions for using prof.l are given in comments at the beginning
of the file.  When being profilied, programs run significantly slower.

2) building a totally profiled lisp interpreter.  This is much more time
consuming to build and painful to use.  A description of how to build
a profiling lisp is given below.    The advantage of this is that you
get call counts for internal interpreter functions (this is no advantage if
you aren't familiar with the internals of the interpreter).  This also
provides a measure of the time spent in each function.  However, due to the
coarsness of the sampling, this time spent measure is quite inaccurate.


How to set up a profiling lisp in lisp opus38.55: (earlier versions
use a similary scheme)
   1) edit the Makefile and follow the instructions for turning on 
      profiling (under 'profiling selection'). remove all the .o
      files, but don't do the 'make' yet.
   2) edit the Makefile in /usr/lib/lisp to give the -p arg to liszt. 
      Remove all .o files and 'make all'
   3) Now type 'make mylisp'.
   4) install mylisp somewhere (for example, /usr/local/plisp)

Compile your lisp code giving liszt the -p switch.

Next you will want to build an executable file containing your functions
and you want to make sure its symbol table contains the functions you
want to profile.  Suppose that your functions are in three files,
foo.l, bar.l and baz.l.  Here is a typical scenario:

% liszt -p foo.l
% liszt -p bar.l
% liszt -p baz.l

% /usr/local/plisp
-> (fasl 'foo 'mapfile)
-> (sstatus appendmap t)	; so we get one large map 
-> (fasl 'bar 'mapfile)
-> (fasl 'baz 'mapfile)
-> (dumplisp testlisp)
-> (exit)

% /usr/lib/lisp/tackon mapfile testlisp     
	tackon will place the info in 'mapfile' in the symbol table for
	testlisp

% testlisp
-> (monitor t)		; turn on profiling
-> .. do whatever you want to profile ...
-> (monitor)		; turn off profiling and dump mon.out
->  (exit)

% prof testlisp
  see results

or 
% prof -c testlisp

