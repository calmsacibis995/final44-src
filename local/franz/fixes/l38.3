Bug fix for Lisp Opus 38.03 (and older)
Fix #: l38.3
Files affected: franz/qfuncl.c (qfuncl.s in earlier versions)
		franz/eval.c
Author: jkf@berkeley

Symptom: if the function 'foo' called from compiled code (while the transfer
    tables were linked) and this caused 'foo' to be autoloaded, then the 
    value of the 'foo' would be set to the begining of the function 'foo'.

Reason: a register was not preserved while the Undefined function error
    was being handled.

Fix: the fix is in qfuncl.c.   In addition, the error handler function
    in eval.c has been rewritten as a safety precaution.

In qfuncl.c, the code after the label nonex should look like:
nonex:	pushl	r0			# preserve table address
	pushl	r1			# non existant fcn
	calls	$1,_Undeff		# call processor
	movl	r0,r1			# back in r1
	movl	(sp)+,r0		# restore table address
	jbr	retry			# for the retry.

In eval.c, the Undeff function should be:
/* Undeff - called from qfuncl when it detects a call to a undefined
    function from compiled code, we print out a message and
    will continue only if returned a symbol (ATOM in C parlance).
*/
lispval
Undeff(atmn)
lispval atmn;
{
    do {atmn =errorh(Verundef,"Undefined function called from compiled code ",
				      nil,TRUE,0,atmn);}
	while(TYPE(atmn) != ATOM);
    return(atmn);		      
}

