head     1.3;
access   jkf sklower layer;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     85.05.22.07.53.41;  author sklower;  state Exp;
branches ;
next     1.2;

1.2
date     83.12.09.16.18.57;  author sklower;  state Exp;
branches ;
next     1.1;

1.1
date     83.01.29.12.49.40;  author jkf;  state Exp;
branches ;
next     ;


desc
@unix pipe creation
@


1.3
log
@last couple of bugs before 4.3
@
text
@#ifndef lint
static char *rcsid =
   "$Header: fpipe.c,v 1.2 83/12/09 16:18:57 sklower Exp $";
#endif


/*					-[Sat Jan 29 12:44:16 1983 by jkf]-
 * 	fpipe.c				$Locker: sklower $
 * pipe creation
 *
 * (c) copyright 1982, Regents of the University of California
 */


#include "global.h"
#include <signal.h>

FILE *fpipe(info)
FILE *info[2];
{
	register FILE *p;
	int fd[2];

	if(0 > pipe(fd)) return( (FILE *) -1);

	if(NULL==(p = fdopen(fd[0],"r"))) {
		close(fd[0]);
		close(fd[1]);
		return( (FILE *) -1);
	}
	info[0] = p;
	if(NULL==(p = fdopen(fd[1],"w"))) {
		close(fd[0]);
		close(fd[1]);
		return( (FILE *) -1);
	}
	info[1] = p;

	return((FILE *) 2); /*indicate sucess*/
}
/* Nioreset *************************************************************/

lispval
Nioreset() {
#ifndef	RTPORTS
	register FILE *p;

	for(p = &_iob[3]; p < _iob + _NFILE; p++) {
		if(p->_flag & (_IOWRT | _IOREAD)) fclose(p);
		}
#else	RTPORTS
	lispval NiorUtil();

	_fwalk(NiorUtil);
#endif	RTPORTS
	return(nil);
}

#ifdef RTPORTS
FILE FILEdummy;

static lispval
NiorUtil(p)
FILE *p;
{
	lispval handy;
	if(p==stdin||p==stdout||p==stderr)
		return(0);
	fclose(p);
	handy = P(p);
	if(TYPE(handy)==PORT) {
		handy->p = &FILEdummy;
	}
	return(nil);
}
FILE **xports;

#define LOTS (LBPG/(sizeof (FILE *)))
lispval P(p)
FILE *p;
{
	register FILE **q;
	extern int fakettsize;

	if(xports==((FILE **) 0)) {
		/* this is gross.  I don't want to change csegment -- kls */
		xports = (FILE **) csegment(OTHER,LOTS,0);
		SETTYPE(xports,PORT,31);
		for(q = xports; q < xports + LOTS; q++) {
			*q = &FILEdummy;
		}
	}
	for(q = xports; q < xports + LOTS; q++) {
		if(*q==p) return ((lispval)q);
		if(*q==&FILEdummy) {
			*q = p;
			return ((lispval)q);
		}
	}
	/* Heavens above knows this could be disasterous in makevals() */
	error("Ran out of Ports",FALSE);
}

#endif	RTPORTS

FILE *
fstopen(base,count,flag)
char *base;
char *flag;
{
	register FILE *p = fdopen(0,flag);

	p->_flag |= _IOSTRG;
	p->_cnt = count;
	p->_ptr = p->_base = base;
	p->_file = -1;
	return(p);
}

#ifdef SPISFP
char *
alloca(howmuch)
register int howmuch;
{
	howmuch += 3 ;
	howmuch >>= 2;
	xsp -= howmuch;
	if (xsp < xstack) {
		xsp += howmuch;
		xserr();
	}
	return((char *) xsp);
}
#endif
@


1.2
log
@move alloca() to this file for the case where you can't grow
the local frame.  This is used in sunII lisp, and would be
used in IBM or native VMS versions.
@
text
@d3 1
a3 1
   "$Header: fpipe.c,v 1.1 83/01/29 12:49:40 jkf Exp $";
d6 1
a16 4
FILE *_dofpip(iodes)
int iodes;
{
	register FILE *p;
d18 1
a18 10
	for(p=_iob; (p->_flag&(_IOWRT|_IOREAD))!=0; p++)
		if (p >= _iob+_NFILE)
			return(NULL);
	p->_file = iodes;
	p->_cnt = 0;
	p->_base = p->_ptr = NULL;
	return(p);
}

FILE * fpipe(info)
d22 1
a22 1
	int descrips[2];
d24 1
a24 1
	if(0 > pipe(descrips)) return( (FILE *) -1);
d26 5
a30 2
	if(NULL==(p = _dofpip(descrips[0]))) return( (FILE *) -1);
	p->_flag = (_IONBF|_IOREAD);
d32 6
a38 3
	if(NULL==(p = _dofpip(descrips[1]))) return( (FILE *) -1);
	p->_flag = _IOWRT;
	info[1] = p;
d41 79
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
   "$Header: /na/franz/franz/RCS/eval.c,v 1.1 83/01/29 12:14:54 jkf Exp $";
d7 1
a7 1
 * 	fpipe.c				$Locker: jkf $
d47 15
@
