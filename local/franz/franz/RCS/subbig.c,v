head     1.2;
access   jkf sklower layer;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     83.09.12.14.17.31;  author sklower;  state Exp;
branches ;
next     1.1;

1.1
date     83.01.29.13.37.56;  author jkf;  state Exp;
branches ;
next     ;


desc
@bignum subtraction
@


1.2
log
@Changes to allow alloca and ``stack'' to happen on a separate stack from
the C run-time stack.  This is also under the compilation flag SPISFP,
although, in principle, there might be systems that have separate stack
and frame pointer, but the stack grows upwards that would want to use
this set of changes, but not necessarily using preallocated buffers
for non-local returns.  The overhead for the prealllocated stuff
is small.
@
text
@#ifndef lint
static char *rcsid =
   "$Header: subbig.c,v 1.1 83/01/29 13:37:56 jkf Exp $";
#endif

/*					-[Sat Jan 29 13:36:05 1983 by jkf]-
 * 	subbig.c			$Locker: sklower $
 * bignum subtraction
 *
 * (c) copyright 1982, Regents of the University of California
 */

#include "global.h"

/*
 * subbig -- subtract one bignum from another.
 *
 * What this does is it negates each coefficient of a copy of the bignum
 * which is just pushed on the stack for convenience.  This may give rise
 * to a bignum which is not in canonical form, but is nonetheless a repre
 * sentation of a bignum.  Addbig then adds it to a bignum, and produces
 * a result in canonical form.
 */
lispval
subbig(pos,neg)
lispval pos, neg;
{
	register lispval work;
	lispval adbig();
	register long *mysp = sp() - 2;
	register long *ersatz = mysp;
	Keepxs();

	for(work = neg; work!=0; work = work->s.CDR) {
		stack((long)(mysp -= 2));
		stack(-work->i);
	}
	mysp[3] = 0;
	work = (adbig(pos,(lispval)ersatz));
	Freexs();
	return(work);
}
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
   "$Header: /na/franz/franz/RCS/eval.c,v 1.1 83/01/29 12:14:54 jkf Exp $";
d7 1
a7 1
 * 	subbig.c			$Locker: jkf $
a13 1
#define SP() ((int *)sp())
d15 9
d29 4
a32 3
	char *sp(); lispval adbig();
	register int *mysp = SP() - 2;
	register int *ersatz = mysp;
d35 1
a35 1
		stack((mysp -= 2));
d39 3
a41 1
	return(adbig(pos,(lispval)ersatz));
a42 9
/*
 * subbig -- subtract one bignum from another.
 *
 * What this does is it negates each coefficient of a copy of the bignum
 * which is just pushed on the stack for convenience.  This may give rise
 * to a bignum which is not in canonical form, but is nonetheless a repre
 * sentation of a bignum.  Addbig then adds it to a bignum, and produces
 * a result in canonical form.
 */
@
