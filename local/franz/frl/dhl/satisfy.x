(File |dhl/satisfy.l|)
(flatten-tree lambda rplacd cdr flatten-tree car setq null liszt-internal-do mapcan list atom cond)
(get-one-match lambda quote cdr cons list car eq dtpr and is-var cond append)
(get-possible-solutions lambda rplacd get-one-match rvalues assoc or rdata rdata-only rvalues-only nreverse atom cons *rdata findicators1 *rdata-only *rvalues-only mapcar fslots setq null list quote cdr frame? ftree flatten-tree eq dtpr and is-var cond liszt-internal-do mapcan caddr cadr car let)
(join lambda rplacd nreverse cdr copy append cons mapcar car setq cond null liszt-internal-do mapcan)
(possible-solutions lambda rplacd nreverse cdr append cons bind-to get-possible-solutions mapcar car setq cond null liszt-internal-do mapcan)
(find-possible-solutions lambda member atom quote fdata findicators1 fdata-only fvalues-only ako? possible-solutions caddr cadr eq dtpr and is-var or cond nreverse cdr car eval cons setq null liszt-internal-do mapcar let)
(update-all lambda rplacd update join cdr update-all bind-to let car setq liszt-internal-do mapcan null cond)
(update-any lambda cdr cond car update let return null do)
(satisfy-all lambda rplacd list satisfy cdr satisfy-all bind-to let car setq copy liszt-internal-do mapcan null cond)
(satisfy-any lambda cdr satisfy-any copy car satisfy append and null cond)
(update lambda fremove-datum fremove fput-datum fput update-function nreverse bind-to cons setq liszt-internal-do mapcar satisfy putprop concat frame? cxr getd or quote get |1+| do newsym let caddr dtpr is-var atom and null update update-any cadr eval list cdr update-all car eq cond)
(satisfy lambda find-possible-solutions macroexpand getdisc cxr getd atom eval and cadr satisfy satisfy-any cdr satisfy-all car eq cond)
(replace-vars1 (lambda . local) replace-vars1 cons append setq newvar let t return caar do assq cdr car eq dtpr and is-var atom null cond)
(replace-vars lambda replace-vars1 let)
(newvar lambda gensym quote cons)
