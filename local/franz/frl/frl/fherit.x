(File |frl/fherit.l|)
(fdata-heritage-only lambda nreverse cdr atom cond car cons setq null fdata-heritage liszt-internal-do mapcar findicators1)
(fdata-heritage lambda cdr atom cond fheritage fbucket fprocess-indics1)
(fheritage-slots lambda rplacd cdr fslots car setq cond null quote ffamily liszt-internal-do mapcan setify)
(fheritage? lexpr return apply and car setq null quote ffamily exists cons |1-| + cdr < arg do minusp eq cond - let listify for)
(fheritage lexpr declare fadd funcall atom fbucket bigp not and zerop apply car setq null quote ffamily do-foreach cons |1-| + < do minusp - let listify cdr arg fname eq = cond list for)
(finherit2 lambda quote eq and finherit or)
(finherit1 lambda funcall finherit1 apply nreverse cons *fdata liszt-internal-do mapcar findicators1 *fdata-only *fvalues-only return fcomment? car setq do exists null quote eq and cdr atom cond flistget fbucket or for)
(finherit-along lambda finherit-along apply funcall nreverse cons *fdata liszt-internal-do mapcar findicators1 *fdata-only *fvalues-only return quote fcomment? and car setq do exists null or cdr atom cond flistget fbucket for)
(finherit lambda finherit apply funcall nreverse cons *fdata liszt-internal-do mapcar findicators1 *fdata-only *fvalues-only return quote fcomment? and car setq do exists null or cdr atom cond flistget fbucket for)
(mark-data-in-frame lambda cdr quote fput-datum-comment car null setq liszt-internal-do mapc fname for)
