(File |frl/freq.l|)
(describe-constraint-structures lambda nreverse cdr atom cond car cons setq null liszt-internal-do mapcar findicators1 fextract-data describe-constraints)
(describe-constraints lambda quote cons ncons nconc setq shout1 null cond cdr car say-generate do and if)
(discuss-poll lambda terpri princ-list describe-constraints printc not quote cdr car return caar eq cond null do assq cadr setq prog)
(fpoll1 lambda car quote null cond eval errset for)
(fpoll-summary lambda cdr setq car eval errset or ifnot quote and cond null do)
(fpoll lambda cons setq setf push eq fpoll1 caseq quote and cond list null cdr car do)
(unknown? lambda eq)
(false? lambda null)
(true? lambda memq not)
(fclassify-value lambda fpoll1 list for)
(fclassify-values lambda cons setf push eq fpoll1 caseq setq quote and cond list null cdr car do)
(fapply-constraint1-summary lambda list fapply-constraints1-summary)
(fapply-constraints1-summary lambda fpoll-summary return list setq prog)
(fapply-constraint-summary lambda list fapply-constraints-summary)
(fapply-constraints-summary lambda fpoll-summary return car cdr or ifnot list setq atom cond prog)
(fapply-constraint1 lambda list fapply-constraints1)
(fapply-constraints1 lambda fpoll return list setq prog)
(fapply-constraint lambda list fapply-constraints)
(fapply-constraints lambda fpoll return car cdr or ifnot list setq atom cond prog)
(fcheckpreferences lexpr fdata-heritage-only fapply-constraints nreverse cdr atom car cons setq null fdata liszt-internal-do mapcar findicators1 fdata-only fvalues-only > cond quote arg for)
(fcheck lexpr fdata-heritage-only fapply-constraints nreverse cdr atom car cons setq null fdata liszt-internal-do mapcar findicators1 fdata-only fvalues-only > cond quote arg for)
