(File |frl/thing.l|)
(describe-slot lambda printblock princ terpri progn and if nreverse cdr atom cond car cons setq null quote *fdata liszt-internal-do mapcar findicators1 *fdata-only *fvalues-only for fdiscuss or ifnot)
(discussable-slots lambda nreverse cdr atom cond car cons setq null fdata liszt-internal-do mapcar findicators1 fdata-only quote apply setify)
(describe-frame lambda cdr describe-slot car null discussable-slots do do-foreach quote cons shout0 terpri fname setq)
(fdiscuss lexpr equal not fcomment? filter requests select-most-specific progn collect-sources do do-foreach |1st| frun-safely return fname shout0 eq = and if nreverse cdr atom car cons null liszt-internal-do mapcar findicators1 fextract-data setify fdata cursorpos quote > cond arg setq prog)
(unknown-generic? lambda genericity unknown?)
(non-generic? lambda genericity false?)
(generic? lambda genericity true?)
(genericity lambda memq nreverse cdr atom cond car cons setq null quote fdata liszt-internal-do mapcar findicators1 fdata-only for)
(unknown-individual? lambda individuality unknown?)
(non-individual? lambda individuality false?)
(individual? lambda individuality true?)
(individuality lambda memq nreverse cdr atom cond car cons setq null quote fdata liszt-internal-do mapcar findicators1 fdata-only for)
(individualize lexpr |1+| quote cdr arg freplace-datum freplace-value declare > do)
(order-slots lambda quote warning)
(unfilled-slots lambda cond list cdr cons quote finherit fdatum? not and car setq nreverse null fillable-slots filter do)
(fillable-slots lambda atom cond cdr cons fcomment? and car setq nreverse null fdata do filter liszt-internal-do mapcar findicators1 fextract-data quote apply setify)
(fill-frame lexpr return list kwote foreach append funcall exists prog and if nreverse atom fdata liszt-internal-do mapcar findicators1 fdata-only for fassign frame fadd-slot-str car setq null |1-| + cdr < minusp eq - let listify do do-foreach individual? quote fname cons shout0 arg frame? not cond)
(freassign lambda fname cdr fneed car null fillable-slots setq liszt-internal-do mapc quote *catch catch)
(fassign lambda fneed cdr atom flistget fbucket *fdatum? *fvalue? cond setf push car setq null do do-foreach progn *catch catch fname quote cons shout0 and if fillable-slots for)
(instantiate-a-frame lexpr shout0 terpri fassign frame? not fgename request nreverse setq atom car return caar null |1-| + cdr < arg minusp eq cond let listify quote do assq faccess fbucket liszt-internal-do mapcar findicators inspect-datum or fname finstantiate cons fadd-frame-str for)
(remove-ako lambda fname quote fremove-datum fremove-value frame? and if)
(remove-instance lambda fname quote fremove-datum fremove-value frame? and if)
(add-ako lambda fname quote frame+ fput-datum fput-value)
(add-instance lambda fname quote frame+ fput-datum fput-value)
