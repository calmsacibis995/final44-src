(File |frl/util/util.l|)
(logand macro cdr nconc quote cons progn)
(listp macro list quote cons cadr)
(kwote macro quote list cadr)
(string? lambda atom)
(stringify lexpr rplacd car exploden setq null cons |1-| + cdr < arg do minusp eq cond let listify delq liszt-internal-do mapcan maknam)
(concatenate lexpr rplacd car exploden setq null cons |1-| + cdr < arg do minusp eq cond let listify delq liszt-internal-do mapcan implode)
(round lambda plus fix)
(le lambda greaterp not numberp and difference signp)
(ge lambda minusp not numberp and difference signp)
(chrct lambda charpos linel cdr -)
(printc lambda tyo princ terpri)
(space lambda |1-| terpri bigp not cdr null and zerop do newline declare)
(newpage lambda tyo)
(newline lambda terpri bigp not cdr null and charpos zerop or)
(writefile lambda close truename cdr terpri $prpr car null setq liszt-internal-do mapc #print cons prog2 quote mergef open)
(readfile nlambda eval #prin1 eq read do status princ terpri setq quote apply list)
(rplac5 macro quote cons list caddr cadr)
(rplac4 macro quote cons list caddr cadr)
(rplac3 macro quote cons list caddr cadr)
(rplac2 macro quote cons list caddr cadr)
(rplac1 macro quote cons list caddr cadr)
(|5th| macro quote list cadr)
(|4th| macro quote list cadr)
(|3rd| macro quote list cadr)
(|2nd| macro quote list cadr)
(|1st| macro quote list cadr)
(firstn lambda |1-| car cons setq declare nreverse bigp not cdr null and zerop or minusp cond do)
(requiredf lexpr)
(requiredf lexpr *break break probef not and load prin1 princ terpri status progn cadr get equal or quote car mergef setq null cons |1-| + cdr < arg minusp eq cond let listify do)
