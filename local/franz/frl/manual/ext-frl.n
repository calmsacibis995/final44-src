." %W% %G%
.Lc Extended\ Features\ of\ FRL 21
.pp
FRL has been extended to provide multiple inheritance, sentinels,
a general rule-interpretor, and domains or partitions of knowledge.
.sh 2 Roles\ and\ Multiple\ Inheritance 21
.pp
FRL has been extended to include a capacity for multiple sequential
inheritence. (FRL has always had the unused capacity for multiple
ako trees.) By the use of roles, the heritage of particular frames
can be temporarily changed. This change makes opaque qualities and 
values not specified for that role. Roles are useful in creating
temporary assignments without changing the basic semantics.
.pp
Roles are a mechanism for controlling sequential multiple inheritance.
Within FRL, a frame hierarchy is constructed to represent the generic
semantics for the domain being represented. This hierarchy provides
a single parent for each entity.  By changing the parent of an entity,
we change the set of inherited semantics which partially defines an
item, and we change its relation to other items.
.pp
Roles are implemented using a more general set of functions which
provide restricted access to frames.
Access is restricted through a set of special slots, facets and comments.
These special fields are the values of a set of global lisp variables
used by frl.  The default values of these global variables, cause
the functions in this section to work with roles.
.sp
.nf
.TS
box center ;
l | c .
global variable	value's type	seen or not if true	default value
=
:comment-field	comment tag	seen	'role:
_
:not-comment-field	comment tag	not seen	'not-role:
_
$facet-field	facet tag	seen	'$role
_
$not-facet-field	facet tag	not seen	'$not-role
_
slot-field	slot name	value of slot is used in	'role
		restricting access 
		of values.
_
inherit-slot-field	slot name	field through which 	'role
		restictive inheritance 
		is done.
_
.TE
.sh 3 Description\ of\ how\ Roles\ Work 21
.pp
Roles can specify which ako the user currently wishes to use in a frame.
If the 
.i role
slot of a given frame has one or more values, then these 
values are the current limiting roles for this frame.
When a value is added to the frame, a comment is added with it saying
(role: role) for each role which is current in the frame.
When a new slot is added to the frame, a facet is added to the slot
of the name $role, which has the values of the current roles in the
frame.
.pp
Comments of the form (role: role1) attached to a value in a given frame
indicate a value is only visible
when the frame has the role role1.
.pp
Comments of the from (not-role: role1) indicate the value is not visible
when the frame has the role role1.   If a frame has more than one current
role though, a not-role: comment will not make a value invisible unless
it lists all the current roles.
.pp
Values of the facet 
.i $role,
indicate under which frame roles, can the corresponding slot be seen.
.pp
Values of the facet
.i $not-role,
indicate under which frame roles, can the corresponding slot not be seen.
.pp
When a value is removed in a frame with roles using these functions listed
below, it is only completely removed if it is only visible in the current
role for the frame.  If it is visible when the role is changed, then a
(not-role: rolen) comment is attached to the variable.
.pp
A similar thing is done with slots and facets.
.sh 3 Description\ of\ How\ Restricted\ Access\ Functions\ Work 21
.pp
One can apply a more general use of the functions here by setting the
values of the six global lisp variables in the table earlier in the 
chapter.
.pp
Another use of the restrictive access functions is in the creation of
domains, and in limiting what is seen inside a given domain.
Domains are described in section 21.4.
.pp
All the functions listed below are the same as the original access
functions in FRL, except that they adher to the guidelines described
above for roles, and restricted domains.
If the slot-field or in the case of roles, the 'role slot has no
value, these functions default to their equivalent FRL function.
.sh 3 Functions\ to\ Put/Get\ Restricted\ Slots\ in\ Domains 21
.Lf get-restricted-values "'frame"
.Eq
(fvalues-only frame slot-field)
.Lf put-restricted-value "'frame r"
.Eq
(fput frame slot-field '$value r)
.Lf add-restricted-value "'frame r"
.Eq
put-restriceted-value
.Lf set-restricted-value "'frame r"
.Eq
(freplace frame slot-field r)
.Lf change-restricted-value "'frame oldr newr"
.Eq
(fremove frame slot-field oldr)
(fput frame slot-field newr)
.Lf restricted-value? "'frame 'r"
.Eq
(member r (get-restricted-values frame))
.sh 3 Special\ Functions\ for\ Accessing\ Roles\ in\ Domains 21
.Lf getroles "'frame"
.Eq
(fvalues-only frame 'slot)
.Lf putrole "'frame 'role"
.Eq
(fput frame 'role '$value slot)
.Lf addrole "'frame 'role"
.Eq
putrole
.Lf setrole "'frame 'role"
.Eq
(freplace frame 'role '$value slot)
.Lf changerole "'frame 'oldrole 'newrole"
.Eq
(fremove frame 'role '$value oldrole)
(fput frame 'role '$value newrole)
.Lf role? "'frame 'role"
.Eq
(member role (getroles frame))
.sh 3 Special\ Access\ Functions 21
.pp
The function listed below do the same thing as their non-restrictive
counterpart in frl, except that these look up the values of the global
lisp variables
.i slot-field,
.i not-slot-field,
.i :comment-field,
.i :not-coment-field,
.i $facet-field,
and
.i $not-facet-field,
and use these to decide which slots and values are currently visible
and return only those which are visible.  Thus the function listed
as equivalent is not exactly equivalent but explains what the function
means.
.sh 4 Notes
.pp
Only values visible in the current restricted view will be seen by
these functions.
.pp
For new slots, rput puts a $facet-field slot limiting the view to
just the current set of slot-field.  In the case of roles, rput
adds a $role facet to new slots it creates, and sets it's values
to those of the slot.  For new values, a :comment-field is added
stating that the value is only visible in the current restricted
view.  In the case with roles, a comment of the form (:role role1)
would be appended to each new value added with rput.
.i role 
in the current frame.
.pp
Rdelete-datum and fdelete-datum only really delete the datum if it
is only visible in the current restricted view and no other restricted
view, else they put a comment of the form (not-comment-field 
(get-restricted-values frame)).
.pp
The inheritance functions use the value of the global lisp variable 
.i inherited-slot-field,
to determine which slot to use as the inheritance chain.
In the inheritance functions, the restricted access is done on all frames
in the inheritance chain.
.nf
.sp 1
.ce 1
Table of restricted functions.
.No 
the arguments are the same as the corresponding FRL function.
.sp 1
.TS
box center ;
l | l .
=
Restricted Function	Corresponding FRL Function
=
rget	fget
rput	fput
rframe 	frame
rfframe	fframe
rframe?	fframe?
rshow	show
rslots	fslots
rcopy	fcopy
rinstantiate	finstantiate
rlistget	flistget
rinherit	finherit
rinherit1	finherit1
rinherit2	finherit2
rdata	fdata
rdata-only	fdata-only
rdatum?	fdatum?
rdatum-only	fdatum-only
rdatum	fdatum
*rdata	*fdata
*rdata-only	*fdata-only
*rdatum?	*fdatum?
*rdatum-only	*fdatum-only
*rvalues	*fvalues
*rvalues-only	*fvalues-only
*rvalue?	*fvalue?
*rvalue-only	*fvalue-only
*rvalue	*fvalue
rdata1	fdata1
rvalues1	fvalues1
rvalues-only1	fvalues-only1
rvalue1?	fvalue1?
rvalue-only1	fvalue-only1
rvalue1	fvalue1
rvalues2	fvalues2
rvalues-only2	fvalues-only2
rvalue2?	fvalue2?
rvalue-only2	fvalue-only2
rvalue2	fvalue2
.TE
.TS
box center ;
l | l .
=
Restricted Function	Corresponding FRL Function
=
rvalues	fvalues
rvalues-only	fvalues-only
rvalue?	fvalue?
rvalue-only	fvalue-only
rvalue	fvalue
rtree	ftree
rfringe1	fringe1
rchildren	fchildren
rdescendants	fdescendants
rfamily	family
rsiblings	fsiblings
rremove-slot	fremove-slot
rdelete-slot	fdelete-slot
rremove-facet	fremove-facet
rdelete-facet	fdelete-facet
rdelete-datum	fdelete-datum
rremove-datum	fremove-datum
.TE
.sp 2
.Lf rexec "'frame 'temp 's-expression"
.Re
The value of s-expression when the frame 'frame has its slot-field set
to temp.
.Lf rshowif "'frame role"
.Re
nil
.No
Rshowif shows what frame would look like with the given role.  It does
not change the current role of the frame.  This enables one to see what
a frame looks like in a different role without changing its role.
.sh 3 Functions\ to\ Get/Put\ Roles\ on\ Frames 21
.fi
.sh 2 Sentinels 21
.pp
Sentinels can be used to create daemons which wait for specific events
to happen, and then execute the appropriate action.
.pp
Sentinels have a condition which determines when the are activated.
The condition can be a single condition, an or condition, an and
condition, or an in condition.
.sh 3 Sentinel\ Conditions 21
.sh 4 Single\ Sentinels 21
.pp
The condition of single sentinels is of the form:
.i ('frame\ 'slot\ 'test),
where frame is the name of a frame; slot, the name of a slot, and
test is a lisp expression which is evaluated, to determine whether
or not the condition is true.
.sh 4 Or\ Sentinels 21
.pp
Sentinels can have or conditions of the form:
.sp 1
.ce 1
.i (or\ ('frame1\ 'slot1\ 'test1)\ ...\ ('framen\ 'slotn\ testn)).
.pp
If any of the single condition come true, then the condition for
the sentinel is true.
.sh 4 And\ Sentinels 21
.pp
Sentinels can have and conditions of the form:
.sp 1
.ce 1
.i (and\ ('frame1\ 'slot1\ 'test1)\ ...\ ('framen\ 'slotn\ testn)).
.sh 4 In\ Sentinels 21
.pp
Sentinels can have in conditions of the form:
.sp 1
.ce 1
.i (in\ ('frame1\ 'slot1\ 'test1)\ ...\ ('framen\ 'slotn\ testn)).
.pp
In sentinels are and sentinels where all the test must be true
in the same frame.
.sh 3 Sentinel\ Types 21
.nf
.sp 1
.TS
box center ;
 l | l .
=
Type	Meaning (Notes)
=
if-ever	always removes itself after first execution.
_
when-ever	sensors stay around, executed 
	each time condition becomes true.
_
for-ever	Same as when-ever, except test 
	existing values when added.
_
if-never	Triggered by removal.  
	Sensors stay around.
_
rule	a rule is run once when created, 
	checks for existance of condition.
	Fails if condition is not met, 
	and is removed.
_
if-added	Creates an if-added deamon.
	Equivalent to if-ever.
_
if-removed	Creates an if-removed deamon.
	Equivalent to if-never.
=
.TE
.sh 3 How\ to\ Create\ Sentinels 21
.nf
.Lf sentinel "type (vars) (condition body)"
.Re 
a sentinel frame.
.No
Creates a sentinel frame, and a sensor frame for each seperate test in the
condition, the sentinel frame is attached to the sensor frames which are
attached to the apropriate frames.  When the sensor is triggered, the
sentinel body is evaluated.  The body can be any legal lisp expression.
Vars are local variables to the sentinel.
.No
Sentinel is a fexpr.
.Lf sentinel "type role (vars) (condition body)"
.Re
a sentinel frame.
.No
If sentinel is given the extra role argument, it uses the restricted
access and inheritance functions described earlier in this chapter.
.Lf iff-added "(vars) (condition body)"
.Lf iff-removed "(vars) (condition body)"
.Re
A sentinel/rule frame.  
.No
Iff-added and iff-removed creates a rule-sentinel frame and runs it.
.Lf if-added "(vars) (condition body)"
.Lf if-removed "(vars) (condition body)"
.Eq
iff-added, and iff-removed, except the rule-sentinel frame is not
saved as an explicit rule.
.sh 2 Rule\ Domains 21
.pp
Rule domains contain rules and a set of functions or other rule domains,
which tell how to interpret these rules.
.sh 3 Rule\ Domain\ Frame 21
.pp
Each rule domain is described by a frame.  The values of specified
slots of a rule domain frame, determine how the rule domain will behave.
.Lf rule-domain "name ako domain goal-args (slot1 value1) ... (slotn valuen)"
.Re
a rule-domain frame.
.Se
Creates a rule-domain frame with the appropriate information, and then
creates a function which is of the form
.i (defun\ name\ goal-args\ ...)
which when called will execute the rules in its domain, on the given
arguments.
.Ex
A rule domain created with the lisp expression:
.nf
.sp 1
(rule-domain toh rule-domain nil (:goal)
  (getrule poprule)
  (putrule pushrule)
  (gather possiblerules)
  (applyrule toh-applyrule)
  (entertrace print-rule-trace)
  (exittrace print-rule-exit-trace))
.fi
.sp 1
creates the following frame:
.nf
.sp 1
(fassert toh
         (ako ($value (rule-domain)))
         (getrule ($value (poprule)))
         (putrule ($value (pushrule)))
         (gather ($value (possiblerules)))
         (applyrule ($value (toh-applyrule)))
         (entertrace ($value (print-rule-trace)))
         (exittrace ($value (print-rule-exit-trace)))
         (arguments ($value ((:goal))))
         (rule ($value)))
.sp 1
.fi
and a function call of the form:
.nf
.sp 1
.ce 1
.i (toh\ :goal)
.sh 4 Special\ Slots\ in\ Rule\ Domains 21
.pp
The many slots of a rule domain specify how that domain works.
Each slot which is defined should have a functional value, meaning,
its value is the name of a function or a rule-domain which
does the appropriate action.  (Note, rule domains are also
treated like functions).
.pp
The requirements of these functions are
(1) These functions are called by the system so they must be defined,
with the arguments as specified below.
(2) There may currently be only one function at most for each
slot.
.sh 5 Functions\ for\ Controlling\ the\ Rulequeue 21
.pp
Below are listed the different slots used in rule domains.
Only the putrule, getrule, and applyrule slots are required in
a rule domain, the rest are optional.
.sp 1
.ip \s-2INHERITANCE\s0: 13
.sp 1
.ip \s-2putrule\s0:	
(putrule-function rule rulequeue).
.pp
Adds the rule to the rulequeue.
.ip \s-2Note\s0:
Rules passed to this function are not a pointer to a rule frame, but
a lisp structure of the form 
.i (rule\ goal\ level).
This is the form which the rule interpretor expects the rules to be
popped off the rulequeue by getrule.
The rulequeue may be any arbitrary lisp data structure.
.sp 1
.ip \s-2getrule\s0:
(getrule-function rulequeue)
.pp
Takes a rule off the rule queue.  The rule must be in the same form
as it was when passed as an argument to putrule.  (see putrule for
description).  The return value of this function must be a lisp
list of the form 
.i (nextrule\ rulequeue-after-removing-rule).
.sp 1
.ip \s-2gather\s0:
(gatherfunction domain goal-arguments)
.pp
Given a goal or a specification returns an appropriate list
of frames for the given domain. Thus this function can be used
to narrow the choice of rules tried on a given goal.
The default in a rule domain is to return all rules in the
rule slot of the domain.
.sp 1
.ip \s-2scope\s0:
This is a variable.
If this slot does not exist, the default runtime rulequeue creation
rules are enforced by the system.
These default setting is
a new rulequeue is
created for each new level, except in the case when a ruledomain
calls itself, when the old rulequeue is used.
.pp
Whenever a rule domain calls itself, the same rulequeue is
used ( a new one is not created, instead all the new goal-
rule pairs are added to the current rulequeue used
by the calling rulequeue ).
.pp
If another ruledomain calls a rule domain (not itself), then
a new rulequeue is created in the called domain, and it is
local to the called domain.
In both cases, after returning from a domain, the rulequeue is 
restored to its state before the call.
.pp
Using the scope slot of a ruledomain can override these defaults.
.TS
box center ;
l | c .
=
Value of scope	Meaning
=
close	create a new rulequeue for a domain when called by itself.
_
open	use the previous rulequeue when called by other domains.
=
.TE
.sp 1
.sp 1
.ip \s-2applyrule\s0:
(applyrulefunction rule goal-arguments)
.pp
Given a rule and a goal,  this function tell how to apply the
rule to the goal, a non-nil return value means the rule succeeded.
.sp 1
.ip \s-2entertrace\s0:
(entertracefunction rule tracelevel goal-arguments)
.pp
The user can trace rules as they are tried on goals.
This function is executed just before a rule is tried on a goal.
.sp 1
.ip \s-2exittrace\s0:
(exittracefunction rule tracelevel resulting-value)
.pp
The user can trace rules as they finish with goals.
.sp 1
.ip \s-2newgoal\s0:
(newgoal-function goal-arguments)
.pp
The newgoal-function is executed when a new goal enters the
the domain. It can be used to mark a goal so you know you 
have tried to prove it before.
.pp
The newgoal-function only gets called if the 
.i initialtest 
(if it exists) fails (returns nil).
.No
This function expects a nil return value,
This should always returns nil, unless you want to use it to
return a value and exit.  Returning non-nil = success.
Value is returned right away without trying any goals, and
without running the exitsucceed function.
.sp 1
.ip \s-2initialtest\s0:
(initialtestfunction goal-arguments)
.pp
This does an initial test on a goal.
If non-nil return value, the goal automatically fails.
It can be used to test if a goal is marked.
undoes mark-happens when a rule applied to the goal succeeds.
.sp 1
.ip \s-2succeed\s0:
(succeedfunction goal-arguments result)
.pp
This function is executed when a goal succeeds in a domain.
It can be used to unmark goals.
This function can also be used to assert goals.
Formally there was an assert slot to do this, but it
performed the same semantics as exitsucceed and was joined
into this slot.
.pp
If a non-nil fail is returned, this value is returned from the
rule-domain instead of the one which the rules returned.
This function is only called once, just before leaving
the domain.  In the case where succeedcontinue is set to
true, the result is a list of succeeded values.
.sp 1
.ip \s-2succeedcontinue\s0:
This is a variable.
.pp
If set with a non-nil value, then the rule system continues
till it runs out of rules and returns a list of all
answers.  Exitsucceed can override this return-value.
.No
The function 
.i ruledomain-throw 
can throw a result out of a rule domain and override this setting
also.
.sp 1
.ip \s-2fail\s0:
(failfunction goal-arguments)
.pp
This function tells what to do if a goal fails.
It takes place if you try to prove or
achieve a goal, and there are no rules, or all rules are tried
and fail with the rulequeue becoming empty.
.sh 3 Rule\ Domains\ as\ Functions: 21
.pp
To prove something in a given domain, one needs only to call the
domain as a function and pass the goal as the argument.  (Rule-domains,
can have more than one argument).
Rule domains can be used instead of functions to describe how
something works with rules and frames:
The arguments passed (the goal) are defined in the creation of the domain.
(see the example with the function 
.i rule-domain).
.sh 3 Special\ Lisp\ Variable\ Used\ by\ the\ Rule\ System 21
.pp
The user can use the following global FRL rule-system lisp variable:
.ip \s-2rulestack\s0\ :
contains a list of rules being tried,
the car is the latest, (none of these have failed yet.
(this is not the same as the rulequeue which is not
a global system variable, and is user defined and has
the queue of rules not tried yet).
.ip \s-2:goalstack\s0\ :
contains a list of goals with respect to the
.i :rulestack.
The car is the latest goal requested.
.No
These variables are maintained across domains.
The best advice in using these, is to gather information
from them and use them to modify or pick rules from
the rulequeue.
.Lf ruledomain-throw "result"
.Re
Never returns.
.No
This functions executes a throw.  The throw is done to the exiting
point of the call of the rule-domain of the current rule being
executed.  The value of the throw overrides any value of the rule-domain.
Succeed functions are not executed, but if the result is nil, the
fail function if is exists, is executed.
.sh 3 Rule\ Frame 21
.Lf rule "name ako rule-domain (slot1 value1) ... (slotn valuen)"
.Re
a rule frame.
.Se
It adds the new rule to the specified rule-domain.  The way this
rule is interpreted is determined by its rule-domain.
.No
A rule can be a frame with any slots you wish, but it usually
has a 
.i condition
and a
.i action
slot.
.sh 2 Knowledge\ Domains 21
.pp
A knowledge domain is used to partition and sort knowledge.
.sh 3 Domain\ Frame 21
.Lf domain "name ako domain args (slot1 value1) ... (slotn valuen)"
.Re
a domain frame.
.No
The same function which declares rule-domains is used to declare
domains, thus the syntax is exactly the same as with a rule-domain.
.Ex
.nf
.sp 1
(domain temp nil nil
  (domain-slot elements)
  (put add-to-table)
  (remove delete-from-table)
  (gather select-best-one))
.sp 1
.pp
As a frame this is:
.nf
.sp 1
(fassert temp 
  (ako ($value (domain)))
  (domain-slot ($value (elements)))
  (put ($value (add-to-table)))
  (remove ($value (delete-from-table)))
  (gather ($value (select-best-one)))
  (elements 
   ($if-added (add-to-table))
   ($if-removed (delete-from-table))))
.sp 1
.pp
To add an frame to a knowledge domain, one only needs to create a slot
domain in that frame with the $value of the appropriate domain
which you wish it become a member.
When an frame is added to a domain, it gets added to the $value facet
of the domain-slot's $value of the domain frame.  The
default slot is instance-in-domain, this can be changed
by setting the value of the slot domain-slot in the domain
frame.
.sh 4 Special\ Slots\ in\ Knowledge\ Domains 21
.pp
If there is a 
.i put 
slot in the domain frame, this is a daemon which
gets executed each time a new frame is added to the domain.
A 
.i remove 
slot is used in the domain frame, to indicate a daemon to
run whenever a frame is removed from a domain.
The 
.i gather 
slot is the same as described in the rule system, and
can be used with the put and remove slots to sort or
otherwise cross-index frames inside the domain.
Only the slot 
.i domain-slot
is required in a domain frame.  This determines under
what slot the frames in the domain are listed.  In
a rule-domain, the domain-slot is 
.i rule.
.sh 3 Purposes\ for\ Domains 21
.sh 4 "" \n 21
sort many frames and quickly retrieve a small set which would
be needed for a particular instance (instead of searching
linearly through all the frames).
.sh 4 "" \n 21
Declare information in a frame which is only visible inside
a domain and not in other domains.
Thus one can make an assumption in one domain and add elements,
switch domains, and all the assumptions and consequences of
these assumptions will go away with the change of domain.
.sh 4 "" \n 21
Can be used to organize frames into seperate contexts or domains,
as with rules in rule frames.
.sh 3 Special\ Domain\ Functions 21
.Lf dget "'frame {'slot {'facet {'value {'comment"
.Lf dput "'frame {'slot {'facet {'value {'comment"
.Lf dremove "'frame {'slot {'facet {'value {'comment"
.Lf dreplace "'frame {'slot {'facet {'value {'comment"
.Eq
.i rget, 
.i rput, 
.i rremove,
and 
.i rreplace respectively.
.No
These are special functions which
always work with domains.  They actually are just a special case
of the restricted and role access functions described earlier in this
chapter.


