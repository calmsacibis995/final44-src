.Lc Framish\ Reference\ Manual 20
.sh 2 Overview
.pp
Framish is a natural-style query language which can be used in place
of Lisp for communication with FRL. Most of the frame-oriented operations
of FRL can be performed by use of Framish. Framish and Lisp commands
can be intermingled.
.sp
.Lf talk ""
.Re
nil.
.No
This command enables the user to 
use Framish in an FRL system.
The Framish package is auto-loaded
by this command. Thereafter, any string typed between braces ``{'',
``}'' will be interpreted as Framish.
.pp
Certain aspects of Framish, mostly those which depend on MACLisp
primitives which have not been implemented in Franz Lisp, are not
currently operational. These operations have been flagged as
(NOT OPERATIONAL) in the Command Summary.
.sh 2 Philosophy\ of\ framish 20
.pp
The data model used by Framish is a subset of the frame structure of FRL.
Each frame is a data object, with the slots giving the structure of the
object, and the facets holding the data associated with the slot.
Data is accessed by specifying the frame, slot, and facet at which it
resides (called the
.i path
to the data).
.pp
As is the case with Lisp, Framish is an expression langauge;
every Framish statement has a value, and any Framish expression may
be used as a statement.
.sh 2 Command\ Summary 20
.sh 3 Format\ of\ Descriptions
.pp
The following conventions are observed throughout the summary
of commands below:
.ip 1.
All keywords are capitalized.
.ip 2.
Phrases appearing in parentheses () are optional, and may be
omitted without changing the meaning of the expression.
.ip 3.
A sequence of phrases separated by vertical bars | indicates that any
of the phrases is acceptable at that point.
.ip 4.
A sequence of phrases separated by vertical bars and enclosed in
square brackets [] indicates that exactly one of the phrases
must be used at that point.
.ip 5.
A phrase enclosed in braces {} indicates that zero or more
repetitions of that phrase is acceptable at that point.
.ip 6.
If a Framish symbol to be used at some point is one of the
meta-symbols:
.br
( )  [ ] { } |,
.br
the meta-symbol will be placed in double quotes ``''.
.bp
.sh 3 Basic\ Syntax
.pp
Upper and lower case letters are treated identically.
.pp
The articles A, AN, THE are ignored wherever they appear.
.pp
A Lisp S-expression may be introduced into a Framish statement at
any point by prefixing it with the escape symbol ``!''.
.pp
Comments may be introduced into Framish code at any point by
placing them between two percent signs (``%'').
(NOT AVAILABLE \(em conflicts with %-macro of FRL.)
.pp
The comma is the list-building operator;
.sp
a ``,'' b ``,'' ... ``,'' z
.sp
denotes the Lisp structure (list a b ... z)
.pp
Function application is written in algebraic notation as opposed to the
parenthesized-prefix notation of Lisp; writing
.sp
<function-name> ``('' <args> ``)''
.sp
in Framish denotes the application of the named function to the
arguments as in the Lisp function ``apply''. The arguments may be
a list of expressions, or need not appear if the function takes no
arguments.
.pp
Parentheses also allow expressions to be regrouped. A parenthesized
expression will be completely evaluated and the result used in its
place, regardless of the priority of surrounding operators.
.pp
The double quote ``"'' is used to surround a Framish keyword when it
is necessary to avoid having it interpreted as such, for example:
.sp
"test"
.sp
instead of test, to access a Lisp or FRL variable or a slot name "test",
since "test" is a Framish keyword.
.pp
The semicolon ``;'' serves as a statement separator. A single statement
can be replaced by any number of statements joined by semicolons.
.pp
The colon ``:'' and the keywords ``THAT'' and ``EXPRESSION'' indicate
that the expression following is not to be evaluated.
.pp
Since Framish is imbedded in the Lisp system, many of the useful features
of Lisp may also be used in Framish at certain points. In particular,
square brackets may be used as list formers anywhere where Framish
expects a non-path expression
.sh 3 Data\ Structure\ Access 20
.sh 4 Access\ to\ FRL\ Variables 20
.pp
Certain FRL variables are known to Framish. These include:
.ip
CURRENT [ FRAME | SLOT | FACET | VALUE | VALUES ] access
:FRAME, :SLOT, :FACET, :VALUE, :VALUES, respectively.
.ip
ME, MYSELF both access :USER-FRAME.
.sh 4 The\ Frame\ Path
.pp
In order for data to be retrieved from a frame, Framish must have a complete
path of frame, slot, facet. It is, however, possible to specify an
.i incomplete
path. In this case, Framish will supply the missing items from the
.i default
path.
.pp
The default path consists of a frame, a slot, and a facet which are used
in place of the unspecified items in the incomplete path specification.
Operations on the default path are:
.pp
CONSIDER <path> sets the default path to the specified path. If the specified
path is incomplete, it is expanded from the previous default path.
.pp
RECONSIDER resets the default path to its initial state value of
:FRAME, :SLOT, $VALUE.
.pp
IT, THEM, THEY all access the default path.
.pp
.ip \s-2WARNING\s0: 9
The default path is changed only when the statement is actually
interpreted. This means that if you are joining statements with
semicolons, resetting the default path
does not
behave the way you would like it to, since all incomplete paths
(even those input after the expression changing the default path)
will be expanded using the default path in effect at input.
.sh 4 Valid\ Path\ Expressions 20
.pp
The following path expressions are recognized by Framish:
.br
<frame> FRAME specifies a frame
.br
<slot> SLOT
.br
<slot> (SLOT) OF <frame> (FRAME)
.br
<frame> ' S <slot> (SLOT)
.sp
all specify slots. The possessive forms:
.sp
[ ITS | HER | HIS | THEIR ] <slot> (SLOT)
.sp
refer to the default path frame. The possessive form:
.sp
MY <slot> (SLOT)
.sp
refers to :USER-FRAME.
.sp
<facet> FACET
.br
<facet> (FACET) FOR <slot> (SLOT)
.br
<facet> (FACET) FOR <slot> (SLOT) OF <frame> (FRAME)
.sp
all specify facets.
.sh 3 Access\ Commands
.pp
GET [ EACH | ALL ] <path> returns the data in the indicated facet.
.br
Example: { get the suppliers of widget } represents the most common
use of this expression. It returns the $value facet (the facet where
the values to be associated with the slot are kept) of the suppliers
slot of the widget frame. In a supplier-parts database, this value
might be a list of the suppliers of the widget part.
.pp
SAY [ EACH | ALL ] <path> produces a Framish description of the
data in the indicated facet (NOT OPERATIONAL).
.pp
USE [ (ONE) | EACH | ALL ] <path> returns the data located by the
path. If neither EACH nor ALL is specified, and more than one
datum exists in the selected facet, a selection from the data values
is requested.
.br
Example: { use all the suppliers of widget } behaves like { get the
suppliers of widget }. If the suppliers slot of the widget frame
contains three entries in the $value facet, say (X company), (Y company),
(Z company), entering { use suppliers of widget } would cause the
computer to ask for a choice via:
.sp
.nf
Choose one of these:

(a) (X company)
(b) (Y company)
(c) (Z company)
>
.fi
.sp
Responding with the letters a, b, c, or the lists (X company), (Y company),
(Z company) would return the item so selected.
.pp
REMOVE <datum> (FROM) <path> removes the datum from the indicated facet.
.br
Example: If the $value facet of the suppliers slot of the widget frame
contains (X company), (Y company), (Z company), removing the (Y company)
entry could be accomplished by { remove (y company) from the suppliers of
widget }.
.pp
REMOVE [ EACH | ALL ] <path> removes all data from the indicated facet.
.br
Example: { remove all suppliers of widget } empties the suppliers slot
of the widget frame.
.pp
PUT <datum> IN <path> adds the datum to the indicated facet.
.br
Example: { adding the W company to the list of suppliers of widget can
be done by { put (W company) in the suppliers of widget }
.pp
In all of the above statements, a path expression of the form
"[ SLOT | SLOTS ] of <frame>" will alter the structure of the indicated
frame by performing the indicated operation on the frame. Thus,
for example, if a part number field which formerly was part of the
description of a widget was to be dropped, the slot could be removed by
{ remove part-no from the slots of widget }.
.pp
REPLACE (ALL) <path> (BY | WITH) <datum> replaces all data in the
indicated facet with the indicated datum. It is equivalent to the sequence:
.sp
REMOVE ALL <path>; PUT <datum> IN <path>
.pp
CREATE (NEW) <frame type> (CALLED <name>) creates a new frame. The
frame type must be a frame name already known to the system. If a new
generic frame type is being instantiated, use ``thing''. If the name is
present, the frame is given that name; otherwise, a name is generated.
.br
Examples: { create a new thing called part } creates the generic frame
called part. { create a new part called wadget } now creates a specific
instance of part called ``wadget''.
.pp
<path> IS <datum> is equivalent in effect to "PUT <datum> IN <path>".
.pp
<path> ARE <datum1>, ... <datumn> is equivalent in effect to:
.br
"PUT <datum1> IN <path>; ... ; PUT <datumn> IN <path>".
.sp
NOTE: This is not equivalent to the construct:
.br
"PUT <datum1>, ... , <datumn> IN <path>."
.sp
The latter adds a single datum which is actually a list of the data
appearing between the PUT and the IN, while the effect of the ARE
statement is to add n data items.
.pp
DISPLAY <expression> (AS [FRAME | SLOT | FACET]) (USING <print-routine>)
allows objects to be displayed at certain levels of detail using a
specified output routine. The output routine may be one of the standard
LISP output routines or a special-purpose routine. If it is omitted, the
LISP routine "print" is used. If the expression is a path expression and
a level of detail is given, the expression will only be expanded to the
particular level of detail given, whereupon the named object will be
displayed at that level.
.br
Example: { display the suppliers of widget as a slot } will display
the entire contents of the suppliers slot of the widget frame. This will
reveal, in addition to the data in the $value facet, whether any actions,
requirements, default values, etc. have been attached to the slot.
.sp
{ display the widget frame as a frame } will print out the entire widget
frame.
.pp
A common special display case, that of pretty-printing an entire frame,
is available through the command:
.sp
SHOW (ME) <frame>.
.sp
This is equivalent to:
.br
"DISPLAY <frame> FRAME AS FRAME USING $PRPR".
.bp
.sh 3 Arithmetic\ and\ Logical\ Operations
.pp
The standard arithmetic operations of addition, subtraction,
multiplication, and division are available in Framish. The format for
all arithmetic operations is identical:
.sp
[ SUM | TOTAL | DIFFERENCE | PRODUCT | QUOTIENT ] OF <operand>
.sp
Since all operators are prefix, no precedence relations are necessary.
Two forms of operand are recognized. If only two operands are present,
they may be presented joined by the word "AND":
.sp
<operand1> AND <operand2>
.sp
More than two operands may be operated on by joining them in list form:
.sp
<operand1> , <operand2> , ... , <operandn>
.pp
Several predicate expressions are available in Framish. Numeric quantities
may be compared using any of the relations:
.sp
<operand1> (IS) GREATER THAN <operand2>
.br
<operand1> (IS) EQUAL TO <operand2>
.br
<operand1> (IS) NOT EQUAL TO <operand2>
.br
<operand1> (IS) LESS THAN <operand2>
.sp
Membership of an object or a set of objects in a data field may be
established by:
.sp
<path> IS <object>
.br
<path> ARE <object> { , <object> }
.sp
These expressions return true if the object or objects listed are all
members of the field specified by the path expression.
Distinguishing between these predicates and the data insertion commands
which appear to be identical is done solely by location. If the construct
appears in a location where a predicate is expected (cf. IF, TEST, WHERE,
HAS, HAVING), it is interpreted as a predicate;
otherwise it is interpreted as an insertion command.
.sp
Standard logical connectives are also available. In decreasing order
of precedence, they are:
.sp
NOT may be used as a prefix operator for negation;
.br
AND gives logical conjunction;
.br
OR gives logical disjunction.
.sp
AND and OR may be applied between any number of clauses. Since IS and ARE
are of lower precedence than the logical connectives, any clause containing
these operators must be parenthesized. Evaluation proceeds as in LISP, i.e.
clauses are evaluated in the order in which they appear until the truth
value of the entire expression is known or all clauses have been evaluated.
.pp
The basic conditional statement of Framish is written:
.sp
IF <predicate> THEN <true-action> (ELSE <false-action>) (ANDTHEN <action>)
.sp
The predicate is evaluated first. If it is true, the statements of the
true-action are evaluated. If it is false, and the ELSE clause is present,
the statements of the false-action are evaluated. In either case, after
this, if the ANDTHEN clause is present, its statements are evaluated.
.pp
In order to aid in combining actions, the precedence of the semicolon
has been set so that no parentheses are necessary in the above statement
when an action consists of multiple statements.
.pp
If just the result of a predicate is desired, the statement:
.sp
TEST <predicate>
.sp
may be used. The keyword TEST is necessary in order to handle the
keywords IS, ARE correctly.
.sh 3 Quantification\ and\ Selection\ Operators
.pp
Framish offers facilities for selecting from a list of data
one or all of those items satisfying a given predicate, and
for determining whether any or all of those items satisfy a
predicate or predicates. The general format is:
.sp
[ (ANY) | ALL ] <path> [ WHERE | WITH | WHICH ] <predicate> { , <predicate> }
.br
[ (ANY) | ALL ] <path> [ HAVE | HAS ] <predicate> { , <predicate> }
.sp
The first form returns the first data item in the path if ANY is
specified, or all data items in the path if ALL is specified, which
satisfy all the predicates. If neither ANY nor ALL is specified, ANY
is assumed. The second form returns a non-nil value if any (resp. all)
data items in the path satisfy all the predicates.
.pp
In order to facilitate writing the predicate expressions, certain
conventions are observed. The predicate flag is in effect to the right
of the WHERE and HAVE keywords, so IS and ARE will be interpreted in
the predicate (i.e. membership) sense. It is also assumed that in the
normal case for use of these statements, that the data items in the
path are names of other frames, and the predicates will normally apply
to data in those frames. In order to facilitate this checking, the
current path frame is set to the data item in the path which is
currently being tested. This means that the keyword "IT" and its synonyms may be
used in the predicates to represent the value being tested.
.sp
Example: In a supplier-parts database, it is desired to find the names
of all suppliers in Pennsylvania which supply widgets. The statement:
.sp
{ display all suppliers of widget where their state is pennsylvania }
.sp
will accomplish this.
.pp
In the same environment, it is desired to find out whether there is
a widget supplier which also supplies wadgets. This can be done with:
.sp
{ if any suppliers of widget have their part is wadget then display
all suppliers of widget where their part is wadget else display
[ no widget supplier also supplies wadgets ] }
.sh 3 Iteration\ and\ Collection
Iteration in Framish is expressed using the angle brackets ``<'', ``>''.
Any quantity enclosed in angle brackets is interpreted as a list of items.
The effect of enclosing the list in angle brackets is to cause the expression
to be evaluated once for each item in the list, with each item in turn
being substituted for the quantity in angle brackets. Any portion of
a Framish expression may be enclosed in angle brackets. Angle brackets
may be nested (see examples below), but may not appear in parallel.
.sp
Examples: In the supplier-parts database example as above, a list of
all states which have a widget supplier located therein can be found by:
.sp
{ display the state of < the suppliers of widget > }
.sp
A list of all parts supplied by Illinois widget suppliers can be obtained by:
.sp
{ display the part of < all suppliers of widget where
their state is Illinois > }
.sp
Expanding on the previous example, a list of suppliers in California
supplying one or more of those parts can be found by:
.sp
{ display any suppliers of < the part of < all suppliers of widget
where their state is Illinois > > where their state is California }
.pp
Angle brackets also serve as collectors of numeric data. Using an
angle-bracketed quantity as the sole argument to an arithmetic operator
causes the operator to be applied to the list of data the expression
inside the angle bracket generates.
.sp
Example: To find the total number of widgets shipped from Texas suppliers,
write:
.sp
{ the sum of < the volume of < all shipments of widget where the state
of their supplier is Texas > > }
.pp
Data collection with angle brackets is done using
.b append.
This means that nil will never appear in a list collected in this fashion.
.sh 3 Environment\ Creation
.pp
Expressions can be made more legible, and occasionally simplified,
by use of the environment-creation capability of Framish. The
format of the environment-creation statement is:
.sp
WITH <var> AS <expr> { , var AS <expr> } (DO) <stmt> { ; <stmt> }
.sp
This has the effect of lambda-binding the expressions to the left of
the optional keyword DO to their corresponding variables, and then
executing the statements to the right of the DO.
.sp
Example: To display the full name of and all parts supplied by all
widget suppliers, write:
.sp
{ with mfgr as < the suppliers of widget > do
.br
display the name of mfgr, ":", the parts of mfgr;
.br
terpr() }
.sp
.b WARNING:
The iteration/collection construct can interact destructively with the
WITH statement. A variable declared in a WITH statement may not appear
inside angle brackets. This causes an undefined variable error for this
variable if it does not exist outside the scope of the WITH statement,
or uses the value of that variable outside the scope of the WITH statement
otherwise.
.sh 3 Sentinels
.pp
FRL's sentinel feature, which is used extensively in constructing
rule interpreters and reasoning systems, can be exploited using Framish.
In Framish, a sentinel consists of a set of
.i
conditional clauses,
.r
which are predicates to be applied to certain data fields, joined into a
.i
conditional expression
.r
by certain operators, and a sequence of
.i actions,
which are Framish statements which describe what is to be done when the
conditional expression is satisfied. If the sentinel is placed in an
environment (see above), the binding of the expressions in the local
variable list of the environment does not occur until the conditional
expression is satisfied, which
.i triggers
the sentinel.
.pp
The general format of a sentinel is:
.sp
(WITH <var> AS <expr> { , <var> AS <expr> } (DO))
[ WHEN | WHENEVER ] <cond expr> (IS) [ ADDED | REMOVED | FOUND ]
(DO) <stmt> { ; <stmt> }
.pp
There are two types of conditional expression. One consists of
conditional clauses joined by the traditional boolean operators
AND, OR, NOT. The other type is useful in inherited situations
where the sentinel is to be placed on the generic frame and
it is desired to restrict triggering of the sentinel to those cases
where all its conditional clauses are satisfied by the same instance
of the specific case of the generic frame. This is written:
.sp
IN <path> , <stnd cond expr>
.sp
where <stnd cond expr> is of the type of conditional clause first
mentioned. In this case, the current path frame is bound to the
path named after the keyword IN during evaluation of the conditional
expression following it (see examples for some uses of this feature).
.pp
A conditional clause is written:
.sp
<path> HAVING <predicate>
.sp
The conditional clause is declared
.i satisfied
when a data item in the path is found satisfying the predicate. The
data item being tested is available in the FRL variable :VALUE, and
thus may be accessed in Framish through the expression CURRENT VALUE.
.pp
The type of sentinel to be established is controlled by the keywords
delimiting the conditional expression. The first keyword determines the
duration of the sentinel. If WHEN, triggering the sentinel
removes it. If WHENEVER, the sentinel is permanent and will be
triggered any time the condition of the sentinel is satisfied.
.pp
The second keyword determines when and which items will be tested.
The three choices are:
.sp
ADDED, which will cause the sentinel to be tested any time a data
item is added to the frame on which the sentinel is set or its descendants;
.br
REMOVED, which will cause the sentinel to be tested any time a data
item is removed from the frame on which the sentinel is set or its descendants;
.br
FOUND, which will cause the sentinel to be tested when it is declared
and also any time a data item is added to the frame on which the
sentinel is set or its descendants.
.pp
Examples: To maintain database consistency, adding a supplier to the
widget frame should add ``widget'' to the list of parts supplied by
that supplier. This can be done with the sentinel:
.sp
{ whenever suppliers of widget having t is added put widget in the
parts of the current value }
.sp
If I am being supplied with a variety of parts, which I keep track
of in a frame which I have set :USER-FRAME to point to, and wish to
know if one of my suppliers stops supplying widgets, this can be done with:
.sp
{ when my suppliers having (the part of the current value is widget)
is removed display the current value; display [ no longer supplies widgets ] }
.pp
Continuing the above example, if I wish to be notified should a new
California widget supplier be entered into the system, I can write:
.sp
{ when in supplier, (a state having the current value is equal to california)
and (parts having the current value is equal to widget) is added display
[ New widget supplier in California: ]; display the name of the current frame
.sh 3 Other\ Commands
.pp
A facility is under construction by which long Framish statements may
be broken down into component parts and saved for later execution.
