head     1.4;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.4
date     84.02.29.23.23.35;  author layer;  state Exp;
branches ;
next     1.3;

1.3
date     83.09.11.09.44.14;  author jkf;  state Exp;
branches ;
next     1.2;

1.2
date     83.08.15.22.27.35;  author jkf;  state Exp;
branches ;
next     1.1;

1.1
date     83.08.15.11.01.41;  author jkf;  state Exp;
branches ;
next     ;


desc
@more random functions
@


1.4
log
@added peter's fav func "wide-print-list"
@
text
@(setq rcs-common2-
   "$Header: common3.l,v 1.3 83/09/11 09:44:14 jkf Exp $")

;;
;; common3.l				-[Sat Sep 10 10:51:18 1983 by jkf]-
;;
;;

(declare (macros t))

(defun litatom macro (x)
  `(and (atom . ,(cdr x))
	(not (numberp . ,(cdr x)))))

; This function really should compile optimally in-line
;
(defun nequal (arg1 arg2)
  (not (equal arg1 arg2)))

(defun lineread (&rest args)
   (let (flag port)
      (mapc (function		; get the options
	       (lambda (x)
		  (cond ((portp x) (setq port x))
			((setq flag x)))))
	    args)
      (cond ((not (and flag	; flag for empty line
		       (eq (tyipeek port) #\lf)
		       (tyi port)))
	     (prog (input)
		(setq input (ncons nil))  ; initialize for tconc.
		(tconc input (read port))	; do read to make sure
						; an s-expression gets read
		loop
		(cond ((not (eq (tyipeek port) #\lf))
		       (tconc input (read port))
		       (go loop))
		      ( t ; the actual list is in the CAR.
			(tyi port)
			(return (car input)))))))))

(defun defv fexpr (l)
  (set (car l) (cadr l)))


(defun initsym (&rest l)
   (mapcar (function initsym1) l))

(defun initsym1 expr (l)
   (prog (num)
      (cond ((dtpr l)
	     (setq num (cadr l))
	     (setq l (car l)))
	    ( t (setq num 0)))
      (putprop l num 'symctr)
      (return (concat l num))))

(defun newsym (name)
   (concat name
	   (putprop name
		    (1+ (or (get name 'symctr)
			    -1))
		    'symctr)))

(defun oldsym (sym)
   (cond ((get sym 'symctr) (concat sym (get sym 'symctr)))
	 ( t sym)))

(defun allsym (name)
   (prog (num symctr syms)
      (cond ((dtpr name)
	     (setq num (cadr name))
	     (setq name (car name)))
	    ( t (setq num 0)))
      (or (setq symctr (get name 'symctr))
	  (return))
      loop
      (and (>& num symctr)
	   (return syms))
      (setq syms (cons (concat name symctr) syms))
      (setq symctr (1- symctr))
      (go loop)))

(defun remsym (&rest l)
   (mapcar (function remsym1) l))

(defun remsym1 expr (l)
   (prog1 (oldsym (cond ((dtpr l) (car l))
			( t l)))
	  (mapc (function remob) (allsym l))
	  (cond ((dtpr l)
		 (putprop (car l) (1- (cadr l)) 'symctr))
		( t (remprop l 'symctr)))))

(defun symstat (&rest l)
   (mapcar (function (lambda (k)
			(list k (get k 'symctr))))
	   l))

;; from peter@@renoir
(defun wide-print-list (given-list &optional (left-margin (nwritn)))
  ;	given a (presumably long) list, print it as wide as possible.
  (declare (special lpar rpar))
  (let ((max-width 78))
       (tab left-margin)
       (cond ((not (listp given-list))
	      (patom given-list))
	     ((null given-list)
	      (patom nil))
	     (t
	      (patom lpar)
	      (do ((left given-list (cdr left))
		   (need-space-p nil t))
		  ((null left) nil)
		  (cond (need-space-p
			 (patom " ")))
		  (let* ((element (car left))
			 (length (flatc element))
			 (used (nwritn))
			 (available (- max-width used)))
			(cond ((>= length available)
			       (tab (1+ left-margin))))
			(cond ((listp element)
			       (wide-print-list element))
			      (t
			       (patom element)))))
	      (patom rpar)))))
@


1.3
log
@switch 'xxxsym' functions to be exprs and lexprs
@
text
@d2 1
a2 1
   "$Header: common3.l,v 1.2 83/08/15 22:27:35 jkf Exp $")
d99 29
@


1.2
log
@fix some special declarations
@
text
@d2 1
a2 1
   "$Header: /usr/lib/lisp/RCS/common3.l,v 1.1 83/08/15 11:01:41 jkf Exp $")
d5 1
a5 1
;; common3.l				-[Mon Aug 15 12:19:39 1983 by jkf]-
d45 2
a46 1
(defun initsym fexpr (l)
d50 7
a56 7
  (prog (num)
	(cond ((dtpr l)
	       (setq num (cadr l))
	       (setq l (car l)))
	      ( t (setq num 0)))
	(putprop l num 'symctr)
	(return (concat l num))))
d58 6
a63 7
(defun newsym fexpr (l)
  (let ((name (car l)))
       (concat name
	       (putprop name
			(1+ (or (get name 'symctr)
				-1))
			'symctr))))
d65 3
a67 4
(defun oldsym fexpr (l)
   (let ((sym (car l)))
      (cond [(get sym 'symctr) (concat sym (get sym 'symctr))]
	    [t sym])))
d69 14
a82 15
(defun allsym fexpr (l)
  (prog (num symctr syms)
	(cond ((dtpr (car l))
	       (setq num (cadar l))
	       (setq l (caar l)))
	      ( t (setq num 0)
		  (setq l (car l))))
	(or (setq symctr (get l 'symctr))
	    (return))
	loop
	(and (>& num symctr)
	     (return syms))
	(setq syms (cons (concat l symctr) syms))
	(setq symctr (1- symctr))
	(go loop)))
d84 2
a85 2
(defun remsym fexpr (l)
  (maplist (function remsym1) l))
d88 6
a93 6
  (prog1 (funcall (function oldsym)
		  (cond ((dtpr (car l)) (car l))
			( t  l)))
	 (mapc (function remob) (apply (function allsym) l))
	 (cond ((dtpr (car l)) (putprop (caar l) (1- (cadar l)) 'symctr))
	       ( t (remprop (car l) 'symctr)))))
d95 4
a98 6
(defun symstat fexpr (l)
  (mapcar #'(lambda (k)
		(list k (get k 'symctr)))
	  l))


@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   "$Header: /usr/lib/lisp/RCS/common2.l,v 1.5 83/07/08 17:46:49 layer Exp $")
d5 1
a5 1
;; common3.l				-[Mon Aug 15 11:01:36 1983 by jkf]-
d98 1
a98 1
  (mapcar (funl (k)
@
