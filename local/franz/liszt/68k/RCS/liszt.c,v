head     1.6;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.6
date     83.07.25.12.07.31;  author layer;  state Exp;
branches ;
next     1.5;

1.5
date     83.05.04.18.31.20;  author layer;  state Exp;
branches ;
next     1.4;

1.4
date     83.04.08.22.57.07;  author layer;  state Exp;
branches ;
next     1.3;

1.3
date     83.04.08.16.34.44;  author layer;  state Exp;
branches ;
next     1.2;

1.2
date     83.04.08.16.33.28;  author layer;  state Exp;
branches ;
next     1.1;

1.1
date     83.04.08.16.33.05;  author layer;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@grab OFFSET from ../../franz/h/config.h
@
text
@#ifndef lint
static char *rcsid = "$Header: liszt.c 1.5 83/05/04 18:31:20 layer Exp $";
#endif

/*
**			-[Wed May  4 18:18:10 1983 by layer]-
**
**
** liszt :: interface to the lisp compiler
**
** There are two reasons for having a C interface to the compiler:
**	1) Fseek doesn't work properly from lisp, and there is no
**	   lseek.
**	2) To start up a process from a 1 Mb process, like when liszt forks
**	   a /usr/lib/lisp/as to assemble the output of the compiler, takes
**	   too long. (The compiler is 100 times larger than this program.)
**
**/

#include	<stdio.h>
#include	"../../franz/h/aout.h"
#include	"../../franz/h/config.h"

#ifndef LISZT
#define LISZT	"/usr/ucb/xliszt"
#endif

#ifndef AS
#define AS	"/usr/lib/lisp/as"
#endif

#ifndef OFFSET
#define OFFSET		0x0
#endif

main(argc,argv,envp)
	register char *argv[], **envp;
{
	struct exec header;
	register int autorun = 0;
	register int no_assem = 0;
	register char *p;
	register int oflag = 0, cur;
	register int objp;
	register int slen;
	char temp[20], tempfile[20], srcfile[20], outfile[20];
	char *args_to_string();
	char *flags_to_string();
	char command[1024];
    
	/*
	**  process arguments :: check for -r and -S switches
	**
	**  -F is a special flag that means just to fix the offset in the
	** object file, and then quit.
	**
	**/
	/* If no args, then give the user an interactive liszt */
        if (argc == 1)
	{
		execle(LISZT, "liszt", 0, envp);
		exit(100);
	} else
	{
		for (cur = 1; cur < argc; cur++) {
			if (*argv[cur] == '-')
			{
				p = argv[cur];
				p++;
				if (*p == 'o')
				{
		    			strcpy(outfile,argv[++cur]);
		    			oflag++;
				}
				else if (*p == 'F')
				{
					strcpy(outfile,argv[++cur]);
					autorun = 1;
					goto fixit;
				}
				else
				{
		    			for (; *p; p++) {
						switch (*p)
						{
			    			case 'S':
			        			no_assem++;
			        			break;
			    			case 'r':
			        			autorun++;
			        			break;
			    			default:
			        			break;
						}
		    			}
				}
	    		}
			else
			{	/* must be filename */
	        		strcpy(srcfile, argv[cur]);
	    		}
        	}
    	}

	if (no_assem)
	{
    		sprintf(command, "%s %s", LISZT, args_to_string(argv));
#ifdef debug
    		printf("%s\n", command);
#else
		exit(system(command));
#endif
	}

	sprintf(tempfile, "/tmp/Lzt%d.s", getpid());

	/* If output file not given, then we deduce it... */
	if (oflag == 0)
	{
		strcpy(outfile,srcfile);
		slen = strlen(outfile);
		if (outfile[slen - 2] == '.')
		{
			outfile[slen - 1] = 'o';
		}
		else
		{
			strcpy(temp,outfile);
			sprintf(outfile, "%s.o", temp);
		}
	}

	sprintf(command, "%s -S%s -o %s %s",
			 LISZT, flags_to_string(argc, argv), tempfile, srcfile);
#ifdef debug
	printf("%s\n", command);
#else
    	if (system(command) != 0)
	{
		exit(101);
    	}
#endif

	sprintf(command, "%s -o %s %s", AS, outfile, tempfile);
#ifdef debug
	printf("%s\n", command);
#else
	if (system(command) != 0)
	{
		exit(102);
	}
	unlink(tempfile);

fixit:
    	if (autorun)
	{
		if ((objp = open(outfile,2)) == -1)
		{
	    		perror(outfile);
	    		exit(103);
		}
		if (read(objp,&header,sizeof header) != sizeof (struct exec))
		{
			perror("read failed");
			exit(1);
		}

		/* Change the offset to the correct value */
		header.a_entry = OFFSET;

		/* seek back to beginning */
		if (lseek(objp,0,0) != 0)
		{
	    		perror("seek failed");
	    		exit(104);
		}

		/* write the new a.out header... */
		if (write(objp,&header,sizeof header) != sizeof(struct exec))
		{
	    		perror("write failed");
	    		exit(105);
		}

		/* make it executable */
		chmod(outfile, 0755);
    	} else
		exit(0);
#endif
}

char *
args_to_string(pp)
	char *pp[];
{
    	char result[1024];
    	register int ii = 0,
		     jj = 1;

    	for (; pp[jj]; ii++, jj++)
	{
		xstrcpy(&result[ii],pp[jj]);
		ii = ii + strlen(pp[jj]);
    	}
    	result[ii++] = '\0';
    	return(result);
}

char *
flags_to_string(argc, argv)
	int argc;
	char *argv[];
{
    	char result[128];
    	register int chari, word, skipnext = 0, out = 0;

	for (word = 1; word < argc; word++)
	{
		if (skipnext)
		{
			skipnext = 0;
			word++;
			continue;
		}
		if (*argv[word] == '-')
			for (chari = 1; argv[word][chari]; chari++)
				if (argv[word][chari] == 'o')
					skipnext = 1;
				else
					result[out++] = argv[word][chari];
	}
    	result[out] = '\0';
    	return(result);
}

xstrcpy(s, t)
	char *s, *t;
{
    	while (*t != '\0')
	{
        	*s++ = *t++;
    	}
    	*s = ' ';
}
@


1.5
log
@made the access of the offset more general by using the a.out structure
from ../../franz/h/aout.h.
@
text
@d2 1
a2 1
static char *rcsid = "$Header: liszt.c 1.4 83/04/08 22:57:07 layer Exp $";
d22 1
d33 1
a33 1
#define OFFSET		0x8000
@


1.4
log
@minor changes
@
text
@d2 1
a2 1
static char *rcsid = "$Header: /na/franz/liszt/68k/RCS/liszt.c,v 1.3 83/04/08 16:34:44 layer Exp $";
d6 1
a6 1
**			-[Fri Apr  8 22:13:43 1983 by layer]-
d21 1
d32 1
a32 1
#define OFFSET		0x800000
a34 2
long a_entry = OFFSET;

d38 1
d52 4
d73 2
a74 1
				} else
d76 6
d153 1
d161 1
a161 1
		if (lseek(objp,28,0) != 28)
d163 10
d176 3
a178 1
		if (write(objp,&a_entry,4) != 4)
d183 2
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char *rcsid = "$Header: /na/franz/liszt/68k/RCS/liszt.c,v 1.2 83/04/08 16:33:28 layer Exp $";
d6 1
a6 1
**			-[Thu Mar 24 17:29:51 1983 by layer]-
d12 2
a13 2
**	1) The standard io library has bugs in it, and fseek will not work
**	   from lisp.
d15 2
a16 3
**	   an /usr/lib/lisp/as to assemble the output of the compiler, takes
**	   too long. (The compiler is 100 times larger than this program,
**	   after strip is run on the object file.)
d23 1
a23 1
#define LISZT	"/a/franz/liszt/xliszt"
d85 2
a86 1
	    		} else
@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char *rcsid = "$Header: $";
d24 1
a24 1
#define LISZT	"/a/franz/liszt/cliszt"
d28 1
a28 1
#define AS	"/a/franz/lisplib/as"
@


1.1
log
@Initial revision
@
text
@a30 6
#ifdef debug
#define DEBUG(x)	x
#else
#define DEBUG(x)
#endif

d32 1
a32 1
#define OFFSET		0
d44 3
a46 1
	char temp[20], srcfile[20], objfile[20], asfile[20];
d48 1
a48 1
	register int objp;
a49 1
	register int slen;
d54 1
d68 1
a68 1
		    			strcpy(objfile,argv[++cur]);
d93 1
a93 1
    	if (oflag == 0)
d95 16
a110 3
		strcpy(objfile,srcfile);
		slen = strlen(objfile);
		if (objfile[slen - 2] == '.')
d112 3
a114 2
	    		objfile[slen - 1] = 'o';
		} else
d116 2
a117 2
	    		strcpy(temp,objfile);
	    		sprintf(objfile, "%s.o", temp);
d119 7
a125 15
    	}
    
    	strcpy(asfile,srcfile);
    	slen = strlen(asfile);
    	if (asfile[slen - 2] == '.')
	{
		asfile[slen - 1] = 's';
    	} else
	{
		strcpy(temp,asfile);
		sprintf(asfile, "%s.s", temp);
    	}
    
    	sprintf(command, "%s -S %s", LISZT, args_to_string(argv));
    	DEBUG(printf("%s\n", command));
a127 1
		unlink(asfile);
d130 1
d132 9
a140 10
    	if (no_assem == 0) {
		sprintf(command, "%s -o %s %s", AS, objfile, asfile);
		DEBUG(printf("%s\n", command));
		if (system(command) != 0)
		{
	    		unlink(asfile);
	    		exit(102);
		}
		unlink(asfile);
    	}
d142 1
a142 1
    	if (autorun && (no_assem == 0))
d144 1
a144 2
		DEBUG(printf("fixing offset...\n"));
		if ((objp = open(objfile,2)) == -1)
d146 1
a146 1
	    		perror(objfile);
d159 1
a159 1
		chmod(objfile, 0755);
d162 1
d179 27
@
