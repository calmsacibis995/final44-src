head     1.14;
access   jkf layer sklower;
symbols  ;
locks    ; strict;
comment  @ * @;


1.14
date     87.12.15.16.55.07;  author sklower;  state Exp;
branches ;
next     1.13;

1.13
date     83.11.22.10.12.22;  author jkf;  state Exp;
branches ;
next     1.12;

1.12
date     83.08.24.17.15.44;  author layer;  state Exp;
branches ;
next     1.11;

1.11
date     83.08.24.10.57.45;  author layer;  state Exp;
branches ;
next     1.10;

1.10
date     83.08.22.22.56.55;  author layer;  state Exp;
branches ;
next     1.9;

1.9
date     83.08.17.00.08.41;  author layer;  state Exp;
branches ;
next     1.8;

1.8
date     83.08.14.19.31.39;  author layer;  state Exp;
branches ;
next     1.7;

1.7
date     83.08.14.01.56.33;  author layer;  state Exp;
branches ;
next     1.6;

1.6
date     83.08.14.01.45.12;  author layer;  state Exp;
branches ;
next     1.5;

1.5
date     83.08.12.02.46.33;  author layer;  state Exp;
branches ;
next     1.4;

1.4
date     83.03.23.20.48.38;  author layer;  state Exp;
branches ;
next     1.3;

1.3
date     83.03.20.14.04.27;  author jkf;  state Exp;
branches ;
next     1.2;

1.2
date     83.02.11.05.06.42;  author layer;  state Exp;
branches ;
next     1.1;

1.1
date     83.01.26.12.12.53;  author jkf;  state Exp;
branches ;
next     ;


desc
@compiler macros
@


1.14
log
@cci changes from purdue.
@
text
@;----------- macros for the compiler -------------

(setq RCS-cmacros
   "$Header: /b/users/housel/lisp/liszt/RCS/cmacros.l,v 1.8 86/12/13 12:24:16 housel Exp $")

(declare (macros t))			; compile and save macros

; If we are making an interpreted version, then const.l hasn't been
; loaded yet...
(eval-when (compile eval)
   (or (get 'const 'loaded) (load '../const.l)))

;--- comp-err
;    comp-warn
;    comp-note
;    comp-gerr
; these are the compiler message producing macros.  The form is
; (comp-xxxx val1 val2 val3 ... valn) , all values are printed according
;  to this scheme. If vali is an atom, it is patomed, if vali is a
;  list, it is evaluated and printed. If vali is N a newline is printed
; 
; furthermore
;    the name of the current function is printed first
;    after comp-err prints the message, it does a throw to Comp-err .
;    errors are preceeded by Error: 
;	warnings by %Warning: and
;	notes by %Note:
;     The message is sent to the message file
;
(def comp-err
   (macro (l)
	  `(progn (comp-msg "?Error: " v-ifile ": " g-fname ": "
			    ,@@(cdr l) )
		  (setq er-fatal (1+ er-fatal))
		  (throw nil Comp-error))))

(def comp-warn
   (macro (l)
	  `(progn (setq er-warn (1+ er-warn))
		  (cond (fl-warn
			    (comp-msg "%Warning: " v-ifile ": "  g-fname ": "
				      ,@@(cdr l)))))))

(def comp-note
   (macro (l)
	  `(progn (cond (fl-verb
			    (comp-msg "%Note: " v-ifile ": "  ,@@(cdr l)))))))

(def comp-gerr
   (macro (l)
	  `(progn (comp-msg
		      "?Error: " v-ifile ": " g-fname ": ",@@(cdr l))
		  (setq er-fatal (1+ er-fatal)))))

;--- comp-msg - port
;	      - lst
;  prints the lst to the given port.  The lst is printed in the manner
; described above, that is atoms are patomed, and lists are evaluated
; and printed, and N prints a newline.   The output is always drained.
;
(def comp-msg
   (macro (lis)
	  (do ((xx (cdr lis) (cdr xx))
	       (res nil))
	      ((null xx)
	       `(progn ,@@(nreverse (cons '(terpri) res))))
	      (setq res
		    (cons (cond ((atom (car xx))
				 (cond ((eq (car xx) 'N) '(terpr))
				       ((stringp (car xx)) `(patom ,(car xx)))
				       (t `(niceprint ,(car xx)))))
				(t `(niceprint ,(car xx))))
			  res)))))

(def niceprint
   (macro (l)
	  `((lambda (float-format) (patom ,(cadr l))) "%.2f")))

;--- standard push macro
; (Push stackname valuetoadd)

(defmacro Push (atm val)
  `(setq ,atm (cons ,val ,atm)))

;--- unpush macro - like pop except top value is thrown away
(defmacro unpush (atm)
  `(setq ,atm (cdr ,atm)))

;--- and an increment macro
(defmacro incr (atm)
  `(setq ,atm (1+ ,atm)))

(defmacro decr (atm)
  `(setq ,atm (1- ,atm)))

;--- add a comment
(defmacro makecomment (arg)
  `(cond (fl-comments (setq g-comments (cons ,arg g-comments)))))

;--- add a comment irregardless of the fl-comments flag
(defmacro forcecomment (arg)
  `(setq g-comments (cons ,arg g-comments)))

;--- write to the .s file
(defmacro sfilewrite (arg)
  `(patom ,arg vp-sfile))

(defmacro sfilewriteln (arg)
  `(msg (P vp-sfile) ,arg N))

;--- Liszt-file  :: keep track of rcs info regarding part of Liszt
;  This is put at the beginning of a file which makes up the lisp compiler.
; The form used is   (Liszt-file name rcs-string)
; where name is the name of this file (without the .l) and rcs-string.
;
(defmacro Liszt-file (name rcs-string)
   `(cond ((not (boundp 'Liszt-file-names))
	   (setq Liszt-file-names (ncons ,rcs-string)))
	  (t (setq Liszt-file-names
		   (append1 Liszt-file-names ,rcs-string)))))

(eval-when (compile eval load)
   (defun immed-const (x)
	  (get_pname (concat #+(or for-vax for-tahoe) "$" #+for-68k "#" x))))

; Indicate that this file has been loaded, before
(putprop 'cmacros t 'version)

;-------- Instruction Macros

#+(or for-vax for-tahoe)
(defmacro e-add (src dst)
   `(e-write3 'addl2 ,src ,dst))

#+(or for-vax for-tahoe)
(defmacro e-sub (src dst)
   `(e-write3 'subl2 ,src ,dst))

#+(or for-vax for-tahoe)
(defmacro e-cmp (src dst)
   `(e-write3 'cmpl ,src ,dst))

(defmacro e-tst (src)
   `(e-write2 'tstl ,src))

#+for-vax
(defmacro e-quick-call (what)
   `(e-write2 "jsb" ,what))

#+for-tahoe
(defmacro e-quick-call (what)
   `(e-write3 "calls" "$4" ,what))

#+for-68k
(defmacro e-quick-call (what)
  `(e-write2 "jsbr" ,what))


;--- e-add3 :: add from two sources and store in the dest
;--- e-sub3 :: subtract from two sources and store in the dest

; WARNING:  if the destination is an autoincrement addressing mode, then
;	this will not work for the 68000, because multiple instructions
;	are generated:
;		(e-add3 a b "sp@@+")
;	is
;		movl b,sp@@+
;		addl a,sp@@+	(or addql)
#+(or for-vax for-tahoe)
(defmacro e-add3 (s1 s2 dest)
   `(e-write4 'addl3 ,s1 ,s2 ,dest))

#+for-68k
(defmacro e-add3 (s1 s2 dest)
   `(progn
       (e-write3 'movl ,s2 ,dest)
       (e-add ,s1 ,dest)))

#+(or for-vax for-tahoe)
(defmacro e-sub3 (s1 s2 dest)
   `(e-write4 'subl3 ,s1 ,s2 ,dest))

#+for-68k
(defmacro e-sub3 (s1 s2 dest)
   `(progn
       (e-write3 'movl ,s2 ,dest)
       (e-sub ,s1 ,dest)))

(defmacro d-cmp (arg1 arg2)
  `(e-cmp (e-cvt ,arg1) (e-cvt ,arg2)))

(defmacro d-tst (arg)
  `(e-tst (e-cvt ,arg)))

;--- d-cmpnil :: compare an IADR to nil
;
(defmacro d-cmpnil (iadr)
   #+(or for-vax for-tahoe) `(d-tst ,iadr)
   #+for-68k `(d-cmp 'Nil ,iadr))

(defmacro e-cmpnil (eiadr)
   #+(or for-vax for-tahoe) `(break 'e-cmpnil)
   #+for-68k `(e-cmp (e-cvt 'Nil) ,eiadr))

(defmacro e-call-qnewint ()
   `(e-quick-call '_qnewint))

(defmacro C-push (src)
   #+for-68k `(e-move ,src '#.Cstack)
   #+(or for-vax for-tahoe) `(e-write2 'pushl ,src))

(defmacro L-push (src)
   `(e-move ,src '#.np-plus))

(defmacro C-pop (dst)
   `(e-move '#.unCstack ,dst))

#+(or for-vax for-68k)
(defmacro L-pop (dst)
   `(e-move '#.np-minus ,dst))

#+for-tahoe
(defmacro L-pop (dst)
   `(progn (e-sub '($ 4) '#.np-reg)
	   (e-move '(0 #.np-reg) ,dst)))

@


1.13
log
@add -W switch
@
text
@d4 1
a4 1
   "$Header: cmacros.l,v 1.12 83/08/24 17:15:44 layer Exp $")
d124 1
a124 1
	  (get_pname (concat #+for-vax "$" #+for-68k "#" x))))
d131 1
a131 1
#+for-vax
d135 1
a135 1
#+for-vax
d139 1
a139 1
#+for-vax
d146 1
d148 1
a148 1
   `(e-write2 #+for-vax "jsb" #+for-68k "jbsr" ,what))
d150 9
d169 1
a169 1
#+for-vax
d179 1
a179 1
#+for-vax
d198 1
a198 1
   #+for-vax `(d-tst ,iadr)
d202 1
a202 1
   #+for-vax `(break 'e-cmpnil)
d210 1
a210 1
   #+for-vax `(e-write2 'pushl ,src))
d218 1
d221 6
@


1.12
log
@make references to nil-reg ==> Nil
@
text
@d4 1
a4 1
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.11 83/08/24 10:57:45 layer Exp $")
d39 2
a40 1
	  `(progn (cond (fl-warn
@


1.11
log
@make sure that all macros are defined before use
@
text
@d4 1
a4 1
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.10 83/08/22 22:56:55 layer Exp $")
d188 1
a188 1
   #+for-68k `(d-cmp '#.nil-reg ,iadr))
d192 1
a192 1
   #+for-68k `(e-cmp '#.nil-reg ,eiadr))
@


1.10
log
@clean up the code a bit...
@
text
@d4 1
a4 1
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.9 83/08/17 00:08:41 layer Exp $")
d134 14
a161 4
#+for-vax
(defmacro e-sub3 (s1 s2 dest)
   `(e-write4 'subl3 ,s1 ,s2 ,dest))

d168 4
a177 4
(defmacro e-cmpnil (eiadr)
   #+for-vax `(break 'e-cmpnil)
   #+for-68k `(e-cmp '#.nil-reg ,eiadr))

d181 2
a182 3
#+for-vax
(defmacro e-cmp (src dst)
   `(e-write3 'cmpl ,src ,dst))
a183 4
#+for-vax
(defmacro e-sub (src dst)
   `(e-write3 'subl2 ,src ,dst))

d190 3
a192 13
;--- e-tst :: test the given value
;
(defmacro e-tst (src)
   `(e-write2 'tstl ,src))

;--- d-tst :: test the given value (set the cc)
;
;.. d-exp
(defmacro d-tst (arg)
  `(e-tst (e-cvt ,arg)))

(defmacro e-quick-call (what)
   `(e-write2 #+for-vax "jsb" #+for-68k "jbsr" ,what))
@


1.9
log
@added e-sub3.
@
text
@d4 1
a4 1
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.8 83/08/14 19:31:39 layer Exp $")
d202 1
a202 1
(defmacro e-Cstack (src)
d206 1
a206 1
(defmacro e-Lstack (src)
d208 6
@


1.8
log
@cmp's were screwed up for the 68000
@
text
@d4 1
a4 1
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.7 83/08/14 01:56:33 layer Exp $")
d135 2
d148 4
d157 6
@


1.7
log
@fix rcs header
@
text
@d4 1
a4 1
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.6 83/08/14 01:45:12 layer Exp $")
d154 1
a154 1
   #+for-68k `(e-cmp ,eiadr '#.nil-reg))
@


1.6
log
@added instruction macros (from instr.l)
@
text
@d4 1
a4 1
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.5 83/08/12 02:46:33 layer Exp $")
d113 1
a113 3
; where name is the name of this file (without the .l) and rcs-string
; is "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.5 83/08/12 02:46:33 layer Exp $" when the file is open for editing but is replaced
; by rcs with the name of the file and modification date after a delta.
@


1.5
log
@New lexpr stuff for both/reg for 68k
@
text
@d4 1
a4 1
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.4 83/03/23 20:48:38 layer Exp $")
d8 5
d114 1
a114 1
; is "$Header: $" when the file is open for editing but is replaced
d125 1
a125 3
	  (get_pname (concat #+for-vax "$"
			     #+for-68k "#"
			     x))))
d127 71
a197 1
(putprop 'cmacros t 'version)	; flag that this file has been loaded
@


1.4
log
@merge of 68k and vax versions
@
text
@d3 2
a4 2
(setq SCCS-cmacros
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.3 83/03/20 14:04:27 jkf Exp $")
a5 4
; Copyright (c) 1980 ,  The Regents of the University of California.
; All rights reserved.  
; author: j. foderaro

d26 5
a30 5
  (macro (l)
	 `(progn (comp-msg "?Error: " v-ifile ": " g-fname ": " 
			   ,@@(cdr l) )
		 (setq er-fatal (1+ er-fatal))
		 (throw nil Comp-error))))
d33 4
a36 4
  (macro (l)
	 `(progn (cond (fl-warn 
			(comp-msg "%Warning: " v-ifile ": "  g-fname ": " 
					   ,@@(cdr l)))))))
d39 3
a41 3
  (macro (l)
	 `(progn (cond (fl-verb
			(comp-msg "%Note: " v-ifile ": "  ,@@(cdr l)))))))
d44 4
a47 4
  (macro (l)
	 `(progn (comp-msg
			"?Error: " v-ifile ": " g-fname ": ",@@(cdr l))
		 (setq er-fatal (1+ er-fatal)))))
d56 13
a68 12
  (macro (lis)
	 (do ((xx (cdr lis) (cdr xx))
	      (res nil))
	     ((null xx) 
	      `(progn ,@@(nreverse (cons '(terpri) res))))
	     (setq res 
		   (cons (cond ((atom (car xx))
				(cond ((eq (car xx) 'N) '(terpr))
				      ((stringp (car xx)) `(patom ,(car xx)))
				      (t `(niceprint ,(car xx)))))
			       (t `(niceprint ,(car xx))))
			 res)))))
d70 2
a71 2
  (macro (l)
	 `((lambda (float-format) (patom ,(cadr l))) "%.2f")))
a72 2
					

a83 1

d89 1
a90 1

a98 1

d105 1
a105 1
;--- Liszt-file  :: keep track of sccs info regarding part of Liszt
d107 4
a110 4
; The form used is   (Liszt-file name sccs-string)
; where name is the name of this file (without the .l) and sccs-string
; is "%Z%	%W%" when the file is open for editing but is replaced
; by sccs with the name of the file and modification date after a delta.
d112 1
a112 1
(defmacro Liszt-file (name sccs-string)
d114 1
a114 1
	   (setq Liszt-file-names (ncons ,sccs-string)))
d116 1
a116 1
		   (append1 Liszt-file-names ,sccs-string)))))
a117 2


a122 1

@


1.3
log
@merge in 68k version
@
text
@d4 1
a4 1
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.2 83/02/11 05:06:42 layer Exp $")
a82 5

;--- pop macro

(defmacro Pop (val)
  `(prog1 (car ,val) (setq ,val (cdr ,val))))
@


1.2
log
@added macro sfilewriteln
@
text
@d4 1
a4 1
   "$Header: /na/franz/liszt/RCS/cmacros.l,v 1.1 83/01/26 12:12:53 jkf Exp $")
d129 10
a138 1
	   
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
   "$Header$")
d114 2
@
