head     1.14;
access   jkf layer sklower;
symbols  ;
locks    ; strict;
comment  @ * @;


1.14
date     87.12.15.17.02.38;  author sklower;  state Exp;
branches ;
next     1.13;

1.13
date     84.10.18.12.36.57;  author jkf;  state Exp;
branches ;
next     1.12;

1.12
date     83.08.28.17.12.47;  author layer;  state Exp;
branches ;
next     1.11;

1.11
date     83.08.24.10.58.46;  author layer;  state Exp;
branches ;
next     1.10;

1.10
date     83.08.22.22.57.01;  author layer;  state Exp;
branches ;
next     1.9;

1.9
date     83.08.14.01.48.27;  author layer;  state Exp;
branches ;
next     1.8;

1.8
date     83.08.12.02.47.50;  author layer;  state Exp;
branches ;
next     1.7;

1.7
date     83.08.04.01.41.08;  author layer;  state Exp;
branches ;
next     1.6;

1.6
date     83.07.30.15.34.04;  author layer;  state Exp;
branches ;
next     1.5;

1.5
date     83.04.08.18.43.54;  author layer;  state Exp;
branches ;
next     1.4;

1.4
date     83.04.06.15.20.39;  author layer;  state Exp;
branches ;
next     1.3;

1.3
date     83.03.23.20.49.30;  author layer;  state Exp;
branches ;
next     1.2;

1.2
date     83.03.03.12.15.01;  author jkf;  state Exp;
branches ;
next     1.1;

1.1
date     83.01.26.12.15.33;  author jkf;  state Exp;
branches ;
next     ;


desc
@even more random function opencoding
@


1.14
log
@cci changes from purdue
@
text
@(include-if (null (get 'chead 'version)) "../chead.l")
(Liszt-file func
   "$Header: /b/users/housel/lisp/liszt/RCS/func.l,v 1.6 87/01/12 12:44:03 housel Exp $")

;;; ----	f u n c				function compilation
;;;
;;;			-[Wed Aug 24 10:51:11 1983 by layer]-

; cm-ncons :: macro out an ncons expression
;
(defun cm-ncons nil
  `(cons ,(cadr v-form) nil))

; cc-not :: compile a "not" or "null" expression
;
(defun cc-not nil
  (makecomment '(beginning not))
  (if (null g-loc)
      then (let ((g-cc (cons (cdr g-cc) (car g-cc)))
		 (g-ret nil))
		(d-exp (cadr v-form)))
      else (let ((finlab (d-genlab))
		 (finlab2 (d-genlab))
		 (g-ret nil))
		; eval arg and jump to finlab if nil
		(let ((g-cc (cons finlab nil))
		      g-loc)
		     (d-exp (cadr v-form)))
		; didn't jump, answer must be t
		(d-move 'T g-loc)
		(if (car g-cc)
		    then (e-goto (car g-cc))
		    else (e-goto finlab2))
		(e-label finlab)
		; answer is nil
		(d-move 'Nil g-loc)
		(if (cdr g-cc) then (e-goto (cdr g-cc)))
		(e-label finlab2))))

;--- cc-numberp :: check for numberness
;
(defun cc-numberp nil
  (d-typecmplx (cadr v-form) 
	       '#.(immed-const (plus 1_2 1_4 1_9))))

;--- cc-or :: compile an "or" expression
;
(defun cc-or nil
  (let ((finlab (d-genlab))
	(finlab2)
	(exps (if (cdr v-form) thenret else '(nil)))) ; (or) => nil
       (if (null (car g-cc))
	   then (d-exp (do ((g-cc (cons finlab nil))
			    (g-loc (if g-loc then 'reg))
			    (g-ret nil)
			    (ll exps (cdr ll)))
			   ((null (cdr ll)) (car ll))
			   (d-exp (car ll))))
		(if g-loc
		    then (setq finlab2 (d-genlab))
			 (e-goto finlab2)
			 (e-label finlab)
			 (d-move 'reg g-loc)
			 (e-label finlab2)
		    else (e-label finlab))
	   else (if (null g-loc) then (setq finlab (car g-cc)))
		(d-exp (do ((g-cc (cons finlab nil))
			    (g-loc (if g-loc then 'reg))
			    (g-ret nil)
			    (ll exps (cdr ll)))
			   ((null (cdr ll)) (car ll))
			   (d-exp (car ll))))
		(if g-loc
		    then (setq finlab2 (d-genlab))
			 (e-goto finlab2)
			 (e-label finlab)
			 (d-move 'reg g-loc)
			 (e-goto (car g-cc))	; result is t
			 (e-label finlab2)))
       (d-clearreg)))  ;we are not sure of the state due to possible branches.
			       
;--- c-prog :: compile a "prog" expression
;
; for interlisp compatibility, we allow the formal variable list to
; contain objects of this form (vrbl init) which gives the initial value
; for that variable (instead of nil)
;
(defun c-prog nil
   (let ((g-decls g-decls))
      (let (g-loc g-cc seeninit initf
	    (p-rettrue g-ret) (g-ret nil)
	    ((spcs locs initsv . initsn) (d-classify (cadr v-form))))

	 (e-pushnil (length locs))	; locals initially nil
	 (d-bindprg spcs locs)		; bind locs and specs

	 (cond (initsv (d-pushargs initsv)
		       (mapc '(lambda (x)
				 (d-move 'unstack (d-loc x))
				 (decr g-loccnt)
				 (unpush g-locs))
			     (nreverse initsn))))

	 ; determine all possible labels
	 (do ((ll (cddr v-form) (cdr ll))
	      (labs nil))
	     ((null ll) (setq g-labs `((,(d-genlab) ,@@labs)
				       ,@@g-labs)))
	     (if (and (car ll) (symbolp (car ll)))
		then (if (assq (car ll) labs)
			then (comp-err "label is mulitiply defined " (car ll))
			else (setq labs (cons (cons (car ll) (d-genlab))
					      labs)))))

	 ; compile each form which is not a label
	 (d-clearreg)		; unknown state after binding
	 (do ((ll (cddr v-form) (cdr ll)))
	     ((null ll))
	     (if (or (null (car ll)) (not (symbolp (car ll))))
		then (d-exp (car ll))
		else (e-label (cdr (assq (car ll) (cdar g-labs))))
		     (d-clearreg))))		; dont know state after label

      ; result is nil if fall out and care about value
      (if (or g-cc g-loc) then (d-move 'Nil 'reg))

      (e-label (caar g-labs))		; return to label
      (setq g-labs (cdr g-labs))
      (d-unbind)))			; unbind our frame

;--- d-bindprg :: do binding for a prog expression
;	- spcs : list of special variables
;	- locs : list of local variables
;	- specinit : init values for specs (or nil if all are nil)
;
(defun d-bindprg (spcs locs)
   ; place the local vrbls and prog frame entry on the stack
   (setq g-loccnt (+ g-loccnt (length locs))
	 g-locs (nconc locs `((prog . ,(length spcs)) ,@@g-locs)))

   ; now bind the specials, if any, to nil
   (if spcs then (e-setupbind)
       (mapc '(lambda (vrb)
		  (e-shallowbind vrb 'Nil))
	     spcs)
       (e-unsetupbind)))

;--- d-unbind :: remove one frame from g-locs
;
(defun d-unbind nil
   (do ((count 0 (1+ count)))
       ((dtpr (car g-locs))
	(if (not (zerop (cdar g-locs)))
	    then (e-unshallowbind (cdar g-locs)))
	(cond ((not (zerop count))
	       (e-dropnp count)

	       (setq g-loccnt (- g-loccnt count))))
	(setq g-locs (cdr g-locs)))
       (setq g-locs (cdr g-locs))))
	
;--- d-classify :: seperate variable list into special and non-special
;	- lst : list of variables
; returns ( xxx yyy zzz . aaa) 
;		where xxx is the list of special variables and
;		yyy is the list of local variables
;		zzz are the non nil initial values for prog variables
;		aaa are the names corresponding to the values in zzz
;
(defun d-classify (lst)
   (do ((ll lst (cdr ll))
	(locs) (spcs) (init) (initsv) (initsn)
	(name))
       ((null ll) (cons spcs (cons locs (cons initsv initsn))))
       (if (atom (car ll))
	   then (setq name (car ll))
	   else (setq name (caar ll))
		(push name initsn)
		(push (cadar ll) initsv))
       (if (d-specialp name)
	   then (push name spcs)
	   else (push name locs))))

; cm-progn :: compile a "progn" expression
;
(defun cm-progn nil
  `((lambda nil ,@@(cdr v-form))))

; cm-prog1 :: compile a "prog1" expression
;
(defun cm-prog1 nil
  (let ((gl (d-genlab)))
       `((lambda (,gl) 
		 ,@@(cddr v-form)
		 ,gl)
	 ,(cadr v-form))))

; cm-prog2 :: compile a "prog2" expression
;
(defun cm-prog2 nil
   (let ((gl (d-genlab)))
       `((lambda (,gl)
	     ,(cadr v-form)
	     (setq ,gl ,(caddr v-form))
	     ,@@(cdddr v-form)
	     ,gl)
	 nil)))

;--- cm-progv :: compile a progv form
;  a progv form looks like (progv 'l-vars 'l-inits 'g-exp1 ... 'g-expn)
; l-vars should be a list of variables, l-inits a list of initial forms
; We cannot permit returns and go-s through this form.
;
; we stack a (progv . 0) form on g-locs so that return and go will know
; not to try to go through this form.
;
(defun c-progv nil
   (let ((gl (d-genlab))
	 (g-labs (cons nil g-labs))
	 (g-locs (cons '(progv . 0) g-locs)))
       (d-exp `((lambda (,gl)
		    (prog1 (progn ,@@(cdddr v-form))
			   (internal-unbind-vars ,gl)))
		(internal-bind-vars ,(cadr v-form) ,(caddr v-form))))))

(defun c-internal-bind-vars nil
   (let ((g-locs g-locs)
	 (g-loccnt g-loccnt))
       (d-pushargs (cdr v-form))
       (d-calldirect '_Ibindvars (length (cdr v-form)))))

(defun c-internal-unbind-vars nil
   (let ((g-locs g-locs)
	 (g-loccnt g-loccnt))
       (d-pushargs (cdr v-form))
       (d-calldirect '_Iunbindvars (length (cdr v-form)))))

;--- cc-quote : compile a "quote" expression
; 
; if we are just looking to set the ; cc, we just make sure 
; we set the cc depending on whether the expression quoted is
; nil or not.
(defun cc-quote nil
   (let ((arg (cadr v-form))
	 argloc)
       (if (null g-loc) 
	   then (if (and (null arg) (cdr g-cc))
		    then (e-goto (cdr g-cc))
		 elseif (and arg (car g-cc))
		    then (e-goto (car g-cc))
		 elseif (null g-cc)
		    then (comp-warn "losing the value of this expression "
				    (or v-form)))
	   else (d-move (d-loclit arg nil) g-loc)
		(d-handlecc))))

;--- c-setarg :: set a lexpr's arg
; form is (setarg index value)
;
(defun c-setarg nil
   (if (not (eq 'lexpr g-ftype))
       then (comp-err "setarg only allowed in lexprs"))
   (if (and fl-inter (eq (length (cdr v-form)) 3))	; interlisp setarg
       then (if (not (eq (cadr v-form) (car g-args)))
		then (comp-err "setarg: can only compile local setargs "
			       v-form)
		else (setq v-form (cdr v-form))))
   ; compile index into fixnum-reg, was (d-pushargs (list (cadr v-form)))
   (let ((g-cc) (g-ret)
	 (g-loc '#.fixnum-reg))
       (d-exp (cadr v-form)))
   (let ((g-loc 'reg)
	 (g-cc nil)
	 (g-ret nil))
       (d-exp (caddr v-form)))
   #+(or for-vax for-tahoe)
   (progn
       (e-sub3 `(* -4 #.olbot-reg) '(0 #.fixnum-reg) '#.fixnum-reg)
       (e-move 'r0 '(-8 #.olbot-reg #.fixnum-reg)))
   #+for-68k
   (progn
       (e-sub `(-4 #.olbot-reg) '#.fixnum-reg)
       (e-write3 'lea '(% -8 #.olbot-reg #.fixnum-reg) 'a5)
       (e-move 'd0 '(0 a5))))

;--- cc-stringp :: check for string ness
;
(defun cc-stringp nil
  (d-typesimp (cadr v-form) #.(immed-const 0)))

;--- cc-symbolp :: check for symbolness
;
(defun cc-symbolp nil
  (d-typesimp (cadr v-form) #.(immed-const 1)))

;--- c-return :: compile a "return" statement
;
(defun c-return nil
   ; value is always put in reg
   (let ((g-loc 'reg)
	 g-cc
	 g-ret)
       (d-exp (cadr v-form)))

   ; if we are doing a non local return, compute number of specials to unbind
   ; and locals to pop
   (if (car g-labs)
       then (e-goto (caar g-labs))
       else (do ((loccnt 0)		;; locals
		 (speccnt 0)		;; special
		 (catcherrset 0)		;; catch/errset frames
		 (ll g-labs (cdr ll))
		 (locs g-locs))
		((null ll) (comp-err "return used not within a prog or do"))
		(if (car ll)
		    then  (comp-note g-fname ": non local return used ")
			 ; unbind down to but not including
			 ; this frame.
			 (if (greaterp loccnt 0)
			     then (e-pop loccnt))
			 (if (greaterp speccnt 0)
			     then (e-unshallowbind speccnt))
			 (if (greaterp catcherrset 0)
			     then (comp-note
				      g-fname
				      ": return through a catch or errset"
				      v-form)
				  (do ((i 0 (1+ i)))
				      ((=& catcherrset i))
				      (d-popframe)))
			 (e-goto (caar ll))
			 (return)
		    else ; determine number of locals and special on
			 ; stack for this frame, add to running
			 ; totals
			 (do ()
			     ((dtpr (car locs))
			      (if (eq 'catcherrset (caar locs)) ; catchframe
				  then (incr catcherrset)
			       elseif (eq 'progv (caar locs))
				  then (comp-err "Attempt to 'return' through a progv"))
			      (setq speccnt (+ speccnt (cdar locs))
				    locs (cdr locs)))
			     (incr loccnt)
			     (setq locs (cdr locs)))))))
	 
; c-rplaca :: compile a "rplaca" expression
;
#+(or for-vax for-tahoe)
(defun c-rplaca nil
  (let ((ssimp (d-simple (caddr v-form)))
	(g-ret nil))
       (let ((g-loc (if ssimp then 'reg else 'stack))
	     (g-cc nil))
	    (d-exp (cadr v-form)))
       (if (null ssimp)
	   then (push nil g-locs)
		(incr g-loccnt)
		(let ((g-loc 'r1)
		      (g-cc nil))
		    (d-exp (caddr v-form)))
		(d-move 'unstack 'reg)
		(unpush g-locs)
		(decr g-loccnt)
		(e-move 'r1 '(4 r0))
	   else (e-move (e-cvt ssimp)  '(4 r0)))
       (d-clearreg)))		; cant tell what we are clobbering

#+for-68k
(defun c-rplaca nil
   (let ((ssimp (d-simple (caddr v-form)))
	 (g-ret nil))
       (makecomment `(c-rplaca starting :: v-form = ,v-form))
       (let ((g-loc (if ssimp then 'areg else 'stack))
	     (g-cc nil))
	   (d-exp (cadr v-form)))
       (if (null ssimp)
	   then (push nil g-locs)
		(incr g-loccnt)
		(let ((g-loc 'd1)
		      (g-cc nil))
		    (d-exp (caddr v-form)))
		(d-move 'unstack 'areg)
		(unpush g-locs)
		(decr g-loccnt)
		(e-move 'd1 '(4 a0))
	   else (e-move (e-cvt ssimp)  '(4 a0)))
       (e-move 'a0 'd0)
       (d-clearreg)
       (makecomment `(c-rplaca done))))

; c-rplacd :: compile a "rplacd" expression
;
#+(or for-vax for-tahoe)
(defun c-rplacd nil
  (let ((ssimp (d-simple (caddr v-form)))
	(g-ret nil))
       (let ((g-loc (if ssimp then 'reg else 'stack))
	     (g-cc nil))
	    (d-exp (cadr v-form)))
       (if (null ssimp)
	   then (push nil g-locs)
		(incr g-loccnt)
		(let ((g-loc 'r1)
		      (g-cc nil))
		    (d-exp (caddr v-form)))
		(d-move 'unstack 'reg)
		(unpush g-locs)
		(decr g-loccnt)
		(e-move 'r1 '(0 r0))
	   else (e-move (e-cvt ssimp)  '(0 r0)))
       (d-clearreg)))

#+for-68k
(defun c-rplacd nil
   (let ((ssimp (d-simple (caddr v-form)))
	 (g-ret nil))
       (makecomment `(c-rplacd starting :: v-form = ,v-form))
       (let ((g-loc (if ssimp then 'areg else 'stack))
	     (g-cc nil))
	   (d-exp (cadr v-form)))
       (if (null ssimp)
	   then (push nil g-locs)
		(incr g-loccnt)
		(let ((g-loc 'd1)
		      (g-cc nil))
		    (d-exp (caddr v-form)))
		(d-move 'unstack 'areg)
		(unpush g-locs)
		(decr g-loccnt)
		(e-move 'd1 '(0 a0))
	   else (e-move (e-cvt ssimp) '(0 a0)))
       (e-move 'a0 'd0)
       (d-clearreg)
       (makecomment `(d-rplacd done))))

;--- cc-setq :: compile a "setq" expression
;
(defun cc-setq nil
  (prog nil
  (let (tmp tmp2)
       (if (null (cdr v-form)) 
	    then (d-exp nil)  ; (setq) 
		 (return)
        elseif (oddp (length (cdr v-form)))
	   then (comp-err "wrong number of args to setq "
			  (or v-form))
	elseif (cdddr v-form)		; if multiple setq's
	   then (do ((ll (cdr v-form) (cddr ll))
		     (g-loc)
		     (g-cc nil))
		    ((null (cddr ll)) (setq tmp ll))
		    (setq g-loc (d-locv (car ll)))
		    (d-exp (cadr ll))
		    (d-clearuse (car ll)))
	else (setq tmp (cdr v-form)))

       ; do final setq
       (let ((g-loc (d-locv (car tmp)))
	     (g-cc (if g-loc then nil else g-cc))
	     (g-ret nil))
	    (d-exp (cadr tmp))
	    (d-clearuse (car tmp)))
       (if g-loc
	   then (d-move (setq tmp2 (d-locv (car tmp))) g-loc)
		(if g-cc
		    then #+for-68k (d-cmpnil tmp2)
			 (d-handlecc))))))

; cc-typep :: compile a "typep" expression
; 
; this returns the type of the expression, it is always non nil
;
#+(or for-vax for-tahoe)
(defun cc-typep nil
  (let ((argloc (d-simple (cadr v-form)))
	(g-ret))
       (if (null argloc)
	   then (let ((g-loc 'reg) g-cc)
		    (d-exp (cadr v-form)))
		(setq argloc 'reg))
       (if g-loc
	   then #+for-vax (e-write4 'ashl '($ -9) (e-cvt argloc) 'r0)
	        #+for-tahoe (e-write4 'shar '($ 9) (e-cvt argloc) 'r0)
		(e-write3 'cvtbl "_typetable+1[r0]" 'r0)
		(e-move "_tynames+4[r0]" 'r0)
		(e-move '(0 r0) (e-cvt g-loc)))
       (if (car g-cc) then (e-goto (car g-cc)))))

#+for-68k
(defun cc-typep nil
  (let ((argloc (d-simple (cadr v-form)))
	(g-ret))
       (if (null argloc) 
	   then (let ((g-loc 'reg) g-cc)
		    (d-exp (cadr v-form)))
		(setq argloc 'reg))
       (if g-loc
	   then (e-move (e-cvt argloc) 'd0)
		(e-sub '#.nil-reg 'd0)
		(e-write3 'moveq '($ 9) 'd1)
		(e-write3 'asrl 'd1 'd0)
		(e-write3 'lea '"_typetable+1" 'a5)
		(e-add 'd0 'a5)
		(e-write3 'movb '(0 a5) 'd0)
		(e-write2 'extw 'd0)
		(e-write2 'extl 'd0)
		(e-write3 'asll '($ 2) 'd0)
		(e-write3 'lea "_tynames+4" 'a5)
		(e-add 'd0 'a5)
		(e-move '(0 a5) 'a5)
		(e-move '(0 a5) (e-cvt g-loc)))
       (if (car g-cc) then (e-goto (car g-cc)))))

; cm-symeval :: compile a symeval expression.
; the symbol cell in franz lisp is just the cdr.
;
(defun cm-symeval nil
  `(cdr ,(cadr v-form)))

; c-*throw :: compile a "*throw" expression
;
; the form of *throw is (*throw 'tag 'val) .
; we calculate and stack the value of tag, then calculate val 
; we call Idothrow to do the actual work, and only return if the
; throw failed.
;
(defun c-*throw nil
  (let ((arg2loc (d-simple (caddr v-form)))
	g-cc
	g-ret
	arg1loc)
       ; put on the C runtime stack value to throw, and
       ; tag to throw to.
       (if arg2loc
	   then (if (setq arg1loc (d-simple (cadr v-form)))
		    then (C-push (e-cvt arg2loc))
			 (C-push (e-cvt arg1loc))
		    else (let ((g-loc 'reg))
			     (d-exp (cadr v-form))	; calc tag
			     (C-push (e-cvt arg2loc))
			     (C-push (e-cvt 'reg))))
	   else (let ((g-loc 'stack))
		    (d-exp (cadr v-form))	; calc tag to stack
		    (push nil g-locs)
		    (incr g-loccnt)
		    (setq g-loc 'reg)
		    (d-exp (caddr v-form))	; calc value into reg
		    (C-push (e-cvt 'reg))
		    (C-push (e-cvt 'unstack))
		    (unpush g-locs)
		    (decr g-loccnt)))
       ; now push the type of non local go we are doing, in this case
       ; it is a C_THROW
       (C-push '($ #.C_THROW))
       #+for-vax
       (e-write3 'calls '$3 '_Inonlocalgo)
       #+for-tahoe
       (e-write3 'callf '$16 '_Inonlocalgo)
       #+for-68k
       (e-quick-call '_Inonlocalgo)))

;--- cm-zerop ::  convert zerop to a quick test
; zerop is only allowed on fixnum and flonum arguments.  In both cases,
; if the value of the first 32 bits is zero, then we have a zero.
; thus we can define it as a macro:
#+(or for-vax for-tahoe)
(defun cm-zerop nil
  (cond ((atom (cadr v-form))
	 `(and (null (cdr ,(cadr v-form))) (not (bigp ,(cadr v-form)))))
	(t (let ((gnsy (gensym)))
		`((lambda (,gnsy)
			  (and (null (cdr ,gnsy)) 
				(not (bigp ,gnsy))))
		  ,(cadr v-form))))))

#+for-68k
(defun cm-zerop nil
   (cond ((atom (cadr v-form))
	  `(and (=& 0 ,(cadr v-form))	;was (cdr ,(cadr v-form))
		(not (bigp ,(cadr v-form)))))
	 (t (let ((gnsy (gensym)))
		`((lambda (,gnsy)
		      (and (=& 0 ,gnsy)		;was (cdr ,gnsy)
			   (not (bigp ,gnsy))))
		  ,(cadr v-form))))))
@


1.13
log
@have (setq) return nil.
@
text
@d3 1
a3 1
   "$Header: func.l,v 1.12 83/08/28 17:12:47 layer Exp $")
d276 1
a276 1
   #+for-vax
d349 1
a349 1
#+for-vax
d394 1
a394 1
#+for-vax
d474 1
a474 1
#+for-vax
d483 2
a484 1
	   then (e-write4 'ashl '($ -9) (e-cvt argloc) 'r0)
d558 2
d567 1
a567 1
#+for-vax
@


1.12
log
@lxref everything
@
text
@d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.11 83/08/24 10:58:46 layer Exp $")
d440 1
d442 4
a445 1
       (if (oddp (length (cdr v-form)))
d468 1
a468 1
			 (d-handlecc)))))
@


1.11
log
@typos and formating
@
text
@d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.10 83/08/22 22:57:01 layer Exp $")
a135 1
;.. c-prog
a149 1
;.. c-do, c-prog, d-lambbody
a169 1
;.. c-prog
@


1.10
log
@clean up the code a bit...
@
text
@d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.9 83/08/14 01:48:27 layer Exp $")
d7 1
a7 1
;;;			-[Mon Aug 22 21:40:42 1983 by layer]-
d31 3
a33 2
		(if (car g-cc) then (e-goto (car g-cc))
			       else (e-goto finlab2))
d59 7
a65 6
		(if g-loc then (setq finlab2 (d-genlab))
			       (e-goto finlab2)
			       (e-label finlab)
			       (d-move 'reg g-loc)
			       (e-label finlab2)
			  else (e-label finlab))
d73 7
a79 6
		(if g-loc then (setq finlab2 (d-genlab))
			       (e-goto finlab2)
			       (e-label finlab)
			       (d-move 'reg g-loc)
			       (e-goto (car g-cc))	; result is t
			       (e-label finlab2)))
a81 1

a130 1

d138 3
a140 10
  ; place the local vrbls and prog frame entry on the stack
  (setq g-loccnt (+ g-loccnt (length locs))
	g-locs (nconc locs `((prog . ,(length spcs)) ,@@g-locs)))
  
  ; now bind the specials, if any, to nil
  (if spcs then (e-setupbind)
      (mapc '(lambda (vrb)
		     (e-shallowbind vrb 'Nil))
	    spcs)
      (e-unsetupbind)))
d142 7
d153 10
a162 10
  (do ((count 0 (1+ count)))
      ((dtpr (car g-locs))
       (if (not (zerop (cdar g-locs)))
	   then (e-unshallowbind (cdar g-locs)))
       (cond ((not (zerop count))
	      (e-dropnp count)
	      
	      (setq g-loccnt (- g-loccnt count))))
       (setq g-locs (cdr g-locs)))
      (setq g-locs (cdr g-locs))))
a163 1

d174 12
a185 11
  (do ((ll lst (cdr ll))
       (locs) (spcs) (init) (initsv) (initsn) 
         (name))
      ((null ll) (cons spcs (cons locs (cons initsv initsn))))
      (if (atom (car ll)) then (setq name (car ll))
			  else (setq name (caar ll))
			       (Push initsn name)
			       (Push initsv (cadar ll)))
      (if (d-specialp name)
	  then (Push spcs name)
	  else (Push locs name))))
d187 1
a187 1
; cm-progn :: compile a "progn" expression			= cm-progn =
d192 1
a192 2

; cm-prog1 :: compile a "prog1" expression			= cm-prog1 =
d201 1
a201 2

; cm-prog2 :: compile a "prog2" expression			= cm-prog2 =
d204 6
a209 5
  (let ((gl (d-genlab)))
       `((lambda (,gl) ,(cadr v-form)
		       (setq ,gl ,(caddr v-form))
		       ,@@(cdddr v-form)
		       ,gl)
d212 1
a212 2

;--- cm-progv :: compile a progv form				= cm-progv =
d224 4
a227 4
      (d-exp `((lambda (,gl)
		  (prog1 (progn ,@@(cdddr v-form))
			 (internal-unbind-vars ,gl)))
	       (internal-bind-vars ,(cadr v-form) ,(caddr v-form))))))
d232 2
a233 2
      (d-pushargs (cdr v-form))
      (d-calldirect '_Ibindvars (length (cdr v-form)))))
d238 2
a239 2
      (d-pushargs (cdr v-form))
      (d-calldirect '_Iunbindvars (length (cdr v-form)))))
d247 2
a248 2
  (let ((arg (cadr v-form))
	argloc)
d257 2
a258 2
	else (d-move (d-loclit arg nil) g-loc)
	     (d-handlecc))))
d302 4
a305 4
  ; value is always put in reg
  (let ((g-loc 'reg)
	g-cc
	g-ret)
d308 41
a348 40
  ; if we are doing a non local return, compute number of specials to unbind
  ; and locals to pop
  (if (car g-labs) then (e-goto (caar g-labs))
      else (do ((loccnt 0)		;; locals
		(speccnt 0)		;; special
		(catcherrset 0)		;; catch/errset frames
		(ll g-labs (cdr ll))
		(locs g-locs))
	       ((null ll) (comp-err "return used not within a prog or do"))
	       (if (car ll)
		  then  (comp-note g-fname ": non local return used ")
		       ; unbind down to but not including
		       ; this frame.
		       (if (greaterp loccnt 0)
			  then (e-pop loccnt))
		       (if (greaterp speccnt 0)
			  then (e-unshallowbind speccnt))
		       (if (greaterp catcherrset 0)
			  then (comp-note g-fname
					  ": return through a catch or errset"
					  v-form)
			       (do ((i 0 (1+ i)))
				   ((=& catcherrset i))
				   (d-popframe)))
		       (e-goto (caar ll))
		       (return)
		  else ; determine number of locals and special on
		       ; stack for this frame, add to running
		       ; totals
		       (do ()
			   ((dtpr (car locs))
			    (if (eq 'catcherrset (caar locs)) ; catchframe
			       then (incr catcherrset)
			     elseif (eq 'progv (caar locs))
			       then (comp-err "Attempt to 'return' through a progv"))
			    (setq speccnt (+ speccnt (cdar locs))
				  locs (cdr locs)))
			   (incr loccnt)
			   (setq locs (cdr locs)))))))
					     
d359 10
a368 9
       (if (null ssimp) then (Push g-locs nil)
	                     (incr g-loccnt)
			     (let ((g-loc 'r1)
				   (g-cc nil))
				  (d-exp (caddr v-form)))
	                     (d-move 'unstack 'reg)
			     (unpush g-locs)
			     (decr g-loccnt)
			     (e-move 'r1 '(4 r0))
d381 1
a381 1
	   then (Push g-locs nil)
d404 10
a413 9
       (if (null ssimp) then (Push g-locs nil)
	                     (incr g-loccnt)
			     (let ((g-loc 'r1)
				   (g-cc nil))
				  (d-exp (caddr v-form)))
	                     (d-move 'unstack 'reg)
			     (unpush g-locs)
			     (decr g-loccnt)
			     (e-move 'r1 '(0 r0))
d426 1
a426 1
	   then (Push g-locs nil)
d477 9
a485 7
       (if (null argloc) then (let ((g-loc 'reg) g-cc)
				   (d-exp (cadr v-form)))
			      (setq argloc 'reg))
       (if g-loc then (e-write4 'ashl '($ -9) (e-cvt argloc) 'r0)
	              (e-write3 'cvtbl "_typetable+1[r0]" 'r0)
		      (e-move "_tynames+4[r0]" 'r0)
		      (e-move '(0 r0) (e-cvt g-loc)))
d492 19
a510 17
       (if (null argloc) then (let ((g-loc 'reg) g-cc)
				   (d-exp (cadr v-form)))
			      (setq argloc 'reg))
       (if g-loc then (e-move (e-cvt argloc) 'd0)
		      (e-subl '#.nil-reg 'd0)
		      (e-write3 'moveq '($ 9) 'd1)
		      (e-write3 'asrl 'd1 'd0)
		      (e-write3 'lea '"_typetable+1" 'a5)
		      (e-add 'd0 'a5)
		      (e-write3 'movb '(0 a5) 'd0)
		      (e-write2 'extw 'd0)
		      (e-write2 'extl 'd0)
		      (e-write3 'asll '($ 2) 'd0)
		      (e-write3 'lea "_tynames+4" 'a5)
		      (e-add 'd0 'a5)
		      (e-move '(0 a5) 'a5)
		      (e-move '(0 a5) (e-cvt g-loc)))
a512 1

d519 1
a519 2

; c-*throw :: compile a "*throw" expression			=c-*throw =
a525 1
#+for-vax
d531 2
a532 3
       ; put on the C runtime stack 
       ;  value to throw,
       ;  tag to throw to
d543 1
a543 1
		    (Push g-locs nil)
d546 1
a546 1
		    (d-exp (caddr v-form))	; calc value into r0
d554 3
a556 33
       ; never returns
       (e-write3 'calls '$3 '_Inonlocalgo)))

#+for-68k
(defun c-*throw nil
  (let ((arg2loc (d-simple (caddr v-form)))
	g-cc
	g-ret
	arg1loc)
       ; put on the C runtime stack 
       ;  value to throw,
       ;  tag to throw to
       (if arg2loc
	   then (if (setq arg1loc (d-simple (cadr v-form)))
		    then (C-push (e-cvt arg2loc))
			 (C-push (e-cvt arg1loc))
		    else (let ((g-loc 'reg))
			     (d-exp (cadr v-form))	; calc tag
			     (C-push (e-cvt arg2loc))
			     (C-push (e-cvt 'reg))))
	   else (let ((g-loc 'stack))
		    (d-exp (cadr v-form))	; calc tag to stack
		    (Push g-locs nil)
		    (incr g-loccnt)
		    (setq g-loc 'reg)
		    (d-exp (caddr v-form))	; calc value into d0
		    (C-push (e-cvt 'reg))
		    (C-push (e-cvt 'unstack))
		    (unpush g-locs)
		    (decr g-loccnt)))
       ; now push the type of non local go we are doing, in this case
       ; it is a C_THROW
       (C-push '($ #.C_THROW))
@


1.9
log
@misc stuff
@
text
@d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.8 83/08/12 02:47:50 layer Exp $")
d7 1
a7 1
;;;			-[Sun Aug 14 01:36:24 1983 by layer]-
d282 1
a282 1
       (e-write4 'subl3 `(* -4 #.olbot-reg) '(0 #.fixnum-reg) '#.fixnum-reg)
d286 1
a286 1
       (e-write3 'subl `(-4 #.olbot-reg) '#.fixnum-reg)
d492 1
a492 1
		      (e-write3 'subl '#.nil-reg 'd0)
d496 1
a496 1
		      (e-write3 'addl 'd0 'a5)
d502 1
a502 1
		      (e-write3 'addl 'd0 'a5)
d533 2
a534 2
		    then (e-Cstack (e-cvt arg2loc))
			 (e-Cstack (e-cvt arg1loc))
d537 2
a538 2
			     (e-Cstack (e-cvt arg2loc))
			     (e-Cstack (e-cvt 'reg))))
d545 2
a546 2
		    (e-Cstack (e-cvt 'reg))
		    (e-Cstack (e-cvt 'unstack))
d551 1
a551 1
       (e-Cstack '($ #.C_THROW))
d566 2
a567 2
		    then (e-Cstack (e-cvt arg2loc))
			 (e-Cstack (e-cvt arg1loc))
d570 2
a571 2
			     (e-Cstack (e-cvt arg2loc))
			     (e-Cstack (e-cvt 'reg))))
d578 2
a579 2
		    (e-Cstack (e-cvt 'reg))
		    (e-Cstack (e-cvt 'unstack))
d584 1
a584 1
       (e-Cstack '($ #.C_THROW))
@


1.8
log
@New lexpr stuff for both/reg for 68k
@
text
@d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.7 83/08/04 01:41:08 layer Exp $")
d7 1
a7 1
;;;			-[Thu Aug 11 23:52:18 1983 by layer]-
d137 10
a147 12

	; place the local vrbls and prog frame entry on the stack
	(setq g-loccnt (+ g-loccnt (length locs))
	      g-locs (nconc locs `((prog . ,(length spcs)) ,@@g-locs)))
	 
	; now bind the specials, if any, to nil
	(if spcs then (e-setupbind)
	    	      (mapc '(lambda (vrb)
				     (e-shallowbind vrb 'Nil))
			    spcs)
	              (e-unsetupbind)))

d283 1
a283 1
       (e-write3 'movl 'r0 '(-8 #.olbot-reg #.fixnum-reg)))
d288 1
a288 1
       (e-write3 'movl 'd0 '(0 a5))))
d480 2
a481 2
		      (e-write3 'movl "_tynames+4[r0]" 'r0)
		      (e-write3 'movl '(0 r0) (e-cvt g-loc)))
d491 1
a491 1
       (if g-loc then (e-write3 'movl (e-cvt argloc) 'd0)
d503 2
a504 2
		      (e-write3 'movl '(0 a5) 'a5)
		      (e-write3 'movl '(0 a5) (e-cvt g-loc)))
d531 18
a548 17
       (if arg2loc then (if (setq arg1loc (d-simple (cadr v-form)))
			    then (e-write2 'pushl (e-cvt arg2loc))
				 (e-write2 'pushl (e-cvt arg1loc))
			    else (let ((g-loc 'reg))
				      (d-exp (cadr v-form))	; calc tag
				      (e-write2 'pushl (e-cvt arg2loc))
				      (e-write2 'pushl (e-cvt 'reg))))
		   else (let ((g-loc 'stack))
			     (d-exp (cadr v-form))	; calc tag to stack
			     (Push g-locs nil)
			     (incr g-loccnt)
			     (setq g-loc 'reg)	
			     (d-exp (caddr v-form))	; calc value into r0
			     (e-write2 'pushl (e-cvt 'reg))
			     (e-write2 'pushl (e-cvt 'unstack))
			     (unpush g-locs)
			     (decr g-loccnt)))
d551 1
a551 1
       (e-write2 'pushl '#.(concat '$ C_THROW))
d564 18
a581 17
       (if arg2loc then (if (setq arg1loc (d-simple (cadr v-form)))
			    then (e-write3 'movl (e-cvt arg2loc) "sp@@-")
				 (e-write3 'movl (e-cvt arg1loc) "sp@@-")
			    else (let ((g-loc 'reg))
				      (d-exp (cadr v-form))	; calc tag
				      (e-write3 'movl (e-cvt arg2loc) "sp@@-")
				      (e-write3 'movl (e-cvt 'reg) "sp@@-")))
		   else (let ((g-loc 'stack))
			     (d-exp (cadr v-form))	; calc tag to stack
			     (Push g-locs nil)
			     (incr g-loccnt)
			     (setq g-loc 'reg)	
			     (d-exp (caddr v-form))	; calc value into d0
			     (e-write3 'movl (e-cvt 'reg) "sp@@-")
			     (e-write3 'movl (e-cvt 'unstack) "sp@@-")
			     (unpush g-locs)
			     (decr g-loccnt)))
d584 1
a584 1
       (e-write3 'movl '#.(concat "#" C_THROW) "sp@@-")
@


1.7
log
@cleanup time
@
text
@d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.6 83/07/30 15:34:04 layer Exp $")
d7 1
a7 1
;;;			-[Wed Aug  3 17:39:48 1983 by layer]-
d18 1
a18 1
  (If (null g-loc)
d31 1
a31 1
		(If (car g-cc) then (e-goto (car g-cc))
d36 1
a36 1
		(If (cdr g-cc) then (e-goto (cdr g-cc)))
d50 2
a51 2
	(exps (If (cdr v-form) thenret else '(nil)))) ; (or) => nil
       (If (null (car g-cc))
d53 1
a53 1
			    (g-loc (If g-loc then 'reg))
d58 1
a58 1
		(If g-loc then (setq finlab2 (d-genlab))
d64 1
a64 1
	   else (If (null g-loc) then (setq finlab (car g-cc)))
d66 1
a66 1
			    (g-loc (If g-loc then 'reg))
d71 1
a71 1
		(If g-loc then (setq finlab2 (d-genlab))
d107 2
a108 2
	     (If (and (car ll) (symbolp (car ll)))
		then (If (assq (car ll) labs)
d117 1
a117 1
	     (If (or (null (car ll)) (not (symbolp (car ll))))
d123 1
a123 1
      (If (or g-cc g-loc) then (d-move 'Nil 'reg))
d144 1
a144 1
	(If spcs then (e-setupbind)
d156 1
a156 1
       (If (not (zerop (cdar g-locs)))
d180 1
a180 1
      (If (atom (car ll)) then (setq name (car ll))
d184 1
a184 1
      (If (d-specialp name)
d252 2
a253 2
       (If (null g-loc) 
	   then (If (and (null arg) (cdr g-cc))
a262 1

a265 1
#+for-vax
d267 1
a267 21
  (If (not (eq 'lexpr g-ftype))
      then (comp-err "setarg only allowed in lexprs"))
  (If (and fl-inter (eq (length (cdr v-form)) 3))	; interlisp setarg
      then (If (not (eq (cadr v-form) (car g-args)))
	       then (comp-err "setarg: can only compile local setargs " v-form)
	       else (setq v-form (cdr v-form))))
   (d-pushargs (list (cadr v-form)))    ; stack index
   (let ((g-loc 'reg)
	 (g-cc nil)
	 (g-ret nil))
	(d-exp (caddr v-form)))
   (d-clearreg 'r1)			; indicate we are clobbering r1
   (e-write3 'movl `(* -4 #.np-reg) 'r1)	; actual number to r1
   (e-write3 'movl 'r0 "*-4(fp)[r1]")	; store value in
   (e-pop 1)
   (unpush g-locs)
   (decr g-loccnt))

#+for-68k
(defun c-setarg nil
   (If (not (eq 'lexpr g-ftype))
d269 2
a270 2
   (If (and fl-inter (eq (length (cdr v-form)) 3))	; interlisp setarg
       then (If (not (eq (cadr v-form) (car g-args)))
d274 5
a278 2
   (d-pushargs (list (cadr v-form)))    ; stack index
   (let ((g-loc 'd0)
d282 9
a290 7
   (e-write3 'movl `(-4 #.np-reg) 'd1)		; actual number to d1
   (e-write3 'subl `(-4 #.olbot-reg) 'd1)
   (e-write3 'lea (concat '#.olbot-reg "@@(-8,d1:L)") 'a5)
   (e-write3 'movl 'd0 '(0 a5))			; store value in
   (e-pop 1)
   (unpush g-locs)
   (decr g-loccnt))
d292 1
a292 1
;--- cc-stringp :: check for string ness			= cc-stringp =
d297 1
a297 2

;--- cc-symbolp :: check for symbolness				= cc-symbolp =
d302 1
a302 3


;--- c-return :: compile a "return" statement			= c-return =
d313 1
a313 1
  (If (car g-labs) then (e-goto (caar g-labs))
d320 1
a320 1
	       (If (car ll)
d324 1
a324 1
		       (If (greaterp loccnt 0)
d326 1
a326 1
		       (If (greaterp speccnt 0)
d328 1
a328 1
		       (If (greaterp catcherrset 0)
d342 1
a342 1
			    (If (eq 'catcherrset (caar locs)) ; catchframe
d358 1
a358 1
       (let ((g-loc (If ssimp then 'reg else 'stack))
d361 1
a361 1
       (If (null ssimp) then (Push g-locs nil)
d378 1
a378 1
       (let ((g-loc (If ssimp then 'areg else 'stack))
d381 1
a381 1
       (If (null ssimp)
d402 1
a402 1
       (let ((g-loc (If ssimp then 'reg else 'stack))
d405 1
a405 1
       (If (null ssimp) then (Push g-locs nil)
d422 1
a422 1
       (let ((g-loc (If ssimp then 'areg else 'stack))
d425 1
a425 1
       (If (null ssimp)
d444 1
a444 1
       (If (oddp (length (cdr v-form)))
d459 1
a459 1
	     (g-cc (If g-loc then nil else g-cc))
d463 1
a463 1
       (If g-loc
d465 1
a465 1
		(If g-cc
a468 2


d477 1
a477 1
       (If (null argloc) then (let ((g-loc 'reg) g-cc)
d480 1
a480 1
       (If g-loc then (e-write4 'ashl '$-9 (e-cvt argloc) 'r0)
d483 2
a484 2
		      (e-write3 'movl "(r0)" (e-cvt g-loc)))
       (If (car g-cc) then (e-goto (car g-cc)))))
d490 1
a490 1
       (If (null argloc) then (let ((g-loc 'reg) g-cc)
d493 1
a493 1
       (If g-loc then (e-write3 'movl (e-cvt argloc) 'd0)
d495 1
a495 1
		      (e-write3 'moveq "#9" 'd1)
d499 1
a499 1
		      (e-write3 'movb '"a5@@" 'd0)
d502 1
a502 1
		      (e-write3 'asll '"#2" 'd0)
d505 3
a507 3
		      (e-write3 'movl "a5@@" 'a5)
		      (e-write3 'movl "a5@@" (e-cvt g-loc)))
       (If (car g-cc) then (e-goto (car g-cc)))))
d533 1
a533 1
       (If arg2loc then (If (setq arg1loc (d-simple (cadr v-form)))
d553 2
a554 2
       (e-write3 'calls '$3 '_Inonlocalgo) ; never returns
       ))
d565 1
a565 1
       (If arg2loc then (If (setq arg1loc (d-simple (cadr v-form)))
d585 1
a585 1
       (e-write2 'jbsr '_Inonlocalgo)))
@


1.6
log
@open code vset, and move things around
@
text
@d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.5 83/04/08 18:43:54 layer Exp $")
d7 1
a7 1
;;;			-[Thu Apr  7 21:01:02 1983 by layer]-
d14 1
a14 1
; cc-not :: compile a "not" or "null" expression		= cc-not =
d39 1
a39 2

;--- cc-numberp :: check for numberness				= cc-numberp =
d45 1
a45 2

;--- cc-or :: compile an "or" expression			= cc-or =
d77 1
a77 1
       (d-clearreg)))  ; we are not sure of the state due to possible branches.
d80 1
a80 1
;--- c-prog :: compile a "prog" expression			= c-prog =
d281 1
a281 1
   (e-write3 'movl `(* -4 #.Np-reg) 'r1)	; actual number to r1
d301 3
a303 3
   (e-write3 'movl `(-4 #.Np-reg) 'd1)		; actual number to d1
   (e-write3 'subl `(-4 #.oLbot-reg) 'd1)
   (e-write3 'lea (concat '#.oLbot-reg "@@(-8,d1:L)") 'a5)
d607 1
a607 2
       (e-write2 'jbsr '_Inonlocalgo) ; never returns
       ))
a608 2

   
@


1.5
log
@problems with cmp on the 68k (reverse of vax)
@
text
@d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.4 83/04/06 15:20:39 layer Exp $")
a637 41


;;; --- vector access functions

;--- cc-vectorp :: check for vectorness
;
#+for-vax
(defun cc-vectorp nil
  (d-typesimp (cadr v-form) #.(immed-const 18)))

;--- cc-vectorip :: check for vectoriness
;
#+for-vax
(defun cc-vectorip nil
  (d-typesimp (cadr v-form) #.(immed-const 19)))

;--- c-vsize :: extract vsize
;
#+for-vax
(defun c-vsize nil
   (d-vectorsize (cadr v-form) '2))

#+for-vax
(defun c-vsize-byte nil
   (d-vectorsize (cadr v-form) '0))

#+for-vax
(defun c-vsize-word nil
   (d-vectorsize (cadr v-form) '1))

#+for-vax
(defun d-vectorsize (form shift)
   (let ((g-loc 'reg)
	 g-cc
	 g-ret)
      (d-exp form))
   ; get size into r5 for fixnum boxing
   (if (zerop shift)
      then (e-write3 'movl "-8(r0)" "r5")
      else (e-write4 'ashl (concat '$- shift) "-8(r0)" "r5"))
   (e-write2 'jsb '_qnewint))
@


1.4
log
@forgot all the changes...
@
text
@d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.3 83/03/23 20:49:30 layer Exp $")
d7 1
a7 1
;;;			-[Fri Mar 25 14:34:45 1983 by layer]-
d485 5
a489 4
       (If g-loc then (d-move (d-locv (car tmp)) g-loc)
		      (If g-cc
			 then #+for-68k (d-cmp tmp2 'Nil)
			      (d-handlecc)))))
@


1.3
log
@merge of 68k and vax versions
@
text
@d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.2 83/03/03 12:15:01 jkf Exp $")
d7 1
a7 1
;;;			-[Tue Mar 22 15:09:49 1983 by layer]-
d611 30
d643 1
d649 1
a677 26

   
;--- cm-zerop ::  convert zerop to a quick test
; zerop is only allowed on fixnum and flonum arguments.  In both cases,
; if the value of the first 32 bits is zero, then we have a zero.
; thus we can define it as a macro:
#+for-vax
(defun cm-zerop nil
  (cond ((atom (cadr v-form))
	 `(and (null (cdr ,(cadr v-form))) (not (bigp ,(cadr v-form)))))
	(t (let ((gnsy (gensym)))
		`((lambda (,gnsy)
			  (and (null (cdr ,gnsy)) 
				(not (bigp ,gnsy))))
		  ,(cadr v-form))))))

#+for-68k
(defun cm-zerop nil
   (cond ((atom (cadr v-form))
	  `(and (=& 0 ,(cadr v-form))	;was (cdr ,(cadr v-form))
		(not (bigp ,(cadr v-form)))))
	 (t (let ((gnsy (gensym)))
		`((lambda (,gnsy)
		      (and (=& 0 ,gnsy)		;was (cdr ,gnsy)
			   (not (bigp ,gnsy))))
		  ,(cadr v-form))))))
@


1.2
log
@added simple vector functions
@
text
@d1 1
a1 1
(include-if (null (get 'chead 'version)) "chead.l")
d3 1
a3 1
   "$Header: /na/franz/liszt/RCS/func.l,v 1.1 83/01/26 12:15:33 jkf Exp $")
d7 1
a7 1
;;;			-[Thu Feb 10 21:25:55 1983 by jkf]-
d44 1
a44 1
	       '#.(concat '$ (plus 1_2 1_4 1_9))))
d246 1
a246 1
;--- cc-quote : compile a "quote" expression			= cc-quote =
d266 1
a266 1
;--- c-setarg :: set a lexpr's arg				= cc-setarg  =
d269 1
d289 22
d314 1
a314 1
  (d-typesimp (cadr v-form) '$0))
d320 1
a320 1
  (d-typesimp (cadr v-form) '$1))
d327 1
a327 1
  ; value is always put in r0
d374 1
a374 1
; c-rplaca :: compile a "rplaca" expression			= c-rplaca =
d376 1
d395 22
d418 1
a418 1
; c-rplacd :: compile a "rplacd" expression			= c-rplacd =
d420 1
d439 22
a460 1
; c-set :: compile a "set" expression				= c-set =
d462 1
a462 2

;--- cc-setq :: compile a "setq" expression			= c-setq = 
d465 1
a465 1
  (let (tmp)
d486 3
a488 1
		      (If g-cc then (d-handlecc)))))
d492 1
a492 1
; cc-typep :: compile a "typep" expression			= cc-typep =
d496 1
d509 22
d547 1
d579 32
d614 1
a614 1
  (d-typesimp (cadr v-form) '$18))
d619 1
a619 1
  (d-typesimp (cadr v-form) '$19))
d623 1
d627 1
d631 1
d635 1
d648 1
a648 1
;--- cm-zerop ::  convert zerop to a quick test			= cm-zerop =
d652 1
d662 10
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
   "$Header$")
d7 1
a7 1
;;;			-[Wed Jan 26 12:08:58 1983 by jkf]-
d486 4
d491 4
d496 23
@
