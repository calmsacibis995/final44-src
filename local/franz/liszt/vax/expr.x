(File ../expr.l)
(d-dotailrecursion lambda e-goto e-add3 + |1-| list bigp not zerop * e-sub3 e-write3 e-sub e-write4 e-move d-pushargs let length terpri niceprint patom comp-msg progn comp-note cons makecomment cdr |1+| setq incr cdar greaterp caar quote or car dtpr return do eq and null cond if prog)
(d-bcdcall lambda e-move * cons quote e-write3 cond if)
(d-calldirect lambda e-move * cons quote e-write3 cond if)
(d-calltran lambda d-tranloc concat e-move * cons quote e-write3 cond if)
(d-callbig lambda d-clearreg *throw throw |1+| terpri or niceprint patom comp-msg progn comp-err putprop d-calltran d-bcdcall cdr - length nthcdr car e-write2 e-quick-call d-pushargs d-dotailrecursion cond if quote list cons setq forcecomment get let)
(d-cxxr lambda cons or return null setq cdr do car quote eq cond if explodec let)
(d-pushargs lambda cdr |1+| incr cons setq setf push car d-exp null quote do cond if)
(d-argcheckit lambda greaterp > cdr comp-warn *throw throw |1+| setq terpri terpr difference niceprint patom comp-msg progn comp-err eq lessp < car and cond if)
(d-argnumchk lambda d-argcheckit cond if cdr length quote get car let)
(d-exps lambda car cdr null do d-exp)
(d-exp lambda comp-warn c-lambexp *throw throw |1+| terpri niceprint patom comp-msg progn comp-err d-handlearrayref list d-callbig cc-cxxr length d-argcheckit d-cxxr or Internal-bcdcall getdisc bcdp cxr getd symbolp funcall d-argnumchk cdr d-allfixnumargs equal apply memq d-functyp putprop cons Push get not and go cadr eq car return d-handlecc d-move e-cvt quote e-write2 e-tst d-tst d-cmpnil null d-loc setq atom cond if prog)
