(File ../funb.l)
(cc-memq lambda e-goto e-write3 e-cmp e-label e-write2 e-tst d-genlab car null |1-| decr cdr unpush e-move L-pop |1+| incr cons setq setf push d-exp d-move quote d-clearreg cond if caddr cadr d-simple let)
(cm-mapcon lambda cdr quote d-mapconvert)
(cm-maplist lambda cdr quote d-mapconvert)
(cm-map lambda cdr d-mapconvert)
(cm-mapcan lambda cdr quote d-mapconvert)
(cm-mapcar lambda cdr quote d-mapconvert)
(cm-mapc lambda cdr quote d-mapconvert)
(d-mapconvert lambda return eq if caar cadr append member not d-macroexpand atom nreverse mapcar car list or cond cons null cdr liszt-internal-do maplist reverse quote gensym setq prog)
(c-list lambda - nthcdr |1-| e-cvt e-move L-push >& > d-clearreg e-quick-call max do e-write2 d-pushargs return d-move bigp not null and zerop if quote cons cond makecomment cdr length setq prog)
(d-scanfordecls lambda |1-| cdr setq cdar apply caar quote car dtpr and cond eq =& = do)
(d-bindlrec lambda quote list cons Push rplaca not cadr rplacd |1-| d-bindlrec cdr |1+| setq car d-specialp let cond if)
(d-bindlamb lambda e-unsetupbind cdr e-shallowbind car null setq liszt-internal-do mapc e-setupbind cond if reverse d-bindlrec let)
(d-lambbody lambda d-unbind car cdr null do d-exp d-clearreg cadr d-bindlamb cddr d-scanfordecls let)
(c-lambexp lambda d-clearreg car d-lambbody cdr d-pushargs cons quote or cond if let)
(cc-ignore lambda)
(c-go lambda + incr quote dtpr e-goto d-popframe =& e-unshallowbind greaterp e-pop comp-note not cdr return cadr caar eq cdar car cond if *throw throw |1+| setq terpri or niceprint patom comp-msg progn comp-err null do)
(cm-getdisc lambda cadr quote list)
(cm-getdata lambda cadr quote list)
(cm-getd lambda cadr quote list)
(cm-getaux lambda cadr quote list)
(cm-getaccess lambda cadr quote list)
(c-get lambda - cddr d-clearreg quote e-write2 e-quick-call d-pushargs *throw throw |1+| setq terpri niceprint patom comp-msg progn comp-err cdr length eq not cond if)
(cc-function lambda cons Push add1 concat car memq dtpr and quote list d-exp symbolp cadr let *throw throw |1+| setq terpri niceprint patom comp-msg progn comp-err cddr cdr null or cond if)
(c-Internal-bcdcall lambda quote d-calltran d-bcdcall cond caddr cadr let)
(c-funcall lambda cons list quote d-exp |1-| nthcdr rplaca d-pushargs length let *throw throw |1+| setq terpri niceprint patom comp-msg progn comp-err cdr null cond if)
(cc-floatp lambda cadr d-typesimp)
(cc-fixp lambda quote cadr d-typecmplx)
(cc-offset-cxr lambda d-supercxr)
(c-internal-fixnum-box lambda e-write2 e-call-qnewint cadr d-exp quote let)
(cm-fixnum-cxr lambda cdr append cons quote list)
(c-errset lambda d-clearreg cdr unpush d-popframe e-quick-call d-move cadr e-label e-cvt e-move e-write2 e-tst cons setq setf push d-loclit d-pushframe caddr cddr cond if d-exp d-genlab quote let)
(cc-equal lambda - cddr car e-dropnp e-writel setq e-goto d-move cond if e-gotot e-cvt e-write2 e-tst d-clearreg d-calltran e-gotonil quote e-write3 e-cmp cdr d-pushargs d-genlab let)
(cc-eq lambda d-invert |1-| decr cdr |1+| incr cons setf push d-exp e-cvt quote e-write3 e-cmp d-cmp d-simple setq cond if caddr cadr let)
(cc-dtpr lambda cadr d-typesimp)
(d-olddo-to-newdo lambda cddddr append cadddr caddr cadr car list quote cons)
(c-do lambda d-unbind |1-| decr d-locv caddar cddar dtpr cdar assoc not or caar e-goto d-move d-exps copy d-exp e-label d-clearreg Push symbolp do d-bindlamb nreverse car null liszt-internal-do mapcar d-pushargs d-scanfordecls cdddr caddr setf push cdr d-olddo-to-newdo atom cadr and cond if d-genlab quote cons setq forcecomment let)
(c-declare lambda)
