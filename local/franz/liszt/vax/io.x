(File ../io.l)
(d-printdocstuff lambda cdr car null do quote status terpr concat patom sfilewrite)
(e-write5 lambda e-docomment e-cvtas * list quote e-write3 e-sub setq let em-checknpdrop patom sfilewrite cond if em-checkskip)
(e-write4 lambda e-docomment e-cvtas * list quote e-write3 e-sub setq let em-checknpdrop patom sfilewrite cond if em-checkskip)
(e-write3 lambda e-docomment e-cvtas * list quote e-write3 e-sub setq let em-checknpdrop patom sfilewrite cond if em-checkskip)
(e-write2 lambda e-docomment e-cvtas * list quote e-write3 e-sub setq let em-checknpdrop patom sfilewrite cond if em-checkskip)
(e-write1 lambda e-docomment * list quote e-write3 e-sub setq let em-checknpdrop patom sfilewrite cond if em-checkskip)
(e-writel lambda e-docomment patom sfilewrite * list quote e-write3 e-sub let cond if em-checknpdrop setq)
(e-return lambda quote e-write1 setq)
(e-jump lambda e-write2 * list quote e-write3 e-sub setq let cond if em-checknpdrop)
(e-dropnp lambda cdr + setq not cond if)
(e-unshallowbind lambda list e-write4 e-sub3 |1+| + quote * cons e-move greaterp do e-setupbind)
(e-shallowbind lambda d-move cdr append cons quote e-cvt e-move d-loclit let)
(e-unsetupbind lambda quote e-move)
(e-setupbind lambda quote e-move)
(e-pushnil lambda |1-| equal - setq quote e-write2 >& cond if bigp not cdr null and zerop do)
(e-pop lambda e-dropnp greaterp cond if)
(e-label lambda e-writel setq)
(e-gotot lambda e-write2)
(e-gotonil lambda e-write2)
(e-goto lambda e-jump)
(e-docomment lambda setq terpr cdr eq tyo car exploden patom sfilewrite null nreverse do cond if)
(e-cvtas lambda + concat numberp cdr caddr list setq cadr car quote eq patom sfilewrite atom cond if)
(e-uncvt lambda list or |1-| cdr setq cadr equal and do car quote eq atom cond if)
(e-cvt lambda comp-warn *throw throw |1+| terpri niceprint patom comp-msg progn comp-err list cadr |1-| cdr * cons car caseq dtpr symbolp atom or d-loclit e-cvt setq quote eq cond if)
(d-printautorun lambda sfilewrite close eq read do *throw throw |1+| terpri niceprint patom comp-msg progn comp-err infile errset null cond if concat setq quote setsyntax makereadtable let)
(d-asciiout lambda |1-| or eq difference ascii concat min quote patom sfilewrite greaterp cond if bigp not cdr and zerop length car explode setq null do)
(d-bindtab lambda caddr cadr eq cons liszt-internal-do mapcar d-asciiout e-write1 *throw throw |1+| terpri car niceprint patom comp-msg comp-err assoc cdr quote caar memq cond if null nreverse do length e-write2 progn e-writel setq)
(d-fini lambda e-return e-write1 quote e-move C-pop cond if)
(d-prelude lambda L-push e-cvt e-move null eq e-quick-call e-writel cdr * cons e-write3 e-write2 C-push cond if quote let)
