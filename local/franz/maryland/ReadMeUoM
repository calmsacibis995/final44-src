INTRODUCTION
------------

This tape contains various hacks that have been implemented at the
University of Maryland in Franz Lisp.  There is an implementation
of flavors based on MIT's flavors package which has been used
successfully in several large systems at the University of Maryland.
There is also a production system called YAPS which is similar to
OPS5 but allows facts to be arbitrary lisp expressions instead of
restricting them to be shallow lists and allows arbitrary tests to
appear on the lhs's of productions instead of restricting them to
equality and arithmetic comparisons between no more than two
variables.

In addition to flavors and YAPS, there are various lisp
functions which are defined and used by these packages.  These
include a toplevel called userexec which was influenced by the
INTERLISP toplevel and contains many of the history mechanisms (but
not UNDO).  There is also a lispbreak package which is an error
handler which calls userexec allowing the user access to the
mechanisms provided by userexec during an error break as well as
providing some useful error processing commands.  (The lispbreak
function is called from both flavors and yaps and is used as the
error manager.  If you don't prefer to use lispbreak and userexec,
this is possible with only slight modification of the code.)  Among
the other functions are a for looping macro based on the INTERLISP
for, a selectq macro, and a msg macro.



MAKING YOUR OWN VERSION OF MARYLAND FRANZ LISP
----------------------------------------------

This section explains how to make a lisp which contains the complete
U of Maryland lisp environment.  First, edit the files Makefile,
buildlisp.l and load-liszt changing the directory references to
whatever is appropriate at your site.  Then, you can follow the
directions in Part 1, Part 2, or Part 3 to create the environment.
Part 1 explains how you can add the U of M code to your lisp library
directory and bring up a lisp from tlisp (which just contains the c
code kernal code).  Part 2 explains what to do if you don't have
Opus 38, and Part 3 explains how you can bring up a version of U of M
lisp on top of an existing lisp.  If you wish to use just one package,
(eg flavors) see the next section.  That section describes the files
on this tape and how they can be used as stand alone packages.


1. These files are meant to live in the lisp library directory, usually
/usr/lisp/lib.  If you have Opus 38, (Maryland has 38.26) you may
simply add these files to your library directory replacing the
Makefile and buildlisp.l with Maryland's augmented versions and
adding a number of new files.  Then make lisp as normal.  (optional:
instead of doing a (dumplisp mylisp) do a (sysout mylisp) -- the
sysout will cause the lisp to be dated and will print a nice greeting
when you start up lisp.)


2. If you don't have Opus 38, you will have to first modify (slightly)
the Makefile and buildlisp.l so they know about and loads the file
newfranz.l.  Also, modify the file load-liszt so it loads the correct
liszt objects.  Then, follow the directions in 3.


3. If you already have a lisp or do not wish to change your lisp library
directory, modify the file buildlisp.l to load only the U of M files
and comment out the first line of the file which makes sure that the ;
is the comment character.  Then, compile the U of M files by doing:

	make uomrequired

Then, start up your lisp, load the file buildlisp.l and type:

	(sysout mylisp)

That will do the dumplisp and make the uom lisp.



DESCRIPTIONS OF THE FILES ON THIS TAPE
--------------------------------------

The following files are on this tape:

flavors.l - This contains the flavor package.  This may be loaded
	as a stand alone package by loading flavors.o, vanilla.o,
	new-load.o and uomfuncs.o and by defining the function
	lispbreak (this function should set up a read/eval/loop,
	similar to break -- see lispbreak.l for our lispbreak
	package).  The flavors package is documented in Univ of
	Maryland Computer Science TR-1174 and in the last section
	of uomlisp.docs.

vanilla.l - This contains the vanilla flavor; the compiled version of
	this should be loaded in with flavors.

yaps.l - This contains the yaps production system.  This is not
	usually in U of M lisp.  If you want to add it, simply
	compile the file via 'make yaps.o' and load it into the lisp.
	If you wish to load this on top of a lisp not containing the
	U of M files, load yaps.o, flavors.o and uomfuncs.o.  Again,
	you will have to define the function lispbreak.  YAPS is
	documented in Univ of Maryland Computer Science TR-1146.

monkey.l - This is an example of a production system written in yaps.

nlispx.l - This is the Univ of Maryland toplevel.  To use it, load:
	uomfuncs.o, nlispx.o, and lispbreak.o; do a
	(setq user-top-level userexec); and do a reset.
	Documentation for this package is in the file uomfuncs.docs.

lispbreak.l - This is the error handler package to be used with
	userexec.  It is also documented in the file uomfuncs.docs.

new-load.l - This contains some very useful functions that allow you
	to do loads that remember where functions are stored so that
	you may simply say "vi (function)" and you will be placed in
	the file at the point where the function is defined.  This
	interfaces very well with the flavors package and allows you
	to compile code containing flavors much more easily than would
	otherwise be possible.  It is documented in uomlisp.docs.  To
	use this package alone, edit new-load.l to reference the
	correct location of gwd.o and load new-load.o and uomfuncs.o.
	Loading new-load.o will also cause gwd.o to be cfasl'd in, so
	be sure that it is made with 'make gwd.o'.  These functions
	are documented in uomfuncs.docs.

gwd.c - This function returns the current working directory and
	is used by new-load.

tlev-uom.l - This is a stripped down version of the original franz
	file of the same name.  It sets up userexec as the default
	toplevel and lispbreak.l as the error handler.  It is not
	necessary to load this file into a lisp already containing
	the original toplevel.l.  Instead, be sure to do
	(setq user-top-level 'userexec) when you load nlispx.o

uomfuncs.l, uommacs.l - These contain a number of local functions
	including the for macro and local versions of selectq, let,
	and msg.  The macros are in uommacs.l so that they need be
	loaded only at compile time and not at run time in case they
	conflict with your local macros.  They are all documented in
	the uomfuncs.docs file.

newfranz.l - This contains some new functions that have been added to
	Franz Lisp in the latest distribution and are used by the uom
	packages.  I believe it is complete; let me know if you find
	any functions missing.



SUGGESTIONS, COMMENTS, BUGS?
----------------------------

Please send them to:

	Liz Allen
	Univ of Maryland
	Dept of Computer Science
	College Park, MD 20742
	(301)-454-4247
	liz.umcp-cs@udel-relay (soon to be: liz@umcp-cs)



DISTRIBUTION OF THESE SOURCES
-----------------------------

You are free to distribute these sources to other sites as long as you
notify me that you are doing so and the sources retain identification
as coming from the Univ of Maryland.
