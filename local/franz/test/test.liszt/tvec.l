(declare (special v lim xx))
(defmacro tvec-cmp-gen (name refer)
   `(defun ,name (v lim)
	    (do ((xx 0 (1+ xx)))
		((not (<& xx lim)))
		; insure g-cc code done right
		(if (,refer v xx)
		   then (if (not (eval '(,refer v xx)))
			   then (error 'barf))
		   else (if (eval '(,refer v xx))
			   then (error 'barf)))
		(print t))))

(setq vv (vector 1 2 3 4 5))

;(tvec-gen vref-test vref eq)
;(tvec-gen vrefi-byte-test vrefi-byte eq)
;(tvec-gen vrefi-byte-test vrefi-byte eq)
;(tvec-gen vrefi-word-test vrefi-word equal)
;(tvec-gen vrefi-long-test vrefi-long equal)

(tvec-cmp-gen cvref-test vref eq)
(tvec-cmp-gen cvrefi-byte-test vrefi-byte eq)
(tvec-cmp-gen cvrefi-byte-test vrefi-byte eq)
(tvec-cmp-gen cvrefi-word-test vrefi-word equal)
(tvec-cmp-gen cvrefi-long-test vrefi-long equal)

(defvar vv)
(defun test ()
   (msg "vref test ")
   (setq vv (vector 1 2 3 4 5))
   (vref-test vv 5)
   (msg N "vrefi-byte test ")
   (setq vv (vectori-byte 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))
   (vrefi-byte-test vv 16)
   (msg N "vrefi-word test ")
   (vrefi-word-test vv 8)
   (msg N "vrefi-long test ")
   (vrefi-long-test vv 4)
   (setq vv (vector t nil t nil nil))
   (msg "cvref test ")
   (cvref-test vv 5)
   (msg N "cvrefi-byte test ")
   (setq vv (vectori-byte 0 0 0 0 5 6 7 8 9 10 11 12 13 14 15 16))
   (cvrefi-byte-test vv 16)
   (msg N "cvrefi-word test ")
   (cvrefi-word-test vv 8)
   (msg N "cvrefi-long test ")
   (cvrefi-long-test vv 4)
   
   (msg N "all done simple tests" N)
   ;(msg " the next tests should result in out of bounds errors " N)
   )

   
