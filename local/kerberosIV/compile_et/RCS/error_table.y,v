head	1.3;
access;
symbols;
locks
	dglo:1.3; strict;
comment	@ * @;


1.3
date	93.11.04.20.38.29;	author dglo;	state Exp;
branches;
next	1.2;

1.2
date	93.11.04.20.04.41;	author dglo;	state Exp;
branches;
next	1.1;

1.1
date	93.10.19.23.38.18;	author dglo;	state Exp;
branches;
next	;


desc
@4.4 yacc code
@


1.3
log
@Renamed dglo_proto.h to sys_proto.h
@
text
@%{
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#ifdef NO_STRING_H
#include <strings.h>
#else
#include <string.h>
#endif
#include <ctype.h>
#include <sys/types.h>
#include <sys/time.h>
#include "error_table.h"
#include "mit-sipb-copyright.h"

#include "et_proto.h"
#include "sys_proto.h"

char *current_token = (char *)NULL;
int table_number;
int current = 0;

static char **error_codes = (char **)NULL;

static void add_ec __P((const char *name, const char *description));
static void add_ec_val __P((const char *name, const char *val,
		     const char *description));
static void put_ecs __P((void));
static int char_to_num __P((char c));
static void set_table_num __P((char *string));
%}
%union {
	char *dynstr;
}

%token ERROR_TABLE ERROR_CODE_ENTRY END
%token <dynstr> STRING QUOTED_STRING
%type <dynstr> ec_name description table_id
%{
%}
%start error_table
%%

error_table	:	ERROR_TABLE table_id error_codes END
			{ table_name = ds($2);
			  current_token = table_name;
			  put_ecs(); }
		;

table_id	:	STRING
			{ current_token = $1;
			  set_table_num($1);
			  $$ = $1; }
		;

error_codes	:	error_codes ec_entry
		|	ec_entry
		;

ec_entry	:	ERROR_CODE_ENTRY ec_name ',' description
			{ add_ec($2, $4);
			  free($2);
			  free($4); }
		|	ERROR_CODE_ENTRY ec_name '=' STRING ',' description
			{ add_ec_val($2, $4, $6);
			  free($2);
			  free($4);
			  free($6);
			}
		;

ec_name		:	STRING
			{ $$ = ds($1);
			  current_token = $$; }
		;

description	:	QUOTED_STRING
			{ $$ = ds($1);
			  current_token = $$; }
		;

%%
/*
 *
 * Copyright 1986, 1987 by the MIT Student Information Processing Board
 *
 * For copyright info, see mit-sipb-copyright.h.
 */

static long gensym_n = 0;

char *
gensym(x)
	const char *x;
{
	char *symbol;
	if (!gensym_n) {
		struct timeval tv;
		struct timezone tzp;
		gettimeofday(&tv, &tzp);
		gensym_n = (tv.tv_sec%10000)*100 + tv.tv_usec/10000;
	}
	symbol = malloc(32 * sizeof(char));
	gensym_n++;
	sprintf(symbol, "et%ld", gensym_n);
	return(symbol);
}

char *
ds(string)
	const char *string;
{
	char *rv;
	rv = malloc(strlen(string)+1);
	strcpy(rv, string);
	return(rv);
}

static void
add_ec(name, description)
	const char *name, *description;
{
	fprintf(cfile, "\t\"%s\",\n", description);
	if (error_codes == (char **)NULL) {
		error_codes = (char **)malloc(sizeof(char *));
		*error_codes = (char *)NULL;
	}
	error_codes = (char **)realloc((char *)error_codes,
				       (current + 2)*sizeof(char *));
	error_codes[current++] = ds(name);
	error_codes[current] = (char *)NULL;
}

static void
add_ec_val(name, val, description)
	const char *name, *val, *description;
{
	int ncurrent = atoi(val);
	if (ncurrent < current) {
		printf("Error code %s (%d) out of order", name,
		       current);
		return;
	}
      
	while (ncurrent > current)
	     fputs("\t(char *)NULL,\n", cfile), current++;
	
	fprintf(cfile, "\t\"%s\",\n", description);
	if (error_codes == (char **)NULL) {
		error_codes = (char **)malloc(sizeof(char *));
		*error_codes = (char *)NULL;
	}
	error_codes = (char **)realloc((char *)error_codes,
				       (current + 2)*sizeof(char *));
	error_codes[current++] = ds(name);
	error_codes[current] = (char *)NULL;
} 

static void
put_ecs()
{
	int i;
	for (i = 0; i < current; i++) {
	     if (error_codes[i] != (char *)NULL)
		  fprintf(hfile, "#define %-40s ((%s)%d)\n",
			  error_codes[i], ERROR_CODE, table_number + i);
	}
}

/*
 * char_to_num -- maps letters and numbers into a small numbering space
 * 	uppercase ->  1-26
 *	lowercase -> 27-52
 *	digits    -> 53-62
 *	underscore-> 63
 */
static int
char_to_num(c)
	char c;
{
	if (isupper(c))
		return(c-'A'+1);
	else if (islower(c))
		return(c-'a'+27);
	else if (isdigit(c))
		return(c-'0'+53);
	else {
		fprintf(stderr, "Illegal character in name: %c\n", c);
		exit(1);
		/*NOTREACHED*/
	}
}

static void
set_table_num(string)
	char *string;
{
	if (strlen(string) > 4) {
		fprintf(stderr, "Table name %s too long, truncated ",
			string);
		string[4] = '\0';
		fprintf(stderr, "to %s\n", string);
	}
	while (*string != '\0') {
		table_number = (table_number << BITS_PER_CHAR)
			+ char_to_num(*string);
		string++;
	}
	table_number = table_number << ERRCODE_RANGE;
}

#include "et_lex.lex.c"
@


1.2
log
@Got things compiling nicely on SunOS with gcc 2.4.5
@
text
@d17 1
a17 1
#include "dglo_proto.h"
@


1.1
log
@Initial revision
@
text
@d4 15
a18 1
char *str_concat(), *ds(), *quote();
d20 11
a30 1
extern char *table_name;
d90 1
a90 6
#include <strings.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/time.h>
#include "error_table.h"
#include "mit-sipb-copyright.h"
a91 3
extern FILE *hfile, *cfile;

static long gensym_n = 0;
d94 1
a94 1
	char *x;
d111 1
a111 1
	char *string;
d119 1
a119 16
char *
quote(string)
	char *string;
{
	char *rv;
	rv = malloc(strlen(string)+3);
	strcpy(rv, "\"");
	strcat(rv, string);
	strcat(rv, "\"");
	return(rv);
}

int table_number;
int current = 0;
char **error_codes = (char **)NULL;

d121 1
a121 1
	char *name, *description;
d134 1
d136 1
a136 1
	char *name, *val, *description;
d159 1
d177 1
a177 1
int
d194 1
@
