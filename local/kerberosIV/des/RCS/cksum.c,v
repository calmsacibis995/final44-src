head     4.10;
branch   ;
access   ;
symbols  PATCH8:4.10 PATCH7:4.8 KPATCH6:4.8 ASRSNAP1001:4.8 PATCH5:4.8 ADAMS_NSA:4.8 KPATCH4:4.8 KPATCH3:4.8 KPATCH2:4.8 KREL1:4.8 BETA5/24/88:4.6;
locks    ; strict;
comment  @ * @;


4.10
date     90.01.02.13.46.25;  author jtkohl;  state Exp;
branches ;
next     4.9;

4.9
date     89.12.19.13.33.50;  author jtkohl;  state Exp;
branches ;
next     4.8;

4.8
date     89.01.21.16.49.47;  author jtkohl;  state Exp;
branches ;
next     4.7;

4.7
date     88.11.15.11.27.11;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.24.14.20.28;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.01.14.18.42.24;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.23.10.46.24;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.09.10.16.14.10;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.04.14.55.17;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.40.40;  author steiner;  state Exp;
branches ;
next     1.4;

1.4
date     87.01.13.16.34.43;  author wesommer;  state Exp;
branches ;
next     1.3;

1.3
date     86.08.14.23.11.36;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     86.08.14.18.48.39;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.12.16.13.51.08;  author spm;  state Exp;
branches ;
next     ;


desc
@@


4.10
log
@change $Header$ to $Id$
@
text
@/*
 * $Source: /afs/athena.mit.edu/astaff/project/kerberos/src/lib/des/RCS/cksum.c,v $
 * $Author: jtkohl $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * These routines perform encryption and decryption using the DES
 * private key algorithm, or else a subset of it-- fewer inner loops.
 * (AUTH_DES_ITER defaults to 16, may be less.)
 *
 * Under U.S. law, this software may not be exported outside the US
 * without license from the U.S. Commerce department.
 * 
 * These routines form the library interface to the DES facilities.
 *
 *	spm	8/85	MIT project athena
 */

#ifndef	lint
static char rcsid_cksum_c[] =
"$Id: /afs/athena.mit.edu/astaff/project/kerberos/src/lib/des/RCS/cksum.c,v 4.9 89/12/19 13:33:50 jtkohl Exp Locker: jtkohl $";
#endif	lint

#include <mit-copyright.h>
#include <stdio.h>
#include <strings.h>

#include <des.h>
#include "des_internal.h"

extern int des_debug;
extern int des_debug_print();

/*
 * This routine performs DES cipher-block-chaining checksum operation,
 * a.k.a.  Message Authentication Code.  It ALWAYS encrypts from input
 * to a single 64 bit output MAC checksum.
 *
 * The key schedule is passed as an arg, as well as the cleartext or
 * ciphertext. The cleartext and ciphertext should be in host order.
 *
 * NOTE-- the output is ALWAYS 8 bytes long.  If not enough space was
 * provided, your program will get trashed.
 *
 * The input is null padded, at the end (highest addr), to an integral
 * multiple of eight bytes.
 */

unsigned long
des_cbc_cksum(in,out,length,key,iv)
    des_cblock *in;		/* >= length bytes of inputtext */
    des_cblock *out;		/* >= length bytes of outputtext */
    register long length;	/* in bytes */
    des_key_schedule key;		/* precomputed key schedule */
    des_cblock *iv;		/* 8 bytes of ivec */
{
    register unsigned long *input = (unsigned long *) in;
    register unsigned long *output = (unsigned long *) out;
    unsigned long *ivec = (unsigned long *) iv;

    unsigned long i,j;
    static unsigned long t_input[2];
    static unsigned long t_output[8];
    static unsigned char *t_in_p;

    t_in_p = (unsigned char *) t_input;
#ifdef MUSTALIGN
    if ((long) ivec & 3) {
	bcopy((char *)ivec++,(char *)&t_output[0],sizeof(t_output[0]));
	bcopy((char *)ivec,(char *)&t_output[1],sizeof(t_output[1]));
    }
    else
#endif
    {
	t_output[0] = *ivec++;
	t_output[1] = *ivec;
    }

    for (i = 0; length > 0; i++, length -= 8) {
	/* get input */
#ifdef MUSTALIGN
	if ((long) input & 3) {
	    bcopy((char *)input++,(char *)&t_input[0],sizeof(t_input[0]));
	    bcopy((char *)input++,(char *)&t_input[1],sizeof(t_input[1]));
	}
	else
#endif
	{
	    t_input[0] = *input++;
	    t_input[1] = *input++;
	}

	/* zero pad */
	if (length < 8)
	    for (j = length; j <= 7; j++)
		*(t_in_p+j)= 0;

#ifdef DEBUG
	if (des_debug)
	    des_debug_print("clear",length,t_input[0],t_input[1]);
#endif
	/* do the xor for cbc into the temp */
	t_input[0] ^= t_output[0] ;
	t_input[1] ^= t_output[1] ;
	/* encrypt */
	(void) des_ecb_encrypt(t_input,t_output,key,1);
#ifdef DEBUG
	if (des_debug) {
	    des_debug_print("xor'ed",i,t_input[0],t_input[1]);
	    des_debug_print("cipher",i,t_output[0],t_output[1]);
	}
#else
#ifdef lint
	i = i;
#endif
#endif
    }
    /* copy temp output and save it for checksum */
#ifdef MUSTALIGN
    if ((long) output & 3) {
	bcopy((char *)&t_output[0],(char *)output++,sizeof(t_output[0]));
	bcopy((char *)&t_output[1],(char *)output,sizeof(t_output[1]));
    }
    else
#endif
    {
	*output++ = t_output[0];
	*output = t_output[1];
    }

    return (unsigned long) t_output[1];
}
@


4.9
log
@move assignment of t_in_p (presumably for some compiler bug workaround)
from [Steven J. Lunt] at Bellcore

@
text
@d25 1
a25 1
"$Header: /afs/athena.mit.edu/astaff/project/kerberos/src/lib/des/RCS/cksum.c,v 4.8 89/01/21 16:49:47 jtkohl Exp Locker: jtkohl $";
@


4.8
log
@lint cleanups
(Programmer: John Kohl)
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/lib/des/RCS/cksum.c,v $
d25 1
a25 1
"$Header: cksum.c,v 4.7 88/11/15 11:27:11 jtkohl Locked $";
d68 1
a68 1
    static unsigned char *t_in_p = (unsigned char *) t_input;
d70 1
@


4.7
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes:
rename routines to des_xxx
rename structures likewise
use local variables and static routines where appropriate
convert to des_internal.h
make debug routines consistent
@
text
@d2 2
a3 2
 * $Source: //ra/mit/wesommer/des/RCS/cksum.c,v $
 * $Author: steiner $
d25 1
a25 1
"$Header: cksum.c,v 4.6 88/02/24 14:20:28 steiner Exp $";
a68 1
    static unsigned long xor_0, xor_1;
d72 2
a73 2
	bcopy(ivec++,&t_output[0],sizeof(t_output[0]));
	bcopy(ivec,&t_output[1],sizeof(t_output[1]));
d86 2
a87 2
	    bcopy(input++,&t_input[0],sizeof(t_input[0]));
	    bcopy(input++,&t_input[1],sizeof(t_input[1]));
d109 1
a109 1
	des_ecb_encrypt(t_input,t_output,key,1);
d115 3
d119 1
d124 2
a125 2
	bcopy(&t_output[0],output++,sizeof(t_output[0]));
	bcopy(&t_output[1],output,sizeof(t_output[1]));
@


4.6
log
@Copyright notice, etc.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
d25 1
a25 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
d33 1
d35 2
a36 2
extern int debug;
extern int debug_print();
d54 3
a56 3
cbc_cksum(in,out,length,key,iv)
    C_Block *in;		/* >= length bytes of inputtext */
    C_Block *out;		/* >= length bytes of outputtext */
d58 2
a59 2
    Key_schedule key;		/* precomputed key schedule */
    C_Block *iv;		/* 8 bytes of ivec */
d103 2
a104 2
	if (debug)
	    debug_print("clear",length,t_input[0],t_input[1]);
d110 1
a110 1
	ecb_encrypt(t_input,t_output,key,1);
d112 3
a114 3
	if (debug) {
	    debug_print("xor'ed",i,t_input[0],t_input[1]);
	    debug_print("cipher",i,t_output[0],t_output[1]);
@


4.5
log
@Formatted.
Programmer: raeburn.
@
text
@d2 2
a3 1
 * des_cksum.c
d5 2
a6 2
 *	spm	8/85	MIT project athena
 *				copyright MIT	1985
d8 2
a10 4
 *	$Source: /u3/kerberos.new/lib/des/bsd/RCS/des_cksum.c,v $
 *	$Author: steiner $
 *	$Locker:  $
 *
d19 2
d23 6
@


4.4
log
@Moved ./des_conf.h to .../include/krb_conf.h; .../include/des.h
includes it now.
@
text
@d1 2
a2 1
/* des_cksum.c
d10 1
a10 1
 *	$Locker: steiner $
d12 3
a14 3
 *	These routines perform encryption and decryption using the DES
 *  private key algorithm, or else a subset of it-- fewer inner loops.
 *  ( AUTH_DES_ITER defaults to 16, may be less)
d16 4
a19 7
 *	Under U.S. law, this software may not be exported outside the US
 *  without license from the U.S. Commerce department.
 *
 *	The key schedule is passed as an arg, as well as the cleartext or
 *  ciphertext.  The cleartext and ciphertext should be in host order.
 *
 *	These routines form the library interface to the des facilities.
d22 2
a23 2
# include	<stdio.h>
# include	<strings.h>
d25 1
a25 1
# include	<des.h>
d27 2
a28 2
extern	int	debug;
extern	int	debug_print();
d30 4
a33 14

/* cbc checksum (MAC) only routine  ---------------------------------------- */
unsigned long	
	cbc_cksum(in,out,length,key,iv)

	C_Block					 	*in;		/* >= length bytes of inputtext	 */
	C_Block					 	*out;	/* >= length bytes of outputtext */
	register	long			length;		/* in bytes						*/
	Key_schedule				key;		/* precomputed key schedule	   */
	C_Block						*iv;		/* 8 bytes of ivec			   */

/*	performs des cipher-block-chaining checksum operation, 
 *	a.k.a. Message Authentication Code
 *	ALWAYS encrypts from input to a single 64 bit output MAC checksum;
d35 2
a36 3
 *	NOTE--
 *  the output is ALWAYS 8 bytes long.  If not enough
 *	space was provided, your program will get trashed.
d38 2
a39 2
 *  The input is null padded, at the end (highest addr), 
 *  to an integral multiple of eight bytes.
d41 2
d44 8
d53 3
a55 3
	register	unsigned long 	*input = (unsigned long *) in;
	register	unsigned long 	*output = (unsigned long *) out;
	unsigned long				*ivec = (unsigned long *) iv;
d57 5
a61 5
	unsigned long	i,j;
	static	unsigned long	t_input[2];
	static	unsigned long	t_output[8];
	static	unsigned char	*t_in_p = (unsigned char *) t_input;
	static	unsigned long	xor_0, xor_1;
d63 6
a68 7
#ifdef	MUSTALIGN				/* ibm rt								   */
		if ((long) ivec & 3)
			{
			bcopy(ivec++,&t_output[0],sizeof(t_output[0]));
			bcopy(ivec,&t_output[1],sizeof(t_output[1]));
			}
		else
d70 13
a82 15
			{
			t_output[0] = *ivec++;
			t_output[1] = *ivec;
			}
		
		for ( i = 0; length > 0; i++, length -=8)
			{
			/* get input												   */
#ifdef	MUSTALIGN				/* ibm rt								   */
			if ((long) input & 3)
				{
				bcopy(input++,&t_input[0],sizeof(t_input[0]));
				bcopy(input++,&t_input[1],sizeof(t_input[1]));
				}
			else
d84 13
a96 31
				{
				t_input[0] = *input++;
				t_input[1] = *input++;
				}
		
			/* zero pad													   */
			if (length <8)
				{
				for (j = length; j<=7; j++)
					{
					*(t_in_p+j)= 0;
					}
				}
					
#ifdef	DEBUG
			if (debug)
				{
				debug_print("clear",length,t_input[0],t_input[1]);
				}
#endif			
			/* do the xor for cbc into the temp						   */
			t_input[0] ^= t_output[0] ;
			t_input[1] ^= t_output[1] ;
			/* encrypt												   */
			ecb_encrypt(t_input,t_output,key,1);
#ifdef	DEBUG
			if (debug )
				{
				debug_print("xor'ed",i,t_input[0],t_input[1]);
				debug_print("cipher",i,t_output[0],t_output[1]);
				}	
d98 10
a107 9
			}
		/* copy temp output	and save it for checksum					   */
#ifdef	MUSTALIGN				/* ibm rt								   */
		if ((long) output & 3)
			{
			bcopy(&t_output[0],output++,sizeof(t_output[0]));
			bcopy(&t_output[1],output,sizeof(t_output[1]));
			}
		else
d109 16
a124 7
		{
		*output++ = t_output[0];
		*output = t_output[1];
		}
	
		return (unsigned long) t_output[1];
} 
@


4.3
log
@Changed include files configuration and referencing.
@
text
@d7 1
a7 1
 *	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/des_cksum.c,v $
a9 22
 *	$Log:	des_cksum.c,v $
 * Revision 4.2  87/09/04  14:55:17  steiner
 * Changes for PC compatibility, from Jerry Saltzer.
 * 
 * Revision 1.4  87/01/13  16:34:43  wesommer
 * Added include of des_conf.h
 * 
 * Revision 1.3  86/08/14  23:11:36  spm
 * add alignment fix for RT
 * 
 * Revision 1.2  86/08/14  18:48:39  spm
 * *** empty log message ***
 * 
 * Revision 1.1  85/12/16  13:51:08  spm
 * Initial revision
 * 
 * Revision 1.2  85/08/19  15:25:26  spm
 * fix print, int
 * 
 * Revision 1.1  85/08/16  12:48:04  spm
 * Initial revision
 * 
a23 1
#include "des_conf.h"
d26 1
@


4.2
log
@Changes for PC compatibility, from Jerry Saltzer.
@
text
@d7 3
a9 3
 *	$Source: /source/kerberos/lib/des/bsd/RCS/des_cksum.c,v $
 *	$Author: wesommer $
 *	$Locker:  $
d11 3
d46 1
a46 1
#include "./des_conf.h"
d49 1
a49 1
# include	"./des.h"
@


4.1
log
@No change; starting version 4.
@
text
@d7 1
a7 1
 *	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/des_cksum.c,v $
d9 1
a9 1
 *	$Locker: steiner $
a46 4

#ifdef	BSDUNIX
#include	<sys/time.h>
#endif
@


1.4
log
@Added include of des_conf.h
@
text
@d7 3
a9 3
 *	$Source: /altsource/kerberos/lib/des/vax/RCS/des_cksum.c,v $
 *	$Author: spm $
 *	$Locker: wesommer $
d11 3
@


1.3
log
@add alignment fix for RT
@
text
@d7 1
a7 1
 *	$Source: /mit/projects/auth/src/lib/des/vax/RCS/des_cksum.c,v $
d9 1
a9 1
 *	$Locker: spm $
d11 3
d40 1
@


1.2
log
@*** empty log message ***
@
text
@d11 3
d82 13
a94 3
		t_output[0] = *ivec++;
		t_output[1] = *ivec;

d98 13
a110 2
			t_input[0] = *input++;
			t_input[1] = *input++;
d140 9
d151 2
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
 *	$Source: /usr/mit/spm/auth/deslib/RCS/des_lib.c,v $
d10 4
a13 1
 *	$Log:	des_lib.c,v $
d38 1
a38 1
#ifdef	VAX
d47 1
a47 1
int	
d52 1
a52 1
	register	int				length;		/* in bytes						*/
d118 1
a118 1
		return 0;
@
