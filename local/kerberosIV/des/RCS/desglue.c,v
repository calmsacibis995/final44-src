head     4.1;
branch   ;
access   ;
symbols  PATCH8:4.1 PATCH7:4.1 KPATCH6:4.1 ASRSNAP1001:4.1 PATCH5:4.1 ADAMS_NSA:4.1 KPATCH4:4.1 KPATCH3:4.1 KPATCH2:4.1 KREL1:4.1;
locks    ; strict;
comment  @ * @;


4.1
date     88.11.15.11.41.18;  author jtkohl;  state Exp;
branches ;
next     1.1;

1.1
date     88.11.08.15.39.30;  author wesommer;  state Exp;
branches ;
next     ;


desc
@Glue between old routine names and new routine names.
@


4.1
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes:
check-in a real version.  This code is a 'glue' wrapper to allow
old .o files to link with the new names of the DES routines
@
text
@/*
 *	$Source$
 *	$Author$
 *	$Header$
 *
 *	Copyright (C) 1988 by the Massachusetts Institute of Technology
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * Backwards compatibility module.
 */

#ifndef lint
static char *rcsid_desglue_c = "$Header$";
#endif /* lint */

#ifndef NCOMPAT
#include <des.h>

#undef string_to_key
#undef read_pw_string
#undef random_key
#undef pcbc_encrypt
#undef key_sched
#undef cbc_encrypt
#undef cbc_cksum
#undef C_Block_print
#undef quad_cksum

int
string_to_key(str, key)
    char *str;
    register des_cblock *key;
{
    return des_string_to_key(str, key);
}


int
read_pw_string(s, max, prompt, verify)
    char *s;
    int max;
    char *prompt;
    int verify;
{
    return des_read_pw_string (s, max, prompt, verify);
}

random_key(key)
    des_cblock *key;
{
    return des_random_key(key);
}

pcbc_encrypt(in, out, length, key, iv, encrypt)
    des_cblock *in, *out;
    register long length;
    des_key_schedule key;
    des_cblock *iv;
    int encrypt;
{
    return des_pcbc_encrypt (in, out, length, key, iv, encrypt);
}

key_sched(k, s)
    unsigned char *k;
    des_key_schedule s;
{	
    return des_key_sched (k, s);
}

cbc_encrypt(in, out, length, key, iv, encrypt)
    des_cblock *in, *out;
    register long length;
    des_key_schedule key;
    des_cblock *iv;
    int encrypt;
{
    return des_cbc_encrypt (in, out, length, key, iv, encrypt);
}

cbc_cksum(in, out, length, key, iv)
    des_cblock *in;		/* >= length bytes of inputtext */
    des_cblock *out;		/* >= length bytes of outputtext */
    register long length;	/* in bytes */
    des_key_schedule key;		/* precomputed key schedule */
    des_cblock *iv;		/* 8 bytes of ivec */
{
    return des_cbc_cksum(in, out, length, key, iv);
}

C_Block_print(x)
    des_cblock *x;
{	
    return des_cblock_print (x);
}

unsigned long
quad_cksum(in,out,length,out_count,c_seed)
    des_cblock *c_seed;		/* secret seed, 8 bytes */
    unsigned char *in;		/* input block */
    unsigned long *out;		/* optional longer output */
    int out_count;		/* number of iterations */
    long length;		/* original length in bytes */
{
    return des_quad_cksum(in,out,length,out_count,c_seed);
}
#endif
@


1.1
log
@Initial revision
@
text
@d1 109
@
