head     4.6;
branch   ;
access   ;
symbols  PATCH8:4.6 PATCH7:4.6 KPATCH6:4.6 ASRSNAP1001:4.6 PATCH5:4.6 ADAMS_NSA:4.6 KPATCH4:4.6 KPATCH3:4.6 KPATCH2:4.6 KREL1:4.6 BETA5/24/88:4.5;
locks    ; strict;
comment  @ * @;


4.6
date     88.11.15.11.28.31;  author jtkohl;  state Exp;
branches ;
next     4.5;

4.5
date     88.02.24.14.21.01;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     88.01.14.18.43.37;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.23.11.25.57;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.17.39;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.04.14.52.53;  author steiner;  state Exp;
branches ;
next     1.1;

1.1
date     87.09.04.14.52.28;  author steiner;  state Exp;
branches ;
next     ;


desc
@This file didn't have an RCS file, starting one.
@


4.6
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes:
rename routines to des_xxx     
rename structures likewise
use local variables and static routines where appropriate
convert to des_internal.h       
make debug routines consistent
@
text
@/*
 * $Source: //ra/mit/wesommer/des/RCS/enc.c,v $
 * $Author: steiner $
 *
 * Copyright 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef	lint
static char rcsid_enc_c[] =
"$Header: enc.c,v 4.5 88/02/24 14:21:01 steiner Exp $";
#endif	lint

#include <mit-copyright.h>
#include <des.h>
#ifdef BSDUNIX
#include <sys/file.h>
#endif
#include <stdio.h>

des_key_schedule KEYSCHED;
des_cblock key = {0,1,2,3,4,5,6,7};
des_cblock sum;
char inbuf[512+8];		/* leave room for cksum and len */
char oubuf[512+8];
int ind;
int oud;
long orig_size;

main(argc,argv)
    int argc;
    char *argv[];
{
    register int encrypt;
    register long length;
    register int *p;
    long ivec[2];
    if (argc != 4) {
	fprintf (stderr, "%s: Usage: %s infile outfile mode.\n",
		 argv[0], argv[0]);
	exit (1);
    }
    if (!strcmp(argv[3], "e"))
	encrypt = 1;
    else if (!strcmp(argv[3], "d"))
	encrypt = 0;
    else {
	fprintf (stderr, "%s: Mode must be e (encrypt) or d (decrypt).\n",
		 argv[0]);
	exit (1);
    }
    if ((ind = open(argv[1], O_RDONLY, 0666)) < 0) {
	fprintf (stderr, "%s: Cannot open %s for input.\n",
		 argv[0], argv[1]);
	exit (1);
    }
    if (!strcmp(argv[2], "-"))
	oud = dup(1);
    else if ((oud = open(argv[2], O_CREAT|O_WRONLY, 0666)) < 0) {
	fprintf (stderr, "%s: Cannot open %s for output.\n",
		 argv[0], argv[2]);
	exit (1);
    }
#ifdef notdef
    (void) freopen ("/dev/tty", "r", stdin);
    (void) freopen ("/dev/tty", "w", stdout);
#endif
    read_password (key, "\n\07\07Enter Key> ", 1);
    if (des_key_sched (key, KEYSCHED) < 0) {
	fprintf (stderr, "%s: Key parity error\n", argv[0]);
	exit (1);
    }
    ivec[0] = 0;
    ivec[1] = 0;
    bcopy(key,sum,sizeof(des_cblock));
    for (;;) {
	if ((length = read (ind, inbuf, 512)) < 0) {
	    fprintf (stderr, "%s: Error reading from input.\n",
		     argv[0]);
	    exit (1);
	} else if (length == 0) {
	    fprintf (stderr, "\n");
	    break;
	}
	if (encrypt) {
#ifdef notdef
	    sum = des_quad_cksum(inbuf,NULL,length,1,sum);
#endif
	    des_quad_cksum(inbuf,sum,length,1,sum);
	    orig_size += length;
	    fprintf(stderr,
		    "\nlength = %d tot length = %d quad_sum = %X %X",
		    length, orig_size, *(unsigned long *) sum,
		    *((unsigned long *) sum+1));
	    fflush(stderr);
	}
	des_pcbc_encrypt (inbuf, oubuf, (long) length, KEYSCHED, ivec,
		      encrypt);
	if (!encrypt) {
#ifdef notdef
	    sum = des_quad_cksum(oubuf,NULL,length,1,sum);
#endif
	    des_quad_cksum(oubuf,sum,length,1,sum);
	    orig_size += length;
	    fprintf(stderr,
		    "\nlength = %d tot length = %d quad_sum = %X ",
		    length, orig_size, *(unsigned long *) sum,
		    *((unsigned long *) sum+1));
	}
	length = (length+7)& ~07;
	write (oud, oubuf, length);
	if (!encrypt)
	    p = (int *)&oubuf[length-8];
	else
	    p = (int *)&inbuf[length-8];
	ivec[0] = *p++;
	ivec[1] = *p;
    }

    fprintf(stderr,"\ntot length = %d quad_sum = %X\n",
	    orig_size,sum);
    /* if encrypting, now put the original length and checksum in */
}
@


4.5
log
@Copyright notice, etc.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
d13 1
a13 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
d23 3
a25 3
Key_schedule KEYSCHED;
C_Block key = {0,1,2,3,4,5,6,7};
C_Block sum;
a27 1
int debug;
d71 1
a71 1
    if (key_sched (key, KEYSCHED) < 0) {
d77 1
a77 1
    bcopy(key,sum,sizeof(C_Block));
d89 1
a89 1
	    sum = quad_cksum(inbuf,NULL,length,1,sum);
d91 1
a91 1
	    quad_cksum(inbuf,sum,length,1,sum);
d99 1
a99 1
	pcbc_encrypt (inbuf, oubuf, (long) length, KEYSCHED, ivec,
d103 1
a103 1
	    sum = quad_cksum(oubuf,NULL,length,1,sum);
d105 1
a105 1
	    quad_cksum(oubuf,sum,length,1,sum);
@


4.4
log
@Formatted.
Programmer: raeburn.
@
text
@d1 16
@


4.3
log
@#include <des.h> has to come before #ifdef BSDUNIX.
@
text
@d2 1
a2 1
#ifdef	BSDUNIX
d6 1
d9 2
a10 2
C_Block	sum;
char inbuf[512+8];			/* make sure we can append checksum and length */
d12 1
a12 1
int	debug;
d15 1
a15 1
long	orig_size;
d18 2
a19 2
int argc;
char *argv[];
d21 30
a50 27
  register int encrypt;
  register long length;
  register int *p;
  long ivec[2];
  if (argc != 4) {
    fprintf (stderr, "%s: Usage: %s infile outfile mode.\n", argv[0],
	     argv[0]);
    exit (1);
  }
  if (!strcmp(argv[3], "e")) encrypt = 1;
  else if(!strcmp(argv[3], "d")) encrypt = 0;
  else {
    fprintf (stderr, "%s: Mode must be e (encrypt) or d (decrypt).\n",
	     argv[0]);
    exit (1);
  }
  if ((ind = open(argv[1], O_RDONLY, 0666)) < 0) {
    fprintf (stderr, "%s: Cannot open %s for input.\n",
	     argv[0], argv[1]);
    exit (1);
  }
  if (!strcmp(argv[2], "-")) oud = dup(1);
  else if ((oud = open(argv[2], O_CREAT|O_WRONLY, 0666)) < 0) {
    fprintf (stderr, "%s: Cannot open %s for output.\n",
	     argv[0], argv[2]);
    exit (1);
  }
d52 2
a53 2
  (void) freopen ("/dev/tty", "r", stdin);
  (void) freopen ("/dev/tty", "w", stdout);
d55 4
a58 15
  read_password (key, "\n\07\07Enter Key> ", 1);
  if (key_sched (key, KEYSCHED) < 0) {
    fprintf (stderr, "%s: Key parity error\n", argv[0]);
    exit (1);
  }
  ivec[0] = 0;
  ivec[1] = 0;
  bcopy(key,sum,sizeof(C_Block));
  for (;;) {
    if((length = read (ind, inbuf, 512)) < 0) {
      fprintf (stderr, "%s: Error reading from input.\n", argv[0]);
      exit (1);
    } else if (length == 0) {
      fprintf (stderr, "\n");
      break;
d60 15
a74 4
	if (encrypt) 
		{
#ifdef	notdef
		sum = quad_cksum(inbuf,NULL,length,1,sum);
d76 13
a88 11
		quad_cksum(inbuf,sum,length,1,sum);
		orig_size += length;
		fprintf(stderr,"\nlength = %d tot length = %d quad_sum = %X %X",length,
				orig_size,*(unsigned long *) sum, *((unsigned long *) sum+1));
		fflush(stderr);
		}
    pcbc_encrypt (inbuf, oubuf, (long) length, KEYSCHED, ivec, encrypt);
	if (!encrypt) 
		{
#ifdef	notdef
		sum = quad_cksum(oubuf,NULL,length,1,sum);
d90 16
a105 12
		quad_cksum(oubuf,sum,length,1,sum);
		orig_size += length;
		fprintf(stderr,"\nlength = %d tot length = %d quad_sum = %X ",length,
				orig_size,*(unsigned long *) sum, *((unsigned long *) sum+1));
		}
    length = (length+7)& ~07;
    write (oud, oubuf, length);
    if (!encrypt) p = (int *)&oubuf[length-8];
    else p = (int *)&inbuf[length-8];
    ivec[0] = *p++;
    ivec[1] = *p;
}
d107 3
a109 3
	fprintf(stderr,"\ntot length = %d quad_sum = %X\n",
			orig_size,sum);
/* if encrypting, now put the original length and checksum in			   */
a110 3

  
  
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d1 1
a5 1
#include <des.h>
@


4.1
log
@No change; starting version 4.
@
text
@d5 1
a5 1
#include "des.h"
@


1.1
log
@Initial revision
@
text
@@
