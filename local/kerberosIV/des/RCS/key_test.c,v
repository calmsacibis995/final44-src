head     4.7;
branch   ;
access   ;
symbols  PATCH8:4.7 PATCH7:4.7 KPATCH6:4.7 ASRSNAP1001:4.7 PATCH5:4.7 ADAMS_NSA:4.7 KPATCH4:4.7 KPATCH3:4.7 KPATCH2:4.7 KREL1:4.7 BETA5/24/88:4.6 v1:1.3;
locks    ; strict;
comment  @ * @;


4.7
date     88.11.15.11.29.09;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.24.14.21.24;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.02.05.19.11.20;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     88.01.14.18.44.14;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.09.10.16.17.44;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.04.14.55.38;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.42.23;  author steiner;  state Exp;
branches ;
next     1.6;

1.6
date     86.08.08.14.47.06;  author spm;  state Exp;
branches ;
next     1.5;

1.5
date     86.08.08.14.46.00;  author spm;  state Exp;
branches ;
next     1.4;

1.4
date     85.12.16.13.48.14;  author spm;  state Exp;
branches ;
next     1.3;

1.3
date     85.08.16.12.48.51;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     85.08.02.16.01.07;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.07.17.14.31.14;  author spm;  state Exp;
branches ;
next     ;


desc
@@


4.7
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes:
rename routines to des_xxx     
rename structures likewise
use local variables and static routines where appropriate
convert to des_internal.h       
make debug routines consistent
@
text
@/*
 * $Source: //ra/mit/wesommer/des/RCS/key_test.c,v $
 * $Author: steiner $
 *
 * Copyright 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * exit status:		 0 ==> success
 *			-1 ==> error
 */

#ifndef	lint
static char rcsid_key_test_c[] =
"$Header: key_test.c,v 4.6 88/02/24 14:21:24 steiner Exp $";
#endif	lint

#include <mit-copyright.h>
#include <stdio.h>
#include <errno.h>
#include <des.h>

#define MIN_ARGC	0	/* min # args, not incl flags */
#define MAX_ARGC	99	/* max # args, not incl flags */

extern char *errmsg();
extern int errno;
extern int des_key_sched();
char *progname;
int sflag;
int vflag;
int kflag;
int mflag;
int pid;
extern int des_debug;

unsigned long dummy[2];
unsigned char dum_c[8] = { 0x80,1,1,1,1,1,1,1 };
des_key_schedule KS;
des_cblock kk;

main(argc,argv)
    int argc;
    char *argv[];
{
    /*	Local Declarations */

    int i;
    progname=argv[0];		/* salt away invoking program */

    /* Assume a long is four bytes */
    if (sizeof(long) != 4) {
	fprintf(stderr,"\nERROR,  size of long is %d",sizeof(long));
	exit(-1);
    }

    while (--argc > 0 && (*++argv)[0] == '-')
	for (i=1; argv[0][i] != '\0'; i++) {
	    switch (argv[0][i]) {

		/* debug flag */
	    case 'd':
		des_debug=1;
		continue;

		/* keys flag */
	    case 'k':
		kflag = 1;
		continue;

		/* test ANSI msb only key */
	    case 'm':
		mflag = 1;
		continue;

	    default:
		printf("%s: illegal flag \"%c\" ",
		       progname,argv[0][i]);
		exit(1);
	    }
	};

    if (argc < MIN_ARGC || argc >MAX_ARGC) {
	printf("Usage: xxx [-xxx]  xxx xxx\n");
	exit(1);
    }

    /*	argv[0] now points to first non-option arg, if any */


    if (des_debug) {
	if (mflag) {
	    fprintf(stderr,"\nChecking a key 0x 80 01 01 01 01 01 01 01 ");
	    fprintf(stderr,"\nKey = ");
	    des_key_sched(dum_c,KS);
	    des_cblock_print (dum_c);
	    return;
	}

	if (kflag) {
	    printf("\nCHecking a weak key...");
	    dummy[0] =	0x01fe01fe;
	    dummy[1] =	0x01fe01fe;
	    des_key_sched(dummy,KS);
#ifdef BSDUNIX
	    fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
#endif

	    dummy[0] = 0x01010101;
	    dummy[1] = 0x01010101;
#ifdef BSDUNIX
	    fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
#endif
	    des_key_sched(dummy,KS);
#ifdef BSDUNIX
	    fprintf(stderr,"\nKS= %x",* (long *)KS);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKS= %X",* (long *)KS);
#endif
	    dummy[0] = 0x01010101;
	    dummy[1] = 0x01010101;
#ifdef BSDUNIX
	    fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
#endif
	    des_key_sched(dummy,KS);
#ifdef BSDUNIX
	    fprintf(stderr,"\nKS= %x",	*(long *)KS);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKS= %X",	*(long *)KS);
#endif

	    dummy[0] = 0x80808080;
	    dummy[1] = 0x80808080;
#ifdef BSDUNIX
	    fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
#endif
	    des_key_sched(dummy,KS);
#ifdef BSDUNIX
	    fprintf(stderr,"\nKS[0]= %x",* (long * ) KS);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKS[0]= %X",* (long * ) KS);
#endif

	    printf("\nstring to key 'a'");
	    des_string_to_key("a",dummy);
#ifdef BSDUNIX
	    fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
#endif
	    des_key_sched(dummy,KS);
#ifdef BSDUNIX
	    fprintf(stderr,"\nKS= %x",* (long *) KS);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKS= %X",* (long *) KS);
#endif

	    printf("\nstring to key 'c'");
	    des_string_to_key("c",dummy);
#ifdef BSDUNIX
	    fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
#endif
	    des_key_sched(dummy,KS);
#ifdef BSDUNIX
	    fprintf(stderr,"\nKS= %x", * (long * ) KS);
#endif
#ifdef CROSSMSDOS
	    fprintf(stderr,"\nKS= %X", * (long * ) KS);
#endif
	}

	printf("\nstring to key 'e'");
	des_string_to_key("e",dummy);
#ifdef BSDUNIX
	fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
#endif
#ifdef CROSSMSDOS
	fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
#endif
	des_key_sched(dummy,KS);
#ifdef BSDUNIX
	fprintf(stderr,"\nKS= %x",KS[0]);
#endif
#ifdef CROSSMSDOS
	fprintf(stderr,"\nKS= %X",KS[0]);
#endif

	printf("\ndes_string_to_key '%s'",argv[0]);
	des_string_to_key(argv[0],dummy);
#ifdef notdef
	des_string_to_key(argv[0],dummy);

	for (i =0; i<1; i++)
	    des_key_sched(dummy,KS);
    }
    else
    {
	for (i =0; i<1000; i++) {
	    des_string_to_key(argv[0],kk);
	    des_key_sched(kk,KS);
	}
#endif
    }
}
@


4.6
log
@Copyright notice, etc.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
d16 1
a16 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
d29 1
a29 1
extern int key_sched();
d36 1
a37 1
int debug ;
d40 2
a41 2
Key_schedule KS;
C_Block kk;
d64 1
a64 1
		debug=1;
d92 1
a92 1
    if (debug) {
d96 2
a97 2
	    key_sched(dum_c,KS);
	    C_Block_print(dum_c);
d105 1
a105 1
	    key_sched(dummy,KS);
d121 1
a121 1
	    key_sched(dummy,KS);
d136 1
a136 1
	    key_sched(dummy,KS);
d152 1
a152 1
	    key_sched(dummy,KS);
d161 1
a161 1
	    string_to_key("a",dummy);
d168 1
a168 1
	    key_sched(dummy,KS);
d177 1
a177 1
	    string_to_key("c",dummy);
d184 1
a184 1
	    key_sched(dummy,KS);
d194 1
a194 1
	string_to_key("e",dummy);
d201 1
a201 1
	key_sched(dummy,KS);
d209 2
a210 2
	printf("\nstring_to_key '%s'",argv[0]);
	string_to_key(argv[0],dummy);
d212 1
a212 1
	string_to_key(argv[0],dummy);
d215 1
a215 1
	    key_sched(dummy,KS);
d220 2
a221 2
	    string_to_key(argv[0],kk);
	    key_sched(kk,KS);
@


4.5
log
@Fixed possible dereferencing NULL pointer.
Programmer: Charley Marker.
Auditors: jon, jtkohl.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/lib/des/RCS/key_test.c,v $
a3 8
 * $Locker:  $
 * $Log:	key_test.c,v $
 * Revision 4.4  88/01/14  18:44:14  steiner
 * Formatted.
 * Programmer: raeburn.
 * 
 * Revision 4.3	 87/09/10  16:17:44  steiner
 * Changed include files configuration and referencing.
d5 1
a5 2
 * Revision 4.2	 87/09/04  14:55:38  steiner
 * Changes for PC compatibility, from Jerry Saltzer.
d7 2
a8 2
 * Revision 1.6	 86/08/08  14:47:06  spm
 * add mflag for ANSI MSB  single bit (+ parity) only for debug
a9 16
 * Revision 1.4	 85/12/16  13:48:14  spm
 * *** empty log message ***
 *
 * Revision 1.3	 85/08/16  12:48:51  spm
 * ok v1
 *
 * Revision 1.2	 85/08/02  16:01:07  spm
 * ok
 *
 * Revision 1.1	 85/07/17  14:31:14  spm
 * Initial revision
 *
 */


/*
d14 6
a25 5

#ifndef lint
static char *rcsid_xxx_c =
    "$Header: key_test.c,v 4.4 88/01/14 18:44:14 steiner Exp $";
#endif /* lint */
@


4.4
log
@Formatted.
Programmer: raeburn.
@
text
@d2 1
a2 1
 * $Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/key_test.c,v $
d6 4
d48 1
a48 1
    "$Header: key_test.c,v 4.3 87/09/10 16:17:44 steiner Exp $";
d82 1
a82 1
    while (argc-- > 0 && (*++argv)[0] == '-')
@


4.3
log
@Changed include files configuration and referencing.
@
text
@d1 9
a9 5
/*	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/key_test.c,v $
 *	$Author: steiner $
 *	$Locker: steiner $
 *	$Log:	key_test.c,v $
 * Revision 4.2  87/09/04  14:55:38  steiner
d11 2
a12 2
 * 
 * Revision 1.6  86/08/08  14:47:06  spm
d14 2
a15 2
 * 
 * Revision 1.4  85/12/16  13:48:14  spm
d17 2
a18 2
 * 
 * Revision 1.3  85/08/16  12:48:51  spm
d20 2
a21 2
 * 
 * Revision 1.2  85/08/02  16:01:07  spm
d23 2
a24 2
 * 
 * Revision 1.1  85/07/17  14:31:14  spm
d26 1
a26 4
 * 
 * 
 * 
 *	This routine ...
d30 2
a31 1
/*	exit returns 	 0 ==> success
d35 3
a37 3
# include	<stdio.h>
# include	<errno.h>
# include	<des.h>
d39 2
a40 8
# define	MIN_ARGC	0	/* min # args, not incl flags */
# define	MAX_ARGC	99	/* max # args, not incl flags */
					/* MIN_ARGC == MAX_ARGC ==>
					 * required # args		
					 */
#ifndef	lint
static char		*rcsid_xxx_c="$Header: key_test.c,v 4.2 87/09/04 14:55:38 steiner Locked $";
#endif lint
d42 4
a45 9
extern 	char 	*errmsg();
extern 	int 	errno;
extern	int		key_sched();
char			*progname;
int				sflag;
int				vflag;
int				kflag;
int				mflag;
int				pid;
d47 9
a55 5
int				debug ;
unsigned long	dummy[2];
unsigned char	dum_c[8] = { 0x80,1,1,1,1,1,1,1 };
Key_schedule	KS;
C_Block			kk;
d57 6
d64 2
a65 3
	int argc;
	char *argv[];

d67 1
a67 1
/*  Local Declarations	*/
d69 2
a70 2
	int	i;
	progname=argv[0];		/* salt away invoking program */
d72 5
a76 10
/* Assume a long is four bytes											   */
	if (sizeof(long) != 4) 
		{
		fprintf(stderr,"\nERROR,  size of long is %d",sizeof(long));
		exit(-1);
		}
	
	while (argc-- > 0 && (*++argv)[0] == '-')
	   for (i=1; argv[0][i] != '\0'; i++) {
		switch (argv[0][i]) {
d78 3
a80 4
	/*	debug flag			*/
		case 'd':
			debug=1;
			continue;
d82 4
a85 4
	/* keys flag														   */
		case 'k':
			kflag = 1;
			continue;
d87 4
a90 4
	/* test ANSI msb only key					   */
		case	'm':
			mflag = 1;
			continue;
d92 4
a95 6
		default :
			printf("%s: illegal flag \"%c\" ",
				progname,argv[0][i]);
			exit(1);
		}
	   };
d97 3
a99 2
	if (argc < MIN_ARGC || argc >MAX_ARGC) {
		printf("Usage: xxx [-xxx]  xxx xxx\n");
d101 2
a102 1
	}
d104 4
a107 1
	/*	argv[0] now points to first non-option arg, if any	*/
d109 1
d111 17
a127 19
	if (debug)
		{
		if (mflag)
		{
		fprintf(stderr,"\nChecking a key 0x 80 01 01 01 01 01 01 01 ");
		fprintf(stderr,"\nKey = ");
		key_sched(dum_c,KS);
		C_Block_print(dum_c);
		return;
		}
	    
		if (kflag)
		{
		printf("\nCHecking a weak key...");
		dummy[0] = 	0x01fe01fe;
		dummy[1] =  0x01fe01fe;
		key_sched(dummy,KS);
#ifdef	BSDUNIX
		fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d129 2
a130 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d133 4
a136 4
		dummy[0] = 0x01010101;
		dummy[1] = 0x01010101;
#ifdef	BSDUNIX
		fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d138 2
a139 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d141 3
a143 3
		key_sched(dummy,KS);
#ifdef	BSDUNIX
		fprintf(stderr,"\nKS= %x",* (long *)KS);
d145 2
a146 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKS= %X",* (long *)KS);
d148 4
a151 4
		dummy[0] = 0x01010101;
		dummy[1] = 0x01010101;
#ifdef	BSDUNIX
		fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d153 2
a154 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d156 3
a158 3
		key_sched(dummy,KS);
#ifdef	BSDUNIX
		fprintf(stderr,"\nKS= %x",	*(long *)KS);
d160 2
a161 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKS= %X",	*(long *)KS);
d164 4
a167 4
		dummy[0] = 0x80808080;
		dummy[1] = 0x80808080;
#ifdef	BSDUNIX
		fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d169 2
a170 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d172 3
a174 3
		key_sched(dummy,KS);
#ifdef	BSDUNIX
		fprintf(stderr,"\nKS[0]= %x",* (long * ) KS);
d176 2
a177 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKS[0]= %X",* (long * ) KS);
d180 4
a183 4
		printf("\nstring to key 'a'");
		string_to_key("a",dummy);
#ifdef	BSDUNIX
		fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d185 2
a186 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d188 3
a190 3
		key_sched(dummy,KS);
#ifdef	BSDUNIX
		fprintf(stderr,"\nKS= %x",* (long *) KS);
d192 2
a193 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKS= %X",* (long *) KS);
d196 4
a199 4
		printf("\nstring to key 'c'");
		string_to_key("c",dummy);
#ifdef	BSDUNIX
		fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d201 2
a202 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d204 3
a206 3
		key_sched(dummy,KS);
#ifdef	BSDUNIX
		fprintf(stderr,"\nKS= %x", * (long * ) KS);
d208 2
a209 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKS= %X", * (long * ) KS);
d211 1
a211 1
}
d213 4
a216 4
		printf("\nstring to key 'e'");
		string_to_key("e",dummy);
#ifdef	BSDUNIX
		fprintf(stderr,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d218 2
a219 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d221 3
a223 3
		key_sched(dummy,KS);
#ifdef	BSDUNIX
		fprintf(stderr,"\nKS= %x",KS[0]);
d225 2
a226 2
#ifdef	CROSSMSDOS
		fprintf(stderr,"\nKS= %X",KS[0]);
d229 4
d234 8
a241 9
		printf("\nstring_to_key '%s'",argv[0]);
		string_to_key(argv[0],dummy);
#ifdef	notdef
		string_to_key(argv[0],dummy);

		for (i =0; i<1; i++)
			{
			key_sched(dummy,KS);
			}
a242 7
	else
		{
		for (i =0; i<1000; i++)
			{
			string_to_key(argv[0],kk);
			key_sched(kk,KS);
			}
d244 1
a244 1
}		
a245 2


@


4.2
log
@Changes for PC compatibility, from Jerry Saltzer.
@
text
@d1 3
a3 3
/*	$Source: /source/kerberos/lib/des/bsd/RCS/key_test.c,v $
 *	$Author: spm $
 *	$Locker:  $
d5 3
d35 1
a35 1
# include	"./des.h"
d43 1
a43 1
static char		*rcsid_xxx_c="$Header: key_test.c,v 1.6 86/08/08 14:47:06 spm Exp $";
@


4.1
log
@No change; starting version 4.
@
text
@d1 1
a1 1
/*	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/key_test.c,v $
d3 1
a3 1
 *	$Locker: steiner $
a30 1
# include	<signal.h>
d40 1
a40 1
static char		*rcsid_xxx_c="$Header: key_test.c,v 1.6 86/08/08 14:47:06 steiner Locked $";
@


1.6
log
@add mflag for ANSI MSB  single bit (+ parity) only for debug
@
text
@d1 1
a1 1
/*	$Source: /mit/projects/auth/src/lib/des/vax/RCS/key_test.c,v $
d3 1
a3 1
 *	$Locker: spm $
d5 3
d41 1
a41 1
static char		*rcsid_xxx_c="$Header: key_test.c,v 1.4 85/12/16 13:48:14 spm Exp $";
@


1.5
log
@*** empty log message ***
@
text
@d48 1
d53 1
d88 5
d107 1
d110 9
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 2

/*	$Source: /usr/mit/spm/auth/deslib/RCS/key_test.c,v $
d5 3
d38 1
a38 1
static char		*rcsid_xxx_c="$Header: key_test.c,v 1.3 85/08/16 12:48:51 spm Exp $";
d43 1
a43 1
extern	int		des_set_key();
d47 1
d81 5
d102 13
a114 1
#ifdef	notdef
d117 2
a118 2
#ifdef	VAX
		fprintf(stdout,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d120 2
a121 2
#ifdef	PC8086
		fprintf(stdout,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d123 3
a125 3
		des_set_key(dummy,KS);
#ifdef	VAX
		fprintf(stdout,"\nKS= %x",* (long *)KS);
d127 2
a128 2
#ifdef	PC8086
		fprintf(stdout,"\nKS= %X",* (long *)KS);
d132 2
a133 2
#ifdef	VAX
		fprintf(stdout,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d135 2
a136 2
#ifdef	PC8086
		fprintf(stdout,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d138 3
a140 3
		des_set_key(dummy,KS);
#ifdef	VAX
		fprintf(stdout,"\nKS= %x",	*(long *)KS);
d142 2
a143 2
#ifdef	PC8086
		fprintf(stdout,"\nKS= %X",	*(long *)KS);
d148 2
a149 2
#ifdef	VAX
		fprintf(stdout,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d151 2
a152 2
#ifdef	PC8086
		fprintf(stdout,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d154 3
a156 3
		des_set_key(dummy,KS);
#ifdef	VAX
		fprintf(stdout,"\nKS[0]= %x",* (long * ) KS);
d158 2
a159 2
#ifdef	PC8086
		fprintf(stdout,"\nKS[0]= %X",* (long * ) KS);
d161 2
d164 2
a165 2
#ifdef	VAX
		fprintf(stdout,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d167 2
a168 2
#ifdef	PC8086
		fprintf(stdout,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d170 3
a172 3
		des_set_key(dummy,KS);
#ifdef	VAX
		fprintf(stdout,"\nKS= %x",* (long *) KS);
d174 2
a175 2
#ifdef	PC8086
		fprintf(stdout,"\nKS= %X",* (long *) KS);
d178 4
a181 3
		string_to_key("b",dummy);
#ifdef	VAX
		fprintf(stdout,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d183 2
a184 2
#ifdef	PC8086
		fprintf(stdout,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d186 3
a188 3
		des_set_key(dummy,KS);
#ifdef	VAX
		fprintf(stdout,"\nKS= %x", * (long * ) KS);
d190 2
a191 2
#ifdef	PC8086
		fprintf(stdout,"\nKS= %X", * (long * ) KS);
d193 1
a193 1
#endif
d195 4
a198 3
		string_to_key("c",dummy);
#ifdef	VAX
		fprintf(stdout,"\nKey[0] = %x Key[1] = %x",dummy[0],dummy[1]);
d200 2
a201 2
#ifdef	PC8086
		fprintf(stdout,"\nKey[0] = %X Key[1] = %X",dummy[0],dummy[1]);
d203 3
a205 3
		des_set_key(dummy,KS);
#ifdef	VAX
		fprintf(stdout,"\nKS= %x",KS[0]);
d207 2
a208 2
#ifdef	PC8086
		fprintf(stdout,"\nKS= %X",KS[0]);
d211 3
d219 1
a219 1
			des_set_key(dummy,KS);
d227 1
a227 1
			des_set_key(kk,KS);
@


1.3
log
@ok v1
@
text
@d2 1
a2 1
/*	$Source: /usr/mit/spm/auth/test/RCS/key_test.c,v $
d6 3
d28 1
a28 1
# include	"des.h"
d36 1
a36 1
static char		*rcsid_xxx_c="$Header: key_test.c,v 1.2 85/08/02 16:01:07 spm Exp $";
d41 1
a41 1
extern	int		set_key();
d50 1
d94 31
a124 3
		dummy[0] = 1;
		dummy[1] = 0;
		set_key(dummy,KS);
d126 29
a154 3
		dummy[0] = 2;
		dummy[1] = 0;
		set_key(dummy,KS);
d156 34
d192 1
a192 1
			set_key(argv[0],KS);
d199 2
a200 1
			set_key(argv[0],KS);
d202 1
@


1.2
log
@ok
@
text
@d6 3
d25 1
d33 1
a33 1
static char		*rcsid_xxx_c="$Header: key_test.c,v 1.1 85/07/17 14:31:14 spm Exp $";
d36 9
a44 8
char		*progname;
extern char 	*errmsg();
extern int 	errno;
int		sflag;
int		vflag;
int		pid;
int		child_status;
long	debug ;
d46 1
d92 1
a92 1
		set_key(dummy);
d96 1
a96 1
		set_key(dummy);
d100 1
a100 1
			set_key(argv[0]);
d107 1
a107 1
			set_key(argv[0]);
@


1.1
log
@Initial revision
@
text
@a0 1
/*	xxx.c program				*/
d2 6
a7 8
/*	spm	8/84	project athena		*/

/*	DONT FORGET TO FIX ALL THE XXXs		*/

/*	$Source$
 *	$Author$
 *	$Locker$
 *	$Log$
d10 1
a21 1
# include	<sys/wait.h>
d29 1
a29 1
static char		*rcsid_xxx_c="$Header$";
d40 2
a49 2
	union	wait foo, *child_status = &foo;
	char	key_char[64];
d52 7
d82 1
a82 1
	for (i =0; i<1000; i++)
d84 20
a103 2
		set_key(argv[0]);
		}
@
