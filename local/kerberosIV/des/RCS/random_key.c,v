head     4.8;
branch   ;
access   ;
symbols  PATCH8:4.8 PATCH7:4.8 KPATCH6:4.8 ASRSNAP1001:4.8 PATCH5:4.8 ADAMS_NSA:4.8 KPATCH4:4.8 KPATCH3:4.8 KPATCH2:4.8 KREL1:4.8 BETA5/24/88:4.6;
locks    ; strict;
comment  @ * @;


4.8
date     89.01.21.16.50.39;  author jtkohl;  state Exp;
branches ;
next     4.7;

4.7
date     88.11.15.11.38.59;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.24.14.23.11;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.01.14.18.46.30;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.23.11.03.10;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.09.10.16.17.29;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.04.14.55.30;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.41.57;  author steiner;  state Exp;
branches ;
next     1.3;

1.3
date     87.01.13.16.37.41;  author wesommer;  state Exp;
branches ;
next     1.2;

1.2
date     87.01.13.11.35.56;  author wesommer;  state Exp;
branches ;
next     1.1;

1.1
date     85.12.16.13.51.59;  author spm;  state Exp;
branches ;
next     ;


desc
@@


4.8
log
@lint cleanups
(Programmer: John Kohl)
@
text
@/*
 * $Source: /mit/kerberos/src/lib/des/RCS/random_key.c,v $
 * $Author: jtkohl $
 *
 * Copyright 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * These routines perform encryption and decryption using the DES
 * private key algorithm, or else a subset of it-- fewer inner loops.
 * ( AUTH_DES_ITER defaults to 16, may be less)
 *
 * Under U.S. law, this software may not be exported outside the US
 * without license from the U.S. Commerce department.
 *
 * The key schedule is passed as an arg, as well as the cleartext or
 * ciphertext.	 The cleartext and ciphertext should be in host order.
 *
 * These routines form the library interface to the des facilities.
 *
 * spm	8/85	MIT project athena
 */

#ifndef	lint
static char rcsid_random_key_c[] =
"$Header: random_key.c,v 4.7 88/11/15 11:38:59 jtkohl Locked $";
#endif	lint

#include <mit-copyright.h>
#include <stdio.h>

#include <des.h>
#include "des_internal.h"

#ifdef BSDUNIX
#include <sys/time.h>
#endif

extern int des_debug;
extern int des_debug_print();

/* random_key */
int
des_random_key(key)
    des_cblock *key;
{
    /*
     * create a random des key; should force odd parity per byte;
     * parity is bits 8,16,...64 in des order, implies 0, 8, 16, ...
     * vax order
     */

    register unsigned int temp;
    register int odd;
    register unsigned char *c = (unsigned char *) key;
    unsigned long *k = (unsigned long *) key;
    static long p = 0;
    static long n = 0;
    long gethostid(), random();

    int i,j;

#ifdef BSDUNIX
    static struct timeval time;

    if (!p) {
	p = getpid();
	p ^= gethostid();
    }

    (void) gettimeofday(&time,(struct timezone *)0);
    /* randomize start */
    srandom(time.tv_usec ^ time.tv_sec ^ p ^ n++);

    *k++ = random();
    *k = random();

    /* make each byte parity odd */
    for (i = 0; i <= 7; i++) {
	odd = 0;
	temp = (unsigned int) *c;
	/* ignore bit 0, lsb,  it will be parity (on vax) */
	/* should do this with a table lookup */
	for (j = 0; j <= 6; j++) {
	    temp = temp >> 1;
	    odd ^= temp & 01;
	}
	/* set odd parity in lsb */
	if (!odd)
	    *c |= 1;
	else
	    *c &= ~1;
	c++;
    }

    /* **** */
#else
    dont know how to do random numbers for this machine;
#endif

    return 0;
}
@


4.7
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes:
rename routines to des_xxx     
rename structures likewise
use local variables and static routines where appropriate
convert to des_internal.h       
make debug routines consistent
@
text
@d2 2
a3 2
 * $Source: //ra/mit/wesommer/des/RCS/random_key.c,v $
 * $Author: steiner $
d27 1
a27 1
"$Header: random_key.c,v 4.6 88/02/24 14:23:11 steiner Exp $";
d60 1
a60 1
    static long addr = 0;
d72 1
a72 1
    gettimeofday(&time,NULL);
@


4.6
log
@Copyright notice, etc.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
d27 1
a27 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
d34 1
d40 2
a41 2
extern int debug;
extern int debug_print();
d45 2
a46 2
random_key(key)
    C_Block *key;
@


4.5
log
@Formatted.
Programmer: raeburn.
@
text
@d2 2
a3 1
 * des_random_key.c
d5 1
a5 2
 *	spm	8/85	MIT project athena
 *				copyright MIT	1985
d7 2
d10 3
a12 3
 *	$Source: /u3/kerberos.new/lib/des/bsd/RCS/des_random_key.c,v $
 *	$Author: steiner $
 *	$Locker:  $
d14 2
a15 3
 *	These routines perform encryption and decryption using the DES
 *  private key algorithm, or else a subset of it-- fewer inner loops.
 *  ( AUTH_DES_ITER defaults to 16, may be less)
d17 2
a18 2
 *	Under U.S. law, this software may not be exported outside the US
 *  without license from the U.S. Commerce department.
d20 1
a20 2
 *	The key schedule is passed as an arg, as well as the cleartext or
 *  ciphertext.	 The cleartext and ciphertext should be in host order.
d22 1
a22 1
 *	These routines form the library interface to the des facilities.
d25 6
@


4.4
log
@Moved ./des_conf.h to .../include/krb_conf.h.
des.h includes it now.
@
text
@d1 2
a2 1
/* des_random_key.c
d20 1
a20 1
 *  ciphertext.  The cleartext and ciphertext should be in host order.
d25 1
a25 1
# include	<stdio.h>
d27 1
a27 1
# include	<des.h>
d29 2
a30 2
#ifdef	BSDUNIX
#include	<sys/time.h>
d33 2
a34 2
extern	int	debug;
extern	int	debug_print();
d36 1
a36 1
/* random_key															   */
d38 2
a39 2
 	random_key(key)
	C_Block		*key;
d41 5
a45 5
	/* 
	 * create a random des key;
	 * should force odd parity per byte;
	 * parity is bits 8,16,...64 in des order, implies 0, 8, 16, ... vax order
	 */
d47 7
a53 7
	register	unsigned int	temp;
	register	int odd;
	register	unsigned char	*c = ( unsigned char *) key;
	unsigned	long	*k = (unsigned long *) key;
	static		long 	p = 0;
	static		long	n = 0;
	static		long	addr = 0;
d55 1
a55 1
	int			i,j;
d57 2
a58 2
#ifdef	BSDUNIX
	static	struct timeval	time;
d60 4
a63 9
	if (!p)
		{
		p = getpid();
		p ^= gethostid();
		}
	
	gettimeofday(&time,NULL);
	/* randomize start													   */
	srandom(time.tv_usec ^ time.tv_sec ^ p ^ n++);
d65 3
a67 2
	*k++ = random();	
	*k   = random();
d69 2
a70 23
	/* make each byte parity odd										   */
	for (i = 0; i <= 7; i++)
		{
		odd = 0;
		temp = (unsigned int) *c;
		/* ignore bit 0, lsb,  it will be parity (on vax)				   */
		/* should do this with a table lookup							   */
		for (j = 0; j <= 6; j++)
			{
			temp = temp >> 1;
			odd ^= temp & 01;
			}			
		/* set odd parity in lsb										   */
		if (!odd)
			{
			*c |= 1;
			}
		else
			{
			*c &= ~1;
			}
		c++;
		}
d72 19
a90 1
	/* ****																	   */
d92 1
a92 1
	fprintf(stderr,"\nDont know how to do random numbers for this machine.");
d95 1
a95 2

	return 0;
@


4.3
log
@Changed include files configuration and referencing.
@
text
@d7 1
a7 1
 *	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/des_random_key.c,v $
d9 1
a9 20
 *	$Locker: steiner $
 *	$Log:	des_random_key.c,v $
 * Revision 4.2  87/09/04  14:55:30  steiner
 * Changes for PC compatibility, from Jerry Saltzer.
 * 
 * Revision 1.3  87/01/13  16:37:41  wesommer
 * Added include of des_conf.h
 * 
 * Revision 1.2  87/01/13  11:35:56  wesommer
 * Previous changes not checked in.
 * 
 * Revision 1.1  85/12/16  13:51:59  spm
 * Initial revision
 * 
 * Revision 1.2  85/08/19  15:25:26  spm
 * fix print, int
 * 
 * Revision 1.1  85/08/16  12:48:04  spm
 * Initial revision
 * 
a23 1
#include "des_conf.h"
d25 1
@


4.2
log
@Changes for PC compatibility, from Jerry Saltzer.
@
text
@d7 3
a9 3
 *	$Source: /source/kerberos/lib/des/bsd/RCS/des_random_key.c,v $
 *	$Author: wesommer $
 *	$Locker:  $
d11 3
d43 1
a43 1
#include "./des_conf.h"
d45 1
a45 1
# include	"./des.h"
@


4.1
log
@No change; starting version 4.
@
text
@d7 1
a7 1
 *	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/des_random_key.c,v $
d9 1
a9 1
 *	$Locker: steiner $
a41 1
# include	<strings.h>
@


1.3
log
@Added include of des_conf.h
@
text
@d7 1
a7 1
 *	$Source: /altsource/kerberos/lib/des/vax/RCS/des_random_key.c,v $
d9 1
a9 1
 *	$Locker: wesommer $
d11 3
@


1.2
log
@Previous changes not checked in.
@
text
@d7 3
a9 3
 *	$Source: /mit/projects/auth/src/lib/des/vax/RCS/des_random_key.c,v $
 *	$Author: spm $
 *	$Locker: spm $
d11 3
d37 1
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
 *	$Source: /usr/mit/spm/auth/deslib/RCS/des_lib.c,v $
d10 4
a13 1
 *	$Log:	des_lib.c,v $
d38 1
a38 1
#ifdef	VAX
d60 4
d66 1
a66 1
#ifdef	VAX
d69 7
a75 1
	gettimeofday(&time);
d77 1
a77 1
	srandom(time.tv_usec);
@
