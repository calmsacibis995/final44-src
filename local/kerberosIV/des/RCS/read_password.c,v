head     4.13;
branch   ;
access   ;
symbols  PATCH8:4.12 PATCH7:4.12 KPATCH6:4.12 ASRSNAP1001:4.12 PATCH5:4.12 ADAMS_NSA:4.12 KPATCH4:4.12 KPATCH3:4.11 KPATCH2:4.11 KREL1:4.11 BETA5/24/88:4.7;
locks    ; strict;
comment  @ * @;


4.13
date     90.06.23.03.09.35;  author kfall;  state Exp;
branches ;
next     4.12;

4.12
date     89.05.30.18.01.30;  author jon;  state Exp;
branches ;
next     4.11;

4.11
date     89.01.21.16.50.46;  author jtkohl;  state Exp;
branches ;
next     4.10;

4.10
date     89.01.12.09.07.55;  author jtkohl;  state Exp;
branches ;
next     4.9;

4.9
date     88.11.15.11.30.55;  author jtkohl;  state Exp;
branches ;
next     4.8;

4.8
date     88.10.07.04.24.16;  author shanzer;  state Exp;
branches ;
next     4.7;

4.7
date     88.02.24.14.23.19;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     88.01.14.17.49.10;  author raeburn;  state Exp;
branches ;
next     4.5;

4.5
date     87.10.23.11.10.26;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.09.10.16.17.31;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.09.04.14.55.32;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.01.17.09.48;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.42.01;  author steiner;  state Exp;
branches ;
next     1.6;

1.6
date     87.01.13.16.37.53;  author wesommer;  state Exp;
branches ;
next     1.5;

1.5
date     86.08.24.10.39.53;  author bcn;  state Exp;
branches ;
next     1.4;

1.4
date     86.08.24.10.22.36;  author spm;  state Exp;
branches ;
next     1.3;

1.3
date     86.05.19.11.31.40;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     86.05.14.17.51.40;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.12.16.13.56.21;  author spm;  state Exp;
branches ;
next     ;


desc
@@


4.13
log
@make use of getpass, which handles new tty driver correctly
@
text
@/*
 * $Source: /usr/src/kerberosIV/des/RCS/read_password.c,v $
 * $Author: jon $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * This routine prints the supplied string to standard
 * output as a prompt, and reads a password string without
 * echoing.
 */

#ifndef	lint
static char rcsid_read_password_c[] =
"$Header: /usr/src/kerberosIV/des/RCS/read_password.c,v 4.12 89/05/30 18:01:30 jon Exp Locker: kfall $";
#endif	lint

#include <sys/param.h>
#include <stdio.h>
#include <string.h>
#include <setjmp.h>
#include <pwd.h>
#include <mit-copyright.h>
#include <des.h>
#include "conf.h"

extern char	*getpass();

#ifdef	BSDUNIX
static jmp_buf env;
#endif

int
des_read_password(k, prompt, verify)
	des_cblock *k;
	char *prompt;
	int verify;
{
	int ok;
	char key_string[_PASSWORD_LEN];

#ifdef BSDUNIX
	if (setjmp(env)) {
		ok = -1;
		goto lose;
    	}
#endif

    	ok = des_read_pw_string(key_string, _PASSWORD_LEN, prompt, verify);
    	if (ok == 0)
		des_string_to_key(key_string, k);

lose:
    	bzero(key_string, sizeof (key_string));
    	return ok;
}

/*
 * This version just returns the string, doesn't map to key.
 *
 * Returns 0 on success, non-zero on failure.
 */

int
des_read_pw_string(s, max, prompt, verify)
	char *s;
	int max;
	char *prompt;
	int verify;
{
	register int len = MIN(_PASSWORD_LEN, max);
	char	*ptr = getpass(prompt);

	(void)strncpy(s, ptr, len);
	if (verify) {
		while (strncmp(getpass(prompt), s, len) != 0) {
			printf("\n\07\07Mismatch - try again\n");
			(void)fflush(stdout);
			continue;
		}
	}
	s[len-1] = '\0';	/* just in case */
	return 0;
}
@


4.12
log
@Add declaration of index() for non-BSD systems.
Programmer: srz
Auditor: jon
@
text
@d2 2
a3 2
 * $Source: /site/mit/kerberos/src/lib/des/RCS/read_password.c,v $
 * $Author: jtkohl $
d18 1
a18 1
"$Header: read_password.c,v 4.11 89/01/21 16:50:46 srz Locked $";
d21 5
d30 1
a30 11
#include <stdio.h>
#ifdef	BSDUNIX
#include <strings.h>
#include <sys/ioctl.h>
#include <signal.h>
#include <setjmp.h>
#else
char     *strcpy();
int      strcmp();
char	 *index();
#endif
a35 12
#ifdef BSDUNIX
#ifdef POSIX
typedef void sigtype;
#else
typedef int sigtype;
#endif
static sigtype sig_restore();
static push_signals(), pop_signals();
int des_read_pw_string();
#endif

/*** Routines ****************************************************** */
d37 4
a40 4
des_read_password(k,prompt,verify)
    des_cblock *k;
    char *prompt;
    int	verify;
d42 2
a43 2
    int ok;
    char key_string[BUFSIZ];
d46 4
a49 4
    if (setjmp(env)) {
	ok = -1;
	goto lose;
    }
d52 3
a54 3
    ok = des_read_pw_string(key_string, BUFSIZ, prompt, verify);
    if (ok == 0)
	des_string_to_key(key_string, k);
d57 2
a58 2
    bzero(key_string, sizeof (key_string));
    return ok;
d68 5
a72 5
des_read_pw_string(s,max,prompt,verify)
    char *s;
    int	max;
    char *prompt;
    int	verify;
d74 2
a75 8
    int ok = 0;
    char *ptr;
    
#ifdef BSDUNIX
    jmp_buf old_env;
    struct sgttyb tty_state;
#endif
    char key_string[BUFSIZ];
d77 1
a77 35
    if (max > BUFSIZ) {
	return -1;
    }

#ifdef	BSDUNIX
    /* XXX assume jmp_buf is typedef'ed to an array */
    bcopy((char *)old_env, (char *)env, sizeof(env));
    if (setjmp(env))
	goto lose;

    /* save terminal state*/
    if (ioctl(0,TIOCGETP,(char *)&tty_state) == -1) 
	return -1;

    push_signals();
    /* Turn off echo */
    tty_state.sg_flags &= ~ECHO;
    if (ioctl(0,TIOCSETP,(char *)&tty_state) == -1)
	return -1;
#endif
    while (!ok) {
	(void) printf(prompt);
	(void) fflush(stdout);
#ifdef	CROSSMSDOS
	h19line(s,sizeof(s),0);
	if (!strlen(s))
	    continue;
#else
	if (!fgets(s, max, stdin)) {
	    clearerr(stdin);
	    continue;
	}
	if ((ptr = index(s, '\n')))
	    *ptr = '\0';
#endif
d79 5
a83 19
	    printf("\nVerifying, please re-enter %s",prompt);
	    (void) fflush(stdout);
#ifdef CROSSMSDOS
	    h19line(key_string,sizeof(key_string),0);
	    if (!strlen(key_string))
		continue;
#else
	    if (!fgets(key_string, sizeof(key_string), stdin)) {
		clearerr(stdin);
		continue;
	    }
            if ((ptr = index(key_string, '\n')))
	    *ptr = '\0';
#endif
	    if (strcmp(s,key_string)) {
		printf("\n\07\07Mismatch - try again\n");
		(void) fflush(stdout);
		continue;
	    }
d85 2
a86 19
	ok = 1;
    }

#ifdef	BSDUNIX
lose:
    if (!ok)
	bzero(s, max);
    printf("\n");
    /* turn echo back on */
    tty_state.sg_flags |= ECHO;
    if (ioctl(0,TIOCSETP,(char *)&tty_state))
	ok = 0;
    pop_signals();
    bcopy((char *)env, (char *)old_env, sizeof(env));
#endif
    if (verify)
	bzero(key_string, sizeof (key_string));
    s[max-1] = 0;		/* force termination */
    return !ok;			/* return nonzero if not okay */
a87 28

#ifdef	BSDUNIX
/*
 * this can be static since we should never have more than
 * one set saved....
 */
static sigtype (*old_sigfunc[NSIG])();

static push_signals()
{
    register i;
    for (i = 0; i < NSIG; i++)
	old_sigfunc[i] = signal(i,sig_restore);
}

static pop_signals()
{
    register i;
    for (i = 0; i < NSIG; i++)
	(void) signal(i,old_sigfunc[i]);
}

static sigtype
sig_restore()
{
    longjmp(env,1);
}
#endif
@


4.11
log
@lint cleanups
(Programmer: John Kohl)
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/lib/des/RCS/read_password.c,v $
d18 1
a18 1
"$Header: read_password.c,v 4.10 89/01/12 09:07:55 jtkohl Locked $";
d34 1
@


4.10
log
@POSIX signal types
Programmer: Win Treese
Auditor: John Kohl
@
text
@d18 1
a18 1
"$Header: read_password.c,v 4.9 88/11/15 11:30:55 jtkohl Locked $";
d41 6
a46 1
static void sig_restore();
d104 2
a105 1
    bcopy(old_env, env, sizeof(env));
d110 1
a110 1
    if (ioctl(0,TIOCGETP,&tty_state) == -1) 
d116 1
a116 1
    if (ioctl(0,TIOCSETP,&tty_state) == -1)
d120 2
a121 2
	printf(prompt);
	fflush(stdout);
d136 1
a136 1
	    fflush(stdout);
d151 1
a151 1
		fflush(stdout);
d165 1
a165 1
    if (ioctl(0,TIOCSETP,&tty_state))
d168 1
a168 1
    bcopy(env, old_env, sizeof(env));
d181 1
a181 5
#ifdef POSIX
static void (*old_sigfunc[NSIG])();
#else
static int (*old_sigfunc[NSIG])();
#endif /* POSIX */
d194 1
a194 1
	signal(i,old_sigfunc[i]);
d197 2
a198 3
static void sig_restore(sig,code,scp)
    int sig,code;
    struct sigcontext *scp;
@


4.9
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes:
from Jim Bloom: clearerr() on stdin after a failed read, and do
rangechecking on fgets()
@
text
@d2 2
a3 2
 * $Source: //ra/mit/wesommer/des/RCS/read_password.c,v $
 * $Author: shanzer $
d18 1
a18 1
"$Header: read_password.c,v 4.8 88/10/07 04:24:16 wesommer Locked $";
d175 3
d179 1
@


4.8
log
@Fix for the "lets go into a infinite loop when EOF is proveided at the 
begginign of a line" bug

Programer: jb@@cs.brown.edu
Auditor: shanzer
@
text
@d2 1
a2 1
 * $Source: /u2/kerberos/src/lib/des/RCS/read_password.c,v $
d18 1
a18 1
"$Header: read_password.c,v 1.1 88/09/22 16:25:07 shanzer Locked $";
d23 1
d43 1
a43 1
int read_pw_string();
d49 1
a49 1
    C_Block *k;
d63 1
a63 1
    ok = read_pw_string(key_string, BUFSIZ, prompt, verify);
d65 1
a65 1
	string_to_key(key_string, k);
d79 1
a79 1
read_pw_string(s,max,prompt,verify)
d86 2
d121 1
a121 1
	if (!gets(s)) {
d125 2
d136 1
a136 1
	    if (!gets(key_string)) {
d140 2
d144 1
a144 1
		printf("\n\07\07Mismatch - try again");
d156 1
@


4.7
log
@Copyright notice, etc.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
 * $Author: steiner $
d18 1
a18 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
d118 2
a119 1
	if (!gets(s))
d121 1
d131 2
a132 1
	    if (!gets(key_string))
d134 1
@


4.6
log
@Put in setjmps.
@
text
@d2 2
a3 7
 * Copyright 1985,1986,1987
 * Massachusetts Institute of Technology
 */

/*
 *	read_password.c
 *	spm	10/85	MIT Project Athena
d5 9
a13 7
 *	$Source: /mit/kerberos/lib/des/RCS/read_password.c,v $
 *	$Author: steiner $
 *	$Locker: raeburn $
 * 
 *	This routine prints the supplied string to standard
 *	output as a prompt, and reads a password string without
 *	echoing.
d16 6
a37 5

#ifndef	lint
static char rcsid[] =
    "$Header: read_password.c,v 4.5 87/10/23 11:10:26 raeburn Locked $";
#endif lint
@


4.5
log
@Moved ./des_conf.h to .../include/krb_conf.h.
des.h includes it now.
@
text
@d1 4
a4 1
/*	Copyright	1985	Massachusetts Institute of Technology			   */
d6 5
a10 4
/*	read_password.c 
 *	spm	10/85	MIT Project Athena		*/

/*	$Source: /u3/kerberos.new/lib/des/bsd/RCS/des_read_password.c,v $
d12 1
a12 1
 *	$Locker:  $
d14 3
a16 1
 *	This routine ...
d19 1
a19 2
/* Application include files */
# include	<des.h>
d21 1
a21 3
/* System include files */

# include	<stdio.h>
d23 5
a27 5
# include       <strings.h>
# include	<sys/ioctl.h>
# include	<signal.h>
#endif
#ifndef BSDUNIX
a31 7

/* Externals															   */
extern char 	*errmsg();
extern int 		errno;

/* Local Defines														   */

d33 1
a33 1
static	struct sgttyb	tty_state;
a35 2
/* Globals																   */

d37 2
a38 1
static char		*rcsid_xxx_c="$Header: des_read_password.c,v 4.5 87/10/23 10:46:47 steiner Exp $";
a40 2
static char	key_string1[255];
static char	key_string2[255];
d42 3
a44 1
void	sig_restore();
d47 1
a47 1
/*** Routines ************************************************************** */
d50 6
a55 7
	C_Block	*k;
	char *prompt;
	int	verify;
	{
	static	ok;
	static	init;
	ok = 0;
d57 5
a61 14
#ifdef	BSDUNIX
	if (!init | 1)				/* always, to be safe					   */
		{
		/* save terminal state*/
		if (ioctl(0,TIOCGETP,&tty_state) == -1) 
			{
			fprintf(stderr,"\nIOCTL TIOCGETP err, errno = %d",errno);
			return -1;
			}
		init++;
		}

#ifdef	notdef
	push_signals();	/* problem, 5/86 spm									   */
a62 32
	/* Turn off echo										   */
	tty_state.sg_flags &= ~ECHO;
	if (ioctl(0,TIOCSETP,&tty_state) == -1) 
		{
		fprintf(stderr,"\nIOCTL TIOCSETP err, errno %d",errno);
		return -1;
		}
#endif
	while (!ok)
		{
		fprintf(stdout,prompt);
		fflush(stdout);
#ifdef	BSDUNIX
		if (!get_line(key_string1,sizeof(key_string1))) continue;
#else
#ifdef	CROSSMSDOS
		h19line(key_string1,sizeof(key_string1),0);
	        if (!strlen(key_string1)) continue;
#else
		fprint(stderr,"\n dont know how to read password for this machine");
		return -1;
#endif
#endif
		if (verify)
			{
			fprintf(stdout,"\nVerifying, please re-enter %s",prompt);
			fflush(stdout);
#ifdef	BSDUNIX
			if (!get_line(key_string2,sizeof(key_string2))) continue;
#else
			h19line(key_string2,sizeof(key_string2),0);
	                if (!strlen(key_string2)) continue;
d64 7
a70 29
#endif
			if (strcmp(key_string1,key_string2))
				{
				fprintf(stdout,"\n\07\07Mismatch - try again");
				fflush(stdout);
				continue;
				}
			}
		ok = 1;
		}
	
#ifdef	BSDUNIX
	/* turn echo back on												   */
	tty_state.sg_flags |= ECHO;
	
	ok = ioctl(0,TIOCSETP,&tty_state);
#ifdef	notdef
	pop_signals();				/* problem 5/86							   */
#endif
	if (ok == -1) 
		{
		fprintf(stderr,"\nIOCTL TIOCSETP err, errno %d",errno);
		return -1;
		}
#endif
	string_to_key(key_string1,k);
	bzero(key_string1, sizeof (key_string1));
	bzero(key_string2, sizeof (key_string2));
	return 0;
d73 5
a78 3

/* This version just returns the string, doesnt map to key				   */

d81 11
a91 8
	char *s;
	int	max;
	char *prompt;
	int	verify;
	{
	static	ok;
	static	init;
	ok = 0;
d93 4
a96 6
	if (max >255)
		{
		fprintf(stderr,"\nread_pw_string max too large = %d",max);
		return -1;
		}
	
d98 3
a100 10
	if (!init | 1)				/* better be safe						   */
		{
		/* save terminal state*/
		if (ioctl(0,TIOCGETP,&tty_state) == -1) 
			{
			fprintf(stderr,"\nIOCTL TIOCGETP err, errno = %d",errno);
			return -1;
			}
		init++;
		}
d102 9
a110 8
	push_signals();
	/* Turn off echo										   */
	tty_state.sg_flags &= ~ECHO;
	if (ioctl(0,TIOCSETP,&tty_state) == -1) 
		{
		fprintf(stderr,"\nIOCTL TIOCSETP err, errno %d",errno);
		return -1;
		}
d112 3
a114 7
	while (!ok)
		{
		fprintf(stdout,prompt);
		fflush(stdout);
#ifdef	BSDUNIX
		if (!get_line(key_string1,sizeof(key_string1))) continue;
#else
d116 3
a118 2
		h19line(key_string1,sizeof(key_string1),0);
		if(!strlen(key_string1)) continue;
d120 2
a121 2
		fprint(stderr,"\n dont know how to read password for this machine");
		return -1;
d123 10
d134 8
a141 9
		if (verify)
			{
			fprintf(stdout,"\nVerifying, please re-enter %s",prompt);
			fflush(stdout);
#ifdef	BSDUNIX
			if (!get_line(key_string2,sizeof(key_string2))) continue;
#else
			h19line(key_string2,sizeof(key_string2),0);
			if(!strlen(key_string2)) continue;
a142 11
#endif
			if (strcmp(key_string1,key_string2))
				{
				fprintf(stdout,"\n\07\07Mismatch - try again");
				fflush(stdout);
				continue;
				}
			}
		ok = 1;
		}
	
d144 9
a152 9
	/* turn echo back on												   */
	tty_state.sg_flags |= ECHO;
	ok = ioctl(0,TIOCSETP,&tty_state);
	pop_signals();
	if (ok  == -1) 
		{
		fprintf(stderr,"\nIOCTL TIOCSETP err, errno %d",errno);
		return -1;
		}
d154 4
a157 5
	s[max-1] = 0;			/* force termination					   */
	strcpy(s,key_string1);
	bzero(key_string1, sizeof (key_string1));
	bzero(key_string2, sizeof (key_string2));
	return 0;
d161 5
d167 1
a167 3
static int  (*old_sigfunc[NSIG])();

push_signals()
d169 3
a171 6
	register i;
	
	for (i = 0; i < NSIG; i++)
		{
		old_sigfunc[i] = signal(i,sig_restore);
		}
d173 2
a174 2
	
pop_signals()
d176 3
a178 8

	register i;
	
	for (i = 0; i < NSIG; i++)
		{
		signal(i,old_sigfunc[i]);
		}
	
d181 3
a183 3
void sig_restore(sig,code,scp)
	int sig,code;
	struct sigcontext *scp;
d185 1
a185 11
	bzero(key_string1,sizeof(key_string1));	
	bzero(key_string2,sizeof(key_string2));	
	fprintf(stderr,"\nSignal caught, sig = %d code = %d old pc = 0x%X \nexiting",
	sig,code,scp->sc_pc);
	/* turn echo back on												   */
	tty_state.sg_flags |= ECHO;
	if (ioctl(0,TIOCSETP,&tty_state) == -1) 
		{
		fprintf(stderr,"\nIOCTL TIOCSETP err, errno %d",errno);
		}
	exit(-1);
a187 1

@


4.4
log
@Changed include files configuration and referencing.
@
text
@d6 1
a6 1
/*	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/des_read_password.c,v $
d8 1
a8 4
 *	$Locker: steiner $
 *	$Log:	des_read_password.c,v $
 * Revision 4.3  87/09/04  14:55:32  steiner
 * Changes for PC compatibility, from Jerry Saltzer.
a9 17
 * Revision 1.6  87/01/13  16:37:53  wesommer
 * Added include of des_conf.h
 * 
 * Revision 1.5  86/08/24  10:39:53  bcn
 * Changed name from read_password to des_read_password.
 * 
 * Revision 1.4  86/08/24  10:22:36  spm
 * Checkin by BCN
 * 
 * Revision 1.2  86/05/14  17:51:40  spm
 * rename compile conditionals
 * 
 * Revision 1.1  85/12/16  13:56:21  spm
 * Initial revision
 * 
 * 
 * 
d13 5
a17 2
/* System include files													   */
#include "des_conf.h"
a28 2
/* Application include files											   */
# include	<des.h>
d43 1
a43 1
static char		*rcsid_xxx_c="$Header: des_read_password.c,v 4.3 87/09/04 14:55:32 steiner Locked $";
@


4.3
log
@Changes for PC compatibility, from Jerry Saltzer.
@
text
@d6 3
a8 3
/*	$Source: /source/kerberos/lib/des/bsd/RCS/des_read_password.c,v $
 *	$Author: wesommer $
 *	$Locker:  $
d10 3
d34 1
a34 1
#include "./des_conf.h"
d47 1
a47 1
# include	"./des.h"
d62 1
a62 1
static char		*rcsid_xxx_c="$Header: des_read_password.c,v 1.6 87/01/13 16:37:53 wesommer Exp $";
@


4.2
log
@PC changes from Jerry Saltzer.
@
text
@d34 1
d37 4
@


4.1
log
@No change; starting version 4.
@
text
@d6 1
a6 1
/*	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/des_read_password.c,v $
d8 1
a8 1
 *	$Locker: steiner $
d54 1
a54 1
static char		*rcsid_xxx_c="$Header: des_read_password.c,v 1.6 87/01/13 16:37:53 steiner Locked $";
d59 1
d61 1
d105 2
a106 1
		if (!pcget_line(key_string1,sizeof(key_string1),0)) continue;
d119 2
a120 1
			if (!pcget_line(key_string2,sizeof(key_string2),0)) continue;
d203 2
a204 1
		if (!pcget_line(key_string1,sizeof(key_string1),0)) continue;
d217 2
a218 1
			if (!pcget_line(key_string2,sizeof(key_string2),0)) continue;
d249 2
a282 1
#ifdef	BSDUNIX
a288 1
#endif
d291 1
@


1.6
log
@Added include of des_conf.h
@
text
@d6 3
a8 3
/*	$Source: /altsource/kerberos/lib/des/vax/RCS/des_read_password.c,v $
 *	$Author: bcn $
 *	$Locker: wesommer $
d10 3
d54 1
a54 1
static char		*rcsid_xxx_c="$Header: des_read_password.c,v 1.5 86/08/24 10:39:53 wesommer Locked $";
@


1.5
log
@Changed name from read_password to des_read_password.
@
text
@d6 3
a8 3
/*	$Source: /mit/projects/auth/src/lib/des/vax/RCS/des_read_password.c,v $
 *	$Author: spm $
 *	$Locker: bcn $
d10 3
d28 1
d51 1
a51 1
static char		*rcsid_xxx_c="$Header: des_read_password.c,v 1.4 86/08/24 10:22:36 spm Exp $";
@


1.4
log
@Checkin by BCN
@
text
@d6 1
a6 1
/*	$Source: /mit/projects/auth/src/lib/des/vax/RCS/read_password.c,v $
d8 5
a12 2
 *	$Locker: spm $
 *	$Log:	read_password.c,v $
d47 1
a47 1
static char		*rcsid_xxx_c="$Header: read_password.c,v 1.2 86/05/14 17:51:40 spm Exp $";
d56 1
a56 1
read_password(k,prompt,verify)
@


1.3
log
@add read_pw_string
@
text
@d25 1
d47 4
a57 2
	static char	key_string1[255];
	static char	key_string2[255];
d63 1
a63 1
	if (!init)
d74 3
d122 6
a127 1
	if (ioctl(0,TIOCSETP,&tty_state) == -1) 
a149 2
	static char	key_string1[255];
	static char	key_string2[255];
a159 1

d161 1
a161 1
	if (!init)
d172 1
d218 3
a220 1
	if (ioctl(0,TIOCSETP,&tty_state) == -1) 
d231 43
@


1.2
log
@rename compile conditionals
@
text
@d10 3
d43 1
a43 1
static char		*rcsid_xxx_c="$Header: read_password.c,v 1.1 85/12/16 13:56:21 spm Exp $";
d123 94
@


1.1
log
@Initial revision
@
text
@d6 6
a11 4
/*	$Source$
 *	$Author$
 *	$Locker$
 *	$Log$
d14 1
d20 1
a20 1
#ifdef	VAX
d33 1
a33 1
#ifdef	VAX
d40 1
a40 1
static char		*rcsid_xxx_c="$Header$";
d44 1
a44 1

d56 1
a56 1
#ifdef	VAX
d63 1
a63 1
			exit(1);
d73 1
a73 1
		exit(1);
d80 1
a80 1
#ifdef	VAX
d83 1
d85 3
d89 1
d94 1
a94 1
#ifdef	VAX
d110 1
a110 1
#ifdef	VAX
d116 1
a116 1
		exit(1);
d122 1
a122 1

@
