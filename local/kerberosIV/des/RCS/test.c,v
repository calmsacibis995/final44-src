head     4.1;
branch   ;
access   ;
symbols  PATCH8:4.1 PATCH7:4.1 KPATCH6:4.1 ASRSNAP1001:4.1 PATCH5:4.1 ADAMS_NSA:4.1 KPATCH4:4.1 KPATCH3:4.1 KPATCH2:4.1 KREL1:4.1 BETA5/24/88:4.1;
locks    ; strict;
comment  @ * @;


4.1
date     87.09.01.15.42.31;  author steiner;  state Exp;
branches ;
next     1.2;

1.2
date     85.08.12.13.38.15;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.08.11.14.14.27;  author spm;  state Exp;
branches ;
next     ;


desc
@works
@


4.1
log
@No change; starting version 4.
@
text
@
/*	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/test.c,v $
 *	$Author: spm $
 *	$Locker: steiner $
 *	$Log:	test.c,v $
 * Revision 1.2  85/08/12  13:38:15  spm
 * works
 * 
 * Revision 1.1  85/08/11  14:14:27  spm
 * Initial revision
 * 
 * Revision 1.2  85/08/02  16:01:07  spm
 * ok
 * 
 * Revision 1.1  85/07/17  14:31:14  spm
 * Initial revision
 * 
 * 
 * 
 *	This routine ...
 */


/*	exit returns 	 0 ==> success
 *			-1 ==> error
 */

# include	<stdio.h>
# include	<signal.h>
# include	<errno.h>
# include	"ks.h"

# define	MIN_ARGC	0	/* min # args, not incl flags */
# define	MAX_ARGC	99	/* max # args, not incl flags */
					/* MIN_ARGC == MAX_ARGC ==>
					 * required # args		
					 */
#ifndef	lint
static char		*rcsid_xxx_c="$Header: test.c,v 1.2 85/08/12 13:38:15 steiner Locked $";
#endif lint

extern 	char 	*errmsg();
extern 	int 	errno;
extern	void	set_key();
extern	void	ecb_encrypt();
extern	void	swap_bits();
char			*progname;
int				sflag;
int				nflag = 1000;
int				vflag;
int				pid;

long			debug ;
unsigned long	dummy[2];
Key_schedule	KS;
unsigned char	cipher_text[64];
unsigned char	clear_text[64];
unsigned char	clear_text2[64] = {1,0,0,0, 2,0,0,0};
unsigned char	clear_text3[64] = {2,0,0,0, 1,0,0,0};
unsigned char	default_key[8] = 
#ifndef	notdef
/* 0x0123456789abcdef													   */
{
	0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef
};
#else
	
		{ 2	} ;
#endif
unsigned char	default_key2[8] = 
/* 0x0123456789abcdef													   */
{
	0xef,0xcd,0xab,0x89,0x67,0x45,0x23,0x01	
};
unsigned char	default_key3[8] = 
/* 0x0123456789abcdef													   */
{
	0x10,0x32,0x54,0x76,0x98,0xba,0xdc,0xfe
};

unsigned char	default_key4[8] = 
/* 0x0123456789abcdef													   */
{
	0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10	
};
unsigned char	default_key5[8] = 
/* 0x0123456789abcdef													   */
{
 1,35,69,103,137,171,205,239 
};
unsigned char	default_key6[8] = 
/* 0x0123456789abcdef													   */
{
 0x7f,0x3b,0x5d,0x19,0x6e,0x2a,0x8c,0x0f
};
unsigned char	zero_key[8] = {1};
	int	i,j;

main(argc,argv)
	int argc;
	char *argv[];

{
/*  Local Declarations	*/

	progname=argv[0];		/* salt away invoking program */

/* Assume a long is four bytes											   */
	if (sizeof(long) != 4) 
		{
		fprintf(stdout,"\nERROR,  size of long is %d",sizeof(long));
		exit(-1);
		}
	
	while (argc-- > 0 && (*++argv)[0] == '-')
	   for (i=1; argv[0][i] != '\0'; i++) {
		switch (argv[0][i]) {

	/*	debug flag			*/
		case 'd':
			debug=1;
			continue;

	/*  iteration count */
		case 'n':
			sscanf(&argv[0][i+1],"%d",&nflag);
			argv[0][i+1] = '\0';	/* force it to stop */
			break;

		default :
			printf("%s: illegal flag \"%c\" ",
				progname,argv[0][i]);
			exit(1);
		}
	   };

	if (argc < MIN_ARGC || argc >MAX_ARGC) {
		printf("Usage: xxx [-xxx]  xxx xxx\n");
		exit(1);
	}

	/*	argv[0] now points to first non-option arg, if any	*/
#ifdef	notdef
	set_key(argv[0],KS);
#endif

	set_key(default_key,KS);
	do_encrypt(argv[1],cipher_text);
	do_decrypt(clear_text,cipher_text);
}		



flip(array)
	char *array;
{
	register	old,new,i,j;
	/* flips the bit order within each byte from 0 lsb to 0 msb			   */
	for (i = 0; i<=7; i++)	
		{
		old = *array;
		new = 0;
		for (j = 0; j<=7; j++)
			{
			if (old & 01) new = new | 01;
			if (j <7)
				{
				old = old >> 1;
				new = new << 1;
				}
			}
		*array = new;		
		array++;
		}		
}

do_encrypt(in,out)
	char	*in;
	char	*out;
{		for (i =1; i<=nflag; i++)
			{
			ecb_encrypt(in,out,KS,1);
			if (debug)
				{
				fprintf(stdout,"\nclear %s\n",in);
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02 X ",in[j] & 0xff);
					}
				fprintf(stdout,"\tcipher ");
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02X ",out[j] & 0xff);
					}
			}	
		}
}

do_decrypt(in,out)
	char	*out;
	char	*in;
			/* try to invert it											   */
{		for (i =1; i<=nflag; i++)
			{
			ecb_encrypt(out,in,KS,0);
			if (debug)
				{
				fprintf(stdout,"\nclear %s\n",in);
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02X ",in[j] & 0xff);
					}
				fprintf(stdout,"\tcipher ");
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02X ",out[j] & 0xff);
					}
				}
				
			}
}

@


1.2
log
@works
@
text
@d2 1
a2 1
/*	$Source: /usr/mit/spm/auth/test/RCS/test.c,v $
d4 1
a4 1
 *	$Locker: spm $
d6 3
d39 1
a39 1
static char		*rcsid_xxx_c="$Header: test.c,v 1.1 85/08/11 14:14:27 spm Exp $";
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/*	$Source: /usr/mit/spm/auth/test/RCS/key_test.c,v $
d5 4
a8 1
 *	$Log:	key_test.c,v $
d36 1
a36 1
static char		*rcsid_xxx_c="$Header: key_test.c,v 1.2 85/08/02 16:01:07 spm Exp $";
d145 1
a145 1
	do_encrypt(clear_text,cipher_text);
a146 61
	
	do_encrypt(clear_text2,cipher_text);
	do_decrypt(clear_text2,cipher_text);

	do_encrypt(clear_text3,cipher_text);
	do_decrypt(clear_text3,cipher_text);
	
	do_encrypt(argv[1],cipher_text);
	do_decrypt(argv[1],cipher_text);

#ifdef	notdef
	set_key(zero_key,KS);


	set_key(default_key2,KS);
	do_encrypt(argv[1]);

	set_key(default_key3,KS);
	do_encrypt(argv[1]);

	set_key(default_key4,KS);
	do_encrypt(argv[1]);

	set_key(default_key5,KS);
	do_encrypt(argv[1]);

	set_key(default_key6,KS);
	do_encrypt(argv[1]);

	fprintf(stdout,"\nbit-swapping key");
	swap_bits(zero_key);
	swap_bits(default_key);
	swap_bits(default_key2);
	swap_bits(default_key3);
	swap_bits(default_key4);
	swap_bits(default_key5);
	swap_bits(default_key6);

	set_key(zero_key,KS);
	do_encrypt(argv[1]);

	set_key(default_key,KS);

	do_encrypt(argv[1]);
	do_decrypt(argv[1]);

	set_key(default_key2,KS);
	do_encrypt(argv[1]);

	set_key(default_key3,KS);
	do_encrypt(argv[1]);

	set_key(default_key4,KS);
	do_encrypt(argv[1]);

	set_key(default_key5,KS);
	do_encrypt(argv[1]);

	set_key(default_key6,KS);
	do_encrypt(argv[1]);
#endif
@
