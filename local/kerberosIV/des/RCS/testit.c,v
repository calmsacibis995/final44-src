head     4.7;
branch   ;
access   ;
symbols  PATCH8:4.7 PATCH7:4.7 KPATCH6:4.7 ASRSNAP1001:4.7 PATCH5:4.7 ADAMS_NSA:4.7 KPATCH4:4.7 KPATCH3:4.7 KPATCH2:4.7 KREL1:4.7 BETA5/24/88:4.6 v1:1.1;
locks    ; strict;
comment  @ * @;


4.7
date     88.11.15.11.39.23;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.24.14.23.36;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.02.05.19.15.19;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     88.01.14.18.46.44;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.09.10.16.17.46;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.04.14.55.41;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.42.39;  author steiner;  state Exp;
branches ;
next     1.3;

1.3
date     87.01.13.17.20.42;  author wesommer;  state Exp;
branches ;
next     1.2;

1.2
date     85.12.16.13.48.30;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.08.16.12.47.48;  author spm;  state Exp;
branches ;
next     ;


desc
@ok v1
@


4.7
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes:
rename routines to des_xxx     
rename structures likewise
use local variables and static routines where appropriate
convert to des_internal.h       
make debug routines consistent
@
text
@/*
 * $Source: //ra/mit/wesommer/des/RCS/testit.c,v $
 * $Author: steiner $
 *
 * Copyright 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * exit returns	 0 ==> success
 *		-1 ==> error
 */

#ifndef	lint
static char rcsid_testit_c[] =
"$Header: testit.c,v 4.6 88/02/24 14:23:36 steiner Exp $";
#endif	lint

#include <mit-copyright.h>
#include <stdio.h>
#include <errno.h>
#include <des.h>

#define MIN_ARGC	0	/* min # args, not incl flags */
#define MAX_ARGC	2	/* max # args, not incl flags */

/* MIN_ARGC == MAX_ARGC ==> required # args */

extern char *errmsg();
extern int errno;
extern int des_string_to_key();
extern int des_key_sched();
extern int des_ecb_encrypt();
extern int des_cbc_encrypt();
extern int des_pcbc_encrypt();
char *progname;
int sflag;
int vflag;
int tflag;
int nflag = 1000;
int cflag;
int des_debug ;
des_key_schedule KS;
unsigned char cipher_text[64];
unsigned char clear_text[64] = "Now is the time for all " ;
unsigned char clear_text2[64] = "7654321 Now is the time for ";
unsigned char clear_text3[64] = {2,0,0,0, 1,0,0,0};
unsigned char *input;

/* 0x0123456789abcdef */
des_cblock default_key = { 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef };
des_cblock s_key;
des_cblock default_ivec = { 0x12,0x34,0x56,0x78,0x90,0xab,0xcd,0xef };
unsigned char *ivec;
des_cblock zero_key = {1};
int i,j;

main(argc,argv)
    int argc;
    char *argv[];
{
    /*	Local Declarations */

    long in_length;

    progname=argv[0];		    /* salt away invoking program */

    /* Assume a long is four bytes */
    if (sizeof(long) != 4) {
	fprintf(stdout,"\nERROR,  size of long is %d",sizeof(long));
	exit(-1);
    }

    while (--argc > 0 && (*++argv)[0] == '-')
	for (i=1; argv[0][i] != '\0'; i++) {
	    switch (argv[0][i]) {

		/* debug flag */
	    case 'd':
		des_debug=1;
		continue;

		/* verbose flag */
	    case 'v':
		vflag = 1;
		continue;

		/* cbc flag */
	    case 'c':
		cflag=1;
		continue;

		/* string to key only flag */
	    case 's':
		sflag = 1;
		continue;

		/* test flag - use known key and cleartext */
	    case 't':
		tflag=1;
		continue;

		/* iteration count */
	    case 'n':
		sscanf(&argv[0][i+1],"%d",&nflag);
		argv[0][i+1] = '\0'; /* force it to stop */
		break;

	    default:
		printf("%s: illegal flag \"%c\" ",
		       progname,argv[0][i]);
		exit(1);
	    }
	};

    if (argc < MIN_ARGC || argc >MAX_ARGC) {
	printf("Usage: xxx [-xxx]  xxx xxx\n");
	exit(1);
    }

    /* argv[0] now points to first non-option arg, if any */

    if (tflag) {
	/* use known input and key */
	des_key_sched(default_key,KS);
	input = clear_text;
	ivec = (unsigned char *) default_ivec;
    }
    else {
	/*des_string_to_key(argv[0],s_key); */
	des_string_to_key("test",s_key);
	if (vflag) {
	    input = (unsigned char *) s_key;
	    fprintf(stdout,"\nstring = %s, key = ",argv[0]);
	    for (i = 0; i<=7 ; i++) fprintf(stdout,"%02x ",*input++);
	}
	des_string_to_key("test",s_key);
	if (vflag) {
	    input = (unsigned char *) s_key;
	    fprintf(stdout,"\nstring = %s, key = ",argv[0]);
	    for (i = 0; i<=7 ; i++) fprintf(stdout,"%02x ",*input++);
	}
	des_key_sched(s_key,KS);
	input = (unsigned char *) argv[1];
	ivec = (unsigned char *)  argv[2];
    }


    if (cflag) {
	fprintf(stdout,"\nclear %s\n",input);
	in_length = strlen(input);
	des_cbc_encrypt(input,cipher_text,(long) in_length,KS,ivec,1);
	fprintf(stdout,
		"\n\nencrypted ciphertext = (low to high bytes)");
	for (i = 0; i <= 7; i++) {
	    fprintf(stdout,"\n");
	    for (j = 0; j <= 7; j++)
		fprintf(stdout,"%02x ",cipher_text[i*8+j]);
	}
	des_cbc_encrypt(cipher_text, clear_text,
		    (long) in_length, KS, ivec, 0);
	fprintf(stdout,"\n\ndecrypted clear_text = %s",clear_text);

	fprintf(stdout,"\nclear %s\n",input);
	input = clear_text2;
	des_cbc_cksum(input,cipher_text,(long) strlen(input),KS,ivec,1);
	fprintf(stdout,
		"\n\nencrypted cksum = (low to high bytes)\n");
	for (j = 0; j <= 7; j++)
	    fprintf(stdout,"%02x ",cipher_text[j]);

	/* test out random number generator */
	for (i = 0; i <= 7; i++) {
	    des_random_key(cipher_text);
	    des_key_sched(cipher_text,KS);
	    fprintf(stdout,
		    "\n\nrandom key = (low to high bytes)\n");
	    for (j = 0; j<=7; j++)
		fprintf(stdout,"%02x ",cipher_text[j]);
	}
    }
    else {
	if (vflag)
	    fprintf(stdout,"\nclear %s\n",input);
	do_encrypt(input,cipher_text);
	do_decrypt(clear_text,cipher_text);
    }
}

flip(array)
    char *array;
{
    register old,new,i,j;
    /* flips the bit order within each byte from 0 lsb to 0 msb */
    for (i = 0; i <= 7; i++) {
	old = *array;
	new = 0;
	for (j = 0; j <= 7; j++) {
	    if (old & 01) new = new | 01;
	    if (j < 7) {
		old = old >> 1;
		new = new << 1;
	    }
	}
	*array = new;
	array++;
    }
}

do_encrypt(in,out)
    char    *in;
    char    *out;
{
    for (i = 1; i <= nflag; i++) {
	des_ecb_encrypt(in,out,KS,1);
	if (vflag) {
	    fprintf(stdout,"\nclear %s\n",in);
	    for (j = 0; j <= 7; j++)
		fprintf(stdout,"%02 X ",in[j] & 0xff);
	    fprintf(stdout,"\tcipher ");
	    for (j = 0; j<=7; j++)
		fprintf(stdout,"%02X ",out[j] & 0xff);
	}
    }
}

do_decrypt(in,out)
    char    *out;
    char    *in;
    /* try to invert it */
{
    for (i = 1; i <= nflag; i++) {
	des_ecb_encrypt(out,in,KS,0);
	if (vflag) {
	    fprintf(stdout,"\nclear %s\n",in);
	    for (j = 0; j <= 7; j++)
		fprintf(stdout,"%02X ",in[j] & 0xff);
	    fprintf(stdout,"\tcipher ");
	    for (j = 0; j<=7; j++)
		fprintf(stdout,"%02X ",out[j] & 0xff);
	}
    }
}
@


4.6
log
@Copyright notice, etc.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
d16 1
a16 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
d31 5
a35 5
extern int string_to_key();
extern int key_sched();
extern int ecb_encrypt();
extern int cbc_encrypt();
extern int pcbc_encrypt();
d42 2
a43 2
int debug ;
Key_schedule KS;
d51 3
a53 3
C_Block default_key = { 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef };
C_Block s_key;
C_Block default_ivec = { 0x12,0x34,0x56,0x78,0x90,0xab,0xcd,0xef };
d55 1
a55 1
C_Block zero_key = {1};
d80 1
a80 1
		debug=1;
d125 1
a125 1
	key_sched(default_key,KS);
d130 2
a131 2
	/*string_to_key(argv[0],s_key); */
	string_to_key("test",s_key);
d137 1
a137 1
	string_to_key("test",s_key);
d143 1
a143 1
	key_sched(s_key,KS);
d152 1
a152 1
	cbc_encrypt(input,cipher_text,(long) in_length,KS,ivec,1);
d160 1
a160 1
	cbc_encrypt(cipher_text, clear_text,
d166 1
a166 1
	cbc_cksum(input,cipher_text,(long) strlen(input),KS,ivec,1);
d174 2
a175 2
	    random_key(cipher_text);
	    key_sched(cipher_text,KS);
d215 1
a215 1
	ecb_encrypt(in,out,KS,1);
d233 1
a233 1
	ecb_encrypt(out,in,KS,0);
@


4.5
log
@Fixed possible dereferencing of NULL pointer.
Programmer: Charley Marker.
Auditors: jon, jtkohl.
@
text
@d2 2
a3 3
 *	$Source: /mit/kerberos/src/lib/des/RCS/testit.c,v $
 *	$Author: steiner $
 *	$Locker:  $
d5 5
a9 5
 * This routine
 */


/*
d14 6
d26 2
a27 7
/* MIN_ARGC == MAX_ARGC ==>
 * required # args
 */
#ifndef lint
static char *rcsid_xxx_c =
    "$Header: testit.c,v 4.4 88/01/14 18:46:44 steiner Exp $";
#endif /* lint */
@


4.4
log
@Formatted.
Programmer: raeburn.
@
text
@d2 1
a2 1
 *	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/testit.c,v $
d26 1
a26 1
    "$Header: testit.c,v 4.3 87/09/10 16:17:46 steiner Exp $";
d74 1
a74 1
    while (argc-- > 0 && (*++argv)[0] == '-')
@


4.3
log
@Changed include files configuration and referencing.
@
text
@d1 2
a2 1
/*	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/testit.c,v $
d4 3
a6 29
 *	$Locker: steiner $
 *	$Log:	testit.c,v $
 * Revision 4.2  87/09/04  14:55:41  steiner
 * Changes for PC compatibility, from Jerry Saltzer.
 * 
 * Revision 1.3  87/01/13  17:20:42  wesommer
 * Un-checked in changes.
 * 
 * Revision 1.2  85/12/16  13:48:30  spm
 * *** empty log message ***
 * 
 * Revision 1.1  85/08/16  12:47:48  spm
 * Initial revision
 * 
 * Revision 1.2  85/08/12  13:38:15  spm
 * works
 * 
 * Revision 1.1  85/08/11  14:14:27  spm
 * Initial revision
 * 
 * Revision 1.2  85/08/02  16:01:07  spm
 * ok
 * 
 * Revision 1.1  85/07/17  14:31:14  spm
 * Initial revision
 * 
 * 
 * 
 *	This routine ...
d10 3
a12 2
/*	exit returns 	 0 ==> success
 *			-1 ==> error
d15 3
a17 3
# include	<stdio.h>
# include	<errno.h>
# include	<des.h>
d19 9
a27 8
# define	MIN_ARGC	0	/* min # args, not incl flags */
# define	MAX_ARGC	2	/* max # args, not incl flags */
					/* MIN_ARGC == MAX_ARGC ==>
					 * required # args		
					 */
#ifndef	lint
static char		*rcsid_xxx_c="$Header: testit.c,v 4.2 87/09/04 14:55:41 steiner Locked $";
#endif lint
d29 20
a48 20
extern 	char 	*errmsg();
extern 	int 	errno;
extern	int		string_to_key();
extern	int		key_sched();
extern	int		ecb_encrypt();
extern	int		cbc_encrypt();
extern	int		pcbc_encrypt();
char			*progname;
int				sflag;
int				vflag;
int				tflag;
int				nflag = 1000;
int				cflag;
int				debug ;
Key_schedule	KS;
unsigned char	cipher_text[64];
unsigned char	clear_text[64] = "Now is the time for all " ;
unsigned char	clear_text2[64] = "7654321 Now is the time for ";
unsigned char	clear_text3[64] = {2,0,0,0, 1,0,0,0};
unsigned char	*input;
d50 7
a56 7
/* 0x0123456789abcdef													   */
C_Block			default_key = { 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef };
C_Block			s_key;
C_Block			default_ivec = { 0x12,0x34,0x56,0x78,0x90,0xab,0xcd,0xef };
unsigned char	*ivec;
C_Block			zero_key = {1};
int				i,j;
a57 1

d59 2
a60 3
	int argc;
	char *argv[];

d62 1
a62 1
/*  Local Declarations	*/
d64 1
a64 1
	long	in_length;
d66 1
a66 1
	progname=argv[0];		/* salt away invoking program */
d68 5
a72 10
/* Assume a long is four bytes											   */
	if (sizeof(long) != 4) 
		{
		fprintf(stdout,"\nERROR,  size of long is %d",sizeof(long));
		exit(-1);
		}
	
	while (argc-- > 0 && (*++argv)[0] == '-')
	   for (i=1; argv[0][i] != '\0'; i++) {
		switch (argv[0][i]) {
d74 3
a76 4
	/*	debug flag			*/
		case 'd':
			debug=1;
			continue;
d78 4
a81 4
	/* verbose flag														   */
		case 'v':
			vflag = 1;
			continue;
d83 4
a86 4
	/*	cbc flag			*/
		case 'c':
			cflag=1;
			continue;
d88 4
a91 4
	/* string to key only flag											   */
		case	's':
			sflag = 1;
			continue;
d93 4
a96 4
	/*	test flag - use known key and cleartext		*/
		case 't':
			tflag=1;
			continue;
d98 4
a101 5
	/*  iteration count */
		case 'n':
			sscanf(&argv[0][i+1],"%d",&nflag);
			argv[0][i+1] = '\0';	/* force it to stop */
			break;
d103 5
a107 6
		default :
			printf("%s: illegal flag \"%c\" ",
				progname,argv[0][i]);
			exit(1);
		}
	   };
d109 3
a111 2
	if (argc < MIN_ARGC || argc >MAX_ARGC) {
		printf("Usage: xxx [-xxx]  xxx xxx\n");
d113 2
a114 1
	}
d116 4
a119 1
	/*	argv[0] now points to first non-option arg, if any	*/
d121 1
a121 29
	if (tflag)
		{
		/* use known input and key										   */
		key_sched(default_key,KS);
		input = clear_text;
		ivec = (unsigned char *) default_ivec;
		}
	else
		{
		/*string_to_key(argv[0],s_key);							   */
		string_to_key("test",s_key);
		if (vflag)
			{
			input = (unsigned char *) s_key;
			fprintf(stdout,"\nstring = %s, key = ",argv[0]);
			for (i = 0; i<=7 ; i++) fprintf(stdout,"%02x ",*input++);
			}
		string_to_key("test",s_key);
		if (vflag)
			{
			input = (unsigned char *) s_key;
			fprintf(stdout,"\nstring = %s, key = ",argv[0]);
			for (i = 0; i<=7 ; i++) fprintf(stdout,"%02x ",*input++);
			}
		key_sched(s_key,KS);	
		input = (unsigned char *) argv[1];
		ivec = (unsigned char *)  argv[2];
		}
	
d123 24
a146 16
		if (cflag)
			{
			fprintf(stdout,"\nclear %s\n",input);
			in_length = strlen(input);
			cbc_encrypt(input,cipher_text,(long) in_length,KS,ivec,1);
			fprintf(stdout,"\n\nencrypted ciphertext = (low to high bytes)");
			for (i = 0; i<= 7; i++)
				{
				fprintf(stdout,"\n");
				for (j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02x ",cipher_text[i*8+j]);
					}
				}
			cbc_encrypt(cipher_text,clear_text,(long) in_length,KS,ivec,0);
			fprintf(stdout,"\n\ndecrypted clear_text = %s",clear_text);
a147 28
			fprintf(stdout,"\nclear %s\n",input);
			input = clear_text2;
			cbc_cksum(input,cipher_text,(long) strlen(input),KS,ivec,1);
			fprintf(stdout,"\n\nencrypted cksum = (low to high bytes)\n");
			for (j = 0; j<=7; j++)
				{
				fprintf(stdout,"%02x ",cipher_text[j]);
				}
			/* test out random number generator							   */
			for (i =0;i<=7; i++)
				{
				random_key(cipher_text);
				key_sched(cipher_text,KS);
				fprintf(stdout,"\n\nrandom key = (low to high bytes)\n");
				for (j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02x ",cipher_text[j]);
					}
				}
			}
		else
			{
			if (vflag)	fprintf(stdout,"\nclear %s\n",input);
			do_encrypt(input,cipher_text);
			do_decrypt(clear_text,cipher_text);
			}
		
}		
d149 14
d164 7
d172 18
d191 1
a191 1
	char *array;
d193 15
a207 18
	register	old,new,i,j;
	/* flips the bit order within each byte from 0 lsb to 0 msb			   */
	for (i = 0; i<=7; i++)	
		{
		old = *array;
		new = 0;
		for (j = 0; j<=7; j++)
			{
			if (old & 01) new = new | 01;
			if (j <7)
				{
				old = old >> 1;
				new = new << 1;
				}
			}
		*array = new;		
		array++;
		}		
d211 2
a212 2
	char	*in;
	char	*out;
d214 11
a224 17
		for (i =1; i<=nflag; i++)
			{
			ecb_encrypt(in,out,KS,1);
			if (vflag)
				{
				fprintf(stdout,"\nclear %s\n",in);
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02 X ",in[j] & 0xff);
					}
				fprintf(stdout,"\tcipher ");
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02X ",out[j] & 0xff);
					}
			}	
		}
d228 15
a242 21
	char	*out;
	char	*in;
			/* try to invert it											   */
{		for (i =1; i<=nflag; i++)
			{
			ecb_encrypt(out,in,KS,0);
			if (vflag)
				{
				fprintf(stdout,"\nclear %s\n",in);
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02X ",in[j] & 0xff);
					}
				fprintf(stdout,"\tcipher ");
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02X ",out[j] & 0xff);
					}
				}
				
			}
a243 1

@


4.2
log
@Changes for PC compatibility, from Jerry Saltzer.
@
text
@d1 3
a3 3
/*	$Source: /source/kerberos/lib/des/bsd/RCS/testit.c,v $
 *	$Author: wesommer $
 *	$Locker:  $
d5 3
d41 1
a41 1
# include	"./des.h"
d49 1
a49 1
static char		*rcsid_xxx_c="$Header: testit.c,v 1.3 87/01/13 17:20:42 wesommer Exp $";
@


4.1
log
@No change; starting version 4.
@
text
@d1 1
a1 1
/*	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/testit.c,v $
d3 1
a3 1
 *	$Locker: steiner $
a36 1
# include	<signal.h>
a37 1
# include	<strings.h>
d46 1
a46 1
static char		*rcsid_xxx_c="$Header: testit.c,v 1.3 87/01/13 17:20:42 steiner Locked $";
@


1.3
log
@Un-checked in changes.
@
text
@d1 3
a3 3
/*	$Source: /mit/projects/auth/src/lib/des/vax/RCS/testit.c,v $
 *	$Author: spm $
 *	$Locker:  $
d5 3
d48 1
a48 1
static char		*rcsid_xxx_c="$Header: testit.c,v 1.2 85/12/16 13:48:30 spm Exp $";
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Source: /usr/mit/spm/auth/deslib/RCS/testit.c,v $
d3 1
a3 1
 *	$Locker: spm $
d5 3
d45 1
a45 1
static char		*rcsid_xxx_c="$Header: testit.c,v 1.1 85/08/16 12:47:48 spm Exp $";
d51 1
a51 1
extern	int		des_set_key();
d54 1
a54 1
extern	long	swap_bits();
d85 1
a85 1
	int	in_length;
d148 1
a148 1
		des_set_key(default_key,KS);
d169 1
a169 1
		des_set_key(s_key,KS);	
d179 1
a179 1
			cbc_encrypt(input,cipher_text,in_length,KS,ivec,1);
d189 1
a189 1
			cbc_encrypt(cipher_text,clear_text,in_length,KS,ivec,0);
d194 1
a194 1
			cbc_cksum(input,cipher_text,strlen(input),KS,ivec,1);
d204 1
a204 1
				des_set_key(cipher_text,KS);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 2

/*	$Source: /usr/mit/spm/auth/test/RCS/test.c,v $
d4 4
a7 1
 *	$Log:	test.c,v $
d33 2
a34 1
# include	"des.h"
d42 1
a42 1
static char		*rcsid_xxx_c="$Header: test.c,v 1.2 85/08/12 13:38:15 spm Exp $";
d47 2
a48 1
extern	int		set_key();
d50 1
a50 1
extern	int		cbc_des();
d54 1
a57 2
int				vflag;
int				pid;
d61 2
a62 2
unsigned char	clear_text[64] = "Now is the time for all ." ;
unsigned char	clear_text2[64] = {1,0,0,0, 2,0,0,0};
d67 3
a69 2
unsigned char	default_key[8] = { 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef };
unsigned char	default_ivec[8] = { 0x12,0x34,0x56,0x78,0x90,0xab,0xcd,0xef };
d71 1
a71 1
unsigned char	zero_key[8] = {1};
d74 1
d82 2
d102 5
d112 3
a114 3
	/*	verbose flag			*/
		case 'v':
			vflag=1;
d145 1
a145 1
		set_key(default_key,KS);
d147 1
a147 1
		ivec = default_ivec;
d151 16
a166 1
		set_key(argv[0],KS);	
d174 3
a176 1
			cbc_des(input,cipher_text,25,KS,ivec,1);
d186 1
a186 1
			cbc_des(cipher_text,clear_text,25,KS,ivec,0);
d188 20
d211 1
d246 2
a247 1
{		for (i =1; i<=nflag; i++)
d250 1
a250 1
			if (debug)
d273 1
a273 1
			if (debug)
@
