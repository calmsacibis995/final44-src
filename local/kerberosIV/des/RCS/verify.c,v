head     4.11;
branch   ;
access   ;
symbols  PATCH8:4.11 PATCH7:4.9 KPATCH6:4.9 ASRSNAP1001:4.9 PATCH5:4.8 ADAMS_NSA:4.8 KPATCH4:4.8 KPATCH3:4.8 KPATCH2:4.8 KREL1:4.8 BETA5/24/88:4.7;
locks    ; strict;
comment  @ * @;


4.11
date     90.01.02.13.47.06;  author jtkohl;  state Exp;
branches ;
next     4.10;

4.10
date     89.12.19.13.36.18;  author jtkohl;  state Exp;
branches ;
next     4.9;

4.9
date     89.08.30.11.12.51;  author jtkohl;  state Exp;
branches ;
next     4.8;

4.8
date     88.11.15.11.39.14;  author jtkohl;  state Exp;
branches ;
next     4.7;

4.7
date     88.02.24.14.23.51;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.05.19.15.27;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.01.14.18.47.40;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     88.01.14.17.50.28;  author raeburn;  state Exp;
branches ;
next     4.3;

4.3
date     87.09.10.16.17.50;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.04.14.55.44;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.42.43;  author steiner;  state Exp;
branches ;
next     1.4;

1.4
date     86.08.08.14.55.42;  author spm;  state Exp;
branches ;
next     1.3;

1.3
date     86.08.08.14.52.11;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     86.08.08.14.49.48;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.12.16.13.59.56;  author spm;  state Exp;
branches ;
next     ;


desc
@@


4.11
log
@change $Header$ to $Id$
@
text
@/*
 * $Source: /afs/athena.mit.edu/astaff/project/kerberos/src/lib/des/RCS/verify.c,v $
 * $Author: jtkohl $
 *
 * Copyright 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * Program to test the correctness of the DES library
 * implementation.
 *
 * exit returns	 0 ==> success
 * 		-1 ==> error
 */

#ifndef	lint
static char rcsid_verify_c[] =
"$Id: /afs/athena.mit.edu/astaff/project/kerberos/src/lib/des/RCS/verify.c,v 4.10 89/12/19 13:36:18 jtkohl Exp Locker: jtkohl $";
#endif	lint

#include <mit-copyright.h>
#include <stdio.h>
#include <errno.h>
#include <des.h>

extern char *errmsg();
extern int errno;
extern int des_string_to_key();
extern int des_key_sched();
extern int des_ecb_encrypt();
extern int des_cbc_encrypt();
extern exit();
char *progname;
int nflag = 2;
int vflag;
int mflag;
int zflag;
int pid;
int des_debug;
des_key_schedule KS;
unsigned char cipher_text[64];
unsigned char clear_text[64] = "Now is the time for all " ;
unsigned char clear_text2[64] = "7654321 Now is the time for ";
unsigned char clear_text3[64] = {2,0,0,0, 1,0,0,0};
unsigned char output[64];
unsigned char zero_text[8] = {0x0,0,0,0,0,0,0,0};
unsigned char msb_text[8] = {0x0,0,0,0, 0,0,0,0x40}; /* to ANSI MSB */
unsigned char *input;

/* 0x0123456789abcdef */
unsigned char default_key[8] = {
    0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef
};
unsigned char key2[8] = { 0x08,0x19,0x2a,0x3b,0x4c,0x5d,0x6e,0x7f };
unsigned char key3[8] = { 0x80,1,1,1,1,1,1,1 };
des_cblock s_key;
unsigned char default_ivec[8] = {
    0x12,0x34,0x56,0x78,0x90,0xab,0xcd,0xef
};
unsigned char *ivec;
unsigned char zero_key[8] = {1,1,1,1,1,1,1,1}; /* just parity bits */
int i,j;

/*
 * Can also add :
 * plaintext = 0, key = 0, cipher = 0x8ca64de9c1b123a7 (or is it a 1?)
 */

main(argc,argv)
    int argc;
    char *argv[];
{
    /* Local Declarations */
    long in_length;

    progname=argv[0];		/* salt away invoking program */

    /* Assume a long is four bytes */
    if (sizeof(long) != 4) {
	printf("\nERROR,  size of long is %d",sizeof(long));
	exit(-1);
    }

    while (--argc > 0 && (*++argv)[0] == '-')
	for (i=1; argv[0][i] != '\0'; i++) {
	    switch (argv[0][i]) {

		/* debug flag */
	    case 'd':
		des_debug=3;
		continue;

	    case 'z':
		zflag = 1;
		continue;

	    case 'm':
		mflag = 1;
		continue;

	    default:
		printf("%s: illegal flag \"%c\" ",
		       progname,argv[0][i]);
		exit(1);
	    }
	};

    if (argc) {
	fprintf(stderr, "Usage: %s [-dmz]\n", progname);
	exit(1);
    }

    /* use known input and key */

    /* ECB zero text zero key */
    if (zflag) {
	input = zero_text;
	des_key_sched(zero_key,KS);
	printf("plaintext = key = 0, cipher = 0x8ca64de9c1b123a7\n");
	do_encrypt(input,cipher_text);
	printf("\tcipher  = (low to high bytes)\n\t\t");
	for (j = 0; j<=7; j++)
	    printf("%02x ",cipher_text[j]);
	printf("\n");
	do_decrypt(output,cipher_text);
	return(0);
    }

    if (mflag) {
	input = msb_text;
	des_key_sched(key3,KS);
	printf("plaintext = 0x00 00 00 00 00 00 00 40, ");
	printf("key = 0, cipher = 0x??\n");
	do_encrypt(input,cipher_text);
	printf("\tcipher  = (low to high bytes)\n\t\t");
	for (j = 0; j<=7; j++) {
	    printf("%02x ",cipher_text[j]);
	}
	printf("\n");
	do_decrypt(output,cipher_text);
	return(0);
    }

    /* ECB mode Davies and Price */
    {
	input = zero_text;
	des_key_sched(key2,KS);
	printf("Examples per FIPS publication 81, keys ivs and cipher\n");
	printf("in hex.  These are the correct answers, see below for\n");
	printf("the actual answers.\n\n");
	printf("Examples per Davies and Price.\n\n");
	printf("EXAMPLE ECB\tkey = 08192a3b4c5d6e7f\n");
	printf("\tclear = 0\n");
	printf("\tcipher = 25 dd ac 3e 96 17 64 67\n");
	printf("ACTUAL ECB\n");
	printf("\tclear \"%s\"\n", input);
	do_encrypt(input,cipher_text);
	printf("\tcipher  = (low to high bytes)\n\t\t");
	for (j = 0; j<=7; j++)
	    printf("%02x ",cipher_text[j]);
	printf("\n\n");
	do_decrypt(output,cipher_text);
    }

    /* ECB mode */
    {
	des_key_sched(default_key,KS);
	input = clear_text;
	ivec = default_ivec;
	printf("EXAMPLE ECB\tkey = 0123456789abcdef\n");
	printf("\tclear = \"Now is the time for all \"\n");
	printf("\tcipher = 3f a4 0e 8a 98 4d 48 15 ...\n");
	printf("ACTUAL ECB\n\tclear \"%s\"",input);
	do_encrypt(input,cipher_text);
	printf("\n\tcipher	= (low to high bytes)\n\t\t");
	for (j = 0; j<=7; j++) {
	    printf("%02x ",cipher_text[j]);
	}
	printf("\n\n");
	do_decrypt(output,cipher_text);
    }

    /* CBC mode */
    printf("EXAMPLE CBC\tkey = 0123456789abcdef");
    printf("\tiv = 1234567890abcdef\n");
    printf("\tclear = \"Now is the time for all \"\n");
    printf("\tcipher =\te5 c7 cd de 87 2b f2 7c\n");
    printf("\t\t\t43 e9 34 00 8c 38 9c 0f\n");
    printf("\t\t\t68 37 88 49 9a 7c 05 f6\n");

    printf("ACTUAL CBC\n\tclear \"%s\"\n",input);
    in_length = strlen(input);
    des_cbc_encrypt(input,cipher_text,(long) in_length,KS,ivec,1);
    printf("\tciphertext = (low to high bytes)\n");
    for (i = 0; i <= 7; i++) {
	printf("\t\t");
	for (j = 0; j <= 7; j++) {
	    printf("%02x ",cipher_text[i*8+j]);
	}
	printf("\n");
    }
    des_cbc_encrypt(cipher_text,clear_text,(long) in_length,KS,ivec,0);
    printf("\tdecrypted clear_text = \"%s\"\n",clear_text);

    printf("EXAMPLE CBC checksum");
    printf("\tkey =  0123456789abcdef\tiv =  1234567890abcdef\n");
    printf("\tclear =\t\t\"7654321 Now is the time for \"\n");
    printf("\tchecksum\t58 d2 e7 7e 86 06 27 33, ");
    printf("or some part thereof\n");
    input = clear_text2;
    des_cbc_cksum(input,cipher_text,(long) strlen(input),KS,ivec,1);
    printf("ACTUAL CBC checksum\n");
    printf("\t\tencrypted cksum = (low to high bytes)\n\t\t");
    for (j = 0; j<=7; j++)
	printf("%02x ",cipher_text[j]);
    printf("\n\n");
    exit(0);
}

flip(array)
    char *array;
{
    register old,new,i,j;
    /* flips the bit order within each byte from 0 lsb to 0 msb */
    for (i = 0; i<=7; i++) {
	old = *array;
	new = 0;
	for (j = 0; j<=7; j++) {
	    if (old & 01)
		new = new | 01;
	    if (j < 7) {
		old = old >> 1;
		new = new << 1;
	    }
	}
	*array = new;
	array++;
    }
}

do_encrypt(in,out)
    char *in;
    char *out;
{
    for (i =1; i<=nflag; i++) {
	des_ecb_encrypt(in,out,KS,1);
	if (des_debug) {
	    printf("\nclear %s\n",in);
	    for (j = 0; j<=7; j++)
		printf("%02 X ",in[j] & 0xff);
	    printf("\tcipher ");
	    for (j = 0; j<=7; j++)
		printf("%02X ",out[j] & 0xff);
	}
    }
}

do_decrypt(in,out)
    char *out;
    char *in;
    /* try to invert it */
{
    for (i =1; i<=nflag; i++) {
	des_ecb_encrypt(out,in,KS,0);
	if (des_debug) {
	    printf("clear %s\n",in);
	    for (j = 0; j<=7; j++)
		printf("%02X ",in[j] & 0xff);
	    printf("\tcipher ");
	    for (j = 0; j<=7; j++)
		printf("%02X ",out[j] & 0xff);
	}
    }
}
@


4.10
log
@fix return values to not be stack garbage
from from [Steven J. Lunt] at Bellcore
@
text
@d19 1
a19 1
"$Header: /afs/athena.mit.edu/astaff/project/kerberos/src/lib/des/RCS/verify.c,v 4.9 89/08/30 11:12:51 jtkohl Exp Locker: jtkohl $";
@


4.9
log
@Programmer: Kevin Fall
Auditor: John Kohl
add exit(0) to main()
@
text
@d19 1
a19 1
"$Header: /afs/athena.mit.edu/astaff/project/kerberos/src/lib/des/RCS/verify.c,v 4.8 88/11/15 11:39:14 jtkohl Exp Locker: jtkohl $";
d127 1
a127 1
	return;
d142 1
a142 1
	return;
@


4.8
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes:
rename routines to des_xxx     
rename structures likewise
use local variables and static routines where appropriate
convert to des_internal.h       
make debug routines consistent
@
text
@d2 2
a3 2
 * $Source: //ra/mit/wesommer/des/RCS/verify.c,v $
 * $Author: steiner $
d19 1
a19 1
"$Header: verify.c,v 4.7 88/02/24 14:23:51 steiner Exp $";
d218 1
@


4.7
log
@Copyright notice, etc.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
d19 1
a19 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
d29 4
a32 4
extern int string_to_key();
extern int key_sched();
extern int ecb_encrypt();
extern int cbc_encrypt();
d41 1
a41 1
Key_schedule KS;
d57 1
a57 1
C_Block s_key;
d119 1
a119 1
	key_sched(zero_key,KS);
d132 1
a132 1
	key_sched(key3,KS);
d148 1
a148 1
	key_sched(key2,KS);
d168 1
a168 1
	key_sched(default_key,KS);
d194 1
a194 1
    cbc_encrypt(input,cipher_text,(long) in_length,KS,ivec,1);
d203 1
a203 1
    cbc_encrypt(cipher_text,clear_text,(long) in_length,KS,ivec,0);
d212 1
a212 1
    cbc_cksum(input,cipher_text,(long) strlen(input),KS,ivec,1);
d246 1
a246 1
	ecb_encrypt(in,out,KS,1);
d264 1
a264 1
	ecb_encrypt(out,in,KS,0);
@


4.6
log
@Fixed possible dereferencing of NULL pointer.
Programmer: Charley Marker.
Auditors: jon, jtkohl.
@
text
@d2 2
a3 3
 *	$Source: /mit/kerberos/src/lib/des/RCS/verify.c,v $
 *	$Author: steiner $
 *	$Locker:  $
d5 10
a14 2
 *	Program to test the correctness of the DES library
 *	implementation.
d17 4
a20 4
/*
 *	exit returns	 0 ==> success
 *			-1 ==> error
 */
d22 1
a25 5

#ifndef lint
static char rcsid[] =
    "$Header: verify.c,v 4.5 88/01/14 18:47:40 steiner Exp $";
#endif /* lint */
@


4.5
log
@Formatted.
Programmer: raeburn.
@
text
@d2 1
a2 1
 *	$Source: /mit/kerberos/lib/des/RCS/verify.c,v $
d4 1
a4 1
 *	$Locker: raeburn $
d21 1
a21 1
    "$Header: verify.c,v 4.3 87/09/10 16:17:50 raeburn Locked $";
d82 1
a82 1
    while (argc-- > 0 && (*++argv)[0] == '-')
@


4.4
log
@Put text of messages inline.
@
text
@d2 1
a2 1
 * 	$Source: /mit/kerberos/lib/des/RCS/verify.c,v $
d5 1
a5 1
 * 
d11 1
a11 1
 *	exit returns 	 0 ==> success
d15 3
a17 3
#include	<stdio.h>
#include	<errno.h>
#include	<des.h>
d19 1
a19 1
#ifndef	lint
d21 2
a22 2
"$Header: verify.c,v 4.3 87/09/10 16:17:50 raeburn Locked $";
#endif lint
d24 6
a29 6
extern 	char *errmsg();
extern 	int errno;
extern	int string_to_key();
extern	int key_sched();
extern	int ecb_encrypt();
extern	int cbc_encrypt();
d38 9
a46 9
Key_schedule	KS;
unsigned char	cipher_text[64];
unsigned char	clear_text[64] = "Now is the time for all " ;
unsigned char	clear_text2[64] = "7654321 Now is the time for ";
unsigned char	clear_text3[64] = {2,0,0,0, 1,0,0,0};
unsigned char	output[64];
unsigned char	zero_text[8] = {0x0,0,0,0,0,0,0,0};
unsigned char	msb_text[8] = {0x0,0,0,0, 0,0,0,0x40}; /* to ANSI MSB*/
unsigned char	*input;
d49 1
a49 1
unsigned char	default_key[8] = {
d52 4
a55 4
unsigned char	key2[8] = { 0x08,0x19,0x2a,0x3b,0x4c,0x5d,0x6e,0x7f };
unsigned char	key3[8] = { 0x80,1,1,1,1,1,1,1 };
C_Block			s_key;
unsigned char	default_ivec[8] = {
d58 3
a60 3
unsigned char	*ivec;
unsigned char	zero_key[8] = {1,1,1,1,1,1,1,1}; /* just parity bits */
int				i,j;
a61 22
char msg[16][90] = 
{
    "Examples per FIPS publication 81, keys ivs and cipher in hex\n",
    "These are the correct answers, see below for the actual answers!\n\n",
    "Example per Davies and Price\n\n\n",
    "EXAMPLE ECB\tkey = 08192a3b4c5d6e7f\n\tclear = 0\n",
    "\tcipher = 25 dd ac 3e 96 17 64 67\n",
"EXAMPLE ECB\tkey = 0123456789abcdef\n\tclear = \"Now is the time for all \"\n\n",
    "\tcipher = 3f a4 0e 8a 98 4d 48 15 ...\n",

    "EXAMPLE CBC\tkey = 0123456789abcdef\tiv = 1234567890abcdef\n\n\n\n",
    "\tclear = \"Now is the time for all \"\n",
    "\n\tcipher =\te5 c7 cd de 87 2b f2 7c",
    "\n\t\t\t43 e9 34 00 8c 38 9c 0f",
    "\n\t\t\t68 37 88 49 9a 7c 05 f6\n",

    "\n\n\n\nEXAMPLE CBC checksum\tKey =  0123456789abcdef\tIV =  1234567890abcdef",
    "\n\tclear =\t\t\"7654321 Now is the time for \"",
    "\n\tchecksum\t58 d2 e7 7e 86 06 27 33\t or some part thereof\n\n",
    "\nACTUAL RESULTS FOLLOW\n\n"
};

d64 1
a64 1
 * plaintext = 0, key = 0, cipher = 0x8ca64de9c1b123a7(or is it a 1)
d83 1
a83 1
        for (i=1; argv[0][i] != '\0'; i++) {
d90 1
a90 1
		
d117 1
a117 1
	printf("plaintext = 0x0, key = 0, cipher = 0x8ca64de9c1b123a7\n");
d119 2
a120 2
	printf("\n\tcipher  = (low to high bytes)\n\t\t");
	for (j = 0; j<=7; j++) {
d122 1
a122 2
	}
	printf( "\n");
d130 2
a131 2
	printf(
	    "\nplaintext = 0x00 00 00 00 00 00 00 40, key = 0, cipher = 0x??");
d133 1
a133 1
	printf("\n\tcipher  = (low to high bytes)\n\t\t");
d142 1
a142 1
/* ECB mode Davies and Price */
d157 1
a157 1
	for (j = 0; j<=7; j++) {
a158 1
	}
d163 1
a163 1
/* ECB mode */
d173 1
a173 1
	printf("\n\tcipher  = (low to high bytes)\n\t\t");
d181 1
a181 1
/* CBC mode */
d206 2
a207 1
    printf("\tchecksum\t58 d2 e7 7e 86 06 27 33\t or some part thereof\n");
d212 1
a212 1
    for (j = 0; j<=7; j++) {
a213 1
    }
d226 2
a227 1
	    if (old & 01) new = new | 01;
d233 1
a233 1
	*array = new;		
d235 1
a235 1
    }		
d246 1
a246 1
	    for ( j = 0; j<=7; j++) {
a247 1
	    }
d249 1
a249 1
	    for ( j = 0; j<=7; j++) {
d251 1
a251 2
	    }
	}	
d264 1
a264 1
	    for ( j = 0; j<=7; j++) {
a265 1
	    }
d267 1
a267 1
	    for ( j = 0; j<=7; j++) {
a268 1
	    }
@


4.3
log
@Changed include files configuration and referencing.
@
text
@d1 2
a2 1
/*	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/verify.c,v $
d4 1
a4 4
 *	$Locker: steiner $
 *	$Log:	verify.c,v $
 * Revision 4.2  87/09/04  14:55:44  steiner
 * Changes for PC compatibility, from Jerry Saltzer.
d6 2
a7 27
 * Revision 1.4  86/08/08  14:55:42  spm
 * disable debugging #ifdef notdef
 * 
 * Revision 1.3  86/08/08  14:52:11  spm
 * add new mflag for debugging
 * 
 * Revision 1.1  85/12/16  13:59:56  spm
 * Initial revision
 * 
 * Revision 1.1  85/08/16  12:47:48  spm
 * Initial revision
 * 
 * Revision 1.2  85/08/12  13:38:15  spm
 * works
 * 
 * Revision 1.1  85/08/11  14:14:27  spm
 * Initial revision
 * 
 * Revision 1.2  85/08/02  16:01:07  spm
 * ok
 * 
 * Revision 1.1  85/07/17  14:31:14  spm
 * Initial revision
 * 
 * 
 * 
 *	This routine ...
d10 2
a11 2

/*	exit returns 	 0 ==> success
d15 3
a17 3
# include	<stdio.h>
# include	<errno.h>
# include	<des.h>
a18 5
# define	MIN_ARGC	0	/* min # args, not incl flags */
# define	MAX_ARGC	2	/* max # args, not incl flags */
					/* MIN_ARGC == MAX_ARGC ==>
					 * required # args		
					 */
d20 2
a21 1
static char		*rcsid_xxx_c="$Header: verify.c,v 4.2 87/09/04 14:55:44 steiner Locked $";
d24 14
a37 13
extern 	char 	*errmsg();
extern 	int 	errno;
extern	int		string_to_key();
extern	int		key_sched();
extern	int		ecb_encrypt();
extern	int		cbc_encrypt();
char			*progname;
int				nflag = 2;
int				vflag;
int				mflag;
int				zflag;
int				pid;
int				debug ;
d48 4
a51 2
/* 0x0123456789abcdef													   */
unsigned char	default_key[8] = { 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef };
d55 3
a57 1
unsigned char	default_ivec[8] = { 0x12,0x34,0x56,0x78,0x90,0xab,0xcd,0xef };
d59 1
a59 1
unsigned char	zero_key[8] = {1,1,1,1,1,1,1,1};	/* just parity bits	   */
d62 1
a62 1
char	msg[16][90] = 
d64 7
a70 7
	"\nExamples per FIPS publication 81, keys ivs and cipher in hex",
	"\nThese are the correct answers, see below for the actual answers!\n",
	"\n\n\nExample per Davies and Price",
	"\nEXAMPLE ECB\tkey = 08192a3b4c5d6e7f\n\tclear = 0",
	"\n\tcipher = 25 dd ac 3e 96 17 64 67",
"\n\n\n\nEXAMPLE ECB\tkey = 0123456789abcdef\n\tclear = \"Now is the time for all \"",
	"\n\tcipher = 3f a4 0e 8a 98 4d 48 15 ...",
d72 5
a76 5
	"\n\n\n\nEXAMPLE CBC\tkey = 0123456789abcdef\tiv = 1234567890abcdef",
	"\n\tclear = \"Now is the time for all \"",
	"\n\tcipher =\te5 c7 cd de 87 2b f2 7c",
	"\n\t\t\t43 e9 34 00 8c 38 9c 0f",
	"\n\t\t\t68 37 88 49 9a 7c 05 f6\n",
d78 4
a81 4
	"\n\n\n\nEXAMPLE CBC checksum\tKey =  0123456789abcdef\tIV =  1234567890abcdef",
	"\n\tclear =\t\t\"7654321 Now is the time for \"",
	"\n\tchecksum\t58 d2 e7 7e 86 06 27 33\t or some part thereof\n\n",
	"\nACTUAL RESULTS FOLLOW\n\n"
d84 2
a85 1
/* Can also add :
d90 2
a91 3
	int argc;
	char *argv[];

d93 2
a94 1
/*  Local Declarations	*/
d96 1
a96 1
	long	in_length;
d98 5
a102 1
	progname=argv[0];		/* salt away invoking program */
d104 3
a106 10
/* Assume a long is four bytes											   */
	if (sizeof(long) != 4) 
		{
		fprintf(stdout,"\nERROR,  size of long is %d",sizeof(long));
		exit(-1);
		}
	
	while (argc-- > 0 && (*++argv)[0] == '-')
	   for (i=1; argv[0][i] != '\0'; i++) {
		switch (argv[0][i]) {
d108 8
a115 4
	/*	debug flag			*/
		case 'd':
			debug=3;
			continue;
d117 3
d121 6
a126 3
		case 'z':
			zflag = 1;
			continue;
d128 4
a131 3
		case 'm':
			mflag = 1;
			continue;
d133 1
a133 6
		default :
			printf("%s: illegal flag \"%c\" ",
				progname,argv[0][i]);
			exit(1);
		}
	   };
d135 9
a143 3
	if (argc < MIN_ARGC || argc >MAX_ARGC) {
		printf("Usage: xxx [-xxx]  xxx xxx\n");
		exit(1);
d145 4
d150 14
d165 21
d187 17
a203 1
	/*	argv[0] now points to first non-option arg, if any	*/
d205 7
a211 1
		/* use known input and key										   */
d213 13
a225 17
/* ECB zero text zero key												   */
		if (zflag)
		{
		input = zero_text;
		key_sched(zero_key,KS);
		printf(
	"\nplaintext = 0x0, key = 0, cipher = 0x8ca64de9c1b123a7");
		do_encrypt(input,cipher_text);
		fprintf(stdout,"\n\tcipher  = (low to high bytes)\n\t\t");
		for (j = 0; j<=7; j++)
			{
			fprintf(stdout,"%02x ",cipher_text[j]);
			}
		exit;
		do_decrypt(output,cipher_text);
		return;
		}
d227 13
a239 16
		if (mflag)
		{
		input = msb_text;
		key_sched(key3,KS);
		printf(
	"\nplaintext = 0x00 00 00 00 00 00 00 40, key = 0, cipher = 0x??");
		do_encrypt(input,cipher_text);
		fprintf(stdout,"\n\tcipher  = (low to high bytes)\n\t\t");
		for (j = 0; j<=7; j++)
			{
			fprintf(stdout,"%02x ",cipher_text[j]);
			}
		exit;
		do_decrypt(output,cipher_text);
		return;
		}
a240 67
/* ECB mode Davies and Price																   */
		{
		input = zero_text;
		key_sched(key2,KS);
		for (i = 0; i<=4; i++)	fprintf(stdout,"%s",msg[i]);
		fprintf(stdout,"\n\nACTUAL ECB\n\tclear \"%s\"",input);
		do_encrypt(input,cipher_text);
		fprintf(stdout,"\n\tcipher  = (low to high bytes)\n\t\t");
		for (j = 0; j<=7; j++)
			{
			fprintf(stdout,"%02x ",cipher_text[j]);
			}
		do_decrypt(output,cipher_text);
		}



/* ECB mode																   */
		{
		key_sched(default_key,KS);
		input = clear_text;
		ivec = default_ivec;
		for (i = 5; i<=6; i++)	fprintf(stdout,"%s",msg[i]);
		fprintf(stdout,"\n\nACTUAL ECB\n\tclear \"%s\"",input);
		do_encrypt(input,cipher_text);
		fprintf(stdout,"\n\tcipher  = (low to high bytes)\n\t\t");
		for (j = 0; j<=7; j++)
			{
			fprintf(stdout,"%02x ",cipher_text[j]);
			}
		do_decrypt(output,cipher_text);
		}
	

/* CBC mode																   */
		for (i = 7; i<=11; i++)	fprintf(stdout,"%s",msg[i]);

		fprintf(stdout,"\n\nACTUAL CBC\n\tclear \"%s\"",input);
		in_length = strlen(input);
		cbc_encrypt(input,cipher_text,(long) in_length,KS,ivec,1);
		fprintf(stdout,"\n\tciphertext = (low to high bytes)");
		for (i = 0; i<= 7; i++)
			{
			fprintf(stdout,"\n\t\t");
			for (j = 0; j<=7; j++)
				{
				fprintf(stdout,"%02x ",cipher_text[i*8+j]);
				}
			}
		cbc_encrypt(cipher_text,clear_text,(long) in_length,KS,ivec,0);
		fprintf(stdout,"\n\ndecrypted clear_text = \"%s\"",clear_text);

		for (i = 12; i<=15; i++)	fprintf(stdout,"%s",msg[i]);
		input = clear_text2;
		cbc_cksum(input,cipher_text,(long) strlen(input),KS,ivec,1);
		fprintf(stdout,
"\nACTUAL CBC checksum\n\t\tencrypted cksum = (low to high bytes)\n\t\t");
		for (j = 0; j<=7; j++)
			{
			fprintf(stdout,"%02x ",cipher_text[j]);
			}
		fprintf(stdout,"\n\n");
		
}		



d242 1
a242 1
	char *array;
d244 15
a258 18
	register	old,new,i,j;
	/* flips the bit order within each byte from 0 lsb to 0 msb			   */
	for (i = 0; i<=7; i++)	
		{
		old = *array;
		new = 0;
		for (j = 0; j<=7; j++)
			{
			if (old & 01) new = new | 01;
			if (j <7)
				{
				old = old >> 1;
				new = new << 1;
				}
			}
		*array = new;		
		array++;
		}		
d262 2
a263 2
	char	*in;
	char	*out;
d265 13
a277 17
		for (i =1; i<=nflag; i++)
			{
			ecb_encrypt(in,out,KS,1);
			if (debug)
				{
				fprintf(stdout,"\nclear %s\n",in);
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02 X ",in[j] & 0xff);
					}
				fprintf(stdout,"\tcipher ");
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02X ",out[j] & 0xff);
					}
			}	
		}
d281 17
a297 21
	char	*out;
	char	*in;
			/* try to invert it											   */
{		for (i =1; i<=nflag; i++)
			{
			ecb_encrypt(out,in,KS,0);
			if (debug)
				{
				fprintf(stdout,"\nclear %s\n",in);
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02X ",in[j] & 0xff);
					}
				fprintf(stdout,"\tcipher ");
				for ( j = 0; j<=7; j++)
					{
					fprintf(stdout,"%02X ",out[j] & 0xff);
					}
				}
				
			}
a298 1

@


4.2
log
@Changes for PC compatibility, from Jerry Saltzer.
@
text
@d1 3
a3 3
/*	$Source: /source/kerberos/lib/des/bsd/RCS/verify.c,v $
 *	$Author: spm $
 *	$Locker:  $
d5 3
d44 1
a44 1
# include	"./des.h"
d52 1
a52 1
static char		*rcsid_xxx_c="$Header: verify.c,v 1.4 86/08/08 14:55:42 spm Exp $";
@


4.1
log
@No change; starting version 4.
@
text
@d1 1
a1 1
/*	$Source: /mit/s/t/steiner/kerberos/lib/des/bsd/RCS/verify.c,v $
d3 1
a3 1
 *	$Locker: steiner $
a39 1
# include	<signal.h>
a40 1
# include	<strings.h>
d49 1
a49 1
static char		*rcsid_xxx_c="$Header: verify.c,v 1.4 86/08/08 14:55:42 steiner Locked $";
@


1.4
log
@disable debugging #ifdef notdef
@
text
@d1 1
a1 1
/*	$Source: /mit/projects/auth/src/lib/des/vax/RCS/verify.c,v $
d3 1
a3 1
 *	$Locker: spm $
d5 3
d51 1
a51 1
static char		*rcsid_xxx_c="$Header: verify.c,v 1.3 86/08/08 14:52:11 spm Exp $";
@


1.3
log
@add new mflag for debugging
@
text
@d3 1
a3 1
 *	$Locker:  $
d5 3
d48 1
a48 1
static char		*rcsid_xxx_c="$Header: verify.c,v 1.1 85/12/16 13:59:56 spm Exp $";
a167 1
#ifdef notdef
a168 1
#endif
d170 1
a170 1
	"\nplaintext = 0x1, key = 0, cipher = 0x8ca64de9c1b123a7");
@


1.2
log
@*** empty log message ***
@
text
@d57 1
d67 2
a68 1
unsigned char	zero_text[8];
d74 1
d81 1
a81 1
char	msg[16][72] = 
d88 1
a88 2

	"\n\n\n\nEXAMPLE ECB\tkey = 0123456789abcdef\n\tclear = \"Now is the time for all \"",
d139 4
d165 1
d167 1
d169 1
a169 1
	"\nplaintext = 0, key = 0, cipher = 0x8ca64de9c1b123a7 { or is it a 1}");
d176 18
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Source: /usr/mit/spm/auth/deslib/RCS/verify.c,v $
d3 1
a3 1
 *	$Locker: spm $
d5 3
d45 1
a45 1
static char		*rcsid_xxx_c="$Header: verify.c,v 1.1 85/08/16 12:47:48 spm Exp $";
d51 1
a51 1
extern	int		des_set_key();
a53 1
extern	long	swap_bits();
d57 1
d65 2
d71 1
d75 1
a75 1
unsigned char	zero_key[8] = {1};
d78 1
a78 1
char	msg[13][72] = 
d82 5
a86 1
	"\n\nEXAMPLE ECB\tkey = 0123456789abcdef\n\tclear = \"Now is the time for all \"",
d88 2
a89 1
	"\n\n\nEXAMPLE CBC\tkey = 0123456789abcdef\tiv = 1234567890abcdef",
d93 3
a95 2
	"\n\t\t\t68 37 88 49 9a 7c 05 f6",
	"\n\n\nEXAMPLE CBC checksum\tKey =  0123456789abcdef\tIV =  1234567890abcdef",
a102 1
 * plain = 0, key = 0x08192a3b4c5d6e7f, cipher= 0x25ddac3e96176467
d104 1
d112 1
a112 1
	int	in_length;
d129 1
a129 1
			debug=1;
d133 4
d155 16
a170 3
		des_set_key(default_key,KS);
		input = clear_text;
		ivec = default_ivec;
d172 17
d191 4
a194 1
		for (i = 0; i<=3; i++)	fprintf(stdout,"%s",msg[i]);
d202 1
a202 1
		do_decrypt(clear_text,cipher_text);
d205 1
d207 1
a207 1
		for (i = 4; i<=8; i++)	fprintf(stdout,"%s",msg[i]);
d211 1
a211 1
		cbc_encrypt(input,cipher_text,in_length,KS,ivec,1);
d221 1
a221 1
		cbc_encrypt(cipher_text,clear_text,in_length,KS,ivec,0);
d224 1
a224 1
		for (i = 9; i<=11; i++)	fprintf(stdout,"%s",msg[i]);
d226 1
a226 1
		cbc_cksum(input,cipher_text,strlen(input),KS,ivec,1);
@
