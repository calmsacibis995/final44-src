head     4.0;
branch   ;
access   ;
symbols  PATCH8:4.0 PATCH7:4.0 KPATCH6:4.0 ASRSNAP1001:4.0 PATCH5:4.0 ADAMS_NSA:4.0 KPATCH4:4.0 KPATCH3:4.0 KPATCH2:4.0 KREL1:4.0;
locks    ; strict;
comment  @ * @;


4.0
date     89.01.23.09.57.44;  author jtkohl;  state Exp;
branches ;
next     1.2;

1.2
date     89.01.11.11.57.09;  author steiner;  state Exp;
branches ;
next     1.1;

1.1
date     88.08.26.12.40.05;  author shanzer;  state Exp;
branches ;
next     ;


desc
@Address Comparison macro.
@


4.0
log
@No change, incrementing vno to 4.x
@
text
@/*
 * $Source: /mit/kerberos/src/include/RCS/addr_comp.h,v $
 * $Author: steiner $
 * $Header: addr_comp.h,v 1.2 89/01/11 11:57:09 steiner Exp $
 *
 * Copyright 1987, 1988, 1989 by the Massachusetts Institute of Technology. 
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>. 
 *
 * Include file for address comparison macros.
 */

#include <mit-copyright.h>

#ifndef ADDR_COMP_DEFS
#define ADDR_COMP_DEFS

/*
** Look boys and girls, a big kludge
** We need to compare the two internet addresses in network byte order, not
**   local byte order.  This is a *really really slow way of doing that*
** But.....
**         .....it works
** so we run with it
**
** long_less_than gets fed two (u_char *)'s....
*/

#define u_char_comp(x,y) \
        (((x)>(y))?(1):(((x)==(y))?(0):(-1)))

#define long_less_than(x,y) \
        (u_char_comp((x)[0],(y)[0])?u_char_comp((x)[0],(y)[0]): \
	 (u_char_comp((x)[1],(y)[1])?u_char_comp((x)[1],(y)[1]): \
	  (u_char_comp((x)[2],(y)[2])?u_char_comp((x)[2],(y)[2]): \
	   (u_char_comp((x)[3],(y)[3])))))

#endif /* ADDR_COMP_DEFS */
@


1.2
log
@Add check for multiple includes.
programmer: jtkohl
auditor: steiner
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/include/RCS/kdc.h,v $
d4 1
a4 1
 * $Header: kdc.h,v 1.7 88/02/25 14:44:38 jtkohl Locked $
@


1.1
log
@Initial revision
@
text
@d2 18
d38 2
@
