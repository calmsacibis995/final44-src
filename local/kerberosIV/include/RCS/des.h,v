head     4.12;
branch   ;
access   ;
symbols  PATCH8:4.11 PATCH7:4.11 KPATCH6:4.11 ASRSNAP1001:4.11 PATCH5:4.11 ADAMS_NSA:4.11 KPATCH4:4.11 KPATCH3:4.11 KPATCH2:4.11 KREL1:4.11 BETA5/24/88:4.7 v1:1.1;
locks    ; strict;
comment  @ * @;


4.12
date     90.06.25.20.48.41;  author kfall;  state Exp;
branches ;
next     4.11;

4.11
date     89.01.17.16.24.57;  author rfrench;  state Exp;
branches ;
next     4.10;

4.10
date     89.01.03.15.47.27;  author jtkohl;  state Exp;
branches ;
next     4.9;

4.9
date     88.11.16.23.45.47;  author wesommer;  state Exp;
branches ;
next     4.8;

4.8
date     88.11.15.11.02.45;  author jtkohl;  state Exp;
branches ;
next     4.7;

4.7
date     88.02.25.14.44.24;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.23.18.25.28;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.01.14.12.50.04;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.11.24.03.05.36;  author raeburn;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.28.12.01.39;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.10.23.10.34.51;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.40.29;  author steiner;  state Exp;
branches ;
next     1.5;

1.5
date     87.01.13.11.23.08;  author wesommer;  state Exp;
branches ;
next     1.4;

1.4
date     86.01.29.16.13.35;  author spm;  state Exp;
branches ;
next     1.3;

1.3
date     85.12.16.13.39.50;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     85.08.16.17.42.13;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.08.16.12.53.47;  author spm;  state Exp;
branches ;
next     ;


desc
@ok v1
@


4.12
log
@include mit-copyr only on ifdef ATHENA
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/include/RCS/des.h,v $
 * $Author: rfrench $
 * $Header: /usr/src/kerberosIV/src/include/RCS/des.h,v 4.11 89/01/17 16:24:57 rfrench Exp Locker: kfall $ 
 *
 * Copyright 1987, 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * Include file for the Data Encryption Standard library.
 */

/* only do the whole thing once	 */
#ifndef DES_DEFS
#define DES_DEFS

#ifdef	ATHENA
#include <mit-copyright.h>
#endif

typedef unsigned char des_cblock[8];	/* crypto-block size */
/* Key schedule */
typedef struct des_ks_struct { des_cblock _; } des_key_schedule[16];

#define DES_KEY_SZ 	(sizeof(des_cblock))
#define DES_ENCRYPT	1
#define DES_DECRYPT	0

#ifndef NCOMPAT
#define C_Block des_cblock
#define Key_schedule des_key_schedule
#define ENCRYPT DES_ENCRYPT
#define DECRYPT DES_DECRYPT
#define KEY_SZ DES_KEY_SZ
#define string_to_key des_string_to_key
#define read_pw_string des_read_pw_string
#define random_key des_random_key
#define pcbc_encrypt des_pcbc_encrypt
#define key_sched des_key_sched
#define cbc_encrypt des_cbc_encrypt
#define cbc_cksum des_cbc_cksum
#define C_Block_print des_cblock_print
#define quad_cksum des_quad_cksum
typedef struct des_ks_struct bit_64;
#endif

#define des_cblock_print(x) des_cblock_print_file(x, stdout)

#endif	DES_DEFS
@


4.11
log
@Programmer: jtkohl
Auditor: rfrench
Added macro for des_cblock_print to call des_cblock_print_file
@
text
@d2 3
a4 3
 * $Source: /mit/kerberos/src/include/RCS/des.h,v $
 * $Author: jtkohl $
 * $Header: des.h,v 4.10 89/01/03 15:47:27 jtkohl Locked $ 
d18 1
d20 1
@


4.10
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
fixes mis-named redefinition of cbc_cksum
@
text
@d3 2
a4 2
 * $Author: wesommer $
 * $Header: des.h,v 4.9 88/11/16 23:45:47 wesommer Exp $ 
d45 3
@


4.9
log
@Programmer: John Kohl
Auditor: Bill Sommerfeld
Add additional backwards-compatibility definition for key schedule        
element.
@
text
@d3 2
a4 2
 * $Author: jtkohl $
 * $Header: des.h,v 4.8 88/11/15 11:02:45 jtkohl Exp $ 
d40 1
a40 1
#define cbc_cksum des_ckc_cksum
@


4.8
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes: remove internal details, rename data types to reduce
namespace clutter.
provide compatibility #define's
@
text
@d2 3
a4 3
 * $Source: //ra/wesommer/krb/include/RCS/des.h,v $
 * $Author: steiner $
 * $Header: des.h,v 4.7 88/02/25 14:44:24 steiner Exp $ 
d21 2
a22 1
typedef struct { des_cblock _; } des_key_schedule[16]; /* Key schedule */
d43 1
@


4.7
log
@Added #include of <mit-copyright.h>.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/include/RCS/des.h,v $
d4 1
a4 1
 * $Header: des.h,v 4.6 88/02/23 18:25:28 steiner Locked $ 
d20 2
a21 1
#include <des_conf.h>
d23 3
a25 25
#define	 AUTH_DES_ITER   16	/*
				 * number of iterations of the inner
				 * loop of the DES algorithm.  The
				 * standard is 16, but in case that is
				 * too slow, we might do less.  Of
				 * course, less also means less
				 * security.
				 */
typedef struct {
    unsigned a0:1;
    unsigned a1:1;
    unsigned a2:1;
    unsigned a3:1;
    unsigned a4:1;
    unsigned a5:1;
    unsigned a6:1;
    unsigned a7:1;
    unsigned a8:1;
    unsigned a9:1;
    unsigned a10:1;
    unsigned a11:1;
    unsigned a12:1;
    unsigned a13:1;
    unsigned a14:1;
    unsigned a15:1;
d27 16
a42 160
    unsigned b0:1;
    unsigned b1:1;
    unsigned b2:1;
    unsigned b3:1;
    unsigned b4:1;
    unsigned b5:1;
    unsigned b6:1;
    unsigned b7:1;
    unsigned b8:1;
    unsigned b9:1;
    unsigned b10:1;
    unsigned b11:1;
    unsigned b12:1;
    unsigned b13:1;
    unsigned b14:1;
    unsigned b15:1;

    unsigned c0:1;
    unsigned c1:1;
    unsigned c2:1;
    unsigned c3:1;
    unsigned c4:1;
    unsigned c5:1;
    unsigned c6:1;
    unsigned c7:1;
    unsigned c8:1;
    unsigned c9:1;
    unsigned c10:1;
    unsigned c11:1;
    unsigned c12:1;
    unsigned c13:1;
    unsigned c14:1;
    unsigned c15:1;

    unsigned d0:1;
    unsigned d1:1;
    unsigned d2:1;
    unsigned d3:1;
    unsigned d4:1;
    unsigned d5:1;
    unsigned d6:1;
    unsigned d7:1;
    unsigned d8:1;
    unsigned d9:1;
    unsigned d10:1;
    unsigned d11:1;
    unsigned d12:1;
    unsigned d13:1;
    unsigned d14:1;
    unsigned d15:1;

}       bit_64;

typedef struct {
    unsigned b0:1;
    unsigned b1:1;
    unsigned b2:1;
    unsigned b3:1;
    unsigned b4:1;
    unsigned b5:1;
    unsigned b6:1;
    unsigned b7:1;
    unsigned b8:1;
    unsigned b9:1;
    unsigned b10:1;
    unsigned b11:1;
    unsigned b12:1;
    unsigned b13:1;
    unsigned b14:1;
    unsigned b15:1;

    unsigned b16:1;
    unsigned b17:1;
    unsigned b18:1;
    unsigned b19:1;
    unsigned b20:1;
    unsigned b21:1;
    unsigned b22:1;
    unsigned b23:1;
    unsigned b24:1;
    unsigned b25:1;
    unsigned b26:1;
    unsigned b27:1;
    unsigned b28:1;
    unsigned b29:1;
    unsigned b30:1;
    unsigned b31:1;
}       bit_32;

/* recall that a bit field cannot span natural boundary */
/* these are for 32 bit machines */

#ifdef  BITS32
typedef struct {
    unsigned b0:6;
    unsigned b1:6;
    unsigned b2:6;
    unsigned b3:6;
    unsigned b4:6;
    unsigned b5:2;
}       sbox_in_a;

typedef struct {
    unsigned b5:4;
    unsigned b6:6;
    unsigned b7:6;
}       sbox_in_b;

typedef struct {
    unsigned b0:4;
    unsigned b1:4;
    unsigned b2:4;
    unsigned b3:4;
    unsigned b4:4;
    unsigned b5:4;
    unsigned b6:4;
    unsigned b7:4;
}       sbox_out;

/* for sixteen bit machines */
#else	BITS32

typedef struct {
    unsigned b0:6;
    unsigned b1:6;
    unsigned b2:4;
}       sbox_in_16_a;

typedef struct {
    unsigned b2:2;
    unsigned b3:6;
    unsigned b4:6;
    unsigned b5:2;
}       sbox_in_16_b;

typedef struct {
    unsigned b5:4;
    unsigned b6:6;
    unsigned b7:6;
}       sbox_in_16_c;

typedef struct {
    unsigned b0:4;
    unsigned b1:4;
    unsigned b2:4;
    unsigned b3:4;
    unsigned b4:4;
    unsigned b5:4;
    unsigned b6:4;
    unsigned b7:4;
}       sbox_out;
#endif	BITS32

typedef bit_64 Key_schedule[16];
typedef unsigned char C_Block[8];	/* crypto-block size */

#define KEY_SZ 	(sizeof(C_Block))
#define ENCRYPT	1
#define DECRYPT	0

@


4.6
log
@Copyright notice, etc.
@
text
@d4 1
a4 1
 * $Header: des.h,v 4.5 88/01/14 12:50:04 steiner Locked $ 
d17 2
@


4.5
log
@Formatted.
Programmer: steiner.
Auditor: jtkohl.
@
text
@d2 3
a4 3
 * $Source: /u2/lockers/kerberos/include/RCS/des.h,v $
 * $Author$
 * $Header: des.h,v 4.4 87/11/24 03:05:36 raeburn Exp $ 
d6 1
a6 1
 * Copyright 1987 by the Massachusetts Institute of Technology.
a12 2

#include	<mit-copyright.h>
@


4.4
log
@Changed dependency on krb_conf.h to des_conf.h
@
text
@d1 4
a4 3
/* $Source: /u2/lockers/kerberos/include/RCS/des.h,v $
 * $Author: steiner $
 * $Header: des.h,v 4.3 87/10/28 12:01:39 raeburn Locked $
d8 2
a9 2
 * For copying and distribution information,
 * please see the file <mit-copyright.h>.
d16 1
a16 1
/* only do the whole thing once	*/
d22 7
a28 5
#define	 AUTH_DES_ITER   16 	/* number of iterations of the inner
				 * loop of the DES algorithm.  The standard
				 * is 16, but in case that is too slow,
				 * we might do less.  Of course, less also
				 * means less security.
d30 17
a46 18
typedef struct 
{
	unsigned	a0  :1  ;
	unsigned	a1  :1  ;
	unsigned	a2  :1  ;
	unsigned	a3  :1  ;
	unsigned	a4  :1  ;
	unsigned	a5  :1  ;
	unsigned	a6  :1  ;
	unsigned	a7  :1  ;
	unsigned	a8  :1  ;
	unsigned	a9  :1  ;
	unsigned	a10 :1  ;
	unsigned	a11 :1  ;
	unsigned	a12 :1  ;
	unsigned	a13 :1  ;
	unsigned	a14 :1  ;
	unsigned	a15 :1  ;
d48 16
a63 16
	unsigned	b0  :1  ;
	unsigned	b1  :1  ;
	unsigned	b2  :1  ;
	unsigned	b3  :1  ;
	unsigned	b4  :1  ;
	unsigned	b5  :1  ;
	unsigned	b6  :1  ;
	unsigned	b7  :1  ;
	unsigned	b8  :1  ;
	unsigned	b9  :1  ;
	unsigned	b10 :1  ;
	unsigned	b11 :1  ;
	unsigned	b12 :1  ;
	unsigned	b13 :1  ;
	unsigned	b14 :1  ;
	unsigned	b15 :1  ;
d65 16
a80 16
	unsigned	c0  :1  ;
	unsigned	c1  :1  ;
	unsigned	c2  :1  ;
	unsigned	c3  :1  ;
	unsigned	c4  :1  ;
	unsigned	c5  :1  ;
	unsigned	c6  :1  ;
	unsigned	c7  :1  ;
	unsigned	c8  :1  ;
	unsigned	c9  :1  ;
	unsigned	c10 :1  ;
	unsigned	c11 :1  ;
	unsigned	c12 :1  ;
	unsigned	c13 :1  ;
	unsigned	c14 :1  ;
	unsigned	c15 :1  ;
d82 16
a97 16
	unsigned	d0  :1  ;
	unsigned	d1  :1  ;
	unsigned	d2  :1  ;
	unsigned	d3  :1  ;
	unsigned	d4  :1  ;
	unsigned	d5  :1  ;
	unsigned	d6  :1  ;
	unsigned	d7  :1  ;
	unsigned	d8  :1  ;
	unsigned	d9  :1  ;
	unsigned	d10 :1  ;
	unsigned	d11 :1  ;
	unsigned	d12 :1  ;
	unsigned	d13 :1  ;
	unsigned	d14 :1  ;
	unsigned	d15 :1  ;
d99 1
a99 1
} bit_64;
d101 17
a117 18
typedef struct
{
	unsigned	b0  :1  ;
	unsigned	b1  :1  ;
	unsigned	b2  :1  ;
	unsigned	b3  :1  ;
	unsigned	b4  :1  ;
	unsigned	b5  :1  ;
	unsigned	b6  :1  ;
	unsigned	b7  :1  ;
	unsigned	b8  :1  ;
	unsigned	b9  :1  ;
	unsigned	b10 :1  ;
	unsigned	b11 :1  ;
	unsigned	b12 :1  ;
	unsigned	b13 :1  ;
	unsigned	b14 :1  ;
	unsigned	b15 :1  ;
d119 17
a135 17
	unsigned	b16 :1  ;
	unsigned	b17 :1  ;
	unsigned	b18 :1  ;
	unsigned	b19 :1  ;
	unsigned	b20 :1  ;
	unsigned	b21 :1  ;
	unsigned	b22 :1  ;
	unsigned	b23 :1  ;
	unsigned	b24 :1  ;
	unsigned	b25 :1  ;
	unsigned	b26 :1  ;
	unsigned	b27 :1  ;
	unsigned	b28 :1  ;
	unsigned	b29 :1  ;
	unsigned	b30 :1  ;
	unsigned	b31 :1  ;
} bit_32;
d137 1
a137 1
/* recall that a bit field cannot span natural boundary	*/
d141 8
a148 9
typedef struct
{
	unsigned	b0  :6;
	unsigned	b1  :6;
	unsigned	b2  :6;
	unsigned	b3  :6;
	unsigned	b4  :6;
	unsigned	b5  :2;
} sbox_in_a;
d150 5
a154 6
typedef struct
{
	unsigned	b5  :4;
	unsigned	b6  :6;
	unsigned	b7  :6;
} sbox_in_b;
d156 10
a165 11
typedef struct
{
	unsigned	b0  :4;
	unsigned	b1  :4;
	unsigned	b2  :4;
	unsigned	b3  :4;
	unsigned	b4  :4;
	unsigned	b5  :4;
	unsigned	b6  :4;
	unsigned	b7  :4;
} sbox_out;
d170 5
a174 6
typedef struct
{
	unsigned	b0  :6;
	unsigned	b1  :6;
	unsigned	b2  :4;
} sbox_in_16_a;
d176 6
a181 7
typedef struct
{
	unsigned	b2  :2;
	unsigned	b3  :6;
	unsigned	b4  :6;
	unsigned	b5  :2;
} sbox_in_16_b;
d183 5
a187 6
typedef struct
{
	unsigned	b5  :4;
	unsigned	b6  :6;
	unsigned	b7  :6;
} sbox_in_16_c;
d189 10
a198 11
typedef struct
{
	unsigned	b0  :4;
	unsigned	b1  :4;
	unsigned	b2  :4;
	unsigned	b3  :4;
	unsigned	b4  :4;
	unsigned	b5  :4;
	unsigned	b6  :4;
	unsigned	b7  :4;
} sbox_out;
@


4.3
log
@Added include of krb_conf.h.
Almost every file that includes des.h needs krb_conf.h
but not vice versa.
@
text
@d1 1
a1 1
/* $Source: /u3/kerberos.new/include/RCS/des.h,v $
d3 1
a3 1
 * $Header: des.h,v 4.2 87/10/23 10:34:51 steiner Locked $
d19 1
a19 1
#include <krb_conf.h>
@


4.2
log
@Formatting changes.
@
text
@d1 1
a1 1
/* $Source: /mit/s/t/steiner/kerberos/include/RCS/des.h,v $
d3 1
a3 1
 * $Header: des.h,v 4.2 87/09/22 14:59:38 steiner Exp $
d18 2
@


4.1
log
@No change; starting version 4.
@
text
@d1 11
a11 1
/* des.h																   */
d13 1
a13 3
/* only do the whole thing once											   */
#ifndef	DES_DEFS
#define	DES_DEFS
d15 11
a25 7
#define		AUTH_DES_ITER	16	/* number of iterations of the inner
								 * loop of the DES algorithm.  The standard
								 * is 16, but in case that is too slow,
								 * we might do less.  Of course, less also
								 * means less security.
								 */
typedef	struct 
d27 16
a42 16
	unsigned	a0	:1	;
	unsigned	a1	:1	;
	unsigned	a2	:1	;
	unsigned	a3	:1	;
	unsigned	a4	:1	;
	unsigned	a5	:1	;
	unsigned	a6	:1	;
	unsigned	a7	:1	;
	unsigned	a8	:1	;
	unsigned	a9	:1	;
	unsigned	a10	:1	;
	unsigned	a11	:1	;
	unsigned	a12	:1	;
	unsigned	a13	:1	;
	unsigned	a14	:1	;
	unsigned	a15	:1	;
d44 16
a59 16
	unsigned	b0	:1	;
	unsigned	b1	:1	;
	unsigned	b2	:1	;
	unsigned	b3	:1	;
	unsigned	b4	:1	;
	unsigned	b5	:1	;
	unsigned	b6	:1	;
	unsigned	b7	:1	;
	unsigned	b8	:1	;
	unsigned	b9	:1	;
	unsigned	b10	:1	;
	unsigned	b11	:1	;
	unsigned	b12	:1	;
	unsigned	b13	:1	;
	unsigned	b14	:1	;
	unsigned	b15	:1	;
d61 16
a76 16
	unsigned	c0	:1	;
	unsigned	c1	:1	;
	unsigned	c2	:1	;
	unsigned	c3	:1	;
	unsigned	c4	:1	;
	unsigned	c5	:1	;
	unsigned	c6	:1	;
	unsigned	c7	:1	;
	unsigned	c8	:1	;
	unsigned	c9	:1	;
	unsigned	c10	:1	;
	unsigned	c11	:1	;
	unsigned	c12	:1	;
	unsigned	c13	:1	;
	unsigned	c14	:1	;
	unsigned	c15	:1	;
d78 16
a93 16
	unsigned	d0	:1	;
	unsigned	d1	:1	;
	unsigned	d2	:1	;
	unsigned	d3	:1	;
	unsigned	d4	:1	;
	unsigned	d5	:1	;
	unsigned	d6	:1	;
	unsigned	d7	:1	;
	unsigned	d8	:1	;
	unsigned	d9	:1	;
	unsigned	d10	:1	;
	unsigned	d11	:1	;
	unsigned	d12	:1	;
	unsigned	d13	:1	;
	unsigned	d14	:1	;
	unsigned	d15	:1	;
d95 1
a95 2
}	
	bit_64;
d97 1
a97 2

typedef	struct
d99 16
a114 16
	unsigned	b0	:1	;
	unsigned	b1	:1	;
	unsigned	b2	:1	;
	unsigned	b3	:1	;
	unsigned	b4	:1	;
	unsigned	b5	:1	;
	unsigned	b6	:1	;
	unsigned	b7	:1	;
	unsigned	b8	:1	;
	unsigned	b9	:1	;
	unsigned	b10	:1	;
	unsigned	b11	:1	;
	unsigned	b12	:1	;
	unsigned	b13	:1	;
	unsigned	b14	:1	;
	unsigned	b15	:1	;
d116 17
a132 17
	unsigned	b16	:1	;
	unsigned	b17 :1	;
	unsigned	b18	:1	;
	unsigned	b19	:1	;
	unsigned	b20	:1	;
	unsigned	b21	:1	;
	unsigned	b22	:1	;
	unsigned	b23	:1	;
	unsigned	b24	:1	;
	unsigned	b25	:1	;
	unsigned	b26	:1	;
	unsigned	b27	:1	;
	unsigned	b28	:1	;
	unsigned	b29	:1	;
	unsigned	b30	:1	;
	unsigned	b31	:1	;
}	bit_32;
d134 2
d137 2
a138 4
/* recall that a bit field cannot span natural boundary					   */
/* these are for 32 bit machines										   */
#ifdef	BITS32
typedef	struct
d140 7
a146 8
	unsigned	b0	:6;
	unsigned	b1	:6;
	unsigned	b2	:6;
	unsigned	b3	:6;
	unsigned	b4	:6;
	unsigned	b5	:2;
}	
	sbox_in_a;
d148 1
a148 1
typedef	struct
d150 4
a153 5
	unsigned	b5	:4;
	unsigned	b6	:6;
	unsigned	b7	:6;
}	
	sbox_in_b;
d155 1
a155 1
typedef	struct
d157 9
a165 10
	unsigned	b0	:4;
	unsigned	b1	:4;
	unsigned	b2	:4;
	unsigned	b3	:4;
	unsigned	b4	:4;
	unsigned	b5	:4;
	unsigned	b6	:4;
	unsigned	b7	:4;
}	
	sbox_out;
d167 2
d170 1
a170 3
/* for sixteen bit machines												   */
#else
typedef	struct
d172 4
a175 5
	unsigned	b0	:6;
	unsigned	b1	:6;
	unsigned	b2	:4;
}	
	sbox_in_16_a;
d177 1
a177 1
typedef	struct
d179 5
a183 6
	unsigned	b2	:2;
	unsigned	b3	:6;
	unsigned	b4	:6;
	unsigned	b5	:2;
}	
	sbox_in_16_b;
d185 1
a185 1
typedef	struct
d187 4
a190 5
	unsigned	b5	:4;
	unsigned	b6	:6;
	unsigned	b7	:6;
}	
	sbox_in_16_c;
d192 1
a192 1
typedef	struct
d194 10
a203 11
	unsigned	b0	:4;
	unsigned	b1	:4;
	unsigned	b2	:4;
	unsigned	b3	:4;
	unsigned	b4	:4;
	unsigned	b5	:4;
	unsigned	b6	:4;
	unsigned	b7	:4;
}	
	sbox_out;
#endif
d205 2
d208 3
a210 1
typedef	bit_64	Key_schedule[16];
d212 1
a212 6
typedef unsigned char	C_Block[8];	/* crypto-block size				   */

#define	ENCRYPT	1
#define DECRYPT 0

#endif
@


1.5
log
@CHanges to des library.
@
text
@@


1.4
log
@change ifdef VAX to ifdef BITS32
@
text
@d1 1
a1 1
/* ks.h																	   */
d3 4
d205 6
a210 1
typedef char	C_Block[8];		/* crypto-block size					   */
@


1.3
log
@*** empty log message ***
@
text
@d123 1
a123 1
#ifdef	VAX
@


1.2
log
@fix sbox for 8086
@
text
@a81 1
typedef	bit_64	Key_schedule[16];
d197 5
@


1.1
log
@Initial revision
@
text
@d123 2
d156 42
@
