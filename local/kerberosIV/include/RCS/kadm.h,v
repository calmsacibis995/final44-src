head     4.3;
branch   ;
access   ;
symbols  PATCH8:4.2 PATCH7:4.2 KPATCH6:4.2 ASRSNAP1001:4.2 PATCH5:4.1 KPATCH4:4.1 KPATCH3:4.1 KPATCH2:4.1 KREL1:4.1;
locks    ; strict;
comment  @ * @;


4.3
date     90.06.25.20.49.12;  author kfall;  state Exp;
branches ;
next     4.2;

4.2
date     89.09.26.09.15.20;  author jtkohl;  state Exp;
branches ;
next     4.1;

4.1
date     89.01.24.21.27.45;  author jtkohl;  state Exp;
branches ;
next     4.0;

4.0
date     89.01.23.17.49.51;  author jtkohl;  state Exp;
branches ;
next     1.3;

1.3
date     89.01.23.17.43.30;  author jtkohl;  state Exp;
branches ;
next     1.2;

1.2
date     89.01.21.17.54.22;  author jtkohl;  state Exp;
branches ;
next     1.1;

1.1
date     89.01.18.11.06.56;  author jtkohl;  state Exp;
branches ;
next     ;


desc
@kadm.h
@


4.3
log
@mit-copy included only on ATHENA ifdef
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/include/RCS/kadm.h,v $
 * $Author: jtkohl $
 * $Header: /usr/src/kerberosIV/src/include/RCS/kadm.h,v 4.2 89/09/26 09:15:20 jtkohl Exp Locker: kfall $
 *
 * Copyright 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * Definitions for Kerberos administration server & client
 */

#ifndef KADM_DEFS
#define KADM_DEFS

#ifdef	ATHENA
#include <mit-copyright.h>
#endif

/*
 * kadm.h
 * Header file for the fourth attempt at an admin server
 * Doug Church, December 28, 1989, MIT Project Athena
 */

/* for those broken Unixes without this defined... should be in sys/param.h */
#ifndef MAXHOSTNAMELEN
#define MAXHOSTNAMELEN 64
#endif

#include <sys/types.h>
#include <netinet/in.h>

#ifdef	ATHENA
#include <krb.h>
#include <des.h>
#endif

/* The global structures for the client and server */
typedef struct {
  struct sockaddr_in admin_addr;
  struct sockaddr_in my_addr;
  int my_addr_len;
  int admin_fd;			/* file descriptor for link to admin server */
  char sname[ANAME_SZ];		/* the service name */
  char sinst[INST_SZ];		/* the services instance */
  char krbrlm[REALM_SZ];
} Kadm_Client;

typedef struct {		/* status of the server, i.e the parameters */
   int inter;			/* Space for command line flags */
   char *sysfile;		/* filename of server */
} admin_params;			/* Well... it's the admin's parameters */

/* Largest password length to be supported */
#define MAX_KPW_LEN	128

/* Largest packet the admin server will ever allow itself to return */
#define KADM_RET_MAX 2048

/* That's right, versions are 8 byte strings */
#define KADM_VERSTR	"KADM0.0A"
#define KADM_ULOSE	"KYOULOSE"	/* sent back when server can't
					   decrypt client's msg */
#define KADM_VERSIZE strlen(KADM_VERSTR)

/* the lookups for the server instances */
#define PWSERV_NAME  "changepw"
#define KADM_SNAME   "kerberos_master"
#define KADM_SINST   "kerberos"

/* Attributes fields constants and macros */
#define ALLOC        2
#define RESERVED     3
#define DEALLOC      4
#define DEACTIVATED  5
#define ACTIVE       6

/* Kadm_vals structure for passing db fields into the server routines */
#define FLDSZ        4

typedef struct {
    u_char         fields[FLDSZ];     /* The active fields in this struct */
    char           name[ANAME_SZ];
    char           instance[INST_SZ];
    unsigned long  key_low;
    unsigned long  key_high;
    unsigned long  exp_date;
    unsigned short attributes;
    unsigned char  max_life;
} Kadm_vals;                    /* The basic values structure in Kadm */

/* Kadm_vals structure for passing db fields into the server routines */
#define FLDSZ        4

/* Need to define fields types here */
#define KADM_NAME       31
#define KADM_INST       30
#define KADM_EXPDATE    29
#define KADM_ATTR       28
#define KADM_MAXLIFE    27
#define KADM_DESKEY     26

/* To set a field entry f in a fields structure d */
#define SET_FIELD(f,d)  (d[3-(f/8)]|=(1<<(f%8)))

/* To set a field entry f in a fields structure d */
#define CLEAR_FIELD(f,d)  (d[3-(f/8)]&=(~(1<<(f%8))))

/* Is field f in fields structure d */
#define IS_FIELD(f,d)   (d[3-(f/8)]&(1<<(f%8)))

/* Various return codes */
#define KADM_SUCCESS    0

#define WILDCARD_STR "*"

enum acl_types {
ADDACL,
GETACL,
MODACL
};

/* Various opcodes for the admin server's functions */
#define CHANGE_PW    2
#define ADD_ENT      3
#define MOD_ENT      4
#define GET_ENT      5

extern long kdb_get_master_key();	/* XXX should be in krb_db.h */
extern long kdb_verify_master_key();	/* XXX ditto */

extern long krb_mk_priv(), krb_rd_priv(); /* XXX should be in krb.h */
extern void krb_set_tkt_string();	/* XXX ditto */

extern unsigned long quad_cksum();	/* XXX should be in des.h */

/* XXX This doesn't belong here!!! */
char *malloc(), *realloc();
#ifdef POSIX
typedef void sigtype;
#else
typedef int sigtype;
#endif

#endif KADM_DEFS
@


4.2
log
@Programmer: Jay Berkenbilt
Auditor: John Kohl
changes: kadm library rearrangements necessitated include file changes
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/kadmin/RCS/kadm.h,v $
d4 1
a4 1
 * $Header: /mit/kerberos/src/kadmin/RCS/kadm.h,v 4.1 89/01/24 21:27:45 jtkohl Exp Locker: qjb $
d17 1
d19 2
d34 2
d38 1
@


4.1
log
@final clean-ups
@
text
@d4 1
a4 1
 * $Header: kadm.h,v 4.0 89/01/23 17:49:51 jtkohl Locked $
d14 3
d19 4
a22 6
  kadm.h
  Header file for the fourth attempt at an admin server
  Doug Church, December 28, 1989, MIT Project Athena
     ps. Yes that means this code belongs to athena etc...
         as part of our ongoing attempt to copyright all greek names
*/
a23 16
#include <strings.h>
#include <stdio.h>
#include <netdb.h>
#include <setjmp.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/errno.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/param.h>
#include <pwd.h>
#include <syslog.h>
#include <string.h>

d29 3
a32 3
#include <krb.h>
#include "krb_db.h"
#include "kdc.h"
a33 6

#include "kadm_err.h"

/* functions which are non-int-returning */
extern long gethostid();

a44 14
typedef struct {
  struct sockaddr_in admin_addr;
  struct sockaddr_in recv_addr;
  int recv_addr_len;
  int admin_fd;			/* our link to clients */
  char sname[ANAME_SZ];
  char sinst[INST_SZ];
  char krbrlm[REALM_SZ];
  C_Block master_key;
  C_Block session_key;
  Key_schedule master_key_schedule;
  long master_key_version;
} Kadm_Server;

a49 3
/* Largest packet the admin server will ever allow itself to return */
#define KADM_RET_MAX 2048

d53 2
a54 2
#define MAX_USHORT	65535
#define USHORT_SIZE	2
d60 1
a60 1
#define KADM_VERSIZE 8
a61 3
/* the default syslog file */
#define KADM_SYSLOG  "/kerberos/admin_server.syslog"

a66 6
/* Various opcodes for the admin server's functions */
#define CHANGE_PW    2
#define ADD_ENT      3
#define MOD_ENT      4
#define GET_ENT      5

d88 3
a112 7
char *malloc(), *realloc();
#ifdef POSIX
typedef void sigtype;
#else
typedef int sigtype;
#endif

d119 5
a123 4
#define DEFAULT_ACL_DIR	"/kerberos"
#define	ADD_ACL_FILE	"/admin_acl.add"
#define	GET_ACL_FILE	"/admin_acl.get"
#define	MOD_ACL_FILE	"/admin_acl.mod"
a124 8
#ifdef UIDGID_T
extern uid_t getuid();
typedef uid_t uidtype;
#else
extern int getuid();
typedef int uidtype;
#endif

d133 9
a141 1
extern int krb_err_base;
@


4.0
log
@no change, up to rev 4.0
@
text
@d4 1
a4 1
 * $Header: kadm.h,v 1.3 89/01/23 17:43:30 jtkohl Exp $
d105 1
a105 1
#define KADM_SNAME   "kerberos-admin"
d155 2
d170 4
a173 3
#define	ADD_ACL_FILE	"/kerberos/admin_acl.add"
#define	GET_ACL_FILE	"/kerberos/admin_acl.get"
#define	MOD_ACL_FILE	"/kerberos/admin_acl.mod"
@


1.3
log
@various cleanups
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/prototypes/RCS/prototype.h,v $
d4 1
a4 1
 * $Header: prototype.h,v 4.0 89/01/23 10:21:01 jtkohl Exp $
@


1.2
log
@cleaned up
@
text
@d2 14
a22 1
#include <mit-copyright.h>
a80 3
   char *sysfile;		/* name of the syslog file */
   FILE *syslog;		/* pointer to the syslog file */
   int datewid;			/* asctime date width - return.  26 on UNIX */
d82 1
d101 1
a101 1
#define KADM_SYSLOG  "admin_server.syslog"
a119 2

#define USR_STATE(a) ((a)&0b0111)
@


1.1
log
@Initial revision
@
text
@d21 4
d26 4
a29 4
#include "/mit/kerberos/src/include/des.h"
#include "/mit/kerberos/admin_test/src/krb.h"
#include "/mit/kerberos/src/include/krb_db.h"
#include "/mit/kerberos/src/include/kdc.h"
d31 8
d64 1
d77 6
d84 3
a86 1
#define KADM_VERSTR  "KADM0.0A"
a91 3
/* the host with the master copy */
#define KADM_HOST    "heimdall"

a93 3
#define PWSERV_INST  "kerberos"
#define ADSERV_NAME  "atest3"
#define ADSERV_INST  "kerberos"
d138 1
a138 1
#define CLEAR_FIELD(f,d)  (d[3-(f/8)]|=(~(1<<(f%8))))
d144 1
a144 1
#define KADM_SUCCESS    17
d146 6
a151 17
/* Building and unbuilding the packet errors */
#define KADM_NO_REALM   20
#define KADM_NO_CRED    21
#define KADM_BAD_KEY    22
#define KADM_NO_ENCRYPT 23
#define KADM_NO_AUTH    24
#define KADM_NO_ROOM    25
#define KADM_BAD_VER    26
#define KADM_BAD_CHK    27
#define KADM_NO_READ    28
#define KADM_NO_OPCODE  29
#define KADM_NO_HOST    30
#define KADM_NO_SERV    31
#define KADM_NO_SOCK    32
#define KADM_NO_CONN    33
#define KADM_NO_HERE    34
#define KADM_NO_IOC     35
d153 5
a157 2
#define KADM_NO_MAST    36
#define KADM_NO_VERI    37
d159 21
a179 6
/* From the server side routines */
#define KADM_INUSE      50
#define KADM_UKERROR    51
#define KADM_NOAUTH     52
#define KADM_DATA       53
#define KADM_NOENTRY    54
@
