head     4.7;
branch   ;
access   ;
symbols  PATCH8:4.5 PATCH7:4.5 KPATCH6:4.5 ASRSNAP1001:4.5 PATCH5:4.5 ADAMS_NSA:4.5 KPATCH4:4.5 KPATCH3:4.5 KPATCH2:4.5 KREL1:4.5 BETA5/24/88:4.4;
locks    ; strict;
comment  @ * @;


4.7
date     91.02.15.02.54.18;  author bostic;  state Exp;
branches ;
next     4.6;

4.6
date     90.06.25.20.50.23;  author kfall;  state Exp;
branches ;
next     4.5;

4.5
date     89.01.11.12.05.53;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     88.02.25.14.44.50;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     88.02.23.18.26.00;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     88.01.14.12.50.29;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.16.27.59;  author steiner;  state Exp;
branches ;
next     1.1;

1.1
date     87.01.15.16.34.47;  author wesommer;  state Exp;
branches ;
next     ;


desc
@Someone forgot to check this in earlier.
@


4.7
log
@don't need to backslash " or `
@
text
@/*
 * $Source: /usr/src/kerberosIV/include/RCS/kparse.h,v $
 * $Author: kfall $
 * $Header: /usr/src/kerberosIV/include/RCS/kparse.h,v 4.6 90/06/25 20:50:23 kfall Exp Locker: bostic $
 *
 * Copyright 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * Include file for kparse routines.
 */

#ifdef	ATHENA
#include <mit-copyright.h>
#endif

#ifndef KPARSE_DEFS
#define KPARSE_DEFS

/*
 * values returned by fGetParameterSet() 
 */

#define PS_BAD_KEYWORD	  -2	/* unknown or duplicate keyword */
#define PS_SYNTAX	  -1	/* syntax error */
#define PS_OKAY		   0	/* got a complete parameter set */
#define PS_EOF		   1	/* nothing more in the file */

/*
 * values returned by fGetKeywordValue() 
 */

#define KV_SYNTAX	 -2	/* syntax error */
#define KV_EOF		 -1	/* nothing more in the file */
#define KV_OKAY		  0	/* got a keyword/value pair */
#define KV_EOL		  1	/* nothing more on this line */

/*
 * values returned by fGetToken() 
 */

#define GTOK_BAD_QSTRING -1	/* newline found in quoted string */
#define GTOK_EOF	  0	/* end of file encountered */
#define GTOK_QSTRING	  1	/* quoted string */
#define GTOK_STRING	  2	/* unquoted string */
#define GTOK_NUMBER	  3	/* one or more digits */
#define GTOK_PUNK	  4	/* punks are punctuation, newline,
				 * etc. */
#define GTOK_WHITE	  5	/* one or more whitespace chars */

/*
 * extended character classification macros 
 */

#define ISOCTAL(CH) 	( (CH>='0')  && (CH<='7') )
#define ISQUOTE(CH) 	( (CH=='"') || (CH=='\'') || (CH=='`') )
#define ISWHITESPACE(C) ( (C==' ')   || (C=='\t') )
#define ISLINEFEED(C) 	( (C=='\n')  || (C=='\r')  || (C=='\f') )

/*
 * tokens consist of any printable charcacter except comma, equal, or
 * whitespace 
 */

#define ISTOKENCHAR(C) ((C>040) && (C<0177) && (C != ',') && (C != '='))

/*
 * the parameter table defines the keywords that will be recognized by
 * fGetParameterSet, and their default values if not specified. 
 */

typedef struct {
    char *keyword;
    char *defvalue;
    char *value;
}       parmtable;

#define PARMCOUNT(P) (sizeof(P)/sizeof(P[0]))

extern int LineNbr;		/* current line # in parameter file */

extern char ErrorMsg[];		/*
				 * meaningful only when KV_SYNTAX,
 				 * PS_SYNTAX,  or PS_BAD_KEYWORD is
				 * returned by fGetKeywordValue or
				 * fGetParameterSet
				 */

extern char *strsave();		/* defined in this module */
extern char *strutol();		/* defined in this module */

#endif /* KPARSE_DEFS */
@


4.6
log
@include mit-copyr only on ATHENA ifdef
@
text
@d2 3
a4 3
 * $Source: /usr/src/kerberosIV/src/include/RCS/kparse.h,v $
 * $Author: steiner $
 * $Header: /usr/src/kerberosIV/src/include/RCS/kparse.h,v 4.5 89/01/11 12:05:53 steiner Exp Locker: kfall $
d57 1
a57 1
#define ISQUOTE(CH) 	( (CH=='\"') || (CH=='\'') || (CH=='\`') )
@


4.5
log
@added check for multiple includes.
programmer: jtkohl
auditor: steiner
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/include/RCS/kparse.h,v $
d4 1
a4 1
 * $Header: kparse.h,v 4.4 88/02/25 14:44:50 jtkohl Locked $
d14 1
d16 1
@


4.4
log
@Added #include of <mit-copyright.h>.
@
text
@d4 1
a4 1
 * $Header: kparse.h,v 4.3 88/02/23 18:26:00 steiner Locked $
d16 3
d90 2
@


4.3
log
@Copyright notice, etc.
@
text
@d4 1
a4 1
 * $Header: kparse.h,v 4.2 88/01/14 12:50:29 steiner Locked $
d13 2
@


4.2
log
@Formatted.
Programmer: steiner.
Auditor: jtkohl.
@
text
@d2 8
a9 3
 * $Source$
 * $Author$
 * $Header$
@


4.1
log
@No change; starting version 4.
@
text
@d1 7
d10 1
a10 1
 * values returned by fGetParameterSet()
a11 4
#define PS_BAD_KEYWORD		-2	/* unknown or duplicate keyword 		*/
#define PS_SYNTAX			-1	/* syntax error							*/
#define PS_OKAY				 0	/* got a complete parameter set			*/
#define PS_EOF				 1	/* nothing more in the file				*/
d13 5
d19 1
a19 1
 * values returned by fGetKeywordValue()
a20 4
#define KV_SYNTAX			-2	/* syntax error							*/
#define KV_EOF				-1	/* nothing more in the file				*/
#define KV_OKAY				 0	/* got a keyword/value pair				*/
#define KV_EOL				 1	/* nothing more on this line 			*/
d22 5
d28 1
a28 1
 * values returned by fGetToken()
a29 7
#define GTOK_BAD_QSTRING	-1	/* newline found in quoted string */
#define GTOK_EOF 	 		0	/* end of file encountered */
#define GTOK_QSTRING 		1	/* quoted string */
#define GTOK_STRING  		2	/* unquoted string */
#define GTOK_NUMBER  		3	/* one or more digits */
#define GTOK_PUNK 	 		4	/* punks are punctuation, newline, etc */
#define GTOK_WHITE 	 		5	/* one or more whitespace chars */
d31 9
d41 1
a41 1
 * extended character classification macros
d43 1
d48 1
d50 2
a51 2
 * tokens consist of any printable charcacter except comma, equal, 
 * or whitespace
a52 1
#define ISTOKENCHAR(C)  ( (C>040) && (C<0177) && (C != ',') && (C != '=') )
d54 1
d58 1
a58 1
 * fGetParameterSet, and their default values if not specified.
d60 1
d62 4
a65 4
	char *keyword;
	char *defvalue;
	char *value;
} parmtable;
d69 1
a69 4
extern int LineNbr;				/* current line nbr in parameter file		*/
extern char ErrorMsg[];			/* meaningful only when KV_SYNTAX, PS_SYNTAX,*/ 
								/* 	or PS_BAD_KEYWORD is returned by 		*/
								/* 	fGetKeywordValue or fGetParameterSet	*/
d71 9
a79 2
extern char *strsave();			/* defined in this module */
extern char *strutol();			/* defined in this module */
@


1.1
log
@Initial revision
@
text
@@
