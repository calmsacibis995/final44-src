head     4.27;
branch   ;
access   ;
symbols  PATCH8:4.26 PATCH7:4.26 KPATCH6:4.26 ASRSNAP1001:4.26 PATCH5:4.25 ADAMS_NSA:4.25 KPATCH4:4.25 KPATCH3:4.24 KPATCH2:4.24 KREL1:4.24 BETA5/24/88:4.16;
locks    ; strict;
comment  @ * @;


4.27
date     90.05.12.00.04.07;  author kfall;  state Exp;
branches ;
next     4.26;

4.26
date     89.08.08.17.55.25;  author jtkohl;  state Exp;
branches ;
next     4.25;

4.25
date     89.06.02.13.13.41;  author jtkohl;  state Exp;
branches ;
next     4.24;

4.24
date     89.01.23.15.48.43;  author wesommer;  state Exp;
branches ;
next     4.23;

4.23
date     89.01.19.18.06.33;  author jtkohl;  state Exp;
branches ;
next     4.22;

4.22
date     89.01.19.14.16.43;  author steiner;  state Exp;
branches ;
next     4.21;

4.21
date     89.01.18.14.47.00;  author rfrench;  state Exp;
branches ;
next     4.20;

4.20
date     89.01.15.15.41.13;  author rfrench;  state Exp;
branches ;
next     4.19;

4.19
date     89.01.13.18.01.45;  author steiner;  state Exp;
branches ;
next     4.18;

4.18
date     89.01.05.15.01.22;  author jtkohl;  state Exp;
branches ;
next     4.17;

4.17
date     88.05.25.16.37.48;  author steiner;  state Exp;
branches ;
next     4.16;

4.16
date     88.04.25.14.14.59;  author steiner;  state Exp;
branches ;
next     4.15;

4.15
date     88.03.18.17.06.39;  author jtkohl;  state Exp;
branches ;
next     4.14;

4.14
date     88.02.25.14.44.57;  author steiner;  state Exp;
branches ;
next     4.13;

4.13
date     88.02.23.18.26.06;  author steiner;  state Exp;
branches ;
next     4.12;

4.12
date     88.02.23.18.01.23;  author steiner;  state Exp;
branches ;
next     4.11;

4.11
date     88.02.01.17.06.36;  author steiner;  state Exp;
branches ;
next     4.10;

4.10
date     88.01.14.12.50.35;  author steiner;  state Exp;
branches ;
next     4.9;

4.9
date     88.01.13.19.08.31;  author steiner;  state Exp;
branches ;
next     4.8;

4.8
date     87.12.06.10.04.47;  author steiner;  state Exp;
branches ;
next     4.7;

4.7
date     87.10.29.10.50.29;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     87.10.28.14.15.38;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     87.10.28.12.04.52;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.20.10.31.02;  author jtkohl;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.20.10.13.23;  author jtkohl;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.22.15.00.51;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.46.49;  author steiner;  state Exp;
branches ;
next     3.13;

3.13
date     86.09.05.16.08.51;  author spm;  state Exp;
branches ;
next     3.12;

3.12
date     86.09.05.16.02.30;  author bcn;  state Exp;
branches ;
next     3.11;

3.11
date     86.08.15.09.45.43;  author bcn;  state Exp;
branches ;
next     3.10;

3.10
date     86.08.12.12.39.31;  author bcn;  state Exp;
branches ;
next     3.9;

3.9
date     86.07.16.12.15.11;  author bcn;  state Exp;
branches ;
next     3.8;

3.8
date     86.05.23.13.09.32;  author spm;  state Exp;
branches ;
next     3.7;

3.7
date     86.05.15.15.00.41;  author spm;  state Exp;
branches ;
next     3.6;

3.6
date     86.05.01.18.48.57;  author spm;  state Exp;
branches ;
next     3.5;

3.5
date     86.05.01.18.20.08;  author spm;  state Exp;
branches ;
next     3.4;

3.4
date     86.05.01.18.11.47;  author spm;  state Exp;
branches ;
next     3.3;

3.3
date     86.04.18.12.37.52;  author bcn;  state Exp;
branches ;
next     3.2;

3.2
date     86.04.02.16.39.15;  author bcn;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.12.13.33;  author bcn;  state Exp;
branches ;
next     1.9;

1.9
date     86.03.25.15.59.02;  author spm;  state Exp;
branches ;
next     1.8;

1.8
date     86.03.21.15.40.41;  author spm;  state Exp;
branches ;
next     1.7;

1.7
date     86.03.20.17.01.56;  author spm;  state Exp;
branches ;
next     1.6;

1.6
date     85.12.06.21.01.24;  author bcn;  state Exp;
branches ;
next     1.5;

1.5
date     85.11.27.10.02.37;  author bcn;  state Exp;
branches ;
next     1.4;

1.4
date     85.11.26.14.24.59;  author bcn;  state Exp;
branches ;
next     1.3;

1.3
date     85.11.18.14.16.47;  author bcn;  state Exp;
branches ;
next     1.2;

1.2
date     85.11.18.12.29.08;  author bcn;  state Exp;
branches ;
next     1.1;

1.1
date     85.11.17.19.09.01;  author bcn;  state Exp;
branches ;
next     ;


desc
@Include file for libkrb.
@


4.27
log
@remove dependency on des.h and mit-copyright.h
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/include/RCS/krb.h,v $
 * $Author: jtkohl $
 * $Header: /usr/src/kerberosIV/src/include/RCS/krb.h,v 4.26 89/08/08 17:55:25 jtkohl Exp Locker: kfall $ 
 *
 * Copyright 1987, 1988 by the Massachusetts Institute of Technology. 
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>. 
 *
 * Include file for the Kerberos library. 
 */

/* Only one time, please */
#ifndef	KRB_DEFS
#define KRB_DEFS

#ifdef	ATHENA
#include <mit-copyright.h>

/* Need some defs from des.h	 */
#include <des.h>
#endif

/* Text describing error codes */
#define		MAX_KRB_ERRORS	256
extern char *krb_err_txt[MAX_KRB_ERRORS];

/* These are not defined for at least SunOS 3.3 and Ultrix 2.2 */
#if defined(ULTRIX022) || (defined(SunOS) && SunOS < 40)
#define FD_ZERO(p)  ((p)->fds_bits[0] = 0)
#define FD_SET(n, p)   ((p)->fds_bits[0] |= (1 << (n)))
#define FD_ISSET(n, p)   ((p)->fds_bits[0] & (1 << (n)))
#endif /* ULTRIX022 || SunOS */

/* General definitions */
#define		KSUCCESS	0
#define		KFAILURE	255

#ifdef NO_UIDGID_T
typedef unsigned short uid_t;
typedef unsigned short gid_t;
#endif /* NO_UIDGID_T */

/*
 * Kerberos specific definitions 
 *
 * KRBLOG is the log file for the kerberos master server. KRB_CONF is
 * the configuration file where different host machines running master
 * and slave servers can be found. KRB_MASTER is the name of the
 * machine with the master database.  The admin_server runs on this
 * machine, and all changes to the db (as opposed to read-only
 * requests, which can go to slaves) must go to it. KRB_HOST is the
 * default machine * when looking for a kerberos slave server.  Other
 * possibilities are * in the KRB_CONF file. KRB_REALM is the name of
 * the realm. 
 */

#ifdef notdef
this is server - only, does not belong here;
#define 	KRBLOG 		"/etc/kerberosIV/kerberos.log"
are these used anyplace '?';
#define		VX_KRB_HSTFILE	"/etc/kerberosIV/krbhst"
#define		PC_KRB_HSTFILE	"\\kerberos\\krbhst"
#endif

#define		KRB_CONF	"/etc/kerberosIV/krb.conf"
#define		KRB_RLM_TRANS	"/etc/kerberosIV/krb.realms"
#define		KRB_MASTER	"kerberos"
#define		KRB_HOST	 KRB_MASTER
#define		KRB_REALM	"CS.BERKELEY.EDU"

/* The maximum sizes for aname, realm, sname, and instance +1 */
#define 	ANAME_SZ	40
#define		REALM_SZ	40
#define		SNAME_SZ	40
#define		INST_SZ		40
/* include space for '.' and '@@' */
#define		MAX_K_NAME_SZ	(ANAME_SZ + INST_SZ + REALM_SZ + 2)
#define		KKEY_SZ		100
#define		VERSION_SZ	1
#define		MSG_TYPE_SZ	1
#define		DATE_SZ		26	/* RTI date output */

#define		MAX_HSTNM	100

#ifndef DEFAULT_TKT_LIFE		/* allow compile-time override */
#define		DEFAULT_TKT_LIFE	96 /* default lifetime for krb_mk_req
					      & co., 8 hrs */
#endif

/* Definition of text structure used to pass text around */
#define		MAX_KTXT_LEN	1250

struct ktext {
    int     length;		/* Length of the text */
    unsigned char dat[MAX_KTXT_LEN];	/* The data itself */
    unsigned long mbz;		/* zero to catch runaway strings */
};

typedef struct ktext *KTEXT;
typedef struct ktext KTEXT_ST;


/* Definitions for send_to_kdc */
#define	CLIENT_KRB_TIMEOUT	4	/* time between retries */
#define CLIENT_KRB_RETRY	5	/* retry this many times */
#define	CLIENT_KRB_BUFLEN	512	/* max unfragmented packet */

/* Definitions for ticket file utilities */
#define	R_TKT_FIL	0
#define	W_TKT_FIL	1

/* Definitions for cl_get_tgt */
#ifdef PC
#define CL_GTGT_INIT_FILE		"\\kerberos\\k_in_tkts"
#else
#define CL_GTGT_INIT_FILE		"/etc/kerberosIV/k_in_tkts"
#endif PC

/* Parameters for rd_ap_req */
/* Maximum alloable clock skew in seconds */
#define 	CLOCK_SKEW	5*60
/* Filename for readservkey */
#define		KEYFILE		"/etc/kerberosIV/srvtab"

/* Structure definition for rd_ap_req */

struct auth_dat {
    unsigned char k_flags;	/* Flags from ticket */
    char    pname[ANAME_SZ];	/* Principal's name */
    char    pinst[INST_SZ];	/* His Instance */
    char    prealm[REALM_SZ];	/* His Realm */
    unsigned long checksum;	/* Data checksum (opt) */
    C_Block session;		/* Session Key */
    int     life;		/* Life of ticket */
    unsigned long time_sec;	/* Time ticket issued */
    unsigned long address;	/* Address in ticket */
    KTEXT_ST reply;		/* Auth reply (opt) */
};

typedef struct auth_dat AUTH_DAT;

/* Structure definition for credentials returned by get_cred */

struct credentials {
    char    service[ANAME_SZ];	/* Service name */
    char    instance[INST_SZ];	/* Instance */
    char    realm[REALM_SZ];	/* Auth domain */
    C_Block session;		/* Session key */
    int     lifetime;		/* Lifetime */
    int     kvno;		/* Key version number */
    KTEXT_ST ticket_st;		/* The ticket itself */
    long    issue_date;		/* The issue time */
    char    pname[ANAME_SZ];	/* Principal's name */
    char    pinst[INST_SZ];	/* Principal's instance */
};

typedef struct credentials CREDENTIALS;

/* Structure definition for rd_private_msg and rd_safe_msg */

struct msg_dat {
    unsigned char *app_data;	/* pointer to appl data */
    unsigned long app_length;	/* length of appl data */
    unsigned long hash;		/* hash to lookup replay */
    int     swap;		/* swap bytes? */
    long    time_sec;		/* msg timestamp seconds */
    unsigned char time_5ms;	/* msg timestamp 5ms units */
};

typedef struct msg_dat MSG_DAT;


/* Location of ticket file for save_cred and get_cred */
#ifdef PC
#define TKT_FILE        "\\kerberos\\ticket.ses"
#else
#define TKT_FILE        tkt_string()
#define TKT_ROOT        "/tmp/tkt"
#endif PC

/* Error codes returned from the KDC */
#define		KDC_OK		0	/* Request OK */
#define		KDC_NAME_EXP	1	/* Principal expired */
#define		KDC_SERVICE_EXP	2	/* Service expired */
#define		KDC_AUTH_EXP	3	/* Auth expired */
#define		KDC_PKT_VER	4	/* Protocol version unknown */
#define		KDC_P_MKEY_VER	5	/* Wrong master key version */
#define		KDC_S_MKEY_VER 	6	/* Wrong master key version */
#define		KDC_BYTE_ORDER	7	/* Byte order unknown */
#define		KDC_PR_UNKNOWN	8	/* Principal unknown */
#define		KDC_PR_N_UNIQUE 9	/* Principal not unique */
#define		KDC_NULL_KEY   10	/* Principal has null key */
#define		KDC_GEN_ERR    20	/* Generic error from KDC */


/* Values returned by get_credentials */
#define		GC_OK		0	/* Retrieve OK */
#define		RET_OK		0	/* Retrieve OK */
#define		GC_TKFIL       21	/* Can't read ticket file */
#define		RET_TKFIL      21	/* Can't read ticket file */
#define		GC_NOTKT       22	/* Can't find ticket or TGT */
#define		RET_NOTKT      22	/* Can't find ticket or TGT */


/* Values returned by mk_ap_req	 */
#define		MK_AP_OK	0	/* Success */
#define		MK_AP_TGTEXP   26	/* TGT Expired */

/* Values returned by rd_ap_req */
#define		RD_AP_OK	0	/* Request authentic */
#define		RD_AP_UNDEC    31	/* Can't decode authenticator */
#define		RD_AP_EXP      32	/* Ticket expired */
#define		RD_AP_NYV      33	/* Ticket not yet valid */
#define		RD_AP_REPEAT   34	/* Repeated request */
#define		RD_AP_NOT_US   35	/* The ticket isn't for us */
#define		RD_AP_INCON    36	/* Request is inconsistent */
#define		RD_AP_TIME     37	/* delta_t too big */
#define		RD_AP_BADD     38	/* Incorrect net address */
#define		RD_AP_VERSION  39	/* protocol version mismatch */
#define		RD_AP_MSG_TYPE 40	/* invalid msg type */
#define		RD_AP_MODIFIED 41	/* message stream modified */
#define		RD_AP_ORDER    42	/* message out of order */
#define		RD_AP_UNAUTHOR 43	/* unauthorized request */

/* Values returned by get_pw_tkt */
#define		GT_PW_OK	0	/* Got password changing tkt */
#define		GT_PW_NULL     51	/* Current PW is null */
#define		GT_PW_BADPW    52	/* Incorrect current password */
#define		GT_PW_PROT     53	/* Protocol Error */
#define		GT_PW_KDCERR   54	/* Error returned by KDC */
#define		GT_PW_NULLTKT  55	/* Null tkt returned by KDC */


/* Values returned by send_to_kdc */
#define		SKDC_OK		0	/* Response received */
#define		SKDC_RETRY     56	/* Retry count exceeded */
#define		SKDC_CANT      57	/* Can't send request */

/*
 * Values returned by get_intkt
 * (can also return SKDC_* and KDC errors)
 */

#define		INTK_OK		0	/* Ticket obtained */
#define		INTK_W_NOTALL  61	/* Not ALL tickets returned */
#define		INTK_BADPW     62	/* Incorrect password */
#define		INTK_PROT      63	/* Protocol Error */
#define		INTK_ERR       70	/* Other error */

/* Values returned by get_adtkt */
#define         AD_OK           0	/* Ticket Obtained */
#define         AD_NOTGT       71	/* Don't have tgt */

/* Error codes returned by ticket file utilities */
#define		NO_TKT_FIL	76	/* No ticket file found */
#define		TKT_FIL_ACC	77	/* Couldn't access tkt file */
#define		TKT_FIL_LCK	78	/* Couldn't lock ticket file */
#define		TKT_FIL_FMT	79	/* Bad ticket file format */
#define		TKT_FIL_INI	80	/* tf_init not called first */

/* Error code returned by kparse_name */
#define		KNAME_FMT	81	/* Bad Kerberos name format */

/* Error code returned by krb_mk_safe */
#define		SAFE_PRIV_ERROR	-1	/* syscall error */

/*
 * macros for byte swapping; also scratch space
 * u_quad  0-->7, 1-->6, 2-->5, 3-->4, 4-->3, 5-->2, 6-->1, 7-->0
 * u_long  0-->3, 1-->2, 2-->1, 3-->0
 * u_short 0-->1, 1-->0
 */

#define     swap_u_16(x) {\
 unsigned long   _krb_swap_tmp[4];\
 swab(((char *) x) +0, ((char *)  _krb_swap_tmp) +14 ,2); \
 swab(((char *) x) +2, ((char *)  _krb_swap_tmp) +12 ,2); \
 swab(((char *) x) +4, ((char *)  _krb_swap_tmp) +10 ,2); \
 swab(((char *) x) +6, ((char *)  _krb_swap_tmp) +8  ,2); \
 swab(((char *) x) +8, ((char *)  _krb_swap_tmp) +6 ,2); \
 swab(((char *) x) +10,((char *)  _krb_swap_tmp) +4 ,2); \
 swab(((char *) x) +12,((char *)  _krb_swap_tmp) +2 ,2); \
 swab(((char *) x) +14,((char *)  _krb_swap_tmp) +0 ,2); \
 bcopy((char *)_krb_swap_tmp,(char *)x,16);\
                            }

#define     swap_u_12(x) {\
 unsigned long   _krb_swap_tmp[4];\
 swab(( char *) x,     ((char *)  _krb_swap_tmp) +10 ,2); \
 swab(((char *) x) +2, ((char *)  _krb_swap_tmp) +8 ,2); \
 swab(((char *) x) +4, ((char *)  _krb_swap_tmp) +6 ,2); \
 swab(((char *) x) +6, ((char *)  _krb_swap_tmp) +4 ,2); \
 swab(((char *) x) +8, ((char *)  _krb_swap_tmp) +2 ,2); \
 swab(((char *) x) +10,((char *)  _krb_swap_tmp) +0 ,2); \
 bcopy((char *)_krb_swap_tmp,(char *)x,12);\
                            }

#define     swap_C_Block(x) {\
 unsigned long   _krb_swap_tmp[4];\
 swab(( char *) x,    ((char *)  _krb_swap_tmp) +6 ,2); \
 swab(((char *) x) +2,((char *)  _krb_swap_tmp) +4 ,2); \
 swab(((char *) x) +4,((char *)  _krb_swap_tmp) +2 ,2); \
 swab(((char *) x) +6,((char *)  _krb_swap_tmp)    ,2); \
 bcopy((char *)_krb_swap_tmp,(char *)x,8);\
                            }
#define     swap_u_quad(x) {\
 unsigned long   _krb_swap_tmp[4];\
 swab(( char *) &x,    ((char *)  _krb_swap_tmp) +6 ,2); \
 swab(((char *) &x) +2,((char *)  _krb_swap_tmp) +4 ,2); \
 swab(((char *) &x) +4,((char *)  _krb_swap_tmp) +2 ,2); \
 swab(((char *) &x) +6,((char *)  _krb_swap_tmp)    ,2); \
 bcopy((char *)_krb_swap_tmp,(char *)&x,8);\
                            }

#define     swap_u_long(x) {\
 unsigned long   _krb_swap_tmp[4];\
 swab((char *)  &x,    ((char *)  _krb_swap_tmp) +2 ,2); \
 swab(((char *) &x) +2,((char *)  _krb_swap_tmp),2); \
 x = _krb_swap_tmp[0];   \
                           }

#define     swap_u_short(x) {\
 unsigned short	_krb_swap_sh_tmp; \
 swab((char *)  &x,    ( &_krb_swap_sh_tmp) ,2); \
 x = (unsigned short) _krb_swap_sh_tmp; \
                            }

/* Kerberos ticket flag field bit definitions */
#define K_FLAG_ORDER    0       /* bit 0 --> lsb */
#define K_FLAG_1                /* reserved */
#define K_FLAG_2                /* reserved */
#define K_FLAG_3                /* reserved */
#define K_FLAG_4                /* reserved */
#define K_FLAG_5                /* reserved */
#define K_FLAG_6                /* reserved */
#define K_FLAG_7                /* reserved, bit 7 --> msb */

#ifndef PC
char *tkt_string();
#endif	PC

#ifdef	OLDNAMES
#define krb_mk_req	mk_ap_req
#define krb_rd_req	rd_ap_req
#define krb_kntoln	an_to_ln
#define krb_set_key	set_serv_key
#define krb_get_cred	get_credentials
#define krb_mk_priv	mk_private_msg
#define krb_rd_priv	rd_private_msg
#define krb_mk_safe	mk_safe_msg
#define krb_rd_safe	rd_safe_msg
#define krb_mk_err	mk_appl_err_msg
#define krb_rd_err	rd_appl_err_msg
#define krb_ck_repl	check_replay
#define	krb_get_pw_in_tkt	get_in_tkt
#define krb_get_svc_in_tkt	get_svc_in_tkt
#define krb_get_pw_tkt		get_pw_tkt
#define krb_realmofhost		krb_getrealm
#define krb_get_phost		get_phost
#define krb_get_krbhst		get_krbhst
#define krb_get_lrealm		get_krbrlm
#endif	OLDNAMES

/* Defines for krb_sendauth and krb_recvauth */

#define	KOPT_DONT_MK_REQ 0x00000001 /* don't call krb_mk_req */
#define	KOPT_DO_MUTUAL   0x00000002 /* do mutual auth */

#define	KOPT_DONT_CANON  0x00000004 /*
				     * don't canonicalize inst as
				     * a hostname
				     */

#define	KRB_SENDAUTH_VLEN 8	    /* length for version strings */

#ifdef ATHENA_COMPAT
#define	KOPT_DO_OLDSTYLE 0x00000008 /* use the old-style protocol */
#endif ATHENA_COMPAT

#endif	KRB_DEFS
@


4.26
log
@change sense of the #ifdef for uid_t's and gid_t's
Programmer: Jay Berkenbilt
Auditor: John Kohl
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/include/RCS/krb.h,v $
d4 1
a4 1
 * $Header: /mit/kerberos/src/include/RCS/krb.h,v 4.25 89/06/02 13:13:41 jtkohl Exp Locker: qjb $ 
d18 1
d23 1
d61 1
a61 1
#define 	KRBLOG 		"/kerberos/kerberos.log"
d63 1
a63 1
#define		VX_KRB_HSTFILE	"/etc/krbhst"
d67 2
a68 2
#define		KRB_CONF	"/etc/krb.conf"
#define		KRB_RLM_TRANS	"/etc/krb.realms"
d71 1
a71 1
#define		KRB_REALM	"ATHENA.MIT.EDU"
d118 1
a118 1
#define CL_GTGT_INIT_FILE		"/etc/k_in_tkts"
d125 1
a125 1
#define		KEYFILE		"/etc/srvtab"
@


4.25
log
@fix up conditional inclusion of the macros for new SunOS style.
uid/gid_t should be keyed off UIDGID_T, not ultrix/sun
@
text
@d3 2
a4 2
 * $Author: wesommer $
 * $Header: krb.h,v 4.24 89/01/23 15:48:43 jtkohl Locked $ 
d38 1
a38 1
#ifndef UIDGID_T
d41 1
a41 1
#endif /* !UIDGID_T */
@


4.24
log
@Add more backwards compatibility aliases.
@
text
@d3 2
a4 2
 * $Author: jtkohl $
 * $Header: krb.h,v 4.23 89/01/19 18:06:33 jtkohl Locked $ 
d27 2
a28 2
/* These are not defined for at least SUNOS 3.2 and Ultrix 2.2 */
#if defined(sun) || defined(ULTRIX022)
d32 1
a32 1
#endif /* defined(sun) || defined(ULTRIX022) */
d38 1
a38 1
#if defined(ULTRIX022) || defined(sun)
d41 1
a41 1
#endif	/* defined(ULTRIX022) || defined(sun) */
@


4.23
log
@fix mis-spelled INST_SZ
@
text
@d3 2
a4 2
 * $Author: steiner $
 * $Header: krb.h,v 4.22 89/01/19 14:16:43 steiner Exp $ 
d358 4
@


4.22
log
@Programmer: jtkohl
Auditor: steiner
#defined version number length to KRB_SENDAUTH_VLEN,
for krb_sendauth() and krb_recvauth() routines.
@
text
@d3 2
a4 2
 * $Author: rfrench $
 * $Header: krb.h,v 4.21 89/01/18 14:47:00 jtkohl Locked $ 
d77 1
a77 1
#define		MAX_K_NAME_SZ	(ANAME_SZ + INST_SIZE + REALM_SZ + 2)
@


4.21
log
@Programmer: jtkohl
Auditor: rfrench
Changed name of ticket lifetime to DEFAULT_TKT_LIFE and added
MAX_K_NAME_SZ definition
@
text
@d4 1
a4 1
 * $Header: krb.h,v 4.20 89/01/15 15:41:13 jtkohl Locked $ 
d369 3
@


4.20
log
@Programmer: jtkohl
Auditor: rfrench
Added symbols for KRBTKLIFETIME and SAFE_PRIV_ERROR
@
text
@d3 2
a4 2
 * $Author: steiner $
 * $Header: krb.h,v 4.19 89/01/13 18:01:45 jtkohl Locked $ 
d76 2
d85 3
a87 3
#ifndef KRBTKLIFETIME			/* allow compile-time override */
#define		KRBTKLIFETIME	96	/* default lifetime for krb_mk_req
					   & co., 8 hrs */
@


4.19
log
@name changes.
programmer: jtkohl
auditor: steiner
@
text
@d3 2
a4 2
 * $Author: jtkohl $
 * $Header: krb.h,v 4.18 89/01/05 15:01:22 jtkohl Locked $ 
d83 5
d261 3
@


4.18
log
@Programmer: Win Treese
Auditor: John Kohl
changes: fix support for ultrix 2.2/3.0
@
text
@d2 3
a4 3
 * $Source: /source2/Athena/kerberos/src/include/RCS/krb.h,v $
 * $Author: treese $
 * $Header: krb.h,v 1.1 88/12/14 18:51:25 treese Exp $ 
d345 3
@


4.17
log
@Ultrix changes.
Programmer: jon.
Auditor: jtkohl.
@
text
@d2 3
a4 3
 * $Source: /mit/kerberos/src/include/RCS/krb.h,v $
 * $Author: steiner $
 * $Header: krb.h,v 4.16 88/04/25 14:14:59 steiner Exp $ 
d27 2
a28 2
/* These are not defined for the at least SUNOS 3.2 and Ultrix 2.2 */
#if defined(sun) || defined(ultrix)
d32 1
a32 1
#endif /* defined(sun) || defined(ultrix) */
d38 1
a38 1
#if defined(ultrix) || defined(sun)
d41 1
a41 1
#endif	/* defined(ultrix) || defined(sun) */
@


4.16
log
@Added definition for realm translation file.
Programmer: jtkohl.
Auditor: steiner.
@
text
@d3 2
a4 2
 * $Author: jtkohl $
 * $Header: krb.h,v 4.15 88/03/18 17:06:39 jtkohl Exp $ 
d27 2
a28 2
/* These are not defined for the sun. */
#ifdef sun
d32 1
a32 1
#endif /* sun */
@


4.15
log
@fixes from Charley Marker for suns.
@
text
@d3 2
a4 2
 * $Author: steiner $
 * $Header: krb.h,v 4.14 88/02/25 14:44:57 jtkohl Locked $ 
d66 1
@


4.14
log
@Added #include of <mit-copyright.h>.
@
text
@d4 1
a4 1
 * $Header: krb.h,v 4.13 88/02/23 18:26:06 steiner Locked $ 
d27 7
d38 1
a38 1
#ifdef	ultrix
d41 1
a41 1
#endif	ultrix
@


4.13
log
@Copyright notice, etc.
@
text
@d4 1
a4 1
 * $Header: krb.h,v 4.12 88/02/23 18:01:23 steiner Locked $ 
d17 2
@


4.12
log
@COMPAT should be ATHENA_COMPAT.
Programmer: steiner.
Auditor: jtkohl.
@
text
@d4 1
a4 1
 * $Header: krb.h,v 4.11 88/02/01 17:06:36 steiner Locked $ 
d6 1
a6 1
 * Copyright 1987 by the Massachusetts Institute of Technology. 
a12 2

#include <mit-copyright.h>
@


4.11
log
@New defs for krb_sendauth and krb_recvauth.
Programmer: jtkohl.
Auditor: jon.
@
text
@d4 1
a4 1
 * $Header: krb.h,v 4.10 88/01/14 12:50:35 jtkohl Locked $ 
d348 1
a348 1
#ifdef COMPAT
d350 1
a350 1
#endif COMPAT
@


4.10
log
@Formatted.
Programmer: steiner.
Auditor: jtkohl.
@
text
@d4 1
a4 1
 * $Header: krb.h,v 4.9 88/01/13 19:08:31 steiner Exp $ 
d338 13
@


4.9
log
@Added some defs for Ultrix compatibility.
Added ifdef OLDNAMES.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/include/RCS/krb.h,v $
d4 1
a4 1
 * $Header: krb.h,v 4.8 87/12/06 10:04:47 steiner Locked $
d6 1
a6 1
 * Copyright 1987 by the Massachusetts Institute of Technology.
d8 2
a9 2
 * For copying and distribution information,
 * please see the file <mit-copyright.h>.
d11 1
a11 1
 * Include file for the Kerberos library.
d20 1
a20 1
/* Need some defs from des.h	*/
d25 1
a25 1
extern char	*krb_err_txt[MAX_KRB_ERRORS];
d35 1
d37 1
a37 1
 * Kerberos specific definitions
d39 9
a47 10
 * KRBLOG is the log file for the kerberos master server.
 * KRB_CONF is the configuration file where different host
 * machines running master and slave servers can be found.
 * KRB_MASTER is the name of the machine with the master
 * database.  The admin_server runs on this machine, and all
 * changes to the db (as opposed to read-only requests, which
 * can go to slaves) must go to it.
 * KRB_HOST is the default machine when looking for a kerberos
 * slave server.  Other possibilities are in the KRB_CONF file.
 * KRB_REALM is the name of the realm.
d51 1
a51 1
this is server-only, does not belong here;
d71 1
a71 1
#define		DATE_SZ		26		/* RTI date output */
d78 3
a80 4
struct ktext
{
    int	length;			/* Length of the text 	*/
    unsigned char dat[MAX_KTXT_LEN]; /* The data itself	*/
d84 2
a85 2
typedef	struct ktext	*KTEXT;
typedef struct ktext	KTEXT_ST;
d104 2
a105 2
/* Parameters for rd_ap_req 			*/
/* Maximum alloable clock skew in seconds 	*/
d107 1
a107 1
/* Filename for readservkey			*/
d112 11
a122 12
struct	auth_dat
{
    unsigned char	k_flags;	/* Flags from ticket */
    char		pname[ANAME_SZ]; /* Principal's name */
    char		pinst[INST_SZ];	/* His Instance */
    char		prealm[REALM_SZ]; /* His Realm */
    unsigned long	checksum;	/* Data checksum (opt) */
    C_Block		session;	/* Session Key */
    int			life;		/* Life of ticket */
    unsigned long	time_sec;	/* Time ticket issued */ 
    unsigned long	address;	/* Address in ticket */
    KTEXT_ST		reply;		/* Auth reply (opt) */
d127 1
a127 1
/* Structure definition for credentials returned by get_credentials */
d129 11
a139 12
struct	credentials
{
    char		service[ANAME_SZ]; /* Service name */
    char		instance[INST_SZ]; /* Instance */
    char		realm[REALM_SZ]; /* Auth domain */
    C_Block		session;	/* Session key */
    int			lifetime;	/* Lifetime */
    int			kvno;		/* Key version number */
    KTEXT_ST		ticket_st;	/* The ticket itself */
    long		issue_date;	/* The issue time */
    char		pname[ANAME_SZ]; /* Principal's name */
    char		pinst[INST_SZ]; /* Principal's instance */
d146 7
a152 8
struct  msg_dat
{
    unsigned char   *app_data;          /* pointer to appl data */
    unsigned long   app_length;         /* length of appl data */
    unsigned long   hash;               /* hash to lookup replay */
    int             swap;               /* swap bytes? */
    long            time_sec;           /* msg timestamp seconds */
    unsigned char   time_5ms;           /* msg timestamp 5ms units */
d158 1
a158 1
/* Location of ticket file for save_credentials and get_credentials */
d167 12
a178 12
#define		KDC_OK		0 /* Request OK */
#define		KDC_NAME_EXP	1 /* Principal expired */
#define		KDC_SERVICE_EXP	2 /* Service expired */
#define		KDC_AUTH_EXP	3 /* Auth expired */
#define		KDC_PKT_VER	4 /* Protocol version unknown */
#define		KDC_P_MKEY_VER	5 /* Incorrect master key version */ 
#define		KDC_S_MKEY_VER 	6 /* Incorrect master key version */ 
#define		KDC_BYTE_ORDER	7 /* Byte order unknown */
#define		KDC_PR_UNKNOWN	8 /* Principal unknown */
#define		KDC_PR_N_UNIQUE 9 /* Principal not unique */
#define		KDC_NULL_KEY   10 /* Principal has null key */
#define		KDC_GEN_ERR    20 /* Generic error from KDC */
d182 6
a187 6
#define		GC_OK		0 /* Retrieve OK */
#define		RET_OK		0 /* Retrieve OK */
#define		GC_TKFIL       21 /* Can't read ticket file */
#define		RET_TKFIL      21 /* Can't read ticket file */
#define		GC_NOTKT       22 /* Can't find ticket or TGT */
#define		RET_NOTKT      22 /* Can't find ticket or TGT */
d190 3
a192 3
/* Values returned by mk_ap_req	*/
#define		MK_AP_OK	0 /* Success */
#define		MK_AP_TGTEXP   26 /* TGT Expired */
d195 14
a208 14
#define		RD_AP_OK	0 /* Request authentic */
#define		RD_AP_UNDEC    31 /* Can't decode authenticator */
#define		RD_AP_EXP      32 /* Ticket expired */
#define		RD_AP_NYV      33 /* Ticket not yet valid */
#define		RD_AP_REPEAT   34 /* Repeated request */
#define		RD_AP_NOT_US   35 /* The ticket isn't for us */
#define		RD_AP_INCON    36 /* Request is inconsistent */
#define		RD_AP_TIME     37 /* delta_t too big */
#define		RD_AP_BADD     38 /* Incorrect net address */
#define		RD_AP_VERSION  39 /* protocol version mismatch */
#define		RD_AP_MSG_TYPE 40 /* invalid msg type */
#define		RD_AP_MODIFIED 41 /* message stream modified */
#define		RD_AP_ORDER    42 /* message out of order */
#define		RD_AP_UNAUTHOR 43 /* unauthorized request */
d211 6
a216 6
#define		GT_PW_OK	0 /* Got password changing ticket */
#define		GT_PW_NULL     51 /* Current PW is null */
#define		GT_PW_BADPW    52 /* Incorrect current password */
#define		GT_PW_PROT     53 /* Protocol Error */
#define		GT_PW_KDCERR   54 /* Error returned by KDC */
#define		GT_PW_NULLTKT  55 /* Null ticket returned by KDC */
d220 3
a222 3
#define		SKDC_OK		0 /* Response received */
#define		SKDC_RETRY     56 /* Retry count exceeded */
#define		SKDC_CANT      57 /* Can't send request */
d224 4
a227 6
/* Values returned by get_intkt (can also return SKDC_* and KDC errors) */
#define		INTK_OK		0 /* Ticket obtained */
#define		INTK_W_NOTALL  61 /* Not ALL tickets returned */
#define		INTK_BADPW     62 /* Incorrect password */
#define		INTK_PROT      63 /* Protocol Error */
#define		INTK_ERR       70 /* Other error */
d229 6
d236 2
a237 2
#define         AD_OK           0 /* Ticket Obtained */
#define         AD_NOTGT       71 /* Don't have tkt granting tkt */
d240 5
a244 5
#define		NO_TKT_FIL	76 /* No ticket file found */
#define		TKT_FIL_ACC	77 /* Couldn't access ticket file */
#define		TKT_FIL_LCK	78 /* Couldn't lock ticket file */
#define		TKT_FIL_FMT	79 /* Bad ticket file format */
#define		TKT_FIL_INI	80 /* tf_init not called first */
d247 1
a247 1
#define		KNAME_FMT	81 /* Bad Kerberos name format */
d249 2
a250 1
/* macros for byte swapping; also scratch space
@


4.8
log
@Ken's changes; formatting, others?
@
text
@d2 3
a4 3
 * $Source: /u2/lockers/kerberos/include/RCS/krb.h,v $
 * $Author: jtkohl $
 * $Header: krb.h,v 4.7 87/10/29 10:50:29 raeburn Locked $
d31 4
d321 16
a336 1
#endif
@


4.7
log
@declarations so lint is happy
y.
@
text
@d1 4
a4 3
/* $Source: /u3/kerberos.new/include/RCS/krb.h,v $
 * $Author: steiner $
 * $Header: krb.h,v 4.6 87/10/28 14:15:38 jtkohl Locked $
d14 1
a14 1
#include	<mit-copyright.h>
d24 2
a25 2
#define		MAX_KRB_ERRORS		256
extern	char	*krb_err_txt[MAX_KRB_ERRORS];
d28 2
a29 2
#define		KSUCCESS		0
#define		KFAILURE		255
d31 2
a32 1
/* Kerberos specific definitions
d46 2
d49 1
a49 1
#define		KRB_CONF	"/etc/krb.conf"
d52 3
d74 5
a78 4
struct		ktext
{	int	length;				/* Length of the text 	*/
	unsigned char	dat[MAX_KTXT_LEN];	/* The data itself	*/
	unsigned long	mbz;	/* must be zero, catch runaway strings	*/
d86 3
a88 3
#define	CLIENT_KRB_TIMEOUT	4	/*  time between retries */
#define CLIENT_KRB_RETRY	5	/*  retry this many times  */
#define	CLIENT_KRB_BUFLEN	512	/*  max unfragmented packet size */
d110 12
a121 10
{	unsigned char	k_flags;		/* Flags from ticket	*/
	char		pname[ANAME_SZ];	/* Principal's name	*/
	char		pinst[INST_SZ];		/* His Instance		*/
	char		prealm[REALM_SZ];	/* His Realm		*/
	unsigned long	checksum;		/* Data checksum (opt)	*/
	C_Block		session;		/* Session Key		*/
	int		life;			/* Life of ticket	*/
	unsigned long   time_sec;		/* Time ticket issued	*/ 
	unsigned long	address;		/* Address in ticket	*/
	KTEXT_ST	reply;};		/* Auth reply (opt)	*/
d123 1
a123 1
typedef		struct	auth_dat	AUTH_DAT;
d128 12
a139 10
{	char            service[ANAME_SZ];	/* Service name         */
	char            instance[INST_SZ];      /* Instance             */
	char            realm[REALM_SZ];        /* Auth domain          */
	C_Block         session;		/* Session key          */
	int             lifetime;		/* Lifetime             */
	int             kvno;			/* Key version number   */
	KTEXT_ST        ticket_st;		/* The ticket itself    */
	long            issue_date;    		/* The issue time       */
	char		pname[ANAME_SZ];	/* Principal's name	*/
	char            pinst[INST_SZ];};       /* Principal's instance */
d141 1
a141 1
typedef		struct	credentials	CREDENTIALS;
d143 1
a143 1
/* Structure definition for rd_private_msg and rd_safe_msg		*/
d146 8
a153 9
{   unsigned char   *app_data;          /* pointer to application data	*/
    unsigned long   app_length;         /* length of application data  	*/
    unsigned long   hash;               /* hash value to lookup replay	*/
    int             swap;               /* swap bytes?			*/
    long            time_sec;           /* msg timestamp seconds	*/
    unsigned char   time_5ms;           /* msg timestamp 5ms units 	*/
    
}
;
d155 1
a155 1
typedef struct msg_dat      MSG_DAT;
d167 12
a178 12
#define		KDC_OK		0	/* Request OK			*/
#define		KDC_NAME_EXP	1	/* Principal expired		*/
#define		KDC_SERVICE_EXP	2	/* Service expired		*/
#define		KDC_AUTH_EXP	3	/* Auth expired			*/
#define		KDC_PKT_VER	4	/* Protocol version unknown	*/
#define		KDC_P_MKEY_VER	5	/* Incorrect master key version */ 
#define		KDC_S_MKEY_VER 	6 	/* Incorrect master key version */ 
#define		KDC_BYTE_ORDER	7	/* Byte order unknown		*/
#define		KDC_PR_UNKNOWN	8	/* Principal unknown		*/
#define		KDC_PR_N_UNIQUE 9	/* Principal not unique		*/
#define		KDC_NULL_KEY   10	/* Principal has null key	*/
#define		KDC_GEN_ERR    20       /* Generic error from KDC       */
d182 6
a187 6
#define		GC_OK		0	/* Retrieve OK			*/
#define		RET_OK		0	/* Retrieve OK			*/
#define		GC_TKFIL       21	/* Can't read ticket file       */
#define		RET_TKFIL      21	/* Can't read ticket file       */
#define		GC_NOTKT       22       /* Can't find ticket or TGT     */
#define		RET_NOTKT      22       /* Can't find ticket or TGT     */
d191 2
a192 2
#define		MK_AP_OK	0	/* Success			*/
#define		MK_AP_TGTEXP   26	/* TGT Expired			*/
d195 14
a208 14
#define		RD_AP_OK	0	/* Request authentic 		*/
#define		RD_AP_UNDEC    31	/* Can't decode authenticator 	*/
#define		RD_AP_EXP      32	/* Ticket expired		*/
#define		RD_AP_NYV      33	/* Ticket not yet valid		*/
#define		RD_AP_REPEAT   34	/* Repeated request		*/
#define		RD_AP_NOT_US   35	/* The ticket isn't for us	*/
#define		RD_AP_INCON    36	/* Request is inconsistent	*/
#define		RD_AP_TIME     37	/* delta_t too big		*/
#define		RD_AP_BADD     38	/* Incorrect net address	*/
#define		RD_AP_VERSION  39	/* protocol version mismatch    */
#define		RD_AP_MSG_TYPE 40	/* invalid msg type		*/
#define		RD_AP_MODIFIED 41	/* message stream modified      */
#define		RD_AP_ORDER    42       /* message out of order         */
#define		RD_AP_UNAUTHOR 43	/* unauthorized request		*/
d211 6
a216 6
#define		GT_PW_OK	0	/* Got password changing ticket */
#define		GT_PW_NULL     51	/* Current PW is null		*/
#define		GT_PW_BADPW    52	/* Incorrect current password   */
#define		GT_PW_PROT     53	/* Protocol Error		*/
#define		GT_PW_KDCERR   54	/* Error returned by KDC	*/
#define		GT_PW_NULLTKT  55	/* Null ticket returned by KDC	*/
d220 3
a222 3
#define		SKDC_OK		0	/* Response received		*/
#define		SKDC_RETRY     56	/* Retry count exceeded		*/
#define		SKDC_CANT      57	/* Can't send request		*/
d225 5
a229 5
#define		INTK_OK		0	/* Ticket obtained		*/
#define		INTK_W_NOTALL  61	/* Not ALL tickets returned	*/
#define		INTK_BADPW     62	/* Incorrect password   	*/
#define		INTK_PROT      63	/* Protocol Error		*/
#define		INTK_ERR       70	/* Other error			*/
d232 2
a233 2
#define         AD_OK           0       /* Ticket Obtained              */
#define         AD_NOTGT       71	/* Don't have tkt granting tkt  */
d236 5
a240 5
#define		NO_TKT_FIL	76	/* No ticket file found		*/
#define		TKT_FIL_ACC	77	/* Couldn't access ticket file	*/
#define		TKT_FIL_LCK	78	/* Couldn't lock ticket file	*/
#define		TKT_FIL_FMT	79	/* Bad ticket file format	*/
#define		TKT_FIL_INI	80	/* tf_init not called first	*/
d243 1
a243 1
#define		KNAME_FMT	81	/* Bad Kerberos name format	*/
a250 3
unsigned long   swap_tmp[4];
unsigned short	swap_sh_tmp;

d252 10
a261 9
 swab(((char *) x) +0, ((char *)  swap_tmp) +14 ,2); \
 swab(((char *) x) +2, ((char *)  swap_tmp) +12 ,2); \
 swab(((char *) x) +4, ((char *)  swap_tmp) +10 ,2); \
 swab(((char *) x) +6, ((char *)  swap_tmp) +8  ,2); \
 swab(((char *) x) +8, ((char *)  swap_tmp) +6 ,2); \
 swab(((char *) x) +10,((char *)  swap_tmp) +4 ,2); \
 swab(((char *) x) +12,((char *)  swap_tmp) +2 ,2); \
 swab(((char *) x) +14,((char *)  swap_tmp) +0 ,2); \
 bcopy((char *)swap_tmp,(char *)x,16);\
d265 8
a272 7
 swab(( char *) x,     ((char *)  swap_tmp) +10 ,2); \
 swab(((char *) x) +2, ((char *)  swap_tmp) +8 ,2); \
 swab(((char *) x) +4, ((char *)  swap_tmp) +6 ,2); \
 swab(((char *) x) +6, ((char *)  swap_tmp) +4 ,2); \
 swab(((char *) x) +8, ((char *)  swap_tmp) +2 ,2); \
 swab(((char *) x) +10,((char *)  swap_tmp) +0 ,2); \
 bcopy((char *)swap_tmp,(char *)x,12);\
d276 6
a281 5
 swab(( char *) x,    ((char *)  swap_tmp) +6 ,2); \
 swab(((char *) x) +2,((char *)  swap_tmp) +4 ,2); \
 swab(((char *) x) +4,((char *)  swap_tmp) +2 ,2); \
 swab(((char *) x) +6,((char *)  swap_tmp)    ,2); \
 bcopy((char *)swap_tmp,(char *)x,8);\
d284 6
a289 5
 swab(( char *) &x,    ((char *)  swap_tmp) +6 ,2); \
 swab(((char *) &x) +2,((char *)  swap_tmp) +4 ,2); \
 swab(((char *) &x) +4,((char *)  swap_tmp) +2 ,2); \
 swab(((char *) &x) +6,((char *)  swap_tmp)    ,2); \
 bcopy((char *)swap_tmp,(char *)&x,8);\
d293 4
a296 3
 swab((char *)  &x,    ((char *)  swap_tmp) +2 ,2); \
 swab(((char *) &x) +2,((char *)  swap_tmp),2); \
 x = swap_tmp[0];   \
d300 3
a302 3
 swab((char *)  &x,    ( &swap_sh_tmp) ,2); \
 printf("\nswap_tmp = %X",swap_sh_tmp); \
 x = (unsigned short) swap_sh_tmp; \
d305 9
a313 9
/* Kerberos ticket flag field bit definitions                              */
#define K_FLAG_ORDER    0       /* bit 0 --> lsb                           */
#define K_FLAG_1                /* reserved                                */
#define K_FLAG_2                /* reserved                                */
#define K_FLAG_3                /* reserved                                */
#define K_FLAG_4                /* reserved                                */
#define K_FLAG_5                /* reserved                                */
#define K_FLAG_6                /* reserved                                */
#define K_FLAG_7                /* reserved, bit 7 --> msb                 */
d315 3
a317 2
char	*klog(), *stime(), *tkt_string();
void log();
@


4.6
log
@Took out #defin KRB_TBLHST, not being used by anybody.
@
text
@d3 1
a3 1
 * $Header: krb.h,v 4.5 87/10/28 12:04:52 steiner Locked $
d302 2
a303 1
char	*klog(), *stime();
@


4.5
log
@Changed KRBLOG to /kerberos directory.
Took the "mit.edu" off the KRB_HOST and KRB_MASTER definitions.
This may break some things.
@
text
@d2 2
a3 2
 * $Author: jtkohl $
 * $Header: krb.h,v 4.4 87/10/20 10:31:02 steiner Locked $
a49 1
#define		KRB_TBLHST	"mit-kerberos"
@


4.4
log
@lint fixes for swapping macros
@
text
@d3 1
a3 1
 * $Header: krb.h,v 4.3 87/10/20 10:13:23 jtkohl Locked $
d30 13
a42 1
/* Kerberos specific definitions */
d44 1
a44 1
#define 	KRBLOG 		"/projects/auth/kerberos.log"
d48 2
a49 2
#define		KRB_MASTER	"kerberos.mit.edu" /* master copy of db      */
#define		KRB_HOST	"kerberos.mit.edu" /* active servers, slaves */
@


4.3
log
@add KNAME_FMT error message (steiner)
@
text
@d1 3
a3 3
/* $Source: /mit/s/t/steiner/kerberos/include/RCS/krb.h,v $
 * $Author: steiner $
 * $Header: krb.h,v 4.2 87/09/22 15:00:51 steiner Locked $
d233 9
a241 9
 swab(((unsigned char *) x) +0, ((unsigned char *)  swap_tmp) +14 ,2); \
 swab(((unsigned char *) x) +2, ((unsigned char *)  swap_tmp) +12 ,2); \
 swab(((unsigned char *) x) +4, ((unsigned char *)  swap_tmp) +10 ,2); \
 swab(((unsigned char *) x) +6, ((unsigned char *)  swap_tmp) +8  ,2); \
 swab(((unsigned char *) x) +8, ((unsigned char *)  swap_tmp) +6 ,2); \
 swab(((unsigned char *) x) +10,((unsigned char *)  swap_tmp) +4 ,2); \
 swab(((unsigned char *) x) +12,((unsigned char *)  swap_tmp) +2 ,2); \
 swab(((unsigned char *) x) +14,((unsigned char *)  swap_tmp) +0 ,2); \
 bcopy(swap_tmp,x,16);\
d245 7
a251 7
 swab(( unsigned char *) x,     ((unsigned char *)  swap_tmp) +10 ,2); \
 swab(((unsigned char *) x) +2, ((unsigned char *)  swap_tmp) +8 ,2); \
 swab(((unsigned char *) x) +4, ((unsigned char *)  swap_tmp) +6 ,2); \
 swab(((unsigned char *) x) +6, ((unsigned char *)  swap_tmp) +4 ,2); \
 swab(((unsigned char *) x) +8, ((unsigned char *)  swap_tmp) +2 ,2); \
 swab(((unsigned char *) x) +10,((unsigned char *)  swap_tmp) +0 ,2); \
 bcopy(swap_tmp,x,12);\
d255 5
a259 5
 swab(( unsigned char *) x,    ((unsigned char *)  swap_tmp) +6 ,2); \
 swab(((unsigned char *) x) +2,((unsigned char *)  swap_tmp) +4 ,2); \
 swab(((unsigned char *) x) +4,((unsigned char *)  swap_tmp) +2 ,2); \
 swab(((unsigned char *) x) +6,((unsigned char *)  swap_tmp)    ,2); \
 bcopy(swap_tmp,x,8);\
d262 5
a266 5
 swab(( unsigned char *) &x,    ((unsigned char *)  swap_tmp) +6 ,2); \
 swab(((unsigned char *) &x) +2,((unsigned char *)  swap_tmp) +4 ,2); \
 swab(((unsigned char *) &x) +4,((unsigned char *)  swap_tmp) +2 ,2); \
 swab(((unsigned char *) &x) +6,((unsigned char *)  swap_tmp)    ,2); \
 bcopy(swap_tmp,&x,8);\
d270 2
a271 2
 swab((unsigned char *)  &x,    ((unsigned char *)  swap_tmp) +2 ,2); \
 swab(((unsigned char *) &x) +2,((unsigned char *)  swap_tmp),2); \
d276 1
a276 1
 swab((unsigned char *)  &x,    ( &swap_sh_tmp) ,2); \
d291 1
a291 1
char	*klog();
@


4.2
log
@Revised user-level commands.
@
text
@d3 1
a3 1
 * $Header$
d219 3
@


4.1
log
@No change; starting version 4.
@
text
@d1 3
a3 4
/* 
 * 	$Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/krb.h,v $
 * 	$Author: spm $
 * 	$Locker: steiner $
d5 1
a5 1
 * Copyright 1985,1986 by the Massachusetts Institute of Technology
d7 4
d13 2
d71 4
d104 1
a104 1
/* Structure definition for credentials returned by retrieve */
d120 1
a120 1
/* Structure definition for rd_private_msg and rd_safe_msg                 */
d123 6
a128 6
{   unsigned char   *app_data;          /* pointer to application data      */
    unsigned long   app_length;         /* length of application data        */
    unsigned long   hash;               /* hash value to lookup replay       */
    int             swap;               /* swap bytes?                       */
    long            time_sec;           /* msg timestamp seconds             */
    unsigned char   time_5ms;           /* msg timestamp 5ms units           */
d136 1
a136 1
/* Location of ticket file for store and retrieve */
d213 6
d290 1
a290 2
#endif

@


3.13
log
@fix swap_u_short macro
@
text
@d2 3
a4 3
 * 	$Source: /mit/projects/auth/src/lib/krb/RCS/krb.h,v $
 * 	$Author: bcn $
 * 	$Locker: spm $
@


3.12
log
@Mostly changes to error codes.
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d212 1
d255 2
a256 1
                            }
d258 3
a260 2
 swab((unsigned char *)  &x,    ((unsigned char *)  swap_tmp) ,2); \
 x = (unsigned short) swap_tmp[0];  \
@


3.11
log
@
Added generic message from kerberos "permission denied"
and renumbered other error messages.  Also changed name
of error from get credentials to GC from RET.
@
text
@d17 4
d23 1
a23 1
#define		KFAILURE		1
d28 1
d34 1
a34 1
#define		KCOOKIE		"*krb*"	        /* for rsh, etc protocol use */
d62 1
a62 1
#define	CLIENT_KRB_TIMEOUT	8	/*  time between retries */
d87 2
a88 1
	C_Block		session[8];		/* Session Key		*/
d147 1
a147 1
#define		KDC_GEN_ERR    11       /* Generic error from KDC       */
d151 1
d153 4
a156 5
#define		GC_OK		0	/* Retrieve OK			*/
#define		RET_TKFIL      12	/* Can't read ticket file       */
#define		GC_TKFIL       12	/* Can't read ticket file       */
#define		RET_NOTKT      13       /* Can't find ticket or TGT     */
#define		GC_NOTKT       13       /* Can't find ticket or TGT     */
d161 1
a161 1
#define		MK_AP_TGTEXP   14	/* TGT Expired			*/
d165 13
a177 12
#define		RD_AP_UNDEC    15	/* Can't decode authenticator 	*/
#define		RD_AP_EXP      16	/* Ticket expired		*/
#define		RD_AP_REPEAT   17	/* Repeated request		*/
#define		RD_AP_NOT_US   18	/* The ticket isn't for us	*/
#define		RD_AP_INCON    19	/* Request is inconsistent	*/
#define		RD_AP_TIME     20	/* delta_t too big		*/
#define		RD_AP_BADD     21	/* Incorrect net address	*/
#define		RD_AP_VERSION  22	/* protocol version mismatch    */
#define		RD_AP_MSG_TYPE 23	/* invalid msg type		*/
#define		RD_AP_MODIFIED 24	/* message stream modified      */
#define		RD_AP_ORDER    25       /* message out of order         */
#define		RD_AP_UNAUTHOR 26	/* unauthorized request		*/
d181 5
a185 5
#define		GT_PW_NULL     27	/* Current PW is null		*/
#define		GT_PW_BADPW    28	/* Incorrect current password   */
#define		GT_PW_PROT     29	/* Protocol Error		*/
#define		GT_PW_KDCERR   30	/* Error returned by KDC	*/
#define		GT_PW_NULLTKT  31	/* Null ticket returned by KDC	*/
d190 2
a191 2
#define		SKDC_RETRY     32	/* Retry count exceeded		*/
#define		SKDC_CANT      33	/* Can't send request		*/
d195 4
a198 4
#define		INTK_W_NOTALL  34	/* Not ALL tickets returned	*/
#define		INTK_BADPW     35	/* Incorrect password   	*/
#define		INTK_PROT      36	/* Protocol Error		*/
#define		INTK_ERR       37	/* Other error			*/
d202 1
a202 1
#define         AD_NOTGT       38	/* Don't have tkt granting tkt  */
@


3.10
log
@Added credentials struct and a few more error codes.
@
text
@d141 1
d144 1
a144 1
/* Values returned by retrieve */
d146 5
a150 2
#define		RET_TKFIL      11	/* Can't read ticket file       */
#define		RET_NOTKT      12       /* Can't find ticket or TGT     */
d155 1
a155 1
#define		MK_AP_TGTEXP   13	/* TGT Expired			*/
d159 12
a170 12
#define		RD_AP_UNDEC    14	/* Can't decode authenticator 	*/
#define		RD_AP_EXP      15	/* Ticket expired		*/
#define		RD_AP_REPEAT   16	/* Repeated request		*/
#define		RD_AP_NOT_US   17	/* The ticket isn't for us	*/
#define		RD_AP_INCON    18	/* Request is inconsistent	*/
#define		RD_AP_TIME     19	/* delta_t too big		*/
#define		RD_AP_BADD     20	/* Incorrect net address	*/
#define		RD_AP_VERSION  21	/* protocol version mismatch    */
#define		RD_AP_MSG_TYPE 22	/* invalid msg type		*/
#define		RD_AP_MODIFIED 23	/* message stream modified      */
#define		RD_AP_ORDER    24       /* message out of order         */
#define		RD_AP_UNAUTHOR 25	/* unauthorized request		*/
d174 5
a178 5
#define		GT_PW_NULL     26	/* Current PW is null		*/
#define		GT_PW_BADPW    27	/* Incorrect current password   */
#define		GT_PW_PROT     28	/* Protocol Error		*/
#define		GT_PW_KDCERR   29	/* Error returned by KDC	*/
#define		GT_PW_NULLTKT  30	/* Null ticket returned by KDC	*/
d183 2
a184 2
#define		SKDC_RETRY     31	/* Retry count exceeded		*/
#define		SKDC_CANT      32	/* Can't send request		*/
d188 4
a191 4
#define		INTK_W_NOTALL  33	/* Not ALL tickets returned	*/
#define		INTK_BADPW     34	/* Incorrect password   	*/
#define		INTK_PROT      35	/* Protocol Error		*/
#define		INTK_ERR       36	/* Other error			*/
d195 1
a195 1
#define         AD_NOTGT       37	/* Don't have tkt granting tkt  */
@


3.9
log
@Lots of changes.  In particular, changed kerberos hostname,
and made error codes uniform.
@
text
@d3 1
a3 1
 * 	$Author: spm $
d89 16
d188 4
@


3.8
log
@add msg_dat struct and master define
@
text
@d4 1
a4 1
 * 	$Locker: spm $
d10 1
a10 1
/* 	Only one time, please	*/
d14 1
a14 1
/* need some defs from des.h	*/
d26 4
a29 4
#define		KRB_MASTER	"menelaus.mit.edu"	/* master copy of db		   */
#define		KRB_HOST	"menelaus.mit.edu"	/* active servers, slave copies */
#define		KRB_TBLHST	"mit-menelaus"
#define		KCOOKIE		"*krb*"	/* for rsh, etc protocol use	   */
d39 1
a39 1
#define		DATE_SZ		26		/* RTI date output						   */
d44 1
a44 1
#define		MAX_KTXT_LEN	1000
d50 1
a50 2
}
;
d57 1
a57 1
#define	CLIENT_KRB_TIMEOUT	4	/*  time between retries */
a73 15
/* Values returned by rd_ap_req */
#define		RD_AP_OK	0	/* Request authentic 		*/
#define		RD_AP_UNDEC	1	/* Can't decode authenticator 	*/
#define		RD_AP_EXP	2	/* Ticket expired		*/
#define		RD_AP_REPEAT	3	/* Repeated request		*/
#define		RD_AP_NOT_US	4	/* The ticket isn't for us	*/
#define		RD_AP_INCON	5	/* Request is inconsistent	*/
#define		RD_AP_TIME	6	/* delta_t too big		*/
#define		RD_AP_BADD	7	/* Incorrect net address	*/
#define		RD_AP_VERSION 8		/* protocol version mismatch    */
#define		RD_AP_MSG_TYPE 9	/* invalid msg type		*/
#define		RD_AP_MODIFIED 10	/* message stream modified, integrity failed */
#define		RD_AP_ORDER		11	/* message out of order or duplicate	   */
#define		RD_AP_UNAUTHOR	12	/* unauthorized request					   */

d89 1
a89 1
/* Structure definition for rd_private_msg and rd_safe_msg				   */
d91 8
a98 8
struct	msg_dat
{	unsigned char	*app_data;				/* pointer to application data			   */
	unsigned long	app_length;			/* length of application data			   */
	unsigned long	hash;				/* hash value to lookup replay			   */
	int				swap;				/* swap bytes?							   */
	long			time_sec;			/* msg timestamp seconds				   */
	unsigned char	time_5ms;			/* msg timestamp 5ms units				   */
	
d102 1
a102 1
typedef	struct msg_dat		MSG_DAT;
d107 1
a107 1
#define TKT_FILE		"\\kerberos\\ticket.ses"
d109 2
a110 2
#define TKT_FILE		tkt_string()
#define	TKT_ROOT		"/tmp/tkt"
d113 61
d239 2
d242 1
@


3.7
log
@*** empty log message ***
@
text
@d3 1
a3 1
 * 	$Author: bcn $
d26 2
a27 1
#define		KRB_HOST	"menelaus.mit.edu"
d105 17
a121 1
/* Location of tiket file for store and retrieve */
@


3.6
log
@u_short --> unsigned short
@
text
@d28 1
d38 1
d87 1
d121 1
a121 1
 swab(( unsigned char *) x,     ((unsigned char *)  swap_tmp) +14 ,2); \
d125 1
a125 1
 swab(( unsigned char *) x) +8, ((unsigned char *)  swap_tmp) +6 ,2); \
d137 1
a137 1
 swab(( unsigned char *) x) +8, ((unsigned char *)  swap_tmp) +2 ,2); \
d139 1
a139 1
 bcopy(swap_tmp,x,16);\
@


3.5
log
@insert swap 12
@
text
@d161 1
a161 1
 x = (u_short) swap_tmp[0];  \
@


3.4
log
@add swap 16
and swap 12
for quad_cksum multiple precision use
@
text
@d115 1
a115 6
unsigned long   swap_tmp_u_16[4];
unsigned long	swap_tmp_C_Block;
unsigned long	swap_tmp_C_Block;
unsigned long   swap_tmp_u_quad[2];
unsigned long   swap_tmp_u_long;
unsigned short  swap_tmp_u_short;
d118 9
a126 9
 swab(( unsigned char *) x,     ((unsigned char *)  swap_tmp_u_16) +14 ,2); \
 swab(((unsigned char *) x) +2, ((unsigned char *)  swap_tmp_u_16) +12 ,2); \
 swab(((unsigned char *) x) +4, ((unsigned char *)  swap_tmp_u_16) +10 ,2); \
 swab(((unsigned char *) x) +6, ((unsigned char *)  swap_tmp_u_16) +8  ,2); \
 swab(( unsigned char *) x) +8, ((unsigned char *)  swap_tmp_u_16) +6 ,2); \
 swab(((unsigned char *) x) +10,((unsigned char *)  swap_tmp_u_16) +4 ,2); \
 swab(((unsigned char *) x) +12,((unsigned char *)  swap_tmp_u_16) +2 ,2); \
 swab(((unsigned char *) x) +14,((unsigned char *)  swap_tmp_u_16) +0 ,2); \
 bcopy(swap_tmp_u_16,x,16);\
d128 11
d140 5
a144 5
 swab(( unsigned char *) x,    ((unsigned char *)  swap_tmp_C_Block) +6 ,2); \
 swab(((unsigned char *) x) +2,((unsigned char *)  swap_tmp_C_Block) +4 ,2); \
 swab(((unsigned char *) x) +4,((unsigned char *)  swap_tmp_C_Block) +2 ,2); \
 swab(((unsigned char *) x) +6,((unsigned char *)  swap_tmp_C_Block)    ,2); \
 bcopy(swap_tmp_C_Block,x,8);\
d147 5
a151 5
 swab(( unsigned char *) &x,    ((unsigned char *)  &swap_tmp_u_quad) +6 ,2); \
 swab(((unsigned char *) &x) +2,((unsigned char *)  &swap_tmp_u_quad) +4 ,2); \
 swab(((unsigned char *) &x) +4,((unsigned char *)  &swap_tmp_u_quad) +2 ,2); \
 swab(((unsigned char *) &x) +6,((unsigned char *)  &swap_tmp_u_quad)    ,2); \
 bcopy(swap_tmp_u_quad,&x,8);\
d155 3
a157 3
 swab((unsigned char *)  &x,    ((unsigned char *)  &swap_tmp_u_long) +2 ,2); \
 swab(((unsigned char *) &x) +2,((unsigned char *)  &swap_tmp_u_long),2); \
 x = swap_tmp_u_long;   \
d160 2
a161 2
 swab((unsigned char *)  &x,    ((unsigned char *)  &swap_tmp_u_short) ,2); \
 x = swap_tmp_u_short;  \
@


3.3
log
@Added KEYFILE
@
text
@d4 1
a4 1
 * 	$Locker:  $
d115 1
d117 1
d121 12
@


3.2
log
@Added structure definition of AUTH_DAT
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d10 7
d35 2
d44 5
a48 2
{	int	length;			/* Length of the text 	*/
	char	dat[MAX_KTXT_LEN];};	/* The data itself      */
d61 1
a61 1
#define CL_GTGT_INIT_FILE		"\\kerberos\\k_login"
d63 1
a63 1
#define CL_GTGT_INIT_FILE		"k_login"
d66 2
a67 2
/* Parameters for rd_ap_req *
/* Maximum alloable clock skew in seconds */
d69 2
d83 2
a85 1

d94 1
a94 1
	char		session[8];		/* Session Key		*/
d115 1
d119 7
d153 2
@


3.1
log
@Now officially at version 3 of protocol.
@
text
@d3 1
a3 1
 * 	$Author: spm $
d67 2
a68 2
#define		RD_AP_VERSION 8		/* protocol version mismatch			   */
#define		RD_AP_MSG_TYPE 9	/* invalid msg type						   */
d70 16
d100 2
a101 2
unsigned long	swap_tmp_u_quad[2];
unsigned long	swap_tmp_u_long;
d103 1
a103 1
#define		swap_u_quad(x) {\
d109 1
a109 1
							}
d111 1
a111 1
#define		swap_u_long(x) {\
d114 3
a116 3
 x = swap_tmp_u_long; 	\
							}
#define		swap_u_short(x) {\
d118 2
a119 2
 x = swap_tmp_u_short; 	\
							}
d121 9
a129 9
/* Kerberos ticket flag field bit definitions							   */
#define	K_FLAG_ORDER	0		/* bit 0 --> lsb						   */
#define	K_FLAG_1				/* reserved								   */
#define	K_FLAG_2				/* reserved								   */
#define	K_FLAG_3				/* reserved								   */
#define	K_FLAG_4				/* reserved								   */
#define	K_FLAG_5				/* reserved								   */
#define	K_FLAG_6				/* reserved								   */
#define	K_FLAG_7				/* reserved, bit 7 --> msb				   */
@


1.9
log
@add byte ordering macros
@
text
@d4 1
a4 27
 * 	$Locker: root $
 *    	$Log:	krb.h,v $
 * Revision 1.8  86/03/21  15:40:41  spm
 * fix u_long to unsigned long
 * 
 * Revision 1.7  86/03/20  17:01:56  spm
 * added macros for byte order swapping
 * 
 * Revision 1.6  85/12/06  21:01:24  bcn
 * Added defs for HSTFILE.
 * 
 * Revision 1.5  85/11/27  10:02:37  bcn
 * Add definition of CLOCK_SKEW
 * 
 * Revision 1.4  85/11/26  14:24:59  bcn
 * Change SUCCESS and FAILURE to KSUCCESS and KFAILURE since
 * SUCCESS and FAILURE conflict with a PCIP definition.
 * 
 * Revision 1.3  85/11/18  14:16:47  bcn
 * Add definition of SUCCESS and FAILURE
 * 
 * Revision 1.2  85/11/18  12:29:08  bcn
 * Add definition for ktext structure.
 * 
 * Revision 1.1  85/11/17  19:09:01  bcn
 * Initial revision
 * 
d6 1
a6 1
 * Copyright 1985 by the Massachusetts Institute of Technology
@


1.8
log
@fix u_long to unsigned long
@
text
@d4 1
a4 1
 * 	$Locker: spm $
d6 3
d93 2
d114 5
a118 5
	swab(( u_char *) &x,    ((u_char *)  &swap_tmp_u_quad) +6 ,2); \
	swab(((u_char *) &x) +2,((u_char *)  &swap_tmp_u_quad) +4 ,2); \
	swab(((u_char *) &x) +4,((u_char *)  &swap_tmp_u_quad) +2 ,2); \
	swab(((u_char *) &x) +6,((u_char *)  &swap_tmp_u_quad)    ,2); \
	bcopy(swap_tmp_u_quad,&x,8);\
d122 3
a124 3
	swab((u_char *)  &x,    ((u_char *)  &swap_tmp_u_long) +2 ,2); \
	swab(((u_char *) &x) +2,((u_char *)  &swap_tmp_u_long),2); \
	x = swap_tmp_u_long; 	\
d127 2
a128 2
	swab((u_char *)  &x,    ((u_char *)  &swap_tmp_u_short) ,2); \
	x = swap_tmp_u_short; 	\
d131 9
@


1.7
log
@added macros for byte order swapping
@
text
@d3 1
a3 1
 * 	$Author: bcn $
d6 3
d105 3
a107 3
u_long	swap_tmp_u_quad[2];
u_long	swap_tmp_u_long;
u_short swap_tmp_u_short;
@


1.6
log
@Added defs for HSTFILE.
@
text
@d4 1
a4 1
 * 	$Locker:  $
d6 3
d63 1
a63 1
#define	CLIENT_KRB_TIMEOUT	3	/*  time between retries */
d96 26
@


1.5
log
@Add definition of CLOCK_SKEW
@
text
@d6 3
d34 4
d44 3
@


1.4
log
@Change SUCCESS and FAILURE to KSUCCESS and KFAILURE since
SUCCESS and FAILURE conflict with a PCIP definition.
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d6 4
d60 4
@


1.3
log
@Add definition of SUCCESS and FAILURE
@
text
@d6 3
d21 2
a22 2
#define		SUCCESS		0
#define		FAILURE		1
a33 8
/* Values returned by rd_ap_req */
#define		RD_AP__OK	0	/* Request authentic 		*/
#define		RD_AP_UNDEC	1	/* Can't decode authenticator 	*/
#define		RD_AP_EXP	2	/* Ticket expired		*/
#define		RD_AP_REPEAT	3	/* Repeated request		*/
#define		RD_AP_NOT_US	4	/* The ticket isn't for us	*/


d43 33
@


1.2
log
@Add definition for ktext structure.
@
text
@d4 1
a4 1
 * 	$Locker:  $
d6 3
d17 6
d40 1
a40 1
#define		MAX_TXT_LEN	1000
d44 1
a44 1
	char	dat[MAX_TXT_LEN];};	/* The data itself      */
@


1.1
log
@Initial revision
@
text
@d2 7
a8 4
 * 	$Source: $
 * 	$Author: $
 * 	$Locker: $
 *    	$Log:	 $
d29 10
@
