head     4.10;
branch   ;
access   ;
symbols  PATCH8:4.9 PATCH7:4.9 KPATCH6:4.9 ASRSNAP1001:4.9 PATCH5:4.9 ADAMS_NSA:4.9 KPATCH4:4.9 KPATCH3:4.9 KPATCH2:4.9 KREL1:4.9 BETA5/24/88:4.6;
locks    ; strict;
comment  @ * @;


4.10
date     90.06.25.20.50.50;  author kfall;  state Exp;
branches ;
next     4.9;

4.9
date     89.01.24.17.55.39;  author jon;  state Exp;
branches ;
next     4.8;

4.8
date     89.01.11.12.07.37;  author steiner;  state Exp;
branches ;
next     4.7;

4.7
date     89.01.05.14.57.49;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.25.14.45.18;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.02.23.18.26.21;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     88.01.14.12.50.52;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.11.04.11.18.49;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.10.28.12.09.35;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.14.11.19;  author steiner;  state Exp;
branches ;
next     1.3;

1.3
date     86.11.07.15.36.45;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     86.05.12.19.07.19;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     86.03.04.15.01.01;  author spm;  state Exp;
branches ;
next     ;


desc
@@


4.10
log
@change location of principal database into /etc/kerberosIV
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/include/RCS/krb_db.h,v $
 * $Author: jon $
 * $Header: /usr/src/kerberosIV/src/include/RCS/krb_db.h,v 4.9 89/01/24 17:55:39 jon Exp Locker: kfall $ 
 *
 * Copyright 1987, 1988 by the Massachusetts Institute of Technology. 
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>. 
 *
 * spm		Project Athena  8/85 
 *
 * This file defines data structures for the kerberos
 * authentication/authorization database. 
 *
 * They MUST correspond to those defined in *.rel 
 */

#ifdef	ATHENA
#include <mit-copyright.h>
#endif

#ifndef KRB_DB_DEFS
#define KRB_DB_DEFS

#define KERB_M_NAME		"K"	/* Kerberos */
#define KERB_M_INST		"M"	/* Master */
#define KERB_DEFAULT_NAME	"default"
#define KERB_DEFAULT_INST	""
#define	DBM_FILE		"/etc/kerberosIV/principal"

/* this also defines the number of queue headers */
#define KERB_DB_HASH_MODULO 64


/* Arguments to kerb_dbl_lock() */

#define KERB_DBL_EXCLUSIVE 1
#define KERB_DBL_SHARED 0

/* arguments to kerb_db_set_lockmode() */

#define KERB_DBL_BLOCKING 0
#define KERB_DBL_NONBLOCKING 1

/* Principal defines the structure of a principal's name */

typedef struct {
    char    name[ANAME_SZ];
    char    instance[INST_SZ];

    unsigned long key_low;
    unsigned long key_high;
    unsigned long exp_date;
    char    exp_date_txt[DATE_SZ];
    unsigned long mod_date;
    char    mod_date_txt[DATE_SZ];
    unsigned short attributes;
    unsigned char max_life;
    unsigned char kdc_key_ver;
    unsigned char key_version;

    char    mod_name[ANAME_SZ];
    char    mod_instance[INST_SZ];
    char   *old;		/* cast to (Principal *); not in db,
				 * ptr to old vals */
}
        Principal;

typedef struct {
    long    cpu;
    long    elapsed;
    long    dio;
    long    pfault;
    long    t_stamp;
    long    n_retrieve;
    long    n_replace;
    long    n_append;
    long    n_get_stat;
    long    n_put_stat;
}
        DB_stat;

/* Dba defines the structure of a database administrator */

typedef struct {
    char    name[ANAME_SZ];
    char    instance[INST_SZ];
    unsigned short attributes;
    unsigned long exp_date;
    char    exp_date_txt[DATE_SZ];
    char   *old;	/*
			 * cast to (Dba *); not in db, ptr to
			 * old vals
			 */
}
        Dba;

extern int kerb_get_principal();
extern int kerb_put_principal();
extern int kerb_db_get_stat();
extern int kerb_db_put_stat();
extern int kerb_get_dba();
extern int kerb_db_get_dba();

#endif /* KRB_DB_DEFS */
@


4.9
log
@Programmer: wesommer
Auditor: jon
add constants for args to locking routines, remove dbm macros
@
text
@d2 3
a4 3
 * $Source: /mit/wesommer/kslave/build/ninclude/RCS/krb_db.h,v $
 * $Author: steiner $
 * $Header: krb_db.h,v 4.8 89/01/11 12:07:37 wesommer Locked $ 
d19 1
d21 1
d30 1
a30 1
#define	DBM_FILE		"/kerberos/principal"
@


4.8
log
@added check for multiple includes.
programmer: jtkohl
auditor: steiner
@
text
@d2 3
a4 3
 * $Source: /mit/kerberos/src/include/RCS/krb_db.h,v $
 * $Author: jtkohl $
 * $Header: krb_db.h,v 4.7 89/01/05 14:57:49 jtkohl Locked $ 
d33 11
a95 13

/* Macros to convert ndbm names to dbm names.
 * Note that dbm_nextkey() cannot be simply converted using a macro, since
 * it is invoked giving the database, and nextkey() needs the previous key.
 */

#ifndef NDBM
#define dbm_open(x_file, x_flags, x_mode)	dbminit(x_file)
#define dbm_close(x_db)				dbmclose()
#define dbm_fetch(x_db, x_key)			fetch(x_key)
#define dbm_firstkey(x_db)			firstkey()
#define dbm_store(x_db,x_key,x_content,x_flags)	store(x_key, x_content)
#endif /*NDBM*/
@


4.7
log
@Programmer: Win Treese
Auditor: John Kohl
changes: support for old dbm
@
text
@d2 3
a4 3
 * $Source: /source2/Athena/kerberos/src/include/RCS/krb_db.h,v $
 * $Author: treese $
 * $Header: krb_db.h,v 1.4 89/01/02 21:16:32 treese Exp $ 
d21 3
d105 2
@


4.6
log
@Added #include of <mit-copyright.h>.
@
text
@d2 3
a4 3
 * $Source: /mit/kerberos/src/include/RCS/krb_db.h,v $
 * $Author: steiner $
 * $Header: krb_db.h,v 4.5 88/02/23 18:26:21 steiner Locked $ 
d82 13
@


4.5
log
@Copyright notice, etc.
@
text
@d4 1
a4 1
 * $Header: krb_db.h,v 4.4 88/01/14 12:50:52 steiner Locked $ 
d18 2
@


4.4
log
@Formatted.
Programmer: steiner.
Auditor: jtkohl.
@
text
@d2 3
a4 3
 * $Source: /u3/kerberos.new/include/RCS/krb_db.h,v $
 * $Author: steiner$
 * $Header: krb_db.h,v 4.3 87/11/04 11:18:49 steiner Exp $ 
d6 1
a6 1
 * Copyright 1987 by the Massachusetts Institute of Technology. 
@


4.3
log
@More reasonable DBM_FILE default definition.
@
text
@d3 2
a4 2
 * $Author: steiner $
 * $Header: krb_db.h,v 4.2 87/10/28 12:09:35 steiner Locked $
d6 1
a6 1
 * Copyright 1987 by the Massachusetts Institute of Technology.
d8 2
a9 2
 * For copying and distribution information,
 * please see the file <mit-copyright.h>.
d11 1
a11 1
 *  spm		Project Athena  8/85
d13 2
a14 2
 *  This file defines data structures for 
 *  the kerberos authentication/authorization database.
d16 1
a16 1
 *  They MUST correspond to those defined in *.rel
d30 3
a32 4
typedef struct 
{
	char		name[ANAME_SZ];
	char		instance[INST_SZ];
d34 10
a43 10
	unsigned long   key_low;
	unsigned long   key_high;
	unsigned long   exp_date;
	char		exp_date_txt[DATE_SZ];
	unsigned long   mod_date;
	char		mod_date_txt[DATE_SZ];
	unsigned short  attributes;
	unsigned char   max_life;
	unsigned char   kdc_key_ver;
	unsigned char   key_version;
d45 3
a47 3
	char		mod_name[ANAME_SZ];
	char		mod_instance[INST_SZ];
	char		*old;   /* cast to (Principal *); not in db,
d50 1
a50 1
	Principal;
d52 11
a62 12
typedef struct
{
	long	cpu;
	long	elapsed;
	long	dio;
	long	pfault;
	long	t_stamp;
	long	n_retrieve;
	long	n_replace;
	long	n_append;
	long	n_get_stat;
	long	n_put_stat;
d64 1
a64 1
	DB_stat;
d68 10
a77 9
typedef struct 
{
	char		name[ANAME_SZ];
	char		instance[INST_SZ];
	unsigned short  attributes;
	unsigned long   exp_date;
	char		exp_date_txt[DATE_SZ];
	char		*old;   /* cast to (Dba *); not in db,
				 * ptr to old vals */
d79 1
a79 1
	Dba;
d81 6
a86 6
extern	int	kerb_get_principal();
extern	int	kerb_put_principal();
extern	int	kerb_db_get_stat();
extern	int	kerb_db_put_stat();
extern	int	kerb_get_dba();
extern	int	kerb_db_get_dba();
@


4.2
log
@Formatting changes.
@
text
@d2 3
a4 3
 * $Source$
 * $Author$
 * $Header$
d23 1
a23 1
#define	DBM_FILE		"/mit/s/t/steiner/db/principal"
@


4.1
log
@No change; starting version 4.
@
text
@d2 3
a4 2
 *	$Source: /mit/s/t/steiner/kerberos/include/RCS/kerb_db.h,v $
 *	$Author: spm $
d6 1
a6 1
 *	spm		Project Athena	8/85
d8 2
a9 2
 *	This file defines data structures for 
 *	the kerberos authentication/authorization database.
d11 6
a16 1
 *	They MUST correspond to those defined in *.rel
d19 3
a21 3
#define KERB_M_NAME		"K"	/* Kerberos								   */
#define	KERB_M_INST		"M"	/* Master								   */
#define	KERB_DEFAULT_NAME	"default"
d23 1
d25 2
d28 1
a28 2
/* this also defines the number of queue headers						   */
#define	KERB_DB_HASH_MODULO	64
d30 1
a30 3
/* Principal defines the structure of a principal's name				   */

typedef	struct 
d32 2
a33 2
	char			name[ANAME_SZ];
	char			instance[INST_SZ];
d35 10
a44 10
	unsigned long	key_low;
	unsigned long	key_high;
	unsigned long	exp_date;
	char			exp_date_txt[DATE_SZ];
	unsigned long	mod_date;
	char			mod_date_txt[DATE_SZ];
	unsigned short	attributes;
	unsigned char	max_life;
	unsigned char	kdc_key_ver;
	unsigned char	key_version;
d46 4
a49 4
	char			mod_name[ANAME_SZ];
	char			mod_instance[INST_SZ];
	char 			*old;	/* cast to (Principal *); not in db,
							 * ptr to old vals */
d53 1
a53 1
typedef	struct
d68 1
a68 1
/* Dba defines the structure of a database administrator				   */
d70 1
a70 1
typedef	struct 
d72 7
a78 7
	char			name[ANAME_SZ];
	char			instance[INST_SZ];
	unsigned short	attributes;
	unsigned long	exp_date;
	char			exp_date_txt[DATE_SZ];
	char 			*old;	/* cast to (Dba *); not in db,
							 * ptr to old vals */
d82 6
a87 8
extern	int		kerb_get_principal();
extern	int		kerb_put_principal();
extern	int		kerb_db_get_stat();
extern	int		kerb_db_put_stat();
extern	int		kerb_get_dba();
extern	int		kerb_db_get_dba();


@


1.3
log
@recent kerb_db.h checked in by ostlund
@
text
@d2 1
a2 1
 *	$Source: /mit/projects/auth/src/include/kerb_db.h,v $
@


1.2
log
@*** empty log message ***
@
text
@d2 2
a3 2
 *	$Source:$
 *	$Author:$
d15 2
d18 1
d32 1
d34 1
d62 1
d64 12
d80 2
@


1.1
log
@Initial revision
@
text
@d13 2
a14 3
#define	KERB_NAME_WIDTH		32
#define KERB_SERVICE		"kerberos"
#define	KERB_INSTANCE		"master"
d19 2
d23 3
a25 2
	char			a_name[KERB_NAME_WIDTH];
	unsigned long	nid;
d29 4
a32 1
	unsigned char	auth_key_ver;
d34 5
a38 2
	char			*old;		/* cast to (A_name *);
								 * not in db, ptr to old vals */
d40 1
a40 1
	A_name;
d42 1
a42 1
typedef	struct 
d44 10
a53 18
	char			s_name[KERB_NAME_WIDTH];
	char			s_instance[KERB_NAME_WIDTH];
	unsigned long	sid;
	unsigned long	key_low;
	unsigned long	key_high;
	unsigned long	exp_date;
	unsigned long	max_life;
	unsigned short	o_perm;
	unsigned short	o_quota;
	unsigned short	m_perm;
	unsigned short	m_quota;
	unsigned short	e_perm;
	unsigned short	e_quota;
	unsigned char	auth_key_ver;
	unsigned char	key_version;
	unsigned char	attributes;
	char 			*old;	/* cast to (S_name *); not in db,
							 * ptr to old vals */
d55 1
a55 1
	S_name;
d58 4
a61 10
/* values for service.attributes	set ==> yes							   */
#define	KERB_S_ATT_AUTH_DB	1	/* uses athena authorization database  */
								/* otherwise, up to the service			   */
								
extern	int		kerb_get_name();
extern	int		kerb_get_service();
extern  int		kerb_put_name();
extern  int		kerb_put_service();
extern	int		kerb_get_auth();
extern	int		kerb_put_auth();
@
