head     4.13;
branch   ;
access   ;
symbols  PATCH8:4.13 PATCH7:4.13 KPATCH6:4.13 ASRSNAP1001:4.13 PATCH5:4.13 ADAMS_NSA:4.13 KPATCH4:4.13 KPATCH3:4.13 KPATCH2:4.13 KREL1:4.13 BETA5/24/88:4.9;
locks    ; strict;
comment  @ * @;


4.13
date     89.01.24.14.27.22;  author jtkohl;  state Exp;
branches ;
next     4.12;

4.12
date     89.01.13.19.49.08;  author rfrench;  state Exp;
branches ;
next     4.11;

4.11
date     89.01.13.17.29.33;  author steiner;  state Exp;
branches ;
next     4.10;

4.10
date     89.01.11.15.17.57;  author steiner;  state Exp;
branches ;
next     4.9;

4.9
date     88.02.25.14.45.41;  author steiner;  state Exp;
branches ;
next     4.8;

4.8
date     88.02.23.18.26.45;  author steiner;  state Exp;
branches ;
next     4.7;

4.7
date     88.02.07.12.12.30;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     88.01.14.12.51.13;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     87.11.08.01.44.50;  author raeburn;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.28.12.11.47;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.23.10.04.47;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.10.16.14.35.41;  author jtkohl;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.47.17;  author steiner;  state Exp;
branches ;
next     3.5;

3.5
date     87.01.15.18.46.45;  author wesommer;  state Exp;
branches ;
next     3.4;

3.4
date     86.07.16.12.10.58;  author bcn;  state Exp;
branches ;
next     3.3;

3.3
date     86.05.23.13.06.41;  author spm;  state Exp;
branches ;
next     3.2;

3.2
date     86.04.04.17.02.41;  author spm;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.14.02.04;  author bcn;  state Exp;
branches ;
next     1.14;

1.14
date     86.03.25.15.59.24;  author spm;  state Exp;
branches ;
next     1.13;

1.13
date     86.03.14.15.33.36;  author spm;  state Exp;
branches ;
next     1.12;

1.12
date     86.03.12.10.46.44;  author bcn;  state Exp;
branches ;
next     1.11;

1.11
date     85.12.06.21.02.03;  author bcn;  state Exp;
branches ;
next     1.10;

1.10
date     85.12.06.10.26.30;  author bcn;  state Exp;
branches ;
next     1.9;

1.9
date     85.11.17.14.29.04;  author bcn;  state Exp;
branches ;
next     1.8;

1.8
date     85.11.17.14.05.58;  author bcn;  state Exp;
branches ;
next     1.7;

1.7
date     85.11.15.16.39.45;  author spm;  state Exp;
branches ;
next     1.6;

1.6
date     85.11.14.17.53.52;  author spm;  state Exp;
branches ;
next     1.5;

1.5
date     85.11.13.14.46.59;  author bcn;  state Exp;
branches ;
next     1.4;

1.4
date     85.11.13.13.30.41;  author spm;  state Exp;
branches ;
next     1.3;

1.3
date     85.10.18.15.43.39;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     85.10.18.14.02.33;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.10.10.11.01.28;  author bcn;  state Exp;
branches ;
next     ;


desc
@Initial RCS checkin
@


4.13
log
@add disclaimer notice
@
text
@
/*
 * $Source: /mit/kerberos/src/include/RCS/prot.h,v $
 * $Author: rfrench $
 * $Header: prot.h,v 4.12 89/01/13 19:49:08 jtkohl Locked $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * Include file with authentication protocol information.
 */

#include <mit-copyright.h>

#include <krb_conf.h>

#ifndef PROT_DEFS
#define PROT_DEFS

#define		KRB_PORT		750	/* PC's don't have
						 * /etc/services */
#define		KRB_PROT_VERSION 	4
#define 	MAX_PKT_LEN		1000
#define		MAX_TXT_LEN		1000
#define		TICKET_GRANTING_TICKET	"krbtgt"

/* Macro's to obtain various fields from a packet */

#define pkt_version(packet)  (unsigned int) *(packet->dat)
#define pkt_msg_type(packet) (unsigned int) *(packet->dat+1)
#define pkt_a_name(packet)   (packet->dat+2)
#define pkt_a_inst(packet)   \
	(packet->dat+3+strlen((char *)pkt_a_name(packet)))
#define pkt_a_realm(packet)  \
	(pkt_a_inst(packet)+1+strlen((char *)pkt_a_inst(packet)))

/* Macro to obtain realm from application request */
#define apreq_realm(auth)     (auth->dat + 3)

#define pkt_time_ws(packet) (char *) \
        (packet->dat+5+strlen((char *)pkt_a_name(packet)) + \
	 strlen((char *)pkt_a_inst(packet)) + \
	 strlen((char *)pkt_a_realm(packet)))

#define pkt_no_req(packet) (unsigned short) \
        *(packet->dat+9+strlen((char *)pkt_a_name(packet)) + \
	  strlen((char *)pkt_a_inst(packet)) + \
	  strlen((char *)pkt_a_realm(packet)))
#define pkt_x_date(packet) (char *) \
        (packet->dat+10+strlen((char *)pkt_a_name(packet)) + \
	 strlen((char *)pkt_a_inst(packet)) + \
	 strlen((char *)pkt_a_realm(packet)))
#define pkt_err_code(packet) ( (char *) \
        (packet->dat+9+strlen((char *)pkt_a_name(packet)) + \
	 strlen((char *)pkt_a_inst(packet)) + \
	 strlen((char *)pkt_a_realm(packet))))
#define pkt_err_text(packet) \
        (packet->dat+13+strlen((char *)pkt_a_name(packet)) + \
	 strlen((char *)pkt_a_inst(packet)) + \
	 strlen((char *)pkt_a_realm(packet)))

/* Routines to create and read packets may be found in prot.c */

KTEXT create_auth_reply();
KTEXT create_death_packet();
KTEXT pkt_cipher();

/* Message types , always leave lsb for byte order */

#define		AUTH_MSG_KDC_REQUEST			 1<<1
#define 	AUTH_MSG_KDC_REPLY			 2<<1
#define		AUTH_MSG_APPL_REQUEST			 3<<1
#define		AUTH_MSG_APPL_REQUEST_MUTUAL		 4<<1
#define		AUTH_MSG_ERR_REPLY			 5<<1
#define		AUTH_MSG_PRIVATE			 6<<1
#define		AUTH_MSG_SAFE				 7<<1
#define		AUTH_MSG_APPL_ERR			 8<<1
#define 	AUTH_MSG_DIE				63<<1

/* values for kerb error codes */

#define		KERB_ERR_OK				 0
#define		KERB_ERR_NAME_EXP			 1
#define		KERB_ERR_SERVICE_EXP			 2
#define		KERB_ERR_AUTH_EXP			 3
#define		KERB_ERR_PKT_VER			 4
#define		KERB_ERR_NAME_MAST_KEY_VER		 5
#define		KERB_ERR_SERV_MAST_KEY_VER		 6
#define		KERB_ERR_BYTE_ORDER			 7
#define		KERB_ERR_PRINCIPAL_UNKNOWN		 8
#define		KERB_ERR_PRINCIPAL_NOT_UNIQUE		 9
#define		KERB_ERR_NULL_KEY			10

#endif /* PROT_DEFS */
@


4.12
log
@Programmer: jtkohl
Auditor: rfrench
Deleted declartion of create_packet_to_kdc
@
text
@d1 1
d4 2
a5 2
 * $Author: steiner $
 * $Header: prot.h,v 4.11 89/01/13 17:29:33 jtkohl Locked $
d9 3
@


4.11
log
@struct ktext * = KTEXT; use KTEXT.
programmer: jtkohl
auditor: steiner
@
text
@d4 1
a4 1
 * $Header: prot.h,v 4.10 89/01/11 15:17:57 jtkohl Locked $
a62 1
KTEXT create_packet_to_kdc();
@


4.10
log
@added check for multiple includes.
programmer: jtkohl
auditor: steiner
@
text
@d4 1
a4 1
 * $Header: prot.h,v 4.9 88/02/25 14:45:41 jtkohl Locked $
d63 4
a66 4
struct ktext *create_packet_to_kdc();
struct ktext *create_auth_reply();
struct ktext *create_death_packet();
struct ktext *pkt_cipher();
@


4.9
log
@Added #include of <mit-copyright.h>.
@
text
@d4 1
a4 1
 * $Header: prot.h,v 4.8 88/02/23 18:26:45 steiner Locked $
d16 3
d93 2
@


4.8
log
@Copyright notice, etc.
@
text
@d4 1
a4 1
 * $Header: prot.h,v 4.7 88/02/07 12:12:30 steiner Locked $
d11 2
@


4.7
log
@pkt_time_ws safe for MUSTALIGN.
Programmer: jtkohl.
Auditor: jon.
@
text
@d4 1
a4 1
 * $Header: prot.h,v 4.6 88/01/14 12:51:13 jtkohl Locked $
d6 2
a7 1
 * Copyright 1985,1986 by the Massachusetts Institute of Technology 
@


4.6
log
@Formatted.
Programmer: steiner.
Auditor: jtkohl.
@
text
@d2 3
a4 3
 * $Source$
 * $Author$
 * $Header$
d33 1
a33 7
#ifdef MUSTALIGN

/* pkt_time_ws has to be rewritten for RT */

#else

#define pkt_time_ws(packet) (unsigned long *) \
a36 2

#endif MUSTALIGN
@


4.5
log
@Fixing pkt_a_realm -- should be using offset from instance, not
name...
@
text
@d1 4
a4 4
/* 
 * 	$Source: /paris/u3/kerberos.new/include/RCS/prot.h,v $
 * 	$Author: steiner $
 * 	$Locker: raeburn $
d6 1
a6 1
 * Copyright 1985,1986 by the Massachusetts Institute of Technology
d8 1
d13 2
a14 1
#define		KRB_PORT		750 /* PC's don't have /etc/services */
d25 2
a26 1
#define pkt_a_inst(packet)   (packet->dat+3+strlen((char *)pkt_a_name(packet)))
d65 4
a68 4
struct ktext	*create_packet_to_kdc();
struct ktext	*create_auth_reply();
struct ktext	*create_death_packet();
struct ktext	*pkt_cipher();
d72 8
a79 8
#define		AUTH_MSG_KDC_REQUEST		1<<1
#define 	AUTH_MSG_KDC_REPLY			2<<1
#define		AUTH_MSG_APPL_REQUEST		3<<1
#define		AUTH_MSG_APPL_REQUEST_MUTUAL 4<<1
#define		AUTH_MSG_ERR_REPLY			5<<1
#define		AUTH_MSG_PRIVATE			6<<1
#define		AUTH_MSG_SAFE				7<<1
#define		AUTH_MSG_APPL_ERR			8<<1
d82 1
a82 1
/* values for kerb error codes 		*/
d84 11
a94 11
#define			KERB_ERR_OK			0
#define			KERB_ERR_NAME_EXP		1
#define			KERB_ERR_SERVICE_EXP		2
#define			KERB_ERR_AUTH_EXP		3
#define			KERB_ERR_PKT_VER		4
#define			KERB_ERR_NAME_MAST_KEY_VER	5
#define			KERB_ERR_SERV_MAST_KEY_VER	6
#define			KERB_ERR_BYTE_ORDER		7
#define			KERB_ERR_PRINCIPAL_UNKNOWN	8
#define			KERB_ERR_PRINCIPAL_NOT_UNIQUE   9
#define			KERB_ERR_NULL_KEY	       10
@


4.4
log
@Small formatting changes.
Also, fixed def of pkt_a_realm.
Noted that this needs to be changed if MUSTALIGN,
but didn't get around to doing it yet.
@
text
@d2 1
a2 1
 * 	$Source: /u3/kerberos.new/include/RCS/prot.h,v $
d4 1
a4 1
 * 	$Locker: steiner $
d25 1
a25 1
	(pkt_a_name(packet)+1+strlen((char *)pkt_a_inst(packet)))
@


4.3
log
@John Kohl's changes.
@
text
@d3 2
a4 2
 * 	$Author: jtkohl $
 * 	$Locker: jtkohl $
d10 1
d20 6
a25 5
#define pkt_version(packet)   (unsigned int) *(packet->dat)
#define pkt_msg_type(packet)  (unsigned int) *(packet->dat+1)
#define pkt_a_name(packet)    (packet->dat+2)
#define pkt_a_inst(packet)    (packet->dat+3+strlen((char *)pkt_a_name(packet)))
#define pkt_a_realm(packet)   (pkt_a_inst(packet)+1+strlen((char *)pkt_a_inst(packet)))
a26 1

d30 1
d32 1
a32 2
/* If there are long alignment problems, these */
/* will have to be rewritten			 */
d34 2
d40 3
d80 1
@


4.2
log
@byte order moved to separate file
@
text
@d2 2
a3 2
 * 	$Source: /paris/u3/kerberos.new/include/RCS/prot.h,v $
 * 	$Author: steiner $
d22 2
a23 2
#define pkt_a_inst(packet)    (packet->dat+3+strlen(pkt_a_name(packet)))
#define pkt_a_realm(packet)   (pkt_a_inst(packet)+1+strlen(pkt_a_inst(packet)))
d34 3
a36 2
        (packet->dat+5+strlen(pkt_a_name(packet))+strlen(pkt_a_inst(packet)) \
		+strlen(pkt_a_realm(packet)))
d38 11
a48 10
        *(packet->dat+9+strlen(pkt_a_name(packet))+ \
	strlen(pkt_a_inst(packet))+strlen(pkt_a_realm(packet)))

#define pkt_x_date(packet) (unsigned long *) \
        (packet->dat+10+strlen(pkt_a_name(packet))+strlen(pkt_a_inst(packet)) \
		+strlen(pkt_a_realm(packet)))

#define pkt_err_code(packet) ( (unsigned long *) \
        (packet->dat+9+strlen(pkt_a_name(packet))+strlen(pkt_a_inst(packet)) \
		+strlen(pkt_a_realm(packet))))
d50 3
a52 2
        (packet->dat+13+strlen(pkt_a_name(packet))+ \
		strlen(pkt_a_inst(packet))+strlen(pkt_a_realm(packet)))
@


4.1
log
@No change; starting version 4.
@
text
@d2 3
a4 3
 * 	$Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/prot.h,v $
 * 	$Author: wesommer $
 * 	$Locker: steiner $
a81 6

/* Byte ordering														   */
static int	ONE = 1;
#define		HOST_BYTE_ORDER	(* (char *) &ONE)
#define		MSB_FIRST		0	/*  68000								   */
#define		LSB_FIRST		1	/*  Vax, PC8086							   */
@


3.5
log
@Protocol version change (this was old and not checked in..)
@
text
@d2 3
a4 3
 * 	$Source: /mit/projects/auth/src/lib/krb/RCS/prot.h,v $
 * 	$Author: bcn $
 * 	$Locker: bcn $
@


3.4
log
@Added error code for NULL KEY
@
text
@d3 2
a4 2
 * 	$Author: spm $
 * 	$Locker: spm $
d12 1
a12 1
#define		KRB_PROT_VERSION 3
@


3.3
log
@add expiration date
@
text
@d70 2
a71 2
/* values for kerb error codes											   */
#define			KERB_ERR_OK				0
d73 1
a73 1
#define			KERB_ERR_SERVICE_EXP	2
d80 2
a81 1
#define			KERB_ERR_PRINCIPAL_NOT_UNIQUE 9
@


3.2
log
@add new message types for private and safe msg
@
text
@d3 1
a3 1
 * 	$Author: bcn $
d40 4
d67 1
@


3.1
log
@Update KRB_PROT_VERSION to 3.
@
text
@d3 2
a4 2
 * 	$Author: spm $
 * 	$Locker: bcn $
d59 1
a59 1
#define		AUTH_MSG_APPL_REQUEST_MUTUAL	4<<1
d61 2
@


1.14
log
@*** empty log message ***
@
text
@a4 7
 *    	$Log:	prot.h,v $
 * Revision 1.13  86/03/14  15:33:36  spm
 * added macros, defines, removed TEXT and TEXT_ST
 * 
 * Revision 1.12  86/03/12  10:46:44  bcn
 * forced ci by spm
 * 
d12 1
a12 1
#define		KRB_PROT_VERSION 2
@


1.13
log
@added macros, defines, removed TEXT and TEXT_ST
@
text
@d3 2
a4 2
 * 	$Author: bcn $
 * 	$Locker: spm $
d6 3
a23 11
struct		packet
{	int	length;			/* Length of the text */
	char	dat[MAX_PKT_LEN];};	/* The data itself      */

typedef	struct packet	*PACKT;
typedef struct packet	PKT_ST;

struct		text
{	int	length;			/* Length of the text */
	char	dat[MAX_TXT_LEN];};	/* The data itself      */

d47 1
a47 1
#define pkt_err_code(packet) (* (unsigned long *) \
d56 3
a58 3
struct packet	*create_packet_to_kdc();
struct packet	*create_auth_reply();
struct packet	*create_death_packet();
@


1.12
log
@forced ci by spm
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d6 3
a31 3
typedef	struct text	*TEXT;
typedef struct text	TEXT_ST;

d45 1
a45 1
/* If there are long allignement problems, these */
d49 2
a50 1
        (packet->dat+4+strlen(pkt_a_name(packet))+strlen(pkt_a_realm(packet)))
d55 7
d87 2
@


1.11
log
@Current state ready for staff cluster release 1.
@
text
@a5 32
 * Revision 1.10  85/12/06  10:26:30  bcn
 * Change type of pkt_cipher to ktext* instead of text *.
 * 
 * Revision 1.9  85/11/17  14:29:04  bcn
 * Make ONe a static so that loading multiple objects that used prot.h
 * once cause problems.
 * 
 * Revision 1.8  85/11/17  14:05:58  bcn
 * Declare ONE to be an int right in the include file.  This way anyone using 
 * prot.h gets it without having to load prot.c.
 * 
 * Revision 1.7  85/11/15  16:39:45  spm
 * byte order
 * 
 * Revision 1.6  85/11/14  17:53:52  spm
 * more rev2 protocol
 * 
 * Revision 1.5  85/11/13  14:46:59  bcn
 * Upgrade to protocol version 2.
 * 
 * Revision 1.4  85/11/13  13:30:41  spm
 * shift left msg types and add byte order stuff
 * 
 * Revision 1.3  85/10/18  15:43:39  spm
 * removed KRB_SERVICE and KRB_INSTANCE, moved to kerb_db.h
 * 
 * Revision 1.2  85/10/18  14:02:33  spm
 * add KRB_SERVICE and KRB_INSTANCE
 * 
 * Revision 1.1  85/10/10  11:01:28  bcn
 * Initial revision
 * 
d7 1
a7 1
 * Copyright 1985 by the Massachusetts Institute of Technology
a31 1

d37 2
a38 1
#define pkt_a_realm(packet)   (packet->dat+3+strlen(pkt_a_name(packet)))
d40 5
d51 2
a52 1
        *(packet->dat+8+strlen(pkt_a_name(packet))+strlen(pkt_a_realm(packet)))
@


1.10
log
@Change type of pkt_cipher to ktext* instead of text *.
@
text
@d6 3
a43 2
#define		KRB_HOST		"menelaus.mit.edu"
#define		KRB_TBLHST		"mit-menelaus"
@


1.9
log
@Make ONe a static so that loading multiple objects that used prot.h
once cause problems.
@
text
@d2 1
a2 1
 * 	$Source: /mit/projects/auth/src/kdc/RCS/prot.h,v $
d4 1
a4 1
 * 	$Locker:  $
d6 4
d84 1
a84 1
struct text	*pkt_cipher();
@


1.8
log
@Declare ONE to be an int right in the include file.  This way anyone using 
prot.h gets it without having to load prot.c.
@
text
@d3 1
a3 1
 * 	$Author: spm $
d6 4
d102 1
a102 1
int		ONE = 1;
@


1.7
log
@byte order
@
text
@d4 1
a4 1
 * 	$Locker: spm $
d6 3
d98 1
a98 1
extern		ONE;
@


1.6
log
@more rev2 protocol
@
text
@d3 1
a3 1
 * 	$Author: bcn $
d6 3
a83 4
/* Byte ordering														   */
#define		LSB_FIRST		0	/*  Vax, PC8086							   */
#define		MSB_FIRST		1	/*  68000								   */

d93 6
@


1.5
log
@Upgrade to protocol version 2.
@
text
@d3 2
a4 2
 * 	$Author: spm $
 * 	$Locker: bcn $
d6 3
d52 2
a53 2
#define pkt_version(packet)   (int) *(packet->dat)
#define pkt_msg_type(packet)  (int) *(packet->dat+1)
d60 1
a60 1
#define pkt_time_ws(packet) (long *) \
d62 1
a62 1
#define pkt_no_req(packet) (int) \
d79 1
a79 1
#define 	AUTH_MSG_DIE				127<<1
d85 9
a93 6
#ifdef	VAX
#define	HOST_BYTE_ORDER			LSB_FIRST
#endif
#ifdef	PC
#define	HOST_BYTE_ORDER			LSB_FIRST
#endif
@


1.4
log
@shift left msg types and add byte order stuff
@
text
@d4 1
a4 1
 * 	$Locker: spm $
d6 3
d52 1
d57 4
a60 3
#define pkt_time_ws(packet)   (long *)(packet->dat+3+strlen(packet->dat+2))
#define pkt_no_req(packet)    (int) *(packet->dat+7+strlen(packet->dat+2))
#define pkt_cipher(packet)    (packet->dat+strlen(packet->dat+2)+10)
d67 1
a67 2
struct text	*create_cipher();

@


1.3
log
@removed KRB_SERVICE and KRB_INSTANCE, moved to kerb_db.h
@
text
@d6 3
d24 1
a24 1
#define		KRB_PROT_VERSION 1
d65 1
a65 1
/* Message types */
d67 6
a72 5
#define		AUTH_MSG_KDC_REQUEST		1
#define 	AUTH_MSG_KDC_REPLY		2
#define		AUTH_MSG_APPL_REQUEST		3
#define		AUTH_MSG_APPL_REQUEST_MUTUAL	4
#define 	AUTH_MSG_DIE			66
d74 10
@


1.2
log
@add KRB_SERVICE and KRB_INSTANCE
@
text
@d3 2
a4 2
 * 	$Author: bcn $
 * 	$Locker:  $
d6 3
a24 2
#define		KRB_SERVICE		"kerberos"
#define		KRB_INSTANCE	"master"
@


1.1
log
@Initial revision
@
text
@d2 7
a8 4
 * 	$Source: $
 * 	$Author: $
 * 	$Locker: $
 *    	$Log:	 $
d22 2
@
