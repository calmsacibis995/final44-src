head	4.5;
access;
symbols
	PATCH8:4.5
	PATCH7:4.5
	KPATCH6:4.5
	ASRSNAP1001:4.5
	PATCH5:4.5
	KPATCH4:4.5
	KPATCH3:4.5
	KPATCH2:4.5
	KREL1:4.5
	BETA5/24/88:4.4;
locks; strict;
comment	@ * @;


4.5
date	89.01.24.18.12.34;	author jon;	state Exp;
branches;
next	4.4;

4.4
date	88.02.24.15.05.58;	author steiner;	state Exp;
branches;
next	4.3;

4.3
date	88.02.24.14.30.46;	author steiner;	state Exp;
branches;
next	4.2;

4.2
date	87.09.10.16.08.50;	author steiner;	state Exp;
branches;
next	4.1;

4.1
date	87.09.01.13.51.25;	author steiner;	state Exp;
branches;
next	1.1;

1.1
date	87.07.18.17.38.52;	author jis;	state Exp;
branches;
next	;


desc
@Initial checkin
@


4.5
log
@Programmer: wesommer
Auditor: jon
remove some global var debug problems.
@
text
@/*
 * $Source: /mit/wesommer/kslave/build/lib/kdb/RCS/krb_cache.c,v $
 * $Author: steiner $ 
 *
 * Copyright 1988 by the Massachusetts Institute of Technology. 
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * This is where a cache would be implemented, if it were necessary.
 */

#ifndef	lint
static char rcsid_krb_cache_c[] =
"$Header: krb_cache.c,v 4.4 88/02/24 15:05:58 wesommer Locked $";
#endif	lint

#include <mit-copyright.h>
#include <stdio.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/uio.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <strings.h>
#include <des.h>
#include <krb.h>
#include <krb_db.h>

extern char *strncpy();

#ifdef DEBUG
extern int debug;
extern long kerb_debug;
#endif
static  init = 0;

/*
 * initialization routine for cache 
 */

int
kerb_cache_init()
{
    init = 1;
    return (0);
}

/*
 * look up a principal in the cache returns number of principals found 
 */

int
kerb_cache_get_principal(serv, inst, principal, max)
    char   *serv;		/* could have wild card */
    char   *inst;		/* could have wild card */
    Principal *principal;
    unsigned int max;		/* max number of name structs to return */

{
    int     found = 0;
    u_long  i;

    if (!init)
	kerb_cache_init();
#ifdef DEBUG
    if (kerb_debug & 2)
	fprintf(stderr, "cache_get_principal for %s %s max = %d\n",
	    serv, inst, max);
#endif DEBUG
    
#ifdef DEBUG
    if (kerb_debug & 2) {
	if (found) {
	    fprintf(stderr, "cache get %s %s found %s %s sid = %d\n",
		serv, inst, principal->name, principal->instance);
	} else {
	    fprintf(stderr, "cache %s %s not found\n", serv,
		inst);
	}
    }
#endif
    return (found);
}

/*
 * insert/replace a principal in the cache returns number of principals
 * inserted 
 */

int
kerb_cache_put_principal(principal, max)
    Principal *principal;
    unsigned int max;		/* max number of principal structs to
				 * insert */

{
    int     found = 0;
    u_long  i;
    int     count = 0;

    if (!init)
	kerb_cache_init();

#ifdef DEBUG
    if (kerb_debug & 2) {
	fprintf(stderr, "kerb_cache_put_principal  max = %d",
	    max);
    }
#endif
    
    for (i = 0; i < max; i++) {
#ifdef DEBUG
	if (kerb_debug & 2)
	    fprintf(stderr, "\n %s %s",
		    principal->name, principal->instance);
#endif	
	/* DO IT */
	count++;
	principal++;
    }
    return count;
}

/*
 * look up a dba in the cache returns number of dbas found 
 */

int
kerb_cache_get_dba(serv, inst, dba, max)
    char   *serv;		/* could have wild card */
    char   *inst;		/* could have wild card */
    Dba    *dba;
    unsigned int max;		/* max number of name structs to return */

{
    int     found = 0;
    u_long  i;

    if (!init)
	kerb_cache_init();

#ifdef DEBUG
    if (kerb_debug & 2)
	fprintf(stderr, "cache_get_dba for %s %s max = %d\n",
	    serv, inst, max);
#endif

#ifdef DEBUG
    if (kerb_debug & 2) {
	if (found) {
	    fprintf(stderr, "cache get %s %s found %s %s sid = %d\n",
		serv, inst, dba->name, dba->instance);
	} else {
	    fprintf(stderr, "cache %s %s not found\n", serv, inst);
	}
    }
#endif
    return (found);
}

/*
 * insert/replace a dba in the cache returns number of dbas inserted 
 */

int
kerb_cache_put_dba(dba, max)
    Dba    *dba;
    unsigned int max;		/* max number of dba structs to insert */

{
    int     found = 0;
    u_long  i;
    int     count = 0;

    if (!init)
	kerb_cache_init();
#ifdef DEBUG
    if (kerb_debug & 2) {
	fprintf(stderr, "kerb_cache_put_dba  max = %d", max);
    }
#endif
    for (i = 0; i < max; i++) {
#ifdef DEBUG
	if (kerb_debug & 2)
	    fprintf(stderr, "\n %s %s",
		    dba->name, dba->instance);
#endif	
	/* DO IT */
	count++;
	dba++;
    }
    return count;
}

@


4.4
log
@Formatted.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/lib/kdb/RCS/krb_cache.c,v $
d8 3
a10 1
 * <mit-copyright.h>. 
d15 1
a15 1
"$Header: krb_cache.c,v 4.3 88/02/24 14:30:46 steiner Locked $";
d32 1
d35 1
a35 2
extern char *progname;

d66 1
a66 1

d68 5
a72 3
	fprintf(stderr, "%s: cache_get_principal for %s %s max = %d\n",
	    progname, serv, inst, max);

d75 1
a75 2
	    fprintf(stderr, "%s: cache get %s %s found %s %s sid = %d\n",
		progname,
d78 1
a78 1
	    fprintf(stderr, "%s: cache %s %s not found\n", progname, serv,
d82 1
d105 1
d107 2
a108 2
	fprintf(stderr, "%s: kerb_cache_put_principal  max = %d",
	    progname, max);
d110 2
d113 1
d116 2
a117 1
		principal->name, principal->instance);
d143 1
d145 3
a147 2
	fprintf(stderr, "%s: cache_get_dba for %s %s max = %d\n",
	    progname, serv, inst, max);
d149 1
d152 1
a152 2
	    fprintf(stderr, "%s: cache get %s %s found %s %s sid = %d\n",
		progname,
d155 1
a155 2
	    fprintf(stderr, "%s: cache %s %s not found\n", progname, serv,
		inst);
d158 1
d178 1
a178 1

d180 1
a180 1
	fprintf(stderr, "%s: kerb_cache_put_dba  max = %d", progname, max);
d182 1
d184 1
d187 2
a188 1
		dba->name, dba->instance);
d195 1
@


4.3
log
@Copyright notice, etc.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
 * $Author: steiner $
d5 1
a5 1
 * Copyright 1988 by the Massachusetts Institute of Technology.
d8 1
a8 1
 * <mit-copyright.h>.
d13 1
a13 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
d28 1
a28 1
extern	char	*strncpy();
d30 3
a32 3
extern	int		debug;
extern	long	kerb_debug;
extern	char	*progname;
d34 1
a34 1
static		init = 0;
d37 1
a37 1
 *	initialization routine for cache
d41 1
a41 1
	kerb_cache_init()
d43 2
a44 2
	init = 1;
	return(0);
d47 3
a50 6


/*
*	look up a principal in the cache
*	returns number of principals found 
*/
d52 5
a57 7
	kerb_cache_get_principal(serv,inst, principal, max)
	
	char	*serv;	/* could have wild card*/
	char	*inst;	/* could have wild card*/
	Principal	*principal;
	unsigned int	max;	/* max number of name structs to return*/

d59 2
a60 2
int found = 0;
u_long i;
d62 2
a63 1
	if (!init) kerb_cache_init();
d65 3
a67 2
	if (kerb_debug & 2) fprintf(stderr,"%s: cache_get_principal for %s %s max = %d\n",
	progname,serv,inst,max);
d69 11
a79 17
	if ( kerb_debug & 2 )
		{
		if (found)
			{
			fprintf(stderr,"%s: cache get %s %s found %s %s sid = %d\n",
			progname,
			serv,inst,principal->name,principal->instance);
			}
		else
			{
			fprintf(stderr,"%s: cache %s %s not found\n",progname,serv,
			inst);
			}
		}
	
	return(found);

d83 4
a86 3
*	insert/replace a principal in the cache
*	returns number of principals inserted 
*/
d88 4
a91 1
	kerb_cache_put_principal(principal, max)
a92 3
	Principal	*principal;
	unsigned int	max;	/* max number of principal structs to insert*/

d94 3
a96 3
int found = 0;
u_long i;
int	count = 0;
d98 2
a99 1
	if (!init) kerb_cache_init();
d101 5
d107 7
a113 13
		{
		fprintf(stderr,"%s: kerb_cache_put_principal  max = %d",progname,max);
		}
	
	for (i = 0; i < max; i++)
		{
		if (kerb_debug & 2)	fprintf(stderr,"\n %s %s", 
								principal->name,principal->instance);
		/* 	DO IT														   */
		count++;
		principal++;
		}
	return count;
d117 3
a119 3
*	look up a dba in the cache
*	returns number of dbas found 
*/
d121 5
a126 7
	kerb_cache_get_dba(serv,inst, dba, max)
	
	char	*serv;	/* could have wild card*/
	char	*inst;	/* could have wild card*/
	Dba	*dba;
	unsigned int	max;	/* max number of name structs to return*/

d128 2
a129 2
int found = 0;
u_long i;
d131 2
a132 1
	if (!init) kerb_cache_init();
d134 3
a136 2
	if (kerb_debug & 2) fprintf(stderr,"%s: cache_get_dba for %s %s max = %d\n",
	progname,serv,inst,max);
d138 11
a148 17
	if ( kerb_debug & 2 )
		{
		if (found)
			{
			fprintf(stderr,"%s: cache get %s %s found %s %s sid = %d\n",
			progname,
			serv,inst,dba->name,dba->instance);
			}
		else
			{
			fprintf(stderr,"%s: cache %s %s not found\n",progname,serv,
			inst);
			}
		}
	
	return(found);

d152 3
a154 3
*	insert/replace a dba in the cache
*	returns number of dbas inserted 
*/
d156 3
a158 1
	kerb_cache_put_dba(dba, max)
a159 3
	Dba	*dba;
	unsigned int	max;	/* max number of dba structs to insert*/

d161 3
a163 3
int found = 0;
u_long i;
int	count = 0;
d165 2
a166 1
	if (!init) kerb_cache_init();
d168 4
d173 7
a179 13
		{
		fprintf(stderr,"%s: kerb_cache_put_dba  max = %d",progname,max);
		}
	
	for (i = 0; i < max; i++)
		{
		if (kerb_debug & 2)	fprintf(stderr,"\n %s %s", 
								dba->name,dba->instance);
		/* 	DO IT														   */
		count++;
		dba++;
		}
	return count;
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d2 8
a9 4
*		$Source: /mit/s/t/steiner/kerberos/dbm/lib/RCS/kerb_cache.c,v $
*		$Author: steiner $
*		$Locker: steiner $
*/
d11 6
a196 1

@


4.1
log
@No change; starting version 4.
@
text
@d2 2
a3 2
*		$Source: /mit/s/t/steiner/kerberos/db/util/dbm/RCS/kerb_cache.c,v $
*		$Author: jis $
d16 1
a16 1
#include "kerb_db.h"
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
*		$Source: /mit/projects/auth/src/db/util/RCS/kerb_cache.c,v $
*		$Author: spm $
*		$Locker:  $
@
