head     4.5;
branch   ;
access   ;
symbols  PATCH8:4.5 PATCH7:4.5 KPATCH6:4.5 ASRSNAP1001:4.5 PATCH5:4.5 KPATCH4:4.5 KPATCH3:4.5 KPATCH2:4.5 KREL1:4.5 BETA5/24/88:4.4;
locks    ; strict;
comment  @ * @;


4.5
date     89.01.24.18.09.21;  author jon;  state Exp;
branches ;
next     4.4;

4.4
date     88.02.24.15.06.07;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     88.02.24.14.31.04;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.10.28.13.57.36;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.13.51.27;  author steiner;  state Exp;
branches ;
next     1.1;

1.1
date     87.07.18.17.38.56;  author jis;  state Exp;
branches ;
next     ;


desc
@Initial checkin
@


4.5
log
@Programmer: wesommer
Auditor: jon
obsolete file
@
text
@This file is now obsolete.
@


4.4
log
@Formatted.
@
text
@d1 1
a1 79
/*
 * $Source: /mit/kerberos/src/lib/kdb/RCS/krb_dbl.c,v $
 * $Author: steiner $ 
 *
 * Copyright 1988 by the Massachusetts Institute of Technology. 
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>. 
 */

#ifndef	lint
static char rcsid_krb_dbl_c[] =
"$Header: krb_dbl.c,v 4.3 88/02/24 14:31:04 steiner Locked $";
#endif	lint

#include <mit-copyright.h>
#include <stdio.h>
#include <sys/file.h>
#include <krb.h>
#include <krb_db.h>

static int dblfd;
static int mylock = 0;
static int inited = 0;

kerb_dbl_init()
{
    char    filename[100];
    if (!inited) {
	strcpy(filename, DBM_FILE);
	strcat(filename, ".pag");
	if ((dblfd = open(filename, 0)) < 0) {
	    fprintf(stderr, "kerb_dbl_init: couldn't open %s\n", filename);
	    fflush(stderr);
	    perror("open");
	    exit(1);
	}
	inited++;
    }
    return (0);
}

kerb_dbl_lock(share)
    int     share;
{
    if (!inited)
	kerb_dbl_init();
    if (mylock) {		/* Detect lock call when lock already
				 * locked */
	fprintf(stderr, "Kerberos locking error (mylock)\n");
	fflush(stderr);
	exit(1);
    }
    if (flock(dblfd, share ? LOCK_EX : LOCK_SH) < 0) {
	fprintf(stderr, "Kerberos database lock error.\n");
	fflush(stderr);
	perror("flock");
	exit(1);
    }
    mylock++;
    return (0);
}

kerb_dbl_unlock()
{
    if (!mylock) {		/* lock already unlocked */
	fprintf(stderr, "Kerberos database lock error (unlocking).\n");
	fflush(stderr);
	exit(1);
    }
    if (flock(dblfd, LOCK_UN) < 0) {
	fprintf(stderr, "Kerberos database lock error. (unlocking)\n");
	fflush(stderr);
	perror("flock");
	exit(1);
    }
    mylock = 0;
    return (0);
}
@


4.3
log
@Copyright notice, etc.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
 * $Author: steiner $
d5 1
a5 1
 * Copyright 1988 by the Massachusetts Institute of Technology.
d8 1
a8 1
 * <mit-copyright.h>.
d13 1
a13 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
d28 11
a38 9
  char filename[100];
  if(!inited) {
    strcpy(filename, DBM_FILE);
    strcat(filename, ".pag");
    if ((dblfd = open(filename, 0)) < 0) {
      fprintf(stderr, "kerb_dbl_init: couldn't open %s\n", filename);
      fflush(stderr);
      perror("open");
      exit(1);
d40 1
a40 3
    inited++;
  }
  return (0);
d42 1
d44 1
a44 1
int share;
d46 16
a61 14
  if (!inited) kerb_dbl_init();
  if (mylock) {			/* Detect lock call when lock already locked */
    fprintf(stderr, "Kerberos locking error (mylock)\n");
    fflush(stderr);
    exit(1);
  }
  if(flock(dblfd, share ? LOCK_EX : LOCK_SH) < 0) {
    fprintf(stderr, "Kerberos database lock error.\n");
    fflush(stderr);
    perror("flock");
    exit (1);
  }
  mylock++;
  return(0);
d66 13
a78 13
  if(!mylock) {			/* lock already unlocked */
    fprintf(stderr, "Kerberos database lock error (unlocking).\n");
    fflush(stderr);
    exit (1);
  }
  if(flock(dblfd, LOCK_UN) < 0) {
    fprintf(stderr, "Kerberos database lock error. (unlocking)\n");
    fflush(stderr);
    perror("flock");
    exit (1);
  }
  mylock = 0;
  return (0);
@


4.2
log
@DBM_FILE (was DBM_PRINCIPAL_FILE) now defined in krb_db.h.
@
text
@d2 7
a8 3
 *		$Source: /mit/s/t/steiner/kerberos/dbm/lib/RCS/krb_dbl.c,v $
 *		$Author: steiner $
 *		$Locker: steiner $
d10 7
a16 4
#ifndef lint
static char rcsid_kerb_dbl_c[] =
"$Header: krb_dbl.c,v 4.1 87/09/01 13:51:27 steiner Locked $";
#endif
@


4.1
log
@No change; starting version 4.
@
text
@d2 2
a3 2
 *		$Source: /mit/s/t/steiner/kerberos/db/util/dbm/RCS/kerb_dbl.c,v $
 *		$Author: jis $
d7 2
a8 1
static char rcsid_kerb_dbl_c[] = "$Header: kerb_dbl.c,v 1.1 87/07/18 17:38:56 steiner Locked $";
d12 2
a14 2
#define DBM_PRINCIPAL_FILE	"/kerberos/principal"
static int inited = 0;
d17 2
d23 1
a23 1
    strcpy(filename, DBM_PRINCIPAL_FILE);
d26 1
a26 1
      fprintf(stderr, "Unable to open kerberos database lockfile\n");
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 *		$Source:  $
 *		$Author:  $
 *		$Locker:  $
d7 1
a7 1
static char rcsid_kerb_dbl_c[] = "$Header: $";
@
