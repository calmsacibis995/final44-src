head     4.7;
branch   ;
access   ;
symbols  PATCH8:4.2 PATCH7:4.2 KPATCH6:4.2 ASRSNAP1001:4.2 PATCH5:4.1 KPATCH4:4.1 KPATCH3:4.1 KPATCH2:4.1 KREL1:4.0 BETA5/24/88:1.6;
locks    ; strict;
comment  @ * @;


4.7
date     93.05.21.08.56.29;  author bostic;  state Exp;
branches ;
next     4.6;

4.6
date     92.07.21.22.04.25;  author bostic;  state Exp;
branches ;
next     4.5;

4.5
date     90.06.25.22.12.42;  author kfall;  state Exp;
branches ;
next     4.4;

4.4
date     90.01.09.15.57.20;  author raeburn;  state Exp;
branches ;
next     4.3;

4.3
date     90.01.08.16.10.00;  author raeburn;  state Exp;
branches ;
next     4.2;

4.2
date     89.08.30.11.32.11;  author jtkohl;  state Exp;
branches ;
next     4.1;

4.1
date     89.03.12.00.54.22;  author srz;  state Exp;
branches ;
next     4.0;

4.0
date     89.01.24.21.50.54;  author jtkohl;  state Exp;
branches ;
next     1.13;

1.13
date     89.01.24.17.46.20;  author jon;  state Exp;
branches ;
next     1.12;

1.12
date     89.01.15.15.57.49;  author rfrench;  state Exp;
branches ;
next     1.11;

1.11
date     89.01.14.14.18.13;  author jtkohl;  state Exp;
branches ;
next     1.10;

1.10
date     89.01.10.15.48.04;  author wesommer;  state Exp;
branches ;
next     1.9;

1.9
date     88.12.20.17.37.28;  author wesommer;  state Exp;
branches ;
next     1.8;

1.8
date     88.12.09.16.19.09;  author steiner;  state Exp;
branches ;
next     1.7;

1.7
date     88.07.14.11.51.49;  author shanzer;  state Exp;
branches ;
next     1.6;

1.6
date     88.03.24.18.07.59;  author steiner;  state Exp;
branches ;
next     1.5;

1.5
date     88.02.24.15.37.52;  author steiner;  state Exp;
branches ;
next     1.4;

1.4
date     88.02.23.17.33.55;  author steiner;  state Exp;
branches ;
next     1.3;

1.3
date     88.02.22.18.58.19;  author steiner;  state Exp;
branches ;
next     1.2;

1.2
date     88.01.13.19.00.29;  author steiner;  state Exp;
branches ;
next     1.1;

1.1
date     87.11.30.06.10.35;  author panda;  state Exp;
branches ;
next     ;


desc
@Initial checkin.
@


4.7
log
@warning: previous external decl of `sys_errlist'
@
text
@/*
 * $Source: /usr/src/kerberosIV/kdb_util/RCS/kdb_util.c,v $
 * $Author: bostic $
 *
 * Copyright 1987, 1988 by the Massachusetts Institute of Technology.
 * 
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * Kerberos database manipulation utility. This program allows you to
 * dump a kerberos database to an ascii readable file and load this
 * file into the database. Read locking of the database is done during a
 * dump operation. NO LOCKING is done during a load operation. Loads
 * should happen with other processes shutdown. 
 *
 * Written July 9, 1987 by Jeffrey I. Schiller
 */

#ifndef	lint
static char rcsid_kdb_util_c[] =
"$Id: kdb_util.c,v 4.6 92/07/21 22:04:25 bostic Exp Locker: bostic $";
#endif	lint

#include <mit-copyright.h>
#include <sys/types.h>
#include <sys/file.h>
#include <netinet/in.h>
#include <string.h>
#include <stdio.h>
#include "time.h"
#include <des.h>
#include <krb.h>
#include <krb_db.h>

#define TRUE 1

Principal aprinc;

static des_cblock master_key, new_master_key;
static des_key_schedule master_key_schedule, new_master_key_schedule;

#define zaptime(foo) bzero((char *)(foo), sizeof(*(foo)))

extern long kdb_get_master_key(), kdb_verify_master_key();
extern char *malloc();
extern int errno;

char *progname;

main(argc, argv)
    int     argc;
    char  **argv;
{
    FILE   *file;
    enum {
	OP_LOAD,
	OP_DUMP,
	OP_SLAVE_DUMP,
	OP_NEW_MASTER,
	OP_CONVERT_OLD_DB,
    }       op;
    char *file_name;
    char *prog = argv[0];
    char *db_name;
    
    progname = prog;	/* required by libkdb (yuck!) */

    if (argc != 3 && argc != 4) {
	fprintf(stderr, "Usage: %s operation file-name [database name].\n",
		argv[0]);
	exit(1);
    }
    if (argc == 3)
	db_name = DBM_FILE;
    else
	db_name = argv[3];

    if (kerb_db_set_name (db_name) != 0) {
	perror("Can't open database");
	exit(1);
    }
    
    if (!strcmp(argv[1], "load"))
	op = OP_LOAD;
    else if (!strcmp(argv[1], "dump"))
	op = OP_DUMP;
    else if (!strcmp(argv[1], "slave_dump"))
        op = OP_SLAVE_DUMP;
    else if (!strcmp(argv[1], "new_master_key"))
        op = OP_NEW_MASTER;
    else if (!strcmp(argv[1], "convert_old_db"))
        op = OP_CONVERT_OLD_DB;
    else {
	fprintf(stderr,
	    "%s: %s is an invalid operation.\n", prog, argv[1]);
	fprintf(stderr,
	    "%s: Valid operations are \"dump\", \"slave_dump\",", argv[0]);
	fprintf(stderr,
		"\"load\", \"new_master_key\", and \"convert_old_db\".\n");
	exit(1);
    }

    file_name = argv[2];
    file = fopen(file_name, op == OP_LOAD ? "r" : "w");
    if (file == NULL) {
	fprintf(stderr, "%s: Unable to open %s\n", prog, argv[2]);
	(void) fflush(stderr);
	perror("open");
	exit(1);
    }

    switch (op) {
    case OP_DUMP:
      if ((dump_db (db_name, file, (void (*)()) 0) == EOF) ||
	  (fclose(file) == EOF)) {
	  fprintf(stderr, "error on file %s:", file_name);
	  perror("");
	  exit(1);
      }
      break;
    case OP_SLAVE_DUMP:
      if ((dump_db (db_name, file, (void (*)()) 0) == EOF) ||
	  (fclose(file) == EOF)) {
	  fprintf(stderr, "error on file %s:", file_name);
	  perror("");
	  exit(1);
      }
      update_ok_file (file_name);
      break;
    case OP_LOAD:
      load_db (db_name, file);
      break;
    case OP_NEW_MASTER:
      convert_new_master_key (db_name, file);
      printf("Don't forget to do a `kdb_util load %s' to reload the database!\n", file_name);
      break;
    case OP_CONVERT_OLD_DB:
      convert_old_format_db (db_name, file);
      printf("Don't forget to do a `kdb_util load %s' to reload the database!\n", file_name);      
      break;
    }
    exit(0);
  }

clear_secrets ()
{
  bzero((char *)master_key, sizeof (des_cblock));
  bzero((char *)master_key_schedule, sizeof (Key_schedule));
  bzero((char *)new_master_key, sizeof (des_cblock));
  bzero((char *)new_master_key_schedule, sizeof (Key_schedule));
}

/* cv_key is a procedure which takes a principle and changes its key, 
   either for a new method of encrypting the keys, or a new master key.
   if cv_key is null no transformation of key is done (other than net byte
   order). */

struct callback_args {
    void (*cv_key)();
    FILE *output_file;
};

static int dump_db_1(arg, principal)
    char *arg;
    Principal *principal;
{	    /* replace null strings with "*" */
    struct callback_args *a = (struct callback_args *)arg;
    
    if (principal->instance[0] == '\0') {
	principal->instance[0] = '*';
	principal->instance[1] = '\0';
    }
    if (principal->mod_name[0] == '\0') {
	principal->mod_name[0] = '*';
	principal->mod_name[1] = '\0';
    }
    if (principal->mod_instance[0] == '\0') {
	principal->mod_instance[0] = '*';
	principal->mod_instance[1] = '\0';
    }
    if (a->cv_key != NULL) {
	(*a->cv_key) (principal);
    }
    fprintf(a->output_file, "%s %s %d %d %d %d %x %x",
	    principal->name,
	    principal->instance,
	    principal->max_life,
	    principal->kdc_key_ver,
	    principal->key_version,
	    principal->attributes,
	    htonl (principal->key_low),
	    htonl (principal->key_high));
    print_time(a->output_file, principal->exp_date);
    print_time(a->output_file, principal->mod_date);
    fprintf(a->output_file, " %s %s\n",
	    principal->mod_name,
	    principal->mod_instance);
    return 0;
}

dump_db (db_file, output_file, cv_key)
     char *db_file;
     FILE *output_file;
     void (*cv_key)();
{
    struct callback_args a;

    a.cv_key = cv_key;
    a.output_file = output_file;
    
    kerb_db_iterate (dump_db_1, (char *)&a);
    return fflush(output_file);
}

load_db (db_file, input_file)
     char *db_file;
     FILE *input_file;
{
    char    exp_date_str[50];
    char    mod_date_str[50];
    int     temp1, temp2, temp3;
    long time_explode();
    int code;
    char *temp_db_file;
    temp1 = strlen(db_file) + 2;
    temp_db_file = malloc (temp1);
    strcpy(temp_db_file, db_file);
    strcat(temp_db_file, "~");

    /* Create the database */
    if ((code = kerb_db_create(temp_db_file)) != 0) {
	fprintf(stderr, "Couldn't create temp database %s: %s\n",
		temp_db_file, sys_errlist[code]);
	exit(1);
    }
    kerb_db_set_name(temp_db_file);
    for (;;) {			/* explicit break on eof from fscanf */
	bzero((char *)&aprinc, sizeof(aprinc));
	if (fscanf(input_file,
		   "%s %s %d %d %d %hd %x %x %s %s %s %s\n",
		   aprinc.name,
		   aprinc.instance,
		   &temp1,
		   &temp2,
		   &temp3,
		   &aprinc.attributes,
		   &aprinc.key_low,
		   &aprinc.key_high,
		   exp_date_str,
		   mod_date_str,
		   aprinc.mod_name,
		   aprinc.mod_instance) == EOF)
	    break;
	aprinc.key_low = ntohl (aprinc.key_low);
	aprinc.key_high = ntohl (aprinc.key_high);
	aprinc.max_life = (unsigned char) temp1;
	aprinc.kdc_key_ver = (unsigned char) temp2;
	aprinc.key_version = (unsigned char) temp3;
	aprinc.exp_date = time_explode(exp_date_str);
	aprinc.mod_date = time_explode(mod_date_str);
	if (aprinc.instance[0] == '*')
	    aprinc.instance[0] = '\0';
	if (aprinc.mod_name[0] == '*')
	    aprinc.mod_name[0] = '\0';
	if (aprinc.mod_instance[0] == '*')
	    aprinc.mod_instance[0] = '\0';
	if (kerb_db_put_principal(&aprinc, 1) != 1) {
	    fprintf(stderr, "Couldn't store %s.%s: %s; load aborted\n",
		    aprinc.name, aprinc.instance,
		    sys_errlist[errno]);
	    exit(1);
	};
    }
    if ((code = kerb_db_rename(temp_db_file, db_file)) != 0)
	perror("database rename failed");
    (void) fclose(input_file);
    free(temp_db_file);
}

print_time(file, timeval)
    FILE   *file;
    unsigned long timeval;
{
    struct tm *tm;
    struct tm *gmtime();
    tm = gmtime((long *)&timeval);
    fprintf(file, " %04d%02d%02d%02d%02d",
            tm->tm_year < 1900 ? tm->tm_year + 1900: tm->tm_year,
            tm->tm_mon + 1,
            tm->tm_mday,
            tm->tm_hour,
            tm->tm_min);
}

/*ARGSUSED*/
update_ok_file (file_name)
     char *file_name;
{
    /* handle slave locking/failure stuff */
    char *file_ok;
    int fd;
    static char ok[]=".dump_ok";

    if ((file_ok = (char *)malloc(strlen(file_name) + strlen(ok) + 1))
	== NULL) {
	fprintf(stderr, "kdb_util: out of memory.\n");
	(void) fflush (stderr);
	perror ("malloc");
	exit (1);
    }
    strcpy(file_ok, file_name);
    strcat(file_ok, ok);
    if ((fd = open(file_ok, O_WRONLY|O_CREAT|O_TRUNC, 0400)) < 0) {
	fprintf(stderr, "Error creating 'ok' file, '%s'", file_ok);
	perror("");
	(void) fflush (stderr);
	exit (1);
    }
    free(file_ok);
    close(fd);
}

void
convert_key_new_master (p)
     Principal *p;
{
  des_cblock key;

  /* leave null keys alone */
  if ((p->key_low == 0) && (p->key_high == 0)) return;

  /* move current key to des_cblock for encryption, special case master key
     since that's changing */
  if ((strncmp (p->name, KERB_M_NAME, ANAME_SZ) == 0) &&
      (strncmp (p->instance, KERB_M_INST, INST_SZ) == 0)) {
    bcopy((char *)new_master_key, (char *) key, sizeof (des_cblock));
    (p->key_version)++;
  } else {
    bcopy((char *)&(p->key_low), (char *)key, 4);
    bcopy((char *)&(p->key_high), (char *) (((long *) key) + 1), 4);
    kdb_encrypt_key (key, key, master_key, master_key_schedule, DECRYPT);
  }

  kdb_encrypt_key (key, key, new_master_key, new_master_key_schedule, ENCRYPT);

  bcopy((char *)key, (char *)&(p->key_low), 4);
  bcopy((char *)(((long *) key) + 1), (char *)&(p->key_high), 4);
  bzero((char *)key, sizeof (key));  /* a little paranoia ... */

  (p->kdc_key_ver)++;
}

convert_new_master_key (db_file, out)
     char *db_file;
     FILE *out;
{

  printf ("\n\nEnter the CURRENT master key.");
  if (kdb_get_master_key (TRUE, master_key, master_key_schedule) != 0) {
    fprintf (stderr, "%s: Couldn't get master key.\n");
    clear_secrets ();
    exit (-1);
  }

  if (kdb_verify_master_key (master_key, master_key_schedule, stderr) < 0) {
    clear_secrets ();
    exit (-1);
  }

  printf ("\n\nNow enter the NEW master key.  Do not forget it!!");
  if (kdb_get_master_key (TRUE, new_master_key, new_master_key_schedule) != 0) {
    fprintf (stderr, "%s: Couldn't get new master key.\n");
    clear_secrets ();
    exit (-1);
  }

  dump_db (db_file, out, convert_key_new_master);
}

void
convert_key_old_db (p)
     Principal *p;
{
  des_cblock key;

 /* leave null keys alone */
  if ((p->key_low == 0) && (p->key_high == 0)) return;

  bcopy((char *)&(p->key_low), (char *)key, 4);
  bcopy((char *)&(p->key_high), (char *)(((long *) key) + 1), 4);

#ifndef NOENCRYPTION
  /* get clear key, old style */
  (void) des_pcbc_encrypt ((des_cblock *) key, (des_cblock *) key,
		(long) sizeof(des_cblock), 
		master_key_schedule, (des_cblock *)master_key_schedule,
		DECRYPT);
#endif

  /* make new key, new style */
  kdb_encrypt_key (key, key, master_key, master_key_schedule, ENCRYPT);

  bcopy((char *)key, (char *)&(p->key_low), 4);
  bcopy((char *)(((long *) key) + 1), (char *)&(p->key_high), 4);
  bzero((char *)key, sizeof (key));  /* a little paranoia ... */
}

convert_old_format_db (db_file, out)
     char *db_file;
     FILE *out;
{
  des_cblock key_from_db;
  Principal principal_data[1];
  int n, more;

  if (kdb_get_master_key (TRUE, master_key, master_key_schedule) != 0L) {
    fprintf (stderr, "%s: Couldn't get master key.\n");
    clear_secrets();
    exit (-1);
  }

  /* can't call kdb_verify_master_key because this is an old style db */
  /* lookup the master key version */
  n = kerb_get_principal(KERB_M_NAME, KERB_M_INST, principal_data,
			 1 /* only one please */, &more);
  if ((n != 1) || more) {
    fprintf(stderr, "verify_master_key: ",
	    "Kerberos error on master key lookup, %d found.\n",
	    n);
    exit (-1);
  }

  /* set up the master key */
  fprintf(stderr, "Current Kerberos master key version is %d.\n",
	  principal_data[0].kdc_key_ver);

  /*
   * now use the master key to decrypt (old style) the key in the db, had better
   * be the same! 
   */
  bcopy((char *)&principal_data[0].key_low, (char *)key_from_db, 4);
  bcopy((char *)&principal_data[0].key_high,
	(char *)(((long *) key_from_db) + 1), 4);
#ifndef NOENCRYPTION
  (void) des_pcbc_encrypt (key_from_db, key_from_db,
			   (long) sizeof(key_from_db),
			   master_key_schedule,
			   (des_cblock *) master_key_schedule, DECRYPT);
#endif
  /* the decrypted database key had better equal the master key */
  n = bcmp((char *) master_key, (char *) key_from_db,
	   sizeof(master_key));
  bzero((char *)key_from_db, sizeof(key_from_db));

  if (n) {
    fprintf(stderr, "\n\07\07%verify_master_key: Invalid master key, ");
    fprintf(stderr, "does not match database.\n");
    exit (-1);
  }
    
  fprintf(stderr, "Master key verified.\n");
  (void) fflush(stderr);

  dump_db (db_file, out, convert_key_old_db);
}

long
time_explode(cp)
register char *cp;
{
    char wbuf[5];
    struct tm tp;
    long maketime();
    int local;

    zaptime(&tp);			/* clear out the struct */
    
    if (strlen(cp) > 10) {		/* new format */
	(void) strncpy(wbuf, cp, 4);
	wbuf[4] = 0;
	tp.tm_year = atoi(wbuf);
	cp += 4;			/* step over the year */
	local = 0;			/* GMT */
    } else {				/* old format: local time, 
					   year is 2 digits, assuming 19xx */
	wbuf[0] = *cp++;
	wbuf[1] = *cp++;
	wbuf[2] = 0;
	tp.tm_year = 1900 + atoi(wbuf);
	local = 1;			/* local */
    }

    wbuf[0] = *cp++;
    wbuf[1] = *cp++;
    wbuf[2] = 0;
    tp.tm_mon = atoi(wbuf)-1;

    wbuf[0] = *cp++;
    wbuf[1] = *cp++;
    tp.tm_mday = atoi(wbuf);
    
    wbuf[0] = *cp++;
    wbuf[1] = *cp++;
    tp.tm_hour = atoi(wbuf);
    
    wbuf[0] = *cp++;
    wbuf[1] = *cp++;
    tp.tm_min = atoi(wbuf);


    return(maketime(&tp, local));
}
@


4.6
log
@typo, causes a segv on the Sun; from Craig Leres

@
text
@d3 1
a3 1
 * $Author: kfall $
d21 1
a21 1
"$Id: kdb_util.c,v 4.5 90/06/25 22:12:42 kfall Exp Locker: bostic $";
a223 1
    extern char *sys_errlist[];
@


4.5
log
@libkdb requires a definition for "progname" (YUCK! YUCK! YUCK! XXX)
@
text
@d3 1
a3 1
 * $Author: raeburn $
d21 1
a21 1
"$Id: kdb_util.c,v 4.4 90/01/09 15:57:20 raeburn Exp Locker: kfall $";
d226 1
a226 1
    temp1 = strlen(db_file+2);
@


4.4
log
@Author: jtkohl.  Auditor: raeburn.
Got rid of not-for-sale zaptime code, and changed to handle new
maketime.
@
text
@d2 1
a2 1
 * $Source: /afs/athena.mit.edu/astaff/project/kerberos/src/admin/RCS/kdb_util.c,v $
d21 1
a21 1
"$Id: kdb_util.c,v 4.3 90/01/08 16:10:00 raeburn Exp Locker: jtkohl $";
a24 1
#include <stdio.h>
d26 1
d28 2
a30 1
#include <strings.h>
a32 1
#include <sys/file.h>
d48 2
d66 2
@


4.3
log
@Author: jtkohl.  Auditor: raeburn.
Now checks for errors writing to output file for `dump*' options.
@
text
@d3 1
a3 1
 * $Author: jtkohl $
d21 1
a21 1
"$Header: /afs/athena.mit.edu/astaff/project/kerberos/src/admin/RCS/kdb_util.c,v 4.2 89/08/30 11:32:11 jtkohl Exp Locker: jtkohl $";
d42 2
d471 1
a471 1
    int ltime = 0;
d480 1
a482 1
	ltime = 1;
d487 1
a506 2
    if (!ltime)
	tp.tm_zon = 0;			/* GMT */
d508 1
a508 39
    return(maketime(&tp));
}

/* zaptime code taken from: */
/*
 * PARTIME		parse date/time string into a TM structure
 *
 * Usage:
 *      #include "time.h"             -- expanded tm structure
 *	char *str; struct tm *tp;
 *	partime(str,tp);
 * Returns:
 *	0 if parsing failed
 *	else time values in specified TM structure (unspecified values
 *		set to TMNULL)
 * Notes:
 *	This code is quasi-public; it may be used freely in like software.
 *	It is not to be sold, nor used in licensed software without
 *	permission of the author.
 *	For everyone's benefit, please report bugs and improvements!
 * 	Copyright 1980 by Ken Harrenstien, SRI International.
 *	(ARPANET: KLH @@ SRI)
 */

zaptime(atm)
register struct tm *atm;
/* clears atm */
{
	atm->tm_sec = TMNULL;
	atm->tm_min = TMNULL;
	atm->tm_hour = TMNULL;
	atm->tm_mday = TMNULL;
	atm->tm_mon = TMNULL;
	atm->tm_year = TMNULL;
	atm->tm_wday = TMNULL;
	atm->tm_yday = TMNULL;
	atm->tm_isdst = TMNULL;
	atm->tm_zon = TMNULL;
	atm->tm_ampm = TMNULL;
@


4.2
log
@Programmer: Kevin Fall
Auditor: John Kohl
the attributes field is a short, not a long... use %hd for halfword
@
text
@d3 1
a3 1
 * $Author: srz $
d21 1
a21 1
"$Header: /afs/athena.mit.edu/astaff/project/kerberos/src/admin/RCS/kdb_util.c,v 4.1 89/03/12 00:54:22 srz Exp Locker: jtkohl $";
d108 6
a113 1
      dump_db (db_name, file, (void (*)()) 0);
d116 6
a121 1
      dump_db (db_name, file, (void (*)()) 0);
d206 1
a206 1
    (void) fflush(output_file);
@


4.1
log
@Programmer: Jon
Auditor: srz

Fixed new_master_key and convert_old_db commands to preserve null keys.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/admin/RCS/kdb_util.c,v $
 * $Author: jtkohl $
d21 1
a21 1
"$Header: kdb_util.c,v 4.0 89/01/24 21:50:54 jon Locked $";
d225 1
a225 1
		   "%s %s %d %d %d %d %x %x %s %s %s %s\n",
@


4.0
log
@no change, up rev # to 4.0
@
text
@d3 1
a3 1
 * $Author: jon $
d21 1
a21 1
"$Header: kdb_util.c,v 1.13 89/01/24 17:46:20 jon Exp $";
d314 3
d370 3
@


1.13
log
@Programmer: wesommer
Auditor: jon
use new database routines, can give db name on command line
@
text
@d2 2
a3 2
 * $Source: /mit/wesommer/kslave/build/admin/RCS/kdb_util.c,v $
 * $Author: rfrench $
d21 1
a21 1
"$Header: kdb_util.c,v 1.12 89/01/15 15:57:49 wesommer Locked $";
@


1.12
log
@Programmer: jtkohl
Auditor: rfrench
Changed to use local time.h
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/admin/RCS/kdb_util.c,v $
 * $Author: jtkohl $
d21 1
a21 1
"$Header: kdb_util.c,v 1.11 89/01/14 14:18:13 jtkohl Locked $";
a33 5
#ifdef NDBM
#include <ndbm.h>
#else /*NDBM*/
#include <dbm.h>
#endif /*NDBM*/
a38 2
int progname;  /* Some library (des?) needs this.  This is wrong! */

d43 2
d60 11
d72 2
a73 2
    if (argc != 3) {
	fprintf(stderr, "Usage: %s operation file-name.\n", argv[0]);
d76 1
d108 1
a108 1
      dump_db (DBM_FILE, file, (void (*)()) 0);
d111 1
a111 1
      dump_db (DBM_FILE, file, (void (*)()) 0);
d115 1
a115 1
      load_db (DBM_FILE, file);
d118 2
a119 1
      convert_new_master_key (DBM_FILE, file);
d122 2
a123 1
      convert_old_format_db (DBM_FILE, file);
d142 45
a186 2
dump_db (dbm_file, output_file, cv_key)
     char *dbm_file;
d190 1
a190 6
    datum   key;
    datum   contents;
#ifdef NDBM
    DBM    *db;
#endif /*NDBM*/
    Principal *principal;
d192 5
a196 51
	kerb_db_init();		/* initialize and open the database */
	kerb_dbl_lock(0);	/* lock the database for reading */

#ifdef NDBM
	db = dbm_open(dbm_file, O_RDONLY, 0600);
#else
	dbminit(dbm_file);
#endif /*NDBM*/

	for (key = dbm_firstkey(db); key.dptr != NULL;
#ifdef NDBM
	    key = dbm_nextkey(db)) {
#else
	    key = nextkey(key)) {
#endif /*NDBM*/
	    contents = dbm_fetch(db, key);
	    principal = (Principal *) contents.dptr;
	    /* replace null strings with "*" */
	    if (principal->instance[0] == '\0') {
		principal->instance[0] = '*';
		principal->instance[1] = '\0';
	    }
	    if (principal->mod_name[0] == '\0') {
		principal->mod_name[0] = '*';
		principal->mod_name[1] = '\0';
	    }
	    if (principal->mod_instance[0] == '\0') {
		principal->mod_instance[0] = '*';
		principal->mod_instance[1] = '\0';
	    }
	    if (cv_key != NULL) {
	      (*cv_key) (principal);
	    }
	    fprintf(output_file, "%s %s %d %d %d %d %x %x",
		    principal->name,
		    principal->instance,
		    principal->max_life,
		    principal->kdc_key_ver,
		    principal->key_version,
		    principal->attributes,
		    htonl (principal->key_low),
		    htonl (principal->key_high));
	    print_time(output_file, principal->exp_date);
	    print_time(output_file, principal->mod_date);
	    fprintf(output_file, " %s %s\n",
		    principal->mod_name,
		    principal->mod_instance);
	}
	dbm_close(db);
	kerb_dbl_unlock();	/* unlock the database */
	(void) fflush(output_file);
d199 2
a200 2
load_db (dbm_file, input_file)
     char *dbm_file;
a202 6
#ifdef NDBM
    DBM    *db;
#else
    int db_fd;
    char db_filename[BUFSIZ];
#endif /*NDBM*/
d207 7
d215 46
a260 46
	/* Create the database */

#ifdef NDBM
	db = dbm_open(dbm_file, O_RDWR | O_CREAT | O_TRUNC, 0600);
	dbm_close(db);
#else
	sprintf(db_filename, "%s.dir", dbm_file);
	db_fd = open(db_filename,  O_RDWR | O_CREAT | O_TRUNC, 0600);
	close(db_fd);
	sprintf(db_filename, "%s.pag", dbm_file);
	db_fd = open(db_filename,  O_RDWR | O_CREAT | O_TRUNC, 0600);
	close(db_fd);
#endif /*NDBM*/

	for (;;) {		/* explicit break on eof from fscanf */
	    bzero((char *)&aprinc, sizeof(aprinc));
	    if (fscanf(input_file,
		       "%s %s %d %d %d %d %x %x %s %s %s %s\n",
		       aprinc.name,
		       aprinc.instance,
		       &temp1,
		       &temp2,
		       &temp3,
		       &aprinc.attributes,
		       &aprinc.key_low,
		       &aprinc.key_high,
		       exp_date_str,
		       mod_date_str,
		       aprinc.mod_name,
		       aprinc.mod_instance) == EOF)
		break;
	    aprinc.key_low = ntohl (aprinc.key_low);
	    aprinc.key_high = ntohl (aprinc.key_high);
	    aprinc.max_life = (unsigned char) temp1;
	    aprinc.kdc_key_ver = (unsigned char) temp2;
	    aprinc.key_version = (unsigned char) temp3;
	    aprinc.exp_date = time_explode(exp_date_str);
	    aprinc.mod_date = time_explode(mod_date_str);
	    if (aprinc.instance[0] == '*')
		aprinc.instance[0] = '\0';
	    if (aprinc.mod_name[0] == '*')
		aprinc.mod_name[0] = '\0';
	    if (aprinc.mod_instance[0] == '*')
		aprinc.mod_instance[0] = '\0';
	    kerb_db_put_principal(&aprinc, 1);
	  }
d262 2
a263 1
   }
d284 4
d289 3
a291 8
      /* handle slave locking/failure stuff */
#ifdef notyet
  char *file_ok;
  int fd;

      if ((file_ok = (char *)malloc(strlen(argv[2]) + strlen(".ok") + 1))
	  == NULL) {
	fprintf(stderr, "%s: out of memory.\n", argv[0]);
d295 6
a300 4
      }
      strcat(strcpy(file_ok, file_name), ".ok");
      if ((fd = creat(file_ok, 0400)) < 0) {
	fprintf(stderr, "Error creating 'ok' file, '%s'.\n", file_ok);
a302 2
      }
      close(fd);
d304 2
a305 1
#endif
d335 2
a336 2
convert_new_master_key (dbm_file, out)
     char *dbm_file;
d359 1
a359 1
  dump_db (dbm_file, out, convert_key_new_master);
d387 2
a388 2
convert_old_format_db (dbm_file, out)
     char *dbm_file;
d443 1
a443 1
  dump_db (dbm_file, out, convert_key_old_db);
@


1.11
log
@Programmer: Win Treese
Auditor: John Kohl
changes: 4.2 DBM support
@
text
@d3 1
a3 1
 * $Author: wesommer $
d21 1
a21 1
"$Header: kdb_util.c,v 1.10 89/01/10 15:48:04 jtkohl Locked $";
d28 1
a28 3
#include <sys/uio.h>
#include <sys/time.h>
#include <sys/resource.h>
@


1.10
log
@Programmer: Johl Kohl.
Don't increment key_version field (except for master key) when
changing the database master key.
@
text
@d21 1
a21 1
"$Header: kdb_util.c,v 1.9 88/12/20 17:37:28 jtkohl Locked $";
a33 1
#include <ndbm.h>
d36 5
d142 1
d144 1
d149 2
d152 4
d157 1
d159 3
d204 1
d206 4
d216 2
d220 9
@


1.9
log
@Programmer: jtkohl.
Remove AT&T-derived code.
Many lint fixes.
@
text
@d3 1
a3 1
 * $Author: steiner $
d21 1
a21 1
"$Header: kdb_util.c,v 1.8 88/12/09 16:19:09 jtkohl Locked $";
d284 1
a284 1
      (strncmp (p->instance, KERB_M_INST, INST_SZ) == 0))
d286 2
a287 1
  else {
a298 1
  (p->key_version)++;
@


1.8
log
@NOENCRYPTION changes.
programmer: jtkohl
auditor: steiner
@
text
@d3 1
a3 1
 * $Author: shanzer $
d21 1
a21 1
"$Header: kdb_util.c,v 1.7 88/07/14 11:51:49 jtkohl Locked $";
a37 2
#define Dysize(x) (((x) % 4 == 0) ? 366 : 365)

a39 1
struct timeval tv;
d44 2
a45 2
static C_Block master_key, new_master_key;
static Key_schedule master_key_schedule, new_master_key_schedule;
d47 2
d92 1
a92 1
	fflush(stderr);
d99 1
a99 1
      dump_db (DBM_FILE, file, NULL);
d102 1
a102 1
      dump_db (DBM_FILE, file, NULL);
d120 4
a123 4
  bzero (master_key, sizeof (C_Block));
  bzero (master_key_schedule, sizeof (Key_schedule));
  bzero (new_master_key, sizeof (C_Block));
  bzero (new_master_key_schedule, sizeof (Key_schedule));
a139 2
    char    exp_date_str[50];
    char    mod_date_str[50];
d143 1
a143 1
	db = dbm_open(DBM_FILE, O_RDONLY, 0600);
d181 1
a181 1
	fflush(output_file);
a187 2
    datum   key;
    datum   contents;
a188 1
    Principal *principal;
d192 1
d195 1
a195 1
	db = dbm_open(DBM_FILE, O_RDWR | O_CREAT | O_TRUNC, 0600);
d198 1
a198 1
	    bzero(&aprinc, sizeof(aprinc));
d219 2
a220 4
	    gtime(exp_date_str);
	    aprinc.exp_date = tv.tv_sec;
	    gtime(mod_date_str);
	    aprinc.mod_date = tv.tv_sec;
d229 1
a229 1
    fclose(input_file);
d237 8
a244 8
    struct tm *localtime();
    tm = localtime(&timeval);
    fprintf(file, " %02d%02d%02d%02d%02d",
	    tm->tm_year,
	    tm->tm_mon + 1,
	    tm->tm_mday,
	    tm->tm_hour,
	    tm->tm_min);
d247 1
d251 3
a256 2
      /* handle slave locking/failure stuff */
#ifdef notyet
d260 1
a260 1
	fflush (stderr);
d267 1
a267 1
	fflush (stderr);
d275 1
d279 1
a279 1
  C_Block key;
d281 1
a281 1
  /* move current key to C_Block for encryption, special case master key
d285 1
a285 1
    bcopy (new_master_key, key, sizeof (C_Block));
d287 2
a288 2
    bcopy(&(p->key_low), key, 4);
    bcopy(&(p->key_high), ((long *) key) + 1, 4);
d294 3
a296 3
  bcopy(key, &(p->key_low), 4);
  bcopy(((long *) key) + 1, &(p->key_high), 4);
  bzero (key, sizeof (key));  /* a little paranoia ... */
d329 1
d333 1
a333 1
  C_Block key;
d335 2
a336 2
  bcopy(&(p->key_low), key, 4);
  bcopy(&(p->key_high), ((long *) key) + 1, 4);
d340 4
a343 2
  pcbc_encrypt (key, key, sizeof(C_Block), 
		master_key_schedule, master_key_schedule, DECRYPT);
d349 3
a351 3
  bcopy(key, &(p->key_low), 4);
  bcopy(((long *) key) + 1, &(p->key_high), 4);
  bzero (key, sizeof (key));  /* a little paranoia ... */
d358 1
a358 1
  C_Block key_from_db;
d362 1
a362 1
  if (kdb_get_master_key (TRUE, master_key, master_key_schedule) != 0) {
d387 3
a389 2
  bcopy(&principal_data[0].key_low, key_from_db, 4);
  bcopy(&principal_data[0].key_high, ((long *) key_from_db) + 1, 4);
d391 4
a394 2
  pcbc_encrypt (key_from_db, key_from_db, sizeof (key_from_db),
		master_key_schedule, master_key_schedule, DECRYPT);
d399 1
a399 1
  bzero(key_from_db, sizeof(key_from_db));
d408 1
a408 1
  fflush(stderr);
d413 8
a420 3
/* Code below this point stolen from the "date" command. */
/* XXXXXXXXXXXXXXXXXX  and therefore needs to be re-written before
   shipping! */
d422 15
a436 2
static int dmsize[12] =
{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
d438 4
a441 10
struct timezone tz;
static char *ap, *ep, *sp;
gtime(fp)
    char   *fp;
{
    register int i, year, month;
    int     day, hour, mins, secs;
    struct tm *L;
    char    x;
    struct tm *localtime();
d443 11
a453 1
    ap = fp;
d455 4
a458 54
    ep = ap;
    while (*ep)
	ep++;
    sp = ap;
    while (sp < ep) {
	x = *sp;
	*sp++ = *--ep;
	*ep = x;
    }
    sp = ap;
    (void) gettimeofday(&tv, &tz);
    L = localtime((time_t *) & tv.tv_sec);
    secs = gp(-1);
    if (*sp != '.') {
	mins = secs;
	secs = 0;
    } else {
	sp++;
	mins = gp(-1);
    }
    hour = gp(-1);
    day = gp(L->tm_mday);
    month = gp(L->tm_mon + 1);
    year = gp(L->tm_year);
    if (*sp)
	return (1);
    if (month < 1 || month > 12 ||
	day < 1 || day > 31 ||
	mins < 0 || mins > 59 ||
	secs < 0 || secs > 59)
	return (1);
    if (hour == 24) {
	hour = 0;
	day++;
    }
    if (hour < 0 || hour > 23)
	return (1);
    tv.tv_sec = 0;
    year += 1900;
    for (i = 1970; i < year; i++)
	tv.tv_sec += Dysize(i);
    /* Leap year */
    if (Dysize(year) == 366 && month >= 3)
	tv.tv_sec++;
    while (--month)
	tv.tv_sec += dmsize[month - 1];
    tv.tv_sec += day - 1;
    tv.tv_sec = 24 * tv.tv_sec + hour;
    tv.tv_sec = 60 * tv.tv_sec + mins;
    tv.tv_sec = 60 * tv.tv_sec + secs;
    tv.tv_sec += (long) tz.tz_minuteswest * 60;
    if (localtime((unsigned long *) &tv.tv_sec)->tm_isdst)
	tv.tv_sec -= 60 * 60;
    return (0);
d461 24
a484 1
gp(dfault)
d486 11
a496 9
    register int c, d;

    if (*sp == 0)
	return (dfault);
    c = (*sp++) - '0';
    d = (*sp ? (*sp++) - '0' : 0);
    if (c < 0 || c > 9 || d < 0 || d > 9)
	return (-1);
    return (c + 10 * d);
@


1.7
log
@dbm_nextkey was called with 2 arguments when it only takes one.
Programmer: wesommer
Auditor: shanzer
@
text
@d3 1
a3 1
 * $Author: steiner $
d21 1
a21 1
"$Header: kdb_util.c,v 1.6 88/03/24 18:07:59 steiner Exp $";
d341 1
d345 1
d390 1
d393 1
a393 1

@


1.6
log
@Encrypt in master key rather than key schedule for
byte-order independence.
Programmer: jon.
Auditor: jtkohl.
@
text
@d21 1
a21 1
"$Header: kdb_util.c,v 1.5 88/02/24 15:37:52 steiner Exp $";
d148 1
a148 1
	    key = dbm_nextkey(db, key)) {
@


1.5
log
@A better approximation of whether it's leap year.
@
text
@d21 1
a21 1
"$Header: kdb_util.c,v 1.4 88/02/23 17:33:55 steiner Locked $";
d40 2
d45 5
d58 3
d62 2
a63 7
    datum   key;
    datum   contents;
    DBM    *db;
    Principal *principal;
    char    exp_date_str[50];
    char    mod_date_str[50];
    int     temp1, temp2, temp3;
d73 6
d81 1
a81 1
	    "%s: %s is an invalid operation.\n", argv[0], argv[1]);
d83 3
a85 2
	    "%s: Valid operations are \"dump\" and \"load.\"\n",
	    argv[0]);
d88 3
a90 1
    file = fopen(argv[2], op == OP_LOAD ? "r" : "w");
d92 1
a92 1
	fprintf(stderr, "Unable to open %s\n", argv[2]);
d97 1
d100 44
d164 4
a167 1
	    fprintf(file, "%s %s %d %d %d %d %x %x",
d174 5
a178 5
		    principal->key_low,
		    principal->key_high);
	    print_time(file, principal->exp_date);
	    print_time(file, principal->mod_date);
	    fprintf(file, " %s %s\n",
d184 15
a198 3
	fflush(file);
	break;
    case OP_LOAD:
d204 1
a204 1
	    if (fscanf(file,
d219 2
d235 3
a237 5
	}
    }
    fclose(file);
    exit(0);
}
d254 154
d409 2
@


1.4
log
@Copyright notice, etc.
@
text
@d21 1
a21 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
d38 1
a38 1
#define Dysize(x) 365
@


1.3
log
@"dysize" is not always defined.  Defined it to return 365.
This should be fixed to figure out leap years.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/admin/RCS/kdb_util.c,v $ $Author: steiner $
 * $Locker: steiner $ 
d5 5
d16 1
a16 2
 * Written July 9, 1987 by Jeffrey I. Schiller (c) Copyright 1987
 * Massachusetts Institute of Technology 
d18 7
@


1.2
log
@Formatted.
@
text
@d2 2
a3 2
 * $Source: /u1/mit/kerberos/admin/RCS/kdb_util.c,v $ $Author: panda $
 * $Locker:  $ 
d27 2
d227 1
a227 1
	tv.tv_sec += dysize(i);
d229 1
a229 1
    if (dysize(year) == 366 && month >= 3)
@


1.1
log
@Initial revision
@
text
@d2 2
a3 3
 *		$Source: /u3/kerberos.new/dbm/util/RCS/db_util.c,v $
 *		$Author: steiner $
 *		$Locker:  $
d5 5
a9 6
 *	Kerberos database manipulation utility. This program allows
 *	you to dump a kerberos database to an ascii readable file
 *	and load this file into the database. Read locking of the
 *	database is done during a dump operation. NO LOCKING is done
 *	during a load operation. Loads should happen with other processes
 *	shutdown.
d11 2
a12 2
 *	Written July 9, 1987 by Jeffrey I. Schiller
 *	(c) Copyright 1987 Massachusetts Institute of Technology
d31 2
a32 2
int argc;
char **argv;
d34 12
a45 12
  FILE *file;
  enum {
    OP_LOAD,
    OP_DUMP,
  } op;
  datum key;
  datum contents;
  DBM *db;
  Principal *principal;
  char exp_date_str[50];
  char mod_date_str[50];
  int temp1, temp2, temp3;
d47 13
a59 11
  if (argc != 3) {
    fprintf(stderr, "Usage: %s operation file-name.\n", argv[0]);
    exit (1);
  }
  if (!strcmp(argv[1], "load"))
    op = OP_LOAD;
  else if (!strcmp(argv[1], "dump"))
    op = OP_DUMP;
  else {
    fprintf(stderr, "%s: %s is an invalid operation.\n", argv[0], argv[1]);
    fprintf(stderr, "%s: Valid operations are \"dump\" and \"load.\"\n",
d61 1
a61 44
    exit (1);
  }
  file = fopen(argv[2], op == OP_LOAD ? "r" : "w");
  if (file == NULL) {
    fprintf(stderr, "Unable to open %s\n", argv[2]);
    fflush(stderr);
    perror("open");
    exit (1);
  }
  switch (op) {
  case OP_DUMP:
    kerb_db_init();		/* initialize and open the database */
    kerb_dbl_lock(0);		/* lock the database for reading */
    db = dbm_open(DBM_FILE, O_RDONLY, 0600);
    for (key = dbm_firstkey(db); key.dptr != NULL; key = dbm_nextkey(db, key)) {
      contents = dbm_fetch(db, key);
      principal = (Principal *) contents.dptr;
				/* replace null strings with "*" */
      if (principal->instance[0] == '\0') {
	principal->instance[0] = '*';
	principal->instance[1] = '\0';
      }
      if (principal->mod_name[0] == '\0') {
	principal->mod_name[0] = '*';
	principal->mod_name[1] = '\0';
      }
      if (principal->mod_instance[0] == '\0') {
	principal->mod_instance[0] = '*';
	principal->mod_instance[1] = '\0';
      }
      fprintf(file, "%s %s %d %d %d %d %x %x",
	      principal->name,
	      principal->instance,
	      principal->max_life,
	      principal->kdc_key_ver,
	      principal->key_version,
	      principal->attributes,
	      principal->key_low,
	      principal->key_high);
      print_time(file, principal->exp_date);
      print_time(file, principal->mod_date);
      fprintf(file, " %s %s\n",
	      principal->mod_name,
	      principal->mod_instance);
d63 6
a68 35
    dbm_close(db);
    kerb_dbl_unlock();		/* unlock the database */
    fflush(file);
    break;
  case OP_LOAD:
    /* Create the database */
    db = dbm_open(DBM_FILE, O_RDWR|O_CREAT|O_TRUNC, 0600);
    dbm_close(db);
    for(;;) {			/* explicit break on eof from fscanf */
      bzero(&aprinc, sizeof(aprinc));
      if (fscanf(file,
		 "%s %s %d %d %d %d %x %x %s %s %s %s\n",
		 aprinc.name,
		 aprinc.instance,
		 &temp1,
		 &temp2,
		 &temp3,
		 &aprinc.attributes,
		 &aprinc.key_low,
		 &aprinc.key_high,
		 exp_date_str,
		 mod_date_str,
		 aprinc.mod_name,
		 aprinc.mod_instance) == EOF) break;
      aprinc.max_life = (unsigned char) temp1;
      aprinc.kdc_key_ver = (unsigned char) temp2;
      aprinc.key_version = (unsigned char) temp3;
      gtime(exp_date_str);
      aprinc.exp_date = tv.tv_sec;
      gtime(mod_date_str);
      aprinc.mod_date = tv.tv_sec;
      if (aprinc.instance[0] == '*') aprinc.instance[0] = '\0';
      if (aprinc.mod_name[0] == '*') aprinc.mod_name[0] = '\0';
      if (aprinc.mod_instance[0] == '*') aprinc.mod_instance[0] = '\0';
      kerb_db_put_principal(&aprinc, 1);
d70 80
a149 3
  }
  fclose(file);
  exit (0);
d152 3
a154 3
print_time (file, timeval)
FILE *file;
unsigned long timeval;
d156 9
a164 9
  struct tm *tm;
  struct tm *localtime();
  tm = localtime(&timeval);
  fprintf(file, " %02d%02d%02d%02d%02d",
	  tm->tm_year,
	  tm->tm_mon+1,
	  tm->tm_mday,
	  tm->tm_hour,
	  tm->tm_min);
d169 2
a170 2
static	int dmsize[12] =
    { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
d175 1
a175 1
char *fp;
d177 5
a181 5
	register int i, year, month;
	int day, hour, mins, secs;
	struct tm *L;
	char x;
	struct tm *localtime();
d183 1
a183 1
	ap = fp;
d185 54
a238 53
	ep = ap;
	while(*ep) ep++;
	sp = ap;
	while(sp < ep) {
		x = *sp;
		*sp++ = *--ep;
		*ep = x;
	}
	sp = ap;
	(void) gettimeofday(&tv, &tz);
	L = localtime((time_t *)&tv.tv_sec);
	secs = gp(-1);
	if (*sp != '.') {
		mins = secs;
		secs = 0;
	} else {
		sp++;
		mins = gp(-1);
	}
	hour = gp(-1);
	day = gp(L->tm_mday);
	month = gp(L->tm_mon+1);
	year = gp(L->tm_year);
	if (*sp)
		return (1);
	if (month < 1 || month > 12 ||
	    day < 1 || day > 31 ||
	    mins < 0 || mins > 59 ||
	    secs < 0 || secs > 59)
		return (1);
	if (hour == 24) {
		hour = 0;
		day++;
	}
	if (hour < 0 || hour > 23)
		return (1);
	tv.tv_sec = 0;
	year += 1900;
	for (i = 1970; i < year; i++)
		tv.tv_sec += dysize(i);
	/* Leap year */
	if (dysize(year) == 366 && month >= 3)
		tv.tv_sec++;
	while (--month)
		tv.tv_sec += dmsize[month-1];
	tv.tv_sec += day-1;
	tv.tv_sec = 24*tv.tv_sec + hour;
	tv.tv_sec = 60*tv.tv_sec + mins;
	tv.tv_sec = 60*tv.tv_sec + secs;
	tv.tv_sec += (long)tz.tz_minuteswest*60;
	if (localtime((unsigned long *)&tv.tv_sec)->tm_isdst)
	  tv.tv_sec -= 60*60;
	return (0);
d243 1
a243 1
	register int c, d;
d245 7
a251 7
	if (*sp == 0)
		return (dfault);
	c = (*sp++) - '0';
	d = (*sp ? (*sp++) - '0' : 0);
	if (c < 0 || c > 9 || d < 0 || d > 9)
		return (-1);
	return (c+10*d);
@
