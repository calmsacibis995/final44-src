head     4.4;
branch   ;
access   ;
symbols  PATCH8:4.4 PATCH7:4.4 KPATCH6:4.4 ASRSNAP1001:4.4 PATCH5:4.4 KPATCH4:4.4 KPATCH3:4.4 KPATCH2:4.4 KREL1:4.4 BETA5/24/88:4.4;
locks    ; strict;
comment  @ * @;


4.4
date     87.10.28.11.26.50;  author jtkohl;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.20.17.03.32;  author jtkohl;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.19.58;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.45.49;  author steiner;  state Exp;
branches ;
next     3.7;

3.7
date     86.08.12.12.36.50;  author bcn;  state Exp;
branches ;
next     3.6;

3.6
date     86.06.08.15.27.44;  author spm;  state Exp;
branches ;
next     3.5;

3.5
date     86.05.23.13.22.02;  author spm;  state Exp;
branches ;
next     3.4;

3.4
date     86.05.23.13.06.19;  author spm;  state Exp;
branches ;
next     3.3;

3.3
date     86.05.14.15.26.55;  author spm;  state Exp;
branches ;
next     3.2;

3.2
date     86.04.04.17.53.43;  author spm;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.10.38.43;  author bcn;  state Exp;
branches ;
next     1.23;

1.23
date     86.03.25.15.54.07;  author spm;  state Exp;
branches ;
next     1.22;

1.22
date     86.03.21.15.53.36;  author bcn;  state Exp;
branches ;
next     1.21;

1.21
date     86.03.14.15.34.44;  author spm;  state Exp;
branches ;
next     1.20;

1.20
date     86.03.13.14.48.56;  author bcn;  state Exp;
branches ;
next     1.19;

1.19
date     86.01.07.20.27.38;  author spm;  state Exp;
branches ;
next     1.18;

1.18
date     86.01.07.12.51.45;  author spm;  state Exp;
branches ;
next     1.17;

1.17
date     85.11.26.11.45.18;  author spm;  state Exp;
branches ;
next     1.16;

1.16
date     85.11.26.11.43.19;  author bcn;  state Exp;
branches ;
next     1.15;

1.15
date     85.11.19.15.10.00;  author bcn;  state Exp;
branches ;
next     1.14;

1.14
date     85.11.18.13.56.59;  author bcn;  state Exp;
branches ;
next     1.13;

1.13
date     85.11.15.16.41.11;  author spm;  state Exp;
branches ;
next     1.12;

1.12
date     85.11.15.12.57.14;  author bcn;  state Exp;
branches ;
next     1.11;

1.11
date     85.11.11.15.48.30;  author spm;  state Exp;
branches ;
next     1.10;

1.10
date     85.11.08.14.56.44;  author bcn;  state Exp;
branches ;
next     1.9;

1.9
date     85.11.08.12.44.42;  author spm;  state Exp;
branches ;
next     1.8;

1.8
date     85.11.05.17.01.46;  author spm;  state Exp;
branches ;
next     1.7;

1.7
date     85.11.03.20.13.47;  author bcn;  state Exp;
branches ;
next     1.6;

1.6
date     85.11.03.16.05.24;  author spm;  state Exp;
branches ;
next     1.5;

1.5
date     85.10.29.11.21.42;  author bcn;  state Exp;
branches ;
next     1.4;

1.4
date     85.10.23.17.11.36;  author spm;  state Exp;
branches ;
next     1.3;

1.3
date     85.10.18.15.22.30;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     85.10.16.11.55.43;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.10.10.11.08.49;  author bcn;  state Exp;
branches ;
next     ;


desc
@Initial RCS checkin
@


4.4
log
@fix debug
@
text
@/* 
 *  $Source: /u3/kerberos.new/lib/krb/RCS/cl_get_tgt.c,v $
 *  $Author: jtkohl $
 *  $Locker: jtkohl $
 * 
 * Copyright 1985,1986 by the Massachusetts Institute of Technology
 *
 */

#ifndef lint
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 4.3 87/10/20 17:03:32 jtkohl Locked $";
#endif  lint


#include <krb.h>
#include <prot.h>
#include <byteorder.h>
#include <des.h>

#include <stdio.h>
#include <errno.h>
#include <strings.h>

/* use the bsd time.h struct defs for PC too!                              */
#include <sys/time.h>
#include <sys/types.h>

extern  int krb_debug;
extern	C_Block_print();

static struct  timeval t_local = { 0, 0 };
    
int				swap_bytes;
unsigned long	rep_err_code;

/* 
 * cl_get_tgt takes a username, and instance, and the realm for which
 * a ticket granting tickets is desired.  It then contacts the
 * appropriate kerberos in order to get a set of credentials for
 * that user.  When it has obtained the credentials it asks the 
 * user for a password which it uses to decrypt them.  If successful 
 * it save them for use by further applications.
 */
cl_get_tgt(user,instance,realm)
char    *user;
char	*instance;
char	*realm;
{
    KTEXT           pkt;		/* Packet to KDC	*/
    static KTEXT_ST rpkt_st;
    KTEXT           rpkt = &rpkt_st;	/* Returned packet	*/
    static KTEXT_ST cip_st;
    KTEXT           cip = &cip_st;	/* Returned Ciphertext	*/
    static KTEXT_ST tkt_st;
    KTEXT           tkt = &tkt_st;	/* Current ticket	*/
    C_Block         ses;		/* Session key for tkt	*/
    int             lifetime;		/* Lifetime for tkt	*/
    int             kvno;		/* Kvno for session key	*/
    char	    trealm[REALM_SZ];		
    C_Block         key;	/* Key for decrypting cipher	*/
    Key_schedule    key_s;	

    FILE    *fp;
    char    *tfile = CL_GTGT_INIT_FILE;
    char    s_name[SNAME_SZ];
    char    s_instance[INST_SZ];
    int     n = 0;
    int	    msg_byte_order;
    long    exp_date;
    
    /* open and read the file defining the initial ticket request          */

    if ( ( fp = fopen(tfile,"r")) == (FILE *) NULL)
        {
        fprintf(stderr,"cant find kerberos login init file %s",tfile);
        exit(-1);
        }

    /* Create skeleton of packet to be sent */
    (void) gettimeofday(&t_local,(struct timezone *) 0);
    pkt = create_packet_to_kdc(user,instance,realm,t_local.tv_sec);

    /* scan the init file, adding requests                                 */
    while ( fscanf(fp,"%s %s %d",s_name,s_instance,&lifetime) != EOF)
        {
        n++;
        if (krb_debug) printf("\n%s %s %d",s_name,s_instance,lifetime); 
        /* see if we want to substitute users login name                   */
        if (!strcmp("~",s_instance))
		(void) strcpy(s_instance,user);
        /* see if we want to substitute host name * TODO                   */
        add_request(pkt,lifetime,s_name,s_instance);
        }
    if (krb_debug)  printf("\nEOF\n");
    
    rpkt->length = 0;

    /* Send the packet */
    if (send_to_kdc(pkt, rpkt, (char *)NULL)) exit(-1); 

    /* check packet version of the returned packet */
    if (pkt_version(rpkt) != KRB_PROT_VERSION )
        {
        fprintf(stderr,"Bad reply protocol version %d",pkt_version(rpkt));
		exit(-1);
        }
        
    /* Check byte order */
    msg_byte_order = pkt_msg_type(rpkt) & 1;
    swap_bytes = 0;
	if (msg_byte_order != HOST_BYTE_ORDER )
        {
		swap_bytes++;
	  	}
	
	switch (pkt_msg_type(rpkt) & ~1)
		{
		case AUTH_MSG_KDC_REPLY: break;
		case AUTH_MSG_ERR_REPLY:
			{
			bcopy(pkt_err_code(rpkt),
			      (char *)&rep_err_code, 4);
			if (swap_bytes) swap_u_long(rep_err_code)
			printf("%s code %u\n",pkt_err_text(rpkt),
					rep_err_code);
			exit(-1);
			}
		
		default:
			{
			printf("\nWrong msg type received %d",pkt_msg_type(rpkt));
			exit(-1);
			}
		}
	
	/*  get the principal's expiration date								   */
	bcopy(pkt_x_date(rpkt),(char *) &exp_date, sizeof(exp_date));
	if (swap_bytes) swap_u_long(exp_date);

	if ((exp_date - t_local.tv_sec) <(3600*24*45))
		{
		printf("\n\07\07NOTE-- Kerberos authentication expires %s\n\n",
			stime(&exp_date));
			}

	
    /* Extract the ciphertext */
    cip->length = pkt_clen(rpkt);	/* let clen do the swap				   */

    bcopy((char *)pkt_cipher(rpkt),(char *)(cip->dat),cip->length);

    /* Attempt to decrypt it */
    read_password(key,"\Password: ",0);
    key_sched(key,key_s);
    if (krb_debug)  printf("About to do decryption ...");
    pcbc_encrypt((C_Block *)cip->dat,(C_Block *)cip->dat,
		 (long) cip->length,key_s,key,0);
    /* Get rid of all traces of key */
    bzero((char *)key,sizeof(key));
    bzero((char *)key_s,sizeof(key_s));
    if (krb_debug) printf(" Done.\n");

    if (krb_debug) printf("Initializing ticket store ...");
    if (in_tkt(user,instance) != KSUCCESS)
	    return -1;

    /*  sanity check the decrypted cipher                                  */
    if (check_cipher(cip,n,(unsigned long)(t_local.tv_sec))) 
        {
        return -1;
        }
    else
        {
        printf("\nPassword OK.");
        }   

    
    if (krb_debug)
        {
        printf(" Done.\n");
        printf("Received tickets for ...");
        (void) fflush(stdout);
        }
    
    /* re-scan the init file, extract tickets                              */
    n =0;
    rewind(fp);
    while ( fscanf(fp,"%s %s %d",s_name,s_instance,&lifetime) != EOF)
        {
        /* see if we want to substitute users login name                   */
        if (!strcmp("~",s_instance))
		(void) strcpy(s_instance,user);
        /* see if we want to substitute host name * TODO                   */
        n++;
        bzero((char *)ses,sizeof(ses));
        lifetime = 0;
        kvno = 0;
        tkt->length = 0;
        extract_ticket(cip,n,(char *)ses,&lifetime,&kvno,trealm,tkt);
        store(s_name,s_instance,"",ses,lifetime,kvno,tkt,t_local.tv_sec); 

        if ((tkt->length == 0))
            {
#ifdef  BSD42
        printf("\n    %-10s %-10s life %d, key ver %d, tick len %d\n\t\tsess key ",
                s_name,s_instance, lifetime, kvno,tkt->length);
#endif
#ifdef  PC
        printf("\n    %s %s life %d, key ver %d, tick len %d\n\t\tsess key ",
                s_name,s_instance, lifetime, kvno,tkt->length);
#endif            printf("Null ticket returned");
            }
        }

    if (krb_debug) printf("\nEOF\nDone.");
    printf("\n");
    (void) fclose(fp); 
    return 0;
}


@


4.3
log
@lint fixes
@
text
@d3 1
a3 1
 *  $Author: steiner $
d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 4.2 87/09/10 16:19:58 jtkohl Locked $";
d28 1
a28 1
extern  debug;
d87 1
a87 1
        if (debug) printf("\n%s %s %d",s_name,s_instance,lifetime); 
d94 1
a94 1
    if (debug)  printf("\nEOF\n");
d121 1
a121 1
			bcopy((char *)pkt_err_code(rpkt),
d137 1
a137 1
	bcopy((char *)pkt_x_date(rpkt),(char *) &exp_date, sizeof(exp_date));
d155 1
a155 1
    if (debug)  printf("About to do decryption ...");
d161 1
a161 1
    if (debug) printf(" Done.\n");
d163 1
a163 1
    if (debug) printf("Initializing ticket store ...");
d178 1
a178 1
    if (debug)
d215 1
a215 1
    if (debug) printf("\nEOF\nDone.");
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d2 1
a2 1
 *  $Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/cl_get_tgt.c,v $
d4 1
a4 1
 *  $Locker: steiner $
d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 4.1 87/09/01 15:45:49 steiner Locked $";
d17 1
d22 1
d31 1
a31 2
struct  timeval t_local = { 0, 0 };
struct  timezone tz = { 0, 0 };
a48 1
    int             rlen;
d63 1
a63 1
    FILE    *fopen(),*fp;
a67 2
    int     i = 0;
    int     j =0;
d69 1
a69 1
	unsigned long	exp_date;
d73 1
a73 1
    if ( ( fp = fopen(tfile,"r")) == NULL)
d80 1
a80 1
    gettimeofday(&t_local,&tz);
d89 2
a90 1
        if (!strcmp("~",s_instance)) strcpy(s_instance,user);
d99 1
a99 1
    if (send_to_kdc(pkt, rpkt)) exit(-1); 
d121 2
a122 1
			bcopy(pkt_err_code(rpkt),&rep_err_code,4);
d137 1
a137 1
	bcopy(pkt_x_date(rpkt),&exp_date,sizeof(exp_date));
d150 1
a150 1
    bcopy(pkt_cipher(rpkt),cip->dat,cip->length);
d156 2
a157 1
    pcbc_encrypt(cip->dat,cip->dat,(long) cip->length,key_s,key,0);
d159 2
a160 2
    bzero(key,sizeof(key));
    bzero(key_s,sizeof(key_s));
d164 2
a165 1
    in_tkt(user,instance);
d168 1
a168 1
    if (check_cipher(cip,n,t_local.tv_sec)) 
d182 1
a182 1
        fflush(stdout);
d191 2
a192 1
        if (!strcmp("~",s_instance)) strcpy(s_instance,user);
d195 1
a195 1
        bzero(ses,sizeof(ses));
d199 1
a199 1
        extract_ticket(cip,n,ses,&lifetime,&kvno,trealm,tkt);
d217 1
a217 1
    fclose(fp); 
@


4.1
log
@No change; starting version 4.
@
text
@d3 1
a3 1
 *  $Author: bcn $
d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 3.7 86/08/12 12:36:50 steiner Locked $";
d16 1
a16 1
#include "prot.h"
@


3.7
log
@Various changes made, but this routine has been retired and replaced by
get_intkt.c
@
text
@d2 3
a4 3
 *  $Source: /mit/projects/auth/src/lib/krb/RCS/cl_get_tgt.c,v $
 *  $Author: spm $
 *  $Locker:  $
d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 3.5 86/05/23 13:22:02 spm Exp $";
@


3.6
log
@fix &exp_date
@
text
@d140 1
a140 1
	if ((t_local.tv_sec - exp_date) <(3600*24*30))
d142 1
a142 1
		printf("\n\07\07NOTE-- Kerberos authentication expires %s",
d172 1
a172 1
        printf("\nOK - received tickets for:");
d179 1
a179 1
        printf("Storing tickets ...");
d198 3
d208 1
a208 12
#endif
        if (tkt->length)
            {
            if (debug)
                {
				C_Block_print(ses);
                }
            else printf("ok");
            }
        else
            {
            printf("Null ticket returned");
@


3.5
log
@u_long ->unsigned long
@
text
@d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 3.3 86/05/14 15:26:55 spm Exp $";
d137 1
a137 1
	bcopy(pkt_x_date(rpkt),exp_date,sizeof(exp_date));
@


3.4
log
@add expiration date
@
text
@d71 1
a71 1
	u_long	exp_date;
@


3.3
log
@*** empty log message ***
@
text
@d4 1
a4 1
 *  $Locker: spm $
d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 3.2 86/04/04 17:53:43 spm Exp $";
d40 1
a40 1
 * user for a password which it sues to decrypt them.  If successful 
d71 1
d135 11
@


3.2
log
@change key to C_Block
@
text
@d3 1
a3 1
 *  $Author: bcn $
d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 3.1 86/03/28 10:38:43 bcn Exp $";
d17 1
a17 1
#include "des.h"
d27 1
d187 1
a187 1
        printf("\n    %-10s %-10s life %d, key ver %d, tick len %d ",
d191 1
a191 1
        printf("\n    %s %s life %d, key ver %d, tick len %d ",
d198 1
a198 6
#ifdef  BSD42
                printf("Key 0x%08x%08x",*((long *) ses),*((long *) &ses[1]));
#endif
#ifdef  PC
                printf("Key 0x%08X%08X",*((long *) ses),*((long *) &ses[1]));
#endif
d200 1
a200 1
            else printf("Sess key ok");
@


3.1
log
@Update to protocol revision 3.
in_tkt now takes an instance.
@
text
@d3 2
a4 2
 *  $Author: spm $
 *  $Locker: bcn $
d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 1.23 86/03/25 15:54:07 spm Exp $";
d17 1
a17 1
#include "/projects/auth/include/des.h"
d55 1
a55 1
    char            ses[8];		/* Session key for tkt	*/
@


1.23
log
@add byte order, alignment, err messages
@
text
@d3 2
a4 2
 *  $Author: bcn $
 *  $Locker: spm $
d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 1.22 86/03/21 15:53:36 bcn Exp $";
d150 1
a150 1
    in_tkt(user);
@


1.22
log
@More changes toward prot rev 3.
@
text
@d3 2
a4 2
 *  $Author: spm $
 *  $Locker: bcn $
d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 1.21 86/03/14 15:34:44 spm Exp $";
d24 1
a25 1

d31 2
d97 1
a97 1
    /* Sen the packet */
d107 1
a107 1
    /* CHeck byte order */
d109 2
a110 1
    if (msg_byte_order != HOST_BYTE_ORDER )
d112 2
a113 5
	 /* not supported yet */
	 fprintf(stderr,"Alternate byte %d order not supported yet ",
	 msg_byte_order);
	 exit(-1);
  	}
d120 4
a123 2
			printf("\n%s code %u",pkt_err_text(rpkt),
					(pkt_err_code(rpkt)));
d135 2
a136 1
    cip->length = pkt_clen(rpkt);
@


1.21
log
@error reply message type
@
text
@d3 2
a4 5
 *  $Author: bcn $
 *  $Locker: spm $
 *      $Log:	cl_get_tgt.c,v $
 * Revision 1.20  86/03/13  14:48:56  bcn
 * Updated to prot rev 3.
d6 1
a6 2
 * 
 * Copyright 1985 by the Massachusetts Institute of Technology
d11 1
a11 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 1.20 86/03/13 14:48:56 bcn Exp $";
d46 3
a48 3
    PACKT           pkt;		/* Packet to KDC	*/
    static PKT_ST   rpkt_st;
    PACKT           rpkt = &rpkt_st;	/* Returned packet	*/
@


1.20
log
@Updated to prot rev 3.
@
text
@d3 2
a4 2
 *  $Author: spm $
 *  $Locker: bcn $
d6 2
d9 1
d15 1
a15 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 1.19 86/01/07 20:27:38 spm Exp $";
d123 6
@


1.19
log
@(long) ...length for pcbc_encrypt
@
text
@d4 1
a4 1
 *  $Locker:  $
a5 2
 * Revision 1.18  86/01/07  12:51:45  spm
 * changed cbc mode to pcbc mode
a6 56
 * Revision 1.17  85/11/26  11:45:18  spm
 * changed set_key to des_set_key
 * 
 * Revision 1.16  85/11/26  11:43:19  bcn
 * changed arg for in_tkt(user)
 * 
 * Revision 1.15  85/11/19  15:10:00  bcn
 * Moved into separate file to make ready for libkrb.  SOme
 * of the code was cleaned up and commented.
 * 
 * Revision 1.14  85/11/18  13:56:59  bcn
 * Add realm to arguments to store.
 * 
 * Revision 1.13  85/11/15  16:41:11  spm
 * check msg type, rev, and byte order
 * 
 * Revision 1.12  85/11/15  12:57:14  bcn
 * More fixes so it will work with prot version 2.
 * 
 * Revision 1.11  85/11/11  15:48:30  spm
 * change printing again.
 * 
 * Revision 1.10  85/11/08  14:56:44  bcn
 * Fix inconsistency with arguments in call to send_to_kdc.
 * 
 * Revision 1.9  85/11/08  12:44:42  spm
 * fixup time check
 * and messages
 * 
 * Revision 1.8  85/11/05  17:01:46  spm
 * read list of tickets from file and
 * fixup messages
 * 
 * Revision 1.7  85/11/03  20:13:47  bcn
 * Cleaned up some code and changed the initial tickets requested.
 * Fixed some bugs that were resulting in invalid tickets.
 * 
 * Revision 1.6  85/11/03  16:05:24  spm
 * I don't know (bcn)
 * 
 * Revision 1.5  85/10/29  11:21:42  bcn
 * Change mallocs to statics.
 * 
 * Revision 1.4  85/10/23  17:11:36  spm
 * add length to fprintf
 * 
 * Revision 1.3  85/10/18  15:22:30  spm
 * *** empty log message ***
 * 
 * Revision 1.2  85/10/16  11:55:43  spm
 * add password prompt
 * 
 * Revision 1.1  85/10/10  11:08:49  bcn
 * Initial revision
 * 
 *
d12 1
a12 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 1.18 86/01/07 12:51:45 spm Exp $";
d34 6
a39 4
 * cl_get_tgt takes an aname can contacts kerberos to get a set of
 * credentials for that user.  When it has obtained the credentials 
 * it asks the user for a password which it sues to decrypt them.
 * If successful it save them for use by further applications.
d41 1
a41 1
cl_get_tgt(user)
d43 2
d57 1
d80 1
a80 1
    pkt = create_packet_to_kdc(user,"",t_local.tv_sec);
d133 1
a133 1
    des_set_key(key,key_s);
d175 1
a175 1
        extract_ticket(cip,n,ses,&lifetime,&kvno,tkt);
@


1.18
log
@changed cbc mode to pcbc mode
@
text
@d4 1
a4 1
 *  $Locker: spm $
d6 3
d70 1
a70 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 1.17 85/11/26 11:45:18 spm Exp $";
d188 1
a188 1
    pcbc_encrypt(cip->dat,cip->dat,cip->length,key_s,key,0);
@


1.17
log
@changed set_key to des_set_key
@
text
@d3 1
a3 1
 *  $Author: bcn $
d6 3
d67 1
a67 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 1.16 85/11/26 11:43:19 bcn Exp $";
d185 1
a185 1
    cbc_encrypt(cip->dat,cip->dat,cip->length,key_s,key,0);
@


1.16
log
@changed arg for in_tkt(user)
@
text
@d4 1
a4 1
 *  $Locker: bcn $
d6 3
d64 1
a64 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 1.15 85/11/19 15:10:00 bcn Exp $";
d180 1
a180 1
    set_key(key,key_s);
@


1.15
log
@Moved into separate file to make ready for libkrb.  SOme
of the code was cleaned up and commented.
@
text
@d6 4
d61 1
a61 1
static char *rcsid_cl_get_tgt_c = "$Header: cl_get_tgt.c,v 1.14 85/11/18 13:56:59 bcn Exp $";
d186 1
a186 1
    in_tkt();
@


1.14
log
@Add realm to arguments to store.
@
text
@d2 2
a3 2
 *  $Source: /mit/projects/auth/src/client/RCS/client.c,v $
 *  $Author: spm $
d5 4
a8 1
 *      $Log:	client.c,v $
d57 1
a57 1
static char *rcsid_client_c = "$Header: client.c,v 1.13 85/11/15 16:41:11 spm Exp $";
d61 2
a62 2
#include "client.h"
#include "../kdc/prot.h"
a70 4
#ifndef TRUE
#define TRUE    1
#define FALSE   0
#endif
d72 1
a72 1
extern  debug ;
d77 7
a83 1
int 
a86 1

d88 1
a88 1
    PACKT           pkt;
d90 10
a99 18
    PACKT           rpkt = &rpkt_st;
    static TEXT_ST  cip_st;
    TEXT            cip = &cip_st;
    static TEXT_ST  tkt_st;
    TEXT            tkt = &tkt_st;
    char            ses[8];
    int             lifetime;
    int             kvno;
    C_Block         key;
    Key_schedule    key_s;
    
    /* Declarations used by scaffolding */
    TEXT            x = (TEXT)malloc(sizeof(TEXT_ST));
    char            a1[40];
    int             a2,a3;
    TEXT            a4 = (TEXT)malloc(sizeof(TEXT_ST));
    long            a5;
    /* End scaffolding */
a100 3

    /* open and read the file defining the initial ticket request          */

d102 3
a104 3
    char    *tfile = INIT_FILE;
    char    s_name[63];
    char    s_instance[63];
d108 1
a108 1
	int		msg_byte_order;
d110 2
d118 1
d136 1
d139 1
a139 1
    /* check packet version                                                */
a141 1
        /*  send an error reply                                */
d146 9
a154 10
	msg_byte_order = pkt_msg_type(rpkt) & 1;

	if (msg_byte_order != HOST_BYTE_ORDER )
		{
		/* not supported yet
		 */
		fprintf(stderr,"Alternate byte %d order not supported yet ",
		msg_byte_order);
		exit(-1);
		}
d167 1
d171 2
a172 1
    read_password(key,"\Password: ",FALSE);
d176 1
a250 51
check_cipher(c,n,t_sec)
    TEXT    c;
    int     n;
    unsigned long t_sec;
{
    int i;
    int j;
    int ok;
    int offset;
    char    *ptr;
    unsigned long   time_kdc;
    unsigned long   delta_t;

    i = * (unsigned char *) (c->dat);
    if (i >n) 
        {
        printf("\n\07\07Invalid Password (1)\n");
        return -1;
        }
    
    offset = sizeof(C_Block) + 2; /* fixed ticket overhead                 */
    offset *= i;
    offset += i+1;          /* count and length array                  */
    ptr = (c->dat) +1;
    for (j = 1; j<=i; j++)
        {
        if ((offset +sizeof (time_kdc)) > c->length) 
            {
            printf("\n\07\07Invalid Password (2)\n");
            return -1;
            }
        offset += *ptr++; /* add ion length array*/         
        }   
    time_kdc = *((unsigned long *) (offset + c->dat));
    delta_t = abs(time_kdc - t_sec);
#ifdef  BSD42
    if (debug) printf("\ntime_kdc = 0x%x time_ws = 0x%x diff = %d",
                time_kdc,t_sec,delta_t);
#endif
#ifdef  PC
    if (debug) printf("\ntime_kdc = 0x%X time_ws = 0x%X diff = %d",
                time_kdc,t_sec,delta_t);
#endif
    if (delta_t > 5*60) 
        {
        printf("\n\07\07Invalid Password or invalid local time\n");
        return -2; /* not close enough                 */
        }
    
    return 0;
}
@


1.13
log
@check msg type, rev, and byte order
@
text
@d3 2
a4 2
 *  $Author: bcn $
 *  $Locker: spm $
d6 3
d54 1
a54 1
static char *rcsid_client_c = "$Header: client.c,v 1.12 85/11/15 12:57:14 bcn Exp $";
d218 1
a218 1
        store(s_name,s_instance,ses,lifetime,kvno,tkt,t_local.tv_sec); 
@


1.12
log
@More fixes so it will work with prot version 2.
@
text
@d3 6
a8 3
 *  $Author: spm $
 *  $Locker:  $
 *      $Log:   client.c,v $
d51 1
a51 1
static char *rcsid_client_c = "$Header: client.c,v 1.11 85/11/11 15:48:30 spm Exp $";
d112 1
d139 30
@


1.11
log
@change printing again.
@
text
@d2 7
a8 4
 * 	$Source: /mit/projects/auth/src/client/RCS/client.c,v $
 * 	$Author: bcn $
 * 	$Locker:  $
 *    	$Log:	client.c,v $
d48 2
a49 2
static char *rcsid_client_c = "$Header: client.c,v 1.10 85/11/08 14:56:44 bcn Exp $";
#endif	lint
d59 1
a59 1
/* use the bsd time.h struct defs for PC too!							   */
d62 3
a64 3
#ifndef	TRUE
#define	TRUE	1
#define	FALSE	0
d67 1
a67 1
extern	debug ;
d69 3
a71 3
struct	timeval	t_local = { 0, 0 };
struct	timezone tz = {	0, 0 };
	
d74 1
a74 1
char	*user;
d77 21
a97 21
	int			rlen;
	PACKT			pkt;
	static PKT_ST		rpkt_st;
	PACKT			rpkt = &rpkt_st;
	static TEXT_ST		cip_st;
	TEXT			cip = &cip_st;
	static TEXT_ST		tkt_st;
	TEXT			tkt = &tkt_st;
	char			ses[8];
	int			lifetime;
	int			kvno;
	C_Block			key;
	Key_schedule		key_s;
	
	/* Declarations used by scaffolding */
	TEXT			x = (TEXT)malloc(sizeof(TEXT_ST));
	char			a1[40];
	int				a2,a3;
	TEXT			a4 = (TEXT)malloc(sizeof(TEXT_ST));
	long			a5;
	/* End scaffolding */
d100 1
a100 1
	/* open and read the file defining the initial ticket request		   */
d102 13
a114 13
	FILE	*fopen(),*fp;
	char	*tfile = INIT_FILE;
	char	s_name[63];
	char	s_instance[63];
	int		n = 0;
	int		i = 0;
	int		j =0;
	
	if ( ( fp = fopen(tfile,"r")) == NULL)
		{
		fprintf(stderr,"cant find kerberos login init file %s",tfile);
		exit(-1);
		}
d116 2
a117 2
	gettimeofday(&t_local,&tz);
	pkt = create_packet_to_kdc(user,t_local.tv_sec);
d119 13
a131 13
	/* scan the init file, adding requests								   */
	while ( fscanf(fp,"%s %s %d",s_name,s_instance,&lifetime) != EOF)
		{
		n++;
		if (debug) printf("\n%s %s %d",s_name,s_instance,lifetime);	
		/* see if we want to substitute users login name				   */
		if (!strcmp("~",s_instance)) strcpy(s_instance,user);
		/* see if we want to substitute host name * TODO				   */
		add_request(pkt,lifetime,s_name,s_instance);
		}
	if (debug)	printf("\nEOF\n");
	
	rpkt->length = 0;
d133 1
a133 1
	if (send_to_kdc(pkt, rpkt)) exit(-1); 
d135 2
a136 2
	cip->length = pkt_clen(rpkt);
	bcopy(pkt_cipher(rpkt),cip->dat,cip->length);
d138 7
a144 7
	read_password(key,"\Password: ",FALSE);
	set_key(key,key_s);
	if (debug)	printf("About to do decryption ...");
   	cbc_encrypt(cip->dat,cip->dat,cip->length,key_s,key,0);
	bzero(key,sizeof(key));
	bzero(key_s,sizeof(key_s));
	if (debug) printf(" Done.\n");
d146 2
a147 2
	if (debug) printf("Initializing ticket store ...");
	in_tkt();
d149 9
a157 9
	/*  sanity check the decrypted cipher								   */
	if (check_cipher(cip,n,t_local.tv_sec))	
		{
		return -1;
		}
	else
		{
		printf("\nOK - received tickets for:");
		}	
d159 26
a184 26
	
	if (debug)
		{
		printf(" Done.\n");
		printf("Storing tickets ...");
		fflush(stdout);
		}
	
	/* re-scan the init file, extract tickets							   */
	n =0;
	rewind(fp);
	while ( fscanf(fp,"%s %s %d",s_name,s_instance,&lifetime) != EOF)
		{
		/* see if we want to substitute users login name				   */
		if (!strcmp("~",s_instance)) strcpy(s_instance,user);
		/* see if we want to substitute host name * TODO				   */
		n++;
		bzero(ses,sizeof(ses));
		lifetime = 0;
		kvno = 0;
		tkt->length = 0;
		extract_ticket(cip,n,ses,&lifetime,&kvno,tkt);
		store(s_name,s_instance,ses,lifetime,kvno,tkt,t_local.tv_sec); 
#ifdef	BSD42
		printf("\n    %-10s %-10s life %d, key ver %d, tick len %d ",
				s_name,s_instance, lifetime, kvno,tkt->length);
d186 3
a188 3
#ifdef	PC
		printf("\n    %s %s life %d, key ver %d, tick len %d ",
				s_name,s_instance, lifetime, kvno,tkt->length);
d190 6
a195 6
		if (tkt->length)
			{
			if (debug)
				{
#ifdef	BSD42
				printf("Key 0x%08x%08x",*((long *) ses),*((long *) &ses[1]));
d197 2
a198 2
#ifdef	PC
				printf("Key 0x%08X%08X",*((long *) ses),*((long *) &ses[1]));
d200 8
a207 8
				}
			else printf("Sess key ok");
			}
		else
			{
			printf("Null ticket returned");
			}
		}
d209 4
a212 4
	if (debug) printf("\nEOF\nDone.");
	printf("\n");
	fclose(fp);	
	return 0;
d217 3
a219 3
	TEXT	c;
	int		n;
	unsigned long t_sec;
d221 7
a227 7
	int	i;
	int j;
	int ok;
	int	offset;
	char	*ptr;
	unsigned long	time_kdc;
	unsigned long	delta_t;
d229 25
a253 25
	i = * (unsigned char *) (c->dat);
	if (i >n) 
		{
		printf("\n\07\07Invalid Password");
		return -1;
		}
	
	offset = sizeof(C_Block) + 2; /* fixed ticket overhead				   */
	offset *= i;
	offset += i+1;			/* count and length array				   */
	ptr = (c->dat) +1;
	for (j = 1; j<=i; j++)
		{
		if ((offset +sizeof (time_kdc)) > c->length) 
			{
			printf("\n\07\07Invalid Password");
			return -1;
			}
		offset += *ptr++; /* add ion length array*/			
		}	
	time_kdc = *((unsigned long *) (offset + c->dat));
	delta_t = abs(time_kdc - t_sec);
#ifdef	BSD42
	if (debug) printf("\ntime_kdc = 0x%x time_ws = 0x%x diff = %d",
				time_kdc,t_sec,delta_t);
d255 3
a257 3
#ifdef	PC
	if (debug) printf("\ntime_kdc = 0x%X time_ws = 0x%X diff = %d",
				time_kdc,t_sec,delta_t);
d259 7
a265 7
	if (delta_t > 5*60) 
		{
		printf("\n\07\07Invalid Password or invalid local time");
		return -2; /* not close enough				   */
		}
	
	return 0;
@


1.10
log
@Fix inconsistency with arguments in call to send_to_kdc.
@
text
@d3 2
a4 2
 * 	$Author: spm $
 * 	$Locker: bcn $
d6 3
d45 1
a45 1
static char *rcsid_client_c = "$Header: client.c,v 1.9 85/11/08 12:44:42 spm Exp $";
d64 1
a64 1
int	debug = 0;
d120 1
a120 1
		if (debug) fprintf(stdout,"\n%s %s %d",s_name,s_instance,lifetime);	
d126 1
a126 1
	if (debug)	fprintf(stdout,"\nEOF\n");
d180 1
a180 1
		printf("\n%-10s %-10s life %d, key ver %d, ticket len %d ",
d184 1
a184 1
		printf("\n%s %s life %d, key ver %d, ticket len %d ",
d198 1
a198 1
			else printf("Session key ok");
d206 2
a207 1
	if (debug) fprintf(stdout,"\nEOF\nDone.\n");
@


1.9
log
@fixup time check
and messages
@
text
@d4 1
a4 1
 * 	$Locker: spm $
d6 4
d42 1
a42 1
static char *rcsid_client_c = "$Header: client.c,v 1.8 85/11/05 17:01:46 spm Exp $";
d127 1
a127 1
	if (send_to_kdc(pkt, rpkt->dat, &(rpkt->length))) exit(-1); 
@


1.8
log
@read list of tickets from file and
fixup messages
@
text
@d3 1
a3 1
 * 	$Author: bcn $
d6 4
d38 1
a38 1
static char *rcsid_client_c = "$Header: client.c,v 1.7 85/11/03 20:13:47 bcn Exp $";
d49 1
a49 2
#ifdef PC
#else
d51 4
d57 1
a57 1
int	debug = 1;
d59 3
a77 1
	long			tm;
d106 2
a107 2
	time(&tm);
	pkt = create_packet_to_kdc(user,tm);
d114 3
d140 1
a140 1
	if (check_cipher(cip,n,tm))	
d146 1
a146 1
		printf("\nOK.");
d162 3
d171 10
a180 3
		store(s_name,s_instance,ses,lifetime,kvno,tkt,7); 
		/* 7 should be issue date */
		if (debug)
d182 1
a182 2
			printf("\n%-10s %-10s ",s_name,s_instance);
			if (tkt->length)
d185 1
a185 3
				printf("Key 0x%08x%08x, life %d, kvno %d, len %d",
					*((long *) ses),*((long *) &ses[1]), lifetime,
				 	kvno,tkt->length);
d188 1
a188 3
				printf("Key 0x%08X%08X, life %d, kvno %d, length %d",
					*((long *) ses),*((long *) &ses[1]), lifetime,
				 	kvno,tkt->length);
d191 1
a191 4
			else
				{
				printf("Null ticket returned");
				}
d193 4
d205 1
a205 1
check_cipher(c,n,tm)
d208 1
a208 1
	unsigned long tm;
d239 2
a240 1
	delta_t = abs(time_kdc - tm);
d242 6
a247 1
				time_kdc,tm,delta_t);
@


1.7
log
@Cleaned up some code and changed the initial tickets requested.
Fixed some bugs that were resulting in invalid tickets.
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d6 4
d34 1
a34 1
static char *rcsid_client_c = "$Header: client.c,v 1.5 85/10/29 11:21:42 bcn Exp $";
d50 1
a50 2
#define	TRUE	1
#define	FALSE	0
d52 1
a52 3
int	debug = 0;

struct packet *
d81 16
d99 10
a108 3
	add_request(pkt,INITIAL_TGT_LIFETIME,TICKET_GRANTING_TICKET,KRB_TBLHST);
/*	add_request(pkt,4,"test",user); */
	add_request(pkt,16,"tftp","menelaus");
d111 1
a111 1
	send_to_kdc(pkt, rpkt->dat, &(rpkt->length)); 
d118 1
a118 1
	printf("About to do decryption ...");
d122 1
a122 1
	printf(" Done.\n");
d124 1
a124 1
	printf("Initializing ticket store ...");
a125 1
	printf(" Done.\n");
d127 9
a135 5
	printf("Storing tickets ...");
	fflush(stdout);
	extract_ticket(cip,1,ses,&lifetime,&kvno,tkt);
	store(TICKET_GRANTING_TICKET,"",ses,lifetime,kvno,tkt,7); 
	/* 7 should be issue date */
d137 26
a162 9
/*	extract_ticket(cip,2,ses,&lifetime,&kvno,tkt);
	store("test","instance",ses,lifetime,kvno,tkt,13); */

	extract_ticket(cip,2,ses,&lifetime,&kvno,tkt);
	printf("Incomming ticket length: %d\n",tkt->length);
	store("tftp","menelaus",ses,lifetime,kvno,tkt,12); 
	printf(" Done.\n");

	retrieve(TICKET_GRANTING_TICKET,"",a1,&a2,&a3,a4,&a5);
d164 3
a166 5
	printf("Key 0x%08x%08x, life %d, kvno %d, length %d\n",*((long *) a1),
	*((long *) &a1[4]), a2,a3,a4->length);
	retrieve("tftp","menelaus",a1,&a2,&a3,a4,&a5);
	printf("Key 0x%08x%08x, life %d, kvno %d, length %d\n",*((long *) a1),
	*((long *) &a1[4]),a2,a3,a4->length);
d169 3
a171 5
	printf("Key 0x%08X%08X, life %d, kvno %d, length %d\n",*((long *) a1),
	*((long *) &a1[4]), a2,a3,a4->length);
	retrieve("tftp","menelaus",a1,&a2,&a3,a4,&a5);
	printf("Key 0x%08X%08X, life %d, kvno %d, length %d\n",*((long *) a1),
	*((long *) &a1[4]),a2,a3,a4->length);
d173 11
a183 1
	return(rpkt);
d187 45
@


1.6
log
@I don't know (bcn)
@
text
@d4 1
a4 1
 * 	$Locker: spm $
d6 3
d83 1
a83 1
	add_request(pkt,4,"test",user);
d110 3
d114 2
a115 4
	store("test","instance",ses,lifetime,kvno,tkt,7); 

	extract_ticket(cip,3,ses,&lifetime,&kvno,tkt);
	store("tftp","menelaus",ses,lifetime,kvno,tkt,7); 
a121 3
	retrieve("test2","inst2",a1,&a2,&a3,a4,&a5);
	printf("Key 0x%08x%08x, life %d, kvno %d, length %d\n",*((long *) a1),
	*((long *) &a1[4]),a2,a3,a4->length);
d129 1
a129 1
	retrieve("test2","inst2",a1,&a2,&a3,a4,&a5);
a131 3
	retrieve("test","instance",a1,&a2,&a3,a4,&a5);
	printf("Key 0x%08X%08X, life %d, kvno %d, length %d\n",*((long *) a1),
	*((long *) &a1[4]),a2,a3,a4->length,a4->dat);
@


1.5
log
@Change mallocs to statics.
@
text
@d3 2
a4 2
 * 	$Author: spm $
 * 	$Locker:  $
d6 3
d27 1
a27 1
static char *rcsid_client_c = "$Header: client.c,v 1.4 85/10/23 17:11:36 spm Exp $";
d71 1
a71 1
	int			a2,a3;
d81 1
a81 1
	add_request(pkt,16,"test2","inst2");
a88 3
#ifdef	notdef
	string_to_key("test",key);
#else
a89 1
#endif
d92 1
a92 1
     	cbc_encrypt(cip->dat,cip->dat,cip->length,key_s,key,0);
d94 1
d111 1
a111 1
	store("test2","inst2",ses,lifetime,kvno,tkt,7); 
d115 3
a117 2
	printf("Key 0x%08x%08x, life %d, kvno %d, length %d, %4s\n",*((long *) a1),
	*((long *) &a1[4]), a2,a3,a4->length,a4->dat);
d119 12
a130 2
	printf("Key 0x%08x%08x, life %d, kvno %d, length %d, %4s\n",*((long *) a1),
	*((long *) &a1[4]),a2,a3,a4->length,a4->dat);
d132 1
a132 1
	printf("Key 0x%08x%08x, life %d, kvno %d, length %d, %4s\n",*((long *) a1),
d134 1
@


1.4
log
@add length to fprintf
@
text
@d6 3
d24 1
a24 1
static char *rcsid_client_c = "$Header: client.c,v 1.3 85/10/18 15:22:30 spm Exp $";
d52 6
a57 3
	PACKT			rpkt;
	TEXT			cip = (TEXT) malloc(sizeof(TEXT_ST));
	TEXT			tkt = (TEXT) malloc(sizeof(TEXT_ST));
d79 1
a79 1
	rpkt = (PACKT) malloc(sizeof(PKT_ST));
@


1.3
log
@*** empty log message ***
@
text
@d6 3
d21 1
a21 1
static char *rcsid_client_c = "$Header: client.c,v 1.2 85/10/16 11:55:43 spm Exp $";
d109 2
a110 2
	printf("Key 0x%08x%08x, life %d, kvno %d, %4s\n",*((long *) a1),
	*((long *) &a1[4]), a2,a3,a4->dat);
d112 2
a113 2
	printf("Key 0x%08x%08x, life %d, kvno %d, %4s\n",*((long *) a1),
	*((long *) &a1[4]),a2,a3,a4->dat);
d115 2
a116 2
	printf("Key 0x%08x%08x, life %d, kvno %d, %4s\n",*((long *) a1),
	*((long *) &a1[4]),a2,a3,a4->dat);
@


1.2
log
@add password prompt
@
text
@d3 2
a4 2
 * 	$Author: bcn $
 * 	$Locker: spm $
d6 3
d18 1
a18 1
static char *rcsid_client_c = "$Header: client.c,v 1.1 85/10/10 11:08:49 bcn Exp $";
a82 1
	bzero(key,sizeof(key));
d85 1
@


1.1
log
@Initial revision
@
text
@d2 7
a8 4
 * 	$Source: $
 * 	$Author: $
 * 	$Locker: $
 *    	$Log:	 $
d15 1
a15 1
static char *rcsid_client_c = "$Header: $";
d31 3
d74 1
d76 3
d80 1
d90 1
@
