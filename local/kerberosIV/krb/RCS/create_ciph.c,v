head     4.9;
branch   ;
access   ;
symbols  PATCH8:4.8 PATCH7:4.8 KPATCH6:4.8 ASRSNAP1001:4.8 PATCH5:4.8 KPATCH4:4.8 KPATCH3:4.8 KPATCH2:4.7 KREL1:4.6 BETA5/24/88:4.4;
locks    ; strict;
comment  @ * @;


4.9
date     90.06.25.20.55.25;  author kfall;  state Exp;
branches ;
next     4.8;

4.8
date     89.05.18.21.24.26;  author jis;  state Exp;
branches ;
next     4.7;

4.7
date     89.03.22.14.40.01;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     88.12.05.15.19.56;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.11.11.14.37.03;  author jtkohl;  state Exp;
branches ;
next     4.4;

4.4
date     88.02.24.18.10.38;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     88.01.12.21.18.02;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.10.20.17.06.47;  author jtkohl;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.46.03;  author steiner;  state Exp;
branches ;
next     3.1;

3.1
date     86.08.12.12.29.56;  author bcn;  state Exp;
branches ;
next     ;


desc
@This routine creates the ciphertext for the simplified exchange
with the KDC.  Right now, it is used only for ticket granting
tickets, but it will be used for the initial exchenge in V4.
@


4.9
log
@include des.h
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/create_ciph.c,v $
 * $Author: jis $
 *
 * Copyright 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_create_ciph_c =
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/create_ciph.c,v 4.8 89/05/18 21:24:26 jis Exp Locker: kfall $";
#endif /* lint */

#include <mit-copyright.h>
#include <des.h>
#include <krb.h>
#include <strings.h>

/*
 * This routine is used by the authentication server to create
 * a packet for its client, containing a ticket for the requested
 * service (given in "tkt"), and some information about the ticket,
#ifndef NOENCRYPTION
 * all encrypted in the given key ("key").
#endif
 *
 * Returns KSUCCESS no matter what.
 *
 * The length of the cipher is stored in c->length; the format of
 * c->dat is as follows:
 *
 * 			variable
 * type			or constant	   data
 * ----			-----------	   ----
 * 
 * 
 * 8 bytes		session		session key for client, service
 * 
 * string		service		service name
 * 
 * string		instance	service instance
 * 
 * string		realm		KDC realm
 * 
 * unsigned char	life		ticket lifetime
 * 
 * unsigned char	kvno		service key version number
 * 
 * unsigned char	tkt->length	length of following ticket
 * 
 * data			tkt->dat	ticket for service
 * 
 * 4 bytes		kdc_time	KDC's timestamp
 *
 * <=7 bytes		null		   null pad to 8 byte multiple
 *
 */

create_ciph(c, session, service, instance, realm, life, kvno, tkt,
	    kdc_time, key)
    KTEXT           c;		/* Text block to hold ciphertext */
    C_Block         session;	/* Session key to send to user */
    char            *service;	/* Service name on ticket */
    char            *instance;	/* Instance name on ticket */
    char            *realm;	/* Realm of this KDC */
    unsigned long   life;	/* Lifetime of the ticket */
    int             kvno;	/* Key version number for service */
    KTEXT           tkt;	/* The ticket for the service */
    unsigned long   kdc_time;	/* KDC time */
    C_Block         key;	/* Key to encrypt ciphertext with */
{
    char            *ptr;
    Key_schedule    key_s;

    ptr = (char *) c->dat;

    bcopy((char *) session, ptr, 8);
    ptr += 8;

    (void) strcpy(ptr,service);
    ptr += strlen(service) + 1;

    (void) strcpy(ptr,instance);
    ptr += strlen(instance) + 1;

    (void) strcpy(ptr,realm);
    ptr += strlen(realm) + 1;

    *(ptr++) = (unsigned char) life;
    *(ptr++) = (unsigned char) kvno;
    *(ptr++) = (unsigned char) tkt->length;

    bcopy((char *)(tkt->dat),ptr,tkt->length);
    ptr += tkt->length;

    bcopy((char *) &kdc_time,ptr,4);
    ptr += 4;

    /* guarantee null padded encrypted data to multiple of 8 bytes */
    bzero(ptr, 7);

    c->length = (((ptr - (char *) c->dat) + 7) / 8) * 8;

#ifndef NOENCRYPTION
    key_sched(key,key_s);
    pcbc_encrypt((C_Block *)c->dat,(C_Block *)c->dat,
		 (long) c->length,key_s,key,ENCRYPT);
#endif /* NOENCRYPTION */

    return(KSUCCESS);
}
@


4.8
log
@Null pad the cipher prior to encryption.
Programmer: jtkohl
Auditor: jis
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/create_ciph.c,v $
 * $Author: jtkohl $
d14 1
a14 1
"$Header: create_ciph.c,v 4.7 89/03/22 14:40:01 jtkohl Locked $";
d18 1
a19 1
#include <des.h>
@


4.7
log
@#ifdef NOENCRYPTION for comments
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: create_ciph.c,v 4.6 88/12/05 15:19:56 jtkohl Locked $";
d57 3
d101 3
@


4.6
log
@Added #ifdef NOENCRYPTION code (to send stuff
in the clear in case no DES library present).
Programmer: jtkohl
Auditor: steiner
@
text
@d3 1
a3 1
 * $Author: jtkohl $
d14 1
a14 1
"$Header: create_ciph.c,v 4.5 88/11/11 14:37:03 jtkohl Locked $";
d26 1
d28 1
@


4.5
log
@Programmer: Jennifer Steiner
Auditor: John Kohl
changes: documentation of the routine
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: create_ciph.c,v 4.4 88/02/24 18:10:38 steiner Exp $";
d99 1
d103 1
@


4.4
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: create_ciph.c,v 4.3 88/01/12 21:18:02 steiner Locked $";
d23 32
a54 1
 * create_ciph
d64 1
a64 1
    unsigned long   life;	/* Life time of the ticket */
@


4.3
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 2
a3 3
 *      $Source: /mit/kerberos/lib/krb/RCS/create_ciph.c,v $
 *      $Author: jtkohl $
 *      $Locker: steiner $
d5 2
a6 1
 * Copyright 1986 by the Massachusetts Institute of Technology
d8 2
d13 2
a14 2
static char *rcsid_create_ciptxt_c =
    "$Header: create_ciph.c,v 4.2 87/10/20 17:06:47 steiner Locked $";
d17 1
@


4.2
log
@lint fixes
@
text
@d1 4
a4 4
/* 
 * 	$Source: /u3/kerberos.new/lib/krb/RCS/create_ciph.c,v $
 * 	$Author: steiner $
 * 	$Locker: jtkohl $
d11 3
a13 2
static char *rcsid_create_ciptxt_c = "$Header: create_ciph.c,v 4.1 87/09/01 15:46:03 jtkohl Locked $";
#endif	lint
d15 3
a17 3
#include	<krb.h>
#include        <des.h>
#include	<strings.h>
d19 1
a19 1
/* 
d22 13
a34 12
 
create_ciph(c,session,service,instance,realm,life,kvno,tkt,kdc_time,key)
KTEXT		c;		/* Text block to hold ciphertext 	*/
C_Block		session;	/* Session key to be sent to user	*/
char		*service;	/* Service name on ticket		*/
char		*instance;	/* Instance name on ticket		*/
char		*realm;		/* Realm of this KDC			*/
unsigned long	life;		/* Liftime of the ticket		*/
int		kvno;		/* Key version number for service	*/
KTEXT		tkt;		/* The ticket for the service		*/
unsigned long	kdc_time;	/* KDC time				*/
C_Block		key;		/* Key in which to encrypt ciphertext	*/
d36 2
a37 2
        char		*ptr;
	Key_schedule	key_s;
d39 1
a39 1
	ptr = (char *) c->dat;
d41 2
a42 2
	bcopy((char *) session, ptr, 8);
	ptr += 8;
d44 2
a45 2
	(void) strcpy(ptr,service);
	ptr += strlen(service) + 1;
d47 2
a48 2
	(void) strcpy(ptr,instance);
	ptr += strlen(instance) + 1;
d50 2
a51 2
	(void) strcpy(ptr,realm);
	ptr += strlen(realm) + 1;
d53 3
a55 3
	*(ptr++) = (unsigned char) life;
	*(ptr++) = (unsigned char) kvno;
	*(ptr++) = (unsigned char) tkt->length;
d57 2
a58 2
	bcopy((char *)(tkt->dat),ptr,tkt->length);
	ptr += tkt->length;
d60 2
a61 2
	bcopy((char *) &kdc_time,ptr,4);
	ptr += 4;
d63 1
a63 1
	c->length = (((ptr - (char *) c->dat) + 7) / 8) * 8;
d65 5
a69 5
	key_sched(key,key_s);
	pcbc_encrypt((C_Block *)c->dat,(C_Block *)c->dat,
		     (long) c->length,key_s,key,ENCRYPT);
	
	return(KSUCCESS);
a70 1

@


4.1
log
@No change; starting version 4.
@
text
@d2 3
a4 3
 * 	$Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/create_ciph.c,v $
 * 	$Author: bcn $
 * 	$Locker: steiner $
d11 1
a11 1
static char *rcsid_create_ciptxt_c = "$Header: create_ciph.c,v 3.1 86/08/12 12:29:56 steiner Locked $";
d16 1
d39 1
a39 1
	bcopy(session,ptr,8);
d42 1
a42 1
	strcpy(ptr,service);
d45 1
a45 1
	strcpy(ptr,instance);
d48 1
a48 1
	strcpy(ptr,realm);
d55 1
a55 1
	bcopy(tkt->dat,ptr,tkt->length);
d58 1
a58 1
	bcopy(&kdc_time,ptr,4);
d64 2
a65 1
	pcbc_encrypt(c->dat,c->dat,c->length,key_s,key,ENCRYPT);
@


3.1
log
@*** empty log message ***
@
text
@d2 1
a2 1
 * 	$Source: /mit/projects/auth/src/lib/krb/RCS/create_cipher.c,v $
d4 1
a4 1
 * 	$Locker:  $
d11 1
a11 1
static char *rcsid_create_ciptxt_c = "$Header: create_cipher.c,v 3.2 86/04/04 18:08:34 spm Exp $";
@
