head     4.10;
branch   ;
access   ;
symbols  PATCH8:4.9 PATCH7:4.9 KPATCH6:4.9 ASRSNAP1001:4.9 PATCH5:4.9 KPATCH4:4.9 KPATCH3:4.9 KPATCH2:4.9 KREL1:4.9 BETA5/24/88:4.7;
locks    ; strict;
comment  @ * @;


4.10
date     90.06.25.20.55.28;  author kfall;  state Exp;
branches ;
next     4.9;

4.9
date     89.01.17.16.05.59;  author rfrench;  state Exp;
branches ;
next     4.8;

4.8
date     88.10.07.06.07.23;  author shanzer;  state Exp;
branches ;
next     4.7;

4.7
date     88.02.24.18.10.52;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     88.01.12.21.18.18;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     87.10.28.16.18.21;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.28.15.35.57;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.20.17.06.10;  author jtkohl;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.20.05;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.45.56;  author steiner;  state Exp;
branches ;
next     3.2;

3.2
date     86.04.04.17.06.33;  author spm;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.11.49.46;  author bcn;  state Exp;
branches ;
next     1.10;

1.10
date     85.11.20.11.56.35;  author bcn;  state Exp;
branches ;
next     1.9;

1.9
date     85.11.17.14.07.46;  author bcn;  state Exp;
branches ;
next     1.8;

1.8
date     85.11.15.16.39.20;  author spm;  state Exp;
branches ;
next     1.7;

1.7
date     85.11.15.12.19.57;  author spm;  state Exp;
branches ;
next     1.6;

1.6
date     85.11.15.12.12.36;  author bcn;  state Exp;
branches ;
next     1.5;

1.5
date     85.11.14.17.53.16;  author spm;  state Exp;
branches ;
next     1.4;

1.4
date     85.11.13.14.47.28;  author bcn;  state Exp;
branches ;
next     1.3;

1.3
date     85.11.11.15.59.51;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     85.10.16.12.17.49;  author bcn;  state Exp;
branches ;
next     1.1;

1.1
date     85.10.10.10.11.00;  author bcn;  state Exp;
branches ;
next     ;


desc
@Initial RCS checkin
@


4.10
log
@include des.h
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/create_death_packet.c,v $
 * $Author: rfrench $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_cr_death_packet_c =
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/create_death_packet.c,v 4.9 89/01/17 16:05:59 rfrench Exp Locker: kfall $";
#endif /* lint */

#include <mit-copyright.h>
#include <des.h>
#include <krb.h>
#include <prot.h>
#include <strings.h>

/*
 * This routine creates a packet to type AUTH_MSG_DIE which is sent to
 * the Kerberos server to make it shut down.  It is used only in the
 * development environment.
 *
 * It takes a string "a_name" which is sent in the packet.  A pointer
 * to the packet is returned.
 *
 * The format of the killer packet is:
 *
 * type			variable		data
 *			or constant
 * ----			-----------		----
 *
 * unsigned char	KRB_PROT_VERSION	protocol version number
 * 
 * unsigned char	AUTH_MSG_DIE		message type
 * 
 * [least significant	HOST_BYTE_ORDER		byte order of sender
 *  bit of above field]
 * 
 * string		a_name			presumably, name of
 * 						principal sending killer
 * 						packet
 */

#ifdef DEBUG
KTEXT
krb_create_death_packet(a_name)
    char *a_name;
{
    static KTEXT_ST pkt_st;
    KTEXT pkt = &pkt_st;

    unsigned char *v =  pkt->dat;
    unsigned char *t =  (pkt->dat+1);
    *v = (unsigned char) KRB_PROT_VERSION;
    *t = (unsigned char) AUTH_MSG_DIE;
    *t |= HOST_BYTE_ORDER;
    (void) strcpy((char *) (pkt->dat+2),a_name);
    pkt->length = 3 + strlen(a_name);
    return pkt;
}
#endif /* DEBUG */
@


4.9
log
@Programmer: jtkohl
Auditor: rfrench
Function only defined when DEBUG set
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/create_death_packet.c,v $
 * $Author: shanzer $
d14 1
a14 1
"$Header: create_death_packet.c,v 4.8 88/10/07 06:07:23 jtkohl Locked $";
d18 1
@


4.8
log
@Added Wonderfull comments
Programer: steiner
Auditor: shanzer
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: create_death_packet.c,v 4.7 88/02/24 18:10:52 steiner Exp $";
d48 3
a50 2
struct ktext *
create_death_packet(a_name)
d65 1
@


4.7
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: create_death_packet.c,v 4.6 88/01/12 21:18:18 steiner Locked $";
d24 22
a45 2
 * kerberos to make it shut down.  It is used only in the development
 * environment.
@


4.6
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 2
a3 3
 *      $Source: /mit/kerberos/lib/krb/RCS/create_death_packet.c,v $
 *      $Author: steiner $
 *      $Locker: steiner $
d5 2
a6 1
 * Copyright 1985,1986 by the Massachusetts Institute of Technology
d8 2
d14 1
a14 1
"$Header: create_death_packet.c,v 4.5 87/10/28 16:18:21 steiner Locked $";
d17 1
@


4.5
log
@Took out byteorder.h; that info is now in krb_conf.h.
@
text
@d1 4
a4 4
/* 
 * 	$Source: /u3/kerberos.new/lib/krb/RCS/cr_death_pkt.c,v $
 * 	$Author: steiner $
 * 	$Locker:  $
d11 3
a13 3
static char *rcsid_cr_death_packet_c = 
"$Header: cr_death_pkt.c,v 4.5 87/10/28 16:03:19 steiner Exp $";
#endif	lint
d15 3
a17 3
#include	<krb.h>
#include	<prot.h>
#include	<strings.h>
d20 3
a22 3
 * This routine creates a packet to type AUTH_MSG_DIE which is
 * sent to kerberos to make it shut down.  It is used only in
 * the development environment.
d24 1
d27 13
a39 11
char	*a_name;
{	static KTEXT_ST	pkt_st;
	KTEXT		pkt = &pkt_st;
	unsigned char *v =  pkt->dat;
	unsigned char *t =  (pkt->dat+1);
	*v = (unsigned char) KRB_PROT_VERSION;
	*t = (unsigned char) AUTH_MSG_DIE;
	*t |= HOST_BYTE_ORDER;
	(void) strcpy((char *) (pkt->dat+2),a_name); 
	pkt->length = 3 + strlen(a_name);
	return pkt;
a40 1

@


4.4
log
@jtkohl's changes.
@
text
@d2 3
a4 3
 * 	$Source: /paris/u3/kerberos.new/lib/krb/RCS/cr_death_pkt.c,v $
 * 	$Author: jtkohl $
 * 	$Locker: jtkohl $
d11 2
a12 1
static char *rcsid_cr_death_packet_c = "$Header: cr_death_pkt.c,v 4.3 87/10/20 17:06:10 jtkohl Locked $";
a16 1
#include	<byteorder.h>
@


4.3
log
@lint fixes
@
text
@d2 2
a3 2
 * 	$Source: /u3/kerberos.new/lib/krb/RCS/cr_death_pkt.c,v $
 * 	$Author: steiner $
d11 1
a11 1
static char *rcsid_cr_death_packet_c = "$Header: cr_death_pkt.c,v 4.2 87/09/10 16:20:05 jtkohl Locked $";
a17 2

extern	int	debug;
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d2 1
a2 1
 * 	$Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/cr_death_pkt.c,v $
d4 1
a4 1
 * 	$Locker: steiner $
d11 1
a11 1
static char *rcsid_cr_death_packet_c = "$Header: cr_death_pkt.c,v 4.1 87/09/01 15:45:56 steiner Locked $";
d16 2
d36 1
a36 1
	strcpy(pkt->dat+2,a_name); 
@


4.1
log
@No change; starting version 4.
@
text
@d3 1
a3 1
 * 	$Author: spm $
d11 1
a11 1
static char *rcsid_cr_death_packet_c = "$Header: cr_death_pkt.c,v 3.2 86/04/04 17:06:33 steiner Locked $";
d15 1
a15 1
#include	"prot.h"
@


3.2
log
@char changed to u_char
@
text
@d2 3
a4 3
 * 	$Source: /mit/projects/auth/src/lib/krb/RCS/cr_death_pkt.c,v $
 * 	$Author: bcn $
 * 	$Locker: spm $
d11 1
a11 1
static char *rcsid_cr_death_packet_c = "$Header: cr_death_pkt.c,v 3.1 86/03/28 11:49:46 bcn Exp $";
@


3.1
log
@Now supports rev 3 of kerberos protocol.
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d11 1
a11 1
static char *rcsid_cr_death_packet_c = "$Header: cr_death_pkt.c,v 1.10 85/11/20 11:56:35 bcn Exp $";
d29 4
a32 4
	char		*v =  pkt->dat;
	char		*t =  (pkt->dat+1);
	*v = (char) KRB_PROT_VERSION;
	*t = (char) AUTH_MSG_DIE;
@


1.10
log
@Moved out of prot.c and put into libkrb.
@
text
@a4 29
 *    	$Log:	cr_death_pkt.c,v $
 * Revision 1.9  85/11/17  14:07:46  bcn
 * Move definition of ONE to prot.h
 * 
 * Revision 1.8  85/11/15  16:39:20  spm
 * more byte order
 * 
 * Revision 1.7  85/11/15  12:19:57  spm
 * bcopy(tlist, ---> bcopy(tlist->dat,
 * 
 * Revision 1.6  85/11/15  12:12:36  bcn
 * *** empty log message ***
 * 
 * Revision 1.5  85/11/14  17:53:16  spm
 * more rev 2 protocol
 * 
 * Revision 1.4  85/11/13  14:47:28  bcn
 * Upgrade to protocol version 2.
 * 
 * Revision 1.3  85/11/11  15:59:51  spm
 * add debug global for printf
 * 
 * Revision 1.2  85/10/16  12:17:49  bcn
 * Fix problem dealing with 0 length tickets which
 * are returned when service not found.
 * 
 * Revision 1.1  85/10/10  10:11:00  bcn
 * Initial revision
 * 
d6 1
a6 1
 * Copyright 1985 by the Massachusetts Institute of Technology
d11 1
a11 1
static char *rcsid_cr_death_packet_c = "$Header: cr_death_pkt.c,v 1.9 85/11/17 14:07:46 bcn Exp $";
d14 1
d24 1
a24 1
struct packet *
d27 2
a28 1
{	struct packet	*pkt = (struct packet *) malloc(sizeof(struct packet));
@


1.9
log
@Move definition of ONE to prot.h
@
text
@d2 2
a3 2
 * 	$Source: /mit/projects/auth/src/kdc/RCS/prot.c,v $
 * 	$Author: spm $
d5 4
a8 1
 *    	$Log:	prot.c,v $
d40 1
a40 1
static char *rcsid_prot_c = "$Header: prot.c,v 1.8 85/11/15 16:39:20 spm Exp $";
d47 5
a51 4
/* Routines to obtain remaining fields from a packet */

/* Routines to create and modify a packet */

a52 61
create_packet_to_kdc(a_name,a_realm,time_ws)
char	*a_name;
char	*a_realm;
long	time_ws;
{	struct packet	*pkt = (struct packet *) malloc(sizeof(struct packet));
	char		*v =  pkt->dat;
	char		*t =  (pkt->dat+1);
	long		*tws;
	int		offset;
	*v = (char) KRB_PROT_VERSION;
	*t = (char) AUTH_MSG_KDC_REQUEST;
	*t |= HOST_BYTE_ORDER;
	strcpy(pkt->dat+2,a_name); 
	pkt->length = 3 + strlen(a_name);
	strcpy(pkt->dat+pkt->length,a_realm);
	pkt->length += 1 + strlen(a_realm);
	bcopy(&time_ws,pkt->dat+pkt->length,4);	/* timestamp 		*/
	pkt->length += 4;
	*(pkt->dat+(pkt->length)++) = (char) 0;	/* 0 tickets requested  */
	return pkt;
}


add_request(pkt,lifetime,s_name,instance)
struct packet	*pkt;
char		*s_name;
char		*instance;
{
	*(pkt->dat+pkt->length) = (char) lifetime;
	strcpy(pkt->dat+pkt->length+1,s_name);
	strcpy(pkt->dat+pkt->length+strlen(s_name)+2,instance);
	pkt->length += 3 + strlen(s_name) + strlen(instance);
        /* Increment n, the number of tickets requested */
	(*(pkt->dat+8+strlen(pkt_a_name(pkt))+strlen(pkt_a_realm(pkt))))++;
}

/* This procedure sets s_name, and instance to point to
   the corresponding fields from tne nth request in the packet.
   it returns the lifetime requested.  Garbage will be returned
   if there are less than n requests in the packet. */

get_request(pkt,n,s_name,instance)
struct packet	*pkt;
int		n;
char		**s_name;
char		**instance;
{
	char	*ptr = pkt->dat + 9 + strlen(pkt_a_name(pkt)) + strlen(pkt_a_realm(pkt));

	while (n-- > 1)
	     {
	      	ptr++;
		ptr += 1 + strlen(ptr);
		ptr += 1 + strlen(ptr);
	     }
	     *s_name = 1 + ptr;
	     *instance = 2 + ptr + strlen(*s_name);
	     return((int) *ptr);
}

struct packet *
a65 124
struct packet *
create_auth_reply(a_name,a_realm,time_ws,n,tlist,kvno,cipher)
char	*a_name;
char	*a_realm;
long	time_ws;
int	kvno;
int	n;
TEXT	tlist;
TEXT	cipher;
{	struct packet	*pkt = (struct packet *) malloc(sizeof(struct packet));
	char		*v =  pkt->dat;
	char		*t =  (pkt->dat+1);
	long		*tws;
	int		w_l;
	int		offset;
	*v = (char) KRB_PROT_VERSION;
	*t = (char) AUTH_MSG_KDC_REPLY;
	*t |= HOST_BYTE_ORDER;
	strcpy(pkt->dat+2,a_name); 
	pkt->length = 3 + strlen(a_name);
	strcpy(pkt->dat+pkt->length,a_realm); 
	pkt->length += 1 + strlen(a_realm);
	bcopy(&time_ws,pkt->dat+pkt->length,4);	/* timestamp 		*/
	pkt->length += 4;
	*(pkt->dat+(pkt->length)++) = (char) n;
	bcopy(tlist->dat,pkt->dat+pkt->length,tlist->length);
	pkt->length += tlist->length;
	*(pkt->dat+(pkt->length)++) = (char) kvno;
	w_l = cipher->length;
	bcopy(&w_l,pkt->dat+pkt->length,2);
	pkt->length += 2;
	bcopy(cipher->dat,pkt->dat+pkt->length,cipher->length);
	pkt->length += cipher->length;
	return pkt;
}

create_cipher(n,c)
int	n;
TEXT	c;
{
	char		*ptr;
	ptr = c->dat;
	*(ptr++) = (char) n;
	c->length = n + 1;
	while (n-- > 0)
		*(ptr++) = 0;
}

add_ticket(tlist,cipher,n,session,lifetime,sname,instance,kvno,ticket)
TEXT		tlist;
TEXT		cipher;
char		*sname;
char		*instance;
int		n;
char		*session;
int		lifetime;
int		kvno;
struct text	*ticket;
{
	*(tlist->dat+(tlist->length)++) = (char) lifetime;
	strcpy(tlist->dat+tlist->length,sname);
	tlist->length += 1 + strlen(sname);
	strcpy(tlist->dat+tlist->length,instance);
	tlist->length += 1 + strlen(instance);
	bcopy(session,cipher->dat+cipher->length,8);
	*(cipher->dat+cipher->length+8) = (char) lifetime;
	*(cipher->dat+cipher->length+9) = (char) kvno;
	bcopy(ticket->dat,cipher->dat+cipher->length+10,ticket->length);
	cipher->length += 10+ticket->length;
	*(cipher->dat+n) = ticket->length;
}

extract_ticket(cipher,n,session,lifetime,kvno,ticket)
struct text	*cipher;
int		n;
char		*session;
int		*lifetime;
int		*kvno;
struct text	*ticket;
{
	char	*ptr;
	int	i;
	ptr = cipher->dat;
	ptr = ptr + 1 + (int) *(cipher->dat);
	for(i=1;i<n;i++)
		ptr = ptr + 10 + (int) *(cipher->dat+i);
	bcopy(ptr,session,8);
	ptr += 8;
	*lifetime = *(ptr++);
	*kvno = *(ptr++);
	ticket->length = *(cipher->dat+n);
	if(ticket->length)
		bcopy(ptr,ticket->dat,ticket->length);
}

pkt_clen(pkt)       
PACKT	pkt;
{
	int	i;
	int	clen = 0;
	char	*ptr = pkt_a_realm(pkt) + 6 + strlen(pkt_a_realm(pkt));
	for (i=1;i<=pkt_no_req(pkt);i++)
		{ptr++;
		 ptr += 1 + strlen(ptr);
		 ptr += 1 + strlen(ptr);}
	clen = (int) *((short *) ++ptr);
	if (debug) printf("Clen is %d\n",clen);
	return(clen);
}

struct text *
pkt_cipher(packet)
PACKT	packet;
{
	int	i;
	int	clen = 0;
	char	*ptr = pkt_a_realm(packet) + 6 + strlen(pkt_a_realm(packet));
	for (i=1;i<=pkt_no_req(packet);i++)
		{ptr++;
		 ptr += 1 + strlen(ptr);
		 ptr += 1 + strlen(ptr);}
	ptr += 3;
	return((TEXT) ptr);
}
@


1.8
log
@more byte order
@
text
@d4 1
a4 1
 * 	$Locker: spm $
d6 3
d37 1
a37 1
static char *rcsid_prot_c = "$Header: prot.c,v 1.7 85/11/15 12:19:57 spm Exp $";
a42 2

int		ONE = 1;
@


1.7
log
@bcopy(tlist, ---> bcopy(tlist->dat,
@
text
@d3 1
a3 1
 * 	$Author: bcn $
d6 3
d34 1
a34 1
static char *rcsid_prot_c = "$Header: prot.c,v 1.6 85/11/15 12:12:36 bcn Exp $";
d41 1
a41 1
char	byte_order();
d59 1
a59 1
	*t |= byte_order();
d116 1
a116 1
	*t |= byte_order();
d139 1
a139 1
	*t |= byte_order();
a244 13
}


char	byte_order()
{
	static	unsigned int	n = 1;
	static	unsigned char	*ptr = (unsigned char *) &n;
	
	/*  lsb has low address, e.g. VAX									   */
	if (*ptr) return 0;

	/* else msb has low address, e.g. 68000*/		
	return 1;
@


1.6
log
@*** empty log message ***
@
text
@d3 2
a4 2
 * 	$Author: spm $
 * 	$Locker: bcn $
d6 3
d31 1
a31 1
static char *rcsid_prot_c = "$Header: prot.c,v 1.5 85/11/14 17:53:16 spm Exp $";
d144 1
a144 1
	bcopy(tlist,pkt->dat+pkt->length,tlist->length);
@


1.5
log
@more rev 2 protocol
@
text
@d3 2
a4 2
 * 	$Author: bcn $
 * 	$Locker: spm $
d6 3
d28 1
a28 1
static char *rcsid_prot_c = "$Header: prot.c,v 1.4 85/11/13 14:47:28 bcn Exp $";
d75 1
a75 1
	(*(pkt->dat+7+strlen(pkt->dat+2)))++;
d89 1
a89 1
	char	*ptr = pkt->dat + 8 + strlen(pkt_a_name(pkt)) + strlen(pkt_a_realm(pkt));
d217 1
a217 1
	for (i=1;i++;i<=pkt_no_req(pkt))
d221 1
a221 1
	bcopy(ptr,&clen,2);
d233 1
a233 1
	for (i=1;i++;i<=pkt_no_req(packet))
d237 1
a237 1
	ptr += 2;
@


1.4
log
@Upgrade to protocol version 2.
@
text
@d3 2
a4 2
 * 	$Author: spm $
 * 	$Locker:  $
d6 3
d25 1
a25 1
static char *rcsid_prot_c = "$Header: prot.c,v 1.3 85/11/11 15:59:51 spm Exp $";
d32 2
d50 1
d107 1
d130 1
d134 1
a134 1
	pkt->length += 1 + strlen(a_name);
d236 13
@


1.3
log
@add debug global for printf
@
text
@d3 2
a4 2
 * 	$Author: bcn $
 * 	$Locker: spm $
d6 3
d22 1
a22 1
static char *rcsid_prot_c = "$Header: prot.c,v 1.2 85/10/16 12:17:49 bcn Exp $";
d34 1
a34 1
create_packet_to_kdc(a_name,time_ws)
d36 1
d47 2
d80 1
a80 1
	char	*ptr = pkt->dat + 8 + strlen(pkt->dat+2);
d107 1
a107 1
create_auth_reply(a_name,time_ws,kvno,cipher)
d109 1
d112 3
a114 1
struct text	*cipher;
d125 2
d129 7
a135 1
	pkt->length += 3;
a137 2
	w_l = cipher->length;
	bcopy(&w_l,pkt->dat+strlen(pkt->dat+2)+8,2);
d141 1
a141 2
struct	text	*
create_cipher(n)
d143 1
a144 1
	struct text	*c = (struct text *) malloc(sizeof(struct text));
a150 1
	return c;
d153 5
a157 2
add_ticket(cipher,n,session,lifetime,kvno,ticket)
struct text	*cipher;
d164 5
d201 1
a201 1
struct packet	*pkt;
d203 1
d205 6
a210 2
	bcopy(pkt->dat+strlen(pkt->dat+2)+8,
	      &clen,2);
d213 15
@


1.2
log
@Fix problem dealing with 0 length tickets which
are returned when service not found.
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d6 4
d19 1
a19 1
static char *rcsid_prot_c = "$Header: prot.c,v 1.1 85/10/10 10:11:00 bcn Exp $";
a21 1

d24 2
d185 1
a185 1
	printf("Clen is %d\n",clen);
@


1.1
log
@Initial revision
@
text
@d2 7
a8 4
 * 	$Source: $
 * 	$Author: $
 * 	$Locker: $
 *    	$Log:	 $
d15 1
a15 1
static char *rcsid_prot_c = "$Header: $";
a168 1
	bcopy(ptr,ticket->dat,*(cipher->dat+n));
d170 2
@
