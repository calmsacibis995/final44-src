head     4.11;
branch   ;
access   ;
symbols  PATCH8:4.11 PATCH7:4.11 KPATCH6:4.11 ASRSNAP1001:4.11 PATCH5:4.11 KPATCH4:4.11 KPATCH3:4.11 KPATCH2:4.11 KREL1:4.10 BETA5/24/88:4.7;
locks    ; strict;
comment  @ * @;


4.11
date     89.03.22.14.43.23;  author jtkohl;  state Exp;
branches ;
next     4.10;

4.10
date     89.01.23.10.51.35;  author jtkohl;  state Exp;
branches ;
next     4.9;

4.9
date     88.12.05.15.20.41;  author steiner;  state Exp;
branches ;
next     4.8;

4.8
date     88.10.07.06.07.36;  author shanzer;  state Exp;
branches ;
next     4.7;

4.7
date     88.02.24.18.10.59;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     88.01.12.21.18.37;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     87.12.06.11.16.00;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.28.16.03.25;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.20.17.07.41;  author jtkohl;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.20.14;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.46.07;  author steiner;  state Exp;
branches ;
next     3.2;

3.2
date     86.05.14.14.47.09;  author bcn;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.09.30.39;  author bcn;  state Exp;
branches ;
next     1.14;

1.14
date     86.03.25.15.53.46;  author spm;  state Exp;
branches ;
next     1.13;

1.13
date     86.03.21.16.19.48;  author bcn;  state Exp;
branches ;
next     1.12;

1.12
date     86.01.07.20.22.59;  author spm;  state Exp;
branches ;
next     1.11;

1.11
date     86.01.07.12.40.27;  author spm;  state Exp;
branches ;
next     1.10;

1.10
date     85.11.26.11.40.13;  author spm;  state Exp;
branches ;
next     1.9;

1.9
date     85.11.17.20.45.56;  author bcn;  state Exp;
branches ;
next     1.8;

1.8
date     85.11.16.15.49.03;  author bcn;  state Exp;
branches ;
next     1.7;

1.7
date     85.11.13.14.45.27;  author bcn;  state Exp;
branches ;
next     1.6;

1.6
date     85.11.13.10.58.39;  author bcn;  state Exp;
branches ;
next     1.5;

1.5
date     85.10.23.17.13.00;  author spm;  state Exp;
branches ;
next     1.4;

1.4
date     85.10.23.14.45.16;  author bcn;  state Exp;
branches ;
next     1.3;

1.3
date     85.10.23.13.54.58;  author bcn;  state Exp;
branches ;
next     1.2;

1.2
date     85.10.18.13.58.31;  author bcn;  state Exp;
branches ;
next     1.1;

1.1
date     85.10.11.16.29.52;  author bcn;  state Exp;
branches ;
next     ;


desc
@Initial RCS checkin
@


4.11
log
@#ifdef NOENCRYPTION for comments
@
text
@/* 
 * $Source: /mit/kerberos/src/lib/krb/RCS/create_ticket.c,v $
 * $Author: jtkohl $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char rcsid_create_ticket_c[] =
"$Header: create_ticket.c,v 4.10 89/01/23 10:51:35 jtkohl Locked $";
#endif /* lint */

#include <mit-copyright.h>
#include <stdio.h>
#include <des.h>
#include <krb.h>
#include <prot.h>
#include <strings.h>

/*
 * Create ticket takes as arguments information that should be in a
 * ticket, and the KTEXT object in which the ticket should be
 * constructed.  It then constructs a ticket and returns, leaving the
 * newly created ticket in tkt.
#ifndef NOENCRYPTION
 * The data in tkt->dat is encrypted in the server's key.
#endif
 * The length of the ticket is a multiple of
 * eight bytes and is in tkt->length.
 *
 * If the ticket is too long, the ticket will contain nulls.
 * The return value of the routine is undefined.
 *
 * The corresponding routine to extract information from a ticket it
 * decomp_ticket.  When changes are made to this routine, the
 * corresponding changes should also be made to that file.
 *
 * The packet is built in the following format:
 * 
 * 			variable
 * type			or constant	   data
 * ----			-----------	   ----
 *
 * tkt->length		length of ticket (multiple of 8 bytes)
 * 
#ifdef NOENCRYPTION
 * tkt->dat:
#else
 * tkt->dat:		(encrypted in server's key)
#endif
 * 
 * unsigned char	flags		   namely, HOST_BYTE_ORDER
 * 
 * string		pname		   client's name
 * 
 * string		pinstance	   client's instance
 * 
 * string		prealm		   client's realm
 * 
 * 4 bytes		paddress	   client's address
 * 
 * 8 bytes		session		   session key
 * 
 * 1 byte		life		   ticket lifetime
 * 
 * 4 bytes		time_sec	   KDC timestamp
 * 
 * string		sname		   service's name
 * 
 * string		sinstance	   service's instance
 * 
 * <=7 bytes		null		   null pad to 8 byte multiple
 *
 */

int krb_create_ticket(tkt, flags, pname, pinstance, prealm, paddress,
		  session, life, time_sec, sname, sinstance, key)
    KTEXT   tkt;                /* Gets filled in by the ticket */
    unsigned char flags;        /* Various Kerberos flags */
    char    *pname;             /* Principal's name */
    char    *pinstance;         /* Principal's instance */
    char    *prealm;            /* Principal's authentication domain */
    long    paddress;           /* Net address of requesting entity */
    char    *session;           /* Session key inserted in ticket */
    short   life;               /* Lifetime of the ticket */
    long    time_sec;           /* Issue time and date */
    char    *sname;             /* Service Name */
    char    *sinstance;         /* Instance Name */
    C_Block key;                /* Service's secret key */
{
    Key_schedule key_s;
    register char *data;        /* running index into ticket */

    tkt->length = 0;            /* Clear previous data  */
    flags |= HOST_BYTE_ORDER;   /* ticket byte order   */
    bcopy((char *) &flags,(char *) (tkt->dat),sizeof(flags));
    data = ((char *)tkt->dat) + sizeof(flags);
    (void) strcpy(data, pname);
    data += 1 + strlen(pname);
    (void) strcpy(data, pinstance);
    data += 1 + strlen(pinstance);
    (void) strcpy(data, prealm);
    data += 1 + strlen(prealm);
    bcopy((char *) &paddress, data, 4);
    data += 4;

    bcopy((char *) session, data, 8);
    data += 8;
    *(data++) = (char) life;
    /* issue time */
    bcopy((char *) &time_sec, data, 4);
    data += 4;
    (void) strcpy(data, sname);
    data += 1 + strlen(sname);
    (void) strcpy(data, sinstance);
    data += 1 + strlen(sinstance);

    /* guarantee null padded ticket to multiple of 8 bytes */
    bzero(data, 7);
    tkt->length = ((data - ((char *)tkt->dat) + 7)/8)*8;

    /* Check length of ticket */
    if (tkt->length > (sizeof(KTEXT_ST) - 7)) {
        bzero(tkt->dat, tkt->length);
        tkt->length = 0;
        return KFAILURE /* XXX */;
    }

#ifndef NOENCRYPTION
    /* Encrypt the ticket in the services key */        
    key_sched(key,key_s);
    pcbc_encrypt((C_Block *)tkt->dat,(C_Block *)tkt->dat,
                 (long) tkt->length,key_s,key,1);
#endif /* !NOENCRYPTION */
    return 0;
}
@


4.10
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes: declare return values to indicate success/failure
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: create_ticket.c,v 4.9 88/12/05 15:20:41 wesommer Locked $";
d28 5
a32 2
 * newly created ticket in tkt.  The data in tkt->dat is encrypted
 * in the server's key.  The length of the ticket is a multiple of
d50 3
d54 1
@


4.9
log
@Added #ifdef NOENCRYPTION code (to send stuff
in the clear in case no DES library present).
Programmer: jtkohl
Auditor: steiner
@
text
@d3 1
a3 1
 * $Author: shanzer $
d14 1
a14 1
"$Header: create_ticket.c,v 4.8 88/10/07 06:07:36 jtkohl Locked $";
d73 1
a73 1
krb_create_ticket(tkt, flags, pname, pinstance, prealm, paddress,
d123 1
a123 1
        return /* XXX */;
d132 1
@


4.8
log
@Added Wonderfull comments
Programer: steiner
Auditor: shanzer
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: create_ticket.c,v 4.7 88/02/24 18:10:59 steiner Exp $";
d126 1
d131 1
@


4.7
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: create_ticket.c,v 4.6 88/01/12 21:18:37 steiner Locked $";
d26 1
a26 1
 * ticket, and a the KTEXT object in which the ticket should be
d28 3
a30 1
 * newly created ticket in tkt.
d32 3
d38 33
d76 1
a76 1
    unsigned char flags;        /* various kerberos flags */
d79 1
a79 1
    char    *prealm;            /* Principal's Authentication domain */
d86 1
a86 1
    C_Block key;                /* Services secret key */
@


4.6
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/lib/krb/RCS/create_ticket.c,v $
a3 1
 * $Locker: steiner $
d5 2
a6 1
 * Copyright 1985, 1986 by the Massachusetts Institute of Technology
d8 2
d13 2
a14 2
static char rcsid[] =
    "$Header: create_ticket.c,v 4.5 87/12/06 11:16:00 steiner Locked $";
d17 1
@


4.5
log
@Ken's changes.
@
text
@d4 1
a4 1
 * $Locker: raeburn $
d12 2
a13 2
    "$Header: create_ticket.c,v 4.4 87/10/28 16:03:25 raeburn Locked $";
#endif  lint
d32 14
a45 14
krb_create_ticket(tkt,flags,pname,pinstance,prealm,paddress,session,
		  life,time_sec,sname,sinstance,key)
    KTEXT   tkt;		/* Gets filled in by the ticket */
    unsigned char	flags;	/* various kerberos flags */
    char    *pname;		/* Principal's name */
    char    *pinstance;		/* Principal's instance */
    char    *prealm;		/* Principal's Authentication domain */
    long    paddress;		/* Net address of requesting entity */
    char    *session;		/* Session key inserted in ticket */
    short   life;		/* Lifetime of the ticket */
    long    time_sec;		/* Issue time and date */
    char    *sname;		/* Service Name */
    char    *sinstance;		/* Instance Name */
    C_Block key;		/* Services secret key */
d47 2
a48 2
    Key_schedule    key_s;
    register char *data;	/* running index into ticket */
d50 2
a51 2
    tkt->length = 0;		/* Clear previous data  */
    flags |= HOST_BYTE_ORDER;	/* ticket byte order   */
d80 3
a82 3
	bzero(tkt->dat, tkt->length);
	tkt->length = 0;
	return /* XXX */;
d88 1
a88 1
		 (long) tkt->length,key_s,key,1);
@


4.4
log
@Took out byteorder.h; that info is now in krb_conf.h.
@
text
@d2 3
a4 3
 * $Source: /u3/kerberos.new/lib/krb/RCS/create_ticket.c,v $
 * $Author: jtkohl $
 * $Locker: steiner $
d11 2
a12 2
static char *rcsid_create_ticket_c =
"$Header: create_ticket.c,v 4.3 87/10/20 17:07:41 steiner Locked $";
d22 4
a25 4
 * Create ticket takes as arguments information that should be in a ticket,
 * and a the KTEXT object in which the ticket should be constructed.  It 
 * then constructs a ticket and returns, leving the newly created ticket
 * in tkt.  
d27 3
a29 3
 * The corresponding routine toextract information from a ticket it 
 * decomp_ticket.  When changes are made to this routine, the corresponding
 * changes should also be made to that file. 
d32 14
a45 14
create_ticket(tkt,flags,pname,pinstance,prealm,paddress,session,
	      life,time_sec,sname,sinstance,key)
KTEXT   tkt;            /* Gets filled in by the ticket                 */
unsigned char	flags;	/* various kerberos flags			   */
char    *pname;         /* Principal's name                             */
char    *pinstance;     /* Principal's instance                         */
char    *prealm;        /* Principal's Authentication domain            */
long    paddress;       /* Net address of entity requesting ticket      */
char    *session;       /* Session key inserted in ticket               */
short   life;           /* Lifetime of the ticket                       */
long    time_sec;       /* Issue time and date                          */
char    *sname;         /* Service Name                                 */
char    *sinstance;     /* Instance Name                                */
C_Block key;           /* Services secret key (to encrypt the ticket)  */
d48 1
a48 12
    tkt->length = 0;                            /* Clear previous data  */
    flags |= HOST_BYTE_ORDER;			/* ticket byte order   */
    bcopy((char *) &flags,(char *) (tkt->dat),sizeof(flags)); /* flags */
    tkt->length += (sizeof(flags));
    (void) strcpy((char *) (tkt->dat+tkt->length),pname); /* pname */
    tkt->length += 1 + strlen(pname);
    (void) strcpy((char *) (tkt->dat+tkt->length),pinstance); /* instance */
    tkt->length += 1 + strlen(pinstance);
    (void) strcpy((char *) (tkt->dat+tkt->length),prealm);	/* realm */
    tkt->length += 1 + strlen(prealm);
    bcopy((char *) &paddress,(char *) (tkt->dat+tkt->length),4); /* address */
    tkt->length += 4;
d50 16
a65 3
    bcopy((char *) session,(char *)(tkt->dat+tkt->length),8); /* session key */
    tkt->length += 8;
    *(tkt->dat+(tkt->length)++) = (char) life; /* lifetime */
d67 6
a72 6
    bcopy((char *) &time_sec,(char *) (tkt->dat+tkt->length),4);
    tkt->length += 4;
    (void) strcpy((char *) (tkt->dat+tkt->length),sname); /* service */
    tkt->length += 1 + strlen(sname);
    (void) strcpy((char *) (tkt->dat+tkt->length),sinstance); /* instance */
    tkt->length += 1 + strlen(sinstance);
d75 2
a76 2
    bzero((char *)(tkt->dat+tkt->length),7);
    tkt->length = ((tkt->length+7)/8)*8;
d79 5
a83 7
    if (tkt->length > (sizeof(KTEXT_ST) - 7))
            {
            log(" ticket too long %s %s %s",pname,sname,sinstance);
            fprintf(stderr,"\nTicket too long");
            tkt->length = 0;
            return;
            }       
d88 1
a88 2
		 (long) tkt->length,key_s,key,1); 

a89 2


@


4.3
log
@lint fixes
@
text
@d3 2
a4 2
 * $Author: steiner $
 * $Locker: jtkohl $
d11 2
a12 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 4.2 87/09/10 16:20:14 jtkohl Locked $";
a18 1
#include <byteorder.h>
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d2 1
a2 1
 * $Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/create_ticket.c,v $
d4 1
a4 1
 * $Locker: steiner $
d11 1
a11 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 4.1 87/09/01 15:46:07 steiner Locked $";
d18 2
d45 1
a45 1
char    *key;           /* Services secret key (to encrypt the ticket)  */
d50 1
a50 1
    bcopy(&flags,tkt->dat,sizeof(flags));	/* flags		   */
d52 1
a52 1
    strcpy(tkt->dat+tkt->length,pname);                  /* pname        */
d54 1
a54 1
    strcpy(tkt->dat+tkt->length,pinstance);             /* instance     */
d56 1
a56 1
    strcpy(tkt->dat+tkt->length,prealm);                /* realm        */
d58 1
a58 1
    bcopy(&paddress,tkt->dat+tkt->length,4);             /* address      */
d61 1
a61 1
    bcopy(session,tkt->dat+tkt->length,8);              /* session key  */
d63 3
a65 2
    *(tkt->dat+(tkt->length)++) = (char) life;          /* lifetime     */
    bcopy(&time_sec,tkt->dat+tkt->length,4);            /* issue time   */
d67 1
a67 1
    strcpy(tkt->dat+tkt->length,sname);                 /* service      */
d69 1
a69 1
    strcpy(tkt->dat+tkt->length,sinstance);             /* instance     */
d73 1
a73 1
    bzero(tkt->dat+tkt->length,7);
d87 2
a88 1
    pcbc_encrypt(tkt->dat,tkt->dat,(long) tkt->length,key_s,key,1); 
@


4.1
log
@No change; starting version 4.
@
text
@d3 1
a3 1
 * $Author: bcn $
d11 1
a11 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 3.2 86/05/14 14:47:09 steiner Locked $";
d17 1
a17 1
#include "prot.h"
@


3.2
log
@Changed include to use <>.
@
text
@d2 1
a2 1
 * $Source: /mit/projects/auth/src/lib/krb/RCS/create_ticket.c,v $
d4 1
a4 1
 * $Locker: spm $
d11 1
a11 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 3.1 86/03/28 09:30:39 bcn Exp $";
@


3.1
log
@Update to protocol rev 3 complete.
Ticket now has flags which are used to
check byte order.
@
text
@d3 2
a4 2
 * $Author: spm $
 * $Locker: bcn $
d11 1
a11 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 1.14 86/03/25 15:53:46 spm Exp $";
d15 1
a15 1
#include "/projects/auth/include/des.h"
@


1.14
log
@add byte order flag
@
text
@d3 2
a4 6
 * $Author: bcn $
 * $Locker: spm $
 * $Log:	create_ticket.c,v $
 * Revision 1.13  86/03/21  16:19:48  bcn
 * More changes towards upgrad to prot rev 3.
 * 
d11 1
a11 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 1.13 86/03/21 16:19:48 bcn Exp $";
d84 1
a84 1
    pcbc_encrypt(tkt->dat,tkt->dat,(long) tkt->length,key_s,key,1);
@


1.13
log
@More changes towards upgrad to prot rev 3.
@
text
@d3 2
a4 2
 * $Author: spm $
 * $Locker: bcn $
d6 3
d15 1
a15 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 1.12 86/01/07 20:22:59 spm Exp $";
d34 1
a34 1
create_ticket(tkt,pname,pinstance,prealm,paddress,session,
d37 1
d51 5
a55 2
    strcpy(tkt->dat,pname);                             /* pname        */
    tkt->length = 1 + strlen(pname);
@


1.12
log
@(long)...length for pcbc_encrypt
@
text
@d4 1
a4 1
 * $Locker:  $
a5 35
 * Revision 1.11  86/01/07  12:40:27  spm
 * change cbc mode to pcbc mode
 * 
 * Revision 1.10  85/11/26  11:40:13  spm
 * replace set_key with des_set_key
 * 
 * Revision 1.9  85/11/17  20:45:56  bcn
 * tkt->length = 1 + strlen(realm) -> tkt->length += 1 + strlen(realm)
 * 
 * Revision 1.8  85/11/16  15:49:03  bcn
 * Split create_ticket and decomp_ticket into different files to make
 * ready for libkrb.  Also added documentation and cleaned up some code.
 * 
 * Revision 1.7  85/11/13  14:45:27  bcn
 * Add realm to argument list for decomp_ticket.
 * 
 * Revision 1.6  85/11/13  10:58:39  bcn
 * Add realm to definition of ticket.
 * 
 * Revision 1.5  85/10/23  17:13:00  spm
 * add bzero for null padding and add length check
 * 
 * Revision 1.4  85/10/23  14:45:16  bcn
 * create_ticket no longer returns anything.
 * 
 * Revision 1.3  85/10/23  13:54:58  bcn
 * create_ticket now takes a TEXT stucture as and argument
 * instead of creating it.
 * 
 * Revision 1.2  85/10/18  13:58:31  bcn
 * Add code to decomp_ticket
 * 
 * Revision 1.1  85/10/11  16:29:52  bcn
 * Initial revision
 * 
d7 1
a7 1
 * Copyright 1985 by the Massachusetts Institute of Technology
d12 1
a12 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 1.11 86/01/07 12:40:27 spm Exp $";
d17 1
d22 1
a22 1
 * and a the TEXT object in which the ticket should be constructed.  It 
d31 7
a37 6
create_ticket(tkt,aname,realm,address,session,perm,
              quota,life,time_sec,sname,instance,key)
TEXT    tkt;            /* Gets filled in by the ticket                 */
char    *aname;         /* Authentication name                          */
char    *realm;         /* Authentication domain                        */
long    address;        /* Net address of entity requesting ticket      */
a38 2
short   perm;           /* Permissions  (If we are doing authorization) */
short   quota;          /* Quota        (If we are doing authorization) */
d42 1
a42 1
char    *instance;      /* Instance Name                                */
d47 7
a53 5
    strcpy(tkt->dat,aname);                             /* aname        */
    tkt->length = 1 + strlen(aname);
    strcpy(tkt->dat+tkt->length,realm);                 /* realm        */
    tkt->length += 1 + strlen(realm);
    bcopy(&address,tkt->dat+tkt->length,4);             /* address      */
d55 1
a57 4
    bcopy(&perm,tkt->dat+tkt->length,2);                /* permissions  */
    tkt->length += 2;
    bcopy(&quota,tkt->dat+tkt->length,2);               /* quota        */
    tkt->length += 2;
d63 2
a64 2
    strcpy(tkt->dat+tkt->length,instance);              /* instance     */
    tkt->length += 1 + strlen(instance);
d71 1
a71 1
    if (tkt->length > (sizeof(TEXT_ST) - 7))
d73 1
a73 1
            log(" ticket too long %s %s %s",aname,sname,instance);
d80 1
a80 1
    des_set_key(key,key_s);
@


1.11
log
@change cbc mode to pcbc mode
@
text
@d4 1
a4 1
 * $Locker: spm $
d6 3
d47 1
a47 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 1.10 85/11/26 11:40:13 spm Exp $";
d117 1
a117 1
    pcbc_encrypt(tkt->dat,tkt->dat,tkt->length,key_s,key,1);
@


1.10
log
@replace set_key with des_set_key
@
text
@d3 1
a3 1
 * $Author: bcn $
d6 3
d44 1
a44 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 1.9 85/11/17 20:45:56 bcn Exp $";
d114 1
a114 1
    cbc_encrypt(tkt->dat,tkt->dat,tkt->length,key_s,key,1);
@


1.9
log
@tkt->length = 1 + strlen(realm) -> tkt->length += 1 + strlen(realm)
@
text
@d4 1
a4 1
 * $Locker: bcn $
d6 3
d41 1
a41 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 1.8 85/11/16 15:49:03 bcn Exp $";
d110 1
a110 1
    set_key(key,key_s);
@


1.8
log
@Split create_ticket and decomp_ticket into different files to make
ready for libkrb.  Also added documentation and cleaned up some code.
@
text
@d5 5
a9 1
 * $Log:        create_ticket.c,v $
d38 1
a38 1
static char *rcsid_create_ticket_c = "$Header: create_ticket.c,v 1.7 85/11/13 14:45:27 bcn Exp $";
d76 1
a76 1
    tkt->length = 1 + strlen(realm);
@


1.7
log
@Add realm to argument list for decomp_ticket.
@
text
@d2 1
a2 1
 * $Source: /mit/projects/auth/src/kdc/RCS/ticket.c,v $
d4 5
a8 2
 * $Locker:  $
 * $Log:	ticket.c,v $
d34 2
a35 2
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.6 85/11/13 10:58:39 bcn Exp $";
#endif	lint
d37 1
a37 1
#include	<stdio.h>
d39 1
a39 1
#include "/projects/auth/src/kdc/prot.h"
d41 25
a65 13
create_ticket(tkt,aname,realm,address,session,perm,quota,life,time_sec,sname,instance,key)
TEXT	tkt;
char	*aname;
char	*realm;
long	address;
char	*session;
short	perm;
short	quota;
short	life;
long	time_sec;
char	*sname;
char	*instance;
char	*key;
d67 24
a90 23
	Key_schedule    key_s;
	tkt->length = 0;
	strcpy(tkt->dat,aname);
	tkt->length = 1 + strlen(aname);
	strcpy(tkt->dat+tkt->length,realm);
	tkt->length = 1 + strlen(realm);
	bcopy(&address,tkt->dat+tkt->length,4);
	tkt->length += 4;
	bcopy(session,tkt->dat+tkt->length,8);
	tkt->length += 8;
	bcopy(&perm,tkt->dat+tkt->length,2);
	tkt->length += 2;
	bcopy(&quota,tkt->dat+tkt->length,2);
	tkt->length += 2;
	*(tkt->dat+(tkt->length)++) = (char) life;
	bcopy(&time_sec,tkt->dat+tkt->length,4);
	tkt->length += 4;
	strcpy(tkt->dat+tkt->length,sname);
	tkt->length += 1 + strlen(sname);
	strcpy(tkt->dat+tkt->length,instance);
	tkt->length += 1 + strlen(instance);
	/* guarantee null padded ticket to multiple of 8 bytes				   */
	bzero(tkt->dat+tkt->length,7);
a91 9
	if (tkt->length > (sizeof(TEXT_ST) - 7))
		{
		log(" ticket too long %s %s %s",aname,sname,instance);
		fprintf(stderr,"\nTicket too long");
		tkt->length = 0;
		return;
		}	
	set_key(key,key_s);
	cbc_encrypt(tkt->dat,tkt->dat,tkt->length,key_s,key,1);
d93 8
a100 1
}
d102 3
a105 38
decomp_ticket(tkt,aname,realm,address,session,perm,quota,life,time_sec,sname,instance,key)
TEXT	tkt;
char	*aname;
char	*realm;
long	address;
char	*session;
short	perm;
short	quota;
short	life;
long	time_sec;
char	*sname;
char	*instance;
char	*key;
{
	Key_schedule    key_s;
	char		*ptr = tkt->dat;

	set_key(key,key_s);
	cbc_encrypt(tkt->dat,tkt->dat,tkt->length,key_s,key,0);
	strcpy(aname,ptr);
	ptr += strlen(aname) + 1;
	strcpy(realm,ptr);
	ptr += strlen(aname) + 1;
	bcopy(ptr,&address,4);
	ptr += 4;
	bcopy(ptr,session,8);
	ptr+= 8;
	bcopy(ptr,&perm,2);
	ptr += 2;
	bcopy(ptr,&quota,2);
	ptr += 2;
	life = (short) *(ptr++);
	bcopy(ptr,&time_sec,4);
	ptr += 4;
	strcpy(sname,ptr);
	ptr += 1 + strlen(sname);
	strcpy(instance,ptr);
	ptr += 1 + strlen(instance);
@


1.6
log
@Add realm to definition of ticket.
@
text
@d3 2
a4 2
 * $Author: spm $
 * $Locker: bcn $
d6 3
d31 1
a31 1
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.5 85/10/23 17:13:00 spm Exp $";
d89 1
a89 1
decomp_ticket(tkt,aname,address,session,perm,quota,life,time_sec,sname,instance,key)
@


1.5
log
@add bzero for null padding and add length check
@
text
@d3 2
a4 2
 * $Author: bcn $
 * $Locker: spm $
d6 3
d28 1
a28 1
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.4 85/10/23 14:45:16 bcn Exp $";
d35 1
a35 1
create_ticket(tkt,aname,address,session,perm,quota,life,time_sec,sname,instance,key)
d38 1
d53 2
d89 1
d105 3
a107 1
	strcpy(aname,tkt->dat);
@


1.4
log
@create_ticket no longer returns anything.
@
text
@d4 1
a4 1
 * $Locker:  $
d6 3
d25 1
a25 1
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.3 85/10/23 13:54:58 bcn Exp $";
d28 1
d64 10
a73 1
        tkt->length = ((tkt->length+7)/8)*8;
@


1.3
log
@create_ticket now takes a TEXT stucture as and argument
instead of creating it.
@
text
@d6 4
d22 1
a22 1
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.2 85/10/18 13:58:31 bcn Exp $";
a27 1
TEXT
a63 1
	return(tkt);
@


1.2
log
@Add code to decomp_ticket
@
text
@d4 1
a4 1
 * $Locker: bcn $
d6 3
d18 1
a18 1
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.1 85/10/11 16:29:52 bcn Exp $";
d25 2
a26 1
create_ticket(aname,address,session,perm,quota,life,time_sec,sname,instance,key)
d39 1
a39 1
	TEXT	tkt = (TEXT) malloc(sizeof(TEXT_ST));
@


1.1
log
@Initial revision
@
text
@d2 7
a8 4
 * $Source: $
 * $Author: $
 * $Locker: $
 * $Log:    $
d15 1
a15 1
static char *rcsid_ticket_c = "$Header: $";
d61 2
a62 1
decomp_ticket(aname,address,session,perm,quota,life,time_sec,sname,instance,key)
d74 22
d97 1
@
