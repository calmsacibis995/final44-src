head     4.14;
branch   ;
access   ;
symbols  PATCH8:4.12 PATCH7:4.12 KPATCH6:4.12 ASRSNAP1001:4.12 PATCH5:4.12 KPATCH4:4.12 KPATCH3:4.12 KPATCH2:4.10 KREL1:4.10 BETA5/24/88:4.8;
locks    ; strict;
comment  @ * @;


4.14
date     91.02.25.15.21.17;  author bostic;  state Exp;
branches ;
next     4.13;

4.13
date     91.02.25.15.20.51;  author bostic;  state Exp;
branches ;
next     4.12;

4.12
date     89.05.16.18.44.46;  author jtkohl;  state Exp;
branches ;
next     4.11;

4.11
date     89.04.28.10.58.00;  author jtkohl;  state Exp;
branches ;
next     4.10;

4.10
date     88.12.05.15.20.53;  author steiner;  state Exp;
branches ;
next     4.9;

4.9
date     88.10.07.06.07.57;  author shanzer;  state Exp;
branches ;
next     4.8;

4.8
date     88.04.15.15.06.57;  author steiner;  state Exp;
branches ;
next     4.7;

4.7
date     88.02.24.18.11.11;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     88.01.12.21.19.02;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     87.10.28.16.03.28;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.20.17.08.02;  author jtkohl;  state Exp;
branches ;
next     4.3;

4.3
date     87.09.14.16.24.27;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.20.18;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.46.15;  author steiner;  state Exp;
branches ;
next     3.6;

3.6
date     86.10.22.21.49.20;  author spm;  state Exp;
branches ;
next     3.5;

3.5
date     86.09.05.16.14.11;  author bcn;  state Exp;
branches ;
next     3.4;

3.4
date     86.08.12.12.35.42;  author bcn;  state Exp;
branches ;
next     3.3;

3.3
date     86.05.14.14.48.43;  author bcn;  state Exp;
branches ;
next     3.2;

3.2
date     86.04.04.17.55.54;  author spm;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.09.31.21;  author bcn;  state Exp;
branches ;
next     1.16;

1.16
date     86.03.25.15.52.52;  author spm;  state Exp;
branches ;
next     1.15;

1.15
date     86.03.21.16.20.11;  author bcn;  state Exp;
branches ;
next     1.14;

1.14
date     86.01.10.16.38.05;  author spm;  state Exp;
branches ;
next     1.13;

1.13
date     86.01.07.20.25.42;  author spm;  state Exp;
branches ;
next     1.12;

1.12
date     86.01.07.12.50.16;  author spm;  state Exp;
branches ;
next     1.11;

1.11
date     85.12.06.20.54.42;  author bcn;  state Exp;
branches ;
next     1.10;

1.10
date     85.12.04.10.17.58;  author bcn;  state Exp;
branches ;
next     1.9;

1.9
date     85.11.26.11.41.46;  author spm;  state Exp;
branches ;
next     1.8;

1.8
date     85.11.17.13.43.05;  author bcn;  state Exp;
branches ;
next     1.7;

1.7
date     85.11.13.14.45.27;  author bcn;  state Exp;
branches ;
next     1.6;

1.6
date     85.11.13.10.58.39;  author bcn;  state Exp;
branches ;
next     1.5;

1.5
date     85.10.23.17.13.00;  author spm;  state Exp;
branches ;
next     1.4;

1.4
date     85.10.23.14.45.16;  author bcn;  state Exp;
branches ;
next     1.3;

1.3
date     85.10.23.13.54.58;  author bcn;  state Exp;
branches ;
next     1.2;

1.2
date     85.10.18.13.58.31;  author bcn;  state Exp;
branches ;
next     1.1;

1.1
date     85.10.11.16.29.52;  author bcn;  state Exp;
branches ;
next     ;


desc
@Initial RCS checkin
@


4.14
log
@Can't use apostrophes with gcc
@
text
@/*
 * $Source: /usr/src/kerberosIV/krb/RCS/decomp_ticket.c,v $
 * $Author: bostic $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_decomp_ticket_c =
"$Header: /usr/src/kerberosIV/krb/RCS/decomp_ticket.c,v 4.13 91/02/25 15:20:51 bostic Exp Locker: bostic $";
#endif /* lint */

#include <mit-copyright.h>
#include <stdio.h>
#include <des.h>
#include <krb.h>
#include <prot.h>
#include <strings.h>

/*
 * This routine takes a ticket and pointers to the variables that
 * should be filled in based on the information in the ticket.  It
#ifndef NOENCRYPTION
 * decrypts the ticket using the given key, and 
#endif
 * fills in values for its arguments.
 *
 * Note: if the client realm field in the ticket is the null string,
 * then the "prealm" variable is filled in with the local realm (as
 * defined by KRB_REALM).
 *
 * If the ticket byte order is different than the host's byte order
 * (as indicated by the byte order bit of the "flags" field), then
 * the KDC timestamp "time_sec" is byte-swapped.  The other fields
 * potentially affected by byte order, "paddress" and "session" are
 * not byte-swapped.
 *
 * The routine returns KFAILURE if any of the "pname", "pinstance",
 * or "prealm" fields is too big, otherwise it returns KSUCCESS.
 *
 * The corresponding routine to generate tickets is create_ticket.
 * When changes are made to this routine, the corresponding changes
 * should also be made to that file.
 *
 * See create_ticket.c for the format of the ticket packet.
 */

decomp_ticket(tkt, flags, pname, pinstance, prealm, paddress, session,
              life, time_sec, sname, sinstance, key, key_s)
    KTEXT tkt;			/* The ticket to be decoded */
    unsigned char *flags;       /* Kerberos ticket flags */
    char *pname;		/* Authentication name */
    char *pinstance;		/* Principal's instance */
    char *prealm;		/* Principal's authentication domain */
    unsigned long *paddress;    /* Net address of entity
                                 * requesting ticket */
    C_Block session;		/* Session key inserted in ticket */
    int *life; 		        /* Lifetime of the ticket */
    unsigned long *time_sec;    /* Issue time and date */
    char *sname;		/* Service name */
    char *sinstance;		/* Service instance */
    C_Block key;		/* Service's secret key
                                 * (to decrypt the ticket) */
    Key_schedule key_s;		/* The precomputed key schedule */
{
    static int tkt_swap_bytes;
    unsigned char *uptr;
    char *ptr = (char *)tkt->dat;

#ifndef NOENCRYPTION
    /* Do the decryption */
    pcbc_encrypt((C_Block *)tkt->dat,(C_Block *)tkt->dat,
                 (long) tkt->length,key_s,key,0);
#endif /* ! NOENCRYPTION */

    *flags = *ptr;              /* get flags byte */
    ptr += sizeof(*flags);
    tkt_swap_bytes = 0;
    if (HOST_BYTE_ORDER != ((*flags >> K_FLAG_ORDER)& 1))
        tkt_swap_bytes++;

    if (strlen(ptr) > ANAME_SZ)
        return(KFAILURE);
    (void) strcpy(pname,ptr);   /* pname */
    ptr += strlen(pname) + 1;

    if (strlen(ptr) > INST_SZ)
        return(KFAILURE);
    (void) strcpy(pinstance,ptr); /* instance */
    ptr += strlen(pinstance) + 1;

    if (strlen(ptr) > REALM_SZ)
        return(KFAILURE);
    (void) strcpy(prealm,ptr);  /* realm */
    ptr += strlen(prealm) + 1;
    /* temporary hack until realms are dealt with properly */
    if (*prealm == 0)
	return(KFAILURE);

#ifdef	notdef
	Do not want to use this definition -kfall
        (void) strcpy(prealm,KRB_REALM);
#endif

    bcopy(ptr,(char *)paddress,4); /* net address */
    ptr += 4;

    bcopy(ptr,(char *)session,8); /* session key */
    ptr+= 8;
#ifdef notdef /* DONT SWAP SESSION KEY spm 10/22/86 */
    if (tkt_swap_bytes)
        swap_C_Block(session);
#endif

    /* get lifetime, being certain we don't get negative lifetimes */
    uptr = (unsigned char *) ptr++;
    *life = (int) *uptr;

    bcopy(ptr,(char *) time_sec,4); /* issue time */
    ptr += 4;
    if (tkt_swap_bytes)
        swap_u_long(*time_sec);

    (void) strcpy(sname,ptr);   /* service name */
    ptr += 1 + strlen(sname);

    (void) strcpy(sinstance,ptr); /* instance */
    ptr += 1 + strlen(sinstance);
    return(KSUCCESS);
}
@


4.13
log
@checked in for Kevin Fall
@
text
@d3 1
a3 1
 * $Author: jtkohl $
d14 1
a14 1
"$Header: /usr/src/kerberosIV/krb/RCS/decomp_ticket.c,v 4.12 89/05/16 18:44:46 jtkohl Exp Locker: kfall $";
d105 1
a105 1
	Don't want to use this definition -kfall
@


4.12
log
@fix nested comments introduced in previous rev.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/lib/krb/RCS/decomp_ticket.c,v $
d14 1
a14 1
"$Header: decomp_ticket.c,v 4.11 89/04/28 10:58:00 jtkohl Locked $";
d102 4
d107 1
@


4.11
log
@put #ifndef NOENCRYPTION around an encryption comment
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: decomp_ticket.c,v 4.10 88/12/05 15:20:53 jtkohl Locked $";
d29 1
a29 1
#endif /* NOENCRYPTION */
@


4.10
log
@Added #ifdef NOENCRYPTION code (to send stuff
in the clear in case no DES library present).
Programmer: jtkohl
Auditor: steiner
@
text
@d3 1
a3 1
 * $Author: shanzer $
d14 1
a14 1
"$Header: decomp_ticket.c,v 4.9 88/10/07 06:07:57 jtkohl Locked $";
d27 4
a30 2
 * decrypts the ticket using the given key, and fills in values for
 * its arguments.
@


4.9
log
@Added Wonderfull comments
Programer: steiner
Auditor: shanzer
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: decomp_ticket.c,v 4.8 88/04/15 15:06:57 steiner Exp $";
d72 1
d76 1
@


4.8
log
@Fixed byte order problem with ticket lifetimes.
Programmer: jon.
Auditor: wesommer.
@
text
@d14 1
a14 1
"$Header: decomp_ticket.c,v 4.7 88/02/24 18:11:11 steiner Exp $";
d25 1
a25 1
 * Decompose_ticket takes a ticket and pointers to the field that
d27 2
a28 2
 * then decrypts the ticket, fills in values for its arguments and
 * returns.
d30 13
d46 2
d62 4
a65 4
    char *sname;		/* Service Name */
    char *sinstance;		/* Instance Name */
    C_Block key;		/* Services' secret key
                                 * (to encrypt the ticket) */
@


4.7
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: decomp_ticket.c,v 4.6 88/01/12 21:19:02 steiner Locked $";
d45 1
a45 1
    short *life;		/* Lifetime of the ticket */
d54 1
d95 3
a97 1
    *life = (short) *(ptr++);   /* lifetime */
@


4.6
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/lib/krb/RCS/decomp_ticket.c,v $
a3 1
 * $Locker: steiner $
d5 2
a6 1
 * Copyright 1985,1986 by the Massachusetts Institute of Technology
d8 2
d14 1
a14 1
    "$Header: decomp_ticket.c,v 4.5 87/10/28 16:03:28 steiner Locked $";
d17 1
@


4.5
log
@Took out byteorder.h; that info is now in krb_conf.h.
@
text
@d1 3
a3 3
/* 
 * $Source: /u3/kerberos.new/lib/krb/RCS/decomp_ticket.c,v $
 * $Author: jtkohl $
d12 2
a13 2
"$Header: decomp_ticket.c,v 4.4 87/10/20 17:08:02 steiner Locked $";
#endif  lint
d22 4
a25 3
 * Decompose_ticket takes a ticket and pointers to the field that should be
 * filled in based on the information in the ticket.  It then decrypts the
 * ticket, fills in values for its arguments and returns.
d28 2
a29 2
 * When changes are made to this routine, the corresponding
 * changes should also be made to that file. 
d32 17
a48 17

decomp_ticket(tkt,flags,pname,pinstance,prealm,paddress,session,
              life,time_sec,sname,sinstance,key,key_s)
KTEXT   tkt;            /* The ticket to be decoded                     */
unsigned char *flags;	/* Kerberos ticket flags			*/
char    *pname;         /* Authentication name                          */
char    *pinstance;     /* Principal's instance                         */
char    *prealm;        /* Principal's authentication domain            */
unsigned long    *paddress;/* Net address of entity requesting ticket      */
C_Block    session;     /* Session key inserted in ticket               */
short   *life;          /* Lifetime of the ticket                       */
unsigned long    *time_sec;/* Issue time and date                          */
char    *sname;         /* Service Name                                 */
char    *sinstance;     /* Instance Name                                */
C_Block    	key;           /* Services secret key (to encrypt the ticket)  */
Key_schedule    key_s;	/* The precomputed key schedule			*/

d50 2
a51 2
	static	int		tkt_swap_bytes;
    char   *ptr = (char *)tkt->dat;
a52 1

d55 1
a55 1
		 (long) tkt->length,key_s,key,0); 
d57 1
a57 1
    *flags = *ptr;		/* get flags byte			   */
d60 2
a61 1
    if (HOST_BYTE_ORDER != ((*flags >> K_FLAG_ORDER)& 1) ) tkt_swap_bytes++;
d63 4
a66 3
    if(strlen(ptr) > ANAME_SZ) return(KFAILURE);
    (void) strcpy(pname,ptr);		/* pname */
    ptr += strlen(pname) + 1; 
d68 3
a70 2
    if(strlen(ptr) > INST_SZ) return(KFAILURE);
    (void) strcpy(pinstance,ptr);		/* instance */
d73 3
a75 2
    if(strlen(ptr) > REALM_SZ) return(KFAILURE);
    (void) strcpy(prealm,ptr);			/* realm */
d78 2
a79 2
    if(*prealm == 0)
    (void) strcpy(prealm,KRB_REALM);
d81 1
a81 1
    bcopy(ptr,(char *)paddress,4);	/* net address */
d84 1
a84 1
    bcopy(ptr,(char *)session,8);	/* session key */
d86 3
a88 2
#ifdef	notdef					/* DONT SWAP SESSION KEY spm 10/22/86	   */
    if (tkt_swap_bytes) swap_C_Block(session); 
d91 1
a91 1
    *life = (short) *(ptr++);		/* lifetime */
d93 1
a93 1
    bcopy(ptr,(char *) time_sec,4);		/* issue time */
d95 2
a96 1
    if (tkt_swap_bytes) swap_u_long(*time_sec); 
d98 1
a98 1
    (void) strcpy(sname,ptr);			/* service name */
d101 1
a101 1
    (void) strcpy(sinstance,ptr);		/* instance */
a104 2


@


4.4
log
@lint fixes
@
text
@d3 2
a4 2
 * $Author: steiner $
 * $Locker: jtkohl $
d11 2
a12 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 4.3 87/09/14 16:24:27 jtkohl Locked $";
a18 1
#include <byteorder.h>
@


4.3
log
@Replaced hardcoded "ATHENA.MIT.EDU" with KRB_REALM
(bug pointed out by Jim Bloom).
@
text
@d2 1
a2 1
 * $Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/decomp_ticket.c,v $
d4 1
a4 1
 * $Locker: steiner $
d11 1
a11 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 4.2 87/09/10 16:20:18 steiner Locked $";
d18 2
d39 2
a40 2
long    *paddress;      /* Net address of entity requesting ticket      */
char    *session;       /* Session key inserted in ticket               */
d42 1
a42 1
long    *time_sec;      /* Issue time and date                          */
d50 1
a50 1
    unsigned char   *ptr = tkt->dat;
d54 2
a55 1
    pcbc_encrypt(tkt->dat,tkt->dat,(long) tkt->length,key_s,key,0); 
d63 1
a63 1
    strcpy(pname,ptr);                                  /* pname        */
d67 1
a67 1
    strcpy(pinstance,ptr);                              /* instance     */
d71 1
a71 1
    strcpy(prealm,ptr);                                  /* realm       */
d75 1
a75 1
    strcpy(prealm,KRB_REALM);
d77 1
a77 1
    bcopy(ptr,paddress,4);                               /* net address  */
d80 1
a80 1
    bcopy(ptr,session,8);                               /* session key  */
d86 1
a86 1
    *life = (short) *(ptr++);                           /* lifetime     */
d88 1
a88 1
    bcopy(ptr,time_sec,4);                             /* issue time   */
d92 1
a92 1
    strcpy(sname,ptr);                                  /* service name */
d95 1
a95 1
    strcpy(sinstance,ptr);                               /* instance     */
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d11 1
a11 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 4.1 87/09/01 15:46:15 steiner Locked $";
d72 1
a72 1
    strcpy(prealm,"ATHENA.MIT.EDU");
@


4.1
log
@No change; starting version 4.
@
text
@d3 1
a3 1
 * $Author: spm $
d11 1
a11 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 3.6 86/10/22 21:49:20 steiner Locked $";
d17 1
a17 1
#include "prot.h"
@


3.6
log
@Dont swap the session key ever.
@
text
@d2 3
a4 3
 * $Source: /mit/projects/auth/src/lib/krb/RCS/decomp_ticket.c,v $
 * $Author: bcn $
 * $Locker: spm $
d11 1
a11 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 3.5 86/09/05 16:14:11 bcn Exp $";
@


3.5
log
@Changed realm name to default to (v3 code).
@
text
@d4 1
a4 1
 * $Locker: bcn $
d11 1
a11 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 3.4 86/08/12 12:35:42 bcn Exp $";
d79 1
d81 1
@


3.4
log
@Hack to turn null realm into "Athena".  Temporary.
@
text
@d4 1
a4 1
 * $Locker:  $
d11 1
a11 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 3.3 86/05/14 14:48:43 bcn Exp $";
d72 1
a72 1
    strcpy(prealm,"Athena");
@


3.3
log
@Minor changes.
@
text
@d3 2
a4 2
 * $Author: spm $
 * $Locker: spm $
d11 1
a11 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 3.2 86/04/04 17:55:54 spm Exp $";
d70 3
@


3.2
log
@char --> u_char
key to C_Block
@
text
@d3 1
a3 1
 * $Author: bcn $
d11 1
a11 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 3.1 86/03/28 09:31:21 bcn Exp $";
d15 1
a15 1
#include "des.h"
d50 1
d76 1
a76 1
    if (tkt_swap_bytes) swap_u_quad(session); 
@


3.1
log
@Update to protocol rev 3 complete.
Ticket now has flags which are used to
check byte order.
@
text
@d3 2
a4 2
 * $Author: spm $
 * $Locker:  $
d11 1
a11 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 1.16 86/03/25 15:52:52 spm Exp $";
d15 1
a15 1
#include "/projects/auth/include/des.h"
d43 1
a43 1
char    key[8];           /* Services secret key (to encrypt the ticket)  */
d48 1
a48 1
    char            *ptr = tkt->dat;
@


1.16
log
@add byte order and alignment and flags
@
text
@d3 2
a4 6
 * $Author: bcn $
 * $Locker: spm $
 * $Log:	decomp_ticket.c,v $
 * Revision 1.15  86/03/21  16:20:11  bcn
 * More changes towards upgrad to prot rev 3.
 * 
d11 1
a11 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 1.15 86/03/21 16:20:11 bcn Exp $";
d33 1
a33 1
unsigned char *flags;	/* Kerberos ticket flags					   */
d42 2
a43 2
char    *sinstance;      /* Instance Name                                */
char    *key;           /* Services secret key (to encrypt the ticket)  */
d51 1
a51 1
    pcbc_encrypt(tkt->dat,tkt->dat,(long) tkt->length,key_s,key,0);
d53 4
a56 4
	*flags = *ptr;				/* get flags byte						   */
	ptr += sizeof(flags);
	tkt_swap_bytes = 0;
	if (HOST_BYTE_ORDER != ((*flags >> K_FLAG_ORDER)& 1) ) tkt_swap_bytes++;
d75 1
a75 1
	if (tkt_swap_bytes) swap_u_quad(session)
d81 1
a81 1
	if (tkt_swap_bytes) swap_u_long(*time_sec)
@


1.15
log
@More changes towards upgrad to prot rev 3.
@
text
@d3 2
a4 2
 * $Author: spm $
 * $Locker: bcn $
d6 3
d15 1
a15 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 1.14 86/01/10 16:38:05 spm Exp $";
d34 1
a34 1
decomp_ticket(tkt,pname,pinstance,prealm,paddress,session,
d37 1
d51 1
d57 5
d79 1
d85 1
@


1.14
log
@add key schedule as argument, dont set it.
@
text
@d4 1
a4 1
 * $Locker:  $
a5 41
 * Revision 1.13  86/01/07  20:25:42  spm
 * (long) ...length arg for pcbc_encrypt
 * 
 * Revision 1.12  86/01/07  12:50:16  spm
 * change cbc mode to pcbc mode
 * 
 * Revision 1.11  85/12/06  20:54:42  bcn
 * Added a few minor sanity checks.
 * 
 * Revision 1.10  85/12/04  10:17:58  bcn
 * Fix bug with retrieval of time_sec
 * 
 * Revision 1.9  85/11/26  11:41:46  spm
 * replace set_key with des_set_key
 * 
 * Revision 1.8  85/11/17  13:43:05  bcn
 * Split create_ticket and decomp_ticet into different files to make
 * ready for libkrb.  Also added documentation and cleaned up some code.
 * 
 * Revision 1.7  85/11/13  14:45:27  bcn
 * Add realm to argument list for decomp_ticket.
 * 
 * Revision 1.6  85/11/13  10:58:39  bcn
 * Add realm to definition of ticket.
 * 
 * Revision 1.5  85/10/23  17:13:00  spm
 * add bzero for null padding and add length check
 * 
 * Revision 1.4  85/10/23  14:45:16  bcn
 * create_ticket no longer returns anything.
 * 
 * Revision 1.3  85/10/23  13:54:58  bcn
 * create_ticket now takes a TEXT stucture as and argument
 * instead of creating it.
 * 
 * Revision 1.2  85/10/18  13:58:31  bcn
 * Add code to decomp_ticket
 * 
 * Revision 1.1  85/10/11  16:29:52  bcn
 * Initial revision
 * 
d7 1
a7 1
 * Copyright 1985 by the Massachusetts Institute of Technology
d12 1
a12 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 1.13 86/01/07 20:25:42 spm Exp $";
d31 7
a37 6
decomp_ticket(tkt,aname,realm,address,session,perm,
              quota,life,time_sec,sname,instance,key,key_s)
TEXT    tkt;            /* The ticket to be decoded                     */
char    *aname;         /* Authentication name                          */
char    *realm;         /* Authentication domain                        */
long    *address;       /* Net address of entity requesting ticket      */
a38 2
short   *perm;          /* Permissions (If authorization has been done) */
short   *quota;         /* Quota       (If authorization has been done) */
d42 1
a42 1
char    *instance;      /* Instance Name                                */
d44 1
a44 1
Key_schedule    key_s;	/* The precomputed key schedule			   		*/
d53 2
a54 2
    strcpy(aname,ptr);                                  /* aname        */
    ptr += strlen(aname) + 1; 
d56 4
d61 2
a62 2
    strcpy(realm,ptr);                                  /* realm        */
    ptr += strlen(realm) + 1;
d64 1
a64 1
    bcopy(ptr,address,4);                               /* net address  */
a69 6
    bcopy(ptr,perm,2);                                  /* permissions  */
    ptr += 2;

    bcopy(ptr,quota,2);                                 /* quota        */
    ptr += 2;

d78 2
a79 2
    strcpy(instance,ptr);                               /* instance     */
    ptr += 1 + strlen(instance);
@


1.13
log
@(long) ...length arg for pcbc_encrypt
@
text
@d4 1
a4 1
 * $Locker: spm $
d6 3
d53 1
a53 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 1.12 86/01/07 12:50:16 spm Exp $";
d73 1
a73 1
              quota,life,time_sec,sname,instance,key)
d86 1
a88 1
    Key_schedule    key_s;
a91 1
    des_set_key(key,key_s);
@


1.12
log
@change cbc mode to pcbc mode
@
text
@d3 1
a3 1
 * $Author: bcn $
d6 3
d50 1
a50 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 1.11 85/12/06 20:54:42 bcn Exp $";
d90 1
a90 1
    pcbc_encrypt(tkt->dat,tkt->dat,tkt->length,key_s,key,0);
@


1.11
log
@Added a few minor sanity checks.
@
text
@d4 1
a4 1
 * $Locker: bcn $
d6 3
d47 1
a47 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 1.10 85/12/04 10:17:58 bcn Exp $";
d87 1
a87 1
    cbc_encrypt(tkt->dat,tkt->dat,tkt->length,key_s,key,0);
@


1.10
log
@Fix bug with retrieval of time_sec
@
text
@d3 2
a4 2
 * $Author: spm $
 * $Locker:  $
d6 3
d44 1
a44 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 1.9 85/11/26 11:41:46 spm Exp $";
d49 1
d86 1
d88 3
a90 1
    ptr += strlen(aname) + 1;
d93 1
d96 1
d99 1
d102 1
d105 1
d107 1
d110 1
d113 1
d116 1
@


1.9
log
@replace set_key with des_set_key
@
text
@d3 2
a4 2
 * $Author: bcn $
 * $Locker: spm $
d6 3
d41 1
a41 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 1.8 85/11/17 13:43:05 bcn Exp $";
d95 1
a95 1
    bcopy(ptr,&time_sec,4);                             /* issue time   */
@


1.8
log
@Split create_ticket and decomp_ticet into different files to make
ready for libkrb.  Also added documentation and cleaned up some code.
@
text
@d4 6
a9 2
 * $Locker:  $
 * $Log:        decomp_ticket.c,v $
d38 1
a38 1
static char *rcsid_decomp_ticket_c = "$Header: decomp_ticket.c,v 1.8 85/11/16 15:50:14 bcn Exp $";
d76 1
a76 1
    set_key(key,key_s);
@


1.7
log
@Add realm to argument list for decomp_ticket.
@
text
@d2 1
a2 1
 * $Source: /mit/projects/auth/src/kdc/RCS/ticket.c,v $
d5 4
a8 1
 * $Log:	ticket.c,v $
d34 2
a35 2
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.6 85/11/13 10:58:39 bcn Exp $";
#endif	lint
d37 1
a37 1
#include	<stdio.h>
d39 1
a39 1
#include "/projects/auth/src/kdc/prot.h"
d41 9
a49 47
create_ticket(tkt,aname,realm,address,session,perm,quota,life,time_sec,sname,instance,key)
TEXT	tkt;
char	*aname;
char	*realm;
long	address;
char	*session;
short	perm;
short	quota;
short	life;
long	time_sec;
char	*sname;
char	*instance;
char	*key;
{
	Key_schedule    key_s;
	tkt->length = 0;
	strcpy(tkt->dat,aname);
	tkt->length = 1 + strlen(aname);
	strcpy(tkt->dat+tkt->length,realm);
	tkt->length = 1 + strlen(realm);
	bcopy(&address,tkt->dat+tkt->length,4);
	tkt->length += 4;
	bcopy(session,tkt->dat+tkt->length,8);
	tkt->length += 8;
	bcopy(&perm,tkt->dat+tkt->length,2);
	tkt->length += 2;
	bcopy(&quota,tkt->dat+tkt->length,2);
	tkt->length += 2;
	*(tkt->dat+(tkt->length)++) = (char) life;
	bcopy(&time_sec,tkt->dat+tkt->length,4);
	tkt->length += 4;
	strcpy(tkt->dat+tkt->length,sname);
	tkt->length += 1 + strlen(sname);
	strcpy(tkt->dat+tkt->length,instance);
	tkt->length += 1 + strlen(instance);
	/* guarantee null padded ticket to multiple of 8 bytes				   */
	bzero(tkt->dat+tkt->length,7);
    tkt->length = ((tkt->length+7)/8)*8;
	if (tkt->length > (sizeof(TEXT_ST) - 7))
		{
		log(" ticket too long %s %s %s",aname,sname,instance);
		fprintf(stderr,"\nTicket too long");
		tkt->length = 0;
		return;
		}	
	set_key(key,key_s);
	cbc_encrypt(tkt->dat,tkt->dat,tkt->length,key_s,key,1);
a50 1
}
d52 14
a66 13
decomp_ticket(tkt,aname,realm,address,session,perm,quota,life,time_sec,sname,instance,key)
TEXT	tkt;
char	*aname;
char	*realm;
long	address;
char	*session;
short	perm;
short	quota;
short	life;
long	time_sec;
char	*sname;
char	*instance;
char	*key;
d68 2
a69 2
	Key_schedule    key_s;
	char		*ptr = tkt->dat;
d71 23
a93 21
	set_key(key,key_s);
	cbc_encrypt(tkt->dat,tkt->dat,tkt->length,key_s,key,0);
	strcpy(aname,ptr);
	ptr += strlen(aname) + 1;
	strcpy(realm,ptr);
	ptr += strlen(aname) + 1;
	bcopy(ptr,&address,4);
	ptr += 4;
	bcopy(ptr,session,8);
	ptr+= 8;
	bcopy(ptr,&perm,2);
	ptr += 2;
	bcopy(ptr,&quota,2);
	ptr += 2;
	life = (short) *(ptr++);
	bcopy(ptr,&time_sec,4);
	ptr += 4;
	strcpy(sname,ptr);
	ptr += 1 + strlen(sname);
	strcpy(instance,ptr);
	ptr += 1 + strlen(instance);
@


1.6
log
@Add realm to definition of ticket.
@
text
@d3 2
a4 2
 * $Author: spm $
 * $Locker: bcn $
d6 3
d31 1
a31 1
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.5 85/10/23 17:13:00 spm Exp $";
d89 1
a89 1
decomp_ticket(tkt,aname,address,session,perm,quota,life,time_sec,sname,instance,key)
@


1.5
log
@add bzero for null padding and add length check
@
text
@d3 2
a4 2
 * $Author: bcn $
 * $Locker: spm $
d6 3
d28 1
a28 1
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.4 85/10/23 14:45:16 bcn Exp $";
d35 1
a35 1
create_ticket(tkt,aname,address,session,perm,quota,life,time_sec,sname,instance,key)
d38 1
d53 2
d89 1
d105 3
a107 1
	strcpy(aname,tkt->dat);
@


1.4
log
@create_ticket no longer returns anything.
@
text
@d4 1
a4 1
 * $Locker:  $
d6 3
d25 1
a25 1
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.3 85/10/23 13:54:58 bcn Exp $";
d28 1
d64 10
a73 1
        tkt->length = ((tkt->length+7)/8)*8;
@


1.3
log
@create_ticket now takes a TEXT stucture as and argument
instead of creating it.
@
text
@d6 4
d22 1
a22 1
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.2 85/10/18 13:58:31 bcn Exp $";
a27 1
TEXT
a63 1
	return(tkt);
@


1.2
log
@Add code to decomp_ticket
@
text
@d4 1
a4 1
 * $Locker: bcn $
d6 3
d18 1
a18 1
static char *rcsid_ticket_c = "$Header: ticket.c,v 1.1 85/10/11 16:29:52 bcn Exp $";
d25 2
a26 1
create_ticket(aname,address,session,perm,quota,life,time_sec,sname,instance,key)
d39 1
a39 1
	TEXT	tkt = (TEXT) malloc(sizeof(TEXT_ST));
@


1.1
log
@Initial revision
@
text
@d2 7
a8 4
 * $Source: $
 * $Author: $
 * $Locker: $
 * $Log:    $
d15 1
a15 1
static char *rcsid_ticket_c = "$Header: $";
d61 2
a62 1
decomp_ticket(aname,address,session,perm,quota,life,time_sec,sname,instance,key)
d74 22
d97 1
@
