head     4.1;
branch   ;
access   ;
symbols  PATCH8:4.0 PATCH7:4.0 KPATCH6:4.0 ASRSNAP1001:4.0 PATCH5:4.0 KPATCH4:4.0 KPATCH3:4.0 KPATCH2:4.0 KREL1:4.0;
locks    ; strict;
comment  @ * @;


4.1
date     90.06.25.20.55.48;  author kfall;  state Exp;
branches ;
next     4.0;

4.0
date     89.01.23.10.08.55;  author jtkohl;  state Exp;
branches ;
next     1.1;

1.1
date     89.01.22.19.47.03;  author rfrench;  state Exp;
branches ;
next     ;


desc
@Routine to retrieve the names of admin servers given a Kerberos realm.
@


4.1
log
@include des.h
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/get_admhst.c,v $
 * $Author: jtkohl $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_get_admhst_c =
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/get_admhst.c,v 4.0 89/01/23 10:08:55 jtkohl Exp Locker: kfall $";
#endif /* lint */

#include <mit-copyright.h>
#include <stdio.h>
#include <des.h>
#include <krb.h>
#include <string.h>

/*
 * Given a Kerberos realm, find a host on which the Kerberos database
 * administration server can be found.
 *
 * krb_get_admhst takes a pointer to be filled in, a pointer to the name
 * of the realm for which a server is desired, and an integer n, and
 * returns (in h) the nth administrative host entry from the configuration
 * file (KRB_CONF, defined in "krb.h") associated with the specified realm.
 *
 * On error, get_admhst returns KFAILURE. If all goes well, the routine
 * returns KSUCCESS.
 *
 * For the format of the KRB_CONF file, see comments describing the routine
 * krb_get_krbhst().
 *
 * This is a temporary hack to allow us to find the nearest system running
 * a Kerberos admin server.  In the long run, this functionality will be
 * provided by a nameserver.
 */

krb_get_admhst(h, r, n)
    char *h;
    char *r;
    int n;
{
    FILE *cnffile;
    char tr[REALM_SZ];
    char linebuf[BUFSIZ];
    char scratch[64];
    register int i;

    if ((cnffile = fopen(KRB_CONF,"r")) == NULL) {
            return(KFAILURE);
    }
    if (fgets(linebuf, BUFSIZ, cnffile) == NULL) {
	/* error reading */
	(void) fclose(cnffile);
	return(KFAILURE);
    }
    if (!index(linebuf, '\n')) {
	/* didn't all fit into buffer, punt */
	(void) fclose(cnffile);
	return(KFAILURE);
    }
    for (i = 0; i < n; ) {
	/* run through the file, looking for admin host */
	if (fgets(linebuf, BUFSIZ, cnffile) == NULL) {
            (void) fclose(cnffile);
            return(KFAILURE);
        }
	/* need to scan for a token after 'admin' to make sure that
	   admin matched correctly */
	if (sscanf(linebuf, "%s %s admin %s", tr, h, scratch) != 3)
	    continue;
        if (!strcmp(tr,r))
            i++;
    }
    (void) fclose(cnffile);
    return(KSUCCESS);
}
@


4.0
log
@No change, incrementing vno to 4.x
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/get_admhst.c,v $
 * $Author: rfrench $
d14 1
a14 1
"$Header: get_admhst.c,v 1.1 89/01/22 19:47:03 rfrench Exp $";
d19 1
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/get_krbhst.c,v $
 * $Author: jtkohl $
d14 1
a14 1
"$Header: get_krbhst.c,v 4.7 88/11/15 16:21:46 jtkohl Exp $";
@
