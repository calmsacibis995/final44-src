head     4.11;
branch   ;
access   ;
symbols  PATCH8:4.10 PATCH7:4.10 KPATCH6:4.10 ASRSNAP1001:4.10 PATCH5:4.10 KPATCH4:4.10 KPATCH3:4.9 KPATCH2:4.9 KREL1:4.9 BETA5/24/88:4.8;
locks    ; strict;
comment  @ * @;


4.11
date     90.06.25.20.55.51;  author kfall;  state Exp;
branches ;
next     4.10;

4.10
date     89.05.31.17.46.22;  author jtkohl;  state Exp;
branches ;
next     4.9;

4.9
date     88.11.08.15.12.09;  author jtkohl;  state Exp;
branches ;
next     4.8;

4.8
date     88.04.15.15.15.22;  author steiner;  state Exp;
branches ;
next     4.7;

4.7
date     88.02.26.17.35.27;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.24.18.11.47;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.01.29.21.05.59;  author jtkohl;  state Exp;
branches ;
next     4.4;

4.4
date     88.01.12.21.19.38;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.12.06.11.22.58;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.10.20.17.08.40;  author jtkohl;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.46.28;  author steiner;  state Exp;
branches ;
next     3.8;

3.8
date     86.12.22.11.25.07;  author root;  state Exp;
branches ;
next     3.7;

3.7
date     86.12.08.14.31.56;  author root;  state Exp;
branches ;
next     3.6;

3.6
date     86.09.05.16.12.14;  author bcn;  state Exp;
branches ;
next     3.5;

3.5
date     86.08.15.09.46.57;  author bcn;  state Exp;
branches ;
next     3.4;

3.4
date     86.08.12.12.32.47;  author bcn;  state Exp;
branches ;
next     3.3;

3.3
date     86.07.16.12.07.22;  author bcn;  state Exp;
branches ;
next     3.2;

3.2
date     86.04.04.18.08.49;  author spm;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.09.12.53;  author bcn;  state Exp;
branches ;
next     1.7;

1.7
date     85.12.06.14.30.47;  author bcn;  state Exp;
branches ;
next     1.6;

1.6
date     85.11.26.14.27.50;  author bcn;  state Exp;
branches ;
next     1.5;

1.5
date     85.11.20.12.01.33;  author bcn;  state Exp;
branches ;
next     1.4;

1.4
date     85.11.18.14.13.21;  author bcn;  state Exp;
branches ;
next     1.3;

1.3
date     85.11.18.11.57.46;  author bcn;  state Exp;
branches ;
next     1.2;

1.2
date     85.11.12.14.30.34;  author bcn;  state Exp;
branches ;
next     1.1;

1.1
date     85.10.10.11.18.19;  author bcn;  state Exp;
branches ;
next     ;


desc
@Initial RCS checkin
@


4.11
log
@include des.h
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/get_cred.c,v $
 * $Author: jtkohl $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_get_cred_c =
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/get_cred.c,v 4.10 89/05/31 17:46:22 jtkohl Exp Locker: kfall $";
#endif /* lint */

#include <mit-copyright.h>
#include <stdio.h>
#include <des.h>
#include <krb.h>

/*
 * krb_get_cred takes a service name, instance, and realm, and a
 * structure of type CREDENTIALS to be filled in with ticket
 * information.  It then searches the ticket file for the appropriate
 * ticket and fills in the structure with the corresponding
 * information from the file.  If successful, it returns KSUCCESS.
 * On failure it returns a Kerberos error code.
 */

krb_get_cred(service,instance,realm,c)
    char *service;              /* Service name */
    char *instance;             /* Instance */
    char *realm;                /* Auth domain */
    CREDENTIALS *c;             /* Credentials struct */
{
    int tf_status;              /* return value of tf function calls */

    /* Open ticket file and lock it for shared reading */
    if ((tf_status = tf_init(TKT_FILE, R_TKT_FIL)) != KSUCCESS)
	return(tf_status);

    /* Copy principal's name and instance into the CREDENTIALS struc c */

    if ( (tf_status = tf_get_pname(c->pname)) != KSUCCESS ||
    	 (tf_status = tf_get_pinst(c->pinst)) != KSUCCESS )
	return (tf_status);

    /* Search for requested service credentials and copy into c */
       
    while ((tf_status = tf_get_cred(c)) == KSUCCESS) {
        /* Is this the right ticket? */
	if ((strcmp(c->service,service) == 0) &&
           (strcmp(c->instance,instance) == 0) &&
           (strcmp(c->realm,realm) == 0))
		   break;
    }
    (void) tf_close();

    if (tf_status == EOF)
	return (GC_NOTKT);
    return(tf_status);
}
@


4.10
log
@remove unnecessary #include <sys/xxx> include macros.
Programmer: Stan Zanarotti
Auditor: John Kohl
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/lib/krb/RCS/get_cred.c,v $
d14 1
a14 1
"$Header: get_cred.c,v 4.9 88/11/08 15:12:09 jtkohl Exp $";
d19 1
@


4.9
log
@Programmer: Jennifer Steiner
Auditor: John Kohl
clean up code a bit: fix some comments, plus some stylistic
changes (no real change in function)
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: get_cred.c,v 4.8 88/04/15 15:15:22 steiner Exp $";
a19 2
#include <sys/types.h>
#include <sys/stat.h>
@


4.8
log
@Modified to use tf_util routines.
Programmer: billb.
Auditor: jtkohl.
@
text
@d14 1
a14 1
"$Header: get_cred.c,v 4.7 88/02/26 17:35:27 steiner Exp $";
a22 2
char *tkt_string();

d28 2
a29 2
 * information from the file.  If successful it returns GC_OK (0) on
 * failure it returns a kerberos error code.
a41 1
      {
a42 1
      }
d46 2
a47 6
    if ((tf_status = tf_get_pname(c->pname)) != KSUCCESS)
	{
	  return (tf_status);
	}
    if ((tf_status = tf_get_pinst(c->pinst)) != KSUCCESS)
      {
a48 1
      }
d52 1
a52 2
    while ((tf_status = tf_get_cred(c)) == KSUCCESS)
      {
d54 1
a54 1
       if ((strcmp(c->service,service) == 0) &&
d57 3
a59 8
	 {
	   break;
	 }
       else
	 {
	   continue;
	 }
     }
d61 1
a61 13
    /* If proper credential found, return GC_OK */

    if (tf_status == KSUCCESS)
      {
	(void) tf_close();
	return (GC_OK);
      }

    /* Else return proper error code */

    else if (tf_status == EOF)
      {
	(void) tf_close();
d63 2
a64 8
      }
    else
      {
	(void) tf_close();
	return(tf_status);
      }
  }

@


4.7
log
@Fixed the checking of fread return values;
took out unnecessary "count" variable.
Programmer: jtkohl.
Auditor: wesommer.
@
text
@d14 1
a14 1
"$Header: get_cred.c,v 4.6 88/02/24 18:11:47 steiner Locked $";
d40 1
a40 4
    KTEXT ticket = &c->ticket_st; /* The ticket itself */
    FILE *tktfile;
    uid_t me, getuid();
    struct stat buf;
d42 5
a46 4
    /* Open ticket file */
    me = getuid ();
    if (lstat(TKT_FILE,&buf) < 0)
        return(GC_TKFIL);
d48 1
a48 3
    if ((buf.st_uid != me && buf.st_uid != 0)
        || !(buf.st_mode & S_IFREG) || buf.st_mode & 077)
        return(GC_TKFIL);       /* Evil */
d50 8
a57 2
    if ((tktfile = fopen(TKT_FILE,"r")) == NULL)
        return(GC_TKFIL);
d59 16
a74 2
    (void) fgetst(tktfile,c->pname,ANAME_SZ); /* Read pname */
    (void) fgetst(tktfile,c->pinst,INST_SZ); /* And instance */
d76 22
a97 35
    while(fgetst(tktfile,c->service,SNAME_SZ) > 0) { /* Read sname */
        (void) fgetst(tktfile,c->instance,INST_SZ); /* Instance */
        (void) fgetst(tktfile,c->realm,REALM_SZ); /* Realm */
        /* Session key */
        if (fread((char *)(c->session), 1, 8, tktfile) != 8)
            goto bad;
        /* Lifetime */
        if (fread((char *) &(c->lifetime), sizeof(long),  1, tktfile)
	    != 1)
            goto bad;
        if (fread((char *) &(c->kvno), sizeof(long), 1, tktfile)
            != 1)
            goto bad;
        if (fread((char *) &(ticket->length), sizeof(long),  1, tktfile)
	    != 1)
            goto bad;
        if (fread((char *) (ticket->dat), 1,  ticket->length, tktfile)
            != ticket->length)
            goto bad;
        if (fread((char *) &(c->issue_date), sizeof(long), 1, tktfile)
	    != 1)
            goto bad;
        /* Is this the right ticket */
        if ((strcmp(c->service,service) == 0) &&
            (strcmp(c->instance,instance) == 0) &&
            (strcmp(c->realm,realm) == 0)) {
            (void) fclose(tktfile);
            return(GC_OK);
        }
    }
    /* Can't find the requested ticket */
bad:
    (void) fclose(tktfile);
    return(GC_NOTKT);
}
@


4.6
log
@Copyright notice, etc.
@
text
@d3 1
a3 1
 * $Author: jtkohl $
d14 1
a14 1
"$Header: get_cred.c,v 4.5 88/01/29 21:05:59 steiner Locked $";
a43 1
    int count;                  /* count for read */
d68 1
a68 1
	    != sizeof(int))
d71 1
a71 1
            != sizeof(int))
d74 1
a74 1
	    != sizeof(int))
a75 1
        count = ticket->length;
d77 1
a77 1
            != count)
d80 1
a80 1
	    != sizeof(long))
@


4.5
log
@Use stdio for more efficient reading (buffering).
Programmer: wesommer
Auditor: jtkohl
@
text
@d2 2
a3 3
 *      $Source: /mit/kerberos/src/lib/krb/RCS/get_cred.c,v $
 *      $Author: steiner $
 *      $Locker:  $
d5 2
a6 1
 * Copyright 1985,1986 by the Massachusetts Institute of Technology
d8 2
d13 2
a14 2
static char *rcsid_get_credentials_c =
    "$Header: get_cred.c,v 4.4 88/01/12 21:19:38 steiner Exp $";
d17 1
@


4.4
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 1
a2 1
 *      $Source: /mit/kerberos/lib/krb/RCS/get_cred.c,v $
d12 1
a12 1
    "$Header: get_cred.c,v 4.3 87/12/06 11:22:58 steiner Exp $";
d38 1
a38 1
    int tktfile, open();
d52 1
a52 1
    if ((tktfile = open(TKT_FILE,0)) < NULL)
d55 2
a56 2
    (void) getst(tktfile,c->pname,ANAME_SZ); /* Read pname */
    (void) getst(tktfile,c->pinst,INST_SZ); /* And instance */
d58 3
a60 3
    while(getst(tktfile,c->service,SNAME_SZ) > 0) { /* Read sname */
        (void) getst(tktfile,c->instance,INST_SZ); /* Instance */
        (void) getst(tktfile,c->realm,REALM_SZ); /* Realm */
d62 1
a62 1
        if (read(tktfile,(char *)(c->session),8) != 8)
d65 2
a66 2
        if (read(tktfile, (char *) &(c->lifetime),
                 sizeof(int)) != sizeof(int))
d68 1
a68 1
        if (read(tktfile, (char *) &(c->kvno),sizeof(int))
d71 2
a72 2
        if (read(tktfile, (char *) &(ticket->length),
                 sizeof(int)) != sizeof(int))
d75 1
a75 1
        if (read(tktfile, (char *) (ticket->dat), ticket->length)
d78 2
a79 2
        if (read(tktfile, (char *) &(c->issue_date),
                 sizeof(long)) != sizeof(long))
d85 1
a85 1
            (void) close(tktfile);
d91 1
a91 1
    (void) close(tktfile);
@


4.3
log
@Changed user routine names to krb_xxxxxxx
@
text
@d1 1
a1 1
/* 
d3 2
a4 2
 *      $Author: jtkohl $
 *      $Locker: steiner $
d11 3
a13 2
static char *rcsid_get_credentials_c = "$Header: get_cred.c,v 4.2 87/10/20 17:08:40 steiner Locked $";
#endif  lint
d15 4
a18 4
#include        <stdio.h>
#include        <krb.h>
#include	<sys/types.h>
#include	<sys/stat.h>
d23 2
a24 2
 * krb_get_cred takes a service name, instance, and realm, and
 * a structure of type CREDENTIALS to be filles in with ticket
d26 3
a28 3
 * ticket and fills in the structure with the corresponding information
 * from the file.  If successful it returns GC_OK (0) on failure it
 * returns a kerberos error code.
d32 4
a35 4
char            *service;       /* Service name                 */
char            *instance;      /* Instance                     */
char            *realm;         /* Auth domain                  */
CREDENTIALS	*c;		/* Credentials struct 		*/
d37 3
a39 3
    KTEXT       ticket = &c->ticket_st;   /* The ticket itself  */
    int         tktfile, open();
    uid_t	me, getuid();
d41 1
a41 1
    int count;				/* count for read */
d46 1
a46 1
	 return(GC_TKFIL);
d49 2
a50 2
			|| !(buf.st_mode & S_IFREG) || buf.st_mode & 077)
	 return(GC_TKFIL);			    /* Evil */
d53 1
a53 1
         return(GC_TKFIL);
d59 29
a87 27
	    (void) getst(tktfile,c->instance,INST_SZ); /* Instance */
	    (void) getst(tktfile,c->realm,REALM_SZ); /* Realm */
	    /* Session key */
	    if (read(tktfile,(char *)(c->session),8) != 8)
		    goto bad;
	    /* Lifetime */
	    if (read(tktfile, (char *) &(c->lifetime),
		     sizeof(int)) != sizeof(int))
		    goto bad;
	    if (read(tktfile, (char *) &(c->kvno),sizeof(int)) != sizeof(int))
		    goto bad;
	    if (read(tktfile, (char *) &(ticket->length),
		     sizeof(int)) != sizeof(int))
		    goto bad;
	    count = ticket->length;
	    if (read(tktfile, (char *) (ticket->dat), ticket->length) != count)
		    goto bad;
	    if (read(tktfile, (char *) &(c->issue_date),
		     sizeof(long)) != sizeof(long))
		    goto bad;
	    /* Is this the right ticket */
	    if ((strcmp(c->service,service) == 0) && 
		(strcmp(c->instance,instance) == 0) &&
		(strcmp(c->realm,realm) == 0)) {
		    (void) close(tktfile);
		    return(GC_OK);
	    }
a93 1

@


4.2
log
@lint fixes
@
text
@d2 3
a4 3
 *      $Source: /u3/kerberos.new/lib/krb/RCS/get_credentials.c,v $
 *      $Author: steiner $
 *      $Locker: jtkohl $
d11 1
a11 1
static char *rcsid_get_credentials_c = "$Header: get_credentials.c,v 4.1 87/09/01 15:46:28 jtkohl Locked $";
d22 1
a22 1
 * get_credentials takes a service name, instance, and realm, and
d30 1
a30 1
get_credentials(service,instance,realm,c)
@


4.1
log
@No change; starting version 4.
@
text
@d2 3
a4 3
 *      $Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/get_credentials.c,v $
 *      $Author: root $
 *      $Locker: steiner $
d11 1
a11 1
static char *rcsid_get_credentials_c = "$Header: get_credentials.c,v 3.8 86/12/22 11:25:07 steiner Locked $";
d37 2
a38 2
    int         tktfile, open(), getuid();
    int		me;
d40 1
d54 2
a55 2
    getst(tktfile,c->pname,ANAME_SZ);		    /* Read pname   */
    getst(tktfile,c->pinst,INST_SZ);                /* And instance */
d57 33
a89 19
    while(getst(tktfile,c->service,SNAME_SZ) > 0)   /* Read sname   */
         {getst(tktfile,c->instance,INST_SZ);       /* Instance     */
          getst(tktfile,c->realm,REALM_SZ);         /* Realm        */
          read(tktfile,c->session,8);               /* Session key  */
          read(tktfile,&(c->lifetime),sizeof(int)); /* Lifetime     */
          read(tktfile,&(c->kvno),sizeof(int));    
          read(tktfile,&(ticket->length),sizeof(int));  
          read(tktfile,ticket->dat,ticket->length);
          read(tktfile,&(c->issue_date),sizeof(long));
          /* Is this the tight ticket */
          if ((strcmp(c->service,service) == 0) && 
	      (strcmp(c->instance,instance) == 0) &&
              (strcmp(c->realm,realm) == 0))
              {close(tktfile);
               return(GC_OK);}
          }
        /* Can't find the requested ticket */
        close(tktfile);
        return(GC_NOTKT);
@


3.8
log
@fixed so that root is trusted (for RFS).  (Root can circumvent security
anyway, since can make a copy of a user's ticket file.)
@
text
@d2 1
a2 1
 *      $Source: /source/kerberos/lib/krb/RCS/get_credentials.c,v $
d4 1
a4 1
 *      $Locker: root $
d11 1
a11 1
static char *rcsid_get_credentials_c = "$Header: get_credentials.c,v 3.7 86/12/08 14:31:56 root Locked $";
@


3.7
log
@added ticket file ownership checks, due to srz
@
text
@d2 3
a4 3
 *      $Source: /mit/projects/auth/src/lib/krb/RCS/get_credentials.c,v $
 *      $Author: bcn $
 *      $Locker: bcn $
d11 1
a11 1
static char *rcsid_get_credentials_c = "$Header: get_credentials.c,v 3.5 86/08/15 09:46:57 bcn Exp $";
d46 2
a47 2
    if (buf.st_uid != me || !(buf.st_mode & S_IFREG) ||
	buf.st_mode & 077)
@


3.6
log
@Start checking realm.
@
text
@d16 2
d37 3
a39 1
    int         tktfile, open();
d42 8
@


3.5
log
@Cleand up error messages and comments.
@
text
@d11 1
a11 1
static char *rcsid_get_credentials_c = "$Header: get_credentials.c,v 3.4 86/08/12 12:32:47 bcn Exp $";
d55 2
a56 2
	      (strcmp(c->instance,instance) == 0) /* &&
              (strcmp(c->realm,realm) == 0)*/)
@


3.4
log
@Name changed from retrieve to get_credentials.  Arguments changed.
A struct of type CREDENTIALS is now taken.
@
text
@d2 1
a2 1
 *      $Source: /mit/projects/auth/src/lib/krb/RCS/retrieve.c,v $
d11 1
a11 1
static char *rcsid_get_credentials_c = "$Header: retrieve.c,v 3.3 86/07/16 12:07:22 bcn Exp $";
d20 6
a25 5
 * retrieve takes a service name, instance, and realm, and variables
 * to be filles in with ticket information.  it then searches the
 * ticket file for the appropriate ticket and fills in the variables
 * with the corresponding information from the file.  If successful it
 * returns KSUCCESS (0) on failure it returns KFAILURE (1).
a36 2
    char        s[SNAME_SZ],i[INST_SZ],r[REALM_SZ]; /* Temp     */
        
d39 1
a39 1
         return(RET_TKFIL);
d58 1
a58 1
               return(KSUCCESS);}
d62 1
a62 1
        return(RET_NOTKT);
@


3.3
log
@retrieve will no longe print an error message.  Insteadm ut just
returns the appropriate error code.  It is up to the calling
procedure to print a message if appropriate.
@
text
@d3 2
a4 2
 *      $Author: spm $
 *      $Locker:  $
d11 1
a11 1
static char *rcsid_retrieve_c = "$Header: retrieve.c,v 3.2 86/04/04 18:08:49 spm Exp $";
d27 1
a27 1
retrieve(service,instance,realm,session,lifetime,kvno,ticket,issue_date,pname,pinst)
d31 1
a31 7
C_Block         session;     /* Session key                  */
int             *lifetime;      /* Lifetime                     */
int             *kvno;          /* Key version number           */
KTEXT           ticket;         /* The ticket itself            */
long            *issue_date;    /* The issue time               */
char		*pname;		/* Principal's name		*/
char            *pinst;         /* Principal's instance         */
d33 1
d35 1
d42 2
a43 2
    getst(tktfile,pname,ANAME_SZ);		/* Read pname	*/
    getst(tktfile,pinst,INST_SZ);               /* And instance */
d45 6
a50 6
    while(getst(tktfile,s,SNAME_SZ) > 0)        /* Read sname   */
         {getst(tktfile,i,INST_SZ);             /* Instance     */
          getst(tktfile,r,REALM_SZ);            /* Realm        */
          read(tktfile,session,8);              /* Session key  */
          read(tktfile,lifetime,sizeof(int));   /* Lifetime     */
          read(tktfile,kvno,sizeof(int));       /* Key vno      */
d52 2
a53 2
          read(tktfile,ticket->dat,ticket->length); /* Ticket   */
          read(tktfile,issue_date,sizeof(long));/* Issue date   */
d55 3
a57 2
          if ((strcmp(s,service) == 0) && (strcmp(i,instance) == 0) /* &&
              (strcmp(r,realm) == 0)*/)
@


3.2
log
@char to u_char, and C_Block key
@
text
@d3 2
a4 2
 *      $Author: bcn $
 *      $Locker: spm $
d11 1
a11 1
static char *rcsid_retrieve_c = "$Header: retrieve.c,v 3.1 86/03/28 09:12:53 bcn Exp $";
d44 1
a44 2
        {fprintf(stderr,"Error opening %s",TKT_FILE);
         return(KFAILURE);}
d59 2
a60 2
          if ((strcmp(s,service) == 0) && (strcmp(i,instance) == 0) &&
              (strcmp(r,realm) == 0))
d66 1
a66 1
        return(KFAILURE);
@


3.1
log
@Added storage of users instance.  
Changes to prot rev 3 complete.
@
text
@d4 1
a4 1
 *      $Locker: bcn $
d11 1
a11 1
static char *rcsid_retrieve_c = "$Header: retrieve.c,v 1.7 85/12/06 14:30:47 bcn Exp $";
d31 1
a31 1
char            session[8];     /* Session key                  */
@


1.7
log
@Move getst to separate file.
@
text
@a4 22
 *      $Log:	retrieve.c,v $
 * Revision 1.6  85/11/26  14:27:50  bcn
 * Add argument aname which gets filled in.
 * Change SUCCESS to KSUCCESS and FAILURE to KFAILURE.
 * 
 * Revision 1.5  85/11/20  12:01:33  bcn
 * Remove reference to krbdef.h since that is now included in krb.h.
 * 
 * Revision 1.4  85/11/18  14:13:21  bcn
 * Moved routines into separate file to make ready for libkrb.
 * Cleaned up some code and added documentation in places.
 * Added realm to information stored with ticket (part of index).
 * 
 * Revision 1.3  85/11/18  11:57:46  bcn
 * Initialize done to 0 in tkt_string.
 * 
 * Revision 1.2  85/11/12  14:30:34  bcn
 * tkt_string() moved here from clogin.c
 * 
 * Revision 1.1  85/10/10  11:18:19  bcn
 * Initial revision
 * 
d6 1
a6 1
 * Copyright 1985 by the Massachusetts Institute of Technology
d11 1
a11 1
static char *rcsid_retrieve_c = "$Header: retrieve.c,v 1.6 85/11/26 14:27:50 bcn Exp $";
d27 1
a27 1
retrieve(service,instance,realm,session,lifetime,kvno,ticket,issue_date,aname)
d36 2
a37 1
char		*aname;		/* Authentication name		*/
d47 2
a48 1
    getst(tktfile,aname,ANAME_SZ);		/* Read aname	*/
@


1.6
log
@Add argument aname which gets filled in.
Change SUCCESS to KSUCCESS and FAILURE to KFAILURE.
@
text
@d6 4
d33 1
a33 1
static char *rcsid_retrieve_c = "$Header: retrieve.c,v 1.5 85/11/20 12:01:33 bcn Exp $";
a88 21

/* 
 * getst takes a file descriptor, a string and a count.
 * It will read from the file until either it has read
 * count characters, or until it reads a null byte.
 * When finished, what has been read exists in s.  It
 * returns the number of characters read.
 */

getst(fd,s,n)
int     fd;
char    *s;
{
        int count = n;
        while (read(fd,s,1) && --count)
                {if (*(s++) == '\000') return(n - count);}
        *(s++) = '\000';
        return(n - count);

}

@


1.5
log
@Remove reference to krbdef.h since that is now included in krb.h.
@
text
@d6 3
d29 1
a29 1
static char *rcsid_retrieve_c = "$Header: retrieve.c,v 1.4 85/11/18 14:13:21 bcn Exp $";
d42 1
a42 1
 * returns SUCCESS (0) on failure it returns FAILURE (1).
d45 1
a45 1
retrieve(service,instance,realm,session,lifetime,kvno,ticket,issue_date)
d54 1
d62 1
a62 1
         return(FAILURE);}
d64 2
d79 1
a79 1
               return(SUCCESS);}
d83 1
a83 1
        return(FAILURE);
@


1.4
log
@Moved routines into separate file to make ready for libkrb.
Cleaned up some code and added documentation in places.
Added realm to information stored with ticket (part of index).
@
text
@d5 6
a10 1
 *      $Log:   retrieve.c,v $
d26 1
a26 1
static char *rcsid_retrieve_c = "$Header: retrieve.c,v 1.3 85/11/18 11:57:46 bcn Exp $";
a30 1
#include        "krbdef.h"
@


1.3
log
@Initialize done to 0 in tkt_string.
@
text
@d2 7
a8 4
 * 	$Source: /mit/projects/auth/src/client/RCS/storage.c,v $
 * 	$Author: bcn $
 * 	$Locker:  $
 *    	$Log:	storage.c,v $
d21 2
a22 2
static char *rcsid_storage_c = "$Header: storage.c,v 1.2 85/11/12 14:30:34 bcn Exp $";
#endif	lint
d24 3
a26 3
#include	<stdio.h>
#include	"client.h"
#include 	"/projects/auth/src/kdc/prot.h"
d30 7
a36 14
store(service,instance,session,lifetime,kvno,ticket,issue_date)
char		*service;
char		*instance;
char		*session;
int		lifetime;
int		kvno;
TEXT		ticket;
long		issue_date;
{
	int	tktfile, open();
	
	if ((tktfile = open(TKT_FILE,2)) < NULL)
		{fprintf(stderr,"Error opening %s",TKT_FILE);
		return;}
d38 9
a46 21
	lseek(tktfile,0L,2);

	write(tktfile,service,strlen(service)+1);
	write(tktfile,instance,strlen(instance)+1);
	write(tktfile,session,8);
	write(tktfile,&lifetime,sizeof(int));
	write(tktfile,&kvno,sizeof(int));
	write(tktfile,&(ticket->length),sizeof(int));
	write(tktfile,ticket->dat,ticket->length);
	write(tktfile,&issue_date,sizeof(long));
	close(tktfile);
}

retrieve(service,instance,session,lifetime,kvno,ticket,issue_date)
char		*service;
char		*instance;
char		session[8];
int		*lifetime;
int		*kvno;
TEXT		ticket;
long		*issue_date;
d48 7
a54 6
	int	tktfile, open();
	char	s[100],i[100];	/* These should be defined */
	
	if ((tktfile = open(TKT_FILE,0)) < NULL)
		{fprintf(stderr,"Error opening %s",TKT_FILE);
		return;}
d56 18
a73 15
	while(getst(tktfile,s,100) > 0)

		{getst(tktfile,i,100);
		 read(tktfile,session,8);
		 read(tktfile,lifetime,sizeof(int));
		 read(tktfile,kvno,sizeof(int));
		 read(tktfile,&(ticket->length),sizeof(int));	
		 read(tktfile,ticket->dat,ticket->length);		 
		 read(tktfile,issue_date,sizeof(long));		 

		 if ((strcmp(s,service) == 0) && 
		     (strcmp(i,instance) == 0)) break;
		}
	close(tktfile);

d76 7
a82 2
/* Note the value returned is supposed to be the number of 
   characters read, but it may not be accurate */
d85 2
a86 2
int	fd;
char	*s;
d88 5
a92 5
	int count = n;
	while (read(fd,s,1) && --count)
		{if (*(s++) == '\000') return(n - count);}
	*(s++) = '\000';
	return(n - count);
a96 28
in_tkt()
{
	int	tktfile, creat();
	
	if ((tktfile = creat(TKT_FILE,0700)) < 0)
		{fprintf(stderr,"Error initializing %s",TKT_FILE);
		return;}

	close(tktfile);
}


#ifdef	BSD42
char *tkt_string()
{
	static	char	s[64];
	static	char	uid[5];
	static	int	done = 0;
	if (!done)
		{
		strcpy(s,TKT_ROOT);
		sprintf(uid,"%d",getuid());
		strcat(s,uid);
		done = 1;
		}
	return s;
}
#endif
@


1.2
log
@tkt_string() moved here from clogin.c
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d6 3
d18 1
a18 1
static char *rcsid_storage_c = "$Header: storage.c,v 1.1 85/10/10 11:18:19 bcn Exp $";
d25 2
d121 1
a121 1
	static	int		done;
@


1.1
log
@Initial revision
@
text
@d2 7
a8 4
 * 	$Source: $
 * 	$Author: $
 * 	$Locker: $
 *    	$Log:	 $
d15 1
a15 1
static char *rcsid_storage_c = "$Header: $";
d109 18
@
