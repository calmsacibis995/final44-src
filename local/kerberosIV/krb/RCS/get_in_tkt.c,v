head     4.13;
branch   ;
access   ;
symbols  PATCH8:4.12 PATCH7:4.12 KPATCH6:4.12 ASRSNAP1001:4.12 PATCH5:4.12 KPATCH4:4.11 KPATCH3:4.11 KPATCH2:4.10 KREL1:4.9 BETA5/24/88:4.5;
locks    ; strict;
comment  @ * @;


4.13
date     90.06.23.03.10.32;  author kfall;  state Exp;
branches ;
next     4.12;

4.12
date     89.07.18.16.32.56;  author jtkohl;  state Exp;
branches ;
next     4.11;

4.11
date     89.04.28.11.05.41;  author jtkohl;  state Exp;
branches ;
next     4.10;

4.10
date     89.03.22.22.04.25;  author jon;  state Exp;
branches ;
next     4.9;

4.9
date     89.01.13.18.23.36;  author steiner;  state Exp;
branches ;
next     4.8;

4.8
date     88.12.09.16.15.46;  author steiner;  state Exp;
branches ;
next     4.7;

4.7
date     88.12.05.15.21.05;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     88.12.01.13.58.59;  author jtkohl;  state Exp;
branches ;
next     4.5;

4.5
date     88.02.24.18.11.55;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     88.01.12.21.19.46;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.29.10.39.11;  author jtkohl;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.20.28;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.46.31;  author steiner;  state Exp;
branches ;
next     3.8;

3.8
date     87.07.06.14.11.41;  author jis;  state Exp;
branches ;
next     3.7;

3.7
date     87.07.06.13.58.16;  author jis;  state Exp;
branches ;
next     ;


desc
@Get initial ticket given a password.
@


4.13
log
@put the word "Kerberos" in the password prompt
@
text
@/*
 *
 * $Source: /usr/src/kerberosIV/krb/RCS/get_in_tkt.c,v $
 * $Author: jtkohl $
 *
 * Copyright 1987, 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char rcsid_get_in_tkt_c[] =
"$Header: /usr/src/kerberosIV/krb/RCS/get_in_tkt.c,v 4.12 89/07/18 16:32:56 jtkohl Exp Locker: kfall $";
#endif /* lint */

#include <mit-copyright.h>
#include <des.h>
#include <krb.h>
#include <prot.h>

#ifndef NULL
#define NULL 0
#endif

/*
 * This file contains two routines: passwd_to_key() converts
 * a password into a DES key (prompting for the password if
 * not supplied), and krb_get_pw_in_tkt() gets an initial ticket for
 * a user.
 */

/*
 * passwd_to_key(): given a password, return a DES key.
 * There are extra arguments here which (used to be?)
 * used by srvtab_to_key().
 *
 * If the "passwd" argument is not null, generate a DES
 * key from it, using string_to_key().
 *
 * If the "passwd" argument is null, call des_read_password()
 * to prompt for a password and then convert it into a DES key.
 *
 * In either case, the resulting key is put in the "key" argument,
 * and 0 is returned.
 */

/*ARGSUSED */
static int passwd_to_key(user,instance,realm,passwd,key)
    char *user, *instance, *realm, *passwd;
    C_Block key;
{
#ifdef NOENCRYPTION
    if (!passwd)
	placebo_read_password(key, "Password: ", 0);
#else /* Do encyryption */
    if (passwd)
        string_to_key(passwd, key);
    else {
        des_read_password(key, "Kerberos Password: ", 0);
    }
#endif /* NOENCRYPTION */
    return (0);
}

/*
 * krb_get_pw_in_tkt() takes the name of the server for which the initial
 * ticket is to be obtained, the name of the principal the ticket is
 * for, the desired lifetime of the ticket, and the user's password.
 * It passes its arguments on to krb_get_in_tkt(), which contacts
 * Kerberos to get the ticket, decrypts it using the password provided,
 * and stores it away for future use.
 *
 * krb_get_pw_in_tkt() passes two additional arguments to krb_get_in_tkt():
 * the name of a routine (passwd_to_key()) to be used to get the
 * password in case the "password" argument is null and NULL for the
 * decryption procedure indicating that krb_get_in_tkt should use the 
 * default method of decrypting the response from the KDC.
 *
 * The result of the call to krb_get_in_tkt() is returned.
 */

krb_get_pw_in_tkt(user,instance,realm,service,sinstance,life,password)
    char *user, *instance, *realm, *service, *sinstance;
    int life;
    char *password;
{
    return(krb_get_in_tkt(user,instance,realm,service,sinstance,life,
                          passwd_to_key, NULL, password));
}

#ifdef NOENCRYPTION
/*
 * $Source: /usr/src/kerberosIV/krb/RCS/get_in_tkt.c,v $
 * $Author: jtkohl $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * This routine prints the supplied string to standard
 * output as a prompt, and reads a password string without
 * echoing.
 */

#ifndef	lint
static char rcsid_read_password_c[] =
"$Header: /usr/src/kerberosIV/krb/RCS/get_in_tkt.c,v 4.12 89/07/18 16:32:56 jtkohl Exp Locker: kfall $";
#endif	lint

#include <des.h>
#include "conf.h"

#include <stdio.h>
#ifdef	BSDUNIX
#include <strings.h>
#include <sys/ioctl.h>
#include <signal.h>
#include <setjmp.h>
#else
char     *strcpy();
int      strcmp();
#endif

#ifdef	BSDUNIX
static jmp_buf env;
#endif

#ifdef BSDUNIX
static void sig_restore();
static push_signals(), pop_signals();
int placebo_read_pw_string();
#endif

/*** Routines ****************************************************** */
int
placebo_read_password(k,prompt,verify)
    des_cblock *k;
    char *prompt;
    int	verify;
{
    int ok;
    char key_string[BUFSIZ];

#ifdef BSDUNIX
    if (setjmp(env)) {
	ok = -1;
	goto lose;
    }
#endif

    ok = placebo_read_pw_string(key_string, BUFSIZ, prompt, verify);
    if (ok == 0)
	bzero(k, sizeof(C_Block));

lose:
    bzero(key_string, sizeof (key_string));
    return ok;
}

/*
 * This version just returns the string, doesn't map to key.
 *
 * Returns 0 on success, non-zero on failure.
 */

int
placebo_read_pw_string(s,max,prompt,verify)
    char *s;
    int	max;
    char *prompt;
    int	verify;
{
    int ok = 0;
    char *ptr;
    
#ifdef BSDUNIX
    jmp_buf old_env;
    struct sgttyb tty_state;
#endif
    char key_string[BUFSIZ];

    if (max > BUFSIZ) {
	return -1;
    }

#ifdef	BSDUNIX
    bcopy(old_env, env, sizeof(env));
    if (setjmp(env))
	goto lose;

    /* save terminal state*/
    if (ioctl(0,TIOCGETP,&tty_state) == -1) 
	return -1;

    push_signals();
    /* Turn off echo */
    tty_state.sg_flags &= ~ECHO;
    if (ioctl(0,TIOCSETP,&tty_state) == -1)
	return -1;
#endif
    while (!ok) {
	printf(prompt);
	fflush(stdout);
#ifdef	CROSSMSDOS
	h19line(s,sizeof(s),0);
	if (!strlen(s))
	    continue;
#else
	if (!fgets(s, max, stdin)) {
	    clearerr(stdin);
	    continue;
	}
	if ((ptr = index(s, '\n')))
	    *ptr = '\0';
#endif
	if (verify) {
	    printf("\nVerifying, please re-enter %s",prompt);
	    fflush(stdout);
#ifdef CROSSMSDOS
	    h19line(key_string,sizeof(key_string),0);
	    if (!strlen(key_string))
		continue;
#else
	    if (!fgets(key_string, sizeof(key_string), stdin)) {
		clearerr(stdin);
		continue;
	    }
            if ((ptr = index(key_string, '\n')))
	    *ptr = '\0';
#endif
	    if (strcmp(s,key_string)) {
		printf("\n\07\07Mismatch - try again\n");
		fflush(stdout);
		continue;
	    }
	}
	ok = 1;
    }

#ifdef	BSDUNIX
lose:
    if (!ok)
	bzero(s, max);
    printf("\n");
    /* turn echo back on */
    tty_state.sg_flags |= ECHO;
    if (ioctl(0,TIOCSETP,&tty_state))
	ok = 0;
    pop_signals();
    bcopy(env, old_env, sizeof(env));
#endif
    if (verify)
	bzero(key_string, sizeof (key_string));
    s[max-1] = 0;		/* force termination */
    return !ok;			/* return nonzero if not okay */
}

#ifdef	BSDUNIX
/*
 * this can be static since we should never have more than
 * one set saved....
 */
#ifdef POSIX
static void (*old_sigfunc[NSIG])();
#else
static int (*old_sigfunc[NSIG])();
#endif POSIX

static push_signals()
{
    register i;
    for (i = 0; i < NSIG; i++)
	old_sigfunc[i] = signal(i,sig_restore);
}

static pop_signals()
{
    register i;
    for (i = 0; i < NSIG; i++)
	signal(i,old_sigfunc[i]);
}

static void sig_restore(sig,code,scp)
    int sig,code;
    struct sigcontext *scp;
{
    longjmp(env,1);
}
#endif
#endif /* NOENCRYPTION */
@


4.12
log
@changes to allow alternate decryption routine for ticket responses from
KDC.
Programmer: Jay Berkenbilt
Auditor: John Kohl
@
text
@d3 1
a3 1
 * $Source: /mit/kerberos/src/lib/krb/RCS/get_in_tkt.c,v $
d14 1
a14 1
"$Header: get_in_tkt.c,v 4.11 89/04/28 11:05:41 qjb Locked $";
d18 1
d60 1
a60 1
        des_read_password(key, "Password: ", 0);
d94 1
a94 1
 * $Source: /mit/kerberos/src/lib/krb/RCS/get_in_tkt.c,v $
d110 1
a110 1
"$Header: get_in_tkt.c,v 4.11 89/04/28 11:05:41 qjb Locked $";
@


4.11
log
@fix error in comment, mis-naming subroutine used to do the dirty work
@
text
@d4 1
a4 1
 * $Author: jon $
d14 1
a14 1
"$Header: get_in_tkt.c,v 4.10 89/03/22 22:04:25 jtkohl Locked $";
d21 4
d73 1
a73 1
 * krb_get_pw_in_tkt() passes one additional argument to krb_get_in_tkt():
d75 3
a77 1
 * password in case the "password" argument is null.
d88 1
a88 1
                          passwd_to_key, password));
d94 1
a94 1
 * $Author: jon $
d109 1
a109 1
"$Header: get_in_tkt.c,v 4.10 89/03/22 22:04:25 jtkohl Locked $";
@


4.10
log
@Fix NOENCRYPTION case when a password is given.
Programm: jtkohl
Auditor: jon
@
text
@d4 1
a4 1
 * $Author: steiner $
d14 1
a14 1
"$Header: get_in_tkt.c,v 4.9 89/01/13 18:23:36 jtkohl Locked $";
d65 1
a65 1
 * It passes its arguments on to krb_krb_get_pw_in_tkt(), which contacts
d88 1
a88 1
 * $Author: steiner $
d103 1
a103 1
"$Header: get_in_tkt.c,v 4.9 89/01/13 18:23:36 jtkohl Locked $";
@


4.9
log
@Programmer: jtkohl
Auditor: steiner
changes: function names.
@
text
@d14 1
a14 1
"$Header: get_in_tkt.c,v 4.8 88/12/09 16:15:46 jtkohl Locked $";
d49 2
a50 1
    placebo_read_password(key, "Password: ", 0);
d103 1
a103 1
"$Header: get_in_tkt.c,v 4.8 88/12/09 16:15:46 jtkohl Locked $";
@


4.8
log
@NOENCRYPTION changes.
programmer: jtkohl
auditor: steiner
@
text
@d14 1
a14 1
"$Header: get_in_tkt.c,v 4.7 88/12/05 15:21:05 jtkohl Locked $";
d24 1
a24 1
 * not supplied), and get_in_tkt() gets an initial ticket for
a49 1
    printf("\n");
a54 1
        printf("\n");
d61 1
a61 1
 * get_in_tkt() takes the name of the server for which the initial
d64 1
a64 1
 * It passes its arguments on to krb_get_in_tkt(), which contacts
d68 1
a68 1
 * get_in_tkt() passes one additional argument to krb_get_in_tkt():
d75 1
a75 1
get_in_tkt(user,instance,realm,service,sinstance,life,password)
d102 1
a102 1
"$Header: get_in_tkt.c,v 4.7 88/12/05 15:21:05 jtkohl Locked $";
d258 3
d262 1
@


4.7
log
@Added #ifdef NOENCRYPTION code (to send stuff
in the clear in case no DES library present).
Programmer: jtkohl
Auditor: steiner
@
text
@d4 1
a4 1
 * $Author: jtkohl $
d14 1
a14 1
"$Header: get_in_tkt.c,v 4.6 88/12/01 13:58:59 jtkohl Locked $";
d88 2
a89 2
 * $Source: /mit/kerberos/src/lib/des/RCS/read_password.c,v $
 * $Author: jtkohl $
d104 1
a104 1
"$Header: read_password.c,v 4.9 88/11/15 11:30:55 jtkohl Exp $";
a106 1
#include <mit-copyright.h>
@


4.6
log
@Programmer: Jennifer Steiner
Auditor: John Kohl
changes: improve documentation of code
@
text
@d4 1
a4 1
 * $Author: steiner $
d14 1
a14 1
"$Header: get_in_tkt.c,v 4.5 88/02/24 18:11:55 steiner Locked $";
d48 4
d58 1
d85 200
@


4.5
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: get_in_tkt.c,v 4.4 88/01/12 21:19:46 steiner Locked $";
d22 4
a25 2
 * there are extra arguments here, since they are used by
 * srvtab_to_key
d27 16
d58 6
a63 4
 * get_intkt takes the name of the initial ticket to be obtained and
 * the name of the prinicpal the ticket is for.  It then contacts
 * kerberos to get it.  Once obtained, it attempts to decrypt it using
 * the password provided and stores it away for future use.
d65 5
a69 2
 * If the value password is null, get_in_tkt will prompt for
 * the password.
d71 1
@


4.4
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d3 2
a4 3
 *  $Source: /mit/kerberos/lib/krb/RCS/get_in_tkt.c,v $
 *  $Author: jtkohl $
 *  $Locker: steiner $
d6 1
a6 1
 * Copyright 1987 by the Massachusetts Institute of Technology
d8 2
a11 3
#include <krb.h>
#include <prot.h>

d14 1
a14 1
    "$Header: get_in_tkt.c,v 4.3 87/10/29 10:39:11 steiner Locked $";
d16 4
@


4.3
log
@lint cleanup
@
text
@d3 3
a5 3
 *  $Source: /u3/kerberos.new/lib/krb/RCS/get_in_tkt.c,v $
 *  $Author: steiner $
 *  $Locker: jtkohl $
d15 2
a16 1
static char rcsid_get_in_tkt_c[] = "$Header: get_in_tkt.c,v 4.2 87/09/10 16:20:28 jtkohl Locked $";
d19 8
a26 6
/* there are extra arguments here, since they are used by srvtab_to_key */
/*ARGSUSED*/
static int
passwd_to_key(user,instance,realm,passwd,key)
     char *user, *instance, *realm, *passwd;
     C_Block key;
d28 7
a34 7
     if (passwd)
	  string_to_key(passwd, key);
     else {
	  des_read_password(key, "Password: ", 0);
	  printf("\n");
     }
     return (0);
d36 1
a36 1
	  
d40 2
a41 2
 * kerberos to get it.  Once obtained, it attempts to decrypt it
 * using the password provided and stores it away for future use.
d47 3
a49 3
     char *user, *instance, *realm, *service, *sinstance;
     int life;
     char *password;
d51 2
a52 2
     return(krb_get_in_tkt(user,instance,realm,service,sinstance,life,
			   passwd_to_key, password));
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d3 1
a3 1
 *  $Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/get_in_tkt.c,v $
d5 1
a5 1
 *  $Locker: steiner $
d15 1
a15 1
static char rcsid_get_in_tkt_c[] = "$Header: get_in_tkt.c,v 4.1 87/09/01 15:46:31 steiner Locked $";
d18 2
@


4.1
log
@No change; starting version 4.
@
text
@d4 1
a4 1
 *  $Author: jis $
d12 1
a12 1
#include "prot.h"
d15 1
a15 1
static char rcsid_get_in_tkt_c[] = "$Header: get_in_tkt.c,v 3.8 87/07/06 14:11:41 steiner Locked $";
@


3.8
log
@Change arguments to passwd_to_key.
@
text
@d3 1
a3 1
 *  $Source: /source/4.3/athena.lib/kerberos/lib/krb/RCS/get_in_tkt.c,v $
d5 1
a5 1
 *  $Locker: jis $
d15 1
a15 1
static char rcsid_get_in_tkt_c[] = "$Header: get_in_tkt.c,v 3.7 87/07/06 13:58:16 jis Locked $";
@


3.7
log
@New program as of version 3.7. Old program renamed to krb_get_in_tkt.c.
This program calls that one.

Yow! Can you say "General Purpose"
@
text
@d3 3
a5 3
 *  $Source$
 *  $Author$
 *  $Locker$
d15 1
a15 1
static char rcsid_get_in_tkt_c[] = "$Header$";
d19 2
a20 3
passwd_to_key(user,instance,realm,service,sinstance,passwd,key)
     char *user, *instance, *realm, *service, *sinstance;
     char *passwd;
@
