head     4.9;
branch   ;
access   ;
symbols  PATCH8:4.8 PATCH7:4.8 KPATCH6:4.8 ASRSNAP1001:4.8 PATCH5:4.8 KPATCH4:4.8 KPATCH3:4.8 KPATCH2:4.8 KREL1:4.8 BETA5/24/88:4.6;
locks    ; strict;
comment  @ * @;


4.9
date     90.06.25.20.55.54;  author kfall;  state Exp;
branches ;
next     4.8;

4.8
date     89.01.22.20.00.29;  author rfrench;  state Exp;
branches ;
next     4.7;

4.7
date     88.11.15.16.21.46;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.24.18.12.01;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.01.12.21.19.54;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.29.10.40.13;  author jtkohl;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.22.16.06.37;  author jtkohl;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.14.17.16.26;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.46.34;  author steiner;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.14.38.16;  author bcn;  state Exp;
branches ;
next     1.1;

1.1
date     85.12.06.14.03.38;  author bcn;  state Exp;
branches ;
next     ;


desc
@Get name of host with kerberos on it.
@


4.9
log
@include des.h
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/get_krbhst.c,v $
 * $Author: rfrench $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_get_krbhst_c =
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/get_krbhst.c,v 4.8 89/01/22 20:00:29 rfrench Exp Locker: kfall $";
#endif /* lint */

#include <mit-copyright.h>
#include <stdio.h>
#include <des.h>
#include <krb.h>
#include <strings.h>

/*
 * Given a Kerberos realm, find a host on which the Kerberos authenti-
 * cation server can be found.
 *
 * krb_get_krbhst takes a pointer to be filled in, a pointer to the name
 * of the realm for which a server is desired, and an integer, n, and
 * returns (in h) the nth entry from the configuration file (KRB_CONF,
 * defined in "krb.h") associated with the specified realm.
 *
 * On end-of-file, krb_get_krbhst returns KFAILURE.  If n=1 and the
 * configuration file does not exist, krb_get_krbhst will return KRB_HOST
 * (also defined in "krb.h").  If all goes well, the routine returnes
 * KSUCCESS.
 *
 * The KRB_CONF file contains the name of the local realm in the first
 * line (not used by this routine), followed by lines indicating realm/host
 * entries.  The words "admin server" following the hostname indicate that 
 * the host provides an administrative database server.
 *
 * For example:
 *
 *	ATHENA.MIT.EDU
 *	ATHENA.MIT.EDU kerberos-1.mit.edu admin server
 *	ATHENA.MIT.EDU kerberos-2.mit.edu
 *	LCS.MIT.EDU kerberos.lcs.mit.edu admin server
 *
 * This is a temporary hack to allow us to find the nearest system running
 * kerberos.  In the long run, this functionality will be provided by a
 * nameserver.
 */

krb_get_krbhst(h,r,n)
    char *h;
    char *r;
    int n;
{
    FILE *cnffile;
    char tr[REALM_SZ];
    char linebuf[BUFSIZ];
    register int i;

    if ((cnffile = fopen(KRB_CONF,"r")) == NULL) {
        if (n==1) {
            (void) strcpy(h,KRB_HOST);
            return(KSUCCESS);
        }
        else
            return(KFAILURE);
    }
    if (fscanf(cnffile,"%s",tr) == EOF)
        return(KFAILURE);
    /* run through the file, looking for the nth server for this realm */
    for (i = 1; i <= n;) {
	if (fgets(linebuf, BUFSIZ, cnffile) == NULL) {
            (void) fclose(cnffile);
            return(KFAILURE);
        }
	if (sscanf(linebuf, "%s %s", tr, h) != 2)
	    continue;
        if (!strcmp(tr,r))
            i++;
    }
    (void) fclose(cnffile);
    return(KSUCCESS);
}
@


4.8
log
@Programmer: jtkohl
Auditor: rfrench
Changed name to krb_get_krbhst.  Added commentary about "admin server"
flag.  Fixed misc bugs with scanf-style parsing.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/get_krbhst.c,v $
 * $Author: jtkohl $
d14 1
a14 1
"$Header: get_krbhst.c,v 4.7 88/11/15 16:21:46 jtkohl Locked $";
d19 1
@


4.7
log
@Documentor: Jennifer Steiner
Auditor: John Kohl
changes: document the code properly
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: get_krbhst.c,v 4.6 88/02/24 18:12:01 steiner Locked $";
d26 1
a26 1
 * get_krbhst takes a pointer to be filled in, a pointer to the name
d31 2
a32 2
 * On end-of-file, get_krbhst returns KFAILURE.  If n=1 and the
 * configuration file does not exist, get_krbhst will return KRB_HOST
d37 3
a39 2
 * line (not used by this routine), followed by pairs of realm/host
 * entries, for example:
d41 2
d44 1
a44 1
 *	ATHENA.MIT.EDU kerberos-1.mit.edu
d46 1
a46 1
 *	LCS.MIT.EDU kerberos.lcs.mit.edu
d53 1
a53 1
get_krbhst(h,r,n)
d60 2
a61 1
    int i;
d73 1
d75 1
a75 1
        if (fscanf(cnffile,"%s %s",tr,h) == EOF) {
d79 2
@


4.6
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: get_krbhst.c,v 4.5 88/01/12 21:19:54 steiner Locked $";
d23 3
d28 20
a47 6
 * returns (in h) the nth entry from the configuration file (KRB_CONF)
 * associated with the specified realm.  This is a temporary hack to
 * allow us to find the nearest system running kerberos.  In the long
 * run, this functionality will be provided by a nameserver.  On end
 * of file get_krbhst returns KFAILURE.  If n=1 and the configuration
 * file does not exist, get_krbhst will return KRB_HOST.
@


4.5
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 2
a3 3
 *      $Source: /mit/kerberos/lib/krb/RCS/get_krbhst.c,v $
 *      $Author: jtkohl $
 *      $Locker: steiner $
d5 2
a6 1
 * Copyright 1985 by the Massachusetts Institute of Technology
d8 2
d14 1
a14 1
    "$Header: get_krbhst.c,v 4.4 87/10/29 10:40:13 steiner Locked $";
d17 1
@


4.4
log
@lint cleanup
@
text
@d1 4
a4 4
/* 
 * 	$Source: /u3/kerberos.new/lib/krb/RCS/get_krbhst.c,v $
 * 	$Author: jtkohl $
 * 	$Locker: jtkohl $
d12 2
a13 2
"$Header: get_krbhst.c,v 4.3 87/10/22 16:06:37 jtkohl Locked $";
#endif	lint
d19 1
a19 1
/* 
d21 7
a27 7
 * of the realm for which a server is desired, and an integer, n, 
 * and returns (in h) the nth entry from the configuration file (KRB_CONF)
 * associated with the specified realm.  This is a temporary hack to 
 * allow us to find the nearest system running kerberos.  In the long 
 * run, this functionality will be provided by a nameserver.  On end of 
 * file get_krbhst returns KFAILURE.  If n=1 and the configuration file
 * does not exist, get_krbhst will return KRB_HOST.
d31 3
a33 3
	char	*h;
	char	*r;
	int	n;
d35 24
a58 24
	FILE	*cnffile;
	char	tr[REALM_SZ];
	int	i;
	
	if ((cnffile = fopen(KRB_CONF,"r")) == NULL) {
		if (n==1) {
			(void) strcpy(h,KRB_HOST);
			return(KSUCCESS);
		}
		else
			return(KFAILURE);
	}
	if(fscanf(cnffile,"%s",tr) == EOF)
		return(KFAILURE);
	for (i = 1; i <= n;) {
		if(fscanf(cnffile,"%s %s",tr,h) == EOF) {
			(void) fclose(cnffile);
			return(KFAILURE);
		}
		if(!strcmp(tr,r))
			i++;
	}
	(void) fclose(cnffile);
	return(KSUCCESS);
@


4.3
log
@comment and code cleanup (by steiner)
@
text
@d2 3
a4 3
 * 	$Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/get_krbhst.c,v $
 * 	$Author: steiner $
 * 	$Locker: steiner $
d12 1
a12 1
"$Header: get_krbhst.c,v 4.2 87/09/14 17:16:26 steiner Locked $";
d17 1
d35 1
a35 1
	FILE	*cnffile, *fopen();
d41 1
a41 1
			strcpy(h,KRB_HOST);
d50 2
a51 1
		if(fscanf(cnffile,"%s %s",tr,h) == EOF)
d53 1
d57 1
a57 1
	fclose(cnffile);
@


4.2
log
@Split conf.c into get_krbhst.c and get_krbrlm.c (replacing code
in obsolete get_krbhst.c with code from conf.c which also defined
the get_krbhst routine).
@
text
@d11 2
a12 1
static char *rcsid_get_krbhst_c = "$Header: get_krbhst.c,v 4.1 87/09/01 15:46:34 steiner Locked $";
d21 1
a21 1
 * and returns (in h) the nth entry from the configuration file 
d30 3
a32 3
  char	*h;
  char	*r;
  int	n;
d34 22
a55 21
  FILE	*cnffile, *fopen();
  char	tr[REALM_SZ];
  int	i;
  
  if ((cnffile = fopen(KRB_CONF,"r")) == NULL)
    {if (n==1) 
       {strcpy(h,KRB_HOST);
	return(KSUCCESS);}
    else return(KFAILURE);}
  
  if(fscanf(cnffile,"%s",tr) == EOF)
    return(KFAILURE);
  
  for (i=1;i<=n;)
    {if(fscanf(cnffile,"%s %s",tr,h) == EOF)
       return(KFAILURE);
     if(!strcmp(tr,r)) i++;}

  fclose(cnffile);

  return(KSUCCESS);
@


4.1
log
@No change; starting version 4.
@
text
@d3 1
a3 1
 * 	$Author: bcn $
d11 1
a11 1
static char *rcsid_get_krbhst_c = "$Header: get_krbhst.c,v 3.1 86/03/28 14:38:16 steiner Locked $";
d17 9
a25 14
#ifdef PC
#define		HSTFILE		PC_KRB_HSTFILE
#define		HST		KRB_TBLHST
#else
#define		HSTFILE		VX_KRB_HSTFILE
#define		HST		KRB_HOST
#endif

/*
 * get_krbhst takes an integer, n, and returns the nth entry
 * from the file specified by HSTFILE.  This is a temporary
 * hack to allow us to find the nearest system running kerberos.
 * In the long run, this functionality will be provided by a 
 * nameserver.  On end of file get_krbhst returns NULL.
d28 4
a31 3
char	*
get_krbhst(n)
int	n;
d33 17
a49 6
	FILE		*hstfile, *fopen();
	int		i;
	static char	hstnm[MAX_HSTNM];
	
	if ((hstfile = fopen(HSTFILE,"r")) == NULL)
		return(HST);
d51 1
a51 3
	for (i=1;i<=n;i++)
		if(fscanf(hstfile,"%s",hstnm) == EOF)
			return(NULL);
d53 1
a53 3
	fclose(hstfile);

	return(hstnm);
@


3.1
log
@Update major revision number.
@
text
@d2 1
a2 1
 * 	$Source: /mit/projects/auth/src/lib/krb/RCS/get_krbhst.c,v $
d4 1
a4 1
 * 	$Locker: bcn $
d11 1
a11 1
static char *rcsid_get_krbhst_c = "$Header: get_krbhst.c,v 1.1 85/12/06 14:03:38 bcn Exp $";
@


1.1
log
@Initial revision
@
text
@d2 3
a4 4
 * 	$Source: $
 * 	$Author: $
 * 	$Locker: $
 *    	$Log:	 $
d11 1
a11 1
static char *rcsid_get_krbhst_c = "$Header: $";
@
