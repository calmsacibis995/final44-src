head     4.11;
branch   ;
access   ;
symbols  PATCH8:4.8 PATCH7:4.8 KPATCH6:4.8 ASRSNAP1001:4.8 PATCH5:4.8 KPATCH4:4.8 KPATCH3:4.8 KPATCH2:4.8 KREL1:4.8 BETA5/24/88:4.6;
locks    ; strict;
comment  @ * @;


4.11
date     92.07.19.13.20.13;  author bostic;  state Exp;
branches ;
next     4.10;

4.10
date     91.03.29.15.10.53;  author kfall;  state Exp;
branches ;
next     4.9;

4.9
date     90.06.25.20.55.57;  author kfall;  state Exp;
branches ;
next     4.8;

4.8
date     89.01.22.20.02.54;  author rfrench;  state Exp;
branches ;
next     4.7;

4.7
date     88.11.15.16.19.44;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.24.18.12.07;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.01.12.21.20.00;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.20.17.08.57;  author jtkohl;  state Exp;
branches ;
next     4.3;

4.3
date     87.09.14.17.16.22;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.01.15.45.52;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     86.08.19.10.50.31;  author bcn;  state Exp;
branches ;
next     ;


desc
@get_krbhst returns the name of the host on which we can find
a kerberos server.  get_krbrlm returns the local realm name(s).
@


4.11
log
@check in for Kevin Fall by TK; typo correction
@
text
@/*
 * $Source: /usr/src/kerberosIV/krb/RCS/get_krbrlm.c,v $
 * $Author: kfall $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_get_krbrlm_c =
"$Header: /usr/src/kerberosIV/krb/RCS/get_krbrlm.c,v 4.10 91/03/29 15:10:53 kfall Exp Locker: kfall $";
#endif /* lint */

#include <mit-copyright.h>
#include <stdio.h>
#include <des.h>
#include <krb.h>
#include <strings.h>

/*
 * krb_get_lrealm takes a pointer to a string, and a number, n.  It fills
 * in the string, r, with the name of the nth realm specified on the
 * first line of the kerberos config file (KRB_CONF, defined in "krb.h").
 * It returns 0 (KSUCCESS) on success, and KFAILURE on failure.  If the
 * config file does not exist, and if n=1, a successful return will occur
 * with r = KRB_REALM (also defined in "krb.h").
 *
 * NOTE: for archaic & compatibility reasons, this routine will only return
 * valid results when n = 1.
 *
 * For the format of the KRB_CONF file, see comments describing the routine
 * krb_get_krbhst().
 */

krb_get_lrealm(r,n)
    char *r;
    int n;
{
    FILE *cnffile, *fopen();

	
    if ((cnffile = fopen(KRB_CONF, "r")) == (FILE *) NULL)
	    return(KFAILURE);

#ifdef notdef

	dont want this -- kfall

    if (n > 1)
	return(KFAILURE);  /* Temporary restriction */

    if ((cnffile = fopen(KRB_CONF, "r")) == NULL) {
	if (n == 1) {
	    (void) strcpy(r, KRB_REALM);
	    return(KSUCCESS);
	}
	else
	    return(KFAILURE);
    }

#endif

    if (fscanf(cnffile,"%s",r) != 1) {
        (void) fclose(cnffile);
        return(KFAILURE);
    }
    (void) fclose(cnffile);
    return(KSUCCESS);
}
@


4.10
log
@don't ever use the KRB_REALM define in krb.h (default)
@
text
@d14 1
a14 1
"$Header: /usr/src/kerberosIV/krb/RCS/get_krbrlm.c,v 4.9 90/06/25 20:55:57 kfall Exp Locker: kfall $";
d50 1
a50 1
	don't want this -- kfall
@


4.9
log
@include des.h
@
text
@d2 2
a3 2
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/get_krbrlm.c,v $
 * $Author: rfrench $
d14 1
a14 1
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/get_krbrlm.c,v 4.8 89/01/22 20:02:54 rfrench Exp Locker: kfall $";
d44 8
d63 2
@


4.8
log
@Programmer: jtkohl
Auditor: rfrench
Changed name to krb_get_lrealm.  Fixed misc bug with scanf-style parsing
error returns.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/get_krbrlm.c,v $
 * $Author: jtkohl $
d14 1
a14 1
"$Header: get_krbrlm.c,v 4.7 88/11/15 16:19:44 jtkohl Locked $";
d19 1
@


4.7
log
@Documentor: Jennifer Steiner
Auditor: John Kohl
changes: document the code
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: get_krbrlm.c,v 4.6 88/02/24 18:12:07 steiner Exp $";
d23 1
a23 1
 * get_krbrlm takes a pointer to a string, and a number, n.  It fills
d29 6
d37 1
a37 1
get_krbrlm(r,n)
d55 1
a55 1
    if (fscanf(cnffile,"%s",r) == EOF) {
@


4.6
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: get_krbrlm.c,v 4.5 88/01/12 21:20:00 steiner Locked $";
d25 4
a28 4
 * first line of the kerberos config file.  It returns 0 (KSUCCESS) on
 * success, and KFAILURE on failure.  If the config file does not
 * exist, and if n=1, a successful return will occur with r =
 * KRB_REALM.
@


4.5
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 2
a3 3
 *      $Source: /mit/kerberos/lib/krb/RCS/get_krbrlm.c,v $
 *      $Author: jtkohl $
 *      $Locker: steiner $
d5 2
a6 1
 * Copyright 1985,1986 by the Massachusetts Institute of Technology
d8 2
d13 2
a14 2
static char *rcsid_conf_c =
    "$Header: get_krbrlm.c,v 4.4 87/10/20 17:08:57 steiner Locked $";
d17 1
@


4.4
log
@lint fixes
@
text
@d1 4
a4 4
/* 
 * 	$Source: /u3/kerberos.new/lib/krb/RCS/get_krbrlm.c,v $
 * 	$Author: steiner $
 * 	$Locker: jtkohl $
d11 3
a13 2
static char *rcsid_conf_c = "$Header: get_krbrlm.c,v 4.3 87/09/14 17:16:22 jtkohl Locked $";
#endif	lint
a14 1

d22 4
a25 3
 * first line of the kerberos config file.  It returns 0 (KSUCCESS) 
 * on success, and KFAILURE on failure.  If the config file does not 
 * exist, and if n=1, a successful return will occur with r = KRB_REALM.
d29 2
a30 2
  char	*r;
  int	n;
d32 1
a32 1
  FILE	*cnffile, *fopen();
d34 2
a35 1
  if(n > 1) return(KFAILURE);  /* Temporary restriction */
d37 8
a44 5
  if ((cnffile = fopen(KRB_CONF,"r")) == NULL)
    {if (n==1) 
       {(void) strcpy(r,KRB_REALM);
	return(KSUCCESS);}
    else return(KFAILURE);}
d46 6
a51 6
  if(fscanf(cnffile,"%s",r) == EOF) {
	  (void) fclose(cnffile);
	  return(KFAILURE);
  }  
  (void) fclose(cnffile);
  return(KSUCCESS);
@


4.3
log
@Split conf.c into get_krbhst.c and get_krbrlm.c (replacing code
in obsolete get_krbhst.c with code from conf.c which also defined
the get_krbhst routine).
@
text
@d2 1
a2 1
 * 	$Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/conf.c,v $
d4 1
a4 1
 * 	$Locker: steiner $
d11 1
a11 1
static char *rcsid_conf_c = "$Header: conf.c,v 4.2 87/09/01 15:45:52 steiner Locked $";
d17 2
a31 1
  int	i;
d37 1
a37 1
       {strcpy(r,KRB_REALM);
d41 5
a45 5
  if(fscanf(cnffile,"%s",r) == EOF)
    return(KFAILURE);
  
  fclose(cnffile);

@


4.2
log
@No change; starting version 4.
@
text
@d3 1
a3 1
 * 	$Author: bcn $
d11 1
a11 1
static char *rcsid_conf_c = "$Header: conf.c,v 4.1 86/08/19 10:50:31 steiner Locked $";
d14 1
a16 40

/* 
 * get_krbhst takes a pointer to be filled in, a pointer to the name
 * of the realm for which a server is desired, and an integer, n, 
 * and returns (in h) the nth entry from the configuration file 
 * associated with the specified realm.  This is a temporary hack to 
 * allow us to find the nearest system running kerberos.  In the long 
 * run, this functionality will be provided by a nameserver.  On end of 
 * file get_krbhst returns KFAILURE.  If n=1 and the configuration file
 * does not exist, get_krbhst will return KRB_HOST.
 */

get_krbhst(h,r,n)
  char	*h;
  char	*r;
  int	n;
{
  FILE	*cnffile, *fopen();
  char	tr[REALM_SZ];
  int	i;
  
  if ((cnffile = fopen(KRB_CONF,"r")) == NULL)
    {if (n==1) 
       {strcpy(h,KRB_HOST);
	return(KSUCCESS);}
    else return(KFAILURE);}
  
  if(fscanf(cnffile,"%s",tr) == EOF)
    return(KFAILURE);
  
  for (i=1;i<=n;)
    {if(fscanf(cnffile,"%s %s",tr,h) == EOF)
       return(KFAILURE);
     if(!strcmp(tr,r)) i++;}

  fclose(cnffile);

  return(KSUCCESS);
}

@


4.1
log
@Ready for V4.
@
text
@d2 1
a2 1
 * 	$Source: /mit/projects/auth/src/lib/krb/RCS/get_krbhst.c,v $
d4 1
a4 1
 * 	$Locker:  $
d11 1
a11 1
static char *rcsid_conf_c = "$Header: get_krbhst.c,v 3.1 86/03/28 14:38:16 bcn Exp $";
@
