head     4.7;
branch   ;
access   ;
symbols  PATCH8:4.6 PATCH7:4.6 KPATCH6:4.6 ASRSNAP1001:4.6 PATCH5:4.6 KPATCH4:4.6 KPATCH3:4.6 KPATCH2:4.6 KREL1:4.6 BETA5/24/88:4.4;
locks    ; strict;
comment  @ * @;


4.7
date     90.06.25.20.56.02;  author kfall;  state Exp;
branches ;
next     4.6;

4.6
date     89.01.13.18.19.11;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.11.15.16.27.56;  author jtkohl;  state Exp;
branches ;
next     4.4;

4.4
date     88.02.24.18.12.18;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     88.01.12.21.20.17;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.10.28.16.03.35;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.46.37;  author steiner;  state Exp;
branches ;
next     1.6;

1.6
date     86.09.05.16.10.06;  author bcn;  state Exp;
branches ;
next     1.5;

1.5
date     86.08.22.13.40.44;  author bcn;  state Exp;
branches ;
next     1.4;

1.4
date     86.08.12.15.17.36;  author bcn;  state Exp;
branches ;
next     1.3;

1.3
date     86.08.12.13.22.55;  author ostlund;  state Exp;
branches ;
next     1.2;

1.2
date     86.08.01.09.52.58;  author bcn;  state Exp;
branches ;
next     1.1;

1.1
date     86.07.15.12.02.09;  author bcn;  state Exp;
branches ;
next     ;


desc
@Get password changing ticket given password.
@


4.7
log
@include des.h
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/get_pw_tkt.c,v $
 * $Author: steiner $
 *
 * Copyright 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_get_pw_tkt_c =
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/get_pw_tkt.c,v 4.6 89/01/13 18:19:11 steiner Exp Locker: kfall $";
#endif /* lint */


#include <mit-copyright.h>
#include <des.h>
#include <krb.h>

/*
 * Get a ticket for the password-changing server ("changepw.KRB_MASTER").
 *
 * Given the name, instance, realm, and current password of the
 * principal for which the user wants a password-changing-ticket,
 * return either:
 *
 *	GT_PW_BADPW if current password was wrong,
 *	GT_PW_NULL  if principal had a NULL password,
 *	or the result of the krb_get_pw_in_tkt() call.
 *
 * First, try to get a ticket for "user.instance@@realm" to use the
 * "changepw.KRB_MASTER" server (KRB_MASTER is defined in "krb.h").
 * The requested lifetime for the ticket is "1", and the current
 * password is the "cpw" argument given.
 *
 * If the password was bad, give up.
 *
 * If the principal had a NULL password in the Kerberos database
 * (indicating that the principal is known to Kerberos, but hasn't
 * got a password yet), try instead to get a ticket for the principal
 * "default.changepw@@realm" to use the "changepw.KRB_MASTER" server.
 * Use the password "changepwkrb" instead of "cpw".  Return GT_PW_NULL
 * if all goes well, otherwise the error.
 *
 * If this routine succeeds, a ticket and session key for either the
 * principal "user.instance@@realm" or "default.changepw@@realm" to use
 * the password-changing server will be in the user's ticket file.
 */

get_pw_tkt(user,instance,realm,cpw)
    char *user;
    char *instance;
    char *realm;
    char *cpw;
{
    int kerror;

    kerror = krb_get_pw_in_tkt(user, instance, realm, "changepw",
			       KRB_MASTER, 1, cpw);

    if (kerror == INTK_BADPW)
	return(GT_PW_BADPW);

    if (kerror == KDC_NULL_KEY) {
	kerror = krb_get_pw_in_tkt("default","changepw",realm,"changepw",
				   KRB_MASTER,1,"changepwkrb");
	if (kerror)
	    return(kerror);
	return(GT_PW_NULL);
    }

    return(kerror);
}
@


4.6
log
@Programmer: jtkohl
Auditor: steiner
changes: function names.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/get_pw_tkt.c,v $
 * $Author: jtkohl $
d14 1
a14 1
"$Header: get_pw_tkt.c,v 4.5 88/11/15 16:27:56 jtkohl Locked $";
d19 1
@


4.5
log
@Documentor: Jennifer Steiner
Auditor: John Kohl
changes: document the code properly
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: get_pw_tkt.c,v 4.4 88/02/24 18:12:18 steiner Locked $";
d30 1
a30 1
 *	or the result of the get_in_tkt() call.
d59 2
a60 2
    kerror = get_in_tkt(user, instance, realm, "changepw",
			KRB_MASTER, 1, cpw);
d66 2
a67 2
	kerror = get_in_tkt("default","changepw",realm,"changepw",
			    KRB_MASTER,1,"changepwkrb");
@


4.4
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: get_pw_tkt.c,v 4.3 88/01/12 21:20:17 steiner Locked $";
d22 27
a48 7
 * get_pw_tkt takes a username, instance, and the realm for which the
 * user wants a password changing ticket.  It also takes the user's
 * current kerberos password.  It then contacts the appropriate
 * kerberos in order to get the desired ticket and returns GT_PW_OK on
 * success. It will return GT_PW_NULL if it determines that the user
 * currently has a null password.  It may also return an error code
 * defined in krb.h
d50 1
@


4.3
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 2
a3 3
 *  $Source: /mit/kerberos/lib/krb/RCS/get_pw_tkt.c,v $
 *  $Author: steiner $
 *  $Locker: steiner $
d5 2
a6 1
 * Copyright 1986 by the Massachusetts Institute of Technology
d8 2
d14 1
a14 1
    "$Header: get_pw_tkt.c,v 4.2 87/10/28 16:03:35 steiner Locked $";
d18 1
@


4.2
log
@Took out byteorder.h; that info is now in krb_conf.h.
@
text
@d1 2
a2 2
/* 
 *  $Source: /u3/kerberos.new/lib/krb/RCS/get_pw_tkt.c,v $
d5 1
a5 1
 * 
d11 3
a13 2
static char *rcsid_get_pw_tkt_c = "$Header: get_pw_tkt.c,v 4.1 87/09/01 15:46:37 steiner Locked $";
#endif  lint
d18 7
a24 7
/* 
 * get_pw_tkt takes a username, instance, and the realm for which
 * the user wants a password changing ticket.  It also takes the 
 * user's current kerberos password.  It then contacts the appropriate
 * kerberos in order to get the desired ticket and returns GT_PW_OK on 
 * success. It will return GT_PW_NULL if it determines that the user 
 * currently has a null password.  It may also return an error code 
d28 4
a31 4
char    *user;
char	*instance;
char	*realm;
char	*cpw;
d33 1
a33 5
    int	    kerror;
    
    kerror = get_in_tkt(user,instance,realm,"changepw",KRB_MASTER,1,cpw);
    
    if (kerror == INTK_BADPW) return(GT_PW_BADPW);
d35 2
a36 5
    if (kerror == KDC_NULL_KEY)
      {kerror = get_in_tkt("default","changepw",realm,"changepw",
			   KRB_MASTER,1,"changepwkrb");
       if(kerror) return(kerror);
       return(GT_PW_NULL); }
d38 11
a50 2


@


4.1
log
@No change; starting version 4.
@
text
@d2 2
a3 2
 *  $Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/get_pw_tkt.c,v $
 *  $Author: bcn $
d11 1
a11 1
static char *rcsid_get_pw_tkt_c = "$Header: get_pw_tkt.c,v 1.6 86/09/05 16:10:06 steiner Locked $";
d34 1
a34 1
    kerror = get_in_tkt(user,instance,realm,"changepw","kerberos",1,cpw);
d40 1
a40 1
			   "kerberos",1,"changepwkrb");
@


1.6
log
@get_pw_tkt is not mostly a call to get_in_tkt.
@
text
@d2 1
a2 1
 *  $Source: /mit/projects/auth/src/lib/krb/RCS/get_pw_tkt.c,v $
d4 1
a4 1
 *  $Locker: bcn $
d11 1
a11 1
static char *rcsid_get_pw_tkt_c = "$Header: get_pw_tkt.c,v 1.4 86/08/12 15:17:36 bcn Exp $";
@


1.5
log
@Change send_to_kdc to take a realm as ana rgument.
@
text
@a15 2
#include "prot.h"
#include <des.h>
a16 15
#include <stdio.h>
#include <errno.h>

/* use the bsd time.h struct defs for PC too!                              */
#include <sys/time.h>
#include <sys/types.h>

extern  debug;

static struct  timeval t_local = { 0, 0 };
static struct  timezone tz = { 0, 0 };
    
int				swap_bytes;
unsigned long			rep_err_code;

d18 1
a18 1
 * get_pw_tkt takes a username, and instance, the realm for which
a31 16
    int             rlen;
    KTEXT           pkt;		/* Packet to KDC	*/
    static KTEXT_ST rpkt_st;
    KTEXT           rpkt = &rpkt_st;	/* Returned packet	*/
    static KTEXT_ST cip_st;
    KTEXT           cip = &cip_st;	/* Returned Ciphertext	*/
    static KTEXT_ST tkt_st;
    KTEXT           tkt = &tkt_st;	/* Current ticket	*/
    C_Block         ses;		/* Session key for tkt	*/
    int             lifetime;		/* Lifetime for tkt	*/
    int             kvno;		/* Kvno for session key	*/
    char	    trealm[REALM_SZ];		
    C_Block         key;	/* Key for decrypting cipher	*/
    Key_schedule    key_s;	

    int	    msg_byte_order;
d34 1
a34 5
    /* Create skeleton of packet to be sent */
    gettimeofday(&t_local,&tz);
    pkt = create_packet_to_kdc(user,instance,realm,t_local.tv_sec);

    add_request(pkt,1,"changepw","kerberos");
d36 1
a36 1
    rpkt->length = 0;
d38 5
a42 2
    /* Send the packet */
    if (kerror = send_to_kdc(pkt, rpkt, realm)) return(kerror); 
d44 1
a44 57
    /* Check packet version of the returned packet */
    if (pkt_version(rpkt) != 3 )
	return(GT_PW_PROT);
        
    /* Check byte order */
    msg_byte_order = pkt_msg_type(rpkt) & 1;
    swap_bytes = 0;
    if (msg_byte_order != HOST_BYTE_ORDER )
        swap_bytes++;
    
    switch (pkt_msg_type(rpkt) & ~1)
        {
        case AUTH_MSG_KDC_REPLY: break;
        case AUTH_MSG_ERR_REPLY:
          {
          if ((*pkt_err_code(rpkt) == KERB_ERR_NULL_KEY) && strcmp(user,"default"))
	    	return(get_pw_tkt("default","changepw",realm,"changepwkrb"));
	  if (*pkt_err_code(rpkt) == KERB_ERR_PRINCIPAL_UNKNOWN)
		return(KDC_PR_UNKNOWN);

          return(GT_PW_KDCERR);
          }
        
        default:	/* Protocol error */
            return(GT_PW_PROT);
        }
    
    
    /* Extract the ciphertext */
    cip->length = pkt_clen(rpkt);   /* let clen do the swap */
    bcopy(pkt_cipher(rpkt),cip->dat,cip->length);

    /* Attempt to decrypt it */
    string_to_key(cpw,key);
    key_sched(key,key_s);
    pcbc_encrypt(cip->dat,cip->dat,(long) cip->length,key_s,key,0);

    /* To the best of my recollection Senator */
    bzero(key_s,sizeof(key_s)); bzero(key,sizeof(key));

    /* Sanity check the decrypted cipher                                  */
    if (check_cipher(cip,1,t_local.tv_sec)) 
	return(GT_PW_BADPW);
    
    in_tkt(user,instance);

    extract_ticket(cip,1,ses,&lifetime,&kvno,trealm,tkt);

    if ((tkt->length == 0))
    	return(GT_PW_NULLTKT);

    save_credentials("changepw","kerberos","",ses,lifetime,kvno,tkt,t_local.tv_sec); 

    if(!strcmp(user,"default") && !strcmp(instance,"changepw"))
    	return(GT_PW_NULL);

    return(GT_PW_OK);
@


1.4
log
@store = save_credentials
@
text
@d3 1
a3 1
 *  $Author: ostlund $
d11 1
a11 1
static char *rcsid_get_pw_tkt_c = "$Header: get_pw_tkt.c,v 1.3 86/08/12 13:22:55 ostlund Exp $";
d76 1
a76 1
    if (kerror = send_to_kdc(pkt, rpkt)) return(kerror); 
d79 1
a79 1
    if (pkt_version(rpkt) != KRB_PROT_VERSION )
a117 2
    in_tkt(user,instance);

d122 2
@


1.3
log
@made time structure static to prevent extern name clash
@
text
@d3 2
a4 2
 *  $Author: bcn $
 *  $Locker: ostlund $
d11 1
a11 1
static char *rcsid_get_pw_tkt_c = "$Header: get_pw_tkt.c,v 1.2 86/08/01 09:52:58 bcn Exp $";
d129 1
a129 1
    store("changepw","kerberos","",ses,lifetime,kvno,tkt,t_local.tv_sec); 
@


1.2
log
@More revisions and one or two fixes by ostlund.
@
text
@d4 1
a4 1
 *  $Locker:  $
d11 1
a11 1
static char *rcsid_get_pw_tkt_c = "$Header: get_pw_tkt.c,v 1.1 86/07/15 12:02:09 bcn Exp $";
d28 2
a29 2
struct  timeval t_local = { 0, 0 };
struct  timezone tz = { 0, 0 };
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
 *  $Source: $
 *  $Author: $
 *  $Locker: $
d11 1
a11 1
static char *rcsid_get_pw_tkt_c = "$Header: get_pw_tkt.c,v 3.5 86/05/23 13:22:02 spm Exp $";
a63 2
    char    s_name[SNAME_SZ];
    char    s_instance[INST_SZ];
d95 2
d129 1
a129 1
    store(s_name,s_instance,"",ses,lifetime,kvno,tkt,t_local.tv_sec); 
d131 1
a131 1
    if(~strcmp(user,"default") && ~strcmp(instance,"changepw"))
@
