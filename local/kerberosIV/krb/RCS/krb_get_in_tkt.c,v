head     4.21;
branch   ;
access   ;
symbols  PATCH8:4.19 PATCH7:4.19 KPATCH6:4.19 ASRSNAP1001:4.19 PATCH5:4.19 KPATCH4:4.17 KPATCH3:4.17 KPATCH2:4.16 KREL1:4.14 BETA5/24/88:4.9;
locks    ; strict;
comment  @ * @;


4.21
date     91.06.01.13.54.58;  author karels;  state Exp;
branches ;
next     4.20;

4.20
date     90.06.25.20.56.45;  author kfall;  state Exp;
branches ;
next     4.19;

4.19
date     89.07.18.16.31.31;  author jtkohl;  state Exp;
branches ;
next     4.18;

4.18
date     89.06.26.14.50.52;  author qjb;  state Exp;
branches ;
next     4.17;

4.17
date     89.05.18.21.33.30;  author jis;  state Exp;
branches ;
next     4.16;

4.16
date     89.04.18.16.22.21;  author wesommer;  state Exp;
branches ;
next     4.15;

4.15
date     89.03.22.14.47.35;  author jtkohl;  state Exp;
branches ;
next     4.14;

4.14
date     89.01.17.22.04.22;  author wesommer;  state Exp;
branches ;
next     4.13;

4.13
date     89.01.17.15.51.11;  author rfrench;  state Exp;
branches ;
next     4.12;

4.12
date     88.12.05.15.21.09;  author steiner;  state Exp;
branches ;
next     4.11;

4.11
date     88.12.01.14.12.26;  author jtkohl;  state Exp;
branches ;
next     4.10;

4.10
date     88.08.22.15.29.01;  author shanzer;  state Exp;
branches ;
next     4.9;

4.9
date     88.02.24.18.13.47;  author steiner;  state Exp;
branches ;
next     4.8;

4.8
date     88.01.12.21.21.54;  author steiner;  state Exp;
branches ;
next     4.7;

4.7
date     87.11.09.11.32.00;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     87.10.28.16.03.48;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     87.10.28.15.44.52;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.20.17.11.13;  author jtkohl;  state Exp;
branches ;
next     4.3;

4.3
date     87.09.22.13.54.46;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.20.41;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.46.56;  author steiner;  state Exp;
branches ;
next     3.7;

3.7
date     87.07.06.14.12.01;  author jis;  state Exp;
branches ;
next     3.6;

3.6
date     87.07.06.13.50.42;  author jis;  state Exp;
branches ;
next     3.5;

3.5
date     86.09.05.16.11.29;  author bcn;  state Exp;
branches ;
next     3.4;

3.4
date     86.08.15.09.24.48;  author bcn;  state Exp;
branches ;
next     3.3;

3.3
date     86.08.12.13.19.30;  author bcn;  state Exp;
branches ;
next     3.2;

3.2
date     86.08.12.12.31.32;  author bcn;  state Exp;
branches ;
next     3.1;

3.1
date     86.07.16.12.02.16;  author bcn;  state Exp;
branches ;
next     ;


desc
@Get initial ticket from kerberos
@


4.21
log
@better errors ("Generic error" doesn't cut it
@
text
@/*
 * $Source: /usr/src/kerberosIV/krb/RCS/krb_get_in_tkt.c,v $
 * $Author: kfall $
 *
 * Copyright 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_krb_get_in_tkt_c =
"$Header: /usr/src/kerberosIV/krb/RCS/krb_get_in_tkt.c,v 4.20 90/06/25 20:56:45 kfall Exp Locker: karels $";
#endif /* lint */

#include <mit-copyright.h>
#include <des.h>
#include <krb.h>
#include <prot.h>

#include <stdio.h>
#include <strings.h>
#include <errno.h>

/* use the bsd time.h struct defs for PC too! */
#include <sys/time.h>
#include <sys/types.h>

int     swap_bytes;

/*
 * decrypt_tkt(): Given user, instance, realm, passwd, key_proc
 * and the cipher text sent from the KDC, decrypt the cipher text
 * using the key returned by key_proc.
 */

static int decrypt_tkt(user, instance, realm, arg, key_proc, cipp)
  char *user;
  char *instance;
  char *realm;
  char *arg;
  int (*key_proc)();
  KTEXT *cipp;
{
    KTEXT cip = *cipp;
    C_Block key;		/* Key for decrypting cipher */
    Key_schedule key_s;

#ifndef NOENCRYPTION
    /* Attempt to decrypt it */
#endif
    
    /* generate a key */
    
    {
	register int rc;
	rc = (*key_proc)(user,instance,realm,arg,key);
	if (rc)
	    return(rc);
    }
    
#ifndef NOENCRYPTION
    key_sched(key,key_s);
    pcbc_encrypt((C_Block *)cip->dat,(C_Block *)cip->dat,
		 (long) cip->length,key_s,key,0);
#endif /* !NOENCRYPTION */
    /* Get rid of all traces of key */
    bzero((char *)key,sizeof(key));
    bzero((char *)key_s,sizeof(key_s));

    return(0);
}

/*
 * krb_get_in_tkt() gets a ticket for a given principal to use a given
 * service and stores the returned ticket and session key for future
 * use.
 *
 * The "user", "instance", and "realm" arguments give the identity of
 * the client who will use the ticket.  The "service" and "sinstance"
 * arguments give the identity of the server that the client wishes
 * to use.  (The realm of the server is the same as the Kerberos server
 * to whom the request is sent.)  The "life" argument indicates the
 * desired lifetime of the ticket; the "key_proc" argument is a pointer
 * to the routine used for getting the client's private key to decrypt
 * the reply from Kerberos.  The "decrypt_proc" argument is a pointer
 * to the routine used to decrypt the reply from Kerberos; and "arg"
 * is an argument to be passed on to the "key_proc" routine.
 *
 * If all goes well, krb_get_in_tkt() returns INTK_OK, otherwise it
 * returns an error code:  If an AUTH_MSG_ERR_REPLY packet is returned
 * by Kerberos, then the error code it contains is returned.  Other
 * error codes returned by this routine include INTK_PROT to indicate
 * wrong protocol version, INTK_BADPW to indicate bad password (if
 * decrypted ticket didn't make sense), INTK_ERR if the ticket was for
 * the wrong server, TKT_FIL_ACC if the ticket store couldn't be initialized
 * or ticket couldn't be saved.
 *
 * The format of the message sent to Kerberos is as follows:
 *
 * Size			Variable		Field
 * ----			--------		-----
 *
 * 1 byte		KRB_PROT_VERSION	protocol version number
 * 1 byte		AUTH_MSG_KDC_REQUEST |	message type
 *			HOST_BYTE_ORDER		local byte order in lsb
 * string		user			client's name
 * string		instance		client's instance
 * string		realm			client's realm
 * 4 bytes		tlocal.tv_sec		timestamp in seconds
 * 1 byte		life			desired lifetime
 * string		service			service's name
 * string		sinstance		service's instance
 */

krb_get_in_tkt(user, instance, realm, service, sinstance, life,
	       key_proc, decrypt_proc, arg)
    char *user;
    char *instance;
    char *realm;
    char *service;
    char *sinstance;
    int life;
    int (*key_proc)();
    int (*decrypt_proc)();
    char *arg;
{
    KTEXT_ST pkt_st;
    KTEXT pkt = &pkt_st;	/* Packet to KDC */
    KTEXT_ST rpkt_st;
    KTEXT rpkt = &rpkt_st;	/* Returned packet */
    KTEXT_ST cip_st;
    KTEXT cip = &cip_st;	/* Returned Ciphertext */
    KTEXT_ST tkt_st;
    KTEXT tkt = &tkt_st;	/* Current ticket */
    C_Block ses;                /* Session key for tkt */
    int kvno;			/* Kvno for session key */
    unsigned char *v = pkt->dat; /* Prot vers no */
    unsigned char *t = (pkt->dat+1); /* Prot msg type */

    char s_name[SNAME_SZ];
    char s_instance[INST_SZ];
    char rlm[REALM_SZ];
    int lifetime;
    int msg_byte_order;
    int kerror;
    unsigned long exp_date;
    char *ptr;

    struct timeval t_local;

    unsigned long rep_err_code;

    unsigned long kdc_time;   /* KDC time */

    /* BUILD REQUEST PACKET */

    /* Set up the fixed part of the packet */
    *v = (unsigned char) KRB_PROT_VERSION;
    *t = (unsigned char) AUTH_MSG_KDC_REQUEST;
    *t |= HOST_BYTE_ORDER;

    /* Now for the variable info */
    (void) strcpy((char *)(pkt->dat+2),user); /* aname */
    pkt->length = 3 + strlen(user);
    (void) strcpy((char *)(pkt->dat+pkt->length),
		  instance);	/* instance */
    pkt->length += 1 + strlen(instance);
    (void) strcpy((char *)(pkt->dat+pkt->length),realm); /* realm */
    pkt->length += 1 + strlen(realm);

    (void) gettimeofday(&t_local,(struct timezone *) 0);
    /* timestamp */
    bcopy((char *)&(t_local.tv_sec),(char *)(pkt->dat+pkt->length), 4);
    pkt->length += 4;

    *(pkt->dat+(pkt->length)++) = (char) life;
    (void) strcpy((char *)(pkt->dat+pkt->length),service);
    pkt->length += 1 + strlen(service);
    (void) strcpy((char *)(pkt->dat+pkt->length),sinstance);
    pkt->length += 1 + strlen(sinstance);

    rpkt->length = 0;

    /* SEND THE REQUEST AND RECEIVE THE RETURN PACKET */

    if (kerror = send_to_kdc(pkt, rpkt, realm)) return(kerror);

    /* check packet version of the returned packet */
    if (pkt_version(rpkt) != KRB_PROT_VERSION)
        return(INTK_PROT);

    /* Check byte order */
    msg_byte_order = pkt_msg_type(rpkt) & 1;
    swap_bytes = 0;
    if (msg_byte_order != HOST_BYTE_ORDER) {
        swap_bytes++;
    }

    switch (pkt_msg_type(rpkt) & ~1) {
    case AUTH_MSG_KDC_REPLY:
        break;
    case AUTH_MSG_ERR_REPLY:
        bcopy(pkt_err_code(rpkt),(char *) &rep_err_code,4);
        if (swap_bytes) swap_u_long(rep_err_code);
        return((int)rep_err_code);
    default:
        return(INTK_PROT);
    }

    /* EXTRACT INFORMATION FROM RETURN PACKET */

    /* get the principal's expiration date */
    bcopy(pkt_x_date(rpkt),(char *) &exp_date,sizeof(exp_date));
    if (swap_bytes) swap_u_long(exp_date);

    /* Extract the ciphertext */
    cip->length = pkt_clen(rpkt);       /* let clen do the swap */

    if ((cip->length < 0) || (cip->length > sizeof(cip->dat)))
	return(INTK_PROT);		/* no appropriate error code
					 currently defined for INTK_ */
    /* copy information from return packet into "cip" */
    bcopy((char *) pkt_cipher(rpkt),(char *)(cip->dat),cip->length);

    /* Attempt to decrypt the reply. */
    if (decrypt_proc == NULL)
	decrypt_proc = decrypt_tkt;
    (*decrypt_proc)(user, instance, realm, arg, key_proc, &cip);

    ptr = (char *) cip->dat;

    /* extract session key */
    bcopy(ptr,(char *)ses,8);
    ptr += 8;

    if ((strlen(ptr) + (ptr - (char *) cip->dat)) > cip->length)
	return(INTK_BADPW);

    /* extract server's name */
    (void) strcpy(s_name,ptr);
    ptr += strlen(s_name) + 1;

    if ((strlen(ptr) + (ptr - (char *) cip->dat)) > cip->length)
	return(INTK_BADPW);

    /* extract server's instance */
    (void) strcpy(s_instance,ptr);
    ptr += strlen(s_instance) + 1;

    if ((strlen(ptr) + (ptr - (char *) cip->dat)) > cip->length)
	return(INTK_BADPW);

    /* extract server's realm */
    (void) strcpy(rlm,ptr);
    ptr += strlen(rlm) + 1;

    /* extract ticket lifetime, server key version, ticket length */
    /* be sure to avoid sign extension on lifetime! */
    lifetime = (unsigned char) ptr[0];
    kvno = (unsigned char) ptr[1];
    tkt->length = (unsigned char) ptr[2];
    ptr += 3;
    
    if ((tkt->length < 0) ||
	((tkt->length + (ptr - (char *) cip->dat)) > cip->length))
	return(INTK_BADPW);

    /* extract ticket itself */
    bcopy(ptr,(char *)(tkt->dat),tkt->length);
    ptr += tkt->length;

    if (strcmp(s_name, service) || strcmp(s_instance, sinstance) ||
        strcmp(rlm, realm))	/* not what we asked for */
	return(INTK_ERR);	/* we need a better code here XXX */

    /* check KDC time stamp */
    bcopy(ptr,(char *)&kdc_time,4); /* Time (coarse) */
    if (swap_bytes) swap_u_long(kdc_time);

    ptr += 4;

    (void) gettimeofday(&t_local,(struct timezone *) 0);
    if (abs((int)(t_local.tv_sec - kdc_time)) > CLOCK_SKEW) {
        return(RD_AP_TIME);		/* XXX should probably be better
					   code */
    }

    /* initialize ticket cache */
    if (in_tkt(user,instance) != KSUCCESS)
	return(TKT_FIL_ACC);

    /* stash ticket, session key, etc. for future use */
    if (kerror = save_credentials(s_name, s_instance, rlm, ses,
				  lifetime, kvno, tkt, t_local.tv_sec))
	return(TKT_FIL_ACC);

    return(INTK_OK);
}
@


4.20
log
@include des.h
@
text
@d2 2
a3 2
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/krb_get_in_tkt.c,v $
 * $Author: jtkohl $
d14 1
a14 1
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/krb_get_in_tkt.c,v 4.19 89/07/18 16:31:31 jtkohl Exp Locker: kfall $";
d97 2
a98 1
 * the wrong server or the ticket store couldn't be initialized.
d222 1
a222 1
	return(INTK_ERR);		/* no appropriate error code
d292 1
a292 1
	return(INTK_ERR);
d297 1
a297 1
	return(kerror);
@


4.19
log
@changes to allow alternate decryption routine for ticket responses from
KDC.
Programmer: Jay Berkenbilt
Auditor: John Kohl
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/krb_get_in_tkt.c,v $
 * $Author: qjb $
d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.18 89/06/26 14:50:52 qjb Locked $";
d18 1
a19 1
#include <des.h>
@


4.18
log
@Added additional networking sanity checking to prevent passing a negative
or too large value to bcopy in two spots.

Programmer: jtkohl
Auditer: qjb
@
text
@d3 1
a3 1
 * $Author: jis $
d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.17 89/05/18 21:33:30 jtkohl Locked $";
d33 43
d87 3
a89 2
 * the reply from Kerberos; and "arg" is an argument to be passed on
 * to the "key_proc" routine.
d116 2
a117 1
krb_get_in_tkt(user,instance,realm,service,sinstance,life,key_proc,arg)
d125 1
a137 2
    C_Block key;		/* Key for decrypting cipher */
    Key_schedule key_s;
d226 4
a229 20
#ifndef NOENCRYPTION
    /* Attempt to decrypt it */
#endif

    {
	/* generate a key */
	register int rc;
	rc = (*key_proc)(user,instance,realm,arg,key);
	if (rc)
	    return(rc);
    }

#ifndef NOENCRYPTION
    key_sched(key,key_s);
    pcbc_encrypt((C_Block *)cip->dat,(C_Block *)cip->dat,
		 (long) cip->length,key_s,key,0);
#endif /* !NOENCRYPTION */
    /* Get rid of all traces of key */
    bzero((char *)key,sizeof(key));
    bzero((char *)key_s,sizeof(key_s));
@


4.17
log
@Check the KDC supplied timestamp in the returned ticket to verify
that it is reasonable (guard against replay attempts).
Programmer: jtkohl
Auditor: jis
@
text
@d3 1
a3 1
 * $Author: wesommer $
d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.16 89/04/18 16:22:21 jtkohl Locked $";
d176 3
d237 2
a238 1
    if ((tkt->length + (ptr - (char *) cip->dat)) > cip->length)
@


4.16
log
@Fix sign-extension problem.
Programmer: John Kohl.
@
text
@d3 1
a3 1
 * $Author: jtkohl $
d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.15 89/03/22 14:47:35 jtkohl Locked $";
d110 2
d244 12
@


4.15
log
@#ifdef NOENCRYPTION for comments
@
text
@d3 1
a3 1
 * $Author: wesommer $
d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.14 89/01/17 22:04:22 jtkohl Locked $";
d226 4
a229 3
    lifetime = (unsigned long) ptr[0];
    kvno = (unsigned long) ptr[1];
    tkt->length = (int) ptr[2];
@


4.14
log
@Remove declaration of C_Block_print().
Programmer: John Kohl.
@
text
@d3 1
a3 1
 * $Author: rfrench $
d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.13 89/01/17 15:51:11 jtkohl Locked $";
d177 1
d179 1
@


4.13
log
@Programmer: jtkohl
Auditor: rfrench
Cast error return to (int)
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.12 88/12/05 15:21:09 jtkohl Locked $";
a29 1
extern  C_Block_print();
@


4.12
log
@Added #ifdef NOENCRYPTION code (to send stuff
in the clear in case no DES library present).
Programmer: jtkohl
Auditor: steiner
@
text
@d3 1
a3 1
 * $Author: jtkohl $
d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.11 88/12/01 14:12:26 jtkohl Locked $";
d161 1
a161 1
        return(rep_err_code);
@


4.11
log
@Programmer: Jennifer Steiner
Auditor: John Kohl
changes: improve documentation of code
@
text
@d3 1
a3 1
 * $Author: shanzer $
d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.10 88/08/22 15:29:01 steiner Locked $";
d188 1
d192 1
@


4.10
log
@Added a small workaround so the code compile on an apollo also.. 
Programmer: wesommer
 Auditor: shanzer & raeburn
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.9 88/02/24 18:13:47 steiner Exp $";
d34 37
a70 5
 * krb_get_in_tkt takes the name of the initial ticket to be obtained
 * and the name of the prinicpal the ticket is for.  It then contacts
 * kerberos to get it.  Once obtained, it attempts to decrypt it using
 * the procedure provided to generate a key, and stores it away for
 * future use.
d72 1
d111 2
d140 2
a141 1
    /* Send the packet */
d166 3
a168 1
    /*  get the principal's expiration date */
d175 1
d197 1
d204 1
d211 1
d218 1
d222 1
d231 1
d239 1
d243 1
@


4.9
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: krb_get_in_tkt.c,v 4.8 88/01/12 21:21:54 steiner Locked $";
d179 5
a183 4
    lifetime = (unsigned long) *(ptr++);
    kvno = (unsigned long) *(ptr++);
    tkt->length = (int) *(ptr++);

@


4.8
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 2
a3 3
 *  $Source: /mit/kerberos/lib/krb/RCS/krb_get_in_tkt.c,v $
 *  $Author: jtkohl $
 *  $Locker: steiner $
d5 2
a6 1
 * Copyright 1986,1987 by the Massachusetts Institute of Technology
d8 2
d14 1
a14 1
    "$Header: krb_get_in_tkt.c,v 4.7 87/11/09 11:32:00 steiner Locked $";
d17 1
@


4.7
log
@sanity check to make sure the returned ticket is what we asked for.
It needs a better error code.
@
text
@d2 3
a4 3
 *  $Source: /paris/u3/kerberos.new/lib/krb/RCS/krb_get_in_tkt.c,v $
 *  $Author: steiner $
 *  $Locker: jtkohl $
d12 2
a13 2
"$Header: krb_get_in_tkt.c,v 4.6 87/10/28 16:03:48 jtkohl Locked $";
#endif  lint
d23 1
a23 1
/* use the bsd time.h struct defs for PC too!                              */
d27 2
a28 2
extern	C_Block_print();
int	swap_bytes;
d31 5
a35 5
 * krb_get_in_tkt takes the name of the initial ticket to be obtained and
 * the name of the prinicpal the ticket is for.  It then contacts
 * kerberos to get it.  Once obtained, it attempts to decrypt it
 * using the procedure provided to generate a key, and stores it
 * away for future use.
d38 8
a45 8
     char	*user;
     char	*instance;
     char	*realm;
     char	*service;
     char	*sinstance;
     int 	life;
     int	(*key_proc)();
     char	*arg;
d47 14
a60 14
     KTEXT_ST pkt_st;
     KTEXT	    pkt = &pkt_st;	/* Packet to KDC	*/
     KTEXT_ST rpkt_st;
     KTEXT           rpkt = &rpkt_st;	/* Returned packet	*/
     KTEXT_ST cip_st;
     KTEXT           cip = &cip_st;	/* Returned Ciphertext	*/
     KTEXT_ST tkt_st;
     KTEXT           tkt = &tkt_st;	/* Current ticket	*/
     C_Block         ses;		/* Session key for tkt	*/
     int             kvno;		/* Kvno for session key	*/
     C_Block         key;	/* Key for decrypting cipher	*/
     Key_schedule    key_s;
     unsigned char	*v =  pkt->dat;		/* Prot vers no */
     unsigned char	*t =  (pkt->dat+1);	/* Prot msg type*/
d62 8
a69 8
     char    		s_name[SNAME_SZ];
     char    		s_instance[INST_SZ];
     char    		rlm[REALM_SZ];
     int			lifetime;
     int			msg_byte_order;
     int			kerror;
     unsigned long	exp_date;
     char		*ptr;
d71 1
a71 1
     struct  timeval t_local;
d73 1
a73 1
     unsigned long	rep_err_code;
d75 4
a78 4
     /* Set up the fixed part of the packet  */
     *v = (unsigned char) KRB_PROT_VERSION;
     *t = (unsigned char) AUTH_MSG_KDC_REQUEST;
     *t |= HOST_BYTE_ORDER;
d80 8
a87 7
     /* Now for the variable info */
     (void) strcpy((char *)(pkt->dat+2),user); /* aname */
     pkt->length = 3 + strlen(user);
     (void) strcpy((char *)(pkt->dat+pkt->length),instance); /* instance */
     pkt->length += 1 + strlen(instance);
     (void) strcpy((char *)(pkt->dat+pkt->length),realm); /* realm */
     pkt->length += 1 + strlen(realm);
d89 4
a92 4
     (void) gettimeofday(&t_local,(struct timezone *) 0);
     /* timestamp */
     bcopy((char *)&(t_local.tv_sec),(char *)(pkt->dat+pkt->length), 4);
     pkt->length += 4;
d94 5
a98 5
     *(pkt->dat+(pkt->length)++) = (char) life;
     (void) strcpy((char *)(pkt->dat+pkt->length),service);
     pkt->length += 1 + strlen(service);
     (void) strcpy((char *)(pkt->dat+pkt->length),sinstance);
     pkt->length += 1 + strlen(sinstance);
d100 1
a100 1
     rpkt->length = 0;
d102 2
a103 2
     /* Send the packet */
     if (kerror = send_to_kdc(pkt, rpkt, realm)) return(kerror);
d105 3
a107 3
     /* check packet version of the returned packet */
     if (pkt_version(rpkt) != KRB_PROT_VERSION)
	  return(INTK_PROT);
d109 6
a114 6
     /* Check byte order */
     msg_byte_order = pkt_msg_type(rpkt) & 1;
     swap_bytes = 0;
     if (msg_byte_order != HOST_BYTE_ORDER) {
	  swap_bytes++;
     }
d116 10
a125 10
     switch (pkt_msg_type(rpkt) & ~1) {
     case AUTH_MSG_KDC_REPLY:
	  break;
     case AUTH_MSG_ERR_REPLY:
	  bcopy(pkt_err_code(rpkt),(char *) &rep_err_code,4);
	  if (swap_bytes) swap_u_long(rep_err_code);
	  return(rep_err_code);
     default:
	  return(INTK_PROT);
     }
d127 3
a129 3
     /*  get the principal's expiration date	*/
     bcopy(pkt_x_date(rpkt),(char *) &exp_date,sizeof(exp_date));
     if (swap_bytes) swap_u_long(exp_date);
d131 2
a132 2
     /* Extract the ciphertext */
     cip->length = pkt_clen(rpkt);	/* let clen do the swap */
d134 1
a134 1
     bcopy((char *) pkt_cipher(rpkt),(char *)(cip->dat),cip->length);
d136 1
a136 1
     /* Attempt to decrypt it */
d138 7
a144 7
     {
	  /* generate a key */
	  register int rc;
	  rc = (*key_proc)(user,instance,realm,arg,key);
	  if (rc)
	       return(rc);
     }
d146 6
a151 6
     key_sched(key,key_s);
     pcbc_encrypt((C_Block *)cip->dat,(C_Block *)cip->dat,
		  (long) cip->length,key_s,key,0);
     /* Get rid of all traces of key */
     bzero((char *)key,sizeof(key));
     bzero((char *)key_s,sizeof(key_s));
d153 1
a153 1
     ptr = (char *) cip->dat;
d155 2
a156 2
     bcopy(ptr,(char *)ses,8);
     ptr += 8;
d158 2
a159 2
     if((strlen(ptr) + (ptr - (char *) cip->dat)) > cip->length)
	  return(INTK_BADPW);
d161 2
a162 2
     (void) strcpy(s_name,ptr);
     ptr += strlen(s_name) + 1;
d164 2
a165 2
     if((strlen(ptr) + (ptr - (char *) cip->dat)) > cip->length)
	  return(INTK_BADPW);
d167 2
a168 2
     (void) strcpy(s_instance,ptr);
     ptr += strlen(s_instance) + 1;
d170 2
a171 2
     if((strlen(ptr) + (ptr - (char *) cip->dat)) > cip->length)
	  return(INTK_BADPW);
d173 2
a174 2
     (void) strcpy(rlm,ptr);
     ptr += strlen(rlm) + 1;
d176 3
a178 3
     lifetime = (unsigned long) *(ptr++);
     kvno = (unsigned long) *(ptr++);
     tkt->length = (int) *(ptr++);
d180 2
a181 2
     if((tkt->length + (ptr - (char *) cip->dat)) > cip->length)
	  return(INTK_BADPW);
d183 2
a184 2
     bcopy(ptr,(char *)(tkt->dat),tkt->length);
     ptr += tkt->length;
d186 3
a188 3
     if (strcmp(s_name, service) || strcmp(s_instance, sinstance) ||
	 strcmp(rlm, realm))		/* not what we asked for */
	     return(INTK_ERR);		/* we need a better code here XXX */
d190 2
a191 2
     if (in_tkt(user,instance) != KSUCCESS)
	     return(INTK_ERR);
d193 3
a195 3
     if (kerror = save_credentials(s_name,s_instance,rlm,ses,lifetime,kvno,tkt,
		      t_local.tv_sec))
	     return(kerror);
d197 1
a197 1
     return(INTK_OK);
@


4.6
log
@Took out byteorder.h; that info is now in krb_conf.h.
@
text
@d2 1
a2 1
 *  $Source: /u3/kerberos.new/lib/krb/RCS/krb_get_in_tkt.c,v $
d4 1
a4 1
 *  $Locker: steiner $
d12 1
a12 1
"$Header: krb_get_in_tkt.c,v 4.5 87/10/28 15:44:52 steiner Locked $";
d184 4
@


4.5
log
@jtkohl's changes.
@
text
@d3 2
a4 2
 *  $Author: jtkohl $
 *  $Locker: jtkohl $
d11 2
a12 1
static char *rcsid_krb_get_in_tkt_c = "$Header: krb_get_in_tkt.c,v 4.4 87/10/20 17:11:13 jtkohl Locked $";
a14 1

a17 1
#include <byteorder.h>
@


4.4
log
@lint fixes.
@
text
@d3 1
a3 1
 *  $Author: steiner $
d11 1
a11 1
static char *rcsid_krb_get_in_tkt_c = "$Header: krb_get_in_tkt.c,v 4.3 87/09/22 13:54:46 jtkohl Locked $";
d120 1
a120 1
	  bcopy((char *)pkt_err_code(rpkt),(char *) &rep_err_code,4);
d128 1
a128 1
     bcopy((char *)pkt_x_date(rpkt),(char *) &exp_date,sizeof(exp_date));
@


4.3
log
@Ken Raeburn's fix.
@
text
@d2 1
a2 1
 *  $Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/krb_get_in_tkt.c,v $
d4 1
a4 1
 *  $Locker: steiner $
d11 1
a11 1
static char *rcsid_krb_get_in_tkt_c = "$Header: krb_get_in_tkt.c,v 4.2 87/09/10 16:20:41 steiner Locked $";
d18 1
a72 1
     struct  timezone tz;
d82 1
a82 1
     strcpy(pkt->dat+2,user);	/* aname */
d84 1
a84 1
     strcpy(pkt->dat+pkt->length,instance); /* instance */
d86 1
a86 1
     strcpy(pkt->dat+pkt->length,realm); /* realm */
d89 3
a91 2
     gettimeofday(&t_local,&tz);
     bcopy(&(t_local.tv_sec),pkt->dat+pkt->length, 4); /* timestamp */
d95 1
a95 1
     strcpy(pkt->dat+pkt->length,service);
d97 1
a97 1
     strcpy(pkt->dat+pkt->length,sinstance);
d120 1
a120 1
	  bcopy(pkt_err_code(rpkt),&rep_err_code,4);
d128 1
a128 1
     bcopy(pkt_x_date(rpkt),&exp_date,sizeof(exp_date));
d134 1
a134 1
     bcopy(pkt_cipher(rpkt),cip->dat,cip->length);
d141 1
a141 1
	  rc = (key_proc)(user,instance,realm,arg,key);
d147 2
a148 1
     pcbc_encrypt(cip->dat,cip->dat,(long) cip->length,key_s,key,0);
d150 2
a151 2
     bzero(key,sizeof(key));
     bzero(key_s,sizeof(key_s));
d155 1
a155 1
     bcopy(ptr,ses,8);
d161 1
a161 1
     strcpy(s_name,ptr);
d167 1
a167 1
     strcpy(s_instance,ptr);
d173 1
a173 1
     strcpy(rlm,ptr);
d183 1
a183 1
     bcopy(ptr,tkt->dat,tkt->length);
d186 2
a187 1
     in_tkt(user,instance);
d189 3
a191 2
     save_credentials(s_name,s_instance,rlm,ses,lifetime,kvno,tkt,
		      t_local.tv_sec);
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d11 1
a11 1
static char *rcsid_krb_get_in_tkt_c = "$Header: krb_get_in_tkt.c,v 4.1 87/09/01 15:46:56 steiner Locked $";
d28 1
a73 1
     int		swap_bytes;
@


4.1
log
@No change; starting version 4.
@
text
@d3 1
a3 1
 *  $Author: jis $
d11 1
a11 1
static char *rcsid_krb_get_in_tkt_c = "$Header: krb_get_in_tkt.c,v 3.7 87/07/06 14:12:01 steiner Locked $";
d17 1
a17 1
#include "prot.h"
@


3.7
log
@Change arguments handed to key_proc (in krb_get_in_tkt)
@
text
@d2 1
a2 1
 *  $Source: /source/4.3/athena.lib/kerberos/lib/krb/RCS/krb_get_in_tkt.c,v $
d4 1
a4 1
 *  $Locker: jis $
d11 1
a11 1
static char *rcsid_krb_get_in_tkt_c = "$Header: krb_get_in_tkt.c,v 3.6 87/07/06 13:50:42 jis Locked $";
@


3.6
log
@Add support for different ways to specify the key to decode the tickets.
@
text
@d2 3
a4 3
 *  $Source: /source/kerberos/lib/krb/RCS/get_in_tkt.c,v $
 *  $Author: spook $
 *  $Locker:  $
d11 1
a11 1
static char *rcsid_krb_get_in_tkt_c = "$Header$";
d140 1
a140 1
	  rc = (key_proc)(user,instance,realm,service,sinstance,arg,key);
@


3.5
log
@Many changes.  Almost a rewrite.
@
text
@d1 4
a4 6
/* 
 *  $Source: /mit/projects/auth/src/lib/krb/RCS/get_intkt.c,v $
 *  $Author: bcn $
 *  $Locker: bcn $
 * 
 * Copyright 1986 by the Massachusetts Institute of Technology
d6 2
d11 1
a11 1
static char *rcsid_get_intkt_c = "$Header: get_intkt.c,v 3.4 86/08/15 09:24:48 bcn Exp $";
d20 1
a26 1
extern  debug;
d29 3
a31 9
static struct  timeval t_local = { 0, 0 };
static struct  timezone tz = { 0, 0 };
    
int		swap_bytes;
unsigned long	rep_err_code;

/* 
 * get_intkt takes the name of the initial ticket to be obtained and
 * the name of the prinicpal the ticket is for.  It then contacts 
d33 2
a34 8
 * using the password provided and stores it away for future use.
 *
 * If the value password is null, get_in_tkt will prompt for
 * the password.  
 *
 * At the moment, it ignores the name of the desired instance and
 * service, and instead, reads k_in_tkts and gets lots of tickets.
 * This will be changing relatively soon.
d36 9
a44 8
get_in_tkt(user,instance,realm,service,sinstance,life,password)
char    *user;
char	*instance;
char	*realm;
char	*service;
char	*sinstance;
int     life;
char	*password;
d46 14
d61 8
d70 2
a71 16
    int             rlen;
    static KTEXT_ST pkt_st;
    KTEXT	    pkt = &pkt_st;	/* Packet to KDC	*/
    static KTEXT_ST rpkt_st;
    KTEXT           rpkt = &rpkt_st;	/* Returned packet	*/
    static KTEXT_ST cip_st;
    KTEXT           cip = &cip_st;	/* Returned Ciphertext	*/
    static KTEXT_ST tkt_st;
    KTEXT           tkt = &tkt_st;	/* Current ticket	*/
    C_Block         ses;		/* Session key for tkt	*/
    int             kvno;		/* Kvno for session key	*/
    char	    trealm[REALM_SZ];		
    C_Block         key;	/* Key for decrypting cipher	*/
    Key_schedule    key_s;	
    unsigned char	*v =  pkt->dat;		/* Prot vers no */
    unsigned char	*t =  (pkt->dat+1);	/* Prot msg type*/
d73 2
a74 14
    char    		*tfile = CL_GTGT_INIT_FILE;
    char    		s_name[SNAME_SZ];
    char    		s_instance[INST_SZ];
    char    		rlm[REALM_SZ];
    int			lifetime;
    int			msg_byte_order;
    int			kerror;
    unsigned long	exp_date;
    char		*ptr;
    
    /* Set up the fixed part of the packet  */
    *v = (unsigned char) KRB_PROT_VERSION;
    *t = (unsigned char) AUTH_MSG_KDC_REQUEST;
    *t |= HOST_BYTE_ORDER;
d76 4
a79 11
    /* Now for the variable info */
    strcpy(pkt->dat+2,user); 				/* aname	*/
    pkt->length = 3 + strlen(user);	
    strcpy(pkt->dat+pkt->length,instance);		/* instance     */
    pkt->length += 1 + strlen(instance);
    strcpy(pkt->dat+pkt->length,realm);			/* realm	*/
    pkt->length += 1 + strlen(realm);
    
    gettimeofday(&t_local,&tz);
    bcopy(&(t_local.tv_sec),pkt->dat+pkt->length,4);	/* timestamp	*/
	pkt->length += 4;
d81 7
a87 5
    *(pkt->dat+(pkt->length)++) = (char) life;
    strcpy(pkt->dat+pkt->length,service);
    pkt->length += 1 + strlen(service);	
    strcpy(pkt->dat+pkt->length,sinstance);
    pkt->length += 1 + strlen(sinstance);
d89 3
a91 1
    rpkt->length = 0;
d93 5
a97 2
    /* Send the packet */
    if (kerror = send_to_kdc(pkt, rpkt, realm)) return(kerror); 
d99 1
a99 29
    /* check packet version of the returned packet */
    if (pkt_version(rpkt) != KRB_PROT_VERSION )
    	return(INTK_PROT);
        
    /* Check byte order */
    msg_byte_order = pkt_msg_type(rpkt) & 1;
    swap_bytes = 0;
	if (msg_byte_order != HOST_BYTE_ORDER )
        {
		swap_bytes++;
	  	}
	
	switch (pkt_msg_type(rpkt) & ~1)
		{
		case AUTH_MSG_KDC_REPLY: break;
		case AUTH_MSG_ERR_REPLY:
			{
			bcopy(pkt_err_code(rpkt),&rep_err_code,4);
			if (swap_bytes) swap_u_long(rep_err_code);
			return(rep_err_code);
			}
		
		default:
			return(INTK_PROT);
		}
	
	/*  get the principal's expiration date	*/
	bcopy(pkt_x_date(rpkt),&exp_date,sizeof(exp_date));
	if (swap_bytes) swap_u_long(exp_date);
d101 2
a102 7
#ifdef EXNOTIF
	if ((exp_date - t_local.tv_sec) <(3600*24*45))
		{
		printf("\n\07\07NOTE-- Kerberos authentication expires %s\n\n",
			stime(&exp_date));
			}
#endif
d104 3
a106 3
	
    /* Extract the ciphertext */
    cip->length = pkt_clen(rpkt);	/* let clen do the swap */
d108 6
a113 1
    bcopy(pkt_cipher(rpkt),cip->dat,cip->length);
d115 10
a124 1
    /* Attempt to decrypt it */
d126 3
a128 11
    if (password)
    	string_to_key(password,key);
    else
    	{des_read_password(key,"\Password: ",0);
	 printf("\n");}
    key_sched(key,key_s);
    if (debug)  printf("About to do decryption ...");
    pcbc_encrypt(cip->dat,cip->dat,(long) cip->length,key_s,key,0);
    /* Get rid of all traces of key */
    bzero(key,sizeof(key));
    bzero(key_s,sizeof(key_s));
d130 2
a131 1
    ptr = (char *) cip->dat;
d133 1
a133 2
    bcopy(ptr,ses,8);
    ptr += 8;
d135 1
a135 2
    if((strlen(ptr) + (ptr - (char *) cip->dat)) > cip->length)
      return(INTK_BADPW);
d137 7
a143 2
    strcpy(s_name,ptr);
    ptr += strlen(s_name) + 1;
d145 5
a149 2
    if((strlen(ptr) + (ptr - (char *) cip->dat)) > cip->length)
      return(INTK_BADPW);
d151 1
a151 2
    strcpy(s_instance,ptr);
    ptr += strlen(s_instance) + 1;
d153 2
a154 2
    if((strlen(ptr) + (ptr - (char *) cip->dat)) > cip->length)
      return(INTK_BADPW);
d156 2
a157 2
    strcpy(rlm,ptr);
    ptr += strlen(rlm) + 1;
d159 2
a160 3
    lifetime = (unsigned long) *(ptr++);
    kvno = (unsigned long) *(ptr++);
    tkt->length = (int) *(ptr++);
d162 2
a163 2
    if((tkt->length + (ptr - (char *) cip->dat)) > cip->length)
      return(INTK_BADPW);
d165 2
a166 2
    bcopy(ptr,tkt->dat,tkt->length);
    ptr += tkt->length;
d168 2
a169 4
#ifdef notdef
    bcopy( ((unsigned long *)(offset + c->dat)), &time_kdc, sizeof(time_kdc));
	if (swap_bytes) swap_u_long(time_kdc)
    delta_t = abs(time_kdc - t_sec);
d171 2
a172 2
    if (debug) printf("\ntime_kdc = 0x%x time_ws = 0x%x diff = %d",
                time_kdc,t_sec,delta_t);
d174 3
a176 6
    if (delta_t > 5*60) 
        {
        /* printf("\n\07\07Invalid Password or invalid local time\n"); */
        return -2; /* not close enough                 */
        }
#endif    
d178 2
d181 2
a182 1
    in_tkt(user,instance);
d184 1
a184 1
    save_credentials(s_name,s_instance,rlm,ses,lifetime,kvno,tkt,t_local.tv_sec); 
d186 2
a187 2
    return(INTK_OK);
}
d189 1
a189 12

get_intkt(user,instance,realm,service,sinstance,life,password)
char    *user;
char	*instance;
char	*realm;
char	*service;
char	*sinstance;
int     life;
char	*password;
{
fprintf(stderr,"Use get_in_tkt instead of get_intkt\n");
get_in_tkt(user,instance,realm,service,sinstance,life,password);
@


3.4
log
@Moved creation of ticket file past the password check.
@
text
@d11 1
a11 1
static char *rcsid_get_intkt_c = "$Header: get_intkt.c,v 3.3 86/08/12 13:19:30 bcn Exp $";
d29 2
a30 2
struct  timeval t_local = { 0, 0 };
struct  timezone tz = { 0, 0 };
d42 1
a42 1
 * the password.  In any case, the password is zeroed after use. 
d48 1
a48 1
get_intkt(user,instance,realm,service,sinstance,life,password)
a57 1
/*************** OK above this point ********************/
d60 2
a61 1
    KTEXT           pkt;		/* Packet to KDC	*/
d73 2
d76 4
a79 3
    char    *tfile = CL_GTGT_INIT_FILE;
    char    s_name[SNAME_SZ];
    char    s_instance[INST_SZ];
d84 1
d86 4
d91 8
a98 1
    /* Create skeleton of packet to be sent */
d100 2
a101 1
    pkt = create_packet_to_kdc(user,instance,realm,t_local.tv_sec);
d103 6
a108 2
    add_request(pkt,life,service,sinstance);
    
d112 1
a112 1
    if (kerror = send_to_kdc(pkt, rpkt)) return(kerror); 
d163 2
a164 2
    	read_password(key,"\Password: ",0);

a170 3
    if(password)
    	while(*password)
		*(password++) = 0;
d172 42
a213 2
    /*  sanity check the decrypted cipher                                  */
    if (check_cipher(cip,1,t_local.tv_sec)) 
d215 2
a216 1
        return(INTK_BADPW);
d218 3
a220 1
    
d223 2
a224 2
    extract_ticket(cip,1,ses,&lifetime,&kvno,trealm,tkt);
    save_credentials(service,sinstance,"",ses,lifetime,kvno,tkt,t_local.tv_sec); 
d229 12
@


3.3
log
@Now longer open k_in_tkts.
@
text
@d11 1
a11 1
static char *rcsid_get_intkt_c = "$Header: get_intkt.c,v 3.2 86/08/12 12:31:32 bcn Exp $";
a76 3
    int     n = 0;
    int     i = 0;
    int     j =0;
a77 1
    int			nulltkts;
a154 2
    in_tkt(user,instance);

d161 2
a162 3
    /* re-scan the init file, extract tickets                              */
    n =0;
    nulltkts = 0;
a164 3

    if(nulltkts) return(INTK_W_NOTALL);

@


3.2
log
@Simplified.  Now only requests one ticket.  store changed
to save_credentials.
@
text
@d11 1
a11 1
static char *rcsid_get_intkt_c = "$Header: get_intkt.c,v 3.1 86/07/16 12:02:16 bcn Exp $";
a73 1
    FILE    *fopen(),*fp;
a85 1
    /* open and read the file defining the initial ticket request          */
a86 2
    if ( ( fp = fopen(tfile,"r")) == NULL) return(INTK_ERR);

a172 1
    fclose(fp); 
@


3.1
log
@This is an interim version that still reads from /etc/k_in_tkts.
@
text
@d2 3
a4 3
 *  $Source:  $
 *  $Author:  $
 *  $Locker:  $
d11 1
a11 1
static char *rcsid_get_intkt_c = "$Header: cl_get_tgt.c,v 3.5 86/05/23 13:22:02 spm Exp $";
d48 1
a48 1
get_intkt(user,instance,realm,service,sinstance,password)
d54 1
a68 1
    int             lifetime;		/* Lifetime for tkt	*/
d81 1
d95 1
a95 9
    /* scan the init file, adding requests                                 */
    while ( fscanf(fp,"%s %s %d",s_name,s_instance,&lifetime) != EOF)
        {
        n++;
        /* see if we want to substitute users login name                   */
        if (!strcmp("~",s_instance)) strcpy(s_instance,user);
        /* see if we want to substitute host name * TODO                   */
        add_request(pkt,lifetime,s_name,s_instance);
        }
d166 1
a166 1
    if (check_cipher(cip,n,t_local.tv_sec)) 
d174 2
a175 17
    rewind(fp);
    while ( fscanf(fp,"%s %s %d",s_name,s_instance,&lifetime) != EOF)
        {
        /* see if we want to substitute users login name                   */
        if (!strcmp("~",s_instance)) strcpy(s_instance,user);
        /* see if we want to substitute host name * TODO                   */
        n++;
        bzero(ses,sizeof(ses));
        lifetime = 0;
        kvno = 0;
        tkt->length = 0;
        extract_ticket(cip,n,ses,&lifetime,&kvno,trealm,tkt);
        store(s_name,s_instance,"",ses,lifetime,kvno,tkt,t_local.tv_sec); 

        if ((tkt->length == 0))
		nulltkts++;
        }
@
