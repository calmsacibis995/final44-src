head     4.13;
branch   ;
access   ;
symbols  PATCH8:4.13 PATCH7:4.13 KPATCH6:4.13 ASRSNAP1001:4.13 PATCH5:4.13 KPATCH4:4.13 KPATCH3:4.13 KPATCH2:4.13 KREL1:4.12 BETA5/24/88:4.8;
locks    ; strict;
comment  @ * @;


4.13
date     89.03.22.14.48.59;  author jtkohl;  state Exp;
branches ;
next     4.12;

4.12
date     89.01.23.15.16.08;  author steiner;  state Exp;
branches ;
next     4.11;

4.11
date     88.12.05.15.21.20;  author steiner;  state Exp;
branches ;
next     4.10;

4.10
date     88.12.01.14.16.47;  author jtkohl;  state Exp;
branches ;
next     4.9;

4.9
date     88.08.26.12.34.11;  author shanzer;  state Exp;
branches ;
next     4.8;

4.8
date     88.02.24.18.14.18;  author steiner;  state Exp;
branches ;
next     4.7;

4.7
date     88.01.12.21.22.16;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     87.12.06.11.24.24;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     87.10.28.16.04.56;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.28.15.58.50;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.20.17.11.43;  author jtkohl;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.20.47;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.47.03;  author steiner;  state Exp;
branches ;
next     1.6;

1.6
date     86.08.18.16.45.11;  author root;  state Exp;
branches ;
next     1.5;

1.5
date     86.07.02.17.57.54;  author spm;  state Exp;
branches ;
next     1.4;

1.4
date     86.05.14.15.26.47;  author spm;  state Exp;
branches ;
next     1.3;

1.3
date     86.05.06.16.30.29;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     86.04.16.12.23.50;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     86.04.04.18.08.43;  author spm;  state Exp;
branches ;
next     ;


desc
@@


4.13
log
@#ifdef NOENCRYPTION for comments
@
text
@/*
 * $Source: /mit/kerberos/src/lib/krb/RCS/mk_priv.c,v $
 * $Author: steiner $
 *
 * Copyright 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * This routine constructs a Kerberos 'private msg', i.e.
 * cryptographically sealed with a private session key.
 *
 * Note-- bcopy is used to avoid alignment problems on IBM RT.
 *
 * Note-- It's too bad that it did a long int compare on the RT before.
 *
 * Returns either < 0 ===> error, or resulting size of message
 *
 * Steve Miller    Project Athena  MIT/DEC
 */

#ifndef lint
static char *rcsid_mk_priv_c=
"$Header: mk_priv.c,v 4.12 89/01/23 15:16:08 jtkohl Locked $";
#endif /* lint */

#include <mit-copyright.h>

/* system include files */
#include <stdio.h>
#include <errno.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/time.h>

/* application include files */
#include <des.h>
#include <krb.h>
#include <prot.h>
#include "lsb_addr_comp.h"

extern char *errmsg();
extern int errno;
extern int krb_debug;

/* static storage */


static u_long c_length;
static struct timeval msg_time;
static u_char msg_time_5ms;
static long msg_time_sec;

/*
 * krb_mk_priv() constructs an AUTH_MSG_PRIVATE message.  It takes
 * some user data "in" of "length" bytes and creates a packet in "out"
 * consisting of the user data, a timestamp, and the sender's network
 * address.
#ifndef NOENCRYTION
 * The packet is encrypted by pcbc_encrypt(), using the given
 * "key" and "schedule".
#endif
 * The length of the resulting packet "out" is
 * returned.
 *
 * It is similar to krb_mk_safe() except for the additional key
 * schedule argument "schedule" and the fact that the data is encrypted
 * rather than appended with a checksum.  Also, the protocol version
 * number is "private_msg_ver", defined in krb_rd_priv.c, rather than
 * KRB_PROT_VERSION, defined in "krb.h".
 *
 * The "out" packet consists of:
 *
 * Size			Variable		Field
 * ----			--------		-----
 *
 * 1 byte		private_msg_ver		protocol version number
 * 1 byte		AUTH_MSG_PRIVATE |	message type plus local
 *			HOST_BYTE_ORDER		byte order in low bit
 *
#ifdef NOENCRYPTION
 * 4 bytes		c_length		length of data
#else
 * 4 bytes		c_length		length of encrypted data
 *
 * ===================== begin encrypt ================================
#endif
 * 
 * 4 bytes		length			length of user data
 * length		in			user data
 * 1 byte		msg_time_5ms		timestamp milliseconds
 * 4 bytes		sender->sin.addr.s_addr	sender's IP address
 *
 * 4 bytes		msg_time_sec or		timestamp seconds with
 *			-msg_time_sec		direction in sign bit
 *
 * 0<=n<=7  bytes	pad to 8 byte multiple	zeroes
#ifndef NOENCRYPTION
 *			(done by pcbc_encrypt())
 *
 * ======================= end encrypt ================================
#endif
 */

long krb_mk_priv(in,out,length,schedule,key,sender,receiver)
    u_char *in;                 /* application data */
    u_char *out;                /* put msg here, leave room for
                                 * header! breaks if in and out
                                 * (header stuff) overlap */
    u_long length;              /* of in data */
    Key_schedule schedule;      /* precomputed key schedule */
    C_Block key;                /* encryption key for seed and ivec */
    struct sockaddr_in *sender; /* sender address */
    struct sockaddr_in *receiver; /* receiver address */
{
    register u_char     *p,*q;
    static       u_char *c_length_ptr;
    extern int private_msg_ver; /* in krb_rd_priv.c */

    /*
     * get the current time to use instead of a sequence #, since
     * process lifetime may be shorter than the lifetime of a session
     * key.
     */
    if (gettimeofday(&msg_time,(struct timezone *)0)) {
        return -1;
    }
    msg_time_sec = (long) msg_time.tv_sec;
    msg_time_5ms = msg_time.tv_usec/5000; /* 5ms quanta */

    p = out;

    *p++ = private_msg_ver;
    *p++ = AUTH_MSG_PRIVATE | HOST_BYTE_ORDER;

    /* calculate cipher length */
    c_length_ptr = p;
    p += sizeof(c_length);

#ifndef NOENCRYPTION
    /* start for encrypted stuff */
#endif
    q = p;

    /* stuff input length */
    bcopy((char *)&length,(char *)p,sizeof(length));
    p += sizeof(length);

#ifdef NOENCRYPTION
    /* make all the stuff contiguous for checksum */
#else
    /* make all the stuff contiguous for checksum and encryption */
#endif
    bcopy((char *)in,(char *)p,(int) length);
    p += length;

    /* stuff time 5ms */
    bcopy((char *)&msg_time_5ms,(char *)p,sizeof(msg_time_5ms));
    p += sizeof(msg_time_5ms);

    /* stuff source address */
    bcopy((char *)&sender->sin_addr.s_addr,(char *)p,
          sizeof(sender->sin_addr.s_addr));
    p += sizeof(sender->sin_addr.s_addr);

    /*
     * direction bit is the sign bit of the timestamp.  Ok
     * until 2038??
     */
    /* For compatibility with broken old code, compares are done in VAX 
       byte order (LSBFIRST) */ 
    if (lsb_net_ulong_less(sender->sin_addr.s_addr, /* src < recv */ 
			  receiver->sin_addr.s_addr)==-1) 
        msg_time_sec =  -msg_time_sec; 
    else if (lsb_net_ulong_less(sender->sin_addr.s_addr, 
				receiver->sin_addr.s_addr)==0) 
        if (lsb_net_ushort_less(sender->sin_port,receiver->sin_port) == -1) 
            msg_time_sec = -msg_time_sec; 
    /* stuff time sec */
    bcopy((char *)&msg_time_sec,(char *)p,sizeof(msg_time_sec));
    p += sizeof(msg_time_sec);

    /*
     * All that for one tiny bit!  Heaven help those that talk to
     * themselves.
     */

#ifdef notdef
    /*
     * calculate the checksum of the length, address, sequence, and
     * inp data
     */
    cksum =  quad_cksum(q,NULL,p-q,0,key);
    if (krb_debug)
        printf("\ncksum = %u",cksum);
    /* stuff checksum */
    bcopy((char *) &cksum,(char *) p,sizeof(cksum));
    p += sizeof(cksum);
#endif

#ifdef NOENCRYPTION
    /*
     * All the data have been assembled, compute length
     */
#else
    /*
     * All the data have been assembled, compute length and encrypt
     * starting with the length, data, and timestamps use the key as
     * an ivec.
     */
#endif

    c_length = p - q;
    c_length = ((c_length + sizeof(C_Block) -1)/sizeof(C_Block)) *
        sizeof(C_Block);
    /* stuff the length */
    bcopy((char *) &c_length,(char *)c_length_ptr,sizeof(c_length));

#ifndef NOENCRYPTION
    /* pcbc encrypt, pad as needed, use key as ivec */
    pcbc_encrypt((C_Block *) q,(C_Block *) q, (long) (p-q), schedule,
                 key, ENCRYPT);
#endif /* NOENCRYPTION */

    return (q - out + c_length);        /* resulting size */
}
@


4.12
log
@Programmer: jtkohl
Auditor: steiner
Fixed address comparisons.
@
text
@d25 1
a25 1
"$Header: mk_priv.c,v 4.11 88/12/05 15:21:20 jtkohl Locked $";
d59 6
a64 2
 * address.  The packet is encrypted by pcbc_encrypt(), using the given
 * "key" and "schedule".  The length of the resulting packet "out" is
d82 3
d88 1
d99 1
d103 1
d141 5
a145 1
    q = p;                              /* start for encrypted stuff */
d150 3
d154 1
d202 1
d204 5
a208 1
     * All the data has been assembled, compute length and encrypt
d212 1
@


4.11
log
@Added #ifdef NOENCRYPTION code (to send stuff
in the clear in case no DES library present).
Programmer: jtkohl
Auditor: steiner
@
text
@d3 1
a3 1
 * $Author: jtkohl $
d25 1
a25 1
"$Header: mk_priv.c,v 4.10 88/12/01 14:16:47 jtkohl Locked $";
d41 1
a42 2
#include "addr_comp.h"

d153 9
a161 8

    if (long_less_than((u_char *)&sender->sin_addr.s_addr, /* src < recv */
		       (u_char *)&receiver->sin_addr.s_addr)==-1)
        msg_time_sec =  -msg_time_sec;
    else if (long_less_than((u_char *)&sender->sin_addr.s_addr,
			    (u_char *)&receiver->sin_addr.s_addr)==0)
        if (sender->sin_port < receiver->sin_port)
            msg_time_sec = -msg_time_sec;
@


4.10
log
@Programmer: Jennifer Steiner
Auditor: John Kohl
changes: improve documentation of code
@
text
@d3 1
a3 1
 * $Author: shanzer $
d25 1
a25 1
"$Header: mk_priv.c,v 4.9 88/08/26 12:34:11 steiner Locked $";
d196 1
d200 1
@


4.9
log
@Fixed so it works form one machine type to another.. 
Programmer: dachurch
Auditor: jtkohl
@
text
@d3 1
a3 1
 * $Author: steiner $
d25 1
a25 1
"$Header: mk_priv.c,v 4.8 88/02/24 18:14:18 steiner Exp $";
d56 40
a95 1
/* routine bodies */
a96 1
/* RETURNS long length of the resulting message to be transmitted */
@


4.8
log
@Copyright notice, etc.
@
text
@d16 2
d25 1
a25 1
"$Header: mk_priv.c,v 4.7 88/01/12 21:22:16 steiner Locked $";
d42 2
d116 3
a118 1
    if (sender->sin_addr.s_addr < receiver->sin_addr.s_addr)
d120 2
a121 1
    else if (sender->sin_addr.s_addr == receiver->sin_addr.s_addr)
@


4.7
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 2
a3 1
 * Copyright    1986    Massachusetts Institute of Technology
d5 2
a6 3
 *      $Source: /mit/kerberos/lib/krb/RCS/mk_priv.c,v $
 *      $Author: steiner $
 *      $Locker:  $
d8 2
a9 1
 *      Steve Miller    Project Athena  MIT/DEC
d17 2
d21 7
a45 4
#ifndef lint
static char *rcsid_mk_private_msg_c=
    "$Header: mk_priv.c,v 4.6 87/12/06 11:24:24 steiner Exp $";
#endif /* lint */
@


4.6
log
@Changed user routine names to krb_xxxxxxx
@
text
@d1 2
a2 1
/*	Copyright	1986	Massachusetts Institute of Technology	
d4 3
a6 8
 *  $Source: /mit/kerberos/lib/krb/RCS/mk_priv.c,v $
 *	$Author: steiner $
 *	$Locker: steiner $
 * 
 *	Steve Miller	Project Athena	MIT/DEC
 * 
 *	This routine constructs a Kerberos 'private msg', i.e. cryptographically
 *  sealed with a private session key.
d8 1
a8 1
 *	Note-- bcopy is used to avoid alignment problems on IBM RT
d10 6
a15 1
 *	Returns either <0 ===> error, or resulting size of message 
a17 1

d19 5
a23 5
# include	<stdio.h>
# include	<errno.h>
# include	<sys/types.h>
# include	<netinet/in.h>
# include	<sys/time.h>
d26 3
a28 3
#include	<des.h>
#include	<krb.h>
#include	<prot.h>
d30 3
a32 3
extern 	char	*errmsg();
extern	int 	errno;
extern	int		krb_debug;
a33 5
/* local defines */

/* global storage */


d36 1
a36 1
#ifndef	lint
d38 2
a39 2
"$Header: mk_priv.c,v 4.5 87/10/28 16:04:56 steiner Locked $";
#endif lint
d41 4
a44 4
static	u_long	c_length;
static	struct	timeval	msg_time;
static	u_char	msg_time_5ms;
static	long	msg_time_sec;
a47 11
long
krb_mk_priv(in,out,length,schedule,key,sender,receiver)
u_char *in;				/* application data */
u_char *out;				/* put msg here, leave room for
					   header! breaks if in and out
					   (header stuff) overlap */
u_long length;				/* of in data */
Key_schedule schedule;			/* precomputed key schedule */
C_Block key;				/* encryption key for seed and ivec */
struct sockaddr_in *sender;		/* sender address */
struct sockaddr_in *receiver;		/* receiver address */
d49 10
d60 3
a62 3
	register u_char	*p,*q;
	static	 u_char	*c_length_ptr;
	extern int private_msg_ver;	/* in krb_rd_priv.c */
d64 10
a73 8
	/* get the current time to use instead of a sequence #, since process
	 * lifetime may be shorter than the lifetime of a session key.
	 */
	if (gettimeofday(&msg_time,(struct timezone *)0)) {
		return	-1;
	}
	msg_time_sec = (long) msg_time.tv_sec;
	msg_time_5ms = msg_time.tv_usec/5000; /* 5ms quanta */
d75 1
a75 1
	p = out;
d77 2
a78 2
	*p++ = private_msg_ver;
	*p++ = AUTH_MSG_PRIVATE | HOST_BYTE_ORDER;
d80 3
a82 3
	/* calculate cipher length */
	c_length_ptr = p;
	p += sizeof(c_length);
d84 4
a87 4
	q = p;				/* start for encrypted stuff */
	/* stuff input length */
	bcopy((char *)&length,(char *)p,sizeof(length));
	p += sizeof(length);
d89 3
a91 3
	/* make all the stuff contiguous for checksum and encryption */
	bcopy((char *)in,(char *)p,(int) length);
	p += length;
d93 3
a95 3
	/* stuff time 5ms */
	bcopy((char *)&msg_time_5ms,(char *)p,sizeof(msg_time_5ms));
	p += sizeof(msg_time_5ms);
d97 4
a100 4
	/* stuff source address */
	bcopy((char *)&sender->sin_addr.s_addr,(char *)p,
	      sizeof(sender->sin_addr.s_addr));
	p += sizeof(sender->sin_addr.s_addr);
d102 12
a113 13
	/* direction bit is the sign bit of the timestamp.  Ok until 2038 ?? */
	if (sender->sin_addr.s_addr < receiver->sin_addr.s_addr) {
		msg_time_sec =  -msg_time_sec;
	} else {
		if (sender->sin_addr.s_addr == receiver->sin_addr.s_addr) {
			if (sender->sin_port < receiver->sin_port) {
				msg_time_sec = -msg_time_sec;
			}
		}
	}
	/* stuff time sec */
	bcopy((char *)&msg_time_sec,(char *)p,sizeof(msg_time_sec));
	p += sizeof(msg_time_sec);
d115 4
a118 8
	/* all that for one tiny bit!
	 * Heaven help those that talk to themselves.
	 */
	
#ifdef	notdef
	/* calculate the checksum of the length, address, sequence, and inp data */
	cksum =  quad_cksum(q,NULL,p-q,0,key);
	if (krb_debug)	printf("\ncksum = %u",cksum);
d120 11
a130 2
	bcopy((char *) &cksum,(char *) p,sizeof(cksum)); /* stuff checksum */
	p += sizeof(cksum);
d133 5
a137 4
	/* All the data has been assembled, compute length and encrypt
	 * starting with the length, data, and timestamps
	 * use the key as an ivec
	 */
d139 5
a143 5
	c_length = p - q ;
	c_length = ((c_length + sizeof(C_Block) -1)/sizeof(C_Block)) * 
				sizeof(C_Block);
	/* stuff the length */
	bcopy((char *) &c_length,(char *)c_length_ptr,sizeof(c_length)); 
d145 3
a147 3
	/* pcbc encrypt, pad as needed, use key as ivec */
	pcbc_encrypt((C_Block *) q,(C_Block *) q, (long) (p-q), schedule,
		     key, ENCRYPT);
d149 1
a149 2
	return (q - out + c_length);	/* resulting size					   */
						
@


4.5
log
@Took byteorder.h out; that info is now in krb_conf.h.
@
text
@d3 1
a3 1
 *  $Source: /u3/kerberos.new/lib/krb/RCS/mk_private_msg.c,v $
d43 1
a43 1
"$Header: mk_private_msg.c,v 4.4 87/10/28 15:58:50 steiner Locked $";
d54 1
a54 1
mk_private_msg(in,out,length,schedule,key,sender,receiver)
d68 1
a68 1
	extern int private_msg_ver;	/* in rd_private_msg.c */
@


4.4
log
@jtkohl's changes.
@
text
@d3 3
a5 3
 *  $Source: /paris/u3/kerberos.new/lib/krb/RCS/mk_private_msg.c,v $
 *	$Author: jtkohl $
 *	$Locker: jtkohl $
a28 1
#include	<byteorder.h>
d42 2
a43 1
static char *rcsid_mk_private_msg_c="$Header: mk_private_msg.c,v 4.3 87/10/20 17:11:43 jtkohl Locked $";
@


4.3
log
@lint fixes.
@
text
@d3 2
a4 2
 *  $Source: /u3/kerberos.new/lib/krb/RCS/mk_private_msg.c,v $
 *	$Author: steiner $
d33 1
a33 1
extern	int		debug;
d43 1
a43 1
static char *rcsid_mk_private_msg_c="$Header: mk_private_msg.c,v 4.2 87/09/10 16:20:47 jtkohl Locked $";
d127 1
a127 1
	if (debug)	printf("\ncksum = %u",cksum);
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d3 1
a3 1
 *  $Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/mk_private_msg.c,v $
d5 1
a5 4
 *	$Locker: steiner $
 *	$Log:	mk_private_msg.c,v $
 * Revision 4.1  87/09/01  15:47:03  steiner
 * No change; starting version 4.
a6 16
 * Revision 1.6  86/08/18  16:45:11  root
 * Hacked on private message version hack.  Watch out for private_msg_ver.
 * 
 * Revision 1.5  86/07/02  17:57:54  spm
 * add second arg to gettimeofday
 * 
 * Revision 1.4  86/05/14  15:26:47  spm
 * *** empty log message ***
 * 
 * Revision 1.2  86/04/16  12:23:50  spm
 * *** empty log message ***
 * 
 * Revision 1.1  86/04/04  18:08:43  spm
 * Initial revision
 * 
 * 
d18 1
a18 1
/* system include files													   */
d25 1
a25 1
/* application include files											   */
d29 1
d35 1
a35 1
/* local defines														   */
d37 1
a37 1
/* global storage														   */
d40 1
a40 1
/* static storage														   */
d43 1
a43 1
static char		*rcsid_mk_private_msg_c="$Header: mk_private_msg.c,v 4.1 87/09/01 15:47:03 steiner Locked $";
a45 1
static	u_long	cksum;
a46 1
static 	C_Block	temp;
d51 1
a51 1
/* routine bodies														   */
d54 11
a64 14
	mk_private_msg(in,out,length,schedule,key,sender,receiver)

	u_char			*in;		/* application data						   */
	u_char			*out;		/* put msg here, leave room for header!
								 * breaks if in and out (header stuff)
								 * overlap
								 */
	u_long			length;		/* of in data							   */
	Key_schedule	schedule;	/* precomputed key schedule				   */
	C_Block			*key;		/* encryption key for seed and ivec		   */
	struct	sockaddr_in	*sender;	/* sender address					   */
	struct	sockaddr_in *receiver;	/* receiver address					   */

	/* RETURNS long length of the resulting message to be transmitted	   */
d73 1
a73 2
	if (gettimeofday(&msg_time,NULL))
		{
d75 3
a77 3
		}
	 msg_time_sec = (long) msg_time.tv_sec;
	 msg_time_5ms = msg_time.tv_usec/5000;	/* 5ms quanta				   */
d84 1
a84 1
	/* calculate cipher length											   */
d88 3
a90 2
	q = p;						/* start for encrypted stuff			   */
	bcopy(&length,p,sizeof(length));	/* stuff input length			   */
d93 2
a94 2
	/* make all the stuff contiguous for checksum and encryption		   */
	bcopy(in,p,length);
d97 2
a98 1
	bcopy(&msg_time_5ms,p,sizeof(msg_time_5ms));/* stuff time 5ms		   */
d101 3
a103 2
	/* stuff source address												   */
	bcopy(&sender->sin_addr.s_addr,p,sizeof(sender->sin_addr.s_addr));
d106 2
a107 3
	/* direction bit is the sign bit  of the timestamp.  Ok until 2038 ?? */
	if (sender->sin_addr.s_addr < receiver->sin_addr.s_addr) 
		{
d109 3
a111 7
		}		
	else 
		{
		if (sender->sin_addr.s_addr == receiver->sin_addr.s_addr)
			{
			if (sender->sin_port < receiver->sin_port)
				{
a112 1
				}
d115 3
a117 1
	bcopy(&msg_time_sec,p,sizeof(msg_time_sec));/* stuff time sec		   */
d129 1
a129 1
	bcopy(&cksum,p,sizeof(cksum));	/* stuff checksum					   */
d141 2
a142 1
	bcopy(&c_length,c_length_ptr,sizeof(c_length));	/* stuff the length	   */
d145 2
a146 1
	pcbc_encrypt(q,(C_Block *) q, p-q, schedule,key,ENCRYPT);
@


4.1
log
@No change; starting version 4.
@
text
@d4 1
a4 1
 *	$Author: root $
d7 3
d47 1
a47 1
#include	"prot.h"
d61 1
a61 1
static char		*rcsid_mk_private_msg_c="$Header: mk_private_msg.c,v 1.6 86/08/18 16:45:11 steiner Locked $";
@


1.6
log
@Hacked on private message version hack.  Watch out for private_msg_ver.
@
text
@d3 3
a5 3
 *  $Source: /mit/projects/auth/src/lib/krb/RCS/mk_private_msg.c,v $
 *	$Author: spm $
 *	$Locker: root $
d7 3
d58 1
a58 1
static char		*rcsid_mk_private_msg_c="$Header: mk_private_msg.c,v 1.5 86/07/02 17:57:54 spm Exp $";
@


1.5
log
@add second arg to gettimeofday
@
text
@d5 1
a5 1
 *	$Locker: spm $
d7 3
d55 1
a55 1
static char		*rcsid_mk_private_msg_c="$Header: mk_private_msg.c,v 1.4 86/05/14 15:26:47 spm Exp $";
d85 1
d99 1
a99 1
	*p++ = KRB_PROT_VERSION;
@


1.4
log
@*** empty log message ***
@
text
@d7 3
d52 1
a52 1
static char		*rcsid_mk_private_msg_c="$Header: mk_private_msg.c,v 1.2 86/04/16 12:23:50 spm Exp $";
d86 1
a86 1
	if (gettimeofday(&msg_time))
@


1.3
log
@reorder protocol
@
text
@d78 1
d94 1
d96 1
a96 6
	c_length = length + sizeof(cksum) + sizeof(length) + 
		sizeof(msg_time_sec) + sizeof(msg_time_5ms) + 
		sizeof(sender->sin_addr.s_addr);
	c_length = ((c_length + sizeof(C_Block) -1)/sizeof(C_Block)) * 
				sizeof(C_Block);
	bcopy(&c_length,p,sizeof(c_length));	/* stuff the length			   */
d103 4
d136 1
a136 4
	/* make all the stuff contiguous for checksum and encryption		   */
	bcopy(in,p,length);
	p += length;

d143 1
d145 2
a146 1
	/* now encrypt starting with the length, cksum, and timestamps
d149 5
@


1.2
log
@*** empty log message ***
@
text
@d7 3
d49 1
a49 1
static char		*rcsid_mk_private_msg_c="$Header: mk_private_msg.c,v 1.1 86/04/04 18:08:43 spm Exp $";
d52 7
d70 1
a71 1
	Key_schedule	schedule;	/* precomputed key schedule				   */
d75 1
a75 1
	/* RETURNS u_long length of the resulting message to be transmitted	   */
a77 6
	static	u_long	cksum;
	static	u_long	c_length;
	static 	C_Block	temp;
	static	struct	timeval	msg_time;
	static	u_char	msg_time_5ms;
	static	long	msg_time_sec;
a78 2
	p = out;
	
d89 2
d95 2
a96 1
		sizeof(msg_time_sec) + sizeof(msg_time_5ms);
d106 7
a130 3
	bcopy(&msg_time_5ms,p,sizeof(msg_time_5ms));/* stuff time 5ms		   */
	p += sizeof(msg_time_5ms);

d139 2
a140 3
	/* calculate the checksum of the length, sequence, and input data*/
	cksum =  quad_cksum(q,NULL,length+sizeof(length)+sizeof(msg_time_sec)+
						sizeof(msg_time_5ms),0,key);
d151 1
a151 4
	pcbc_encrypt(q,(C_Block *) q, 
				length + sizeof(length) + sizeof(msg_time_sec) 
				+sizeof(msg_time_5ms) + sizeof(cksum),
				schedule,key,ENCRYPT);
@


1.1
log
@Initial revision
@
text
@d3 6
a8 4
 *  $Source$
 *	$Author$
 *	$Locker$
 *	$Log$
d10 1
d13 6
a18 1
 *	This routine constructs a Kerberos 'private msg'.
d27 1
d30 2
a31 2
#include	"des.h"
#include	"krb.h"
d46 1
a46 1
static char		*rcsid_mk_private_msg_c="$Header$";
d51 3
a53 1
int	mk_private_msg(in,out,length,schedule,key,from,to)
d62 4
a65 2
	struct	sockaddr_in	*from;	/* from address							   */
	struct	sockaddr_in *to;	/* to address							   */
a69 1
	static	u_long sequence;
d71 3
d77 10
d90 2
a91 1
	c_length = length + sizeof(cksum) + sizeof(length);
d94 2
a95 1
	*((u_long *) p++) = c_length;	/* stuff the length					   */
d97 3
a99 2
	q = p;						/* start of encrypted stuff				   */
	*((u_long *) p++) = length;	/*  input length	   */
d101 2
a102 8
	/* calculate the checksum of the input data*/
	cksum =  quad_cksum(in,NULL,length,0,key);	
	if (debug)	printf("\ncksum = %u",cksum);

	*((u_long *) p++) = cksum;	/*  input length	   */
	*((u_long *) p) = ++sequence;	/*  seq number, beware forked procs!   */
	/* direction bit is the sign bit */	
	if (from->sin_addr.s_addr < to->sin_addr.s_addr) 
d104 1
a104 1
		*((u_long *) p) =  - *((u_long *) p);
d108 1
a108 1
		if (from->sin_addr.s_addr == to->sin_addr.s_addr)
d110 1
a110 1
			if (from->sin_port < to->sin_port)
d112 1
a112 1
				*((u_long *) p) =  - *((u_long *) p);
d116 2
a117 1
	(u_long *) p++;				/* skip past seq number					   */
d119 3
d126 1
a126 1
	/* make all the stuff contiguous, i.e. be lazy*/			
d128 1
d130 9
a138 1
	/* now encrypt starting with the length, cksum, and sequence;
d142 1
a142 1
	/* pcbc encrypt the first block , use key as ivec*/
d144 3
a146 2
				sizeof(length) + sizeof(cksum) + sizeof(sequence),
				schedule,key);
d148 1
a148 1
	return (p - out + c_length);	/* resulting size					   */
@
