head     4.18;
branch   ;
access   ;
symbols  PATCH8:4.17 PATCH7:4.17 KPATCH6:4.17 ASRSNAP1001:4.17 PATCH5:4.17 KPATCH4:4.16 KPATCH3:4.16 KPATCH2:4.16 KREL1:4.15 BETA5/24/88:4.9;
locks    ; strict;
comment  @ * @;


4.18
date     90.06.25.20.56.56;  author kfall;  state Exp;
branches ;
next     4.17;

4.17
date     89.07.07.15.20.35;  author jtkohl;  state Exp;
branches ;
next     4.16;

4.16
date     89.03.22.14.49.46;  author jtkohl;  state Exp;
branches ;
next     4.15;

4.15
date     89.01.23.09.25.30;  author jtkohl;  state Exp;
branches ;
next     4.14;

4.14
date     89.01.18.14.52.59;  author rfrench;  state Exp;
branches ;
next     4.13;

4.13
date     89.01.15.15.39.34;  author rfrench;  state Exp;
branches ;
next     4.12;

4.12
date     89.01.13.17.20.19;  author rfrench;  state Exp;
branches ;
next     4.11;

4.11
date     88.12.05.15.21.25;  author steiner;  state Exp;
branches ;
next     4.10;

4.10
date     88.11.15.16.38.23;  author jtkohl;  state Exp;
branches ;
next     4.9;

4.9
date     88.02.24.18.14.26;  author steiner;  state Exp;
branches ;
next     4.8;

4.8
date     88.01.21.17.52.45;  author steiner;  state Exp;
branches ;
next     4.7;

4.7
date     88.01.12.21.22.23;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     87.12.06.11.24.31;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     87.10.28.16.04.38;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.10.28.15.58.35;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.20.17.11.37;  author jtkohl;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.20.45;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.47.00;  author steiner;  state Exp;
branches ;
next     3.4;

3.4
date     86.09.05.16.03.56;  author bcn;  state Exp;
branches ;
next     3.3;

3.3
date     86.08.12.12.25.24;  author bcn;  state Exp;
branches ;
next     3.2;

3.2
date     86.05.14.15.27.12;  author spm;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.09.53.55;  author bcn;  state Exp;
branches ;
next     1.13;

1.13
date     86.01.10.16.36.42;  author spm;  state Exp;
branches ;
next     1.12;

1.12
date     86.01.07.20.30.09;  author spm;  state Exp;
branches ;
next     1.11;

1.11
date     86.01.07.20.29.03;  author bcn;  state Exp;
branches ;
next     1.10;

1.10
date     85.12.06.20.47.41;  author bcn;  state Exp;
branches ;
next     1.9;

1.9
date     85.12.04.10.20.19;  author bcn;  state Exp;
branches ;
next     1.8;

1.8
date     85.11.26.13.29.04;  author spm;  state Exp;
branches ;
next     1.7;

1.7
date     85.11.25.14.36.41;  author bcn;  state Exp;
branches ;
next     1.6;

1.6
date     85.11.18.13.46.31;  author bcn;  state Exp;
branches ;
next     1.5;

1.5
date     85.11.17.20.48.17;  author bcn;  state Exp;
branches ;
next     1.4;

1.4
date     85.11.15.16.43.35;  author spm;  state Exp;
branches ;
next     1.3;

1.3
date     85.11.14.17.55.25;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     85.11.13.11.02.30;  author bcn;  state Exp;
branches ;
next     1.1;

1.1
date     85.11.03.20.11.50;  author bcn;  state Exp;
branches ;
next     ;


desc
@Create and decompose authenticators.
@


4.18
log
@include des.h
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/mk_req.c,v $
 * $Author: jtkohl $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_mk_req_c =
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/mk_req.c,v 4.17 89/07/07 15:20:35 jtkohl Exp Locker: kfall $";
#endif /* lint */

#include <mit-copyright.h>
#include <des.h>
#include <krb.h>
#include <prot.h>
#include <sys/time.h>
#include <strings.h>

extern          int     krb_ap_req_debug;
static struct   timeval tv_local = { 0, 0 };
static int lifetime = DEFAULT_TKT_LIFE;

/*
 * krb_mk_req takes a text structure in which an authenticator is to
 * be built, the name of a service, an instance, a realm,
 * and a checksum.  It then retrieves a ticket for
 * the desired service and creates an authenticator in the text
 * structure passed as the first argument.  krb_mk_req returns
 * KSUCCESS on success and a Kerberos error code on failure.
 *
 * The peer procedure on the other end is krb_rd_req.  When making
 * any changes to this routine it is important to make corresponding
 * changes to krb_rd_req.
 *
 * The authenticator consists of the following:
 *
 * authent->dat
 *
 * unsigned char	KRB_PROT_VERSION	protocol version no.
 * unsigned char	AUTH_MSG_APPL_REQUEST	message type
 * (least significant
 * bit of above)	HOST_BYTE_ORDER		local byte ordering
 * unsigned char	kvno from ticket	server's key version
 * string		realm			server's realm
 * unsigned char	tl			ticket length
 * unsigned char	idl			request id length
 * text			ticket->dat		ticket for server
 * text			req_id->dat		request id
 *
 * The ticket information is retrieved from the ticket cache or
 * fetched from Kerberos.  The request id (called the "authenticator"
#ifdef NOENCRYPTION
 * in the papers on Kerberos) contains the following:
#else
 * in the papers on Kerberos) contains information encrypted in the session
 * key for the client and ticket-granting service:  {req_id}Kc,tgs
 * Before encryption, it contains the following:
#endif
 *
 * req_id->dat
 *
 * string		cr.pname		{name, instance, and
 * string		cr.pinst		realm of principal
 * string		myrealm			making this request}
 * 4 bytes		checksum		checksum argument given
 * unsigned char	tv_local.tf_usec	time (milliseconds)
 * 4 bytes		tv_local.tv_sec		time (seconds)
 *
 * req_id->length = 3 strings + 3 terminating nulls + 5 bytes for time,
 *                  all rounded up to multiple of 8.
 */

krb_mk_req(authent,service,instance,realm,checksum)
    register KTEXT   authent;	/* Place to build the authenticator */
    char    *service;           /* Name of the service */
    char    *instance;          /* Service instance */
    char    *realm;             /* Authentication domain of service */
    long    checksum;           /* Checksum of data (optional) */
{
    static KTEXT_ST req_st; /* Temp storage for req id */
    register KTEXT req_id = &req_st;
    unsigned char *v = authent->dat; /* Prot version number */
    unsigned char *t = (authent->dat+1); /* Message type */
    unsigned char *kv = (authent->dat+2); /* Key version no */
    unsigned char *tl = (authent->dat+4+strlen(realm)); /* Tkt len */
    unsigned char *idl = (authent->dat+5+strlen(realm)); /* Reqid len */
    CREDENTIALS cr;             /* Credentials used by retr */
    register KTEXT ticket = &(cr.ticket_st); /* Pointer to tkt_st */
    int retval;                 /* Returned by krb_get_cred */
    static Key_schedule  key_s;
    char myrealm[REALM_SZ];

    /* The fixed parts of the authenticator */
    *v = (unsigned char) KRB_PROT_VERSION;
    *t = (unsigned char) AUTH_MSG_APPL_REQUEST;
    *t |= HOST_BYTE_ORDER;

    /* Get the ticket and move it into the authenticator */
    if (krb_ap_req_debug)
        printf("Realm: %s\n",realm);
    /* 
     * Determine realm of these tickets.  We will send this to the
     * KDC from which we are requesting tickets so it knows what to
     * with our session key.
     */
    if ((retval = krb_get_tf_realm(TKT_FILE, myrealm)) != KSUCCESS)
	return(retval);
    
    retval = krb_get_cred(service,instance,realm,&cr);

    if (retval == RET_NOTKT) {
        if (retval = get_ad_tkt(service,instance,realm,lifetime))
            return(retval);
        if (retval = krb_get_cred(service,instance,realm,&cr))
            return(retval);
    }

    if (retval != KSUCCESS) return (retval);

    if (krb_ap_req_debug)
        printf("%s %s %s %s %s\n", service, instance, realm,
               cr.pname, cr.pinst);
    *kv = (unsigned char) cr.kvno;
    (void) strcpy((char *)(authent->dat+3),realm);
    *tl = (unsigned char) ticket->length;
    bcopy((char *)(ticket->dat),(char *)(authent->dat+6+strlen(realm)),
          ticket->length);
    authent->length = 6 + strlen(realm) + ticket->length;
    if (krb_ap_req_debug)
        printf("Ticket->length = %d\n",ticket->length);
    if (krb_ap_req_debug)
        printf("Issue date: %d\n",cr.issue_date);

    /* Build request id */
    (void) strcpy((char *)(req_id->dat),cr.pname); /* Auth name */
    req_id->length = strlen(cr.pname)+1;
    /* Principal's instance */
    (void) strcpy((char *)(req_id->dat+req_id->length),cr.pinst);
    req_id->length += strlen(cr.pinst)+1;
    /* Authentication domain */
    (void) strcpy((char *)(req_id->dat+req_id->length),myrealm);
    req_id->length += strlen(myrealm)+1;
    /* Checksum */
    bcopy((char *)&checksum,(char *)(req_id->dat+req_id->length),4);
    req_id->length += 4;

    /* Fill in the times on the request id */
    (void) gettimeofday(&tv_local,(struct timezone *) 0);
    *(req_id->dat+(req_id->length)++) =
        (unsigned char) tv_local.tv_usec;
    /* Time (coarse) */
    bcopy((char *)&(tv_local.tv_sec),
          (char *)(req_id->dat+req_id->length), 4);
    req_id->length += 4;

    /* Fill to a multiple of 8 bytes for DES */
    req_id->length = ((req_id->length+7)/8)*8;

#ifndef NOENCRYPTION
    /* Encrypt the request ID using the session key */
    key_sched(cr.session,key_s);
    pcbc_encrypt((C_Block *)req_id->dat,(C_Block *)req_id->dat,
                 (long) req_id->length,key_s,cr.session,1);
    /* clean up */
    bzero((char *) key_s, sizeof(key_s));
#endif /* NOENCRYPTION */

    /* Copy it into the authenticator */
    bcopy((char *)(req_id->dat),(char *)(authent->dat+authent->length),
          req_id->length);
    authent->length += req_id->length;
    /* And set the id length */
    *idl = (unsigned char) req_id->length;
    /* clean up */
    bzero((char *)req_id, sizeof(*req_id));

    if (krb_ap_req_debug)
        printf("Authent->length = %d\n",authent->length);
    if (krb_ap_req_debug)
        printf("idl = %d, tl = %d\n",(int) *idl, (int) *tl);

    return(KSUCCESS);
}

/* 
 * krb_set_lifetime sets the default lifetime for additional tickets
 * obtained via krb_mk_req().
 * 
 * It returns the previous value of the default lifetime.
 */

int
krb_set_lifetime(newval)
int newval;
{
    int olife = lifetime;

    lifetime = newval;
    return(olife);
}
@


4.17
log
@use ticket file realm rather than host machine realm in requests
(allows cross-realm kinit's to work properly)
Programmer: Jay Berkenbilt
Auditor: John Kohl
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/lib/krb/RCS/mk_req.c,v $
d14 1
a14 1
"$Header: mk_req.c,v 4.17 89/07/07 15:16:51 jtkohl Exp $";
d18 1
a20 1
#include <des.h>
@


4.16
log
@#ifdef NOENCRYPTION for comments
@
text
@d14 1
a14 1
"$Header: mk_req.c,v 4.15 89/01/23 09:25:30 jtkohl Locked $";
d68 1
a68 1
 * string		cr.pinst		local realm of principal
a97 1

d106 8
a113 3
    if ((retval = krb_get_lrealm(myrealm,1)) != KSUCCESS)
        return(retval);

@


4.15
log
@Programmer/Auditor: John Kohl
changes: name changes to krb_xxx
@
text
@d3 1
a3 1
 * $Author: rfrench $
d14 1
a14 1
"$Header: mk_req.c,v 4.14 89/01/18 14:52:59 jtkohl Locked $";
d57 3
d63 1
@


4.14
log
@Programmer: jtkohl
Auditor: rfrench
Added variable for ticket lifetime and function krb_set_lifetime
@
text
@d14 1
a14 1
"$Header: mk_req.c,v 4.13 89/01/15 15:39:34 jtkohl Locked $";
d103 1
a103 1
    if ((retval = get_krbrlm(myrealm,1)) != KSUCCESS)
@


4.13
log
@Programmer: jtkohl
Auditor: rfrench
Changed hardcoded ticket lifetime to KRBTKLIFETIME
@
text
@d14 1
a14 1
"$Header: mk_req.c,v 4.12 89/01/13 17:20:19 jtkohl Locked $";
d26 1
d109 1
a109 1
        if (retval = get_ad_tkt(service,instance,realm,KRBTKLIFETIME))
d180 17
@


4.12
log
@Programmer: jtkohl
Auditor: rfrench
Cleans up some potentially dangerous data before exiting...
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: mk_req.c,v 4.11 88/12/05 15:21:25 jtkohl Locked $";
d108 1
a108 1
        if (retval = get_ad_tkt(service,instance,realm,96))
@


4.11
log
@Added #ifdef NOENCRYPTION code (to send stuff
in the clear in case no DES library present).
Programmer: jtkohl
Auditor: steiner
@
text
@d3 1
a3 1
 * $Author: jtkohl $
d14 1
a14 1
"$Header: mk_req.c,v 4.10 88/11/15 16:38:23 jtkohl Locked $";
d74 1
a74 1
    KTEXT   authent;            /* Place to build the authenticator */
d81 1
a81 1
    KTEXT req_id = &req_st;
d88 1
a88 1
    KTEXT ticket = &(cr.ticket_st); /* Pointer to tkt_st */
d93 1
d160 2
d170 2
@


4.10
log
@Documentor: Jennifer Steiner
Auditor: John Kohl
changes: document the code properly
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: mk_req.c,v 4.9 88/02/24 18:14:26 steiner Exp $";
d154 1
d159 1
@


4.9
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: mk_req.c,v 4.8 88/01/21 17:52:45 steiner Locked $";
d29 2
a30 2
 * be built, the name of a service, an instace, a realm, an aname, a
 * checksum, and the workstation time.  It then retrieves a ticket for
d32 2
a33 3
 * structure passed as the first argument.  krb_mk_req returns zero
 * MK_AP_OK on success and non-zero on failure.  See krb.h for the
 * list of error codes.
d35 1
a35 1
 * The peer procedure on the other end is rd_ap_request.  When making
d37 34
a70 1
 * changes to rd_ap_request.
d77 1
a77 1
    char        *realm;         /* Authentication domain of service */
@


4.8
log
@check return value of krb_get_cred.
Programmer: jon.
Autitor: raeburn.
@
text
@d2 2
a3 3
 *      $Source: /mit/kerberos/src/lib/krb/RCS/mk_req.c,v $
 *      $Author: steiner $
 *      $Locker:  $
d5 2
a6 1
 * Copyright 1985 by the Massachusetts Institute of Technology
d8 2
d13 2
a14 2
static char *rcsid_mk_ap_req_c =
    "$Header: mk_req.c,v 4.7 88/01/12 21:22:23 steiner Exp $";
d17 1
@


4.7
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 1
a2 1
 *      $Source: /mit/kerberos/lib/krb/RCS/mk_req.c,v $
d12 1
a12 1
    "$Header: mk_req.c,v 4.6 87/12/06 11:24:31 steiner Exp $";
d77 2
@


4.6
log
@Changed user routine names to krb_xxxxxxx
@
text
@d1 1
a1 1
/* 
d4 1
a4 1
 *      $Locker: steiner $
d12 2
a13 2
"$Header: mk_req.c,v 4.5 87/10/28 16:04:38 steiner Locked $";
#endif  lint
d15 5
a19 5
#include        <krb.h>
#include        <prot.h>
#include        <des.h>
#include 	<sys/time.h>
#include	<strings.h>
d22 1
a22 1
static struct  	timeval tv_local = { 0, 0 };
d25 7
a31 6
 * krb_mk_req takes a text structure in which an authenticator is to be 
 * built, the name of a service, an instace, a realm, an aname, a checksum,
 * and the workstation time.  It then retrieves a ticket for the desired 
 * service and creates an authenticator in the text structure passed as
 * the first argument.  krb_mk_req returns zero MK_AP_OK on success and
 * non-zero on failure.  See krb.h for the list of error codes.
d39 5
a43 5
KTEXT   authent;        /* Place to build the authenticator             */
char    *service;       /* Name of the service                          */
char    *instance;      /* Service instance                             */
char	*realm;		/* Authentication domain of service		*/
long    checksum;       /* Checksum of data (optional)                  */
d45 12
a56 12
    static      KTEXT_ST req_st;             /* Temp storage for req id  */
    KTEXT       req_id = &req_st;
    unsigned char *v =  authent->dat;         /* Prot version number      */
    unsigned char *t =  (authent->dat+1);     /* Message type             */
    unsigned char *kv =  (authent->dat+2);    /* Key version no           */
    unsigned char *tl =  (authent->dat+4+strlen(realm)); /* Ticket length */
    unsigned char *idl =  (authent->dat+5+strlen(realm));/* Req id length */
    CREDENTIALS	cr;			    /* Credentials used by retr */
    KTEXT       ticket = &(cr.ticket_st);  /* Pointer to tkt_st        */
    int		retval;			    /* Returned by krb_get_cred	*/
    static	Key_schedule  key_s;  
    char	myrealm[REALM_SZ];
d64 2
a65 1
    if (krb_ap_req_debug) printf("Realm: %s\n",realm);
d67 1
a67 1
	    return(retval);
d72 4
a75 4
	    if (retval = get_ad_tkt(service,instance,realm,96))
		    return(retval);
	    if (retval = krb_get_cred(service,instance,realm,&cr))
		    return(retval);
d78 3
a80 1
    if (krb_ap_req_debug) printf("%s %s %s %s %s\n",service,instance,realm,cr.pname,cr.pinst);
d85 1
a85 1
	  ticket->length);
d87 5
a91 3
    if (krb_ap_req_debug) printf("Ticket->length = %d\n",ticket->length);
    if (krb_ap_req_debug) printf("Issue date: %d\n",cr.issue_date);
        
d93 1
a93 1
    (void) strcpy((char *)(req_id->dat),cr.pname); /* Authentication name */
d107 2
a108 1
    *(req_id->dat+(req_id->length)++) = (unsigned char) tv_local.tv_usec;
d110 2
a111 1
    bcopy((char *)&(tv_local.tv_sec),(char *)(req_id->dat+req_id->length),4);
d120 1
a120 1
		 (long) req_id->length,key_s,cr.session,1);  
d124 1
a124 1
	  req_id->length);
d129 4
a132 2
    if (krb_ap_req_debug) printf("Authent->length = %d\n",authent->length);
    if (krb_ap_req_debug) printf("idl = %d, tl = %d\n",(int) *idl, (int) *tl);
a135 1

@


4.5
log
@Took byteorder.h out; that info is now in krb_conf.h.
@
text
@d2 1
a2 1
 *      $Source: /u3/kerberos.new/lib/krb/RCS/mk_ap_req.c,v $
d12 1
a12 1
"$Header: mk_ap_req.c,v 4.4 87/10/28 15:58:35 steiner Locked $";
d25 1
a25 1
 * mk_ap_req takes a text structure in which an authenticator is to be 
d29 1
a29 1
 * the first argument.  mk_ap_req returns zero MK_AP_OK on success and
d37 1
a37 1
mk_ap_req(authent,service,instance,realm,checksum)
d53 1
a53 1
    int		retval;			    /* Returned by retrieve	*/
d67 1
a67 1
    retval = get_credentials(service,instance,realm,&cr);
d72 1
a72 1
	    if (retval = get_credentials(service,instance,realm,&cr))
@


4.4
log
@jtkohl's changes.
@
text
@d2 3
a4 3
 *      $Source: /paris/u3/kerberos.new/lib/krb/RCS/mk_ap_req.c,v $
 *      $Author: jtkohl $
 *      $Locker: jtkohl $
d11 2
a12 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 4.3 87/10/20 17:11:37 jtkohl Locked $";
a16 1
#include	<byteorder.h>
@


4.3
log
@lint fixes.
@
text
@d2 2
a3 2
 *      $Source: /u3/kerberos.new/lib/krb/RCS/mk_ap_req.c,v $
 *      $Author: steiner $
d11 1
a11 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 4.2 87/09/10 16:20:45 jtkohl Locked $";
d21 1
a21 1
extern          int     ap_req_debug;
d63 1
a63 1
    if (ap_req_debug) printf("Realm: %s\n",realm);
d76 1
a76 1
    if (ap_req_debug) printf("%s %s %s %s %s\n",service,instance,realm,cr.pname,cr.pinst);
d83 2
a84 2
    if (ap_req_debug) printf("Ticket->length = %d\n",ticket->length);
    if (ap_req_debug) printf("Issue date: %d\n",cr.issue_date);
d121 2
a122 2
    if (ap_req_debug) printf("Authent->length = %d\n",authent->length);
    if (ap_req_debug) printf("idl = %d, tl = %d\n",(int) *idl, (int) *tl);
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d2 1
a2 1
 *      $Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/mk_ap_req.c,v $
d4 1
a4 1
 *      $Locker: steiner $
d11 1
a11 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 4.1 87/09/01 15:47:00 steiner Locked $";
d16 1
d19 1
d22 1
a22 2
struct  	timeval t_local = { 0, 0 };
struct  	timezone tz = { 0, 0 };
d64 3
a67 1
    get_krbrlm(myrealm,1);
d69 6
a74 3
    if (retval == RET_NOTKT)
         {
	 get_ad_tkt(service,instance,realm,96);
a75 4
         retval = get_credentials(service,instance,realm,&cr);
         }
    if (retval) return(retval);

d78 1
a78 1
    strcpy(authent->dat+3,realm);
d80 2
a81 1
    bcopy(ticket->dat,authent->dat+6+strlen(realm),ticket->length);
d87 1
a87 1
    strcpy(req_id->dat,cr.pname);                  /* Authentication name  */
d89 2
a90 1
    strcpy(req_id->dat+req_id->length,cr.pinst);   /* Principal's instance */
d92 2
a93 1
    strcpy(req_id->dat+req_id->length,myrealm);       /* Authentication domain*/
d95 2
a96 1
    bcopy(&checksum,req_id->dat+req_id->length,4);          /* Checksum     */
d100 4
a103 3
    gettimeofday(&t_local,&tz);
    *(req_id->dat+(req_id->length)++) = (unsigned char) t_local.tv_usec;
    bcopy(&(t_local.tv_sec),req_id->dat+req_id->length,4);  /* Time (coarse)*/
d111 2
a112 1
    pcbc_encrypt(req_id->dat,req_id->dat,(long) req_id->length,key_s,cr.session,1);  
d115 2
a116 1
    bcopy(req_id->dat,authent->dat+authent->length,req_id->length);
@


4.1
log
@No change; starting version 4.
@
text
@d3 1
a3 1
 *      $Author: bcn $
d11 1
a11 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 3.4 86/09/05 16:03:56 steiner Locked $";
d15 1
a15 1
#include        "prot.h"
@


3.4
log
@Realm included in req_id should be local realm.
@
text
@d2 1
a2 1
 *      $Source: /mit/projects/auth/src/lib/krb/RCS/mk_ap_req.c,v $
d4 1
a4 1
 *      $Locker: bcn $
d11 1
a11 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 3.3 86/08/12 12:25:24 bcn Exp $";
@


3.3
log
@retrieve changed to get_credentials.  Arguments to get_credentials
changed.  Added code to get tickets using a ticket granting ticket.
@
text
@d3 1
a3 1
 *      $Author: spm $
d11 1
a11 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 3.2 86/05/14 15:27:12 spm Exp $";
d54 1
d64 1
d88 2
a89 2
    strcpy(req_id->dat+req_id->length,realm);       /* Authentication domain*/
    req_id->length += strlen(realm)+1;
@


3.2
log
@*** empty log message ***
@
text
@d3 2
a4 2
 *      $Author: bcn $
 *      $Locker:  $
d11 1
a11 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 3.1 86/03/28 09:53:55 bcn Exp $";
d28 2
a29 1
 * the first argument.
d50 2
a51 8
    static C_Block session;                 /* Session key              */
    int         lifetime;                   /* For use by retrieve      */
    int         kvno;                       /* For use by retrieve      */
    static	KTEXT_ST tkt_st;	    /* The ticket from retrieve */
    KTEXT       ticket = &tkt_st;           /* Pointer to tkt_st        */
    long        issue_date;                 /* For use by retrieve      */
    char    	pname[ANAME_SZ];	    /* Principal's name 	*/
    char        pinst[INST_SZ];             /* Principal's instance     */
d62 1
a62 2
    retval = retrieve(service,instance,realm,session,&lifetime,
    		      &kvno,ticket,&issue_date,pname,pinst);
d64 10
a73 2
    if (ap_req_debug) printf("%s %s %s %s %s\n",service,instance,realm,pname,pinst);
    *kv = (unsigned char) kvno;
d79 1
a79 1
    if (ap_req_debug) printf("Issue date: %d\n",issue_date);
d82 4
a85 4
    strcpy(req_id->dat,pname);                      /* Authentication name  */
    req_id->length = strlen(pname)+1;
    strcpy(req_id->dat+req_id->length,pinst);       /* Principal's instance */
    req_id->length += strlen(pinst)+1;
d93 1
a93 1
    *(req_id->dat+(req_id->length)++) = (unsigned char) t_local.tv_usec;/* Time (fine)*/
d101 2
a102 2
    key_sched(session,key_s);
    pcbc_encrypt(req_id->dat,req_id->dat,(long) req_id->length,key_s,session,1);  
d112 2
@


3.1
log
@Update to protocol revision 3 complete.
@
text
@d3 2
a4 2
 *      $Author: spm $
 *      $Locker: bcn $
d11 1
a11 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 1.13 86/01/10 16:36:42 spm Exp $";
d16 1
a16 1
#include        "/projects/auth/include/des.h"
d44 5
a48 5
    char        *v =  authent->dat;         /* Prot version number      */
    char        *t =  (authent->dat+1);     /* Message type             */
    char        *kv =  (authent->dat+2);    /* Key version no           */
    char        *tl =  (authent->dat+4+strlen(realm)); /* Ticket length */
    char        *idl =  (authent->dat+5+strlen(realm));/* Req id length */
d61 2
a62 2
    *v = (char) KRB_PROT_VERSION;
    *t = (char) AUTH_MSG_APPL_REQUEST;
d71 1
a71 1
    *kv = (char) kvno;
d73 1
a73 1
    *tl = (char) ticket->length;
d91 1
a91 1
    *(req_id->dat+(req_id->length)++) = (char) t_local.tv_usec;/* Time (fine)*/
d106 1
a106 1
    *idl = (char) req_id->length;
@


1.13
log
@conditionalize print
@
text
@d4 1
a4 36
 *      $Locker: spm $
 *      $Log:	mk_ap_req.c,v $
 * Revision 1.12  86/01/07  20:30:09  spm
 * (long) ...length for pcbc_encrypt
 * 
 * Revision 1.11  86/01/07  20:29:03  bcn
 * *** empty log message ***
 * 
 * Revision 1.10  85/12/06  20:47:41  bcn
 * Removed some debugging message.
 * 
 * Revision 1.9  85/12/04  10:20:19  bcn
 * Conditionalize debugging statements.
 * 
 * Revision 1.8  85/11/26  13:29:04  spm
 * change set_key to des_set_key
 * 
 * Revision 1.7  85/11/25  14:36:41  bcn
 * Add check for req_id.  Changed arguments.
 * 
 * Revision 1.6  85/11/18  13:46:31  bcn
 * Add realm to arg list and infor passed to retrieve.
 * 
 * Revision 1.5  85/11/17  20:48:17  bcn
 * Separate mk_ap_req and rd_ap_req into different file to make
 * ready for libkrb.  Also documented and cleaned up some code.
 * 
 * Revision 1.3  85/11/14  17:55:25  spm
 * add byte_order()
 * 
 * Revision 1.2  85/11/13  11:02:30  bcn
 * Add realm to information contained in ticket for rd_ap_req.
 * 
 * Revision 1.1  85/11/03  20:11:50  bcn
 * Initial revision
 * 
d11 1
a11 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 1.12 86/01/07 20:30:09 spm Exp $";
d14 1
a14 1
#include        "krb.h"
d36 1
a36 1
TEXT    authent;        /* Place to build the authenticator             */
d42 2
a43 2
    static      TEXT_ST req_st;             /* Temp storage for req id  */
    TEXT        req_id = &req_st;
d47 2
a48 2
    char        *tl =  (authent->dat+3);    /* Ticket length            */
    char        *idl =  (authent->dat+4);   /* Req id length            */
d50 4
a53 4
    int         lifetime;                  /* For use by retrieve      */
    int         kvno;                      /* For use by retrieve      */
    static	TEXT_ST tkt_st;		    /* The ticket from retrieve */
    TEXT        ticket = &tkt_st;           /* Pointer to tkt_st        */
d55 2
a56 1
    char    	aname[ANAME_SZ];	    /* aname from retrieve 	*/
d68 1
a68 1
    		      &kvno,ticket,&issue_date,aname);
d70 1
a70 1
    if (ap_req_debug) printf("%s %s %s %s\n",service,instance,realm,aname);
d72 1
d74 2
a75 2
    bcopy(ticket->dat,authent->dat+5,ticket->length);
    authent->length = 5 + ticket->length;
d80 4
a83 2
    strcpy(req_id->dat,aname);                      /* Authentication name  */
    req_id->length = strlen(aname)+1;
d87 1
d91 4
a94 4
    *(req_id->dat+req_id->length+4) = (char) t_local.tv_usec;/* Time (fine) */
    bcopy(&t_local.tv_sec,req_id->dat+req_id->length+5,4);  /* Time (coarse)*/
    req_id->length += 9;
        
d99 2
a100 2
    des_set_key(session,key_s);
    pcbc_encrypt(req_id->dat,req_id->dat,(long) req_id->length,key_s,session,1); 
@


1.12
log
@(long) ...length for pcbc_encrypt
@
text
@d3 1
a3 1
 *      $Author: bcn $
d6 3
d46 1
a46 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 1.11 86/01/07 20:29:03 bcn Exp $";
d100 1
a100 1
    printf("Realm: %s\n",realm);
d104 1
a104 1
    printf("%s %s %s %s\n",service,instance,realm,aname);
@


1.11
log
@*** empty log message ***
@
text
@d4 1
a4 1
 *      $Locker:  $
d6 3
d43 1
a43 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 1.10 85/12/06 20:47:41 bcn Exp $";
d127 1
a127 1
    pcbc_encrypt(req_id->dat,req_id->dat,req_id->length,key_s,session,1); 
@


1.10
log
@Removed some debugging message.
@
text
@d6 3
d40 1
a40 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 1.9 85/12/04 10:20:19 bcn Exp $";
d79 4
a82 3
    int         *lifetime;                  /* For use by retrieve      */
    int         *kvno;                      /* For use by retrieve      */
    TEXT        ticket;                     /* The ticket from retrieve */
d85 1
d94 5
a98 2
    retrieve(service,instance,realm,session,lifetime,kvno,ticket,&issue_date,aname);
    	
d124 1
a124 1
    cbc_encrypt(req_id->dat,req_id->dat,req_id->length,key_s,session,1); 
@


1.9
log
@Conditionalize debugging statements.
@
text
@d3 1
a3 1
 *      $Author: spm $
d6 3
d37 1
a37 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 1.8 85/11/26 13:29:04 spm Exp $";
d90 1
a114 1
    printf("Session: %d %d %d %d %d %d %d %d\n",(int) *session,(int) *(session+1),(int)*(session+2),(int)*(session+3),(int)*(session+4),(int)*(session+5),(int)*(session+6),(int)*(session+7));
a115 2
    printf("Key Sched: %x %x %x %x\n", key_s[0], key_s[1],
		key_s[2], key_s[3]);
@


1.8
log
@change set_key to des_set_key
@
text
@d3 2
a4 2
 *      $Author: bcn $
 *      $Locker: spm $
d6 3
d34 1
a34 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 1.7 85/11/25 14:36:41 bcn Exp $";
d72 1
a72 1
	static    C_Block     session;          /* Session key              */
d78 1
a78 1
	static    Key_schedule        key_s;  
a114 1
    printf("Req_id->dat: %d %d %d %d\n",(int)* req_id->dat,(int)*(req_id->dat+1),(int)*(req_id->dat+2),(int)*(req_id->dat+3));
a115 1
    printf("Req_id->dat: %d %d %d %d\n",(int)* req_id->dat,(int)*(req_id->dat+1),(int)*(req_id->dat+2),(int)*(req_id->dat+3));
d124 1
a124 1
    if (ap_req_debug) printf("idl = %d, tl = %d\n",(int) *idl, (int) *(idl-1));
@


1.7
log
@Add check for req_id.  Changed arguments.
@
text
@d4 1
a4 1
 *      $Locker: bcn $
d6 3
d31 1
a31 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 1.6 85/11/18 13:46:31 bcn Exp $";
d69 1
a69 1
    char        session[8];                 /* Session key              */
d75 1
a75 1
    Key_schedule        key_s;  
d109 3
a111 2
    set_key(session,key_s);
    printf("Session: %d %d %d %d\n",(int) *(char *)key_s,(int) *(char *)(key_s+1),(int)*(char *)(key_s+2),(int)*(char *)(key_s+3));
@


1.6
log
@Add realm to arg list and infor passed to retrieve.
@
text
@d6 3
a12 3
 * Revision 1.4  85/11/15  16:43:35  spm
 * *** empty log message ***
 * 
d28 1
a28 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 1.5 85/11/17 20:48:17 bcn Exp $";
d34 1
d37 2
d52 1
a52 1
mk_ap_req(authent,service,instance,realm,aname,checksum,time_ms,time_sec)
a56 1
char    *aname;         /* Authentication name of user                  */
a57 2
short   time_ms;        /* Fine grain workstation time                  */
long    time_sec;       /* Coarse grain workstation time                */
d59 1
a59 1
    static      TEXT_ST req_st;         /* Temp storage for req id      */
d61 11
a71 10
    char        *v =  authent->dat;     /* Prot version number          */
    char        *t =  (authent->dat+1); /* Message type                 */
    char        *kv =  (authent->dat+2);        /* Key version no       */
    char        *tl =  (authent->dat+3);        /* Ticket length        */
    char        *idl =  (authent->dat+4);       /* Req id length        */
    char        session[8];                     /* Session key          */
    int         *lifetime;      /* For use by retrieve                  */
    int         *kvno;          /* For use by retrieve                  */
    TEXT        ticket;         /* The ticket from retrieve             */
    long        issue_date;     /* For use by retrieve                  */
d80 1
a80 1
    retrieve(service,instance,realm,session,lifetime,kvno,ticket,&issue_date);
d89 1
a89 1
    strcpy(req_id->dat,aname);                  /* Authentication name  */
d91 8
a98 3
    bcopy(&checksum,req_id->dat+req_id->length,4);      /* Checksum     */
    *(req_id->dat+req_id->length+4) = (char) time_ms;   /* Time (fine)  */
    bcopy(&time_sec,req_id->dat+req_id->length+5,4);    /* Time (coarse)*/
d105 1
d107 4
a110 1
    cbc_encrypt(req_id->dat,req_id->dat,req_id->length,key_s,session,1);
@


1.5
log
@Separate mk_ap_req and rd_ap_req into different file to make
ready for libkrb.  Also documented and cleaned up some code.
@
text
@d3 1
a3 1
 *      $Author: spm $
d5 5
a9 1
 *      $Log:   mk_ap_req.c,v $
d28 1
a28 1
static char *rcsid_mk_ap_req_c = "$Header: mk_ap_req.c,v 1.4 85/11/15 16:43:35 spm Exp $";
d39 1
a39 1
 * built, the name of a service, an instace, an aname, a checksum,
d49 1
a49 1
mk_ap_req(authent,service,instance,aname,checksum,time_ms,time_sec)
d53 1
d79 1
a79 1
    retrieve(service,instance,session,lifetime,kvno,ticket,&issue_date);
@


1.4
log
@*** empty log message ***
@
text
@d2 7
a8 4
 * 	$Source: /mit/projects/auth/src/client/RCS/sprot.c,v $
 * 	$Author: spm $
 * 	$Locker: spm $
 *    	$Log:	sprot.c,v $
d24 2
a25 2
static char *rcsid_sprot_c = "$Header: sprot.c,v 1.3 85/11/14 17:55:25 spm Exp $";
#endif	lint
d27 3
a29 3
#include	"/projects/auth/src/kdc/prot.h"
#include	"sprot.h"
#include 	"/projects/auth/include/des.h"
d31 1
a31 2
static	Key_schedule	serv_key;
static	char		ky[8];		/* temporary hack */
d33 11
a43 6
set_serv_key(key)
char	*key;
{
	string_to_key(key,ky);
	set_key(ky,serv_key);
}
a44 1

d46 7
a52 7
TEXT	authent;
char	*service;
char	*instance;
char	*aname;
long	checksum;
short	time_ms;
long	time_sec;
d54 13
a66 13
	static	TEXT_ST	req_st;
	TEXT	req_id = &req_st;
	char	*v =  authent->dat;
	char	*t =  (authent->dat+1);
	char	*kv =  (authent->dat+2);
	char	*tl =  (authent->dat+3);
	char	*idl =  (authent->dat+4);
	char	session[8];
	int	*lifetime;
	int	*kvno;
	TEXT	ticket;
	long	issue_date;	
	Key_schedule	key_s;
d68 4
a71 19
	*v = (char) KRB_PROT_VERSION;
	*t = (char) AUTH_MSG_APPL_REQUEST;
	*t |= HOST_BYTE_ORDER;
	retrieve(service,instance,session,lifetime,kvno,ticket,&issue_date);
	*kv = (char) kvno;
	*tl = (char) ticket->length;
	bcopy(ticket->dat,authent->dat+5,ticket->length);
	authent->length = 5 + ticket->length;
	printf("Ticket->length = %d\n",ticket->length);
	printf("Issue date: %d\n",issue_date);
	
	strcpy(req_id->dat,aname);
	req_id->length = strlen(aname)+1;
	bcopy(&checksum,req_id->dat+req_id->length,4);
	*(req_id->dat+req_id->length+4) = (char) time_ms;
	bcopy(&time_sec,req_id->dat+req_id->length+5,4);
	req_id->length += 9;
	
        req_id->length = ((req_id->length+7)/8)*8;
d73 19
a91 8
	set_key(session,key_s);
	cbc_encrypt(req_id->dat,req_id->dat,req_id->length,key_s,session,1);
	bcopy(req_id->dat,authent->dat+authent->length,req_id->length);
	authent->length += req_id->length;
	*idl = (char) req_id->length;
	printf("Authent->length = %d\n",authent->length);
	printf("idl = %d, tl = %d\n",(int) *idl, (int) *(idl-1));
}
d93 3
a95 19
rd_ap_req(authent,service,instance,aname,realm,checksum,time_ms,time_sec,address,perm,quota)
TEXT	authent;
char	*service;
char	*instance;
char	*aname;
char	*realm;
long	*checksum;
short	*time_ms;
long	*time_sec;
long	*address;
short	*perm;
short	*quota;
{
	static	TEXT_ST	ticket;
	static	TEXT	tkt = &ticket;
	char		session[8];
	unsigned short	life;
	char		sname[40];
	char		iname[40];
d97 5
a101 5
	tkt->length = (int) *(authent->dat+3);
	bcopy(authent->dat+5,tkt->dat,tkt->length);
	log("ticket->length: %d",tkt->length);
	decomp_ticket(tkt,aname,realm,address,session,perm,quota,life,time_sec,sname,iname,ky);
	
d103 2
d106 1
@


1.3
log
@add byte_order()
@
text
@d3 1
a3 1
 * 	$Author: bcn $
d6 3
d21 1
a21 1
static char *rcsid_sprot_c = "$Header: sprot.c,v 1.2 85/11/13 11:02:30 bcn Exp $";
d64 1
a64 1
	*t |= byte_order();
@


1.2
log
@Add realm to information contained in ticket for rd_ap_req.
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d6 3
d18 1
a18 1
static char *rcsid_sprot_c = "$Header: sprot.c,v 1.1 85/11/03 20:11:50 bcn Exp $";
d61 1
@


1.1
log
@Initial revision
@
text
@d2 7
a8 4
 * 	$Source: $
 * 	$Author: $
 * 	$Locker: $
 *    	$Log:	 $
d15 1
a15 1
static char *rcsid_sprot_c = "$Header: $";
d84 1
a84 1
rd_ap_req(authent,service,instance,aname,checksum,time_ms,time_sec,address,perm,quota)
d89 1
d107 1
a107 1
	decomp_ticket(tkt,aname,address,session,perm,quota,life,time_sec,sname,iname,ky);
@
