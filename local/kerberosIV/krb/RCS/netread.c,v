head     4.1;
branch   ;
access   ;
symbols  PATCH8:4.1 PATCH7:4.1 KPATCH6:4.1 ASRSNAP1001:4.1 PATCH5:4.1 KPATCH4:4.1 KPATCH3:4.1 KPATCH2:4.1 KREL1:4.1 BETA5/24/88:1.3;
locks    ; strict;
comment  @ * @;


4.1
date     88.11.15.16.47.21;  author jtkohl;  state Exp;
branches ;
next     1.3;

1.3
date     88.04.06.17.32.37;  author steiner;  state Exp;
branches ;
next     1.2;

1.2
date     88.02.24.18.14.49;  author steiner;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.22.15.55.21;  author steiner;  state Exp;
branches ;
next     ;


desc
@Read bytes from a file descriptor.
Programmer: jtkohl.
Auditor: wesommer.
@


4.1
log
@Documentor: Jennifer Steiner
Auditor: John Kohl
changes: document the code properly
@
text
@/*
 * $Source: /mit/kerberos/src/lib/krb/RCS/netread.c,v $
 * $Author: steiner $
 *
 * Copyright 1987, 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef	lint
static char rcsid_netread_c[] =
"$Header: netread.c,v 1.3 88/04/06 17:32:37 steiner Locked $";
#endif	lint

#include <mit-copyright.h>

/*
 * krb_net_read() reads from the file descriptor "fd" to the buffer
 * "buf", until either 1) "len" bytes have been read or 2) cannot
 * read anymore from "fd".  It returns the number of bytes read
 * or a read() error.  (The calling interface is identical to
 * read(2).)
 *
 * XXX must not use non-blocking I/O
 */

int
krb_net_read(fd, buf, len)
int fd;
register char *buf;
register int len;
{
    int cc, len2 = 0;

    do {
	cc = read(fd, buf, len);
	if (cc < 0)
	    return(cc);		 /* errno is already set */
	else if (cc == 0) {
	    return(len2);
	} else {
	    buf += cc;
	    len2 += cc;
	    len -= cc;
	}
    } while (len > 0);
    return(len2);
}
@


1.3
log
@Took out emacs commands at end.
@
text
@a8 7
 *
 * krb_net_read:
 * read a given number of bytes from a given file descriptor.
 * don't return until 1) have read exactly that many bytes
 * 2) cannot read any more from fd.
 *
 * calling interface is identical to read(2).
d13 1
a13 1
"$Header: netread.c,v 1.2 88/02/24 18:14:49 steiner Locked $";
d18 10
a27 2
/* read a given number of bytes from the network */
/* XXX must not use non-blocking I/O */
@


1.2
log
@Copyright notice, etc.
@
text
@d20 1
a20 1
"$Header: netread.c,v 1.1 88/01/22 15:55:21 steiner Locked $";
a48 12

/* Local Variables:			 */
/* mode:c				 */
/* c-indent-level:4			 */
/* c-argdecl-indent:0			 */
/* comment-column:33			 */
/* c-label-offset:-4			 */
/* c-continued-statement-indent:0	 */
/* c-continued-statement-offset:4	 */
/* c-auto-newline:nil			 */
/* c-brace-offset:0			 */
/* End:					 */
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/snd_rcvauth.c,v $
 * $Author: jtkohl $
d5 1
a5 1
 * Copyright 1987 by the Massachusetts Institute of Technology.
d7 2
a8 2
 * For copying and distribution information,
 * please see the file <mit-copyright.h>.
d19 2
a20 2
static char rcsid_krb_netread_c[] =
"$Header: snd_rcvauth.c,v 1.1 88/01/19 13:47:47 jtkohl Locked $";
d23 1
a23 1
#include	<mit-copyright.h>
@
