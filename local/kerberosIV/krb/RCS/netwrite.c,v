head     4.1;
branch   ;
access   ;
symbols  PATCH8:4.1 PATCH7:4.1 KPATCH6:4.1 ASRSNAP1001:4.1 PATCH5:4.1 KPATCH4:4.1 KPATCH3:4.1 KPATCH2:4.1 KREL1:4.1 BETA5/24/88:1.5;
locks    ; strict;
comment  @ * @;


4.1
date     88.11.15.16.48.58;  author jtkohl;  state Exp;
branches ;
next     1.5;

1.5
date     88.04.06.17.32.44;  author steiner;  state Exp;
branches ;
next     1.4;

1.4
date     88.02.24.18.14.57;  author steiner;  state Exp;
branches ;
next     1.3;

1.3
date     88.02.07.12.08.32;  author steiner;  state Exp;
branches ;
next     1.2;

1.2
date     88.01.29.13.55.44;  author steiner;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.22.15.54.18;  author steiner;  state Exp;
branches ;
next     ;


desc
@Write bytes to a file descriptor.
Programmer: jtkohl.
Audtiro: wesommer.
@


4.1
log
@Documentor: Jennifer Steiner
Auditor: John Kohl
changes: document the code properly
@
text
@/*
 * $Source: /mit/kerberos/src/lib/krb/RCS/netwrite.c,v $
 * $Author: steiner $
 *
 * Copyright 1987, 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef	lint
static char rcsid_netwrite_c[] =
"$Header: netwrite.c,v 1.5 88/04/06 17:32:44 steiner Locked $";
#endif	lint

#include <mit-copyright.h>

/*
 * krb_net_write() writes "len" bytes from "buf" to the file
 * descriptor "fd".  It returns the number of bytes written or
 * a write() error.  (The calling interface is identical to
 * write(2).)
 *
 * XXX must not use non-blocking I/O
 */

int
krb_net_write(fd, buf, len)
int fd;
register char *buf;
int len;
{
    int cc;
    register int wrlen = len;
    do {
	cc = write(fd, buf, wrlen);
	if (cc < 0)
	    return(cc);
	else {
	    buf += cc;
	    wrlen -= cc;
	}
    } while (wrlen > 0);
    return(len);
}
@


1.5
log
@Took out emacs commands at end.
@
text
@a8 7
 *
 * krb_net_write:
 * write a given number of bytes to a given file descriptor.
 * don't return until 1) have written exactly that many bytes
 * 2) get error from write() call.
 *
 * calling interface is identical to write(2).
d13 1
a13 1
"$Header: netwrite.c,v 1.4 88/02/24 18:14:57 steiner Locked $";
d18 9
a26 2
/* write a given number of bytes to the network */
/* XXX must not use non-blocking I/O */
@


1.4
log
@Copyright notice, etc.
@
text
@d20 1
a20 1
"$Header: netwrite.c,v 1.3 88/02/07 12:08:32 steiner Locked $";
a45 13


/* Local Variables:			 */
/* mode:c				 */
/* c-indent-level:4			 */
/* c-argdecl-indent:0			 */
/* comment-column:33			 */
/* c-label-offset:-4			 */
/* c-continued-statement-indent:0	 */
/* c-continued-statement-offset:4	 */
/* c-auto-newline:nil			 */
/* c-brace-offset:0			 */
/* End:					 */
@


1.3
log
@Fixed return value to return number of bytes written or
error value.
Programmer: jtkohl.
Auditor: jon.
@
text
@d5 1
a5 1
 * Copyright 1987 by the Massachusetts Institute of Technology.
d7 2
a8 2
 * For copying and distribution information,
 * please see the file <mit-copyright.h>.
d19 2
a20 2
static char rcsid_krb_netwrite_c[] =
"$Header: netwrite.c,v 1.2 88/01/29 13:55:44 steiner Exp $";
d23 1
a23 1
#include	<mit-copyright.h>
@


1.2
log
@Shouldn't be "static".
Programmer: jtkohl.
Auditor: steiner.
@
text
@d20 1
a20 1
"$Header: netwrite.c,v 1.1 88/01/22 15:54:18 jtkohl Locked $";
d31 1
a31 1
register int len;
d34 1
d36 1
a36 1
	cc = write(fd, buf, len);
d41 1
a41 1
	    len -= cc;
d43 1
a43 1
    } while (len > 0);
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/snd_rcvauth.c,v $
 * $Author: jtkohl $
d20 1
a20 1
"$Header: snd_rcvauth.c,v 1.1 88/01/19 13:47:47 jtkohl Locked $";
d27 1
a27 1
static int
@
