head     4.1;
branch   ;
access   ;
symbols  PATCH8:4.1 PATCH7:4.1 KPATCH6:4.1 ASRSNAP1001:4.1 PATCH5:4.1 KPATCH4:4.1 KPATCH3:4.1 KPATCH2:4.1 KREL1:4.1 BETA5/24/88:4.1;
locks    ; strict;
comment  @ * @;


4.1
date     87.09.01.15.47.34;  author steiner;  state Exp;
branches ;
next     1.1;

1.1
date     86.05.14.15.26.52;  author spm;  state Exp;
branches ;
next     ;


desc
@@


4.1
log
@No change; starting version 4.
@
text
@/*	Copyright	1986	by the Massachusetts Institute of Technology	   */

/*	replay.c 
 *	spm	3/86	MIT Project Athena
 *	$Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/replay.c,v $
 *	$Author: spm $
 *	$Locker: steiner $
 *	$Log:	replay.c,v $
 * Revision 1.1  86/05/14  15:26:52  spm
 * Initial revision
 * 
 * 
 * 
 *	This routine checks for replayed protocol messages, and maintains
 *  a stable store to check against.
 */


/*	exit returns 	 0 ==> success
 *					-1 ==> error
 */

/* System include files													   */
# include	<stdio.h>
# include	<signal.h>
# include	<errno.h>
# include	<sys/wait.h>

/* Application include files											   */

/* Externals															   */
extern char 	*errmsg();
extern int 		errno;

/* Local Defines														   */
# define	MIN_ARGC	0	/* min # args, not incl flags */
# define	MAX_ARGC	99	/* max # args, not incl flags */
					/* MIN_ARGC == MAX_ARGC ==>
					 * required # args		
					 */

/* Globals																   */

#ifndef	lint
static char		*rcsid_replay_c="$Header: replay.c,v 1.1 86/05/14 15:26:52 steiner Locked $";
static char		*copyright = 
				"Copyright 1986 by the Massachusetts Institute of Technology";
#endif lint

char			*progname;
int				sflag;
int				vflag;
int				pid;
int				child_status;

/*** Routines ************************************************************** */

FILE	store[2];
u_long	mod_time[2];
u_long	last_switch;
static	init = 0;
FILE	current;


replay()						/* it again sam							   */
/*
 *	Two files are used to store the replay records, s.t. we can allow one
 *	to age, then truncate it when it is old enough, then switch around.
 *	On a cold boot after a process or system crash, the old files will
 *	get cleaned up once new requests have arrived and aged sufficiently. 
{
if	(!init++) init_replay();

/*	get current time and toggle active file, if needed					   */
if (time - last_switch > SKEW)
	{
	/* truncate	current													   */
	/* toggle current													   */
	last_switch = time;
	}
/* search	current														   */
/* search	alternate													   */
/* if not found, write it into stable store								   */
}



init_replay()
{
	
/* Open files															   */

/* If new, mod_time = 0													   */
/* Else, read mod_time													   */
}
@


1.1
log
@Initial revision
@
text
@d5 6
a10 4
 *	$Source$
 *	$Author$
 *	$Locker$
 *	$Log$
d13 1
d45 1
a45 1
static char		*rcsid_replay_c="$Header$";
@
