head     4.10;
branch   ;
access   ;
symbols  PATCH8:4.9 PATCH7:4.9 KPATCH6:4.9 ASRSNAP1001:4.9 PATCH5:4.9 KPATCH4:4.9 KPATCH3:4.8 KPATCH2:4.8 KREL1:4.8 BETA5/24/88:4.7;
locks    ; strict;
comment  @ * @;


4.10
date     90.06.25.20.57.18;  author kfall;  state Exp;
branches ;
next     4.9;

4.9
date     89.05.31.17.45.43;  author jtkohl;  state Exp;
branches ;
next     4.8;

4.8
date     88.12.01.14.33.38;  author jtkohl;  state Exp;
branches ;
next     4.7;

4.7
date     88.04.15.15.15.54;  author steiner;  state Exp;
branches ;
next     4.6;

4.6
date     88.02.24.18.16.10;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.01.12.21.24.10;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     87.12.06.11.25.30;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     87.10.29.10.47.59;  author jtkohl;  state Exp;
branches ;
next     4.2;

4.2
date     87.10.20.17.12.44;  author jtkohl;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.47.38;  author steiner;  state Exp;
branches ;
next     3.7;

3.7
date     87.01.19.16.14.06;  author jtkohl;  state Exp;
branches ;
next     3.6;

3.6
date     86.12.22.11.25.43;  author root;  state Exp;
branches ;
next     3.5;

3.5
date     86.12.08.14.32.17;  author root;  state Exp;
branches ;
next     3.4;

3.4
date     86.08.15.20.19.15;  author wesommer;  state Exp;
branches ;
next     3.3;

3.3
date     86.08.12.12.23.03;  author bcn;  state Exp;
branches ;
next     3.2;

3.2
date     86.07.16.12.05.58;  author bcn;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.09.12.16;  author bcn;  state Exp;
branches ;
next     1.6;

1.6
date     85.11.26.14.30.25;  author bcn;  state Exp;
branches ;
next     1.5;

1.5
date     85.11.20.12.01.09;  author bcn;  state Exp;
branches ;
next     1.4;

1.4
date     85.11.18.14.12.24;  author bcn;  state Exp;
branches ;
next     1.3;

1.3
date     85.11.18.11.57.46;  author bcn;  state Exp;
branches ;
next     1.2;

1.2
date     85.11.12.14.30.34;  author bcn;  state Exp;
branches ;
next     1.1;

1.1
date     85.10.10.11.18.19;  author bcn;  state Exp;
branches ;
next     ;


desc
@Initial RCS checkin
@


4.10
log
@include des.h
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/save_credentials.c,v $
 * $Author: jtkohl $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_save_credentials_c =
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/save_credentials.c,v 4.9 89/05/31 17:45:43 jtkohl Exp Locker: kfall $";
#endif /* lint */

#include <mit-copyright.h>
#include <stdio.h>
#include <des.h>
#include <krb.h>

/*
 * This routine takes a ticket and associated info and calls
 * tf_save_cred() to store them in the ticket cache.  The peer
 * routine for extracting a ticket and associated info from the
 * ticket cache is krb_get_cred().  When changes are made to
 * this routine, the corresponding changes should be made
 * in krb_get_cred() as well.
 *
 * Returns KSUCCESS if all goes well, otherwise an error returned
 * by the tf_init() or tf_save_cred() routines.
 */

save_credentials(service, instance, realm, session, lifetime, kvno,
                 ticket, issue_date)
    char *service;              /* Service name */
    char *instance;             /* Instance */
    char *realm;                /* Auth domain */
    C_Block session;            /* Session key */
    int lifetime;               /* Lifetime */
    int kvno;                   /* Key version number */
    KTEXT ticket;               /* The ticket itself */
    long issue_date;            /* The issue time */
{
    int tf_status;   /* return values of the tf_util calls */

    /* Open and lock the ticket file for writing */
    if ((tf_status = tf_init(TKT_FILE, W_TKT_FIL)) != KSUCCESS)
	return(tf_status);

    /* Save credentials by appending to the ticket file */
    tf_status = tf_save_cred(service, instance, realm, session,
			     lifetime, kvno, ticket, issue_date);
    (void) tf_close();
    return (tf_status);
}
@


4.9
log
@remove unnecessary #include <sys/xxx> include macros.
Programmer: Stan Zanarotti
Auditor: John Kohl
@
text
@d2 1
a2 1
 * $Source: /mit/kerberos/src/lib/krb/RCS/save_credentials.c,v $
d14 1
a14 1
"$Header: save_credentials.c,v 4.8 88/12/01 14:33:38 jtkohl Exp $";
d19 1
@


4.8
log
@Programmer: Jennifer Steiner
Auditor: John Kohl
changes: improve documentation of code
fix up some slightly repetitive code
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: save_credentials.c,v 4.7 88/04/15 15:15:54 steiner Locked $";
a19 3
#include <sys/file.h>
#include <sys/types.h>
#include <sys/stat.h>
@


4.7
log
@Modified to use tf_util routines.
Programmer: billb.
Auditor: jtkohl.
@
text
@a9 1
 *
d14 1
a14 1
"$Header: save_credentials.c,v 4.6 88/02/24 18:16:10 steiner Exp $";
a23 2
char *tkt_string();

d25 9
a33 5
 * Takes a ticket and associated info and writes it to the end
 * of a file for storage.  The peer routine for reading a ticket and
 * associated info from that file is krb_get_cred.  When changes are
 * made to this routine, the correspondong changes should be made
 * there as well.
d47 1
a47 1
  int tf_status;   /* return values of the tf_util calls */
d50 2
d53 5
a57 21
  if ((tf_status = tf_init(TKT_FILE, W_TKT_FIL)) != KSUCCESS)
    {
      return(tf_status);
    }

   /* Save credentials by appending to the ticket file */
   /* If unable to save, close and unlock the ticket file and */
   /* return the appropriate error code */

  if ((tf_status = tf_save_cred(service, instance, realm, session,
				lifetime, kvno, ticket, issue_date))
      != KSUCCESS)
    {
      (void) tf_close();
      return (tf_status);
    }

  /* Save operation successful, so close the ticket file and return */

  (void) tf_close();
  return(KSUCCESS);
a58 1

@


4.6
log
@Copyright notice, etc.
@
text
@d15 1
a15 1
"$Header: save_credentials.c,v 4.5 88/01/12 21:24:10 steiner Locked $";
d28 1
a28 1
 * store takes a ticket and associated info and writes it to the end
d46 1
a46 5
    int tktfile, open();
    uid_t me, getuid();
    off_t lseek();
    struct stat buf;
    int count;                  /* count for write */
d48 1
a48 6
    /* Open the ticket file */
    me = getuid ();
    if (lstat(TKT_FILE,&buf) < 0) {
        fprintf(stderr,"Error opening %s",TKT_FILE);
        return(KFAILURE);
    }
d50 3
a52 4
    if ((buf.st_uid != me && buf.st_uid != 0)
        || !(buf.st_mode & S_IFREG) || buf.st_mode & 077) {
        fprintf(stderr,"Error opening %s",TKT_FILE);
        return(KFAILURE);
d55 10
a64 3
    if ((tktfile = open(TKT_FILE,2)) < NULL) {
        fprintf(stderr,"Error opening %s",TKT_FILE);
        return(KFAILURE);
d67 1
a67 2
    /* Find the end */
    (void) lseek(tktfile,0L,2);
d69 3
a71 35
    /* Write the ticket and associated data */
    /* Service */
    count = strlen(service)+1;
    if (write(tktfile,service,count) != count)
        goto bad;
    /* Instance */
    count = strlen(instance)+1;
    if (write(tktfile,instance,count) != count)
        goto bad;
    /* Realm */
    count = strlen(realm)+1;
    if (write(tktfile,realm,count) != count)
        goto bad;
    /* Session key */
    if (write(tktfile, (char *)session, 8) != 8)
        goto bad;
    /* Lifetime */
    if (write(tktfile,(char *)&lifetime,sizeof(int)) != sizeof(int))
        goto bad;
    /* Key vno */
    if (write(tktfile,(char *)&kvno,sizeof(int)) != sizeof(int))
        goto bad;
    /* Tkt length */
    if (write(tktfile,(char *)&(ticket->length),sizeof(int)) !=
        sizeof(int))
        goto bad;
    /* Ticket */
    count = ticket->length;
    if (write(tktfile,(char *)(ticket->dat),count) != count)
        goto bad;
    /* Issue date */
    if (write(tktfile,(char *)&issue_date,sizeof(long))
        != sizeof(long))
        goto bad;
    (void) close(tktfile);
a72 6
    /* Actually, we should check each write for success */
    return(KSUCCESS);
bad:
    (void) close(tktfile);
    return(KFAILURE);
}
@


4.5
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 2
a3 3
 *      $Source: /mit/kerberos/lib/krb/RCS/save_credentials.c,v $
 *      $Author: steiner $
 *      $Locker:  $
d5 2
a6 1
 * Copyright 1985,1986 by the Massachusetts Institute of Technology
d8 3
d15 1
a15 1
  "$Header: save_credentials.c,v 4.4 87/12/06 11:25:30 steiner Exp $";
d18 1
@


4.4
log
@Changed user routine names to krb_xxxxxxx
@
text
@d1 1
a1 1
/* 
d3 2
a4 2
 *      $Author: jtkohl $
 *      $Locker: steiner $
d11 3
a13 2
static char *rcsid_save_credentials_c = "$Header: save_credentials.c,v 4.3 87/10/29 10:47:59 steiner Locked $";
#endif  lint
d15 5
a19 5
#include        <stdio.h>
#include        <krb.h>
#include	<sys/file.h>
#include	<sys/types.h>
#include	<sys/stat.h>
d23 4
a26 4
/* 
 * store takes a ticket and associated info and writes it to the
 * end of a file for storage.  The peer routine for reading a ticket
 * and associated infor from that file is krb_get_cred.  When changes are
d31 10
a40 9
save_credentials(service,instance,realm,session,lifetime,kvno,ticket,issue_date)
char            *service;       /* Service name         */
char            *instance;      /* Instance             */
char            *realm;         /* Auth domain          */
C_Block         session;       /* Session key          */
int             lifetime;       /* Lifetime             */
int             kvno;           /* Key version number   */
KTEXT           ticket;         /* The ticket itself    */
long            issue_date;     /* The issue time       */
d42 5
a46 5
        int     tktfile, open();
	uid_t	me, getuid();
	off_t	lseek();
	struct stat buf;
        int count;			/* count for write */
d48 6
a53 5
        /* Open the ticket file */
	me = getuid ();
	if (lstat(TKT_FILE,&buf) < 0)
		{fprintf(stderr,"Error opening %s",TKT_FILE);
    		return(KFAILURE);}
d55 5
d61 4
a64 4
	if ((buf.st_uid != me && buf.st_uid != 0)
			|| !(buf.st_mode & S_IFREG) || buf.st_mode & 077)
	     	{fprintf(stderr,"Error opening %s",TKT_FILE);
	      	return(KFAILURE);}
d66 2
d69 35
a103 3
        if ((tktfile = open(TKT_FILE,2)) < NULL)
                {fprintf(stderr,"Error opening %s",TKT_FILE);
                return(KFAILURE);}
d105 2
a106 40
        /* Find the end */
        (void) lseek(tktfile,0L,2);

        /* Write the ticket and associated data */
	/* Service */
	count = strlen(service)+1;
	if (write(tktfile,service,count) != count)
		goto bad;
	/* Instance */
	count = strlen(instance)+1;
	if (write(tktfile,instance,count) != count)
		goto bad;
	/* Realm */
	count = strlen(realm)+1;
	if (write(tktfile,realm,count) != count)
		goto bad;
	/* Session key */
	if (write(tktfile, (char *)session, 8) != 8)
		goto bad;
	/* Lifetime */
	if (write(tktfile,(char *)&lifetime,sizeof(int)) != sizeof(int))
		goto bad;
	/* Key vno */
	if (write(tktfile,(char *)&kvno,sizeof(int)) != sizeof(int))
		goto bad;
	/* Tkt length */
	if (write(tktfile,(char *)&(ticket->length),sizeof(int)) !=
	    sizeof(int))
		goto bad;
	/* Ticket */
	count = ticket->length;
	if (write(tktfile,(char *)(ticket->dat),count) != count)
		goto bad;
	/* Issue date */
	if (write(tktfile,(char *)&issue_date,sizeof(long)) != sizeof(long))
		goto bad;
	(void) close(tktfile);

        /* Actually, we should check each write for success */
        return(KSUCCESS);
d108 2
a109 2
	(void) close(tktfile);
	return(KFAILURE);
@


4.3
log
@split off in_tkt and dest_tkt
@
text
@d2 1
a2 1
 *      $Source: /u3/kerberos.new/lib/krb/RCS/save_credentials.c,v $
d4 1
a4 1
 *      $Locker: jtkohl $
d11 1
a11 1
static char *rcsid_save_credentials_c = "$Header: save_credentials.c,v 4.2 87/10/20 17:12:44 jtkohl Locked $";
d25 1
a25 1
 * and associated infor from that file is retrieve.  When changes are
@


4.2
log
@lint fixes.
@
text
@d3 1
a3 1
 *      $Author: steiner $
d11 1
a11 1
static char *rcsid_save_credentials_c = "$Header: save_credentials.c,v 4.1 87/09/01 15:47:38 jtkohl Locked $";
a105 88
}


/*
 * in_tkt is used to initialize the ticket store.  It creates the
 * file to contain the tickets and zeroes anything that is there
 * already.  It requires one argument which is the authentication 
 * name of the user who will be storing tickets.  This name is
 * stored at the beginning of the file for later retrieval by
 * retrieve.  in_tkt returns 0 on success, 1 on failure.
 */

in_tkt(pname,pinst)
char	*pname;	
char    *pinst;
{
        int     tktfile, creat();
	uid_t	me, getuid();
        struct stat buf;
	int count;

        if ((tktfile = creat(TKT_FILE,0700)) < 0)
                {fprintf(stderr,"Error initializing %s",TKT_FILE);
                return(KFAILURE);}
	me = getuid ();
	if (lstat(TKT_FILE,&buf) < 0)
                {fprintf(stderr,"Error initializing %s",TKT_FILE);
                return(KFAILURE);}
	
	if (buf.st_uid != me || !(buf.st_mode & S_IFREG) ||
	    buf.st_mode & 077)
                {fprintf(stderr,"Error initializing %s",TKT_FILE);
                return(KFAILURE);}
	
	if (write(tktfile,pname,count = strlen(pname)+1) != count) {
		(void) close(tktfile);
		return(KFAILURE);
	}
	if (write(tktfile,pinst,count = strlen(pinst)+1) != count) {
		(void) close(tktfile);
		return(KFAILURE);
	}
        (void) close(tktfile);
        return(KSUCCESS);
}


/*
 * dest_tkt is used to destroy the ticket store upon logout.  
 * dest_tkt returns 0 on success, 1 on failure.
 */

dest_tkt()
{
	char *file = TKT_FILE;
	int i,fd;
	extern int errno;
	struct stat statb;
	char buf[BUFSIZ];

	errno = 0;
	if (lstat(file,&statb) < 0)
                return(KFAILURE);
	
	if (!(statb.st_mode & S_IFREG) ||	/* skip ownership check */
	    statb.st_mode & 077)
                return(KFAILURE);
	
	if ((fd = open(file, O_RDWR, 0)) < 0)
		return(KFAILURE);

	bzero(buf, BUFSIZ);

	for (i = 0; i < statb.st_size; i += BUFSIZ)
		if (write(fd, buf, BUFSIZ) != BUFSIZ) {
			(void) fsync(fd);
			(void) close(fd);
			return(KFAILURE);
		}


	(void) fsync(fd);
	(void) close(fd);

	(void) unlink(file);

	/* This is a kludge XXX */
	return (errno ? KFAILURE : KSUCCESS);
@


4.1
log
@No change; starting version 4.
@
text
@d2 3
a4 3
 *      $Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/save_credentials.c,v $
 *      $Author: jtkohl $
 *      $Locker: steiner $
d11 1
a11 1
static char *rcsid_save_credentials_c = "$Header: save_credentials.c,v 3.7 87/01/19 16:14:06 steiner Locked $";
d34 1
a34 1
char            *session;       /* Session key          */
d40 3
a42 2
        int     tktfile, open(), getuid();
	int	me;
d44 2
a45 1
        
d64 1
a64 1
        lseek(tktfile,0L,2);
d67 33
a99 10
        write(tktfile,service,strlen(service)+1);       /* Service      */
        write(tktfile,instance,strlen(instance)+1);     /* Instance     */
        write(tktfile,realm,strlen(realm)+1);           /* Realm        */
        write(tktfile,session,8);                       /* Session key  */
        write(tktfile,&lifetime,sizeof(int));           /* Lifetime     */
        write(tktfile,&kvno,sizeof(int));               /* Key vno      */
        write(tktfile,&(ticket->length),sizeof(int));   /* Tkt length   */
        write(tktfile,ticket->dat,ticket->length);      /* Ticket       */
        write(tktfile,&issue_date,sizeof(long));        /* Issue date   */
        close(tktfile);
d103 3
d122 2
a123 2
        int     tktfile, creat(), getuid();
	int	me;
d125 1
d140 9
a148 3
	write(tktfile,pname,strlen(pname)+1);
	write(tktfile,pinst,strlen(pinst)+1);
        close(tktfile);
d180 5
a184 1
		write(fd, buf, BUFSIZ);
a185 2
	fsync(fd);
	close(fd);
d187 2
a188 1
	unlink(file);
d190 3
@


3.7
log
@fsync() before closing and unlinking the ticket file: insure that it is
*really* zeroed out on disk
@
text
@d2 3
a4 3
 *      $Source: /source/kerberos/lib/krb/RCS/save_credentials.c,v $
 *      $Author: root $
 *      $Locker: jtkohl $
d11 1
a11 1
static char *rcsid_save_credentials_c = "$Header: save_credentials.c,v 3.6 86/12/22 11:25:43 jtkohl Locked $";
@


3.6
log
@fixed so that root is trusted (for RFS).  (Root can circumvent security
anyway, since can make a copy of a user's ticket file.)
@
text
@d4 1
a4 1
 *      $Locker: root $
d11 1
a11 1
static char *rcsid_save_credentials_c = "$Header: save_credentials.c,v 3.5 86/12/08 14:32:17 root Locked $";
d147 1
@


3.5
log
@added ticket file ownership checks, due to srz
@
text
@d2 3
a4 3
 *      $Source: /mit/projects/auth/src/lib/krb/RCS/save_credentials.c,v $
 *      $Author: wesommer $
 *      $Locker:  $
d11 1
a11 1
static char *rcsid_save_credentials_c = "$Header: save_credentials.c,v 3.4 86/08/15 20:19:15 wesommer Exp $";
d51 2
a52 2
	if (buf.st_uid != me || !(buf.st_mode & S_IFREG) ||
	    buf.st_mode & 077)
@


3.4
log
@Sanitize the ticket file before unlinking, to prevent 
perverts who like to grep through the raw device from finding
anything interesting.
@
text
@d3 2
a4 2
 *      $Author: bcn $
 *      $Locker: wesommer $
d11 1
a11 1
static char *rcsid_save_credentials_c = "$Header: save_credentials.c,v 3.3 86/08/12 12:23:03 bcn Exp $";
d40 3
a42 1
        int     tktfile, open();
d45 12
d94 4
a97 2
        int     tktfile, creat();
        
d101 10
d132 7
a143 3
	if ((fstat(fd, &statb)) == -1)
		return (errno);

a152 2


@


3.3
log
@Name changed from store to save_credentials to preven possible name
conflicts for users linking with libkrb.
@
text
@d4 1
a4 1
 *      $Locker: bcn $
d11 1
a11 1
static char *rcsid_save_credentials_c = "$Header: save_credentials.c,v 3.2 86/07/16 12:05:58 bcn Exp $";
d16 3
d99 8
a106 3
        int     unlink();
        
        if (unlink(TKT_FILE))
d108 14
a121 1
        return(KSUCCESS);
@


3.2
log
@Added routine dest_tkt to destroy (unlink) the ticket
file.  It should really make a point to actually
zero the disk.
@
text
@d2 1
a2 1
 *      $Source: /mit/projects/auth/src/lib/krb/RCS/store.c,v $
d11 1
a11 1
static char *rcsid_store_c = "$Header: store.c,v 3.1 86/03/28 09:12:16 bcn Exp $";
d27 1
a27 1
store(service,instance,realm,session,lifetime,kvno,ticket,issue_date)
@


3.1
log
@Added storage of users instance.  
Changes to prot rev 3 complete.
@
text
@d11 1
a11 1
static char *rcsid_store_c = "$Header: store.c,v 1.6 85/11/26 14:30:25 bcn Exp $";
d85 15
@


1.6
log
@Change FAILURE to KFAILURE and SUCCESS to KSUCCESS.
Add aname argument to in_tkt.
@
text
@a4 18
 *      $Log:	store.c,v $
 * Revision 1.5  85/11/20  12:01:09  bcn
 * Remove reference to krbdef.h since that is now included in krb.h.
 * 
 * Revision 1.4  85/11/18  14:12:24  bcn
 * Moved routines into separate file to make ready for libkrb.
 * Cleaned up some code and added documentation in places.
 * Added realm to information stored with ticket (part of index).
 * 
 * Revision 1.3  85/11/18  11:57:46  bcn
 * Initialize done to 0 in tkt_string.
 * 
 * Revision 1.2  85/11/12  14:30:34  bcn
 * tkt_string() moved here from clogin.c
 * 
 * Revision 1.1  85/10/10  11:18:19  bcn
 * Initial revision
 * 
d6 1
a6 1
 * Copyright 1985 by the Massachusetts Institute of Technology
d11 1
a11 1
static char *rcsid_store_c = "$Header: store.c,v 1.5 85/11/20 12:01:09 bcn Exp $";
d73 3
a75 2
in_tkt(aname)
char	*aname;	
d82 2
a83 1
	write(tktfile,aname,strlen(aname)+1);
@


1.5
log
@Remove reference to krbdef.h since that is now included in krb.h.
@
text
@d6 3
d29 1
a29 1
static char *rcsid_store_c = "$Header: store.c,v 1.4 85/11/18 14:12:24 bcn Exp $";
d60 1
a60 1
                return(FAILURE);}
d78 1
a78 1
        return(SUCCESS);
d85 4
a88 1
 * already.  It returns 0 on success, 1 on failure.
d91 2
a92 1
in_tkt()
d98 2
a99 2
                return(FAILURE);}

d101 1
a101 1
        return(SUCCESS);
@


1.4
log
@Moved routines into separate file to make ready for libkrb.
Cleaned up some code and added documentation in places.
Added realm to information stored with ticket (part of index).
@
text
@d5 6
a10 1
 *      $Log:   store.c,v $
d26 1
a26 1
static char *rcsid_store_c = "$Header: store.c,v 1.3 85/11/18 11:57:46 bcn Exp $";
a30 1
#include        "krbdef.h"
@


1.3
log
@Initialize done to 0 in tkt_string.
@
text
@d2 7
a8 4
 * 	$Source: /mit/projects/auth/src/client/RCS/storage.c,v $
 * 	$Author: bcn $
 * 	$Locker:  $
 *    	$Log:	storage.c,v $
d21 2
a22 2
static char *rcsid_storage_c = "$Header: storage.c,v 1.2 85/11/12 14:30:34 bcn Exp $";
#endif	lint
d24 3
a26 3
#include	<stdio.h>
#include	"client.h"
#include 	"/projects/auth/src/kdc/prot.h"
d30 7
a36 14
store(service,instance,session,lifetime,kvno,ticket,issue_date)
char		*service;
char		*instance;
char		*session;
int		lifetime;
int		kvno;
TEXT		ticket;
long		issue_date;
{
	int	tktfile, open();
	
	if ((tktfile = open(TKT_FILE,2)) < NULL)
		{fprintf(stderr,"Error opening %s",TKT_FILE);
		return;}
d38 9
a46 21
	lseek(tktfile,0L,2);

	write(tktfile,service,strlen(service)+1);
	write(tktfile,instance,strlen(instance)+1);
	write(tktfile,session,8);
	write(tktfile,&lifetime,sizeof(int));
	write(tktfile,&kvno,sizeof(int));
	write(tktfile,&(ticket->length),sizeof(int));
	write(tktfile,ticket->dat,ticket->length);
	write(tktfile,&issue_date,sizeof(long));
	close(tktfile);
}

retrieve(service,instance,session,lifetime,kvno,ticket,issue_date)
char		*service;
char		*instance;
char		session[8];
int		*lifetime;
int		*kvno;
TEXT		ticket;
long		*issue_date;
d48 6
a53 6
	int	tktfile, open();
	char	s[100],i[100];	/* These should be defined */
	
	if ((tktfile = open(TKT_FILE,0)) < NULL)
		{fprintf(stderr,"Error opening %s",TKT_FILE);
		return;}
d55 2
a56 1
	while(getst(tktfile,s,100) > 0)
d58 11
a68 7
		{getst(tktfile,i,100);
		 read(tktfile,session,8);
		 read(tktfile,lifetime,sizeof(int));
		 read(tktfile,kvno,sizeof(int));
		 read(tktfile,&(ticket->length),sizeof(int));	
		 read(tktfile,ticket->dat,ticket->length);		 
		 read(tktfile,issue_date,sizeof(long));		 
d70 2
a71 5
		 if ((strcmp(s,service) == 0) && 
		     (strcmp(i,instance) == 0)) break;
		}
	close(tktfile);

a73 2
/* Note the value returned is supposed to be the number of 
   characters read, but it may not be accurate */
d75 5
a79 9
getst(fd,s,n)
int	fd;
char	*s;
{
	int count = n;
	while (read(fd,s,1) && --count)
		{if (*(s++) == '\000') return(n - count);}
	*(s++) = '\000';
	return(n - count);
a80 3
}


d83 5
a87 5
	int	tktfile, creat();
	
	if ((tktfile = creat(TKT_FILE,0700)) < 0)
		{fprintf(stderr,"Error initializing %s",TKT_FILE);
		return;}
d89 2
a90 1
	close(tktfile);
a93 16
#ifdef	BSD42
char *tkt_string()
{
	static	char	s[64];
	static	char	uid[5];
	static	int	done = 0;
	if (!done)
		{
		strcpy(s,TKT_ROOT);
		sprintf(uid,"%d",getuid());
		strcat(s,uid);
		done = 1;
		}
	return s;
}
#endif
@


1.2
log
@tkt_string() moved here from clogin.c
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d6 3
d18 1
a18 1
static char *rcsid_storage_c = "$Header: storage.c,v 1.1 85/10/10 11:18:19 bcn Exp $";
d25 2
d121 1
a121 1
	static	int		done;
@


1.1
log
@Initial revision
@
text
@d2 7
a8 4
 * 	$Source: $
 * 	$Author: $
 * 	$Locker: $
 *    	$Log:	 $
d15 1
a15 1
static char *rcsid_storage_c = "$Header: $";
d109 18
@
