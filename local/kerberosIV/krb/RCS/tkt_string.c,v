head     4.7;
branch   ;
access   ;
symbols  PATCH8:4.6 PATCH7:4.6 KPATCH6:4.6 ASRSNAP1001:4.6 PATCH5:4.6 KPATCH4:4.6 KPATCH3:4.6 KPATCH2:4.6 KREL1:4.6 BETA5/24/88:4.4;
locks    ; strict;
comment  @ * @;


4.7
date     90.06.25.20.57.33;  author kfall;  state Exp;
branches ;
next     4.6;

4.6
date     89.01.05.12.31.51;  author raeburn;  state Exp;
branches ;
next     4.5;

4.5
date     88.11.15.16.59.40;  author jtkohl;  state Exp;
branches ;
next     4.4;

4.4
date     88.02.24.18.16.46;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     88.01.12.21.24.52;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     87.10.20.17.13.27;  author jtkohl;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.47.52;  author steiner;  state Exp;
branches ;
next     3.4;

3.4
date     86.07.16.12.03.50;  author bcn;  state Exp;
branches ;
next     3.3;

3.3
date     86.07.07.14.27.45;  author ostlund;  state Exp;
branches ;
next     3.2;

3.2
date     86.05.14.15.27.02;  author spm;  state Exp;
branches ;
next     3.1;

3.1
date     86.03.28.13.59.05;  author bcn;  state Exp;
branches ;
next     1.5;

1.5
date     85.11.20.12.01.38;  author bcn;  state Exp;
branches ;
next     1.4;

1.4
date     85.11.18.12.35.24;  author bcn;  state Exp;
branches ;
next     1.3;

1.3
date     85.11.18.11.57.46;  author bcn;  state Exp;
branches ;
next     1.2;

1.2
date     85.11.12.14.30.34;  author bcn;  state Exp;
branches ;
next     1.1;

1.1
date     85.10.10.11.18.19;  author bcn;  state Exp;
branches ;
next     ;


desc
@Initial RCS checkin
@


4.7
log
@include des.h
@
text
@/*
 * $Source: /usr/src/kerberosIV/src/lib/krb/RCS/tkt_string.c,v $
 * $Author: raeburn $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 */

#ifndef lint
static char *rcsid_tkt_string_c =
"$Header: /usr/src/kerberosIV/src/lib/krb/RCS/tkt_string.c,v 4.6 89/01/05 12:31:51 raeburn Exp Locker: kfall $";
#endif /* lint */

#include <mit-copyright.h>
#include <stdio.h>
#include <sys/types.h>
#include <des.h>
#include <krb.h>
#include <string.h>
#include <sys/param.h>

char *getenv();

/*
 * This routine is used to generate the name of the file that holds
 * the user's cache of server tickets and associated session keys.
 *
 * If it is set, krb_ticket_string contains the ticket file name.
 * Otherwise, the filename is constructed as follows:
 *
 * If it is set, the environment variable "KRBTKFILE" will be used as
 * the ticket file name.  Otherwise TKT_ROOT (defined in "krb.h") and
 * the user's uid are concatenated to produce the ticket file name
 * (e.g., "/tmp/tkt123").  A pointer to the string containing the ticket
 * file name is returned.
 */

static char krb_ticket_string[MAXPATHLEN] = "";

char *tkt_string()
{
    char *env;
    uid_t getuid();

    if (!*krb_ticket_string) {
        if (env = getenv("KRBTKFILE")) {
	    (void) strncpy(krb_ticket_string, env,
			   sizeof(krb_ticket_string)-1);
	    krb_ticket_string[sizeof(krb_ticket_string)-1] = '\0';
	} else {
	    /* 32 bits of signed integer will always fit in 11 characters
	     (including the sign), so no need to worry about overflow */
	    (void) sprintf(krb_ticket_string, "%s%d",TKT_ROOT,getuid());
        }
    }
    return krb_ticket_string;
}

/*
 * This routine is used to set the name of the file that holds the user's
 * cache of server tickets and associated session keys.
 *
 * The value passed in is copied into local storage.
 *
 * NOTE:  This routine should be called during initialization, before other
 * Kerberos routines are called; otherwise tkt_string() above may be called
 * and return an undesired ticket file name until this routine is called.
 */

void
krb_set_tkt_string(val)
char *val;
{

    (void) strncpy(krb_ticket_string, val, sizeof(krb_ticket_string)-1);
    krb_ticket_string[sizeof(krb_ticket_string)-1] = '\0';

    return;
}
@


4.6
log
@(jtkohl) made some variables non-static, eliminated some; created a
static buffer to hold the current name, and a function krb_set_tkt_string
to assign to it.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/krb/RCS/tkt_string.c,v $
 * $Author: jtkohl $
d14 1
a14 1
"$Header: tkt_string.c,v 4.5 88/11/15 16:59:40 jtkohl Locked $";
d20 1
@


4.5
log
@Documentor: Jennifer Steiner
Auditor: John Kohl
changes: document the code properly
@
text
@d3 1
a3 1
 * $Author: steiner $
d14 1
a14 1
"$Header: tkt_string.c,v 4.4 88/02/24 18:16:46 steiner Locked $";
d21 2
a22 1
#include <strings.h>
d30 3
d40 2
d44 1
a44 4
    static char s[64];
    static char uid[6];
    static int done = 0;
    static char *env;
d47 9
a55 7
    if (!done) {
        if (env = getenv("KRBTKFILE"))
            (void) strncpy(s,env,63);
        else {
            (void) strcpy(s,TKT_ROOT);
            (void) sprintf(uid,"%d",getuid());
            (void) strcat(s,uid);
a56 1
        done = 1;
d58 23
a80 1
    return s;
@


4.4
log
@Copyright notice, etc.
@
text
@d14 1
a14 1
"$Header: tkt_string.c,v 4.3 88/01/12 21:24:52 steiner Locked $";
d26 8
a33 3
 * This routine is used to generate the name of the file that is to
 * contain a user's tickets.  The filename is built out of TKT_ROOT
 * by appending the user's UID.
@


4.3
log
@Formatting changes.
Programmer: Ken.
Auditor: Jon.
@
text
@d2 2
a3 3
 *      $Source: /mit/kerberos/lib/krb/RCS/tkt_string.c,v $
 *      $Author: jtkohl $
 *      $Locker: steiner $
d5 2
a6 1
 * Copyright 1985,1986 by the Massachusetts Institute of Technology
d8 2
d14 1
a14 1
    "$Header: tkt_string.c,v 4.2 87/10/20 17:13:27 steiner Locked $";
d17 1
@


4.2
log
@lint fixes.
@
text
@d1 4
a4 4
/* 
 * 	$Source: /u3/kerberos.new/lib/krb/RCS/tkt_string.c,v $
 * 	$Author: steiner $
 * 	$Locker: jtkohl $
d11 3
a13 2
static char *rcsid_tkt_string_c = "$Header: tkt_string.c,v 4.1 87/09/01 15:47:52 jtkohl Locked $";
#endif	lint
d15 4
a18 4
#include	<stdio.h>
#include	<sys/types.h>
#include	<krb.h>
#include	<strings.h>
d20 1
a20 1
char	*getenv();
d22 2
a23 1
/* This routine is used to generate the name of the file that is to
d30 5
a34 5
	static	char	s[64];
	static	char	uid[6];
	static	int	done = 0;
	static	char	*env;
	uid_t getuid();
d36 11
a46 11
	if (!done)
		{
		if(env = getenv("KRBTKFILE"))
		    (void) strncpy(s,env,63);
		else
		   {(void) strcpy(s,TKT_ROOT);
		    (void) sprintf(uid,"%d",getuid());
		    (void) strcat(s,uid);}
		done = 1;
		}
	return s;
@


4.1
log
@No change; starting version 4.
@
text
@d2 3
a4 3
 * 	$Source: /mit/s/t/steiner/kerberos/lib/krb/RCS/tkt_string.c,v $
 * 	$Author: bcn $
 * 	$Locker: steiner $
d11 1
a11 1
static char *rcsid_tkt_string_c = "$Header: tkt_string.c,v 3.4 86/07/16 12:03:50 steiner Locked $";
d15 1
d17 1
d32 2
d37 1
a37 1
		    strncpy(s,env,63);
d39 3
a41 3
		   {strcpy(s,TKT_ROOT);
		    sprintf(uid,"%d",getuid());
		    strcat(s,uid);}
@


3.4
log
@If the environment variable KRBTKFILE is set, it will be
used as the name for the ticket file.
@
text
@d2 3
a4 3
 * 	$Source: /mit/projects/auth/src/lib/krb/RCS/tkt_string.c,v $
 * 	$Author: ostlund $
 * 	$Locker:  $
d11 1
a11 1
static char *rcsid_tkt_string_c = "$Header: tkt_string.c,v 3.3 86/07/07 14:27:45 ostlund Exp $";
@


3.3
log
@changed char uid[5] to char uid[6].
@
text
@d3 2
a4 2
 * 	$Author: spm $
 * 	$Locker: ostlund $
d6 1
a6 1
 * Copyright 1985 by the Massachusetts Institute of Technology
d11 1
a11 1
static char *rcsid_tkt_string_c = "$Header: tkt_string.c,v 3.2 86/05/14 15:27:02 spm Exp $";
d17 1
d29 1
d32 6
a37 3
		strcpy(s,TKT_ROOT);
		sprintf(uid,"%d",getuid());
		strcat(s,uid);
@


3.2
log
@*** empty log message ***
@
text
@d3 2
a4 2
 * 	$Author: bcn $
 * 	$Locker: spm $
d11 1
a11 1
static char *rcsid_tkt_string_c = "$Header: tkt_string.c,v 3.1 86/03/28 13:59:05 bcn Exp $";
d26 1
a26 1
	static	char	uid[5];
@


3.1
log
@Update major revision number.
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d11 1
a11 1
static char *rcsid_tkt_string_c = "$Header: tkt_string.c,v 1.5 85/11/20 12:01:38 bcn Exp $";
d15 1
a15 1
#include	"krb.h"
@


1.5
log
@Remove reference to krbdef.h since that is now included in krb.h.
@
text
@a4 13
 *    	$Log:	tkt_string.c,v $
 * Revision 1.4  85/11/18  12:35:24  bcn
 * Routines moved into separate files for libkrb.
 * 
 * Revision 1.3  85/11/18  11:57:46  bcn
 * Initialize done to 0 in tkt_string.
 * 
 * Revision 1.2  85/11/12  14:30:34  bcn
 * tkt_string() moved here from clogin.c
 * 
 * Revision 1.1  85/10/10  11:18:19  bcn
 * Initial revision
 * 
d11 1
a11 1
static char *rcsid_tkt_string_c = "$Header: tkt_string.c,v 1.4 85/11/18 12:35:24 bcn Exp $";
@


1.4
log
@Routines moved into separate files for libkrb.
@
text
@d6 3
d24 1
a24 1
static char *rcsid_tkt_string_c = "$Header: tkt_string.c,v 1.3 85/11/18 11:57:46 bcn Exp $";
a28 1
#include	"krbdef.h"
@


1.3
log
@Initialize done to 0 in tkt_string.
@
text
@d2 1
a2 1
 * 	$Source: /mit/projects/auth/src/client/RCS/storage.c,v $
d4 5
a8 2
 * 	$Locker:  $
 *    	$Log:	storage.c,v $
d21 1
a21 1
static char *rcsid_storage_c = "$Header: storage.c,v 1.2 85/11/12 14:30:34 bcn Exp $";
d25 2
a26 2
#include	"client.h"
#include 	"/projects/auth/src/kdc/prot.h"
a27 1
char *tkt_string();
d29 4
a32 43
store(service,instance,session,lifetime,kvno,ticket,issue_date)
char		*service;
char		*instance;
char		*session;
int		lifetime;
int		kvno;
TEXT		ticket;
long		issue_date;
{
	int	tktfile, open();
	
	if ((tktfile = open(TKT_FILE,2)) < NULL)
		{fprintf(stderr,"Error opening %s",TKT_FILE);
		return;}

	lseek(tktfile,0L,2);

	write(tktfile,service,strlen(service)+1);
	write(tktfile,instance,strlen(instance)+1);
	write(tktfile,session,8);
	write(tktfile,&lifetime,sizeof(int));
	write(tktfile,&kvno,sizeof(int));
	write(tktfile,&(ticket->length),sizeof(int));
	write(tktfile,ticket->dat,ticket->length);
	write(tktfile,&issue_date,sizeof(long));
	close(tktfile);
}

retrieve(service,instance,session,lifetime,kvno,ticket,issue_date)
char		*service;
char		*instance;
char		session[8];
int		*lifetime;
int		*kvno;
TEXT		ticket;
long		*issue_date;
{
	int	tktfile, open();
	char	s[100],i[100];	/* These should be defined */
	
	if ((tktfile = open(TKT_FILE,0)) < NULL)
		{fprintf(stderr,"Error opening %s",TKT_FILE);
		return;}
a33 46
	while(getst(tktfile,s,100) > 0)

		{getst(tktfile,i,100);
		 read(tktfile,session,8);
		 read(tktfile,lifetime,sizeof(int));
		 read(tktfile,kvno,sizeof(int));
		 read(tktfile,&(ticket->length),sizeof(int));	
		 read(tktfile,ticket->dat,ticket->length);		 
		 read(tktfile,issue_date,sizeof(long));		 

		 if ((strcmp(s,service) == 0) && 
		     (strcmp(i,instance) == 0)) break;
		}
	close(tktfile);

}

/* Note the value returned is supposed to be the number of 
   characters read, but it may not be accurate */

getst(fd,s,n)
int	fd;
char	*s;
{
	int count = n;
	while (read(fd,s,1) && --count)
		{if (*(s++) == '\000') return(n - count);}
	*(s++) = '\000';
	return(n - count);

}


in_tkt()
{
	int	tktfile, creat();
	
	if ((tktfile = creat(TKT_FILE,0700)) < 0)
		{fprintf(stderr,"Error initializing %s",TKT_FILE);
		return;}

	close(tktfile);
}


#ifdef	BSD42
a47 1
#endif
@


1.2
log
@tkt_string() moved here from clogin.c
@
text
@d4 1
a4 1
 * 	$Locker: bcn $
d6 3
d18 1
a18 1
static char *rcsid_storage_c = "$Header: storage.c,v 1.1 85/10/10 11:18:19 bcn Exp $";
d25 2
d121 1
a121 1
	static	int		done;
@


1.1
log
@Initial revision
@
text
@d2 7
a8 4
 * 	$Source: $
 * 	$Author: $
 * 	$Locker: $
 *    	$Log:	 $
d15 1
a15 1
static char *rcsid_storage_c = "$Header: $";
d109 18
@
