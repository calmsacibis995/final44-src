head     4.1;
branch   ;
access   ;
symbols  PATCH8:4.0 PATCH7:4.0 KPATCH6:4.0 ASRSNAP1001:4.0 PATCH5:4.0 KPATCH4:4.0 KPATCH3:4.0 KPATCH2:4.0 KREL1:4.0 BETA5/24/88:1.4;
locks    ; strict;
comment  @ * @;


4.1
date     90.06.25.21.33.13;  author kfall;  state Exp;
branches ;
next     4.0;

4.0
date     89.01.23.09.45.43;  author jtkohl;  state Exp;
branches ;
next     1.4;

1.4
date     88.03.24.18.08.10;  author steiner;  state Exp;
branches ;
next     1.3;

1.3
date     88.02.23.17.34.02;  author steiner;  state Exp;
branches ;
next     1.2;

1.2
date     88.01.13.19.00.37;  author steiner;  state Exp;
branches ;
next     1.1;

1.1
date     87.11.30.06.11.09;  author panda;  state Exp;
branches ;
next     ;


desc
@Initial checkin.
@


4.1
log
@no significant change
@
text
@/*
 * $Source: /usr/src/kerberosIV/kstash/RCS/kstash.c,v $
 * $Author: kfall $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology 
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * Description.
 */

#ifndef	lint
static char rcsid_kstash_c[] =
"$Header: /usr/src/kerberosIV/kstash/RCS/kstash.c,v 4.1 90/06/25 21:07:31 kfall Exp $";
#endif	lint

#include <mit-copyright.h>

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <signal.h>
#include <sgtty.h>
#include <sys/ioctl.h>
#include <sys/time.h>
#include <sys/file.h>

#include <des.h>
#include <krb.h>
#include <klog.h>
#include <prot.h>
#include <krb_db.h>
#include <kdc.h>

extern int errno;

/* change this later, but krblib_dbm needs it for now */
char   *progname;

static C_Block master_key;
static Key_schedule master_key_schedule;
static Principal s_name_data;	/* for services requested */
static unsigned char master_key_version;
int     debug;
static int more;
static int kfile;
static void clear_secrets();

main(argc, argv)
    int     argc;
    char  **argv;
{
    long    n;
    if (n = kerb_init()) {
	fprintf(stderr, "Kerberos db and cache init failed = %d\n", n);
	exit(1);
    }

    if (kdb_get_master_key (TRUE, master_key, master_key_schedule) != 0) {
      fprintf (stderr, "%s: Couldn't read master key.\n", argv[0]);
      fflush (stderr);
      clear_secrets();
      exit (-1);
    }

    if (kdb_verify_master_key (master_key, master_key_schedule, stderr) < 0) {
      clear_secrets();
      exit (-1);
    }

    kfile = open(MKEYFILE, O_TRUNC | O_RDWR | O_CREAT, 0600);
    if (kfile < 0) {
	clear_secrets();
	fprintf(stderr, "\n\07\07%s: Unable to open master key file\n",
		argv[0]);
	exit(1);
    }
    if (write(kfile, (char *) master_key, 8) < 0) {
	clear_secrets();
	fprintf(stderr, "\n%s: Write I/O error on master key file\n",
		argv[0]);
	exit(1);
    }
    (void) close(kfile);
    clear_secrets();
}

static void 
clear_secrets()
{
    bzero(master_key_schedule, sizeof(master_key_schedule));
    bzero(master_key, sizeof(master_key));
}
@


4.0
log
@No change, incrementing vno to 4.x
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/admin/RCS/kstash.c,v $
 * $Author: steiner $
d16 1
a16 1
"$Header: kstash.c,v 1.4 88/03/24 18:08:10 steiner Exp $";
d32 1
a33 1
#include <des.h>
@


1.4
log
@Encrypt in master key rather than key schedule for
byte-order independence.
Programmer: jon.
Auditor: jtkohl.
@
text
@d16 1
a16 1
"$Header: kstash.c,v 1.3 88/02/23 17:34:02 steiner Exp $";
@


1.3
log
@Copyright notice, etc.
@
text
@d16 1
a16 1
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
a44 1
static C_Block session_key;
d62 6
a67 7
    n = kerb_get_principal(KERB_M_NAME, KERB_M_INST, &s_name_data, 1,
	&more);
    if (n != 1) {
	fprintf(stderr,
	"%s: error on master key version lookup, %d found, more = %d\n",
	argv[0], n, more);
	exit(1);
a68 6
    master_key_version = s_name_data.kdc_key_ver;
    fprintf(stdout, "\nCurrent Kerberos master key version is %d",
	    master_key_version);
    des_read_password(master_key, "Enter current Kerberos master key: ",
	TRUE);
    key_sched(master_key, master_key_schedule);
d70 4
a73 4
    /*
     * now use the master key to decrypt the key in the db, had better
     * be the same! 
     */
a74 13
    bcopy(&s_name_data.key_low, session_key, 4);
    bcopy(&s_name_data.key_high, ((long *) session_key) + 1, 4);
    pcbc_encrypt(session_key, session_key, (long) sizeof(session_key),
		 master_key_schedule, master_key_schedule, DECRYPT);
    n = bcmp((char *) master_key,
	(char *) session_key, sizeof(master_key));
    if (n) {
	clear_secrets();
	fprintf(stderr,
	    "\n%s: Invalid master key, does not match database\n",
	    argv[0]);
	exit(1);
    }
a96 1
    bzero(session_key, sizeof(session_key));
@


1.2
log
@Formatted.
@
text
@d2 2
a3 2
 * $Source: /u1/mit/kerberos/admin/RCS/kstash.c,v $ $Author: panda $
 * $Locker:  $ 
d5 2
a6 1
 * Copyright 1985,1986 by the Massachusetts Institute of Technology 
d8 4
d14 6
a19 6
#ifndef lint
static char *rcsid_make_master_c =
"$Header: kstash.c,v 1.1 87/11/30 06:11:09 panda Exp $";
static char *CopyRight =
"Copyright 1985,1986 by the Massachusetts Institute of Technology";
#endif  lint
@


1.1
log
@Initial revision
@
text
@d1 3
a3 6
/* 
 *  $Source: /u3/kerberos.new/kdc/RCS/make_master.c,v $
 *  $Author: steiner $
 *  $Locker:  $
 * 
 * Copyright 1985,1986 by the Massachusetts Institute of Technology
d5 2
d11 2
a12 2
"$Header: make_master.c,v 4.5 87/11/04 12:28:00 steiner Exp $";
static char *CopyRight = 
d34 1
a34 1
extern  int errno;
d37 1
a37 1
char    *progname;
d39 9
a47 9
static  C_Block		master_key;
static	C_Block	session_key;
static	Key_schedule	master_key_schedule;
static  Principal  s_name_data; /*for services requested*/
static	unsigned char	master_key_version;
int	debug;
static  int		more;
static  int		kfile;
static  void		clear_secrets();
d49 3
a51 3
main(argc,argv)
int argc;
char **argv;
d53 19
a71 15
  long n;
  if(n = kerb_init()) {
    fprintf(stderr,"\07\07Kerberos db and cache init failed = %d ...\n",n);
    exit (1);
  }
  n = kerb_get_principal(KERB_M_NAME,KERB_M_INST,&s_name_data,1,&more);
  if (n != 1) {
    fprintf(stderr,"\07%s: error on master key version lookup, %d found, more = %d\n", argv[0],n,more);
    exit (1);
  }
  master_key_version = s_name_data.kdc_key_ver;
  fprintf(stdout, "\nCurrent Kerberos master key version is %d",
	  master_key_version);
  des_read_password (master_key, "\nEnter current Kerberos master key: ",TRUE);
  key_sched(master_key,master_key_schedule);
d73 15
a87 12
  /* now use the master key to decrypt the key in the db, had better be
   * the same!
   */
  
  bcopy(&s_name_data.key_low,session_key, 4);
  bcopy(&s_name_data.key_high,((long *)session_key)+1, 4);
  pcbc_encrypt(session_key,session_key, (long) sizeof (session_key),
	       master_key_schedule,master_key_schedule,DECRYPT);
  n = bcmp((char *) master_key, (char *) session_key, sizeof(master_key));
  if (n) {
    clear_secrets();
    fprintf(stderr,"\n\07\07%s: Invalid master key, does not match database\n",
d89 16
a104 4
    exit (1);
  }
  kfile = open(MKEYFILE,O_TRUNC|O_RDWR|O_CREAT,0600);
  if (kfile < 0) {
a105 12
    fprintf(stderr,"\n\07\07%s: Unable to open master key file\n",
	    argv[0]);
    exit (1);
  }
  if(write(kfile,(char *)master_key, 8) < 0) {
    clear_secrets();
    fprintf(stderr,"\n\07\07%s: Write I/O error on master key file\n",
	    argv[0]);
    exit (1);
  }
  (void) close (kfile);
  clear_secrets();
d108 2
a109 1
static void clear_secrets()
d111 3
a113 3
    bzero(master_key_schedule,sizeof (master_key_schedule));
    bzero(master_key,sizeof(master_key));
    bzero(session_key,sizeof(session_key));
@
