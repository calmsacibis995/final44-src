head     4.7;
branch   ;
access   ;
symbols  PATCH8:4.7 PATCH7:4.7 KPATCH6:4.7 ASRSNAP1001:4.7 PATCH5:4.7 ADAMS_NSA:4.7 KPATCH4:4.7 KPATCH3:4.7 KPATCH2:4.7 KREL1:4.7 BETA5/24/88:4.5 v1:1.1;
locks    ; strict;
comment  @ * @;


4.7
date     88.11.15.11.29.24;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     88.06.09.16.42.00;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.02.24.14.21.38;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     88.01.14.18.44.43;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     88.01.14.17.26.37;  author raeburn;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.16.11;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.41.12;  author steiner;  state Exp;
branches ;
next     1.4;

1.4
date     87.01.09.15.18.51;  author wesommer;  state Exp;
branches ;
next     1.3;

1.3
date     86.08.08.14.14.46;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     85.12.16.13.46.26;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.08.16.12.52.50;  author spm;  state Exp;
branches ;
next     ;


desc
@ok v1
@


4.7
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes:
rename routines to des_xxx     
rename structures likewise
use local variables and static routines where appropriate
convert to des_internal.h       
make debug routines consistent
@
text
@/*
 * $Source: //ra/mit/wesommer/des/RCS/make_fp.c,v $
 * $Author: steiner $
 *
 * Copyright 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information,
 * please see the file <mit-copyright.h>.
 *
 * This file contains a generation routine for source code
 * implementing the final permutation of the DES.
 */

#include <mit-copyright.h>
#include <stdio.h>
#include "des_internal.h"
#include "tables.h"

extern unsigned int swap_bit_pos_0_to_ansi PROTOTYPE((unsigned int));
extern long swap_long_bytes();
extern void test_set PROTOTYPE((FILE *, char const *, int,
				char const *, int));

void gen (stream)
    FILE * stream;
{
    register    i;

    /* clear the output */
    fprintf(stream,"    L2 = 0; R2 = 0;\n");

    /*
     *  NOTE: As part of the final permutation, we also have to adjust
     *  for host bit order via "swap_bit_pos_0()".  Since L2,R2 are
     *  the output from this, we adjust the bit positions written into
     *  L2,R2.
     */

#define SWAP(i,j) \
    swap_long_bytes_bit_number(swap_bit_pos_0_to_ansi((unsigned)i)-j)

    /* first setup FP */
    fprintf(stream,
            "/* FP operations */\n/* first left to left */\n");

    /* first list mapping from left to left */
    for (i = 0; i <= 31; i++)
        if (FP[i] < 32)
            test_set(stream, "L1", FP[i], "L2", SWAP(i,0));

    /* now mapping from right to left */
    fprintf(stream,"\n\n/* now from right to left */\n");
    for (i = 0; i <= 31; i++)
        if (FP[i] >= 32)
            test_set(stream, "R1", FP[i]-32, "L2", SWAP(i,0));

    fprintf(stream,"\n/* now from left to right */\n");

    /*  list mapping from left to right */
    for (i = 32; i <= 63; i++)
        if (FP[i] <32)
            test_set(stream, "L1", FP[i], "R2", SWAP(i,32));

    /* now mapping from right to right */
    fprintf(stream,"\n/* last from right to right */\n");
    for (i = 32; i <= 63; i++)
        if (FP[i] >= 32)
            test_set(stream, "R1", FP[i]-32, "R2", SWAP(i,32));
}
@


4.6
log
@Optimizations for vax, change in generating files.
Programmer: raeburn.
Auditor: jtkohl.
@
text
@d2 2
a3 2
 * $Source$
 * $Author$
d16 1
a16 1
#include "conf.h"
@


4.5
log
@Copyright notice, etc.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/src/lib/des/RCS/make_fp.c,v $
 * $Author: steiner $
d7 2
a8 2
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
d10 2
a11 3
 * part of the Athena Kerberos encryption system
 *
 * spm	8/85
a13 5
#ifndef	lint
static char rcsid_make_fp_c[] =
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
#endif	lint

d16 1
d19 4
a22 2
extern	long	swap_bit_pos_0_to_ansi();
extern	long	swap_long_bytes();
d24 2
a25 1
main()
d27 2
a28 2
    register	i;
	
d30 1
a30 1
    fprintf(stdout,"\n\tL2 = 0; R2 = 0;");
d33 4
a36 5
     *  NOTE:
     *  As part of the final permutation, we also have to
     *  adjust for host bit order via "swap_bit_pos_0()".
     *  Since L2,R2 are the output from this, we adjust
     *  the bit positions written into L2,R2.
d39 3
d43 2
a44 2
    fprintf(stdout,
	    "\n/* FP operations */\n/* first left to left */\n");
d48 2
a49 5
	if (FP[i] < 32)
	    fprintf(stdout, "\n\tif (L1 & (1<<%d)) L2 |= 1<<%d;",
		    FP[i],
		    swap_long_bytes_bit_number
		    (swap_bit_pos_0_to_ansi(i)));
d52 1
a52 1
    fprintf(stdout,"\n\n/* now from right to left */\n"); 
d54 2
a55 5
	if (FP[i] >= 32)
	    fprintf(stdout, "\n\tif (R1 & (1<<%d)) L2 |= 1<<%d;",
		    FP[i]-32,
		    swap_long_bytes_bit_number
		    (swap_bit_pos_0_to_ansi(i)));
d57 2
a58 1
    fprintf(stdout,"\n\n/* now from left to right */\n");
d61 2
a62 5
	if (FP[i] <32)
	    fprintf(stdout, "\n\tif (L1 & (1<<%d)) R2 |= 1<<%d;",
		    FP[i],
		    swap_long_bytes_bit_number
		    (swap_bit_pos_0_to_ansi(i)-32));
d65 1
a65 1
    fprintf(stdout,"\n\n/* last from right to right */\n"); 
d67 2
a68 7
	if (FP[i] >= 32)
	    fprintf(stdout, "\n\tif (R1 & (1<<%d)) R2 |= 1<<%d;",
		    FP[i]-32,
		    swap_long_bytes_bit_number
		    (swap_bit_pos_0_to_ansi(i)-32));

    fprintf(stdout,"\n");
@


4.4
log
@Formatted.
Programmer: raeburn.
@
text
@d2 2
a3 2
 * $Source$
 * $Author$
d5 1
a5 1
 * des_make_fp.c
d7 3
d12 1
a12 1
 *	spm	8/85
d15 6
@


4.3
log
@Changed name of include file des_tables.h to tables.h.
@
text
@d1 3
a3 1
 /* des_make_fp.c
d5 2
d12 2
a13 1
#include	<stdio.h>
a14 2
#include	"tables.h"

d20 1
a20 1
	register	i;
d22 2
a23 2
	/* clear the output													   */
	fprintf(stdout,"\n\tL2 = 0; R2 = 0;");
d25 6
a30 9
/* this generates much faster code than bit fields, which causes
 * insv and extv instructions on the vax.
 */

	/*  NOTE
	 *  as part of the final permutation, we also have to
	 *  adjust for host bit order via "swap_bit_pos_0()".
	 *  Since L2,R2 are the output from this, we adjust the bit positions
	 *  written into L2,R2.
d33 3
a35 17
	/* first setup FP													   */
	fprintf(stdout,"\n/* FP operations */\n/* first left to left */\n");
	/* first list mapping from left to left								   */
	for (i = 0; i <=31; i++)
		{
		if (FP[i] < 32)	fprintf(stdout,
		"\n\tif (L1 & (1<<%d)) L2 |= 1<<%d;",FP[i],
		swap_long_bytes_bit_number(swap_bit_pos_0_to_ansi(i)));
		}
	/* now mapping from right to left									   */
	fprintf(stdout,"\n\n/* now from right to left */\n"); 
	for (i = 0; i <=31; i++)
		{
		if (FP[i] >= 32) fprintf(stdout,
		"\n\tif (R1 & (1<<%d)) L2 |= 1<<%d;",FP[i]-32,
		swap_long_bytes_bit_number(swap_bit_pos_0_to_ansi(i)));
		}
d37 7
a43 16
	fprintf(stdout,"\n\n/* now from left to right */\n");
	/*  list mapping from left to right								   */
	for (i = 32; i <=63; i++)
		{
		if (FP[i] <32)	fprintf(stdout,
		"\n\tif (L1 & (1<<%d)) R2 |= 1<<%d;",FP[i],
		swap_long_bytes_bit_number(swap_bit_pos_0_to_ansi(i)-32));
		}
	/* now mapping from right to right									   */
	fprintf(stdout,"\n\n/* last from right to right */\n"); 
	for (i = 32; i <=63; i++)
		{
		if (FP[i] >= 32)	fprintf(stdout,
		"\n\tif (R1 & (1<<%d)) R2 |= 1<<%d;",FP[i]-32,
		swap_long_bytes_bit_number(swap_bit_pos_0_to_ansi(i)-32));
		}
d45 8
d54 8
a61 2
	fprintf(stdout,"\n");
}			
d63 11
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d10 1
a10 1
#include	"des_tables.h"
@


4.1
log
@No change; starting version 4.
@
text
@d10 1
a10 1
#include	"./des_tables.h"
@


1.4
log
@Fix for hc on the RTPC
@
text
@@


1.3
log
@RT change
change names of swap routines
@
text
@a13 1
extern	char	FP[];
@


1.2
log
@fix include
@
text
@d1 1
a1 1
/* des_make_fp.c
d12 2
a13 1
extern	long	swap_bit_pos_0();
d40 2
a41 1
		"\n\tif (L1 & (1<<%d)) L2 |= 1<<%d;",FP[i],swap_bit_pos_0(i));
d48 2
a49 1
		"\n\tif (R1 & (1<<%d)) L2 |= 1<<%d;",FP[i]-32,swap_bit_pos_0(i));
d57 2
a58 1
		"\n\tif (L1 & (1<<%d)) R2 |= 1<<%d;",FP[i],swap_bit_pos_0(i)-32);
d65 2
a66 1
		"\n\tif (R1 & (1<<%d)) R2 |= 1<<%d;",FP[i]-32,swap_bit_pos_0(i)-32);
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
#include	"des_tables.h"
@
