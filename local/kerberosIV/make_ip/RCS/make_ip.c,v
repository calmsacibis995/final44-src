head     4.7;
branch   ;
access   ;
symbols  PATCH8:4.7 PATCH7:4.7 KPATCH6:4.7 ASRSNAP1001:4.7 PATCH5:4.7 ADAMS_NSA:4.7 KPATCH4:4.7 KPATCH3:4.7 KPATCH2:4.7 KREL1:4.7 BETA5/24/88:4.5 v1:1.1;
locks    ; strict;
comment  @ * @;


4.7
date     88.11.15.11.29.32;  author jtkohl;  state Exp;
branches ;
next     4.6;

4.6
date     88.06.09.16.42.10;  author steiner;  state Exp;
branches ;
next     4.5;

4.5
date     88.02.24.14.21.46;  author steiner;  state Exp;
branches ;
next     4.4;

4.4
date     88.01.14.18.44.48;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     88.01.14.17.27.23;  author raeburn;  state Exp;
branches ;
next     4.2;

4.2
date     87.09.10.16.16.15;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.01.15.41.15;  author steiner;  state Exp;
branches ;
next     1.4;

1.4
date     87.01.09.15.19.31;  author wesommer;  state Exp;
branches ;
next     1.3;

1.3
date     86.08.08.14.20.28;  author spm;  state Exp;
branches ;
next     1.2;

1.2
date     85.12.16.13.46.39;  author spm;  state Exp;
branches ;
next     1.1;

1.1
date     85.08.16.12.53.00;  author spm;  state Exp;
branches ;
next     ;


desc
@ok v1
@


4.7
log
@Programmer: Bill Sommerfeld
Auditor: John Kohl
changes:
rename routines to des_xxx     
rename structures likewise
use local variables and static routines where appropriate
convert to des_internal.h       
make debug routines consistent
@
text
@/*
 * $Source: //ra/mit/wesommer/des/RCS/make_ip.c,v $
 * $Author: steiner $
 *
 * Copyright 1987, 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * This routine generates source code implementing the initial
 * permutation of the DES.
 */

#include <mit-copyright.h>
#include <stdio.h>
#include "des_internal.h"
#include "tables.h"

extern long swap_bit_pos_0();
extern long rev_swap_bit_pos_0();

#define SWAP(x) swap_long_bytes_bit_number(swap_bit_pos_0_to_ansi(x))

void gen(stream)
    FILE *stream;
{
    register i;

    /* clear the output */
    fprintf(stream,"    L2 = 0; R2 = 0;\n");

    /* first setup IP */
    fprintf(stream,"/* IP operations */\n/* first left to left */\n");

    /* first list mapping from left to left */
    for (i = 0; i <= 31; i++)
        if (IP[i] < 32)
            test_set(stream, "L1", SWAP(IP[i]), "L2", i);

    /* now mapping from right to left */
    fprintf(stream,"\n/* now from right to left */\n");
    for (i = 0; i <= 31; i++)
        if (IP[i] >= 32)
            test_set(stream, "R1", SWAP(IP[i]-32), "L2", i);

    fprintf(stream,"\n/* now from left to right */\n");
    /*  list mapping from left to right */
    for (i = 32; i <= 63; i++)
        if (IP[i] <32)
            test_set(stream, "L1", SWAP(IP[i]), "R2", i-32);

    /* now mapping from right to right */
    fprintf(stream,"\n/* last from right to right */\n");
    for (i = 32; i <= 63; i++)
        if (IP[i] >= 32)
            test_set(stream, "R1", SWAP(IP[i]-32), "R2", i-32);
    exit(0);
}
@


4.6
log
@Optimizations for vax, change in generating files.
Programmer: raeburn.
Auditor: jtkohl.
@
text
@d2 2
a3 2
 * $Source$
 * $Author$
d16 1
a16 1
#include "conf.h"
@


4.5
log
@Copyright notice, etc.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
 * $Author: steiner $
d10 2
a11 2
 * Part of the Project Athena Kerberos encryption system,
 * originally written 8/85 by Steve Miller, MIT Project Athena.
a13 5
#ifndef	lint
static char rcsid_make_ip_c[] =
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
#endif	lint

d16 1
d21 1
d23 3
a25 1
main()
d30 1
a30 1
    fprintf(stdout,"\n\tL2 = 0; R2 = 0;");
d33 2
a34 1
    fprintf(stdout,"\n/* IP operations */\n/* first left to left */\n");
d37 2
a38 3
	if (IP[i] < 32)
	    fprintf(stdout, "\n\tif (L1 & (1<<%d)) L2 |= 1<<%d;",
		    SWAP(IP[i]), (i));
d41 1
a41 1
    fprintf(stdout,"\n\n/* now from right to left */\n");
d43 2
a44 3
	if (IP[i] >= 32)
	    fprintf(stdout, "\n\tif (R1 & (1<<%d)) L2 |= 1<<%d;",
		    SWAP(IP[i]-32), (i));
d46 2
a47 2
    fprintf(stdout,"\n\n/* now from left to right */\n");
    /*	list mapping from left to right */
d49 2
a50 3
	if (IP[i] <32)
	    fprintf(stdout, "\n\tif (L1 & (1<<%d)) R2 |= 1<<%d;",
		    SWAP(IP[i]), (i-32));
d53 1
a53 1
    fprintf(stdout,"\n\n/* last from right to right */\n");
d55 3
a57 5
	if (IP[i] >= 32)
	    fprintf(stdout, "\n\tif (R1 & (1<<%d)) R2 |= 1<<%d;",
		    SWAP(IP[i]-32), (i-32));

    fprintf(stdout,"\n");
@


4.4
log
@Formatted.
Programmer: raeburn.
@
text
@d2 2
a3 1
 * des_make_ip.c
d5 5
a11 2
 *
 * Copyright 1987, Massachusetts Institute of Technology.
d14 6
@


4.3
log
@Changed name of include file des_tables.h to tables.h.
@
text
@d1 2
a2 1
/* des_make_ip.c
d4 2
a5 1
 * part of the Athena Kerberos encryption system
d7 1
a7 1
 *	spm	8/85
d10 2
a11 1
#include	<stdio.h>
d13 3
a15 4
#include	"tables.h"

extern	long	swap_bit_pos_0();
extern	long	rev_swap_bit_pos_0();
d18 1
a18 5
	register	i;
	
/* this generates much faster code than field instructions, which causes
 * insv and extv instructions on the vax.
 */
d20 2
a21 22
	/* clear the output													   */
	fprintf(stdout,"\n\tL2 = 0; R2 = 0;");
	
	/* first setup IP													   */
	fprintf(stdout,"\n/* IP operations */\n/* first left to left */\n");
	/* first list mapping from left to left								   */
	for (i = 0; i <=31; i++)
		{
		if (IP[i] < 32)	fprintf(stdout,
		"\n\tif (L1 & (1<<%d)) L2 |= 1<<%d;",
		swap_long_bytes_bit_number(swap_bit_pos_0_to_ansi(IP[i])),
		(i));
		}
	/* now mapping from right to left									   */
	fprintf(stdout,"\n\n/* now from right to left */\n"); 
	for (i = 0; i <=31; i++)
		{
		if (IP[i] >= 32) fprintf(stdout,
		"\n\tif (R1 & (1<<%d)) L2 |= 1<<%d;",
		swap_long_bytes_bit_number(swap_bit_pos_0_to_ansi(IP[i]-32)),
		(i));
		}
d23 7
a29 18
	fprintf(stdout,"\n\n/* now from left to right */\n");
	/*  list mapping from left to right								   */
	for (i = 32; i <=63; i++)
		{
		if (IP[i] <32)	fprintf(stdout,
		"\n\tif (L1 & (1<<%d)) R2 |= 1<<%d;",
		swap_long_bytes_bit_number(swap_bit_pos_0_to_ansi(IP[i])),
		(i-32));
		}
	/* now mapping from right to right									   */
	fprintf(stdout,"\n\n/* last from right to right */\n"); 
	for (i = 32; i <=63; i++)
		{
		if (IP[i] >= 32)	fprintf(stdout,
		"\n\tif (R1 & (1<<%d)) R2 |= 1<<%d;",
		swap_long_bytes_bit_number(swap_bit_pos_0_to_ansi(IP[i]-32)),
		(i-32));
		}
d31 6
d38 16
a53 2
	fprintf(stdout,"\n");
}			
@


4.2
log
@Changed include files configuration and referencing.
@
text
@d10 1
a10 1
#include	"des_tables.h"
@


4.1
log
@No change; starting version 4.
@
text
@d10 1
a10 1
#include	"./des_tables.h"
@


1.4
log
@Fix for hc on the RTPC
@
text
@@


1.3
log
@RT changes
@
text
@a11 1
extern	char	IP[];
@


1.2
log
@*** empty log message ***
@
text
@d14 1
d32 3
a34 1
		"\n\tif (L1 & (1<<%d)) L2 |= 1<<%d;",swap_bit_pos_0(IP[i]),i);
d41 3
a43 1
		"\n\tif (R1 & (1<<%d)) L2 |= 1<<%d;",swap_bit_pos_0(IP[i])-32,i);
d51 3
a53 1
		"\n\tif (L1 & (1<<%d)) R2 |= 1<<%d;",swap_bit_pos_0(IP[i]),i-32);
d60 3
a62 1
		"\n\tif (R1 & (1<<%d)) R2 |= 1<<%d;",swap_bit_pos_0(IP[i])-32,i-32);
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
#include	"des_tables.h"
@
