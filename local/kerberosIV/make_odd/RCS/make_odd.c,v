head     4.5;
branch   ;
access   ;
symbols  PATCH8:4.4 PATCH7:4.4 KPATCH6:4.4 ASRSNAP1001:4.4 PATCH5:4.4 ADAMS_NSA:4.4 KPATCH4:4.4 KPATCH3:4.4 KPATCH2:4.4 KREL1:4.4 BETA5/24/88:4.3;
locks    ; strict;
comment  @ * @;


4.5
date     91.02.15.02.50.09;  author bostic;  state Exp;
branches ;
next     4.4;

4.4
date     88.06.09.16.42.38;  author steiner;  state Exp;
branches ;
next     4.3;

4.3
date     88.02.24.14.22.02;  author steiner;  state Exp;
branches ;
next     4.2;

4.2
date     88.01.14.18.45.00;  author steiner;  state Exp;
branches ;
next     4.1;

4.1
date     87.09.04.11.06.38;  author steiner;  state Exp;
branches ;
next     1.1;

1.1
date     87.09.04.11.05.49;  author steiner;  state Exp;
branches ;
next     ;


desc
@This file didn't have an RCS file, starting one.
@


4.5
log
@needs <sys/cdefs.h>
@
text
@/*
 * $Source: /usr/src/kerberosIV/make_odd/RCS/make_odd.c,v $
 * $Author: steiner $
 *
 * Copyright 1988 by the Massachusetts Institute of Technology.
 *
 * For copying and distribution information, please see
 * the file <mit-copyright.h>.
 *
 * This routine generates an odd-parity table for use in key generation.
 */

#include <mit-copyright.h>
#include <stdio.h>

void gen(stream)
    FILE *stream;
{
    /*
     * map a byte into its equivalent with odd parity, where odd
     * parity is in the least significant bit
     */
    register i, j, k, odd;

    fprintf(stream,
            "#include <sys/cdefs.h>\n");
    fprintf(stream,
            "static unsigned char const odd_parity[256] = {\n");

    for (i = 0; i < 256; i++) {
        odd = 0;
        /* shift out the lsb parity bit */
        k = i >> 1;
        /* then count the other bits */
        for (j = 0; j < 7; j++) {
            odd ^= (k&1);
            k = k >> 1;
        }
        k = i&~1;
        if (!odd)
            k |= 1;
        fprintf(stream, "%3d", k);
        if (i < 255)
            fprintf(stream, ", ");
        if (i%8 == 0)
            fprintf(stream, "\n");
    }
    fprintf(stream, "};\n");
}
@


4.4
log
@Optimizations for vax, change in generating files.
Programmer: raeburn.
Auditor: jtkohl.
@
text
@d2 2
a3 2
 * $Source$
 * $Author$
d25 2
@


4.3
log
@Copyright notice, etc.
@
text
@d2 2
a3 2
 * $Source: /mit/kerberos/tools/RCS/prototype.c,v $
 * $Author: steiner $
d7 4
a10 2
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
a12 5
#ifndef	lint
static char rcsid_make_odd_c[] =
"$Header: prototype.c,v 1.2 88/02/22 18:54:06 steiner Locked $";
#endif	lint

d16 2
a17 1
main()
d20 2
a21 2
     * map a byte into its equivalent with odd parity, where odd parity
     * is in the least significant bit
d25 2
a26 1
    printf("\nstatic unsigned char\todd_parity[256] = {");
d29 16
a44 16
	if (i%8 == 0)
	    printf("\n");
	odd = 0;
	/* shift out the lsb parity bit */
	k = i >> 1;
	/* then count the other bits */
	for (j = 0; j < 7; j++) {
	    odd ^= (k&1);
	    k = k >> 1;
	}
	k = i&~1;
	if (!odd)
	    k |= 1;
	printf("%3d",k);
	if (i < 255)
	    printf(", ");
d46 1
a46 1
    printf("\n};\n");
@


4.2
log
@Formatted.
Programmer: raeburn.
@
text
@d1 16
@


4.1
log
@No change; starting version 4.
@
text
@d1 2
a2 1
#include	<stdio.h>
d5 5
a9 6
/* map a byte into its equivalent with odd parity, where odd parity
 * is in the least significant bit
 */
	register	i,j,k,odd;
	
	printf("\nstatic unsigned char\todd_parity[256] = {");
d11 21
a31 18
	for (i = 0; i < 256 ; i++)
		{
		if (i%8 == 0) printf("\n");
		odd = 0;
		/* shift out the lsb parity bit									   */
		k = i >> 1;
		/* then count the other bits									   */
		for (j = 0; j<7; j++)
			{
			odd ^= (k&1);
			k = k >> 1;
			}
		k = i&~1;
		if (!odd) k |= 1;
		printf("%3d",k);
		if (i <255 ) printf(", ");
		}
	printf("\n};\n");
a32 2

		
@


1.1
log
@Initial revision
@
text
@@
