head	4.11;
access;
symbols
	PATCH8:4.9
	PATCH7:4.9
	KPATCH6:4.9
	ASRSNAP1001:4.9
	PATCH5:4.9
	KPATCH4:4.9
	KPATCH3:4.9
	KPATCH2:4.9
	KREL1:4.9
	BETA5/24/88:4.7;
locks; strict;


4.11
date	94.04.19.14.16.56;	author bostic;	state Exp;
branches;
next	4.10;

4.10
date	90.06.25.21.12.11;	author kfall;	state Exp;
branches;
next	4.9;

4.9
date	89.01.23.16.28.19;	author steiner;	state Exp;
branches;
next	4.8;

4.8
date	89.01.17.17.37.41;	author steiner;	state Exp;
branches;
next	4.7;

4.7
date	88.04.28.19.01.29;	author steiner;	state Exp;
branches;
next	4.6;

4.6
date	87.12.21.15.06.52;	author steiner;	state Exp;
branches;
next	4.5;

4.5
date	87.12.05.20.29.36;	author steiner;	state Exp;
branches;
next	4.4;

4.4
date	87.11.13.17.52.32;	author steiner;	state Exp;
branches;
next	4.3;

4.3
date	87.11.13.16.51.33;	author steiner;	state Exp;
branches;
next	4.2;

4.2
date	87.09.14.16.13.08;	author steiner;	state Exp;
branches;
next	4.1;

4.1
date	87.09.01.16.05.52;	author steiner;	state Exp;
branches;
next	1.4;

1.4
date	87.06.29.17.35.03;	author ens;	state Exp;
branches;
next	1.3;

1.3
date	86.06.12.12.43.53;	author bcn;	state Exp;
branches;
next	1.2;

1.2
date	86.05.09.13.54.51;	author bcn;	state Exp;
branches;
next	1.1;

1.1
date	86.04.30.16.40.04;	author spm;	state Exp;
branches;
next	;


desc
@bcn's before adding private message and safe message
@


4.11
log
@spell
@
text
@.\" $Source: /usr/src/kerberosIV/man/RCS/krb.3,v $
.\" $Author: kfall $
.\" $Header: /usr/src/kerberosIV/man/RCS/krb.3,v 4.10 1990/06/25 21:12:11 kfall Exp bostic $
.\" Copyright 1989 by the Massachusetts Institute of Technology.
.\"
.\" For copying and distribution information,
.\" please see the file <mit-copyright.h>.
.\"
.TH KERBEROS 3 "Kerberos Version 4.0" "MIT Project Athena"
.SH NAME
krb_mk_req, krb_rd_req, krb_kntoln, krb_set_key, krb_get_cred,
krb_mk_priv, krb_rd_priv, krb_mk_safe, krb_rd_safe, krb_mk_err,
krb_rd_err, krb_ck_repl \- Kerberos authentication library
.SH SYNOPSIS
.nf
.nj
.ft B
#include <kerberosIV/des.h>
#include <kerberosIV/krb.h>
.PP
.ft B
extern char *krb_err_txt[];
.PP
.ft B
int krb_mk_req(authent,service,instance,realm,checksum)
KTEXT authent;
char *service;
char *instance;
char *realm;
u_long checksum;
.PP
.ft B
int krb_rd_req(authent,service,instance,from_addr,ad,fn)
KTEXT authent;
char *service;
char *instance;
u_long from_addr;
AUTH_DAT *ad;
char *fn;
.PP
.ft B
int krb_kntoln(ad,lname)
AUTH_DAT *ad;
char *lname;
.PP
.ft B
int krb_set_key(key,cvt)
char *key;
int cvt;
.PP
.ft B
int krb_get_cred(service,instance,realm,c)
char *service;
char *instance;
char *realm;
CREDENTIALS *c;
.PP
.ft B
long krb_mk_priv(in,out,in_length,schedule,key,sender,receiver)
u_char *in;
u_char *out;
u_long in_length;
des_cblock key;
des_key_schedule schedule;
struct sockaddr_in *sender;
struct sockaddr_in *receiver;
.PP
.ft B
long krb_rd_priv(in,in_length,schedule,key,sender,receiver,msg_data)
u_char *in;
u_long in_length;
Key_schedule schedule;
des_cblock key;
struct sockaddr_in *sender;
struct sockaddr_in *receiver;
MSG_DAT *msg_data;
.PP
.ft B
long krb_mk_safe(in,out,in_length,key,sender,receiver)
u_char *in;
u_char *out;
u_long in_length;
des_cblock key;
struct sockaddr_in *sender;
struct sockaddr_in *receiver;
.PP
.ft B
long krb_rd_safe(in,length,key,sender,receiver,msg_data)
u_char *in;
u_long length;
des_cblock key;
struct sockaddr_in *sender;
struct sockaddr_in *receiver;
MSG_DAT *msg_data;
.PP
.ft B
long krb_mk_err(out,code,string)
u_char *out;
long code;
char *string;
.PP
.ft B
long krb_rd_err(in,length,code,msg_data)
u_char *in;
u_long length;
long code;
MSG_DAT *msg_data;
.fi
.ft R
.SH DESCRIPTION
This library supports network authentication and various related
operations.  The library contains many routines beyond those described
in this man page, but they are not intended to be used directly.
Instead, they are called by the routines that are described, the
authentication server and the login program.
.PP
.I krb_err_txt[]
contains text string descriptions of various Kerberos error codes returned
by some of the routines below.
.PP
.I krb_mk_req
takes a pointer to a text structure in which an authenticator is to be
built.  It also takes the name, instance, and realm of the service to be
used and an optional checksum.  It is up to the application to decide
how to generate the checksum.
.I krb_mk_req
then retrieves a ticket for the desired service and creates an
authenticator.  The authenticator is built in
.I authent
and is accessible
to the calling procedure.
.PP
It is up to the application to get the authenticator to the service
where it will be read by
.I krb_rd_req.
Unless an attacker possesses the session key contained in the ticket, it
will be unable to modify the authenticator.  Thus, the checksum can be
used to verify the authenticity of the other data that will pass through
a connection.
.PP
.I krb_rd_req
takes an authenticator of type
.B KTEXT,
a service name, an instance, the address of the
host originating the request, and a pointer to a structure of type
.B AUTH_DAT
which is filled in with information obtained from the authenticator.
It also optionally takes the name of the file in which it will find the
secret key(s) for the service.
If the supplied
.I instance
contains "*", then the first service key with the same service name
found in the service key file will be used, and the
.I instance
argument will be filled in with the chosen instance.  This means that
the caller must provide space for such an instance name.
.PP
It is used to find out information about the principal when a request
has been made to a service.  It is up to the application protocol to get
the authenticator from the client to the service.  The authenticator is
then passed to
.I krb_rd_req
to extract the desired information.
.PP
.I krb_rd_req
returns zero (RD_AP_OK) upon successful authentication.  If a packet was
forged, modified, or replayed, authentication will fail.  If the
authentication fails, a non-zero value is returned indicating the
particular problem encountered.  See
.I krb.h
for the list of error codes.
.PP
If the last argument is the null string (""), krb_rd_req will use the
file /etc/srvtab to find its keys.  If the last argument is NULL, it
will assume that the key has been set by
.I krb_set_key
and will not bother looking further.
.PP
.I krb_kntoln
converts a Kerberos name to a local name.  It takes a structure
of type AUTH_DAT and uses the name and instance to look in the database
/etc/aname to find the corresponding local name.  The local name is
returned and can be used by an application to change uids, directories,
or other parameters.  It is not an integral part of Kerberos, but is
instead provided to support the use of Kerberos in existing utilities.
.PP
.I krb_set_key
takes as an argument a des key.  It then creates
a key schedule from it and saves the original key to be used as an
initialization vector.
It is used to set the server's key which
must be used to decrypt tickets.
.PP
If called with a non-zero second argument,
.I krb_set_key
will first convert the input from a string of arbitrary length to a DES
key by encrypting it with a one-way function.
.PP
In most cases it should not be necessary to call
.I krb_set_key.
The necessary keys will usually be obtained and set inside
.I krb_rd_req.  krb_set_key
is provided for those applications that do not wish to place the
application keys on disk.
.PP
.I krb_get_cred
searches the caller's ticket file for a ticket for the given service, instance,
and realm; and, if a ticket is found, fills in the given CREDENTIALS structure
with the ticket information.
.PP
If the ticket was found,
.I krb_get_cred
returns GC_OK.
If the ticket file can't be found, can't be read, doesn't belong to
the user (other than root), isn't a regular file, or is in the wrong
mode, the error GC_TKFIL is returned.
.PP
.I krb_mk_priv
creates an encrypted, authenticated
message from any arbitrary application data, pointed to by
.I in
and
.I in_length
bytes long.
The private session key, pointed to by
.I key
and the key schedule,
.I schedule,
are used to encrypt the data and some header information using
.I pcbc_encrypt.
.I sender
and
.I receiver
point to the Internet address of the two parties.
In addition to providing privacy, this protocol message protects
against modifications, insertions or replays.  The encapsulated message and
header are placed in the area pointed to by
.I out
and the routine returns the length of the output, or -1 indicating
an error.
.PP
.I krb_rd_priv
decrypts and authenticates a received
.I krb_mk_priv
message.
.I in
points to the beginning of the received message, whose length
is specified in
.I in_length.
The private session key, pointed to by
.I key,
and the key schedule,
.I schedule,
are used to decrypt and verify the received message.
.I msg_data
is a pointer to a
.I MSG_DAT
struct, defined in
.I krb.h.
The routine fills in the
.I app_data
field with a pointer to the decrypted application data,
.I app_length
with the length of the
.I app_data
field,
.I time_sec
and
.I time_5ms
with the timestamps in the message, and
.I swap
with a 1 if the byte order of the receiver is different than that of
the sender.  (The application must still determine if it is appropriate
to byte-swap application data; the Kerberos protocol fields are already taken
care of).  The
.I hash
field returns a value useful as input to the
.I krb_ck_repl
routine.

The routine returns zero if ok, or a Kerberos error code. Modified messages
and old messages cause errors, but it is up to the caller to
check the time sequence of messages, and to check against recently replayed
messages using
.I krb_ck_repl
if so desired.
.PP
.I krb_mk_safe
creates an authenticated, but unencrypted message from any arbitrary
application data,
pointed to by
.I in
and
.I in_length
bytes long.
The private session key, pointed to by
.I key,
is used to seed the
.I quad_cksum()
checksum algorithm used as part of the authentication.
.I sender
and
.I receiver
point to the Internet address of the two parties.
This message does not provide privacy, but does protect (via detection)
against modifications, insertions or replays.  The encapsulated message and
header are placed in the area pointed to by
.I out
and the routine returns the length of the output, or -1 indicating
an error.
The authentication provided by this routine is not as strong as that
provided by
.I krb_mk_priv
or by computing the checksum using
.I cbc_cksum
instead, both of which authenticate via DES.
.PP

.I krb_rd_safe
authenticates a received
.I krb_mk_safe
message.
.I in
points to the beginning of the received message, whose length
is specified in
.I in_length.
The private session key, pointed to by
.I key,
is used to seed the quad_cksum() routine as part of the authentication.
.I msg_data
is a pointer to a
.I MSG_DAT
struct, defined in
.I krb.h .
The routine fills in these
.I MSG_DAT
fields:
the
.I app_data
field with a pointer to the application data,
.I app_length
with the length of the
.I app_data
field,
.I time_sec
and
.I time_5ms
with the timestamps in the message, and
.I swap
with a 1 if the byte order of the receiver is different than that of
the sender.
(The application must still determine if it is appropriate
to byte-swap application data; the Kerberos protocol fields are already taken
care of).  The
.I hash
field returns a value useful as input to the
.I krb_ck_repl
routine.

The routine returns zero if ok, or a Kerberos error code. Modified messages
and old messages cause errors, but it is up to the caller to
check the time sequence of messages, and to check against recently replayed
messages using
.I krb_ck_repl
if so desired.
.PP
.I krb_mk_err
constructs an application level error message that may be used along
with
.I krb_mk_priv
or
.I krb_mk_safe.
.I out
is a pointer to the output buffer,
.I code
is an application specific error code, and
.I string
is an application specific error string.

.PP
.I krb_rd_err
unpacks a received
.I krb_mk_err
message.
.I in
points to the beginning of the received message, whose length
is specified in
.I in_length.
.I code
is a pointer to a value to be filled in with the error
value provided by the application.
.I msg_data
is a pointer to a
.I MSG_DAT
struct, defined in
.I krb.h .
The routine fills in these
.I MSG_DAT
fields: the
.I app_data
field with a pointer to the application error text,
.I app_length
with the length of the
.I app_data
field, and
.I swap
with a 1 if the byte order of the receiver is different than that of
the sender.  (The application must still determine if it is appropriate
to byte-swap application data; the Kerberos protocol fields are already taken
care of).

The routine returns zero if the error message has been successfully received,
or a Kerberos error code.
.PP
The
.I KTEXT
structure is used to pass around text of varying lengths.  It consists
of a buffer for the data, and a length.  krb_rd_req takes an argument of this
type containing the authenticator, and krb_mk_req returns the
authenticator in a structure of this type.  KTEXT itself is really a
pointer to the structure.   The actual structure is of type KTEXT_ST.
.PP
The
.I AUTH_DAT
structure is filled in by krb_rd_req.  It must be allocated before
calling krb_rd_req, and a pointer to it is passed.  The structure is
filled in with data obtained from Kerberos.
.I MSG_DAT
structure is filled in by either krb_rd_priv, krb_rd_safe, or
krb_rd_err.  It must be allocated before the call and a pointer to it
is passed.  The structure is
filled in with data obtained from Kerberos.
.PP
.SH FILES
/usr/include/kerberosIV/krb.h
.br
/usr/lib/libkrb.a
.br
/usr/include/kerberosIV/des.h
.br
/usr/lib/libdes.a
.br
/etc/kerberosIV/aname
.br
/etc/kerberosIV/srvtab
.br
/tmp/tkt[uid]
.SH "SEE ALSO"
kerberos(1), des_crypt(3)
.SH DIAGNOSTICS
.SH BUGS
The caller of
.I krb_rd_req, krb_rd_priv, and krb_rd_safe
must check time order and for replay attempts.
.I krb_ck_repl
is not implemented yet.
.SH AUTHORS
Clifford Neuman, MIT Project Athena
.br
Steve Miller, MIT Project Athena/Digital Equipment Corporation
.SH RESTRICTIONS
COPYRIGHT 1985,1986,1989 Massachusetts Institute of Technology
@


4.10
log
@no big changes
@
text
@d1 3
a3 3
.\" $Source: /usr/src/kerberosIV/src/man/RCS/kerberos.3,v $
.\" $Author: steiner $
.\" $Header: /usr/src/kerberosIV/src/man/RCS/kerberos.3,v 4.9 89/01/23 16:28:19 steiner Exp Locker: kfall $
d136 1
a136 1
Unless an attacker posesses the session key contained in the ticket, it
@


4.9
log
@DES library name changes.
Programmer: jtkohl
Auditor: steiner
@
text
@d1 3
a3 3
.\" $Source: /mit/kerberos/src/man/RCS/ext_srvtab.8,v $
.\" $Author: jtkohl $
.\" $Header:  $
d18 2
a19 2
#include <des.h>
#include <krb.h>
d435 1
a435 1
/usr/include/krb.h
d439 1
a439 1
/usr/include/des.h
d443 1
a443 1
/etc/aname
d445 1
a445 1
/etc/srvtab
@


4.8
log
@Programmer: jtkohl
Auditor: steiner
Changes: reformatted, some descriptions fixed.
@
text
@d1 9
a9 4
.TH KERBEROS 3  "21 December 1987"
.FM mit
.AT 3
.ta .5i 2i
d63 2
a64 2
C_Block *key;
Key_schedule schedule;
d73 1
a73 1
C_Block *key;
d83 1
a83 1
C_Block *key;
d91 1
a91 1
C_Block *key;
d462 1
a462 1
COPYRIGHT 1985,1986 Massachusetts Institute of Technology
@


4.7
log
@Better title.
@
text
@d12 3
a14 2
.B #include <des.h>
.B #include <krb.h>
d16 2
a17 1
.B	extern	char	*krb_err_txt[];
d19 7
a25 6
.B int krb_mk_req(authent,service,instance,realm,checksum)
.B	KTEXT		authent;
.B	char		*service;
.B	char		*instance;
.B	char		*realm;
.B	u_long		checksum;
d27 8
a34 7
.B int krb_rd_req(authent,service,instance,from_addr,ad,fn)
.B	KTEXT		authent;
.B	char		*service;
.B	char		*instance;
.B	u_long		from_addr;
.B	AUTH_DAT	*ad;
.B	char		*fn;
d36 4
a39 3
.B int krb_kntoln(ad,lname)
.B	AUTH_DAT	*ad;
.B	char		*lname;
d41 4
a44 3
.B int krb_set_key(key,cvt)
.B	char		*key;
.B	int		cvt;
d46 6
a51 5
.B int krb_get_cred(service,instance,realm,c)
.B	char		*service;
.B	char		*instance;
.B	char		*realm;
.B	CREDENTIALS	*c;
d53 9
a61 8
.B long krb_mk_priv(in,out,in_length,schedule,key,sender,receiver)
.B	u_char			*in;
.B	u_char			*out;
.B	u_long			in_length;
.B	C_Block			*key;
.B	Key_schedule		schedule;
.B	struct	sockaddr_in	*sender;
.B	struct	sockaddr_in	*receiver;
d63 9
a71 9
.B long	krb_rd_priv(in,in_length,schedule,key,sender,receiver,
.B						msg_data)
.B	u_char			*in;
.B	u_long			in_length;
.B	Key_schedule		schedule;
.B	C_Block			*key;
.B	struct	sockaddr_in	*sender;
.B	struct	sockaddr_in	*receiver;
.B	MSG_DAT			*msg_data;
d73 8
a80 7
.B long	krb_mk_safe(in,out,in_length,key,sender,receiver)
.B	u_char			*in;
.B	u_char			*out;
.B	u_long			in_length;
.B	C_Block			*key;
.B	struct	sockaddr_in	*sender;
.B	struct	sockaddr_in	*receiver;
d82 8
a89 7
.B long	krb_rd_safe(in,length,key,sender,receiver,msg_data)
.B	u_char			*in;
.B	u_long			length;
.B	C_Block			*key;
.B	struct	sockaddr_in	*sender;
.B	struct	sockaddr_in 	*receiver;
.B	MSG_DAT			*msg_data;
d91 5
a95 4
.B long	krb_mk_err(out,code,string)
.B	u_char			*out;
.B	long			code;
.B	char			*string;
d97 6
a102 6
.B long	krb_rd_err(in,length,code,msg_data)
.B	u_char			*in;
.B	u_long			length;
.B	long			code;
.B	MSG_DAT			*msg_data;
.PP
d104 1
d145 7
@


4.6
log
@Changed routine names.
@
text
@d8 1
a8 1
krb_rd_err, krb_ck_repl \- Authentication in an open network
@


4.5
log
@Got rid of spaces at ends of lines, etc.
@
text
@d1 1
a1 1
.TH KERBEROS 3  "April 3, 1986"
d6 3
a8 1
k_mk_req, k_rd_req, k_kntoln, set_serv_key, k_get_cred, k_mk_priv, k_rd_priv, k_mk_safe, k_rd_safe, k_mk_err, k_rd_err, check_replay \- Authentication in an open network
d17 1
a17 1
.B int k_mk_req(authent,service,instance,realm,checksum)
d24 1
a24 1
.B int k_rd_req(authent,service,instance,from_addr,ad,fn)
d32 1
a32 1
.B int k_kntoln(ad,lname)
d36 1
a36 1
.B int set_serv_key(key,cvt)
d40 1
a40 1
.B int k_get_cred(service,instance,realm,c)
d46 1
a46 1
.B long k_mk_priv(in,out,in_length,schedule,key,sender,receiver)
d55 1
a55 1
.B long	k_rd_priv(in,in_length,schedule,key,sender,receiver,
d65 1
a65 1
.B long	k_mk_safe(in,out,in_length,key,sender,receiver)
d73 1
a73 1
.B long	k_rd_safe(in,length,key,sender,receiver,msg_data)
d81 1
a81 1
.B long	k_mk_err(out,code,string)
d86 1
a86 1
.B long	k_rd_err(in,length,code,msg_data)
d104 1
a104 1
.I k_mk_req
d109 1
a109 1
.I k_mk_req
d118 1
a118 1
.I k_rd_req.
d124 1
a124 1
.I k_rd_req
d138 1
a138 1
.I k_rd_req
d141 1
a141 1
.I k_rd_req
d149 1
a149 1
If the last argument is the null string (""), k_rd_req will use the
d152 1
a152 1
.I set_serv_key
d155 1
a155 1
.I k_kntoln
d163 1
a163 1
.I set_serv_key
d171 1
a171 1
.I set_serv_key
d176 1
a176 1
.I set_serv_key.
d178 1
a178 1
.I k_rd_req.  set_serv_key
d182 1
a182 1
.I k_get_cred
d188 1
a188 1
.I k_get_cred
d194 1
a194 1
.I k_mk_priv
d218 1
a218 1
.I k_rd_priv
d220 1
a220 1
.I k_mk_priv
d254 1
a254 1
.I check_replay
d261 1
a261 1
.I check_replay
d264 1
a264 1
.I k_mk_safe
d289 1
a289 1
.I k_mk_priv
d295 1
a295 1
.I k_rd_safe
d297 1
a297 1
.I k_mk_safe
d333 1
a333 1
.I check_replay
d340 1
a340 1
.I check_replay
d343 1
a343 1
.I k_mk_err
d346 1
a346 1
.I k_mk_priv
d348 1
a348 1
.I k_mk_safe.
d357 1
a357 1
.I k_rd_err
d359 1
a359 1
.I k_mk_err
d394 2
a395 2
of a buffer for the data, and a length.  k_rd_req takes an argument of this
type containing the authenticator, and k_mk_req returns the
d401 2
a402 2
structure is filled in by k_rd_req.  It must be allocated before
calling k_rd_req, and a pointer to it is passed.  The structure is
d405 2
a406 2
structure is filled in by either k_rd_priv, k_rd_safe, or
k_rd_err.  It must be allocated before the call and a pointer to it
d425 1
a425 1
kintro(1), des_crypt(3)
d429 1
a429 1
.I k_rd_req, k_rd_priv, and k_rd_safe
d431 1
a431 1
.I check_replay
@


4.4
log
@Fixed some typo's, changed k_kntoln per Stan's new routine.
@
text
@d39 3
a41 3
.B	char		*service;       
.B	char		*instance;      
.B	char		*realm;         
d115 1
a115 1
where it will be read by 
d124 1
a124 1
.B KTEXT, 
d127 1
a127 1
.B AUTH_DAT 
d135 2
a136 2
then passed to 
.I k_rd_req 
d153 1
a153 1
.I k_kntoln 
d164 2
a165 1
initialization vector.  It is used to set the server's key which
d168 2
a169 2
If called with a non-zero second argument, 
.I set_serv_key 
d171 1
a171 1
key by encrypting it with a one-way function.  
d175 1
a175 1
The necessary keys will usually be obtained and set inside 
d194 1
a194 1
message from any arbitrary application data, pointed to by 
d199 1
a199 1
The private session key, pointed to by 
d205 1
a205 1
.I sender 
d211 1
a211 1
header are placed in the area pointed to by 
d217 1
a217 1
decrypts and authenticates a received 
d233 2
a234 2
.I krb.h .
The routine fills in the 
d238 1
a238 1
with the length of the 
d243 1
a243 1
.I time_5ms ,
d248 4
a251 4
to byte-swap application data; the Kerberos protocol fields are already taken 
care of).  The 
.I hash 
field returns a value useful as input to the 
d256 2
a257 2
and old messages cause errors, but it is up to the caller to 
check the time sequence of messages, and to check against recently replayed 
d264 2
a265 2
application data, 
pointed to by 
d270 3
a272 3
The private session key, pointed to by 
.I key
is used to seed the 
d275 1
a275 1
.I sender 
d281 1
a281 1
header are placed in the area pointed to by 
d286 2
a287 2
 provided by
.I k_mk_priv 
d294 1
a294 1
authenticates a received 
d309 1
a309 1
The routine fills in these 
d311 2
a312 1
fields -- the
d316 1
a316 1
with the length of the 
d319 3
a321 1
.I time_sec and time_5ms,
d325 6
a330 5
the sender.  (The application must still determine if it is appropriate
to byte-swap application data; the Kerberos protocol fields are already taken 
care of).  The 
.I hash 
field returns a value useful as input to the 
d335 2
a336 2
and old messages cause errors, but the caller is responsible to 
check the time sequence of messages, and check against recently replayed
d343 1
a343 1
with 
d346 1
a346 1
.I k_mk_safe .
d356 1
a356 1
unpacks a received 
d371 1
a371 1
The routine fills in these 
d373 1
a373 1
fields: the 
d377 1
a377 1
with the length of the 
d383 1
a383 1
to byte-swap application data; the Kerberos protocol fields are already taken 
d398 1
a398 1
.I AUTH_DAT 
d401 1
a401 1
filled in with data obtained from Kerberos.  
d406 1
a406 1
filled in with data obtained from kerberos.  
d426 1
a426 1
The caller of 
@


4.3
log
@Changed routine names.
@
text
@d109 3
a111 1
authenticator.  The authenticator is built in authent and is accessible
d117 1
a117 1
Unless an attacker posesses the session key contained in the ticket, he
d142 4
a145 2
authentication failed, a non-zero value is returned indicating the
particular problem encountered.  See krb.h for the list of error codes.
d148 1
a148 1
file /etc/srvtab to find it's keys.  If the last argument is NULL, it
d154 2
a155 2
converts an authentication name to a local name.  It takes a structure
of type AUTH_DAT and uses the name instance to looks in the file
d158 2
a159 2
or other parameters.  It is not an integral part of kerberos, but is
instead provided to support the use of kerberos in existing utilities.
d176 1
a176 1
is provided for those application that would prefer to avoid placing the
d195 3
a197 2
and of length in bytes
.I in_length. 
d232 2
a233 2
.I krb.h
 . The routine fills in the 
d240 3
a242 1
.I time_sec and time_5ms,
d255 2
a256 2
and old messages cause errors, but the caller is responsible to 
check the time sequence of messages, and check against recently replayed 
d259 1
a259 1
 if so desired.
d266 3
a268 2
and of length in bytes
.I in_length. 
d284 2
a285 2
The authentication provided by this routine is not as strong as as provided
by
d339 3
a341 1
.I k_mk_priv or k_mk_safe.
d359 2
a360 2
is a pointer to a value to be filled in with the application provided error
value.
d368 1
a368 1
fields -- the 
d374 1
a374 1
field.
d387 2
a388 2
of room for the data, and a length.  k_rd_req takes an argument of this
type contianing the authenticator, and k_mk_req returns the
d396 1
a396 1
filled in with data obtained from kerberos.  
d416 1
a416 1
/tmp/tkt###
d418 1
a418 3
srvtab
.br
aname
a420 4
.I k_kntoln
currently just returns the name passed to it.  It does not bother
looking in /etc/anames.
.PP
@


4.2
log
@Changed "retrieve" to "get_credentials" (bug pointed
out by Jim Bloom).
@
text
@d6 1
a6 1
mk_ap_req, rd_ap_req, antoln, set_serv_key, get_credentials, mk_private_msg, rd_private_msg, mk_safe_msg, rd_safe_msg, mk_appl_err_msg, rd_appl_err_msg, check_replay \- Authentication in an open network
d15 1
a15 1
.B int mk_ap_req(authent,service,instance,realm,checksum)
d22 1
a22 1
.B int rd_ap_req(authent,service,instance,from_addr,ad,fn)
d30 1
a30 1
.B int antoln(ad,lname)
d38 1
a38 1
.B int get_credentials(service,instance,realm,c)
d44 1
a44 1
.B long mk_private_msg(in,out,in_length,schedule,key,sender,receiver)
d53 1
a53 1
.B long	rd_private_msg(in,in_length,schedule,key,sender,receiver,
d63 1
a63 1
.B long	mk_safe_msg(in,out,in_length,key,sender,receiver)
d71 1
a71 1
.B long	rd_safe_msg(in,length,key,sender,receiver,msg_data)
d79 1
a79 1
.B long	mk_appl_err_msg(out,code,string)
d84 1
a84 1
.B long	rd_appl_err_msg(in,length,code,msg_data)
d102 1
a102 1
.I mk_ap_req
d107 1
a107 1
.I mk_ap_req
d114 1
a114 1
.I rd_ap_req.
d120 1
a120 1
.I rd_ap_req
d134 1
a134 1
.I rd_ap_req 
d137 1
a137 1
.I rd_ap_req
d143 1
a143 1
If the last argument is the null string (""), rd_ap_req will use the
d149 1
a149 1
.I antoln 
d171 1
a171 1
.I rd_ap_req.  set_serv_key
d175 1
a175 1
.I get_credentials
d181 1
a181 1
.I get_credentials
d187 1
a187 1
.I mk_private_msg
d210 1
a210 1
.I rd_private_msg
d212 1
a212 1
.I mk_private_msg
d254 1
a254 1
.I mk_safe_msg
d278 1
a278 1
.I mk_private_msg 
d284 1
a284 1
.I rd_safe_msg
d286 1
a286 1
.I mk_safe_msg
d328 1
a328 1
.I mk_appl_err_msg
d331 1
a331 1
.I mk_private_msg or mk_safe_msg.
d340 1
a340 1
.I rd_appl_err_msg
d342 1
a342 1
.I mk_appl_err_msg
d377 2
a378 2
of room for the data, and a length.  rd_ap_req takes an argument of this
type contianing the authenticator, and mk_ap_req returns the
d384 2
a385 2
structure is filled in by rd_ap_req.  It must be allocated before
calling rd_ap_req, and a pointer to it is passed.  The structure is
d388 2
a389 2
structure is filled in by either rd_private_msg, rd_safe_msg, or
rd_appl_err_msg.  It must be allocated before the call and a pointer to it
d413 1
a413 1
.I antoln
d418 1
a418 1
.I rd_ap_req, rd_private_msg, and rd_safe_msg
@


4.1
log
@No change; starting version 4.
@
text
@d6 1
a6 1
mk_ap_req, rd_ap_req, antoln, set_serv_key, retrieve, mk_private_msg, rd_private_msg, mk_safe_msg, rd_safe_msg, mk_appl_err_msg, rd_appl_err_msg, check_replay \- Authentication in an open network
d38 1
a38 1
.B int retrieve(svc,inst,rlm,sess,life,kvno,tkt,iss_dt,pname,pinst)
d42 1
a42 7
.B	C_Block		session;
.B	int		*lifetime;      
.B	int		*kvno;          
.B	KTEXT		ticket;         
.B	long		*issue_date;    
.B	char		*pname;		
.B	char		*pinst;      
d174 12
@


1.4
log
@fixed NAME section to conform to standard
@
text
@@


1.3
log
@Change arguments to antoln.
@
text
@d6 1
a6 4
.B mk_ap_req, rd_ap_req, antoln, set_serv_key, retrieve
.B mk_private_msg, rd_private_msg, mk_safe_msg, rd_safe_msg
.B mk_appl_err_msg, rd_appl_err_msg, check_replay
.B \- Authentication in an open network
@


1.2
log
@Change "FILES", reorder some text, and fix a few typos.
@
text
@d8 1
d16 2
d33 2
a34 4
.B int antoln(name,inst,realm,lname)
.B	char		*name;
.B	char		*inst;
.B	char		*realm;
d62 2
a63 2
.B long	rd_private_msg(in,out,in_length,schedule,key,sender,receiver,
.B						app_length,time_sec,time_5ms)
a64 1
.B	u_char			**out;
d70 1
a70 3
.B	u_long			*app_length;
.B	long			*time_sec;
.B	u_char			*time_5ms;
d80 1
a80 2
.B long	rd_safe_msg(in,out,length,key,sender,receiver,app_length,
.B				   time_sec,time_5ms)
a81 1
.B	u_char			**out;
d86 1
a86 3
.B	u_long			*app_length;
.B	long			*time_sec;
.B	u_char			*time_5ms;
d88 11
d107 4
d159 6
a164 6
converts an authentication name to a local name.  It takes a name, an
instance and a realm, and looks in the file /etc/aname to find the
corresponding local name.  The local name is returned and can be used by
an application to change uids, directories, or other parameters.  It is
not an integral part of kerberos, but is instead provided to support the
use of kerberos in existing utilities.
d220 12
a231 5
.I out
must be passed as a pointer to a pointer to the decrypted application
data, and if the message is valid, will have the value of a pointer
to the data written into it.
The timestamp in the message is written into the variables pointed to by
d233 11
a243 2
and the application data length is written into the variable pointed to by
.I app_length.
d245 5
a249 2
and replayed messages cause errors, but the caller is responsible to 
check the time sequence of messages, if so desired.
d252 1
a252 1
creates an authenticated, but not-encrypted message from any arbitrary
d280 1
d292 14
a305 5
.I out
must be passed as a pointer to a pointer to the application
data, and if the message is valid, will have the value of a pointer
to the data written into it.
The timestamp in the message is written into the variables pointed to by
d307 17
a323 6
and the application data length is written into the variable pointed to by
.I app_length.
The routine returns zero if ok, or a Kerberos error code.
Modified messages
and replayed messages cause errors, but the caller is responsible to 
check the time sequence, if so desired.
d325 46
d384 5
d414 1
d416 3
a418 1
currently do not check for all replay attempts.
@


1.1
log
@Initial revision
@
text
@d7 1
d15 1
a15 1
.B int mk_ap_req(authent.service,instance,realm,checksum)
d41 8
a48 8
.B	char            *service;       
.B	char            *instance;      
.B	char            *realm;         
.B	C_Block         session;
.B	int             *lifetime;      
.B	int             *kvno;          
.B	KTEXT           ticket;         
.B	long            *issue_date;    
d50 1
a50 1
.B	char            *pinst;      
d52 42
d105 2
a106 1
used.  It also takes an optional checksum.  It is up to the application to decide how to generate the checksum.  
d109 2
a110 2
authenticator.  The authenticator is built in authent, and this is
accessible to the calling procedure.  
d143 3
a145 3
If the last argument is 0, rd_ap_req will use the file /etc/srvtab to
find it's keys.  If the last argument is ALREADY_SET, it will assume
that the key has been set by
d147 1
a147 1
and will not bother looking it up.
d175 101
d280 1
a280 1
type contiaing the authenticator, and mk_ap_req teturns the
d295 4
d311 1
a311 1
currwntly just returns the name passed to it.  It does not bother
d314 2
a315 2
.I rd_ap_req
cirrently does nto check for all replay attempts.
@
