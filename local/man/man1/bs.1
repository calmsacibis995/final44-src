.TH BS 1 
.SH NAME
bs \- a compiler/interpreter for modest-sized programs
.SH SYNOPSIS
.B bs
[ file [ arg
.B \|.\|.\|.\|
] ]
.SH DESCRIPTION
.I Bs
is a remote descendant of Basic and Snobol4
with a little C language thrown in.
.I Bs
is designed for programming tasks where program development time
is as important as the resulting speed of execution.
Formalities of data declaration and file/process manipulation
are minimized.
Line-at-a-time debugging, the
.I trace
and
.I dump
statements, and useful run-time error messages
all simplify program testing.
Furthermore, incomplete programs can be debugged;
.I inner
functions can be tested before
.I outer
functions have been written and vice versa.
.PP
If the command line
.I file
argument is provided,
the file is used for input before the console
is read.
By default, statements read from the file argument are
compiled for later execution.
Likewise, statements entered from the console are normally
executed immediately
(see
.I compile
and
.I execute
below).
The result of an immediate expression statement is printed.
.PP
.I Bs
programs are made up of input lines.
If the last character on a line is the `\\', the line is continued.
.I Bs
accepts lines of the following form:
.IP "" 7n
statement
.br
label  statement
.PP
A label is a
.I name
(see below)
followed by a colon.
A label and a variable can have the same name.
.PP
A
.I bs
statement is either an
expression
or a keyword followed by zero or more expressions.
Some keywords
.I "(clear, compile, !, execute,"
and
.I run)\|
are always executed as they are compiled.
.PP
.B Statement Syntax:
.TP
expression
The expression is executed for its side
effects (value, assignment or function call).
The details of expressions follow the description of
statement types below.
.TP
.B break
.I Break
exits from the inner-most
.I for/while
loop.
.TP
.B clear
Clears the symbol table and compiled statements.
.I Clear
is executed immediately.
.HP 
.B compile
[ expression ]
.br
Succeeding statements are compiled
(overrides the immediate execution default).
The optional expression is evaluated and used as a file
name for further input.
A
.I clear
is associated with this latter case.
.I Compile
is executed immediately.
.TP
.B continue
.I Continue
transfers to the loop-continuation
of the current
.I for/while
loop.
.TP
.B dump
The
name and current value of every
non-local
variable is printed.
After an error or interrupt, the number of the last
statement and (possibly) the user-function trace are displayed.
.HP 
.B exit
[ expression ]
.br
Return to system level.
The
expression
is returned as process status.
.TP
.B execute
Change to immediate execution mode
(an interrupt has a similar effect).
This statement does not cause stored statements to execute (see
.I run
below).
.ne 8
.HP 
.B for
name
.B =
expression expression statement
.br
.ns
.HP
.B for
name
.B =
expression expression
.br
.B \|.\|.\|.\|
.br
.ns
.TP
.B next
.HP
.B for
expression
.B ,
expression
.B ,
expression  statement
.br
.br
.ns
.HP
.B for
expression
.B ,
expression
.B ,
expression
.br
.B \|.\|.\|.\|
.br
.ns
.TP
.B next
The
.I for
statement
repetitively executes a
statement (first form)
or a group of statements (second form)
under control of a named variable.
The variable takes on the value of
the first expression,
then is incremented by one on each loop,
not to exceed the value of
the second expression.
The third and fourth forms require three expressions
separated by commas.
The first of these is the initialization, the second
is the test (true to continue), and the third is the
loop-continuation action (normally an incrementation).
.HP
.B fun
f(\|a\|[\|,
.BR .\|.\|. \|]\|)\|[\|v,
.BR .\|.\|. \|]
.br
.B  .\|.\|.
.br
.br
.ns
.TP
.B nuf
.I Fun
defines the function name, arguments, and local variables
for a user-written function.
Up to ten arguments and local variables are allowed.
Such names cannot be arrays, nor can they be I/O associated.
Function definitions may not be nested.
.TP
.B freturn
A way to signal the failure of a user-written function.
See the interrogation operator (`?') below.
If interrogation is not present,
.I freturn
merely returns zero.
When interrogation
.I is
active,
.I freturn
transfers to that expression
(possibly by-passing intermediate function returns).
.HP
.B goto
name
.br
Control is passed to the internally stored statement
with the matching label.
.HP
.B if
expression statement
.br
.br
.ns
.HP
.B if
expression
.br
.B \|.\|.\|.
.br
.ns
.HP
[
.B else
.br
.B \|.\|.\|.
]
.br
.ns
.TP
.B fi
The statement (first form)
or group of statements (second form)
is executed if the expression evaluates
to non-zero.
The strings "0" and "" (null) evaluate as zero.
In the second form,
an optional
.I else
allows for a group of statements to be
executed when the first group is not.
The only statement permitted on the same line with an
.I else
is an
.I if;
only other
.IR fi "\|'s can be on the same line with a"
.I fi.
.HP
.B return
[expression]
.br
The expression is evaluated and the result is passed
back as the value of a function call.
If no expression is given, zero is returned.
.HP
.B onintr
[ label ]
.br
The
.I onintr
command
provides program control of interrupts.
With a
.I label,
control will pass to the label given,
just as if a
.I goto
had been executed at the time
.I onintr
was executed.
The effect of the statement is cleared after each interrupt.
Without a
.I label,
an interrupt will cause
.I bs
to terminate.
.TP
.B run
The random number generator is reset.
Control is passed to the first internal
statement.
If the
.I run
statement is contained in a file, it should be the
last statement.
.TP
.B stop
Execution of internal statements is stopped.
.I Bs
reverts to immediate mode.
.HP
.B trace
[ expression ]
.br
The
.I trace
statement controls function tracing.
If the expression is null (or evaluates to zero), tracing is turned off.
Otherwise,
a record of user-function calls/returns will be printed.
Each
.I return
decrements the
.I trace
expression value.
.HP
.B while
expression  statement
.br
.br
.ns
.HP
.B while
expression
.br
.B \|.\|.\|.
.br
.br
.ns
.TP
.B next
.I While 
is similar to
.I for
except that only the conditional expression
for loop-continuation is given.
.HP
.B !
shell command
.br
An immediate escape to the Shell.
.TP
.B # ...
This is a comment statement and is ignored.
.PP
.B Expression Syntax:
.TP
name
A name is used to specify a variable.
Names are composed of a letter
(upper or lower case)
optionally
followed by letters and digits.
Only the first six characters of a name are significant.
Except for names declared in
.I fun
statements,
all names are global to the program.
Names can take on numeric
(double float) values, string values,
or can be associated with input/output
(see the builtin function
.I open(\|)
below).
.HP
name
.B (
[expression [
.B ,
expression] ... ]
.B )
.br
Functions
are called by a name followed by the arguments
in parentheses separated by commas.
Except for builtin functions (listed below),
the name must
be defined with a
.I fun
statement.
.HP
name
.B [
expression
[
.B ,
expression
] ...
.B ]
.br
Each expression is truncated to an integer
and used as a specifier for the name.
The resulting array reference is syntactically identical to a name.
.B a[1,2]
is the same as
.B a[1][2].
The truncated expressions should be restricted to 
values between 0 and 32767.
.TP
number
A number is used to represent a constant value.
A number is written in Fortran style,
and contains digits, an optional decimal point,
and possibly a scale factor consisting
of an
.B e
followed by a possibly signed exponent.
.TP
string
Character strings are delimited by " characters.
The `\\' escape character allows the double quote (\\"),
newline (\\n), carriage return (\\r), backspace (\\b), and tab (\\t)
characters
to appear in a string.
Otherwise, `\\' stands for itself.
.HP
.B (
expression
.B )
.br
Parentheses are used to alter normal order of evaluation.
.HP
.BR ( " expression" ",\fR expression [\fB,\fR expression\fB\|.\|.\|.\fR\|] \fB)"
.BR [ " expression " "]"
.br
The bracketed expression is used as a subscript to select a
comma-separated expression from the parenthesized list.
List elements are numbered from the left, starting at zero.
The expression
.IP
	( False, True )[ a == b ]
.IP
has the value
.I True
if the comparison is true.
.HP
.B ?
expression
.br
The interrogation operator
tests for the success of the expression rather than its value.
At the moment, it is useful for testing
end-of-file
(see examples in the
.I "Programming Tips"
section below),
the result of the
.I eval
builtin function,
and for checking the return from user-written functions
(see
.IR freturn \|).
An interrogation ``trap'' (end-of-file,
etc.)
causes an immediate transfer to the most recent
interrogation, possibly skipping assignment statements or intervening
function levels.
.TP
\- expression
The result is the negation of the expression.
.TP
++ name
Increments the value of the variable (or array reference).
The result is the new value.
.TP
\-\- name
Decrements the value of the variable.  The result is the new value.
.HP
.B !
expression
.br
The logical negation of the expression.
Watch out for the shell escape command.
.HP
expression
.I operator
expression
.br
Common functions of two arguments are abbreviated
by the two arguments separated by an operator denoting the function.
Except for the assignment,
concatenation, and relational operators, both operands are converted to numeric form
before the function is applied.
.PP
.B Binary Operators
(in increasing precedence):
.TP 7n
=
=
is the assignment operator.
The left operand must be a name or an array element.
The result is the right operand.
Assignment binds right to left,
all other operators bind left to right.
.TP
.B \(ul
.B \(ul
(underscore)
is the concatenation operator.
.TP
&  |
&
(logical and)
has result zero if either of its arguments are zero.
It has result one if both its arguments are non-zero.
|
(logical or)
has result zero if both of its arguments are zero.
It has result one if either of its arguments are non-zero.
Both operators treat a null string as a zero.
.TP
<  <=  >  >=  ==  !=
The relational operators
(< less than, <= less than or equal,
> greater than,
>= greater than or equal,
== equal to,
!= not equal to)
return one if their arguments are in the specified
relation.
They return zero otherwise.
Relational operators at the same level extend as follows:
.I a>b>c
is the same as
.I "a>b & b>c."
A string comparison is made if both operands are strings.
.TP
+ \-
Add and subtract.
.TP
* / %
Multiply, divide, and remainder.
.TP
\s+2^\s-2
Exponentiation.
.PP
.ne 4
.B Builtin Functions:
.PP
.ce
.I "Dealing with arguments"
.TP
.B arg(i)
is the value of the
.IR i "-th"
actual parameter on the current level
of function call.
At level zero,
.I arg
returns the
.IR i -th
command argument
(\fIarg(0)\fR returns "bs").
.TP
.B narg(\|)
returns the number of arguments passed.
At level zero, the command argument count is returned.
.IP
.ce
.I Mathematical
.TP
.B abs(x)
is the absolute value of
.IR x .
.TP
.B atan(x)
is the arctangent of
.IR x .
Its value
is between \-\(*p/2 and \(*p/2.
.TP
.B ceil(x)
returns
the smallest integer not less than
.I x.
.TP
.B cos(x)
is the cosine of
.IR x ""
(radians).
.TP
.B exp(x)
is the exponential function of
.IR x .
.TP
.B floor(x)
returns
the largest integer not greater than
.I x.
.TP
.B log(x)
is the natural logarithm of
.IR x .
.TP
.B rand(\|)
is a uniformly distributed random
number between zero and one.
.TP
.B sin(x)
is the sine of
.IR x ""
(radians).
.TP
.B sqrt(x)
is the square root of
.IR x .
.IP
.ce
.I "String operations"
.TP
.B size(s)
the size (length in bytes) of
.I s
is returned.
.TP
.B format(f, a)
returns the formatted value of
.I a.
.I F
is assumed to be a format specification in the style of
.IR  printf (3).
Only "%...f", "%...e", "%...s" conversions should be used.
.TP
.B index(x, y)
returns the number of the first position in
.I x
that any of the characters from
.I y
matches.
No match yields zero.
.TP
.B trans(s, f, t)
Translates characters of the source
.I s
from
matching characters in
.I f
to a character in the same position in
.I t.
Source characters that do not appear in
.I f
are copied to the result.
If the string
.I f
is longer than
.I t,
source characters that match in the excess portion of
.I f
do not appear in the result.
.TP
.B substr(s, start, width)
returns the sub-string of
.I s
defined by the
.I start\|\c
ing position and
.I width.
.TP
.B match(string, pattern)
.br
.ns
.TP
.B mstring(n)
The
.I pattern
is similar the the regular expression syntax of the
.IR  ed (1)
command.
The characters `\fB.\fR', `[', `]', `^' (inside brackets), `*' and `$' are special.
The
.I mstring
function returns the
.IR n \|-th,
.RI 1<= n <=10,
that occurred between pairs of the pattern symbols `\\(' and `\\)'
for the most recent call to
.I match.
To succeed, patterns must match the beginning of the string
(as if all patterns began with `^').
The function
returns the number of characters matched.
For example:
.IP
 	match("a123ab123", ".*\\([a\-z]\\)") == 6
 	mstring(1) == "b"
.IP
.ce
.I "File handling"
.TP
.B open(name, file, function)
.br
.ns
.TP
.B close(name)
The
.I name
argument must be a
.I bs
variable name (passed as a string).
For the
.I open,
the
.I file
argument
may be
.BR 1) " a 0 (zero), 1, or 2 representing standard input, output,"
or error output, respectively,
.BR 2) " a string representing a file name,"
or
.BR 3) ""
a string beginning with an "!" representing a command to be executed
(via
.I "sh \-c\|\c"
).
The
.I function
argument
must be either
"r" (read),
"w" (write),
"W" (write without newline),
or "a" (append).
After a
.I close,
the
.I name
reverts to being an ordinary variable.
The initial associations are:
.IP
 	open("get", 0, "r")
.br
 	open("put", 1, "w")
.br
 	open("puterr", 2, "w")
.IP
Examples are given in the following section.
.TP
.B access(s, m)
executes
.IR access (2).
.TP
.B ftype(s)
returns a single character file type indication:
"f" for regular file, "d" for directory, "b" for block special,
or "c" for character special.
.IP
.ce
.I "Odds and ends"
.TP
.B eval(s)
the string argument is evaluated as a
.I bs
expression.
The function is handy for converting numeric strings to
numeric internal form.
.I Expr
can also be used as a crude form of indirection as in
.IP
 	name = "xyz"
 	eval("++"\(ul name)
.IP
which increments the variable
.I xyz.
In addition,
.I eval
preceded by the interrogation operator permits
the user to control
.I bs
error conditions.
For example,
.IP
 	?eval("open(\\"X\\", \\"XXX\\", \\"r\\")")
.IP
returns the value zero if there is no file named "XXX"
(instead of halting the user's program).
The following executes a
.I goto
to the label
.I L
(if it exists).
.IP
 	label="L"
 	if !(?eval("goto "\(ul label)) puterr = "no label"
.TP
.B last(\|)
in immediate mode,
.I last
returns the most recently computed value.
.SH "PROGRAMMING TIPS"
.IP
Using
.I bs
as a calculator:
.IP
.nf
	% bs
	#  distance (inches) light travels in a nanosecond
	186000 * 5280 * 12 / 1e9
	\fB11.78496\fR
.B  	.\|.\|.
	#  Compound interest (6% for 5 years on $1000)
	int = .06 / 4
	bal = 1000
	for i = 1 5*4  bal = bal + bal*int
	bal
	\fB1346.855007\fR
.B 	.\|.\|.
	exit
.IP
The outline of a typical
.IR bs ""
program:
.IP
	#  Initialize things:
	var1 = 1
	open("read", "infile", "r")
.B 	.\|.\|.
	#  Compute:
	while  ?(str = read)
.B 	.\|.\|.
	next
	#  Clean up:
	close("read")
.B 	.\|.\|.
	#  Last statement executed (exit or stop):
	exit
	#  Last input line:
	run
.IP
.fi
Input/Output examples:
.IP
.nf
1)	#    Copy "oldfile" to "newfile".
	open("read", "oldfile", "r")
	open("write", "newfile", "w")
.B 	.\|.\|.
	while ?(write = read)  
.B 	.\|.\|.
	#    Close "read" and "write"
	close("read")
	close("write")
.IP
2)	#    Pipe between commands
	open("ls", "!ls *", "r")
	open("pr", "!pr \-2 \-h \'List\'", "w")
	while ?(pr = ls)
.B 	.\|.\|.
	#    Be sure to close (wait for) these
	close("ls")
	close("pr")
.fi
.SH FILES
/bin/sh to implement !
.SH "SEE ALSO"
bas(1)
.SH BUGS
There are builtin design limits.
.I Bs
source programs are restricted to fewer than 250 lines and fewer than 250
variables (the
.I name
of an array counts as a variable, as does each dimension and each
referenced element).
.PP
All names (labels, variables, functions, statement keywords)
are internally truncated to six characters.
.PP
Exponentiation is done with
.I log
and
.IR exp ,
so may not be exact where expected.
.PP
There is no checking for overflows or argument range.
