.TH CTROLL 3
.SH NAME
ctroll -- C-to-troll interface routines
.SH SYNOPSIS
.B cc
[ flags ]  files
.B '-lctroll'
.br
.B f77
[ flags ]  files
.B '-lctroll'
.SH DESCRIPTION
.nh
These routines provide an interface
to troll from  C or Fortran 77 programs. 
Troll runs as a separate process and
all communication is performed through pipes, using a 
message passing protocol.
All messages and values are sent as null terminated ASCII strings,
which are then converted by Troll.  Arguments to each of these routines,
unless otherwise indicated,
are pointers of type char or literal values enclosed in double quotes.
.LP
.nh
The routine
.I initroll() 
forks a troll process and establishes the pipes between the the user's C
program and troll.
Hence, it must be called first.
The routine
.I stop_troll()
is called last and terminates the troll process.
The routine 
.I opendb
.I (dbname)
provides access to a given database, where dbname is a valid Unix path name.
.LP
.nh
The routine
.I troll_msg(message)
is the basic mechanism by which commands are sent to and output
received from troll.  The argument to the routine should be a
valid troll command.  The routine returns a string which
is the output from troll.  The output may be requested output
or a Troll error message, which may be checked with the routine
.I troll_error(msg),
where
.I msg
is the output from 
.I troll_msg.
.LP
.nh
The routine
.I slice(tuple,field)
is used to extract a particular field from the tuple.
The argument is a pointer to the tuple and the routine
returns a pointer to the requested field.  Single quotes,
leading, and trailing blanks are stripped from the output.
.LP
.nh
The routine
.I qslice(tuple,field)
behaves exactly as
.I slice
except that single quotes are left on strings.  This feature
is useful when the output from Troll is to be saved in a "C"
variable which will later be sent to Troll again.
.LP
.nh
A similar routine to slice() is
.I scalar_val(relation,scalar,field)
which returns the scalar value.  The Troll "display" command
shows the scalar attribute values.  The relation must already
have been imported to Troll for this routine to work correctly.
.LP
.nh
The routine
.I troll_attr(display)
extracts attribute names and domain definitions for a
relation.  The number of attributes of the relation is returned.
.LP
.nh
The routine 
.I to_troll(script_name,nparam,paramlist)
executes troll scripts located
in a troll script library directory as established by a
ENVIRONMENT file or a troll
.B library
statement.
The troll script is
.I script_name
and
.I nparam
is an integer, denoting the
number of paramaters which follow (from 0 to 10). 
It is followed by the actual parameters to be used
in the script, in positional order.
The 
.I to_troll
routine allows C pointer variables to be used in the
.I paramlist.
.SH "SEE ALSO"
Troll/USE Reference Manual
.br
A Troll/USE Tutorial
.br
A RAPID/USE Tutorial
.br
troll (1), rapid (1)
.SH AUTHORS
Martin Kersten, David Shewmake, Anthony Wasserman
.SH FUNCTIONS
.ta 0.2i,3.2i
.nf










	initroll()	starts the troll process and opens pipes
	opendb(dbname)	opens the named database
	slice(tuple,field)	extracts the value of a field from a tuple
	qslice(tuple,field)	like slice, but response enclosed in quotes
	scalar_val(relation,attr,index)	returns string corresponding to
		the index scalar value of the given attribute in relation
	stop_troll()	stops the troll process and closes pipes
	to_troll(script,nparam,params)calls a troll script and passes parameters
	troll_attr(display)	returns information on troll attributes and 
		their types
	troll_error(msg)	checks for error, returns 0 if no error
		and index into an error table otherwise
	troll_msg(message)	sends message to troll and returns response
