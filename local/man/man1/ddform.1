.TH DDFORM DDBS 
.SH NAME
ddform  \*- print the data in a DDBS data file in an arbitrary
format according to the contents of the file.
.SH SYNOPSIS
ddform formfile [ddbsfile] [key=substitution] 
.SH DESCRIPTION
Ddform prints the data in a ddbs file in an arbitrary format
according to the contents of the form file.  One copy of the form 
file is printed for each item in the ddbs file.  If no ddbs file 
is specified then the standard input is used.  The output is an 
exact copy (possibly many exact copies) of the form file with the data
from the ddbs file substituted for any keywords which may
appear.  
.PP
Keywords are a series of characters enclosed in
curly brackets (`{}').  `{name}' is an example of a keyword.
When ddform is run, `{name}' will not show up in the output.  
In its place will be the information associated with the keyword `name' 
in the ddbs file.
.PP
`{name??Name: }' is an example of a `conditional' keyword.
`{name:Name: }' will also not show up in the output.  
If no information is associated with the keyword `name' in the
ddbs file, nothing will be output.  However, if information is
contained in the `name' field in the ddbs file, that information
will be replaced in the output by the characters ``Name:  ''.  However,
for the contents of the name field to be output, the simple
keyword for the name field must be put into the form file as well.
Thus, the above example would appear in the form file as:
`{name:Name:  }{name}'.  Conditional keywords allow the user
to specify changes, such as in punctuation, depending on the
existence of data in a given field.
.PP
To generalize, then, upon encountering a keyword of the form
`{aaaa??bbbb}', ddform prints `bbbb' if `aaaa' occurs in the
item from the ddbs file.  If `aaaa' does not occur in the
item from the ddbs file then nothing is printed.
.PP
Another type of keyword accomplishes an `insert on
change' action.  It takes the form {key%%string}. If the
data corresponding to `key' has changed since the last item
then `string' will be substituted.  Otherwise nothing will
be substituted.
.PP
Two other types of keywords are `skip positive' {key+?N}
and `skip negative' {key+!N} where N stands for a given number.
These conditionals are used to skip a given number of lines in the 
form file depending on the contents of the given key.  For example, if
data does not exist in a given key, a clause (of N lines)
in the form letter may be omitted from output.
.PP
Curly brackets (`{' and `}') may be used as ordinary
characters by preceding them with a backslash (`\\').  Use
`\\\\' to print a backslash.
.PP
Ddform may be used as a filter, in a pipeline, or as a
preprocessor for a text processor such as nroff or troff.
Ddform is probably most valuable in this last application.
For example, ddform may be used to print form letters by giving
the following command:
.nf

     ddform formletter addresses | nroff

.fi
.SH "COMMAND LINE DEFINITIONS (global substitutions)"
You may OVERRIDE the contents of the data file or add to it
by defining a keyword on the command line as follows:

     ddform formletter addresses date=Today | nroff

In this last example {date} will be replaced by ``Today''
EVERYWHERE, regardless of what the data file might have to
say.

.SH "SUMMARY OF KEY TYPES"

.nf
simple:                    {key}
     Substitute.

conditional positive:      {key??string}
     Substitute string if key is defined.

conditional negative:      {key!!string}
     Substitute string if key is not defined.

changing:                  {key%%string}
     Substitute string if key has changed.

skip positive              {key+?N}
	  Skip the next N lines of the form file if key is defined.

skip negative              {key+!N}
	  Skip the next N lines of the form file if key is not defined.
.SH AUTHOR
Len Edmondson

.SH "SEE ALSO"
ddpr (DDBS), ddwc (DDBS), ddgrep (DDBS), ddsort (DDBS)
