.TH DDGREP DDBS 
.SH NAME
ddgrep \*- search a file for a pattern in a DDBS data file
.SH SYNOPSIS
ddgrep pattern [ file ] ...
.SH DESCRIPTION
.I Ddgrep
searches ddbs data files
for items containing the
pattern.
The pattern may contain a colon (`:'), and be of the form
.br
	key:pattern
.br
in which case \fIddgrep\fR will search for the `pattern' ONLY in the field
named `key'.
The pattern may contain an equals sigh (`='), and be of the form
.br
	key=pattern
.br
In this case, \fIddgrep\fR will print only those items having this data field
EXACTLY equal to the pattern.
The special form:
.br
	key::
.br
will print only those items from the input in which key is defined.
(e.g. has a non-blank data field).
It outputs only those items containing the pattern,
and so acts as a filter.
If no file name is given, the standard input is used instead.
It is assumed the input files are in DDBS 
(Little Data Base)
format.
.SH OPTIONS

-a
.in +5
After.
.br
Find all the items after a cutoff date.
\fIDdgrep\fR will recognize that the specified field is a date.
If the `-a' option is used then \fIddgrep\fR will output only those
items whose date field falls after the search pattern chronologically.
`-a' must be used in conjunction with a search pattern containing
an `=' or `:'. (Otherwise it would not know which field to use
for date comparison.)
The format of the date is extremely flexible.  Some possibilites include:
.in +5
.nf
``2-3-79'',
``2-Aug-85'',
``2/4'',
``1976'',
august,
``2-Sept.'',
``summer '69'', 
.fi
.in -5

.in -5 

-b
.in +5
Before.
.br
Very similar to `-a'.
If the `-b' option is used then \fIddgrep\fR will output only those
items whose date field falls before the search pattern chronologically.
.in

-t
.in
Table assisted search.
.br
If the `-t' option is used, then \fIddgrep\fR will make, use, and update, if
appropriate, tables to assist in highly efficient searching.
Tables can only be used if you know exactly what
you are looking for, e.g. your search pattern must have an equals sign
(`=') in it.  The advantage of the `-t' mode of searching is that
it is enormously faster that just looking the whole file over one-by-one.
The first table-assisted \fIddgrep\fR after a file has been changed will
be very slow because the tables have to be built over again from
scratch.  \fIDdgrep\fR will take care of this for you.
Subsequent calls to \fIddgrep\fR with the same file and field will be
immensely faster.
.in

-v
.in
If the `-v' option is given, \fIddgrep\fR prints all those items from its
data file(s) which DON'T contain the pattern.
.in

.SH EXAMPLES
If you wanted to find all the items that had something to do with `peaches'
in the file `basket', you would type:
.sp
	ddgrep peach basket
.br

If you wanted to find all the items that has something to do with BOTH
`peaches' and `cream', you would do:
.sp
	ddgrep peach basket | ddgrep cream
.sp
If you wanted to find all the items in the file `basket' that had something
to do with EITHER `apples' OR `oranges' you would do:
.sp
	ddgrep apple basket; ddgrep orange basket
.sp
To search rapidly for all the apples in a very large basket:
.sp
	ddgrep fruit=apple -t basket
.sp
To find all the items prior to May 1977:
.br
(Note here `-b' stands for before)
.sp
	ddgrep -b date:May1977 file
.sp
.SH "SEE ALSO"
book (I),
checkin (DDBS),
checkout (DDBS),
ddmerge (DDBS),
ddsort (DDBS),
ddpr (DDBS),
ddwc (DDBS)
