.TH MOD2 1 "8 January 1984"
.SH NAME
mod2 \- Modula-2 compiler
.SH SYNOPSIS
.B mod2
[ option ] name ...
.SH DESCRIPTION
.I Mod2
is a Modula-2 compiler.
It compiles one or more Modula-2 program or implementation modules.
Definition modules are not compiled.
In the absence of options, it will compile all specified modules and link
them together into an executable file called
.I a.out.
.PP
Each program or implementation module must be in a separate file with a name
ending with ``.mod''.
Each definition module must be in a separate file called ``module.def'',
where ``module'' is the name of the module.
Object files ending with ``.o'' compiled with
.I mod2
or some
other compiler may be specified.
.PP
File name arguments ending with ``.pcd'' and ``.s'' are assumed to be pcode
and assembly language files, respectively,
and are translated and assembled into object files.
These files are created in the working directory during compilation, and
are removed if there are no errors.
.PP
The following options are available:
.TP 6
.B \-c
Create object files but do not link them together.
.TP 6
.B \-g
Generate additional symbol table information for the debugger
.IR dbx (1).
.TP 6
.BR \-o " name"
Create an executable file called ``name'' instead of the default ``a.out''.
.TP 6
.B \-pg
Set up object files for profiling by
.IR  gprof (1).
.TP 6
.B \-s
Use standard conventions for reserved word case (See Extensions, below).
.TP 6
.B \-u
Convert all identifiers and reserved words to upper case (i.e., ignore
the case of identifiers and reserved words on input).
.TP 6
.B \-C
Generate runtime checks for illegal pointers, subrange and index bounds,
and variant record tags.
.TP 6
.B \-O
Perform code optimizations.
.TP 6
.B \-P
Stop after generating pcode in a file ending with ``.pcd''.
.TP 6
.B \-S
Stop after generating assembly language in a file ending with ``.s''.
.SH "LIBRARY MODULES"
By default, an import of a global module will cause the compiler to look first
in the working directory and then in the standard library directory.
The standard library modules are automatically linked with the program.
.PP
The default may be overridden to specify other directories of definition modules
using the MODPATH environment variable.
MODPATH is set to a sequence of directory names separated by colons.
Those directories will be searched in the order specified to find any definition
module.
The corresponding object files or libraries are specified when linking.
The MODPATH environment variable may be set by the user
in .login or in .modpath in the working directory.
If the file ``.modpath'' exists in the working directory, the 
.B mod2
command will source it before compiling the program.
.PP
The following modules are provided by this implementation of Modula-2:
.TP
STORAGE
.br
Standard storage module, for compatibility with standard Modula-2.
.TP
io
.br
Pseudo-definition file to document built-in io module.
The io module provides formatted read and write similar to
.IR scanf (3)
and
.IR printf (3).
.TP
math
.br
Mathematical functions.
.TP
parameters
.br
Accesses parameters and environment variables.
.TP
strings
.br
Compares, assigns, and concatenates strings.
.TP
unix
.br
Defines some Unix system calls and C library routines.
.SH "DIFFERENCES AND EXTENSIONS"
This implementation of Modula-2 has compiled and run Wirth's Modula-2 compiler
(as modified by Cambridge University for the VAX) with only minor changes
to make that compiler more portable.
However, the definition of the language has been relaxed in some areas.
For the most part, these changes are upward compatible.
.PP
The following is an incomplete list of differences between this compiler and
Wirth's compiler:
.PP
Reserved words and standard identifiers are recognized in any case,
not just in upper case.
Thus, case variations of reserved words may not be used for identifiers.
This feature is disabled by the
.B -s
option.
.PP
A builtin module called
.I io
provides formatted input and output.
The
.I readf
and
.I writef
routines can accept any number of parameters, so long as their types
correspond properly with the format string.
.PP
No import of
.I allocate
or
.I deallocate
is required to use new and dispose if the standard memory allocation routines
are desired.
.PP
The sizes returned by
.I size
and
.I tsize
and expected by
.I allocate
and
.IR deallocate
are in units of bits.
.PP
The
.I system
module includes the type
.IR byte ,
which is analogous to
.IR word ,
as well as the constant
.IR bytesperword .
.PP
There is a standard type called
.I longreal
that stores a double precision real value.
A standard function longfloat converts cardinals, integers, or reals 
to longreal.
.PP
Additional standard procedures include
.TP
min(a,b)
Returns the smaller of two cardinal, integer, real, or longreal values.
.TP
max(a,b)
Returns the larger of two cardinal, integer, real, or longreal values.
.TP
assert(condition[,message])
Aborts the program (with the optional message)
if the condition is false.
.TP
number(a)
Returns the number of elements in the specified array.
.PP
Definition modules are not compiled.
.PP
Escape sequences may be placed in strings to sepecify non-printing characters.
E.g., \en, \et, \e0, \er, \ef, \eb, \e\e, \e', and \e" mean
linefeed, tab, null, carriage return, form feed, backspace, backslash,
single quote, and double quote, respectively.
A single (double) quote also may be put in a string delimited with
single (double) quotes by specifying two single (double) quotes.
.PP
The interface to Unix is through a module called
.I unix
rather than the
.I system
module.
The
.I unixcall
procedure is handled for compatibility with the Cambridge compiler,
but is not recommended.
.SH FILES
.ta 2.5i
file.mod	Program or implementation module
.br
file.def	Definition module
.br
~/file.pcd	Pcode (during compilation)
.br
~/file.s	Assembly code (during compilation)
.br
/usr/local/lib/mod/mod2.0	Modula-2 compiler front-end
.br
/usr/local/lib/mod/mod2.1	Modula-2 compiler back-end
.br
/usr/local/lib/mod/mod2.2	Separate compilation checker
.br
/usr/local/lib/mod/*.def	Default library definition modules
.br
/usr/local/lib/mod/modlib	Default library
.SH "SEE ALSO"
N. Wirth,
.IR "Programming in Modula-2" ,
Springer-Verlag, New York, 1982.
.SH DIAGNOSTICS
All error messages suppress subsequent compilation phases.
Error messages ending with a question mark are internal errors, and
probably represent compiler bugs.
The compiler is run with runtime checks enabled, and may produce core dumps.
Report problems to the author.
.SH AUTHORS
Michael L. Powell
.br
Western Research Laboratory
.br
Digital Equipment Corporation
.br
4410 El Camino Real
.br
Los Altos, CA  94022
.br
Mail: powell@berkeley or ucbvax!decwrl!powell
.PP
Software and documentation is
Copyright \(co 1984, Digitial Equipment Corporation,
Maynard, Massachusetts.
All rights reserved.
This software is provided under license agreement and must be kept confidential.
.SH BUGS
This is an experimental compiler, and thus no warranties are expressed or
implied about its conformance to the definition of the Modula-2 language
or about its proper functioning.
We will endeavor to report and fix bugs, but users should be aware that this
is not a supported product.
