.TH PF 1 local
.SH NAME
pf \- find and print process information
.SH SYNOPSIS
pf
.SH DESCRIPTION
.I pf
looks through the process table for processes matching a given set of
criterion and prints those processes.
Requests to
.I pf
are of the form 
.I OPER
.I TEST
.I value,
or of the form
.I request-list
.I conjunction
.I request-list.
Oper is a keyword representing a item in the process structure.
The valid keywords are
\fIpid\fR, \fIuid\fR, \fIname\fR, \fInice\fR, \fItime\fR, 
\fIppid\fR, \fIstatus\fR, \fItty\fR, \fIcomm\fR and \fIargs\fR.
Test is a comparison operator.
The numeric comparison operators are = (equal), != (not equal), >= 
(greater or equal), <= (less or equal), > (greater), and < (less).
The string comparison operators are =, !=, =~ (regular expression match),
and !~ (not RE match.)
See \fIregex\fR(3) for more information on regular expressions.
The meanings of the key words are:
.br
.sp 1
.in 0
pid
.in 10
This represents the pid of the process.
.br
.in 0
uid
.in 10
This represents the uid of the owner of the process.
.br
.in 0
ppid
.in 10
This represents the parent process id of the process.
.br
.in 0
status
.in 10
This represents the internal status of the process.  
The valid status strings are \fIsleep, wait, run, idle, zomby\fR,
and \fIstop\fR.
.br
.in 0
name
.in 10
This represents the name of the person running the process.
This is immediately converted internally to the persons uid 
in order to save time.
.br
.in 0
nice
.in 10
This represents the nice value of the process (p_nice, not p_pri.)
.br
.in 0
time
.in 10
This represents the accumulated cpu (not user) time of the process.
Note that
.I pf 
only keeps track of the time to the resolution of one second.
.br
.in 0
tty
.in 10
This represents the controlling terminal of the process.
Note that as the value argument for the tty token, 
.I pf
expects only the
last 2 letters of the terminal device (or 'co' for the console,) exactly
the letters which \fIpf\fR prints out under the TTY header.
Thus /dev/ttyha is abbreviated to \fIha\fR (i.e. tty=ha).
.br
.in 0
comm
.in 10
This represents the command given.  
Note that this matches the element u_comm in the user structure,
and not the arg list (which is what is printed.)
.in 0
args
.in 10
This represents the actual argument list (argv with NULL separators replaced
with spaces.)
This is what is printed by default under the COMMAND label in the header.
.in 0
.PP
The conjucntions recognized by 
.I pf
are 
.I &&
.I (and)
and
.I ||
.I (or.)
The request list can be any combination of requests joined by any combination
of conjunctions.
For example the request \fIname==root&&tty==co&&nice!=0\fR is a valid request.
.PP
.I pf
also will recognize a request which is just a user name.
Thus the request '\fIroot\fR' is short for the expression '\fIname=root\fR.'
.PP
Note that if you are using \fIpf\fR non-interactively (i.e. passing arguments
from the command line) that separate commands need to be separated with 
semicolons.
.SH VARIABLES
.br
There are 4 (user accessable) variables built into pf.
They can be set with the \fIset\fR command and unset with the 
\fIunset\fR command.
Also, \fIset\fR alone will print out the list of variables and thier 
values.
Note that variables don't take a value, but just are set or unset.
If \fIsortoutput\fR is set then \fIpf\fR will sort the output (first
by uid, then by pid.)  
Otherwise it won't sort it.
If \fInameusers\fR is set then \fIpf\fR will print out the login names
of the users in place of thier UIDs.
If \fIcountmode\fR is set then \fIpf\fR will print the number of processes
which match the given conditions and the maximum number of processes that
the system can run after each match.
if \fIprintheader\fR is set then \fIpf\fR will print a header giving the 
order of the per-process information it prints out after each match.
Note that \fIpf\fR runs slower if any of \fInameusers\fR and \fIsortoutput\fR 
are set.
Initialy, \fIsortoutput\fR and \fIprintheader\fR are set and 
\fInameusers\fR and \fIcountmode\fR and \fIprintheader\fR are unset.
.SH HINTS
Some operations take much longer to execute than others.
Specifically those which need to access the user structure and
even more so those which need to access the arguments or the terminal name.
These are
.I comm,
.I args,
.I tty,
and
.I time.
.I pf
does tests from left to right.
Therefore if you have a match which has some tests which need to access
the user struct and some which don't, it will be much faster if you 
list the ones that don't first.
.I pf
will then be able to throw away the processes which fail to pass the
test without having to get the user structure for them.
The upshoot of this is that it will be faster.
.SH FILES
/dev/kmem - the kernel memory
.br
/dev/mem - physical memory
.br
/dev/drum - the swap device
.SH SEE ALSO
ps(1)
.SH DIAGNOSTICS
If \fIpf\fR cannot open any of /dev/kmem, /dev/mem and /dev/drum,
it will print an error message indicating this and exit.
.br
If an invalid command is given, \fIpf\fR will print "syntax error."
.SH BUGS
Currently pf only runs in interactive mode.
