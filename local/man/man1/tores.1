TORES is an EMACS-like editor written in C for UNIX.  It was
originally developed by Jeff Schiller and improved by Dan
Weinreb, both of MIT. This document attempts to give a brief
description which is hopefully sufficient for clever people to
figure out how to make it all work.  This is NOT intended as a
tutorial.  Please send comments, criticisms, and suggestions to
kraley. 

GENERAL DESCRIPTION

Tores attempts to keep a window into the buffer updated at all
times. The window contains the line that has the cursor in it,
and several lines on either side, depending on the screen size.
As the user moves the cursor around the file, the window
automatically follows, hopefully doing the minimum amount of
redisplay necessary. 

Commands to tores are generally one character long.  They take
effect immediately after being typed.  Most commands are
self-inserting, for example all alphabetic characters, when typed
as a command, simply cause that character to be inserted at the
cursor position in the file.  Most commands to move around the
file, perform searches, and other typical editor functions are
control characters.  A few commands are prefix commands that
change the meaning of the character typed immediately after them.
The best way to explain all of the separate commands is to simply
list them all with an explanation of what they do.  See below
under COMMANDS. 

THE SCREEN

The screen consists of three parts:  The largest part is the
window into the buffer.  Here an up-to-date copy of the file
being edited is shown.  

The next to bottom line of the screen is the mode line.  
This displays status information about the buffer currently being
edited.  "Modes" currently in force are displayed in parentheses.  
(Right now there is only fundamental mode).  the buffer name is 
given, followed by a colon, and the file associated with this buffer,
if any, is shown.

The bottom line is the echo area, which is
used for longer interactions with the user.  Right now the
redisplay of the echo area is a little shaky, but you can
probably figure it out. 

BUFFERS

There can be several independent buffers extant at any time.  A file can 
be associated with a buffer, which is where saves of that buffer
will default to.  One file may be in several buffers, but each
is an independent editing entity, and so will probably screw up the 
file.  Buffers are created by selecting a buffer name that does not
yet exist.  See C-X B.

WINDOWS

The user can select two windows mode, in which either two buffers
or two viewports into the same buffer may be simultaneously displayed.
Make 2 Windows (C-X 2) splits the current window in half and displays the
current buffer in both windows. Select Window (C-X O) moves the cursor
to the other window.  Make 1 Window (C-X 1) expands the current window
to fill the screen.  Grow Window (C-X G) expands the size of the 
current window.  There can only be 1 or 2 user windows.  while within
a window, you can change the buffer associated with that window, read, 
write or change files, all independently from the other window.
If both windows contain the same buffer, changes made in one window are not
immediately displayed in the other one; when the other window is 
selected, or the screen is redrawn (C-L), then the changes will be
seen.

FILES

I will try to maintain a usable version as
/usr/kraley/tores/tores.  At this stage, I hesitate to "release"
a version to the system /bin directory, since it is really still
very experimental and shaky.  All other files live in
/usr/kraley/tores. The sources are *.c; tores.h is a common
header file, and ntores is the most up to date developmental
version. todo is a list of things I think might be good to work
on, maillist is the mailing list of interested people, and
messages is a history file of old messages. 


STARTING AND STOPPING

Tores takes an optiional argument on its shell line. If supplied,
this should be the name of an existing file that you wish to
edit.  Tores will do an implicit C-X C-R on that file.

Upon starting the editor, you will be greeted with a blank screen
(which is very reassuring).  Just go ahead and type some commands
and soon it will be full. 

To halt the editor normally, use the C-X C-Z command and answer
the confirm question with y <nl>. Your tty modes will be restored
and you be back at shell level.  Files are NOT written out
automatically yet. 

TERMINAL

For now, tores only works with a VT100, in ANSI mode. Other
terminal users, stay tuned for further developments.  Tores will
set as many of your terminal characteristics as it can, but you
must make sure that your terminal has auto xon/off turned on (not
computer controllable). 


WARNING

Tores uses xon/xoff flow control for output to the terminal.
(Randy talked me into it; if you don't like it, argue with him).
This has two implications: first, you must have it turned on in
your terminal (as mentioned above), and second, YOU MUST NOT HIT
^S by mistake, or your job will appear to go dead.  (hitting ^Q
usually does no harm).  This should mostly be a problem for
seasoned EMACS users. I have put forward search on C-C, quote on
C-^, and save file on C-X S, to get around this.  If your fingers
just automatically happen to hit ^S, just type a ^Q and all will
be well. 

{for the time being, ^S/^Q flow control is turned off; flow control
is by padding as an experiment.  There is still no commands defined
for ^S or ^Q, typing them (either explicitly or because your terminal 
decides to) will ring the bell}


COMMANDS

All standard printing characters: These characters simply insert
themselves into the buffer at the current cursor position. 

Control A: This command moves the cursor to the left margin of
the current line (the line containing the cursor). 

Control B: This command moves the cursor backwards one character.
It moves over carriage returns, too. 

Control C: This command is forward search. It works the same as
C-R, except that the search is performed forward from the
cursor's position.  The position of the cursor after a successful
search is at the end of the located string. 

Control D: This command deletes the character immediately
following the cursor (it appears under the cursor). 

Control E: This command moves the cursor to the right margin of
the current line. 

Control F: This command moves the cursor forward one character. 

Control G: This command is the general escape character.  Typing
it at any time should get you back to the standard input mode.
All typed ahead input will be flushed, any work in progress will
be stopped and the bell will be rung. 

Control I: (Tab) This performs the "Indent Under" function.  If
at the beginning of the line, we look back for the most recent indented
line -- that is, one with leading white space -- and indent the
current line the same amount.  If there is no indented line, or not
at beginning of line, insert a tab.  This turns out to be a good 
thing for both text and indented programming languages.

Control J: (Line Feed) This does an implicit carriage return
(C-M) followed by tab (C-I).

Control K: This command kills characters to the end of the line.
If the line is null, i.e. consists of a single carriage return,
then control K kills that carriage return, otherwise, it deletes
characters up to the carriage return, but leaves the carriage
return alone.  Thus, to delete a whole line, type two C-Ks.  In
addition, control K puts the killed text in the kill buffer. If
the previous command was a control W or a control K, then control
K adds the new killed data to the end of the current entry of the
kill buffer, otherwise, the kill buffer ring is pushed and a new
entry made. See the description of the kill buffer for more
information. 

Control L: This command clears the screen and redisplays the
screen. If it is given an argument (see below) then it makes The
line with the cursor on it on that line of the physical screen.
Thus ^U0^L makes the current line the top line of the screen. 

Control M:  (Newline) This is usually self-inserting.  But if
there are at least two blank lines following, the newline will
just "eat up" the first one, ie. it will just go to the first
position of the next line.  Thus we have the illusion of filling
up empty space (perhaps created with C-O) with new text.  If
there is only one blank line, newline will NOT eat it up.  If
there are no blank lines, of course, it just self-inserts. 

Control N: This command moves the cursor to the beginning
of the following line.

Control O: This command inserts a carriage return and backs up
over it. It is the same as <newline> C-B.  This is useful for
"opening up" some room for adding new text.  Rather than having
each newline move the follwing text down, it is more efficient to
open up some space, using the "eating up" feature of newline, and
then close up any remaining space with C-X C-O. 

Control P: This command moves the cursor to the beginning of the 
previous line.

Control Q: Don't type it!! 

Control R: This command does a reverse search in the buffer.  It
starts at the cursor and looks backwards for the searched-for
string. If the string is not found, the current position in the
buffer is unchanged, otherwise, the cursor is placed at the
beginning of the located string. After typing the command, the
system prompts for the string to be searched for. Type the string
ending with an <escape> character. If the string is null, the
last searched-for string will be used. 

Control S: Don't type it!! 

Control T: This command exchanges the two characters immediately
surrounding the cursor. 

Control U: This command is used to give an argument to a command.
In general, giving an argument to a command causes it to perform
that command the argument number of times.  There are two formats
for ctrl-u. The first is typing control u followed by a number
followed by the command to get the argument. This causes the
command to be invoked with the specified argument. If no number
is specified, i.e. ctrl-u command is typed, the argument defaults
to four.  If n ctrl-u's are typed, and then a command, the
argument 4**n is given to that command.  Thus C-U C-U C-D deletes
16 characters in the forward direction. 

Control V: This command "turns the page", ie. it goes to the next
screenful of the buffer.  The two lines at the bottom of the
screen are retained at the top, so you can have some context. 

Control W: This deletes the previous word.

Control X: This is a prefix character and will be described
later. 

Control Y: This command brings back the kill buffer, and inserts
it before the cursor. It does not modify the kill buffer at all. 

Control <at>: This command sets the mark position to be the
current position.  You can frequently type this like C-<space>. 

Control ^:  This command quotes its argument. For example, to
insert a ctrl-n into the buffer, you must precede the ctrl-n by a
ctrl-^ so that it does not cause the editor to move up one line.
(Type C-^ on a VT-100 by C-~)

Altmode: This is also a prefix character, and will be explained
shortly. 

Control X prefix characters. These commands are all typed by
typing a ^x immediately before the command: 

C-X B: Select Buffer - Asks for the name of a buffer to switch to.
If the name is does not exist, a new buffer of that name is created.
If no name is given, switches to the last buffer that was visited.
Confirm the name with a newline.

C-X C-E: The region is written to a file. 

C-X C-F: Find file - Asks for a file name.  If that file name is
associated with an existing buffer, the user is switched to that 
buffer.  If not, a buffer is created with name equal to the last
segment of the file name and the file is read into it.  If that 
buffer name already exists, the user is asked for a new name.  Answering
this question with just a <cr> implies to read it into the old buffer 
anyway.

C-X C-G: This command is illegal, and is part of the notion that
^G gets you "out" of whatever mode you are in. 

C-X G: Grow Window - Expand the size of the current window by the
argument (default 1) and shrink the other window accordingly.

C-X C-I: An input file is inserted at point. 

C-X C-L: Make the region all be lower case. 

C-X C-O: deletes all blank lines around point. 

C-X O: Select Window - Moves the cursor to the other user window.

C-X C-R: This prompts for a file name, and reads it in.  If no
filename is given, the last one given is used again. Note that
filenames are delimited by a newline. 

C-X S: (not C-S!!) This is the same as C-X C-W <newline>, ie.
the current buffer is saved to the current filename. 

C-X C-U: The region is all upper-cased. 

C-X C-W: This prompts for a file name, and writes out the current
buffer to the file. The file about to be overwritten is renamed
with a ~ at the end.  C-X C-X: This command exchanges the
position of the current location and the mark's location. 

C-X C-Z: This is used to leave the editor. A confirming
question is asked and must be answered ith 'y' <newline>. 

C-X 1: Make 1 Window - Expand the current window to fill the screen.

C-X 2: Make 2 Windows - Split the current window in half and 
display the current buffer in both windows.

Altmode prefix commands: These commands are prefixed by an
altmode, and are sometimes called meta commands. We will
abbreviate them with an M- prefix. 


M-B: Move cursor backward over one word. 

M-C: This capitalizes the next word. 

M-D: Delete forward over one word. 

M-F: Move the cursor forward over one word. 

M-L: This lower cases the next word. 

M-M: Move cursor back to the end of this line's indentation, that
is, leading white space. 

M-U: This upper cases the next word. 

M-V: This command moves the cursor up to the screenful of text
immediately preceding the screenful currently being displayed.
It is the opposite of C-V. 

M-W: Save the region on the kill ring without killing it. 

M-X: This is a prefix for commands whose names are strings.  None
exist yet. 

M-Y: This command MUST be used immediately after a C-Y or another
M-Y. It pops the kill ring and replaces the just yanked text
(from the previous command) with the new top of the kill ring. 

M-\: Deletes all horizontal white space around the cursor. 

M-<rubout>: Delete backward from the cursor's current position
one word. 

M-<: This command moves the cursor to the beginning of the file. 

M->: This command moves the cursor to the end of the file. 

M-;: This does "Indent for Comment".  Currently a kludged up
version good only for C programs.  The cursor is moved to the
end of the line and is indented to the comment column (currently
set to 40), the string /*  */ is inserted, and the cursor put
in the middle of same.

M-~: Makes the buffer be not "modified", see below.

VT100 buttons:

PF2:  This command deletes text between the cursor and the
mark position. It is a good idea to use ^x^x first to make sure
you know what you are killing.  This command pushes the kill
buffer and puts the just-killed text in the kill buffer. 

Up arrow: This moves the cursor up one line as vertically as
possible.

Down arrow: This moves the cursor down one line as vertically as 
possible.

Left arrow: This moves the cursor left one word.

Right arrow: This moves the cursor right one word.


MARK AND REGION

Besides "point", the current location of the cursor, there is
another identifiable location which can be located and moved
around the buffer, called the "mark". You can't see where the
mark is, but you can exchange point and mark with C-X C-X. C-@
sets the mark at the current point.  (C-<space> is usually a good
way to type this.) The "region" is defined as all the text
BETWEEN the mark and point, whatever order these two happen to be
in. Many commands perform operations on the region, like PF2,
which kills it, or C-X C-E, which writes it to a file.  Unlike
EMACS, the mark is anchored in the text; moving data around
elsewhere in the buffer should not affect the location of the
mark.  Some other commands set the mark, for example C-Y sets
mark at the beginning of the inserted text and pont after. Thus
it is easy to kill the thing you just inserted. 

KILL RING

The kill ring is a place that stores killed text for later use.
Each time a "kill" command is done, a copy of the text that was
killed is placed in an entry on the kill ring. (M-W is a special
case that puts a copy of the region on the kill ring without
killing it.) The kill ring is really like a push-down stack, so
the last "kill" will be on "top". a C-Y will insert the text on
the "top" of the stack (and NOT pop the stack). The sequence C-Y
M-Y will first insert the text on the top of the stack, then pop
the stack and REPLACE the reecently inserted text with the text
from the new top of the stack.  Following this with a sequence of
more M-Y commands will continue to go down the stack, until you
find the text you really wnated.  Since the "stack" is really a
ring buffer, things popped off the top of the stack by M-Y are
not lost, they are merely put into the "bototom again.  So typing
enough M-Ys will get you the data first inserted again. Note that
for safety reasons, M-Y commands must immediately follow a C-Y or
other M-Y commands. 

Thus the kill ring is useful both for recovering from
over-enthusiastic killing as well as moving blocks of text around
either within a file or between files.  The kill ring is not
altered by changing files or buffers. 

Consecutive kills, ie. sequences of C-K, PF2, and M-W commands
without any other intervening commands, concatenate their killed
text in one kill ring entry. Thus incremental killing of a piece
of text will still keep it all together. 

Note the use of "kill" vs. "delete".  All commands which use the
word "kill" mean that the killed text is saved on the kill ring.
Very few commands (only <rubout and C-D) actually delete
characters. 

ARGUMENTS

Many commands take numeric arguments. These usually indicate how
many times that action should be taken.  For example, for a
self-inserting character, insert that many of that character. For
C-K, kill that many lines (note that 1 C-K is different than
C-K). 

Arguments can be typed in two ways: First, meta-digits are
interpreted as arguments.  Thus typing <esc> 1 2 C-K kills 12
lines. Second, C-U multiplies the current argument (default 1) by
4. Thus C-U C-U C-O opens up 16 lines. 


MODIFIED BIT

Each buffer has a "modified" bit that indicates if there have been
modifications since the last read or write to a file. M-~ also
turns off the modified bit. The state of the bit shows in the mode line.
when an attempt is made to read a file into a buffer with modified contents,
an offer is made to save the contents first.  When you exit TORES, 
you are asked if you wish to save each modified buffer.
