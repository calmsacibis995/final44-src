.TH TROLL
.SH SYNOPSIS
.B troll
[-vt] [filename]
.SH DESCRIPTION
The
.B troll
command starts the Troll/USE relational database management system.
The optional file argument contains a
sequence of Troll/USE commands to be executed.
Otherwise, commands are read from standard input and
troll displays a prompt character (`>')
when it is ready to accept a command.
When Troll/USE is invoked with a filename argument,
commands are taken from the named file and no prompt character is
generated; the line being interpreted is echoed to standard output.
.LP
The flag `-v' indicates verbose error messages and is the
default error handling procedure whenever the terminal is used
for input and/or output.  
The flag `-t' denotes terse error messages, comprised of a single
line started with an exclamation point (!), followed by an error number.
.LP
Database handler requests are separated by a semicolon.
Troll/USE error messages are indicated by an exclamation point
followed by an exception name and module identification.
Troll/USE requests can be interspersed with comments, consisting
of text enclosed by `{' and `}'.
.LP
A typical Troll/USE session starts with specification of the database
to be used.
Any existing directory may be used for the database (see open command).
Sequences of Troll/USE commands may be stored in a \fIlibrary\fR
and invoked (optionally with parameters) with the Troll/USE call
command.
Any existing directory may be used for the library, including the
same directory as used for the database (see library command).
.LP
If a file named 'ENVIRONMENT' exists in the directory from which Troll/USE
is called, 
the first line of that file is used as the path of the parent
directory of the database
directory, and the second (optional) line specifies the parent directory
(perhaps the same) of the library directory in which scripts are stored.
.LP
The troll session then consists of a sequence of commands to manipulate
objects in the database or to get performance information.
Troll/USE operates on four kinds of objects: relations, markings, cursors, and
domains.
A \fIrelation\fR may be treated as
a two dimensional table.
The columns of the table are named and are called the \fIattributes\fR of the relation
and each attribute obtains its value from a \fIdomain\fR.
A single row in the table is called a \fItuple\fR.
Each tuple of a relation must be unique, with uniqueness assured by a
subcollection of the attributes designated as the key.
Relations and their domain information can be saved between
sessions; no other information is saved by the system.
.LP
A \fImarking\fR denotes a collection of tuples in one relation.
It can be thought of as a table with possibly duplicated rows.
The tuples in the marking cannot be updated and the marking is not
protected against changes in the underlying relations.
Its primary use is to store an intermediate result of a database expression.
If the marking is the result of a join of two or more relations,
the marking contains combinations of tuples of the joining relations.
A \fIcursor\fR is an object that denotes a single tuple in a relation or marking.
It can be assigned a value by either one of the cursor statements or an
associative access, that is, a tuple is selected on the values of its key attributes.
.LP
Troll/USE provides a rich variety of operations for the definition and manipulation
of these objects, as well as for display of database information and performance
statistics.
These operations may be divided into categories, as follows:
.ta 1.5i
.nf
.sp 1v
\fIDeclarations\fR
.sp 1v
.ta 1.5i
domain	used to declare a domain, which may be integer, float,
	boolean, fixed or variable length string, an enumerated
	type, or a subtype of these types
.sp 1v
relation	used to declare a relation with attributes, including
	the key, and their domains
.sp 1v
marking	used to declare a marking, with its underlying relations
.sp 1v
cursor	used to declare a cursor, with the name of the relation or
	marking to which it is bound
.sp
\fIRelation level operations\fR
.sp 1v
import	names a relation to be accessed or modified in the
	current session
.sp 1v
export	saves relations when they are no longer needed in the
	current session
.sp 1v
destroy	removes all tuples and information about a relation
	or marking (also used for cursors and domains)
.sp 1v
clear	removes any tuples in a relation or marking, while
	retaining information about its structure
.sp 1v
selection	selects a set of tuples from a relation or marking that
	satisfy a given Boolean condition
.sp 1v
projection	selects a subset of attributes from a relation or marking
.sp 1v
join	combines two variables on the equality of a common
	attribute (equi-join of the relational algebra)
.sp 1v
product	forms the Cartesian product of two relations or markings
.sp 1v
assignment	assigns the result of a database expression to a
	relation or marking
.sp 1v
union	set-oriented operations on relations and markings
intersection
difference
.sp 1v
unique	removes duplicate tuples from a marking
.sp 1v
count	aggregation operation to count the number of tuples
	in a relation or marking
.sp 1v
\fITuple level operations\fR
.sp 1v
insert	inserts new tuples (or single values) into a relation
.sp 1v
delete	removes single tuples from a relation
.sp 1v
foreach	iterates over the tuples in a relation or marking
.sp 1v
\fIItem level operations\fR
.sp 1v
assignment	modifies single attribute values in a relation
.sp 1v
max	aggregation operations on attributes in a relation
min
avg
sum
sdev
acount
.sp 1v
input	displays a message, accepts input, and assigns value to
	Troll/USE global variable ($0 .. $9)
.sp
\fICursor operations\fR
.sp 1v
assignment	assigns the cursor to a specific tuple
.sp 1v
get	advances a cursor to the next tuple of a relation or marking
.sp 1v
reset	resets a cursor to the first tuple of a relation or marking
.sp 1v
exists	determines whether a cursor is pointing to a tuple
.sp 1v
destroy	removes a cursor
.sp 1v
\fIDisplay operations\fR
.sp 1v
print	displays results of database operations, along with
	associated text messages.
.sp 1v
copy	transfers data between the database and external files
append
.sp 1v
log	logs a sequence of troll operations on an external file
.sp 1v
\fITransaction support\fR
.sp 1v
call	reads and executes a sequence of troll commands from an
	external file with optional parameter passing
.sp 1v
library	declares the name of a directory where troll scripts are stored
.sp 1v
begin...end	provides a compound statement facility that treats a group
	of troll statements as a single unit for purposes of rollback
	and recovery
.sp 1v
if..then..else	provides conditional processing 
.sp 1v
assert	can be used to enforce assertions about the
	state of the database
.sp 1v
\fIPerformance measurement\fR
.sp 1v
time	measures system time and elapsed time for a command
.sp 1v
atime	measures time since previous call of atime
.sp 1v
stat	provides statistics on system input/output
.sp 1v
astat	like stat, measured since previous call of astat
.sp 1v
\fISystem Administration\fR
.sp 1v
open	opens a given database
.sp 1v
close	closes the open database
.sp 1v
sync	synchronizes the system by forcing all dirty pages to be
	written out
.sp 1v
shell (!)	allows troll commands to be interspersed with system calls
.sp 1v
quit	terminates a troll session
.sp 1v
.SH ERRORS
Any requests preceding an open command are echoed to the user with no further
action taken.
A break in the middle of a multiline command may cause the parser to get
lost.
.sp 1v
.SH EXAMPLES
.na
A short Troll/USE session:
.in +5
.nf
%troll
>open testdb;
>import employee;                {get existing relation}
>insert employee [66,`M Jackson',100]; {add a new employee}
>employee[66].age := employee[66].age + 1; {change age of Jackson}
>print employee (empid,name,ext);
[      2 , `H Tebra' ,     22 ]
[      4 , `H Gerbscheid' ,     24 ]
[     66 , `M Jackson' ,    101 ]
>call payroll;
>close; quit
.in -5
.fi
.LP
If testdb is not a subdirectory of the directory from which
troll is called, but is instead in a directory called
/u/troll/databases, start with
.in +5
.sp 0.5v
open '/u/troll/databases/testdb';
.sp 0.5v
.in -5
or a relative path name
or create an ENVIRONMENT file (in the directory from which troll is called)
with a text editor, with one line of text containing the database name, such as 
.in +5
.sp 0.5v
/u/troll/databases/
.in -5
.LP
Similarly, if payroll is not a script (text file of troll commands) in
testdb, its directory must be named in a library command, such as
.in +5
.sp 0.5v
library '/u/troll/databases/myscripts/';
.sp 0.5v
.in -5
or placed on the second line of the ENVIRONMENT file.
.SH BUGS
.SH "SEE ALSO"
troll (3), trollsort (1), tbe (1)
