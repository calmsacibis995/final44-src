.TH TROLL 3,3F
.SH NAME
troll -- Troll/USE interface routines
.SH SYNOPSIS
.B cc
[ flags ]  files
.B '-ltroll'
.br
.B f77
[ flags ]  files
.B '-ltroll'
.SH DESCRIPTION
.nh
These routines provide an interface to Troll/USE from C, Pascal, or Fortran 77
programs. 
Troll/USE runs as a separate process and
all communication is performed through pipes, using a message passing protocol.
All messages and values are sent as null terminated ASCII strings,
which are then converted by Troll/USE. 
Arguments to each of these routines, unless otherwise indicated,
are pointers of type char or literal values enclosed in double quotes.
Responses from Troll/USE are placed in a buffer that can be examined but
but should not be manipulated.  Private copies of the Troll/USE responses
can be obtained with the C
.I mkcpy(response)
routine which allocates memory and places the response into the memory.
.LP
.nh
The C routine
.I initroll() 
or Fortran routine
.I trinit()
fork a Troll/USE process and establishes the pipes between the the user's
program and Troll/USE.
Hence, they must be called first.
The routine
.I stop_troll()
or Fortran routine
.I trstop()
is called last and terminates the Troll/USE process.
The C routine 
.I opendb(dbname)
or Fortran routine
.I opendb(response,dbname,libname)
provides access to a given database, where dbname and libname is a
valid Unix path name.
.LP
.nh
The C routine
.I troll_msg(message)
or Fortran routine
.I trmsg(response,message)
is the basic mechanism by which commands are sent to and output
received from Troll/USE.  The "message" argument to the either routine
should be a valid Troll/USE command.  The C routine returns a string which
is the output from Troll/USE.
The Fortran version place the response in "response".  The "response"
variable must be declared as a character array in the Fortran calling function.
This method is common to all Troll/USE library Fortran routines when a
string value is to be returned.  The first argument is the variable in which
the response is to be placed.
The output may be requested output
or a Troll/USE error message, which may be checked with the C routine
.I troll_error(message),
or Fortran routine
.I trerr(response,message)
where
.I message
is the output from 
.I troll_msg
or
.I trmsg.
.LP
.nh
The C routine
.I slice(tuple,field)
or Fortran routine
.I slice(response,tuple,field)
is used to extract a particular field from the tuple.
The argument is a pointer to the tuple and the routine
returns a pointer to the requested field.  Single quotes,
leading, and trailing blanks are stripped from the output.
The copy version in C is
.I cslice(tuple,field).
.LP
.nh
The routine
.I qslice(tuple,field)
or Fortran routine
.I qslice(response,tuple,field)
behaves exactly as
.I slice
and
.I qslice(response,tuple,field)
except that single quotes are left on strings.  This feature
is useful when the output from Troll is to be saved in a
variable which will later be sent to Troll again.
The copy version in C is
.I cqslice(tuple,field).
.LP
.nh
The C routine
.I slice_all(tuple,ptrtab,buffer)
extracts all of the fields from a tuple and places them into a buffer.
.LP
.nh
A similar C routine to slice() is
.I scaval(relation,scal_attr,field)
or Fortran routine
.I scaval(response,relation,scal_attr,field)
which returns the string scalar value.  The Troll/USE "display" command
shows the scalar attribute values.  The relation must already
have been imported to Troll for this routine to work correctly.
.LP
The inverse C and Fortran routine which returns the integer index value given
a scalar string value is
.I scaidx(relation,scal_attr,value).
The integer value is returned.
.LP
.nh
To obtain the type of field in a Troll/USE tuple, the C routine
.I fieldtype(tuple,field)
or Fortran routine
.I field(tuple,field)
are provided.  The "field" arguement is the integer position in the tuple.
An integer value
is returned corresponding to the type of Troll/USE field.
.LP
The response from Troll/USE is often a series of tuples.  The C routine
.I next_tuple(response,&ptr)
or Fortran routine
.I nxttup(fresponse,response,tuple)
steps through a series of Troll/USE tuples.  The C routine places the current
tuple in the "ptr" address and returns a pointer to the next tuple in the
series.
The Fortran version places the current tuple in "tuple" and places the
next tuple in "fresponse".
.LP
.nh
The C routines
.I troll_attr(display),
.I resolve_attr(numattr),
.I troll_domain(domain),
or Fortran routines
.I trattr(display),
.I trresl(numattr),
.I trdom(domain)
extract attribute names and domain definitions for a
relation.  The number of attributes of the relation is returned.
.LP
.nh
The C routine 
.I to_troll(script_name,nparam,paramlist)
or Fortran routine
.I script(response,script_name,nparam,paramlist)
executes Troll/USE scripts located
in a Troll/USE script library directory as established by a
ENVIRONMENT file or a Troll/USE
.B library
statement.
The Troll/USE script is
.I script_name
and nparam is an integer, denoting the
number of paramaters which follow (from 0 to 10). 
It is followed by the actual parameters to be used
in the script, in positional order.
.LP
.nh
The C routine
.I index(string,chr)
returns a pointer to the first occurrence of character "chr" in string "string".
The C routine
.I rindex(string,chr)
returns a pointer to the last occurrence of character "chr" in string "string".
The Fortran versions
.I index(fresult,string,chr)
and
.I rindex(fresult,string,chr)
are identical except the result is placed in "fresult".
.SH "SEE ALSO"
Troll/USE Reference Manual, by M.L. Kersten, A.I. Wasserman, and R.P. van de Riet
.br
A Troll/USE Tutorial, by A.I. Wasserman and M.L. Kersten
.br
A RAPID/USE Tutorial, by A.I. Wasserman and D.T. Shewmake
.br
troll (1), rapid (1), tdi (1)
.SH AUTHORS
David Shewmake, Martin Kersten, Peter Pircher, Anthony Wasserman
.SH FUNCTIONS
.nf
fieldtype(tuple,field)
field(tuple,field)
.ti 1i
returns the Troll/USE type of field
.sp 1v
index(string,chr)
index(response,string,chr)
.ti 1i
returns a pointer to the first occurrence of chr in string
.sp 1v
initroll()
trinit()
.ti 1i
initialize a Troll/USE process and establish pipes
.sp 1v
mkcpy(from)
.ti 1i
make a private copy of the Troll/USE response
.sp 1v
next_tuple(response,&ptr)
nxttup(fresponse,response,tuple)
.ti 1i
place the current tuple into a location and advance the pointer to the next
tuple
.sp 1v
opendb(dbname,libname)
opendb(reponse,dbname,libname)
.ti 1i
open a Troll/USE database and library
.sp 1v
rindex(string,chr)
rindex(response,string,chr)
.ti 1i
returns a pointer to the last occurrence of chr in string
.sp 1v
scaval(relation,scal_attr,field)
scaval(response,relation,scal_attr,field)
.ti 1i
scalar value name expansion
.sp 1v
scaidx(relation,scal_attr,value)
scaidx(response,relation,scal_attr,value)
.ti 1i
scalar index
.sp 1v
slice(tuple,position)
slice(response,tuple,position)
.ti 1i
slice out a field from a Troll/USE tuple
.sp 1v
cslice(tuple,position)
.ti 1i
copy version of slice
.sp 1v
qslice(tuple,field)
qslice(response,tuple,field)
.ti 1i
like slice, but response enclosed in quotes
.sp 1v
cqslice(tuple,position)
.ti 1i
copy version of qslice
.sp 1v
stop_troll()
trstop()
.ti 1i
stops the Troll/USE process and closes pipes
.sp 1v
to_troll(script,nparam,params)
script(response,script,nparam,params)
.ti 1i
calls a Troll/USE script and passes parameters
.sp 1v
troll_attr(display)
trattr(display)
resolve_attr(numattr)
trresl(numattr)
troll_domain(display)
trdom(display)
.ti 1i
returns information on Troll/USE attributes and their types
.sp 1v
troll_error(message)
trerr(message)
.ti 1i
checks for error, returns 0 if no error and index into an error
table otherwise
.sp 1v
troll_msg(message)
trmsg(message)
.ti 1i
sends message to Troll/USE and returns response

