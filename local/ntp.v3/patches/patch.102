
Received: from louie.udel.edu by huey.udel.edu id aa20388; 15 Aug 94 19:03 EDT
Received: from burton.cs.colorado.edu (guyton@localhost.cs.colorado.edu [127.0.0.1]) by burton.cs.colorado.edu (8.6.9/8.6.9) with ESMTP id RAA28455; Mon, 15 Aug 1994 17:03:37 -0600
Message-Id: <199408152303.RAA28455@burton.cs.colorado.edu>
To: Mills@huey.udel.edu
cc: guyton@cs.colorado.edu
Subject: patch for monitor_mode
Date: Mon, 15 Aug 1994 17:03:34 -0600
From: Jim Guyton <guyton@burton.cs.colorado.edu>

Here's the minor rewrite as a patch file.  Let me know if
you would prefer just the raw file.

-- Jim
-------------cut here and at end --------------------------
diff -bcr xntp3.4a.orig/include/ntp.h xntp3.4a/include/ntp.h
*** xntp3.4a.orig/include/ntp.h	Thu Aug  4 16:21:47 1994
--- xntp3.4a/include/ntp.h	Sun Aug 14 12:54:45 1994
***************
*** 618,624 ****
   */
  struct mon_data {
  	struct mon_data *hash_next;	/* next structure in hash list */
- 	struct mon_data *hash_prev;	/* previous structure in hash list */
  	struct mon_data *mru_next;	/* next structure in MRU list */
  	struct mon_data *mru_prev;	/* previous structure in MRU list */
  	struct mon_data *fifo_next;	/* next structure in FIFO list */
--- 618,623 ----
diff -bcr xntp3.4a.orig/xntpd/ntp_monitor.c xntp3.4a/xntpd/ntp_monitor.c
*** xntp3.4a.orig/xntpd/ntp_monitor.c	Thu Jun 23 19:39:11 1994
--- xntp3.4a/xntpd/ntp_monitor.c	Mon Aug 15 16:49:45 1994
***************
*** 35,48 ****
--- 35,56 ----
   * reinitializing.
   */
  
+ /* trimmed back memory consumption ... jdg 8/94 */
+ 
  /*
   * Limits on the number of structures allocated.  This limit is picked
   * with the illicit knowlege that we can only return somewhat less
   * than 8K bytes in a mode 7 response packet, and that each structure
   * will require about 20 bytes of space in the response.
+  *
+  * ... I don't believe the above is true anymore ... jdg
   */
+ #ifndef MAXMONMEM
  #define	MAXMONMEM	400	/* we allocate up to 400 structures */
+ #endif
+ #ifndef MONMEMINC
  #define MONMEMINC       40      /* allocate them 40 at a time */
+ #endif
  
  /*
   * Hashing stuff
***************
*** 55,62 ****
   * Pointers to the hash table, the MRU list and the count table.  Memory
   * for the hash and count tables is only allocated if monitoring is turned on.
   */
! static	struct mon_data *mon_hash;	/* Pointer to array of hash buckets */
! static	int *mon_hash_count;		/* Point to hash count stats keeper */
  	struct mon_data mon_mru_list;
          struct mon_data mon_fifo_list;
  /*
--- 63,69 ----
   * Pointers to the hash table, the MRU list and the count table.  Memory
   * for the hash and count tables is only allocated if monitoring is turned on.
   */
! static  struct mon_data *mon_hash[MON_HASH_SIZE];  /* array of list ptrs */
  	struct mon_data mon_mru_list;
          struct mon_data mon_fifo_list;
  /*
***************
*** 63,71 ****
   * List of free structures structures, and counters of free and total
   * structures.  The free structures are linked with the hash_next field.
   */
! static	struct mon_data *mon_free;
  
- static	int mon_free_mem;		/* number of structures on free list */
  static	int mon_total_mem;		/* total number of structures allocated */
  static	int mon_mem_increments;		/* number of times we've called malloc() */
  
--- 70,77 ----
   * List of free structures structures, and counters of free and total
   * structures.  The free structures are linked with the hash_next field.
   */
! static  struct mon_data *mon_free;      /* the free list or null if none */
  
  static	int mon_total_mem;		/* total number of structures allocated */
  static	int mon_mem_increments;		/* number of times we've called malloc() */
  
***************
*** 82,88 ****
--- 88,96 ----
  extern u_long current_time;
  
  static  void    mon_getmoremem   P((void));
+ static  void    remove_from_hash P((struct mon_data *));
  
+ 
  /*
   * init_mon - initialize monitoring global data
   */
***************
*** 96,107 ****
  	mon_enabled = MON_OFF;
  	mon_have_memory = 0;
  
- 	mon_free_mem = 0;
  	mon_total_mem = 0;
  	mon_mem_increments = 0;
! 	mon_free = 0;
! 	mon_hash = 0;
! 	mon_hash_count = 0;
  	memset((char *)&mon_mru_list, 0, sizeof mon_mru_list);
  	memset((char *)&mon_fifo_list, 0, sizeof mon_fifo_list);
  }
--- 104,113 ----
  	mon_enabled = MON_OFF;
  	mon_have_memory = 0;
  
  	mon_total_mem = 0;
  	mon_mem_increments = 0;
! 	mon_free = NULL;
! 	memset((char *)&mon_hash[0], 0, sizeof mon_hash);
  	memset((char *)&mon_mru_list, 0, sizeof mon_mru_list);
  	memset((char *)&mon_fifo_list, 0, sizeof mon_fifo_list);
  }
***************
*** 114,121 ****
  mon_start(mode)
  	int mode;
  {
- 	register struct mon_data *md;
- 	register int i;
  
  	if (mon_enabled != MON_OFF) {
  		mon_enabled |= mode;
--- 120,125 ----
***************
*** 125,150 ****
  		return;		/* Ooops.. */
  	
  	if (!mon_have_memory) {
- 		mon_hash = (struct mon_data *)
- 		    emalloc(MON_HASH_SIZE * sizeof(struct mon_data));
- 		memset((char *)mon_hash, 0,
- 		       MON_HASH_SIZE*sizeof(struct mon_data));
- 		mon_hash_count = (int *)emalloc(MON_HASH_SIZE * sizeof(int));
- 		mon_free_mem = 0;
  		mon_total_mem = 0;
  		mon_mem_increments = 0;
! 		mon_free = 0;
  		mon_getmoremem();
  		mon_have_memory = 1;
  	}
  
- 	md = mon_hash;
- 	for (i = 0; i < MON_HASH_SIZE; i++, md++) {
- 		md->hash_next = md;
- 		md->hash_prev = md;
- 		*(mon_hash_count + i) = 0;
- 	}
- 
  	mon_mru_list.mru_next = &mon_mru_list;
  	mon_mru_list.mru_prev = &mon_mru_list;
  
--- 129,141 ----
  		return;		/* Ooops.. */
  	
  	if (!mon_have_memory) {
  		mon_total_mem = 0;
  		mon_mem_increments = 0;
! 		mon_free = NULL;
  		mon_getmoremem();
  		mon_have_memory = 1;
  	}
  
  	mon_mru_list.mru_next = &mon_mru_list;
  	mon_mru_list.mru_prev = &mon_mru_list;
  
***************
*** 162,168 ****
  mon_stop(mode)
  	int mode;
  {
! 	register struct mon_data *md;
  	register int i;
  
  	if (mon_enabled == MON_OFF)
--- 153,159 ----
  mon_stop(mode)
  	int mode;
  {
! 	register struct mon_data *md, *md_next;
  	register int i;
  
  	if (mon_enabled == MON_OFF)
***************
*** 177,191 ****
  	/*
  	 * Put everything back on the free list
  	 */
! 	md = mon_hash;
! 	for (i = 0; i < MON_HASH_SIZE; i++, md++) {
! 		if (md->hash_next != md) {
! 			md->hash_prev->hash_next = mon_free;
! 			mon_free = md->hash_next;
! 			mon_free_mem += *(mon_hash_count + i);
! 			md->hash_next = md;
! 			md->hash_prev = md;
! 			*(mon_hash_count + i) = 0;
  		}
  	}
  
--- 168,181 ----
  	/*
  	 * Put everything back on the free list
  	 */
! 	for (i = 0; i < MON_HASH_SIZE; i++) {
! 		md = mon_hash[i];               /* get next list */
! 		mon_hash[i] = NULL;             /* zero the list head */
! 		while (md != NULL) {
! 			md_next = md->hash_next;
! 			md->hash_next = mon_free;
! 			mon_free = md;
! 			md = md_next;
  		}
  	}
  
***************
*** 209,215 ****
  	register u_long netnum;
  	register int hash;
  	register int mode;
- 	register struct mon_data *mdhash;
  
  	if (mon_enabled == MON_OFF)
  		return;
--- 199,204 ----
***************
*** 219,226 ****
  	hash = MON_HASH(netnum);
  	mode = PKT_MODE(pkt->li_vn_mode);
  
! 	md = (mon_hash + hash)->hash_next;
! 	while (md != (mon_hash + hash)) {
  		if (md->rmtadr == netnum && 
  		    /* ?? md->interface == rbufp->dstadr && ?? */
  		    md->mode == (u_char)mode) {
--- 208,215 ----
  	hash = MON_HASH(netnum);
  	mode = PKT_MODE(pkt->li_vn_mode);
  
! 	md = mon_hash[hash];
! 	while (md != NULL) {
  		if (md->rmtadr == netnum && 
  		    /* ?? md->interface == rbufp->dstadr && ?? */
  		    md->mode == (u_char)mode) {
***************
*** 250,256 ****
  	 * guy.  Get him some memory, either from the free list
  	 * or from the tail of the MRU list.
  	 */
! 	if (mon_free_mem == 0 && mon_total_mem >= MAXMONMEM) {
  		/*
  		 * Get it from MRU list
  		 */
--- 239,245 ----
  	 * guy.  Get him some memory, either from the free list
  	 * or from the tail of the MRU list.
  	 */
! 	if (mon_free == NULL && mon_total_mem >= MAXMONMEM) {
  		/*
  		 * Get it from MRU list
  		 */
***************
*** 257,265 ****
  		md = mon_mru_list.mru_prev;
  		md->mru_prev->mru_next = &mon_mru_list;
  		mon_mru_list.mru_prev = md->mru_prev;
! 		md->hash_next->hash_prev = md->hash_prev;
! 		md->hash_prev->hash_next = md->hash_next;
! 		*(mon_hash_count + MON_HASH(md->rmtadr)) -= 1;
  		/*
  		 * Get it from FIFO list
  		 */
--- 246,254 ----
  		md = mon_mru_list.mru_prev;
  		md->mru_prev->mru_next = &mon_mru_list;
  		mon_mru_list.mru_prev = md->mru_prev;
! 
! 		remove_from_hash(md);
! 
  		/*
  		 * Get it from FIFO list
  		 */
***************
*** 267,277 ****
  		md->fifo_next->fifo_prev = md->fifo_prev;
  		
  	} else {
! 		if (mon_free_mem == 0)
! 			mon_getmoremem();
  		md = mon_free;
  		mon_free = md->hash_next;
- 		mon_free_mem--;
  	}
  
  	/*
--- 256,265 ----
  		md->fifo_next->fifo_prev = md->fifo_prev;
  		
  	} else {
! 		if (mon_free == NULL)           /* if free list empty */
! 			mon_getmoremem();       /* then get more */
  		md = mon_free;
  		mon_free = md->hash_next;
  	}
  
  	/*
***************
*** 289,305 ****
  		? MDF_MCAST: rbufp->fd == md->interface->bfd ? MDF_BCAST : MDF_UCAST;
  
  	/*
! 	 * Shuffle him into the hash table, inserting him at the
! 	 * end.  Also put him on top of the MRU list
  	 * and at bottom of FIFO list
  	 */
- 	mdhash = mon_hash + MON_HASH(netnum);
- 	md->hash_next = mdhash;
- 	md->hash_prev = mdhash->hash_prev;
- 	mdhash->hash_prev->hash_next = md;
- 	mdhash->hash_prev = md;
- 	*(mon_hash_count + MON_HASH(netnum)) += 1;
  
  	md->mru_next = mon_mru_list.mru_next;
  	md->mru_prev = &mon_mru_list;
  	mon_mru_list.mru_next->mru_prev = md;
--- 277,290 ----
  		? MDF_MCAST: rbufp->fd == md->interface->bfd ? MDF_BCAST : MDF_UCAST;
  
  	/*
! 	 * Drop him into front of the hash table.
! 	 * Also put him on top of the MRU list
  	 * and at bottom of FIFO list
  	 */
  
+ 	md->hash_next = mon_hash[hash];
+ 	mon_hash[hash] = md;
+ 
  	md->mru_next = mon_mru_list.mru_next;
  	md->mru_prev = &mon_mru_list;
  	mon_mru_list.mru_next->mru_prev = md;
***************
*** 320,326 ****
  {
  	register struct mon_data *md;
  	register int i;
! 	struct mon_data *freedata;
  
  	md = (struct mon_data *)emalloc(MONMEMINC * sizeof(struct mon_data));
  	freedata = mon_free;
--- 305,311 ----
  {
  	register struct mon_data *md;
  	register int i;
! 	struct mon_data *freedata;      /* 'old' free list (null) */
  
  	md = (struct mon_data *)emalloc(MONMEMINC * sizeof(struct mon_data));
  	freedata = mon_free;
***************
*** 336,342 ****
  	 */
  	md->hash_next = freedata;
  
- 	mon_free_mem += MONMEMINC;
  	mon_total_mem += MONMEMINC;
  	mon_mem_increments++;
  }
--- 321,348 ----
  	 */
  	md->hash_next = freedata;
  
  	mon_total_mem += MONMEMINC;
  	mon_mem_increments++;
+ }
+ 
+ void
+ remove_from_hash(md)
+ struct mon_data *md;
+ {       register int hash;
+ 	register struct mon_data *md_prev;
+ 
+ 	hash = MON_HASH(md->rmtadr);
+ 	if (mon_hash[hash] == md) {
+ 		mon_hash[hash] = md->hash_next;
+ 	} else {
+ 		md_prev = mon_hash[hash];
+ 		while (md_prev->hash_next != md) {
+ 			md_prev = md_prev->hash_next;
+ 			if (md_prev == NULL) {
+ 				/* logic error */
+ 				return;
+ 			}
+ 		}
+ 		md_prev->hash_next = md->hash_next;
+ 	}
  }
-------------cut here and at top --------------------------

