
Received: from snow-white.ee.udel.edu by huey.udel.edu id aa25985;
          10 Oct 94 16:01 EDT
Received: from strauss.udel.edu by snow-white.ee.udel.edu id aa21357;
          10 Oct 94 15:59 EDT
Received: from gateway.morgan.com (gateway.morgan.com [138.20.30.3]) by strauss.udel.edu (8.6.8/8.6.6) with SMTP id PAA03908 for <mills@udel.edu>; Mon, 10 Oct 1994 15:59:26 -0400
Received: from bb1.fid.morgan.com ([138.20.93.15]) by gateway.morgan.com with SMTP id <41391>; Mon, 10 Oct 1994 15:58:59 -0400
Received: by bb1.fid.morgan.com (4.1/MS/FID/Sun-1.2)
	id AA24161; Mon, 10 Oct 94 15:58:51 EDT
Date: 	Mon, 10 Oct 1994 15:58:51 -0400
From: Doug Kingston <dpk@morgan.com>
Message-Id: <9410101958.AA24161@bb1.fid.morgan.com>
To: mills@udel.edu
Subject: diffs to 3.4f
Cc: dpk@morgan.com

I have sent these before to earlier versions.  The changes to the            
documentation are new.  These are context diffs against the unmodified
3.4f release.  Please let me know when you add these.  The current
GENERIC (parse) driver in 3.4 is broken and cannot work, becase there is   
no way to specify the clock subtype (what kind of GENERIC clock).
These modes in combination with the mode keyword you have already 
added support for, will complete the conversion of GENERIC to stop
overloading the unit field.
 
Thanks
        -Doug-

diff -rbc ../xntp3.4f.orig/doc/README.refclock ./doc/README.refclock
*** ../xntp3.4f.orig/doc/README.refclock	Thu Aug  4 21:03:38 1994
--- ./doc/README.refclock	Mon Oct 10 15:22:38 1994
***************
*** 57,63 ****
  modify the clock selection algorithm as described in Appendix B. For
  those clock drivers that support multiple modes of operation, the
  optional mode parameter selects which one. This parameter affects the
! operation of each driver as described in Appendix A.
  
  In rare cases a fudge command is necessary to specify additional
  details. This command has the following syntax
--- 57,65 ----
  modify the clock selection algorithm as described in Appendix B. For
  those clock drivers that support multiple modes of operation, the
  optional mode parameter selects which one. This parameter affects the
! operation of each driver as described in Appendix A.  The GENERIC driver
! needs to set a sub-type driver code.  This is done by using the mode
! parameter.
  
  In rare cases a fudge command is necessary to specify additional
  details. This command has the following syntax
***************
*** 82,87 ****
--- 84,94 ----
            driver-dependent way. See the descriptions of specific clock
            drivers in Appendix A.
  
+ mode m    The m, a decimal number, specifies the driver sub-type and
+ 	  is used to specify the particular type of clock being handled
+ 	  by the GENERIC driver.  See the description of GENERIC clock
+ 	  driver in Appendix A.
+ 
  There are four optional flags named flag1, flag2, flag3 and flag4. A
  flag is specified in the form <keyword> <value>, where <keyword> is one
  of the flag names and <value> is either 0 or 1, as appropriate. Two of
***************
*** 569,583 ****
       states generally used by receivers. The STREAMS module is
       configured to interpret the time codes of DCF U/A 31, PZF535,
       GPS166, Trimble SV6 GPS, ELV DCF7000, Schmid and low cost receivers
!      (see list below).
  
       The reference clock support in xntp contains the necessary
       configuration tables for those receivers. In addition to supporting
!      up to 32 different clock types and 4 devices, the generation a a
!      PPS signal is also provided as an configuration option. The PPS
!      configuration option uses the receiver generated time stamps for
!      feeding the PPS loopfilter control for much finer clock
!      synchronization.
  
       CAUTION: The PPS configuration option is different from the
       hardware PPS signal, which is also supported (see below), as it
--- 576,590 ----
       states generally used by receivers. The STREAMS module is
       configured to interpret the time codes of DCF U/A 31, PZF535,
       GPS166, Trimble SV6 GPS, ELV DCF7000, Schmid and low cost receivers
!      (see list below).  The actual type of clock is selected by specifying
!      the driver sub-type as a ttl option to the clock.
  
       The reference clock support in xntp contains the necessary
       configuration tables for those receivers. In addition to supporting
!      up to 4 devices, the generation of a PPS signal is also provided as
!      a configuration option. The PPS configuration option uses the
!      receiver generated time stamps for feeding the PPS loopfilter control
!      for much finer clock synchronization.
  
       CAUTION: The PPS configuration option is different from the
       hardware PPS signal, which is also supported (see below), as it
***************
*** 627,675 ****
       The unit field <u> encodes the device, clock type and the PPS
       generation option. There are 4 possible units, which are encoded in
       the lower two bits of the <u> field. The devices are named
!      /dev/refclock-0 through /dev/refclock-3. Bits 2 thru 6 encode the
!      clock type. The fudge factors of the clock type are taken from a
!      table clockinfo in refclock_parse.c. The generation of PPS
!      information for disciplining the local NTP clock is encoded in bit
!      7 of <u>.
  
       Currently, nine clock types (devices /dev/refclock-0 -
!      /dev/refclock-3) are supported.
  
!      127.127.8.0-3 16
  
       Meinberg PZF535 receiver (FM demodulation/TCXO / 50us)
  
!      127.127.8.4-7 16
  
       Meinberg PZF535 receiver (FM demodulation/OCXO / 50us)
  
!      127.127.8.8-11 16
  
       Meinberg DCF U/A 31 receiver (AM demodulation / 4ms)
  
!      127.127.8.12-15 16
  
       ELV DCF7000 (sloppy AM demodulation / 50ms)
  
!      127.127.8.16-19 16
       Walter Schmid DCF receiver Kit (AM demodulation / 1ms)
  
!      127.127.8.20-23 16
  
       RAW DCF77 100/200ms pulses (Conrad DCF77 receiver module / 5ms)
  
!      127.127.8.24-27 16
  
       RAW DCF77 100/200ms pulses (TimeBrick DCF77 receiver module / 5ms)
  
!      127.127.8.28-31 16
  
       Meinberg GPS166 receiver (GPS / <<1us)
  
!      127.127.8.32-35 16
  
!      Trimble SV6 GPS receiver (GPS / <<1us)
  
       The reference clock support carefully monitors the state
       transitions of the receiver. All state changes and exceptional
--- 634,688 ----
       The unit field <u> encodes the device, clock type and the PPS
       generation option. There are 4 possible units, which are encoded in
       the lower two bits of the <u> field. The devices are named
!      /dev/refclock-0 through /dev/refclock-3.  The mode field
!      specifies the clock (sub) type. The fudge factors of the clock type are
!      taken from a table clockinfo in refclock_parse.c. The generation of
!      PPS information for disciplining the local NTP clock is encoded in
!      bin 7 of <u>.
  
       Currently, nine clock types (devices /dev/refclock-0 -
!      /dev/refclock-3) are supported.  Any four can be specified at
!      a given time, so long as the unit ids are unique.
  
!      127.127.8.0-3 mode 0
  
       Meinberg PZF535 receiver (FM demodulation/TCXO / 50us)
  
!      127.127.8.0-3 mode 1
  
       Meinberg PZF535 receiver (FM demodulation/OCXO / 50us)
  
!      127.127.8.0-3 mode 2
  
       Meinberg DCF U/A 31 receiver (AM demodulation / 4ms)
  
!      127.127.8.0-3 mode 3
  
       ELV DCF7000 (sloppy AM demodulation / 50ms)
  
!      127.127.8.0-3 mode 4
! 
       Walter Schmid DCF receiver Kit (AM demodulation / 1ms)
  
!      127.127.8.0-3 mode 5
  
       RAW DCF77 100/200ms pulses (Conrad DCF77 receiver module / 5ms)
  
!      127.127.8.0-3 mode 6
  
       RAW DCF77 100/200ms pulses (TimeBrick DCF77 receiver module / 5ms)
  
!      127.127.8.0-3 mode 7
  
       Meinberg GPS166 receiver (GPS / <<1us)
  
!      127.127.8.0-3 mode 8
! 
!      Trimble SV6 GPS receiver using TAIP protocol (GPS / <<1us)
! 
!      127.127.8.0-3 mode 9
  
!      Trimble SV6 GPS receiver using TSIP protocol (GPS / <<1us)
  
       The reference clock support carefully monitors the state
       transitions of the receiver. All state changes and exceptional
diff -rbc ../xntp3.4f.orig/doc/xntpd.8 ./doc/xntpd.8
*** ../xntp3.4f.orig/doc/xntpd.8	Mon Aug 22 21:43:18 1994
--- ./doc/xntpd.8	Mon Oct 10 15:46:54 1994
***************
*** 199,204 ****
--- 199,207 ----
  .I #
  ] [
  .B prefer
+ ] [
+ .B mode
+ .I #
  ]
  .br
  .B broadcast
***************
*** 944,950 ****
  .I version
  and
  .I ttl
! options are not used for reference clock support; however, the
  .I prefer
  option can be useful to persuade the server to cherish a reference clock
  with somewhat more enthusiasm than other reference clocks or peers, if
--- 947,962 ----
  .I version
  and
  .I ttl
! options are not used for reference clock support.
! Some reference clocks require a
! .I mode
! option to further specify
! their operation.
! The permissable values for reference clock types, units
! and any applicable modes are documented in
! .I README.refclock
! in the source directory.
! The
  .I prefer
  option can be useful to persuade the server to cherish a reference clock
  with somewhat more enthusiasm than other reference clocks or peers, if
***************
*** 1091,1096 ****
--- 1103,1109 ----
  .IR xntpdc (8),
  .IR ntpq (8),
  .IR ntpdate (8)
+ .I (xntp source)/doc/README.refclock
  .SH HISTORY
  .PP
  Written by Dennis Ferguson at the University of Toronto. Text amended by
diff -rbc ../xntp3.4f.orig/xntpd/refclock_parse.c ./xntpd/refclock_parse.c
*** ../xntp3.4f.orig/xntpd/refclock_parse.c	Fri Sep 30 01:33:43 1994
--- ./xntpd/refclock_parse.c	Mon Oct 10 14:12:28 1994
***************
*** 751,760 ****
  
  static int ncltypes = sizeof(clockinfo) / sizeof(struct my_clockinfo);
  
! #define CL_REALTYPE(x) (((x) >> 2) & 0x1F)
! #define CL_TYPE(x)  ((CL_REALTYPE(x) >= ncltypes) ? ~0 : CL_REALTYPE(x))
! #define CL_PPS(x)   ((x) & 0x80)
! #define CL_UNIT(x)  ((x) & 0x3)
  
  /*
   * Other constant stuff
--- 751,760 ----
  
  static int ncltypes = sizeof(clockinfo) / sizeof(struct my_clockinfo);
  
! #define CLK_REALTYPE(x) ((x)->ttl)
! #define CLK_TYPE(x)	((CLK_REALTYPE(x) >= ncltypes) ? ~0 : CLK_REALTYPE(x))
! #define CLK_PPS(x)	((REFCLOCKUNIT(&(x)->srcadr)) & 0x80)
! #define CLK_UNIT(x)	((REFCLOCKUNIT(&(x)->srcadr)) & 0x3)
  
  /*
   * Other constant stuff
***************
*** 886,892 ****
        ioctl(parse->fd, I_PUSH, (caddr_t)"ppsclock") == -1)
      {
        syslog(LOG_ERR, "PARSE receiver #%d: ppsclock_init: ioctl(fd, I_PUSH, \"ppsclock\"): %m",
! 	     CL_UNIT(parse->unit));
        return 0;
      }
    if (!local_init(parse))
--- 886,892 ----
        ioctl(parse->fd, I_PUSH, (caddr_t)"ppsclock") == -1)
      {
        syslog(LOG_ERR, "PARSE receiver #%d: ppsclock_init: ioctl(fd, I_PUSH, \"ppsclock\"): %m",
! 	     CLK_UNIT(parse->peer));
        return 0;
      }
    if (!local_init(parse))
***************
*** 912,918 ****
     */
    if (ioctl(parse->fd, I_PUSH, (caddr_t)"parse") == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_init: ioctl(fd, I_PUSH, \"parse\"): %m", CL_UNIT(parse->unit));
        return 0;
      }
    else
--- 912,918 ----
     */
    if (ioctl(parse->fd, I_PUSH, (caddr_t)"parse") == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_init: ioctl(fd, I_PUSH, \"parse\"): %m", CLK_UNIT(parse->peer));
        return 0;
      }
    else
***************
*** 926,932 ****
         */
        if (ioctl(parse->fd, I_PUSH, (caddr_t)"parse") == -1)
  	{
! 	  syslog(LOG_ERR, "PARSE receiver #%d: stream_init: ioctl(fd, I_PUSH, \"parse\"): %m", CL_UNIT(parse->unit));
  	  return 0;
  	}
        else
--- 926,932 ----
         */
        if (ioctl(parse->fd, I_PUSH, (caddr_t)"parse") == -1)
  	{
! 	  syslog(LOG_ERR, "PARSE receiver #%d: stream_init: ioctl(fd, I_PUSH, \"parse\"): %m", CLK_UNIT(parse->peer));
  	  return 0;
  	}
        else
***************
*** 953,959 ****
  
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_setcs: ioctl(fd, I_STR, PARSEIOC_SETCS): %m", CL_UNIT(parse->unit));
        return 0;
      }
    return 1;
--- 953,959 ----
  
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_setcs: ioctl(fd, I_STR, PARSEIOC_SETCS): %m", CLK_UNIT(parse->peer));
        return 0;
      }
    return 1;
***************
*** 984,990 ****
  
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_enable: ioctl(fd, I_STR, PARSEIOC_ENABLE): %m", CL_UNIT(parse->unit));
        return 0;
      }
    return 1;
--- 984,990 ----
  
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_enable: ioctl(fd, I_STR, PARSEIOC_ENABLE): %m", CLK_UNIT(parse->peer));
        return 0;
      }
    return 1;
***************
*** 1006,1012 ****
  
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_disable: ioctl(fd, I_STR, PARSEIOC_DISABLE): %m", CL_UNIT(parse->unit));
        return 0;
      }
    return 1;
--- 1006,1012 ----
  
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_disable: ioctl(fd, I_STR, PARSEIOC_DISABLE): %m", CLK_UNIT(parse->peer));
        return 0;
      }
    return 1;
***************
*** 1028,1034 ****
    strioc.ic_len     = sizeof (*tcl);
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: ioctl(fd, I_STR, PARSEIOC_GETFMT): %m", CL_UNIT(parse->unit));
        return 0;
      }
    return 1;
--- 1028,1034 ----
    strioc.ic_len     = sizeof (*tcl);
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: ioctl(fd, I_STR, PARSEIOC_GETFMT): %m", CLK_UNIT(parse->peer));
        return 0;
      }
    return 1;
***************
*** 1051,1057 ****
  
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_setfmt: ioctl(fd, I_STR, PARSEIOC_SETFMT): %m", CL_UNIT(parse->unit));
        return 0;
      }
    return 1;
--- 1051,1057 ----
  
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_setfmt: ioctl(fd, I_STR, PARSEIOC_SETFMT): %m", CLK_UNIT(parse->peer));
        return 0;
      }
    return 1;
***************
*** 1074,1080 ****
    
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_getstat: ioctl(fd, I_STR, PARSEIOC_GETSTAT): %m", CL_UNIT(parse->unit));
        return 0;
      }
    return 1;
--- 1074,1080 ----
    
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_getstat: ioctl(fd, I_STR, PARSEIOC_GETSTAT): %m", CLK_UNIT(parse->peer));
        return 0;
      }
    return 1;
***************
*** 1097,1103 ****
    
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_setstat: ioctl(fd, I_STR, PARSEIOC_SETSTAT): %m", CL_UNIT(parse->unit));
        return 0;
      }
    return 1;
--- 1097,1103 ----
    
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: stream_setstat: ioctl(fd, I_STR, PARSEIOC_SETSTAT): %m", CLK_UNIT(parse->peer));
        return 0;
      }
    return 1;
***************
*** 1120,1126 ****
  	
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: parse_process: ioctl(fd, I_STR, PARSEIOC_TIMECODE): %m", CL_UNIT(parse->unit), parse->fd);
        return 0;
      }
    return 1;
--- 1120,1126 ----
  	
    if (ioctl(parse->fd, I_STR, (caddr_t)&strioc) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: parse_process: ioctl(fd, I_STR, PARSEIOC_TIMECODE): %m", CLK_UNIT(parse->peer), parse->fd);
        return 0;
      }
    return 1;
***************
*** 1139,1145 ****
    if (rbufp->recv_length != sizeof(parsetime_t))
      {
        syslog(LOG_ERR,"PARSE receiver #%d: parse_receive: bad size (got %d expected %d)",
! 	     CL_UNIT(parse->unit), rbufp->recv_length, sizeof(parsetime_t));
        parse->baddata++;
        parse_event(parse, CEVNT_BADREPLY);
        return;
--- 1139,1145 ----
    if (rbufp->recv_length != sizeof(parsetime_t))
      {
        syslog(LOG_ERR,"PARSE receiver #%d: parse_receive: bad size (got %d expected %d)",
! 	     CLK_UNIT(parse->peer), rbufp->recv_length, sizeof(parsetime_t));
        parse->baddata++;
        parse_event(parse, CEVNT_BADREPLY);
        return;
***************
*** 1279,1290 ****
  	    }
  	  else
  	    {
!               syslog(LOG_WARNING, "PARSE receiver #%d: no data[old] from device (select() error: %m)", CL_UNIT(parse->unit));
  	    }
  	}
        else
  	{
!           syslog(LOG_WARNING, "PARSE receiver #%d: no data[old] from device", CL_UNIT(parse->unit));
  	}
        parse->noresponse++;
        parse->lastmissed = current_time;
--- 1279,1290 ----
  	    }
  	  else
  	    {
!               syslog(LOG_WARNING, "PARSE receiver #%d: no data[old] from device (select() error: %m)", CLK_UNIT(parse->peer));
  	    }
  	}
        else
  	{
!           syslog(LOG_WARNING, "PARSE receiver #%d: no data[old] from device", CLK_UNIT(parse->peer));
  	}
        parse->noresponse++;
        parse->lastmissed = current_time;
***************
*** 1304,1315 ****
  	    }
  	  else
  	    {
!               syslog(LOG_WARNING, "PARSE receiver #%d: bad read[old] from streams module (read() error: %m)", CL_UNIT(parse->unit), i, sizeof(parsetime));
  	    }
  	}
        else
  	{
!           syslog(LOG_WARNING, "PARSE receiver #%d: bad read[old] from streams module (got %d bytes - expected %d bytes)", CL_UNIT(parse->unit), i, sizeof(parsetime));
  	}
        parse->baddata++;
        parse_event(parse, CEVNT_BADREPLY);
--- 1304,1315 ----
  	    }
  	  else
  	    {
!               syslog(LOG_WARNING, "PARSE receiver #%d: bad read[old] from streams module (read() error: %m)", CLK_UNIT(parse->peer), i, sizeof(parsetime));
  	    }
  	}
        else
  	{
!           syslog(LOG_WARNING, "PARSE receiver #%d: bad read[old] from streams module (got %d bytes - expected %d bytes)", CLK_UNIT(parse->peer), i, sizeof(parsetime));
  	}
        parse->baddata++;
        parse_event(parse, CEVNT_BADREPLY);
***************
*** 1388,1399 ****
  	    }
  	  else
  	    {
!               syslog(LOG_WARNING, "PARSE receiver #%d: no data[new] from device (select() error: %m)", CL_UNIT(parse->unit));
  	    }
  	}
        else
  	{
!           syslog(LOG_WARNING, "PARSE receiver #%d: no data[new] from device", CL_UNIT(parse->unit));
  	}
  	
        /*
--- 1388,1399 ----
  	    }
  	  else
  	    {
!               syslog(LOG_WARNING, "PARSE receiver #%d: no data[new] from device (select() error: %m)", CLK_UNIT(parse->peer));
  	    }
  	}
        else
  	{
!           syslog(LOG_WARNING, "PARSE receiver #%d: no data[new] from device", CLK_UNIT(parse->peer));
  	}
  	
        /*
***************
*** 1420,1430 ****
        /* bad packet */
        if ( i== -1)
  	{
!           syslog(LOG_WARNING, "PARSE receiver #%d: bad read[new] from streams module (read() error: %m)", CL_UNIT(parse->unit), i, sizeof(parsetime));
  	}
        else
  	{
!           syslog(LOG_WARNING, "PARSE receiver #%d: bad read[new] from streams module (got %d bytes - expected %d bytes)", CL_UNIT(parse->unit), i, sizeof(parsetime));
  	}
        parse->baddata++;
        parse_event(parse, CEVNT_BADREPLY);
--- 1420,1430 ----
        /* bad packet */
        if ( i== -1)
  	{
!           syslog(LOG_WARNING, "PARSE receiver #%d: bad read[new] from streams module (read() error: %m)", CLK_UNIT(parse->peer), i, sizeof(parsetime));
  	}
        else
  	{
!           syslog(LOG_WARNING, "PARSE receiver #%d: bad read[new] from streams module (got %d bytes - expected %d bytes)", CLK_UNIT(parse->peer), i, sizeof(parsetime));
  	}
        parse->baddata++;
        parse_event(parse, CEVNT_BADREPLY);
***************
*** 1688,1699 ****
  		}
  	      else
  		{
! 		  syslog(LOG_WARNING, "PARSE receiver #%d: no data from device (select() error: %m)", CL_UNIT(parse->unit));
  		}
  	    }
  	  else
  	    {
! 	      syslog(LOG_WARNING, "PARSE receiver #%d: no data from device", CL_UNIT(parse->unit));
  	    }
  
  	  parse->noresponse++;
--- 1688,1699 ----
  		}
  	      else
  		{
! 		  syslog(LOG_WARNING, "PARSE receiver #%d: no data from device (select() error: %m)", CLK_UNIT(parse->peer));
  		}
  	    }
  	  else
  	    {
! 	      syslog(LOG_WARNING, "PARSE receiver #%d: no data from device", CLK_UNIT(parse->peer));
  	    }
  
  	  parse->noresponse++;
***************
*** 1718,1724 ****
  
  	  while (i-- > 0)
  	    {
! 	      if (parse_ioread(&parse->parseio, *s++, &ts))
  		{
  		  /*
  		   * got something good to eat
--- 1718,1724 ----
  
  	  while (i-- > 0)
  	    {
! 	      if (parse_ioread(&parse->parseio, *s++, ts))
  		{
  		  /*
  		   * got something good to eat
***************
*** 2042,2052 ****
    register int i;
  
    syslog(LOG_INFO, "PARSE receiver #%d: running time: %s",
! 	 CL_UNIT(parse->unit),
  	 l_mktime(current_time - parse->timestarted));
  
    syslog(LOG_INFO, "PARSE receiver #%d: current status: %s",
! 	 CL_UNIT(parse->unit),
  	 clockstatus(parse->status));
  
    for (i = 0; i <= CEVNT_MAX; i++)
--- 2042,2052 ----
    register int i;
  
    syslog(LOG_INFO, "PARSE receiver #%d: running time: %s",
! 	 CLK_UNIT(parse->peer),
  	 l_mktime(current_time - parse->timestarted));
  
    syslog(LOG_INFO, "PARSE receiver #%d: current status: %s",
! 	 CLK_UNIT(parse->peer),
  	 clockstatus(parse->status));
  
    for (i = 0; i <= CEVNT_MAX; i++)
***************
*** 2069,2075 ****
  
        if (stime)
  	syslog(LOG_INFO, "PARSE receiver #%d: state %18s: %13s (%3d.%02d%%)",
! 	       CL_UNIT(parse->unit),
  	       clockstatus(i),
  	       l_mktime(stime),
  	       percent / 100, percent % 100);
--- 2069,2075 ----
  
        if (stime)
  	syslog(LOG_INFO, "PARSE receiver #%d: state %18s: %13s (%3d.%02d%%)",
! 	       CLK_UNIT(parse->peer),
  	       clockstatus(i),
  	       l_mktime(stime),
  	       percent / 100, percent % 100);
***************
*** 2113,2120 ****
  {
  	register struct parseunit *parse;
  
- 	unit = CL_UNIT(unit);
- 	
  	if (unit >= MAXUNITS) {
  		syslog(LOG_ERR,
  		  "PARSE receiver #%d: parse_shutdown: INTERNAL ERROR, unit invalid (max %d)",
--- 2113,2118 ----
***************
*** 2124,2130 ****
  
  	parse = parseunits[unit];
  	
! 	if (parse && !parse->peer) {
  		syslog(LOG_ERR,
  		 "PARSE receiver #%d: parse_shutdown: INTERNAL ERROR, unit not in use", unit);
  		return;
--- 2122,2128 ----
  
  	parse = parseunits[unit];
  	
! 	if (!parse || !parse->peer) {
  		syslog(LOG_ERR,
  		 "PARSE receiver #%d: parse_shutdown: INTERNAL ERROR, unit not in use", unit);
  		return;
***************
*** 2164,2170 ****
  	  (void) close(parse->fd);
  
  	syslog(LOG_INFO, "PARSE receiver #%d: reference clock \"%s\" removed",
! 	       CL_UNIT(parse->unit), parse->parse_type->cl_description);
  
  	parse->peer = (struct peer *)0; /* unused now */
  }
--- 2162,2168 ----
  	  (void) close(parse->fd);
  
  	syslog(LOG_INFO, "PARSE receiver #%d: reference clock \"%s\" removed",
! 	       CLK_UNIT(parse->peer), parse->parse_type->cl_description);
  
  	parse->peer = (struct peer *)0; /* unused now */
  }
***************
*** 2190,2197 ****
    parsectl_t tmp_ctl;
    u_int type;
  
!   type = CL_TYPE(sysunit);
!   unit = CL_UNIT(sysunit);
  
    if (unit >= MAXUNITS)
      {
--- 2188,2195 ----
    parsectl_t tmp_ctl;
    u_int type;
  
!   type = CLK_TYPE(peer);
!   unit = sysunit;
  
    if (unit >= MAXUNITS)
      {
***************
*** 2203,2209 ****
    if ((type == ~0) || (clockinfo[type].cl_description == (char *)0))
      {
        syslog(LOG_ERR, "PARSE receiver #%d: parse_start: unsupported clock type %d (max %d)",
! 	     unit, CL_REALTYPE(sysunit), ncltypes-1);
        return 0;
      }
  
--- 2201,2207 ----
    if ((type == ~0) || (clockinfo[type].cl_description == (char *)0))
      {
        syslog(LOG_ERR, "PARSE receiver #%d: parse_start: unsupported clock type %d (max %d)",
! 	     unit, CLK_REALTYPE(peer), ncltypes-1);
        return 0;
      }
  
***************
*** 2335,2341 ****
        disablec = fpathconf(parse->fd, _PC_VDISABLE);
        if (disablec == -1 && errno)
  	{
!           syslog(LOG_ERR, "PARSE receiver #%d: parse_start: fpathconf(fd, _PC_VDISABLE): %m", CL_UNIT(parse->unit));
            memset((char *)tm.c_cc, 0, sizeof(tm.c_cc)); /* best guess */
  	}
        else
--- 2333,2339 ----
        disablec = fpathconf(parse->fd, _PC_VDISABLE);
        if (disablec == -1 && errno)
  	{
!           syslog(LOG_ERR, "PARSE receiver #%d: parse_start: fpathconf(fd, _PC_VDISABLE): %m", CLK_UNIT(parse->peer));
            memset((char *)tm.c_cc, 0, sizeof(tm.c_cc)); /* best guess */
  	}
        else
***************
*** 2403,2409 ****
  	if (i < 0) {
  	  syslog(LOG_ERR, 
  	    "PARSE receiver #%d: lowrts_poll: failed to lower RTS: %m", 
! 	    CL_UNIT(parse->unit));
  	}
        }
  #endif
--- 2401,2407 ----
  	if (i < 0) {
  	  syslog(LOG_ERR, 
  	    "PARSE receiver #%d: lowrts_poll: failed to lower RTS: %m", 
! 	    CLK_UNIT(parse->peer));
  	}
        }
  #endif
***************
*** 2454,2460 ****
      }
  
    if (!(parse->parse_type->cl_flags & PARSE_F_POLLONLY) &&
!       (CL_PPS(parse->unit) || (parse->parse_type->cl_flags & PARSE_F_NOPOLLONLY)))
      {
        /*
         * Insert in async io device list.
--- 2452,2458 ----
      }
  
    if (!(parse->parse_type->cl_flags & PARSE_F_POLLONLY) &&
!       (CLK_PPS(parse->peer) || (parse->parse_type->cl_flags & PARSE_F_NOPOLLONLY)))
      {
        /*
         * Insert in async io device list.
***************
*** 2468,2474 ****
  	  if (parse->parse_type->cl_flags & PARSE_F_NOPOLLONLY)
  	    {
  	      syslog(LOG_ERR,
! 		     "PARSE receiver #%d: parse_start: addclock %s fails (ABORT - clock type requires async io)", CL_UNIT(parse->unit), parsedev);
  	      parse_shutdown(parse->unit); /* let our cleaning staff do the work */
  	      return 0;
  	    }
--- 2466,2472 ----
  	  if (parse->parse_type->cl_flags & PARSE_F_NOPOLLONLY)
  	    {
  	      syslog(LOG_ERR,
! 		     "PARSE receiver #%d: parse_start: addclock %s fails (ABORT - clock type requires async io)", CLK_UNIT(parse->peer), parsedev);
  	      parse_shutdown(parse->unit); /* let our cleaning staff do the work */
  	      return 0;
  	    }
***************
*** 2475,2481 ****
  	  else
  	    {
  	      syslog(LOG_ERR,
! 		     "PARSE receiver #%d: parse_start: addclock %s fails (switching to polling mode)", CL_UNIT(parse->unit), parsedev);
  	    }
  	}
        else
--- 2473,2479 ----
  	  else
  	    {
  	      syslog(LOG_ERR,
! 		     "PARSE receiver #%d: parse_start: addclock %s fails (switching to polling mode)", CLK_UNIT(parse->peer), parsedev);
  	    }
  	}
        else
***************
*** 2495,2501 ****
  	  fdpps = parse->fd;
  	  if (!PARSE_DISABLE(parse))
  	    {
! 	      syslog(LOG_ERR, "PARSE receiver #%d: parse_start: parse_disable() FAILED", CL_UNIT(parse->unit));
  	      parse_shutdown(parse->unit); /* let our cleaning staff do the work */
  	      return 0;
  	    }
--- 2493,2499 ----
  	  fdpps = parse->fd;
  	  if (!PARSE_DISABLE(parse))
  	    {
! 	      syslog(LOG_ERR, "PARSE receiver #%d: parse_start: parse_disable() FAILED", CLK_UNIT(parse->peer));
  	      parse_shutdown(parse->unit); /* let our cleaning staff do the work */
  	      return 0;
  	    }
***************
*** 2502,2508 ****
  	}
        else
  	{
! 	  syslog(LOG_NOTICE, "PARSE receiver #%d: parse_start: loopfilter PPS already active - no PPS via CIOGETEV", CL_UNIT(parse->unit));
  	}
      }
  #endif
--- 2500,2506 ----
  	}
        else
  	{
! 	  syslog(LOG_NOTICE, "PARSE receiver #%d: parse_start: loopfilter PPS already active - no PPS via CIOGETEV", CLK_UNIT(parse->peer));
  	}
      }
  #endif
***************
*** 2528,2553 ****
     * print out configuration
     */
    syslog(LOG_INFO, "PARSE receiver #%d: reference clock \"%s\" (device %s) added",
! 	 CL_UNIT(parse->unit),
  	 parse->parse_type->cl_description, parsedev);
  
    syslog(LOG_INFO, "PARSE receiver #%d:  Stratum %d, %sPPS support, trust time %s, precision %d",
! 	 CL_UNIT(parse->unit),
! 	 parse->peer->stratum, (parse->pollonly || !CL_PPS(parse->unit)) ? "no " : "",
  	 l_mktime(parse->parse_type->cl_maxunsync), parse->peer->precision);
  
    syslog(LOG_INFO, "PARSE receiver #%d:  rootdelay %s s, phaseadjust %s s, %s IO handling",
! 	 CL_UNIT(parse->unit),
  	 ufptoa(parse->parse_type->cl_rootdelay, 6),
  	 lfptoa(&parse->basedelay, 8),
  	 parse->binding->bd_description);
  
!   syslog(LOG_INFO, "PARSE receiver #%d:  Format recognition: %s", CL_UNIT(parse->unit),
  	 !(*parse->parse_type->cl_format) ? "<AUTOMATIC>" : parse->parse_type->cl_format);
  
  #ifdef PPSPPS
    syslog(LOG_INFO, "PARSE receiver #%d: %sCD PPS support",
! 	 CL_UNIT(parse->unit),
  	 (fdpps == parse->fd) ? "" : "NO ");
  #endif
  
--- 2526,2551 ----
     * print out configuration
     */
    syslog(LOG_INFO, "PARSE receiver #%d: reference clock \"%s\" (device %s) added",
! 	 CLK_UNIT(parse->peer),
  	 parse->parse_type->cl_description, parsedev);
  
    syslog(LOG_INFO, "PARSE receiver #%d:  Stratum %d, %sPPS support, trust time %s, precision %d",
! 	 CLK_UNIT(parse->peer),
! 	 parse->peer->stratum, (parse->pollonly || !CLK_PPS(parse->peer)) ? "no " : "",
  	 l_mktime(parse->parse_type->cl_maxunsync), parse->peer->precision);
  
    syslog(LOG_INFO, "PARSE receiver #%d:  rootdelay %s s, phaseadjust %s s, %s IO handling",
! 	 CLK_UNIT(parse->peer),
  	 ufptoa(parse->parse_type->cl_rootdelay, 6),
  	 lfptoa(&parse->basedelay, 8),
  	 parse->binding->bd_description);
  
!   syslog(LOG_INFO, "PARSE receiver #%d:  Format recognition: %s", CLK_UNIT(parse->peer),
  	 !(*parse->parse_type->cl_format) ? "<AUTOMATIC>" : parse->parse_type->cl_format);
  
  #ifdef PPSPPS
    syslog(LOG_INFO, "PARSE receiver #%d: %sCD PPS support",
! 	 CLK_UNIT(parse->peer),
  	 (fdpps == parse->fd) ? "" : "NO ");
  #endif
  
***************
*** 2564,2571 ****
  {
    register struct parseunit *parse;
  
-   unit = CL_UNIT(unit);
- 
    if (unit >= MAXUNITS)
      {
        syslog(LOG_ERR, "PARSE receiver #%d: poll: INTERNAL: unit invalid",
--- 2562,2567 ----
***************
*** 2575,2581 ****
  
    parse = parseunits[unit];
  
!   if (!parse->peer)
      {
        syslog(LOG_ERR, "PARSE receiver #%d: poll: INTERNAL: unit unused",
  	     unit);
--- 2571,2577 ----
  
    parse = parseunits[unit];
  
!   if (!parse || !parse->peer)
      {
        syslog(LOG_ERR, "PARSE receiver #%d: poll: INTERNAL: unit unused",
  	     unit);
***************
*** 2610,2616 ****
  	  parse->lastmissed = current_time;
  	  parse_event(parse, CEVNT_TIMEOUT);
  
!           syslog(LOG_WARNING, "PARSE receiver #%d: no data from device within poll interval", CL_UNIT(parse->unit));
  	}
        parse->pollneeddata = 1;
        if (parse->parse_type->cl_poll)
--- 2606,2612 ----
  	  parse->lastmissed = current_time;
  	  parse_event(parse, CEVNT_TIMEOUT);
  
!           syslog(LOG_WARNING, "PARSE receiver #%d: no data from device within poll interval", CLK_UNIT(parse->peer));
  	}
        parse->pollneeddata = 1;
        if (parse->parse_type->cl_poll)
***************
*** 2657,2665 ****
    unsigned LONG type;
    static char outstatus[400];	/* status output buffer */
  
-   type = CL_TYPE(unit);
-   unit = CL_UNIT(unit);
- 
    if (out)
      {
        out->lencode       = 0;
--- 2653,2658 ----
***************
*** 2687,2692 ****
--- 2680,2687 ----
        return;
      }
  
+   type = CLK_TYPE(parse->peer);
+ 
    if (in)
      {
        if (in->haveflags & CLK_HAVETIME1)
***************
*** 2978,2984 ****
        char buffer[200];
  
        syslog(LOG_WARNING, "PARSE receiver #%d: conversion status \"%s\"",
! 	     CL_UNIT(parse->unit), parsestatus(parsetime->parse_status, buffer));
  
        if ((parsetime->parse_status & CVT_MASK) == CVT_FAIL)
  	{
--- 2973,2979 ----
        char buffer[200];
  
        syslog(LOG_WARNING, "PARSE receiver #%d: conversion status \"%s\"",
! 	     CLK_UNIT(parse->peer), parsestatus(parsetime->parse_status, buffer));
  
        if ((parsetime->parse_status & CVT_MASK) == CVT_FAIL)
  	{
***************
*** 2991,3002 ****
  
  	  if (!PARSE_GETTIMECODE(parse, &tmpctl))
  	    {
! 	      syslog(LOG_ERR, "PARSE receiver #%d: parse_process: parse_timecode() FAILED", CL_UNIT(parse->unit));
  	    }
  	  else
  	    {
  	      syslog(LOG_WARNING, "PARSE receiver #%d: FAILED TIMECODE: \"%s\"",
! 		     CL_UNIT(parse->unit), mkascii(buffer, sizeof buffer, tmpctl.parsegettc.parse_buffer, tmpctl.parsegettc.parse_count - 1));
  	      parse->badformat += tmpctl.parsegettc.parse_badformat;
  	    }
  	}
--- 2986,2997 ----
  
  	  if (!PARSE_GETTIMECODE(parse, &tmpctl))
  	    {
! 	      syslog(LOG_ERR, "PARSE receiver #%d: parse_process: parse_timecode() FAILED", CLK_UNIT(parse->peer));
  	    }
  	  else
  	    {
  	      syslog(LOG_WARNING, "PARSE receiver #%d: FAILED TIMECODE: \"%s\"",
! 		     CLK_UNIT(parse->peer), mkascii(buffer, sizeof buffer, tmpctl.parsegettc.parse_buffer, tmpctl.parsegettc.parse_count - 1));
  	      parse->badformat += tmpctl.parsegettc.parse_badformat;
  	    }
  	}
***************
*** 3053,3064 ****
  
        if (!PARSE_GETFMT(parse, &tmpctl))
  	{
! 	  syslog(LOG_ERR, "PARSE receiver #%d: parse_getfmt() FAILED", CL_UNIT(parse->unit));
  	}
        else
  	{
  	  syslog(LOG_INFO, "PARSE receiver #%d: new packet format \"%s\"",
! 		 CL_UNIT(parse->unit), tmpctl.parseformat.parse_buffer);
  	}
        parse->lastformat = parsetime->parse_format;
      }
--- 3048,3059 ----
  
        if (!PARSE_GETFMT(parse, &tmpctl))
  	{
! 	  syslog(LOG_ERR, "PARSE receiver #%d: parse_getfmt() FAILED", CLK_UNIT(parse->peer));
  	}
        else
  	{
  	  syslog(LOG_INFO, "PARSE receiver #%d: new packet format \"%s\"",
! 		 CLK_UNIT(parse->peer), tmpctl.parseformat.parse_buffer);
  	}
        parse->lastformat = parsetime->parse_format;
      }
***************
*** 3078,3084 ****
        (void) parsestate(parse->time.parse_state, tmp2);
  	
        syslog(LOG_INFO,"PARSE receiver #%d: STATE CHANGE: %s -> %s",
! 	     CL_UNIT(parse->unit), tmp2, tmp1);
      }
  
    /*
--- 3073,3079 ----
        (void) parsestate(parse->time.parse_state, tmp2);
  	
        syslog(LOG_INFO,"PARSE receiver #%d: STATE CHANGE: %s -> %s",
! 	     CLK_UNIT(parse->peer), tmp2, tmp1);
      }
  
    /*
***************
*** 3127,3133 ****
  	  if (current_time - parse->nosynctime > PARSENOSYNCREPEAT)
  	    {
  	      syslog(LOG_ERR,"PARSE receiver #%d: *STILL* NOT SYNCHRONIZED (POWERUP or no PZF signal)",
! 		     CL_UNIT(parse->unit));
  	      parse->nosynctime = current_time;
  	    }
  	}
--- 3122,3128 ----
  	  if (current_time - parse->nosynctime > PARSENOSYNCREPEAT)
  	    {
  	      syslog(LOG_ERR,"PARSE receiver #%d: *STILL* NOT SYNCHRONIZED (POWERUP or no PZF signal)",
! 		     CLK_UNIT(parse->peer));
  	      parse->nosynctime = current_time;
  	    }
  	}
***************
*** 3134,3140 ****
        else
  	{
  	  syslog(LOG_ERR,"PARSE receiver #%d: NOT SYNCHRONIZED",
! 		 CL_UNIT(parse->unit));
            parse->nosynctime = current_time;
  	}
      }
--- 3129,3135 ----
        else
  	{
  	  syslog(LOG_ERR,"PARSE receiver #%d: NOT SYNCHRONIZED",
! 		 CLK_UNIT(parse->peer));
            parse->nosynctime = current_time;
  	}
      }
***************
*** 3215,3221 ****
  	}
      }
  
!   if (PARSE_PPS(parsetime->parse_state) && CL_PPS(parse->unit))
      {
        l_fp offset;
  
--- 3210,3216 ----
  	}
      }
  
!   if (PARSE_PPS(parsetime->parse_state) && CLK_PPS(parse->peer))
      {
        l_fp offset;
  
***************
*** 3289,3295 ****
  
  
  #if defined(PPS) || defined(PPSCLK) || defined(PPSPPS) || defined(PARSEPPS)
!   if (CL_PPS(parse->unit) && !parse->pollonly && PARSE_SYNC(parsetime->parse_state))
      {
        /*
         * only provide PPS information when clock
--- 3284,3290 ----
  
  
  #if defined(PPS) || defined(PPSCLK) || defined(PPSPPS) || defined(PARSEPPS)
!   if (CLK_PPS(parse->peer) && !parse->pollonly && PARSE_SYNC(parsetime->parse_state))
      {
        /*
         * only provide PPS information when clock
***************
*** 3390,3401 ****
    rtc = write(parse->fd, ps, ct);
    if (rtc < 0)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: poll_dpoll: failed to send cmd to clock: %m", CL_UNIT(parse->unit));
      }
    else
      if (rtc != ct)
        {
! 	syslog(LOG_ERR, "PARSE receiver #%d: poll_dpoll: failed to send cmd incomplete (%d of %d bytes sent)", CL_UNIT(parse->unit), rtc, ct);
        }
  }
  
--- 3385,3396 ----
    rtc = write(parse->fd, ps, ct);
    if (rtc < 0)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: poll_dpoll: failed to send cmd to clock: %m", CLK_UNIT(parse->peer));
      }
    else
      if (rtc != ct)
        {
! 	syslog(LOG_ERR, "PARSE receiver #%d: poll_dpoll: failed to send cmd incomplete (%d of %d bytes sent)", CLK_UNIT(parse->peer), rtc, ct);
        }
  }
  
***************
*** 3483,3489 ****
     */
    if (TTY_GETATTR(parse->fd, &tm) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: trimbletaip_init: tcgetattr(fd, &tm): %m", CL_UNIT(parse->unit));
        return 0;
      }
    else
--- 3478,3484 ----
     */
    if (TTY_GETATTR(parse->fd, &tm) == -1)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: trimbletaip_init: tcgetattr(fd, &tm): %m", CLK_UNIT(parse->peer));
        return 0;
      }
    else
***************
*** 3492,3498 ****
  	
        if (TTY_SETATTR(parse->fd, &tm) == -1)
  	{
! 	  syslog(LOG_ERR, "PARSE receiver #%d: trimbletaip_init: tcsetattr(fd, &tm): %m", CL_UNIT(parse->unit));
  	  return 0;
  	}
      }
--- 3487,3493 ----
  	
        if (TTY_SETATTR(parse->fd, &tm) == -1)
  	{
! 	  syslog(LOG_ERR, "PARSE receiver #%d: trimbletaip_init: tcsetattr(fd, &tm): %m", CLK_UNIT(parse->peer));
  	  return 0;
  	}
      }
***************
*** 3621,3627 ****
  
    if (write(parse->fd, buf->txt, buf->idx) != buf->idx)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: sendetx: failed to send cmd to clock: %m", CL_UNIT(parse->unit));
      }
  }
  
--- 3616,3622 ----
  
    if (write(parse->fd, buf->txt, buf->idx) != buf->idx)
      {
!       syslog(LOG_ERR, "PARSE receiver #%d: sendetx: failed to send cmd to clock: %m", CLK_UNIT(parse->peer));
      }
  }
  



