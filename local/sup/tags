ABS	c.h	/^#define ABS(x) ((x)>=0?(x):-(x))$/
HASHFUNC	supfilesrv.c	/^#define HASHFUNC(x,y) ((x)&HASHMASK)$/
Hfree	supfilesrv.c	/^Hfree (table)$/
Hinsert	supfilesrv.c	/^Hinsert (table,num1,num2,name,tree)$/
Hlookup	supfilesrv.c	/^HASH *Hlookup (table,num1,num2)$/
Lhash	supcmisc.c	/^int Lhash (name)$/
Linsert	supcmisc.c	/^Linsert (table,name,number)$/
Llookup	supcmisc.c	/^LIST *Llookup (table,name)$/
MAX	c.h	/^#define	MAX(a,b) (((a)>(b))?(a):(b))$/
MIN	c.h	/^#define	MIN(a,b) (((a)<(b))?(a):(b))$/
Msupcmain	supcmain.c	/^main (argc,argv)$/
Msupfilesrv	supfilesrv.c	/^main (argc,argv)$/
Msupscan	supscan.c	/^main (argc,argv)$/
Tbalance	stree.c	/^Tbalance (t)$/
Tfree	stree.c	/^Tfree (t)$/
Tinsert	stree.c	/^TREE *Tinsert (t,p,find)$/
Tinsertavl	stree.c	/^TREE *Tinsertavl (t,p,find,dh)$/
Tlookup	stree.c	/^TREE *Tlookup (t,p)$/
Tmake	stree.c	/^TREE *Tmake (p)$/
Tprint	stree.c	/^Tprint (t,p)		\/* print tree -- for debugging *\/$/
Tprintone	stree.c	/^int Tprintone (t)$/
Tprocess	stree.c	/^int Tprocess (t,f,args)$/
Trothh	stree.c	/^TREE *Trothh (tp,th)$/
Trothl	stree.c	/^TREE *Trothl (tp,th)$/
Trotlh	stree.c	/^TREE *Trotlh (tp,tl)$/
Trotll	stree.c	/^TREE *Trotll (tp,tl)$/
Trprocess	stree.c	/^int Trprocess (t,f,args)$/
Tsearch	stree.c	/^TREE *Tsearch (t,p)$/
Tsubprocess	stree.c	/^int Tsubprocess (t,reverse,f,argp)$/
XFERSIZE	scmio.c	/^#define XFERSIZE(count) ((count > FILEXFER) ? FILE/
_VICEIOCTL	supfilesrv.c	/^#define _VICEIOCTL(id)  ((unsigned int ) _IOW(V, i/
_ci_help	ci.c	/^static int _ci_help (filspec)$/
_ci_set	ci.c	/^static _ci_set (etype,eptr,arg)$/
_ci_sho	ci.c	/^static _ci_sho (etype,eptr)$/
addone	expand.c	/^static addone(s1, s2)$/
addpath	expand.c	/^static addpath(c)$/
amatch	expand.c	/^static amatch(s, p)$/
answer	supfilesrv.c	/^answer ()$/
anyglob	scan.c	/^anyglob (pattern,match)$/
atoo	atoo.c	/^unsigned int atoo(ap)$/
byteswap	scm.c	/^int byteswap (in)$/
caseE	c.h	/^#define caseE(enum_type)	case (int)(enum_type)$/
cdprefix	scan.c	/^cdprefix (prefix)$/
changeuid	supfilesrv.c	/^char *changeuid (namep,passwordp,fileuid,filegid)$/
checkcoll	supcmain.c	/^checkcoll (t)$/
chkscanfile	scan.c	/^static chkscanfile (scanfile)$/
chldsig	supfilesrv.c	/^chldsig()$/
ci	ci.c	/^ci (prompt,fil,depth,list,helppath,cmdfpath)$/
ci_hcomp	ci.c	/^static ci_hcomp (p,q)$/
ci_help	ci.c	/^static ci_help (topic,helppath)$/
ci_set	ci.c	/^static ci_set (entry,arg)$/
ci_show	ci.c	/^static ci_show (entry,arg,mode)$/
copyfile	supcmeat.c	/^int copyfile (to,from)$/
crosspatch	scmio.c	/^crosspatch ()$/
decode	scmio.c	/^static decode (in,out,count)$/
deleteone	supcmeat.c	/^deleteone (t)$/
denyone	supcmeat.c	/^denyone (t)$/
dobackoff	scm.c	/^dobackoff (t,b)$/
docrypt	supfilesrv.c	/^docrypt ()$/
done	supcmeat.c	/^done (value,fmt,va_alist)$/
dorun	run.c	/^int dorun (name,argv,usepath)$/
doscan	scan.c	/^doscan (listfile)$/
doswitch	supcmain.c	/^doswitch (argp,collTp,oflagsp,aflagsp)$/
encode	scmio.c	/^static encode (in,out,count)$/
errmsg	errmsg.c	/^char *errmsg(cod)$/
estabd	supcmisc.c	/^int estabd (fname,dname)$/
establishdir	supcmisc.c	/^int establishdir (fname)$/
execbrc	expand.c	/^static execbrc(p, s)$/
execone	supcmeat.c	/^execone (t)			\/* execute command for file *\/$/
expTinsert	scan.c	/^expTinsert (p,t,flags,exec)$/
expand	expand.c	/^int expand(spec, buffer, bufsize)$/
ffilecopy	ffilecopy.c	/^int ffilecopy (here,there)$/
filecopy	filecopy.c	/^int filecopy (here,there)$/
finishone	supcmeat.c	/^finishone (t,finishfile)$/
finishup	supcmeat.c	/^finishup (x)$/
fmttime	supcmisc.c	/^char *fmttime (time)$/
gconvert	supfilesrv.c	/^char *gconvert (gid)$/
getcoll	supcmeat.c	/^getcoll ()$/
getcollhost	supcmeat.c	/^TREE *getcollhost (tout,backoff,state,nhostsp)$/
getcryptbuf	scmio.c	/^static getcryptbuf (x)$/
gethdir	expand.c	/^static gethdir(home)$/
getnams	supcname.c	/^getnams ()$/
getonehost	supcmeat.c	/^getonehost (t,state)$/
getrelease	scan.c	/^getrelease (release)$/
getscan	scan.c	/^getscan (listfile,scanfile)$/
getscanfile	scan.c	/^int getscanfile (scanfile)$/
getscanlists	scan.c	/^getscanlists ()$/
glob	expand.c	/^static glob(as)$/
goaway	supcmeat.c	/^goaway (fmt,va_alist)$/
init	supcmain.c	/^char *init (argc,argv)$/
itoa	errmsg.c	/^static char *itoa(p,n)$/
link_nofollow	supfilesrv.c	/^int link_nofollow(on)$/
linkcheck	supfilesrv.c	/^TREE *linkcheck (t,d,i)$/
linkone	supcmeat.c	/^linkone (t,fname)			\/* link to file already recei/
listdir	scan.c	/^listdir (name,always)		\/* expand directory *\/$/
listentry	scan.c	/^listentry(name,fullname,updir,always)$/
listfiles	supcmeat.c	/^int listfiles ()$/
listname	scan.c	/^listname (name,st)$/
listone	scan.c	/^listone (t)		\/* expand and add one name from upgr/
local_file	supfilesrv.c	/^local_file(handle, sinfo)$/
localhost	supscan.c	/^int localhost (host)$/
lockout	supcmisc.c	/^lockout (on)		\/* lock out interrupts *\/$/
logerr	log.c	/^logerr(fmt,va_alist)$/
login	supcmeat.c	/^int login ()$/
loginfo	log.c	/^loginfo(fmt,va_alist)$/
logopen	log.c	/^logopen(program)$/
logquit	log.c	/^logquit(retval,fmt,va_alist)$/
makescan	scan.c	/^makescan (listfile,scanfile)$/
makescanfile	scan.c	/^static makescanfile (scanfile)$/
makescanlists	scan.c	/^makescanlists ()$/
match	expand.c	/^static match(s, p)$/
matchdir	expand.c	/^static matchdir(pattern)$/
matchhost	scm.c	/^int matchhost (name)	\/* is this name of remote ho/
msgcrypt	supmsg.c	/^int msgcrypt ()$/
msgcryptok	supmsg.c	/^int msgcryptok ()$/
msgdeny	supmsg.c	/^int msgdeny ()$/
msgdone	supmsg.c	/^int msgdone ()$/
msggoaway	supmsg.c	/^int msggoaway ()$/
msglist	supmsg.c	/^int msglist ()$/
msglogack	supmsg.c	/^int msglogack ()$/
msglogin	supmsg.c	/^int msglogin ()$/
msgneed	supmsg.c	/^int msgneed ()$/
msgrecv	supmsg.c	/^int msgrecv (xferfile,args)$/
msgrefuse	supmsg.c	/^int msgrefuse ()$/
msgsend	supmsg.c	/^int msgsend ()$/
msgsetup	supmsg.c	/^int msgsetup ()$/
msgsetupack	supmsg.c	/^int msgsetupack ()$/
msgsignon	supmsg.c	/^int msgsignon ()$/
msgsignonack	supmsg.c	/^int msgsignonack ()$/
msgxpatch	supmsg.c	/^int msgxpatch ()$/
myhost	scm.c	/^char *myhost ()		\/* find my host name *\/$/
needone	supcmeat.c	/^needone (t)$/
netcrypt	scmio.c	/^netcrypt (pword)$/
notify	supcmisc.c	/^notify (fmt,va_alist)		\/* record error message */
nxtarg	nxtarg.c	/^char *nxtarg (q,brk)$/
omitanyone	scan.c	/^omitanyone (t,filename)$/
parsecoll	supcparse.c	/^parsecoll(c,collname,args)$/
parserelease	scan.c	/^char *parserelease(tlp,relname,args)$/
passdelim	scan.c	/^passdelim (ptr,delim)		\/* skip over delimiter *\//
path	path.c	/^path (original,direc,file)$/
prepare	supcmeat.c	/^prepare (name,mode,newp,statp)$/
prereadcount	scmio.c	/^int prereadcount (count)		\/* preread count of dat/
prtime	supcmisc.c	/^prtime ()$/
quit	quit.c	/^quit (status, fmt, va_alist)$/
readcount	scmio.c	/^int readcount (count)			\/* read count of data blo/
readdata	scmio.c	/^readdata (count,data)		\/* read raw data from netw/
readfile	scmio.c	/^readfile (f)		\/* read data block into open file */
readflush	scmio.c	/^readflush ()$/
readint	scmio.c	/^int readint (buf)		\/* read int data block *\/$/
readlistfile	scan.c	/^readlistfile (fname)$/
readmend	scmio.c	/^readmend ()$/
readmint	scmio.c	/^readmint (msg,buf)		\/* read int message *\/$/
readmnull	scmio.c	/^readmnull (msg)		\/* read null message *\/$/
readmsg	scmio.c	/^readmsg (msg)		\/* read header for expected messag/
readmstr	scmio.c	/^int readmstr (msg,buf)		\/* read string message */
readskip	scmio.c	/^readskip ()			\/* skip over one input block *\/$/
readstring	scmio.c	/^int readstring (buf)	\/* read string data block */
recordexec	scan.c	/^recordexec (t,scanF)$/
recordone	scan.c	/^recordone (t,scanF)$/
recvdir	supcmeat.c	/^int recvdir (t,new,statp)		\/* receive directory f/
recvfiles	supcmeat.c	/^recvfiles ()$/
recvone	supcmeat.c	/^recvone (t,recvmore)$/
recvreg	supcmeat.c	/^int recvreg (t,new,statp)			\/* receive file from /
recvsym	supcmeat.c	/^int recvsym (t,new,statp)			\/* receive symbolic l/
refuseone	supmsg.c	/^static int refuseone (t)$/
remotehost	scm.c	/^char *remotehost ()	\/* remote host name (if known/
request	scm.c	/^request (server,hostname,retry)		\/* connect to se/
requestend	scm.c	/^requestend ()			\/* end connection to server *\/$/
run	run.c	/^int run (name,va_alist)$/
runp	run.c	/^int runp (name,va_alist)$/
runv	run.c	/^int runv (name,argv)$/
runvp	run.c	/^int runvp (name,argv)$/
salloc	salloc.c	/^char *salloc(p)$/
samehost	scm.c	/^int samehost ()		\/* is remote host same as local /
scanone	scan.c	/^scanone (t)$/
scmerr	scm.c	/^int scmerr (errno,fmt,va_alist)$/
senddir	supfilesrv.c	/^senddir (t)$/
sendfile	supfilesrv.c	/^sendfile (t,fd)$/
sendfiles	supfilesrv.c	/^sendfiles ()$/
sendone	supfilesrv.c	/^sendone (t)$/
service	scm.c	/^service ()$/
serviceend	scm.c	/^serviceend ()		\/* kill net file after use in daem/
servicekill	scm.c	/^servicekill ()		\/* kill net file in daemon's pare/
serviceprep	scm.c	/^serviceprep ()		\/* kill temp socket in daemon *\//
servicesetup	scm.c	/^servicesetup (server)		\/* listen for clients *\/$/
setup	supcmeat.c	/^setup (t)$/
signon	supcmeat.c	/^int signon (t,nhosts,tout)$/
sizeofA	c.h	/^#define sizeofA(array)	(sizeof(array)\/sizeof(arra/
sizeofS	c.h	/^#define	sizeofS(string)	(sizeof(string) - 1)$/
skipover	skipto.c	/^char *skipover (string,charset)$/
skipto	skipto.c	/^char *skipto (string,charset)$/
stat_info_ok	supfilesrv.c	/^int stat_info_ok(sb1, sb2)$/
thishost	scm.c	/^int thishost (host)$/
uconvert	supfilesrv.c	/^char *uconvert (uid)$/
ugconvert	supcmisc.c	/^ugconvert (uname,gname,uid,gid,mode)$/
usage	supfilesrv.c	/^usage ()$/
vfprintf	vprintf.c	/^vfprintf(f, fmt, args)$/
vprintf	vprintf.c	/^vprintf(fmt, args)$/
vsnprintf	vprintf.c	/^vsnprintf(s, n, fmt, args)$/
vsprintf	vprintf.c	/^vsprintf(s, fmt, args)$/
writeblock	scmio.c	/^writeblock (count,data)		\/* write data block *\/$/
writedata	scmio.c	/^writedata (count,data)		\/* write raw data to netw/
writefile	scmio.c	/^writefile (f)		\/* write open file as a data block/
writeint	scmio.c	/^writeint (i)		\/* write int as data block *\/$/
writemend	scmio.c	/^writemend ()		\/* write end of message *\/$/
writemint	scmio.c	/^writemint (msg,i)		\/* write message of one int */
writemnull	scmio.c	/^writemnull (msg)	\/* write message with no data */
writemsg	scmio.c	/^writemsg (msg)		\/* write start of message *\/$/
writemstr	scmio.c	/^writemstr (msg,p)		\/* write message of one string/
writeone	supmsg.c	/^static int writeone (t)$/
writestring	scmio.c	/^writestring (p)		\/* write string as data block */
