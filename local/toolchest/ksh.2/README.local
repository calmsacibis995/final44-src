Local BSD changes - comments -> marc@okeeffe.Berkeley.EDU

o  new option: loginsh or ksh -l

	set -o loginsh

   When pre-pending a dash to argv[0] is not convienent, and you
   want the shell to behave like a login shell.

o  alias and function names - all identifiers can be arbitrary

   We don't see any reason why not.  
   So you can alias "!!" to be your favorite command.

o  alternation argument expansion - brace "globing"

   abc{def,ghi} -> abcdef abcghi

o  kill -STOP $$ fixed
   
   The internal kill command will not stop a login shell.  This
   was previously implemented but broken.

o  Internal break limit rasied to 4meg

   There was an artifical limit of 128K on the program break.  We
   rasied it to 4meg but are contemplaiting removing it entirely
   (unless DBUG is set).

o  reset ignored sigint, sigquit, or sighup if interactive.
   so 
	rsh foobar 'xterm ksh&' 
   works.

o  add '^' as left anchor for vi search string.

o default .kshrc (should be .env ??? - yes) so rsh foobar picks
  up .env and sets PATH and whatever else.

o message "Use exit to leave shell" when shell is not a login shell,
  instead of always saying "Use exit to logout".


TODO

These are currently known bugs or intended changes:
If you do any of these changes or fix any bugs please send
me the code (marc@ucbvax.berkeley.edu or marc@okeeffe.berkeley.edu).

o shouldn't ksh put jobs started in the .profile in a separate
  process group??? - it doesn't and they recieve keyboard generated
  signals since they share the same pgrp as the shell, and although
  the commands are arguably broken to mis-behave (read: to re-enable
  ignored signals), it is strange to have them in the same pgrp as
  the shell on a system that supports job control.

o  BUG: some ksh's hang around spinning on reads.
	continue on to ->

o  feature: exit after 20 consecutive EOFS

   Occasionally we see an orphaned ksh looping endlessly.
   I believe it missed some signal or didn't exit properly,
   and is now reading EOF's and not exiting (because of
   ignoreeof).  A simple workaround and generally a good idea
   is to exit after 20 or so EOFS, even if ignoreeof is defined.

o  feature: auto seeding of random number generator

   I'm not sure if this is an oversite or a feature.  The builtin
   random number generator isn't initially seeded.  It \can/
   be seeded by setting RANDOM to some random number, but this
   is a real pain.  To reproduce this bug write a shell script
   that echos $RANDOM and make sure it is forked and exec'd
   (either by #! interpreter name, or calling ksh on the script).
   The same number will appear each time.


o  (mis)feature: fg shorthand

   A csh'ism.  The syntax "%jobname" where jobname can be arbitrary
   text, is a csh shorthand for "fg %jobname".  Csh users like
   this and miss it.  It seems very ugly to implement. I personally
   don't miss it.
