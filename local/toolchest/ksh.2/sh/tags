Mmain	main.c	/^main(c, v)$/
Msetpgrp	setpgrp.c	/^main(argc, argv) $/
Msuid_exec	suid_exec.c	/^main(argc,argv)$/
_filbuf	io.c	/^_filbuf(iop)$/
_flsbuf	stdio.c	/^_flsbuf(c, iop)$/
access	main.c	/^access(name, mode)$/
addblok	blok.c	/^void	addblok(reqd)$/
addg	expand.c	/^static  void addg(as1,as2,as3,add_slash)$/
aeval	history.c	/^#define	aeval(str)	atoi(str)$/
append	vi.c	/^append(c, mode)$/
arg_build	args.c	/^char **arg_build(nargs,comptr)$/
arg_clear	args.c	/^void arg_clear()$/
arg_dolminus	args.c	/^char *arg_dolminus()$/
arg_expand	args.c	/^static int arg_expand(ac)$/
arg_free	args.c	/^DOLPTR arg_free(blk,flag)$/
arg_new	args.c	/^DOLPTR arg_new(argi,savargfor)$/
arg_opts	args.c	/^int arg_opts(argc,argv)$/
arg_reset	args.c	/^void arg_reset(blk,afor)$/
arg_set	args.c	/^void arg_set(argi)$/
arg_use	args.c	/^DOLPTR arg_use()$/
await	service.c	/^void	await(i, bckg)$/
backword	vi.c	/^backword(nwords, cmd)$/
bcopy	vfork.c	/^int bcopy(sp,dp,n)$/
beep	emacs.c	/^#define beep()		e_ringbell()$/
blt_no	macro.c	/^#define blt_no(t)	((t)>>(COMBITS+1))$/
builtin	builtin.c	/^void builtin(xbuiltin, argn, com,t)$/
busy	blok.c	/^#define busy(x)	(Rcheat((x)->word)&BUSY)$/
c2_eq	test.c	/^#define c2_eq(a,c1,c2)	(*a==c1 && *(a+1)==c2 && *(/
c_eq	test.c	/^#define c_eq(a,c)	(*a==c && *(a+1)==0)$/
catpath	service.c	/^char *catpath(path,name)$/
charlen	macro.c	/^static int	charlen(str)$/
checkfor	name.c	/^NAMPTR checkfor(name,root)$/
chkflags	cmd.c	/^static void chkflags(argp,fexp)$/
chkfree	blok.c	/^int	chkfree(ap)$/
chkmail	main.c	/^static void chkmail(files)$/
chkmem	blok.c	/^void chkmem()$/
chkopen	io.c	/^FILE *chkopen(name)$/
chkpipe	io.c	/^void	chkpipe(pv)$/
chkpr	main.c	/^void	chkpr(flag)$/
chkrdwr	io.c	/^FILE *chkrdwr(name,fd)$/
chksym	cmd.c	/^static void	chksym(sym)$/
chktrap	fault.c	/^void	chktrap()$/
chkword	cmd.c	/^static void	chkword()$/
close_pipes	args.c	/^void close_pipes()$/
closefd	history.c	/^#define closefd(f)	fclose(f)$/
clrsig	fault.c	/^void	clrsig(n)$/
cmd	cmd.c	/^TREPTR	cmd(sym,flg)$/
cntlmode	vi.c	/^cntlmode()$/
compress	service.c	/^static int compress(t)$/
comsubst	macro.c	/^static void comsubst(type)$/
control	edit.c	/^static int control(fd,request,arg)$/
copy	io.c	/^copy(ioparg)$/
copyargs	args.c	/^static DOLPTR copyargs(from, n, size)$/
copyto	macro.c	/^static char *copyto(endch)$/
countnam	name.c	/^static void	countnam()$/
cpystak	stak.c	/^STKPTR	cpystak(x)$/
create	io.c	/^FILE *create(s)$/
cursor	vi.c	/^cursor(x)$/
del_line	vi.c	/^del_line(mode)$/
delete	vi.c	/^delete(nchars, mode)$/
delmotion	vi.c	/^delmotion(motion, mode)$/
digit	vi.c	/^#define digit(c)	((c&~STRIP)==0 && isdigit(c))$/
do_whence	name.c	/^void	do_whence(com,flag)$/
doacct	service.c	/^void	doacct()$/
done	error.c	/^void done(sig)$/
dprint	expand.c	/^dprint(fmt,a1,a2,a3,a4,a5,a6,a7)$/
draw	emacs.c	/^draw(option)$/
e3	test.c	/^static e3()$/
e_crlf	edit.c	/^void e_crlf()$/
e_failed	editlib.c	/^e_failed(name,message)$/
e_flush	edit.c	/^void e_flush()$/
e_getchar	edit.c	/^e_getchar()$/
e_macro	edit.c	/^e_macro(i)$/
e_movstr	editlib.c	/^char *e_movstr(a,b)$/
e_ringbell	edit.c	/^void e_ringbell()$/
e_setup	edit.c	/^void	e_setup(fd,PRSIZE)$/
e_window	edit.c	/^int e_window()$/
eaccess	suid_exec.c	/^eaccess(name, mode)$/
echo_list	echo.c	/^int echo_list(raw,com,fd)$/
echo_mode	name.c	/^char *echo_mode()$/
endsh	suid_exec.c	/^static int endsh(shell)$/
endstak	stak.c	/^STKPTR	endstak(argp)$/
endword	vi.c	/^endword(nwords, cmd)$/
eq_inode	test.c	/^eq_inode(file1,file2)$/
error	edit.c	/^#define error(s)	failed(s,NULL)$/
escape	emacs.c	/^escape(out,count)$/
estabf	io.c	/^int	estabf(s,fd)$/
ex_xenix	service.c	/^static ex_xenix(file)$/
exec_here	apollo.c	/^int exec_here(com)$/
execa	service.c	/^void	execa(at,local)$/
execbrc	expand.c	/^execbrc(as, nomatchflg)$/
execexp	builtin.c	/^int execexp(s,f)$/
execs	service.c	/^static char *execs(ap,t)$/
execute	xec.c	/^execute(argt, execflg, apf1, apf2)$/
exfile	main.c	/^static void	exfile(prof)$/
exfunct	service.c	/^void exfunct(t,com,execflg,envlist)$/
exit	stdio.c	/^exit(n)$/
exitsh	error.c	/^void exitsh(xno)$/
exp	test.c	/^static exp(flag)$/
expand	expand.c	/^expand(as,nomatchflg)$/
expand1	expand.c	/^expand1(as,nomatchflg)$/
expand2	expand.c	/^int expand2(as,rcnt,nomatchflg)$/
exscript	service.c	/^static void exscript(p,t)$/
f_complete	expand.c	/^f_complete(name,suffix)$/
failed	error.c	/^void failed(s1,s2)$/
fault	fault.c	/^VOID	fault(sig)$/
fclose	stdio.c	/^fclose(iop)$/
fcntl	io.c	/^static int fcntl(f1,type,arg)$/
fdopen	io.c	/^FILE *fdopen(fd, mode)$/
fflush	stdio.c	/^fflush(iop)$/
file_fd	io.c	/^FILE	*file_fd(n)$/
flagset	builtin.c	/^static int flagset(flaglist,flagmask)$/
fold	vi.c	/^#define fold(c)		((c)&~040)	\/* lower and uppercas/
forward	vi.c	/^forward(nwords, cmd)$/
fputs	io.c	/^int fputs(s,fd)$/
fread	io.c	/^fread(ptr,size,count,iop)$/
free	blok.c	/^void	free(ap)$/
frenumber	io.c	/^FILE *frenumber(f1,f2)$/
fseek	stdio.c	/^fseek(iop, offset, ptrname)$/
fsizep	test.c	/^static fsizep(f)$/
ftime_compare	test.c	/^static time_t ftime_compare(file1,file2)$/
ftype	test.c	/^ftype(f,mask,field)$/
fullname	service.c	/^char	*fullname(fname)$/
gencpy	emacs.c	/^#define gencpy(a,b)	e_gencpy(a,b)$/
genenv	name.c	/^int	genenv()$/
genlen	emacs.c	/^#define genlen(str)	e_genlen(str)$/
genncpy	emacs.c	/^#define genncpy(a,b,n)	e_genncpy(a,b,n)$/
get_rand	name.c	/^static long get_rand()$/
get_second	name.c	/^static long get_second()$/
get_shell	vfork.c	/^int     get_shell(name,iname)$/
getch	macro.c	/^static int getch(endch)$/
getchar	vi.c	/^#define getchar()	e_getchar()$/
getcount	vi.c	/^getcount(c)$/
getline	vi.c	/^getline(mode)$/
getpath	service.c	/^char *getpath(s)$/
getppid	io.c	/^int getppid()$/
getpwd	main.c	/^char *getpwd(mode)$/
getsig	fault.c	/^void	getsig(n)$/
getstak	stak.c	/^STKPTR	getstak(asize)$/
heap	name.c	/^char *heap(v)$/
hist_cancel	history.c	/^void hist_cancel()$/
hist_check	history.c	/^static int hist_check(fd)$/
hist_close	history.c	/^void hist_close()$/
hist_copy	history.c	/^int hist_copy(s1,command,line)$/
hist_eof	history.c	/^void hist_eof()$/
hist_find	history.c	/^histloc hist_find(string,index1,flag,direction)$/
hist_flush	history.c	/^void hist_flush()$/
hist_list	history.c	/^long hist_list(offset,last,nl)$/
hist_locate	history.c	/^histloc hist_locate(command,line,lines)$/
hist_nearend	history.c	/^static int hist_nearend(fd,size)$/
hist_open	history.c	/^int  hist_open()$/
hist_position	history.c	/^long hist_position(n)$/
hist_rename	editlib.c	/^FILE *hist_rename(fd, fb)$/
hist_subst	history.c	/^void hist_subst(command,fd,replace)$/
hist_trim	history.c	/^static void hist_trim(fdo,n)$/
hist_word	history.c	/^char *hist_word(s1,word)$/
hread	emacs.c	/^hread(fd,buff,scend)$/
ignsig	fault.c	/^int	ignsig(n)$/
in_dir	suid_exec.c	/^static int in_dir(dir,shell)$/
init_jobs	jobs.c	/^int init_jobs(lflag)$/
initacct	service.c	/^void initacct()$/
initf	io.c	/^void	initf(fd)$/
initio	service.c	/^int	initio(iop,flag)$/
inittree	name.c	/^static struct Amemory *inittree(name_vals,nodes,at/
inout	cmd.c	/^static IOPTR	inout(lastio,flag)$/
interrupt	word.c	/^interrupt()$/
is_print	vi.c	/^#define is_print(c)	((c&~STRIP) || isprint(c))$/
isalph	vi.c	/^#define isalph(v)	isalnum(virtual[v])$/
isblank	vi.c	/^#define isblank(v)	isspace(virtual[v])$/
ismetach	vi.c	/^#define	ismetach(v)	ismeta(virtual[v])$/
ispipe	io.c	/^int ispipe(fd)$/
isword	emacs.c	/^#define isword(c)	isalnum(out[c])$/
item	cmd.c	/^static TREPTR	item(flag)$/
itos	string.c	/^char *itos(n)$/
link_iodocs	io.c	/^link_iodocs(i)$/
list	cmd.c	/^static TREPTR	list(flg)$/
locstak	stak.c	/^STKPTR	locstak()$/
mac_error	macro.c	/^static void mac_error()$/
mac_subst	macro.c	/^void mac_subst(in,ot)$/
macro	macro.c	/^char *macro(as)$/
mactrim	macro.c	/^char *mactrim(s,type)$/
mactry	macro.c	/^char *mactry(s)$/
makefork	cmd.c	/^TREPTR	makefork(flgs, i)$/
makelist	cmd.c	/^static TREPTR	makelist(type,i,r)$/
malloc	blok.c	/^char	*malloc(nbytes)$/
match_paren	word.c	/^char *match_paren(argp,open,close,flag)$/
mem_scope	name.c	/^void mem_scope(envlist)$/
mem_unscope	name.c	/^void mem_unscope()$/
meminit	name.c	/^void meminit()$/
mktemp	suid_exec.c	/^static void mktemp(template)$/
movstr	string.c	/^char *movstr(a,b)$/
mvcursor	vi.c	/^mvcursor(motion)$/
name_unscope	name.c	/^void name_unscope()$/
nextc	word.c	/^nextc()$/
no_export	name.c	/^static void no_export(nnod)$/
nxtarg	test.c	/^static char *nxtarg(mt)$/
oldsigs	fault.c	/^void	oldsigs()$/
p_flush	edit.c	/^#define p_flush()	fflush(stderr)$/
p_list	print.c	/^void	p_list(argn,com)$/
p_nchr	print.c	/^void	p_nchr(c,n)$/
p_num	print.c	/^void	p_num(n,c)$/
p_prp	print.c	/^void p_prp(s1,ch)$/
p_setout	edit.c	/^#define p_setout(s)	fflush(stdout)$/
p_str	history.c	/^#define p_str(s,c)	(fputs(s,stderr),putc(c,stderr)/
p_sub	print.c	/^void	p_sub(n,c)$/
p_time	print.c	/^void	p_time(t,c)$/
pathopen	service.c	/^FILE	*pathopen(name)$/
pipe_close	io.c	/^void pipe_close(pv)$/
pop	io.c	/^pop(flag)$/
post	service.c	/^int	post(pcsid)$/
postclr	service.c	/^void postclr()$/
pr_name	name.c	/^static void pr_name(n,c)$/
pr_prompt	editlib.c	/^void pr_prompt(string)$/
pr_string	vi.c	/^pr_string(s)$/
preacct	service.c	/^int preacct(cmdname)$/
prinscan	name.c	/^void prinscan(file,flag,root,option)$/
print	emacs.c	/^#define print(c)	isprint(c)$/
printflg	name.c	/^void	printflg(n)$/
printnam	name.c	/^int printnam(n,flag)$/
prsym	cmd.c	/^static void	prsym(sym)$/
prune	service.c	/^static char *prune(path,fullname)$/
push	io.c	/^push(af)$/
pushnam	name.c	/^static void	pushnam(n)$/
pushnid	name.c	/^static void pushnid(np)$/
putchar	emacs.c	/^#define putchar(c)	e_putchar(c)$/
putstring	emacs.c	/^putstring(s)$/
q_expand	edit.c	/^q_expand(outbuff,cur,eol,start,mode)$/
qscan	cmd.c	/^static ARGPTR qscan(ac,argn)$/
qtrim	io.c	/^static int qtrim(string)$/
qvalup	name.c	/^char *qvalup(n)$/
read	editlib.c	/^int read(fd,buff,n)$/
readc	word.c	/^readc()$/
readvar	name.c	/^int readvar(names,fd,raw)$/
realias	name.c	/^char *realias(np)$/
refresh	vi.c	/^refresh(mode)$/
rehash	name.c	/^static void rehash(np)$/
replace	vi.c	/^replace(c, increment)$/
restore	io.c	/^void	restore(last)$/
restore_v	vi.c	/^restore_v()$/
rm_files	expand.c	/^void	rm_files(template)$/
rm_node	name.c	/^static void rm_node(nnod)$/
rmlocal	name.c	/^void	rmlocal (nnod)$/
rmtemp	error.c	/^void	rmtemp(base)$/
save_last	vi.c	/^save_last()$/
save_v	vi.c	/^save_v()$/
savefd	io.c	/^savefd(fd,oldtop)$/
search	emacs.c	/^search(out,direction)$/
set_edit	editlib.c	/^int	set_edit(fd,mode)$/
set_rand	name.c	/^static int set_rand(n)$/
set_second	name.c	/^static int set_second(n)$/
setalt	edit.c	/^setalt(fd)$/
setbrk	blok.c	/^void setbrk(incr)$/
setbuf	io.c	/^void setbuf(iop, buf)$/
setcooked	edit.c	/^void setcooked(fd)$/
setcursor	emacs.c	/^setcursor(new,c)$/
setenv	name.c	/^char **setenv()$/
setids	suid_exec.c	/^setids(mode,owner,group)$/
setlist	name.c	/^void setlist(arg,xp)$/
setname	name.c	/^NAMPTR	setname(argi, xp)$/
setraw	edit.c	/^setraw(fd)$/
settemp	io.c	/^void settemp(pid)$/
sig_list	builtin.c	/^static void sig_list()$/
sig_number	builtin.c	/^static int sig_number(string)$/
simple	string.c	/^char *simple(name)$/
skipnl	cmd.c	/^static int	skipnl()$/
skipto	macro.c	/^static void skipto(endch)$/
split	args.c	/^static int split(s,macflg) \/* blank interpretatio/
stakchk	stak.c	/^stakchk()$/
staknam	name.c	/^static char *staknam(n,value)$/
stdsigs	fault.c	/^void stdsigs()$/
substitute	string.c	/^char *substitute(string,old,new,newstring)$/
substring	macro.c	/^static char *substring(string,pat,flag)$/
suspacct	service.c	/^void suspacct()$/
swap_iodoc_nm	io.c	/^void	swap_iodoc_nm(i)$/
synbad	cmd.c	/^void	synbad()$/
sync_cursor	vi.c	/^sync_cursor()$/
sync_io	io.c	/^void sync_io()$/
syncase	cmd.c	/^static REGPTR	syncase(esym)$/
syslook	name.c	/^syslook(w,syswds)$/
tdystak	stak.c	/^void	tdystak(x)$/
term	cmd.c	/^static TREPTR	term(flg)$/
testfn	test.c	/^int testfn(argn, com)$/
textmod	vi.c	/^textmod(c, mode)$/
tio	test.c	/^#define	tio(a,f)	(access(a,f)==0)$/
tmp_open	history.c	/^#define tmp_open(s)	tmpfile()$/
tmpfile	editlib.c	/^tmpfile()$/
trace_command	xec.c	/^void trace_command(com)$/
trim	string.c	/^void	trim(at)$/
trim_eq	xec.c	/^static trim_eq(r,s)$/
u370fflush	edit.c	/^u370fflush(file)$/
unreadc	macro.c	/^#define unreadc(c)	(peekc = (c)|MARK)$/
vfork_check	vfork.c	/^int	vfork_check(t)$/
vfork_restore	vfork.c	/^void	vfork_restore()$/
vfork_save	vfork.c	/^int	vfork_save()$/
vread	vi.c	/^vread(fd, shbuf, nchar)$/
word	word.c	/^word()$/
