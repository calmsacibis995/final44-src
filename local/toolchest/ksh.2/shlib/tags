_namp	findnod.c	/^static struct Namnod *_namp(name,root,type)$/
abound	name.h	/^#define abound(n)       ((int)((n)->value.namval.a/
aerror	arith.c	/^static void aerror(name,msg)$/
aeval	arith.c	/^long aeval(string)$/
aget_up	assign.c	/^union Namval *aget_up(np,up)$/
arayp	name.h	/^#define arayp(v)        (v->value.namval.aray)$/
arith	arith.c	/^static long int arith(prec)$/
arsize	growaray.c	/^int	arsize (maxi)$/
asscadr	name.h	/^#define asscadr(np,val)	assiadr(np,((int*)(val)))$/
assign	assign.c	/^void assign(node,string)$/
asslong	assnum.c	/^asslong(node,num)$/
astchar	shtype.h	/^#define astchar(c)	(_ctype2[c]&(T_AST))$/
attest	name.h	/^#define attest(n,f)     (namflag(n) & (f))$/
attrib	name.h	/^#define attrib(n,f)	((n)->value.namflg |= f)$/
bracket_match	findnod.c	/^char *bracket_match(string)$/
cannon_path	cannon.c	/^void	cannon_path(path)$/
chattrib	adjust.c	/^chattrib (node, newatts, size)$/
chkid	chkid.c	/^unsigned chkid(name)$/
copy_nod	findnod.c	/^struct Namnod *copy_nod(node, type)$/
curdot	name.h	/^#define curdot(n)	((arayp(n))->adot)$/
defchar	shtype.h	/^#define defchar(c)	(_ctype2[c]&(T_DEF))$/
digchar	shtype.h	/^#define digchar(c)	(_ctype2[c]&(T_AST|T_DIG))$/
dipchar	shtype.h	/^#define dipchar(c)	(_ctype1[c]&(T_DIP))$/
dolchar	shtype.h	/^#define dolchar(c)	(_ctype2[c]&(T_AST|_IDCH|T_SHN)/
echarset	national.h	/^#define	echarset(c)	((c)==ESS3?3:((c)==ESS2)?2:((c/
eolchar	shtype.h	/^#define eolchar(c)	(_ctype1[c]&(T_EOR))$/
errorp	name.h	/^#define errorp(np)     ((np)->namerr)$/
escchar	shtype.h	/^#define escchar(c)	(_ctype1[c]&(T_ESC))$/
expchar	shtype.h	/^#define expchar(c)	(_ctype1[c]&(T_EXP|T_SPC))$/
failed	failed.c	/^void	failed(s1,s2)$/
fassign	assign.c	/^void fassign(node,string)$/
findnod	findnod.c	/^struct Namnod *findnod(name,root,type)$/
freeble	name.h	/^#define freeble(nv)     (((int)(nv)) & 01)$/
funtree	name.h	/^#define	funtree(n)	((n)->value.namval.rp->ptree)$/
getchr	arith.c	/^#define getchr()	(*(unsigned char*)strg++)$/
gettree	gettree.c	/^struct Amemory *gettree(msize)$/
growaray	growaray.c	/^struct Namaray *growaray(arp,maxi)$/
gscan_all	namscan.c	/^void	gscan_all(fn, root)$/
gscan_some	namscan.c	/^void	gscan_some(fn,root,mask,flag)$/
gsort	gsort.c	/^void	gsort(argv,n)$/
icharset	national.h	/^#define icharset(i)	((i)>>(7*ESS_MAXCHAR)&3)$/
in_csize	national.h	/^#define in_csize(s)	int_charsize[s]$/
is_afunction	name.h	/^#define is_afunction(n)	(((n)->value.namflg&(~(N_E/
isalnum	shtype.h	/^#define isalnum(c)	(_ctype2[c]&(_IDCH))$/
isalpha	shtype.h	/^#define	isalpha(c)	(_ctype2[c]&(T_UPC|T_LPC|T_ALP)/
isdigit	shtype.h	/^#define	isdigit(c)	(_ctype2[c]&(T_DIG))$/
isexp	shtype.h	/^#define isexp(c)	(_ctype1[c]&T_EXP)$/
islower	shtype.h	/^#define islower(c)	(_ctype2[c]&(T_LPC))$/
ismeta	shtype.h	/^#define ismeta(c)	(_ctype1[c]&(_META))$/
isnull	name.h	/^#define isnull(n)       ((n)->value.namval.cp == N/
isprint	shtype.h	/^#define	isprint(c)	(((c)&0340) && ((c)!=0177))$/
isqmeta	shtype.h	/^#define isqmeta(c)	(_ctype1[c]&(_META|T_QOT))$/
isspace	shtype.h	/^#define	isspace(c)	(_ctype1[c]&(T_SPC))$/
isupper	shtype.h	/^#define isupper(c)	(_ctype2[c]&(T_UPC))$/
ja_getchar	gmatch.c	/^int ja_getchar(address)$/
ja_restore	assign.c	/^int ja_restore()$/
ja_size	assign.c	/^static int ja_size(str,size,type)$/
linknod	linknod.c	/^void	linknod(nodp,root)$/
logdir	tilde.c	/^static char *logdir(user)$/
lookup	arith.c	/^struct Namnod *lookup(name)$/
ltos	utos.c	/^char *ltos(sint,base)$/
ltou	convert.c	/^void ltou(str1,str2)$/
mak_nod	findnod.c	/^struct Namnod *mak_nod(name)$/
mrkfree	name.h	/^#define mrkfree(nv)     ((struct Nodval*)(((int)(n/
namflag	name.h	/^#define namflag(n)	(n)->value.namflg$/
out_csize	national.h	/^#define out_csize(s)	int_charsize[s+4]$/
passwdent	tilde.c	/^static int passwdent(user)$/
pattrib	name.h	/^#define pattrib(n,f)	((n)->value.namflg &= f)$/
peekc	arith.c	/^#define peekc()		(*strg)$/
qotchar	shtype.h	/^#define qotchar(c)	(_ctype1[c]&(T_QOT))$/
rjust	rjust.c	/^void	rjust(str,size,fill)$/
rmnval	linknod.c	/^void	rmnval (nv)$/
round	findnod.c	/^#define round(a,b)	(a+b-1)&~(b-1)$/
sattrib	name.h	/^#define sattrib(n,f)	((n)->value.namflg = f)$/
scan_all	namscan.c	/^void	scan_all(fn,root)$/
seekto	arith.c	/^#define seekto(loc)	(strg=(loc))$/
setchar	shtype.h	/^#define setchar(c)	(_ctype2[c]&(T_SET))$/
setdot	growaray.c	/^void	setdot (node, index)$/
subchar	shtype.h	/^#define subchar(c)	(_ctype1[c]&(T_SUB|T_QOT))$/
tilde	tilde.c	/^char *tilde(string)$/
tolower	shtype.h	/^#define tolower(c)	((c) + 'a' - 'A')$/
toupper	shtype.h	/^#define toupper(c)	((c) + 'A' - 'a')$/
unassign	unassign.c	/^void	unassign(node)$/
ungetc	arith.c	/^#define ungetc()	(--strg)$/
unmark	name.h	/^#define unmark(nv)      ((struct Nodval*)(((int)(n/
utol	convert.c	/^void utol(str1,str2)$/
utos	utos.c	/^char *utos(usint,base)$/
valup	tilde.c	/^#define valup(arg)	getenv(arg)$/
