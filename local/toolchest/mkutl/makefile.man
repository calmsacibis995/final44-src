

ddeevvccmmdd..mmaakkeeffiillee							ddeevvccmmdd..mmaakkeeffiillee



NNAAMMEE
     makefile -	Create A Make File From	*.c, *.o, And Include Files
     (Experimental!)

SSYYNNOOPPSSIISS
     mmaakkeeffiillee [	--ff _m_a_k_e_f_i_l_e [ --mm ] ] [ --LL _l_i_b_r_a_r_y ] [ _m_a_k_e _v_a_r_i_a_b_l_e _a_s_s_i_g_n_m_e_n_t_s
     ]

DDEESSCCRRIIPPTTIIOONN
     This command is an	experiment to see if makefiles used by _m_a_k_e(_1) can be
     constructed automatically.	 The standard output is	a makefile for building
     the main()	objects	found in the current directory using the *.c, *.l, *.s,
     *.y and *.o files and include files.

     By	default, the command rummages the *.o files determining	the
     dependencies among	them.  It then constructs the dependency list and
     command line for creating the routines which contain unresolved "main"
     symbols.  Finally,	it rummages the	*.c files determining which need what
     include files from	the current directory, and lists those dependencies.

     The optional argument --ff causes the make file to be written to the	given
     _m_a_k_e_f_i_l_e.	If a _m_a_k_e_f_i_l_e already exists, it is moved to oo_m_a_k_e_f_i_l_e.	 The
     additional	option --mm causes mmaakkeeffiillee to create all	the *.o	objects	it can
     from *.y, *.s, *.l, and *.c files in the current directory, construct the
     _m_a_k_e_f_i_l_e and issue	the _m_a_k_e(_1) command on it.  The	most reliable way to
     make new makefiles	is with	both the --ff and	--mm options.

     If	the --ff option is used the makefile has an additional target
     "newmakefile" which will cause the	complete recreation of the makefile.

     If	the optional --LL	argument is given, the given _l_i_b_r_a_r_y is	built from all
     the object	files that do not define main routines.

     If	there exists a file with the same name as given	with the --ff argument,
     portions of it are	copied into the	new makefile.  Namely lines from the
     top of the	file to	the line that begins

	  #top#

     and lines from

	  #bottom#

     to	the last line are copied in.  This allows one to put standard headers
     and definitions in	the top	and extra targets in the bottom	that are
     preserved in each recreated makefile.

EEXXAAMMPPLLEESS





(last mod 1/3/84)							 Page 1







ddeevvccmmdd..mmaakkeeffiillee							ddeevvccmmdd..mmaakkeeffiillee



	  cccccc --gg --OO --cc **..cc
	  mmaakkeeffiillee ''CCCC == cccccc'' ''CCFFLLAAGGSS ==	--gg --OO'' >>MMaakkeeffiillee
	  mmaakkee

	  mmaakkeeffiillee --ff MMaakkeeffiillee --mm ''CCCC ==	cccccc'' ''CCFFLLAAGGSS == --gg --OO''

     Given a directory full of *.c files and include files, the	first three
     commands are equivalent to	the last command.

	  mmaakkeeffiillee --ff MMaakkeeffiillee --mm --LL ccssuubb..aa

     The library "csub.a" is created from all non-main object files.

	  mmaakkee nneewwmmaakkeeffiillee

     Reconstruct the makefile from scratch; useful after major revisions to
     many files.

FFIILLEESS
     /tmp/$$makefile, /tmp/$$omakefile - temporary files.

DDIIAAGGNNOOSSTTIICCSS
     With the --mm option, _m_a_k_e will talk	to you alot.  If the files and _m_a_k_e
     options do	not constitute enough information to create a complete
     executable	module,	all bets are off as to whether the makefile is correct
     or	not.  You should get complaints	from _m_a_k_e, the compiler	and the	loader
     if	executables are	not possible.  However,	the --ff and --mm options (or "make
     newmakefile") can be used to try again.

BBUUGGSS
     Working under 5.0 only.

     There is not yet a	way to have dependencies outside the current directory.
     mmkkcccc does handle that case, but does not build dependency lists on	the
     basis of dependencies, it just lists what it is told.

SSEEEE AALLSSOO
     make(1) cc(1)
     devcmd.mkcc
     M.	H. Bianchi, "makefile -	A Command For Constructing Makefiles", TM 83-
     59323-2












Page 2							      (last mod	1/3/84)
1/3/84	-0- +66+			 @(#)makefile	  1.10	devcmd.makefile



      Copyright (c) 1984, 1985, 1986, 1987  AT&T All Rights Reserved
