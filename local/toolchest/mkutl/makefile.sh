
#
#      Copyright (c) 1984, 1985 AT&T
#      All Rights Reserved
#
#      THIS IS UNPUBLISHED PROPRIETARY SOURCE 
#      CODE OF AT&T.
#      The copyright notice above does not 
#      evidence any actual or intended
#      publication of such source code.
#
#	@(#)makefile	1.43	/fs2/bianchi/devsolid/src/devshell/s.makefile
#	Create a makefile from *.c, *.l, *.y, *.o and include files

# capture command line
cmdline=`
	spclflag=
	for arg
	do
		if [ ${spclflag} ]
		then
			spclflag=
			continue
		fi
		case "${arg}" in
		-m )
			;;
		-f | -L )
			spclflag=yes
			;;
		*[\ \	\(]* )
			echo "'${arg}' \\c"
			;;
		* )
			echo "${arg} \\c"
		esac
	done`

exec 3>&1	# make file descriptor 3 a duplicate of stdout

library=
libsub=
makefile=
makeit=
usage="Usage:  $0 [ -L lib ] [ -f makefile [ -m ] ] make-var-assignments ...
For more detail type:	prtdoc devcmd.$0"

#	Develope the list of source files.
#	Ignore files generated by yacc, lex, and SCCS.
files=`ls *.[clsy] 2>/dev/null  |
	sed '	
		/^y.tab.c$/d
		/^lex.yy.c$/d
		/^[lpz]\..*\.[clsy]$/d
		/^s\..*\.[clsy]$/s/^s\.//'  |
	sort -u`
if [ -z "${files}" ]
then
	echo >&2 "$0:  No *.c, *.l, *.s, *.y files in current directory!"
	exit 1
fi
#	objlist is ordered yacc files, then assembler, then lex, then C;
#	there are subtle, desirable properties gained with that order.
objlist=`echo ${files}  |
		tr ' ' '\012'  |
		sed 's/\(.*\.\)\([clsy]\)$/\2 \1o/'  |
		sort -r +0 -1  |
		sed 's/. //'`

while [ -n "$1" ]
do
	case "$1" in
	-f )	#	specify name of outputed makefile
		shift
		makefile=$1
		if [ -z "${makefile}" ]
		then
			echo >&2 "$0: missing makefile argument\\n${usage}"
			exit 1
		fi
		if [ -f ${makefile} ]
		then	#	Save the original makefile.
			mv -f ${makefile} o${makefile}  ||  exit 1
			restoremfile="echo >&2 '$0:  restored original ${makefile}'
				mv -f o${makefile} ${makefile}
				exit 1"
			trap "${restoremfile}" 0
		fi

		#	Shell magic: stdout now goes to file name in $1.
		exec >${makefile}

		#	Copy from the top of the old makefile down to the line
		#	that begins '#top#' into the new makefile.
		if [ -r o${makefile} ]
		then
			if [ `grep -c '^#top#' o${makefile}` -ge 1 ]
			then
				sed '/^#top#/q' o${makefile}
			fi
		fi
		;;
	-m )	#	run the make
		makeit=yes
		;;
	-L )	#	build a library
		shift
		library=$1
		if [ -z "${library}" ]
		then
			echo >&2 "$0: missing library argument\\n${usage}"
			exit 1
		fi
                libsub='s;\(.*\.o\):;$(LIBRARY)(\1):;'
		;;
	-* )
		echo >&2 "$0:  illegal flag argument '$1'\\n${usage}"
		exit 1
		;;
	* )
		break
	esac
	shift
done

echo "# Generated by makefile 1.43    `date`\\n"

if [ -n "${makefile}" ]
then
	echo "MAKEFILE = ${makefile}\\n"
fi

if [ ${makeit} ]
then
	#	If there are any SCCS files, make sure we have the gotten files
	list=`ls s.*.[cyl] 2>/dev/null  |  sed 's/^s\.//'`
	if [ -n "${list}" ]
	then
		make -f /dev/null ${list} >&3  ||  exit 1
	fi
fi

for i
{
	echo "${i}"
}
count=`cat -s ${files}  |
	grep -c "^#[ 	]*include[ 	]*[<\"]y.tab.h[>\"]"`
if [ ${count} -gt 0 ]
then
	echo 'YFLAGS = -d'
fi

lorderfile=/tmp/$$lmakefile	#  dependent/dependee pairs from lorder(1)
depfile=/tmp/$$dmakefile	#  *.o files that the main object depends on.
incfile=/tmp/$$imakefile	#  files included in sources.
trap exit 1 2 15
trap "rm -f ${lorderfile} ${depfile} ${incfile};  ${restoremfile}" 0

if [ ${makeit} ]
then	#	Create .o files for all .[clsy] so we can lorder them.
	if [ -z "${makefile}" ]
	then
		echo >&2 "$0:  -f makefile option must be used with -m"
		exit 1
	fi
	make -i -f ${makefile} ${objlist} >&3  ||  exit 1
fi

#	Determine which *.o depend on which others.
if [ `ls *.o 2>/dev/null  |  wc -l` -lt 1 ]
then
	echo >&2 "$0:  No *.o files in current directory!"
	exit 1
fi

#	Which *.o contain main() routines?
#	Bug:  VAX uses "_main" as external symbol, most others use "main".
mains=`nm -e ${objlist}  |
	sed -n '
		/Symbols from / {
			s///
			s/\.o:$//
			h
			d
		}
		/^_\{0,1\}main / {
			g
			p
		}'  |
	 sort`
if [ -n "${mains}"  -a  -n "${library}" ]
then
	echo >&2 "$0:  Both main routines have been found and a library has been
	specified.  I cannot handle it (yet)."
	exit 1
fi
if [ -n "${mains}" ]
then
	echo '\nMAINS = '${mains}  |
		shorten -f40 -e76 -I'	' -t' \'
	#	lorder(1) has a bug that keeps it from resolving bss references.
	#	nlorder fixes that.
	nlorder ${objlist}  |
		sed 's/$/ /' >${lorderfile}
elif [ -z "${library}" ]
then
	echo >&2 "$0:  No main routines found."
fi
if [ -n "${library}" ]
then
	echo '\nLIBRARY = '${library}
fi
echo '\nOBJECTS = ' `echo "${objlist}" | sort`'\n\nSOURCES = ' ${files}  |
	shorten -f40 -e76 -I'	' -t' \'

#	make ALL  will build all commands and the library;
#	normally the default action.
if [ -z "${library}${mains}" ]
then
	#	If there is no library and no mains, then ALL is all the
	#	object files, aka "dot o's".
	dotos='$(OBJECTS)'
fi
echo '
ALL:		'${mains:+'$(MAINS)'}${library:+'$(LIBRARY)'}${dotos}

if [ -n "${library}" ]
then
	(
		echo '\n$(LIBRARY):	\c'
		echo "${objlist}"  |
			sed 's/.*/$(LIBRARY)(&)/'  |  tr '\012' ' '
		echo ''
	)  |
		shorten -f20 -e66 -I'	' -t' \'  |
		newform -i17 -o-8
fi

#	Determine if lex or yacc libraries will be needed.
if [ `ls *.l 2>/dev/null  |  grep -c "\.l$"` -gt 0 ]
then
	ldflags="${ldflags} -ll"
fi
if [ `ls *.y 2>/dev/null  |  grep -c "\.y$"` -gt 0 ]
then
	ldflags="${ldflags} -ly"
fi

#	For every command, find the *.o dependencies and command to link them.
for main in ${mains}
{
	m=${main}.o
	echo ${m} >${depfile}
	#	${om} == other main.o's; this main cannot depend on the others
	om=`echo "${mains}"  |  sed 's/$/.o/'  |  fgrep -xv "${m}"`
	#	m  the list of things that may have dependencies
	while [ -n "${m}" ]
	do
		#	Some magic here.  Sort outputs only after the last item
		#	inputs.  So, depfile can be used in both fgrep and tee
		#	without any race conditions in the pipeline.
		s=`fgrep "${m}" ${lorderfile}	 |  cut -d' ' -f2  |
			fgrep -xv "${om}"  |
			fgrep -xv -f ${depfile}  |  sort -u  |
			tee -a ${depfile}	 |  sed 's;.*;s/^& / /p;'`

		#	s  contains sed commands, 1 for each added dependency
		if [ -z "${s}" ]
		then	#	No added dependencies; we've got them all.
			break
		fi
		#	look for new dependencies that were introduced this pass
		m=`sed -n "${s}" ${lorderfile}  |  sort -u`
	done

	#	depfile now contains all the *.o that ${main} depends on.
	#	Format that for make.
	(
		echo '\n'${main}:'	\c'
		tr '\012' ' ' <${depfile}
		echo ''
	)  |
		shorten -f20 -e66 -I'	' -t' \'  |
		newform -i17 -o-8
	#	Format the command to build the ${main}.
	(
		echo "	$(CC) $(CFLAGS)  -o ${main}  \\c"
		tr '\012' ' ' <${depfile}
		echo "  $(LDFLAGS)${ldflags}"
	)  |
		shorten -f40 -e76 -I'	' -t' \'
}

#	Determine which *.o depend on include files.
#	/dev/null makes cc spit out the file name when there is only one.
(
	cat ${makefile} /dev/null 
	echo "
IncludeSet:
	$(CC) $(CFLAGS) -E" ${files} /dev/null
)  |
	make -f - IncludeSet  |
	(
		sed -n '
			/^[^ 	#]\{1,\}\.[cly]:$/{
				\;/dev/null;d
				s/\.[cyl]:$/.o:/
				'"${libsub}"'
				s/^//
				s/$/	/p
				n
				d
			}
			/^# 1 "/{
				\;/dev/null;d
				s/"\.\//"/
				s/# 1 "//
				s/"$//pw '"${incfile}"'
			}'  |  tr '\012\007' ' \012'
		echo ''
	)  |
	shorten -e68 -f20 -I '	 ' -t ' \'  |
	newform -i17 -o-8

#	INCLUDE list if there are any.
if [ -s ${incfile} ]
then
	sort -u ${incfile} -o ${incfile}
	(
		egrep '^/|^\.' ${incfile}  |
			sed '
				1i\
GLOBALINCS =
			'  |  tr '\007\012' '\012 '
		echo ''
		egrep -v '^/|^\.' ${incfile}  |
			sed '
				1i\
LOCALINCS =
			'  |  tr '\007\012' '\012 '
		echo ''
	)  |  shorten -f40 -e76 -I'	' -t' \'
fi

rm -f ${lorderfile} ${depfile} ${incfile}
trap "${restoremfile}" 0

#	Targets to clean up and recreate the makefile.
echo '
clean:
	rm -f $(OBJECTS)
	
clobber:	
	rm -f $(OBJECTS)' ${library:+'$(LIBRARY)'} ${mains:+'$(MAINS)'}

if [ -n "${makeit}"  -o  -n "${makefile}" ]
then
	echo "
newmakefile:
	makefile -m -f \$(MAKEFILE) \\c"
	if [ -n "${library}" ]
	then
		echo "-L \$(LIBRARY) \\c"
	fi
	echo "${cmdline}"
fi

#	Copy from the line of the old makefile that begins '#bottom#' down to
#	the end into the new makefile.
if [ -r o${makefile} ]
then
	sed -n '/^#bottom#/,$p' o${makefile}
fi

trap 0

#	If this is a library, build it, since the makefile will leave the
#	*.o files lying around if we don't.
if [ -n "${library}" ]
then
	ar crv ${library} *.o >&2
	rm -f *.o
fi
 
#	Having figured out HOW to build everything, do it!
if [ ${makeit} ]
then
	exec make -f ${makefile}  >&3
fi
