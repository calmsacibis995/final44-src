echo T.misc: miscellaneous buglets now watched for


awk=${awk-../a.out}

echo '2
10' |
$awk '{ x[NR] = $0 }	# test whether $0 is NUM as well as STR
END { if (x[1] > x[2]) print "error: $0 is not NUM" }'

echo "
This should not produce control characters (except \\n"
$awk 'BEGIN {
	npad = substr("alexander" "           ",1,15)
	print npad
	}' | vis

echo "
This should give an error about function arguments"
$awk '
function foo(x) { print "x is" x }
BEGIN { foo(foo) }
'

echo "
This should print bbb"
$awk '
BEGIN { up[1] = "a"
	for (i in up) gsub("a", "A", x)
	print x x "bbb"
	exit
      }
'

echo "
This should not core dump when you push return"
echo yes |
$awk '
BEGIN {
	printf "push return" >"/dev/tty"
	getline ans <"/dev/tty"
} '

echo "
This shouldn't core dump"
$awk 'BEGIN { unireghf() }
func unireghf(hfeed) { hfeed[1] = 0 }'

echo "
This shouldn't core dump"
echo x | $awk '/[/]/'

echo "
This should print <12345>"
$awk '
func f() { return 12345 }
BEGIN { printf "<%s>\n", f() }
'

echo "
The following should print 4 lines of output"
echo 'abc
def

ghi
jkl' >/tmp/foo
$awk '
BEGIN {	RS = ""
	while (getline <"/tmp/foo")
		print
}'


echo "
The following should not produce a warning about changing a constant"
$awk 'func f(x) { x = 2 }
BEGIN { f(1) }'

$awk 'BEGIN { print 9, a=10, 11; print a; exit }' >foo1
echo '9 10 11
10' >foo2
diff foo1 foo2 || echo 'BAD: T.misc (embedded expression)'

echo "abc defgh ijkl" | $awk '
  { $1 = ""; line = $0; print line; print $0; $0 = line; print $0 }' >foo1
echo " defgh ijkl
 defgh ijkl
 defgh ijkl" >foo2
diff foo1 foo2 || echo 'BAD: T.misc (assignment to $0)'

echo '
The following should not give a core dump'
$awk '
func min(a, b)
{
	if (a < b)
		return a
	else
		return b
}
BEGIN { exit }
'

echo "
The following should not give a syntax error message:"
$awk '
func expand(chart) {
	getline chart < "CHAR.ticks"
}
' /dev/null

echo "
The following should not give a core dump"
$awk 'BEGIN { print 1e40 }'

echo "
The following syntax error should not dump core:"
$awk '
$NF==3	{first=1}
$NF==2 && first==0 && (abs($1-o1)>120||abs($2-o2)>120)	{print $0}
$NF==2	{o1=%1; o2=$2; first=0}
'

echo "
The following syntax error should not dump core:"
$awk '{ n = split($1, address, !); print address[1] }'

echo "
The following should cause a syntax error message"
$awk 'BEGIN {"hello"}'

echo '
The following should give a syntax error message:'
$awk '
function pile(c,     r) {
	r = ++pile[c]
}

{ pile($1) }
'
