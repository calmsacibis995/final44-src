. \" the d[A-Z] registers correspond to the switches in configure.h
.nr dA 0 \" CHANGE_DIR
.nr dB 1 \" CHECK_COMMENT
.nr dC 0 \" COMMENT_BLANK
.nr dD 0 \" DEBUG
.nr dE 1 \" DEFAULT_INCLUDE
.nr dF 1 \" DISABLE_MACRO
.nr dG 1 \" FLEXNAMES
.nr dH 0 \" JOIN_LINES
.nr dI 1 \" MACRO_FORMAL
.nr dJ 1 \" MATCH_EXTRA
.nr dK 0 \" NEWLINE_BLANK
.nr dL 1 \" ONCE_INCLUDE
.nr dM 1 \" PLUS_SEP
.nr dN 1 \" QUOTE_ESCAPE
.nr dO 1 \" QUOTE_FORMAL
.nr dP 0 \" SALT_MACRO
.nr dQ 1 \" SCAN
.nr dR 0 \" SPACE_SALT
.nr dS 0 \" TRIGRAPH
.nr dT 0 \" UNDEF_MACRO
.TH CPP 1
.(B
.tl @Copyright (c) 1984, 1985, 1986, 1987@@AT&T All Rights Reserved@
.(E 2
.SH NAME
cpp \- C preprocessor
.SH SYNOPSIS
.B /lib/cpp [
option ...
.B ] [
ifile
.B [
ofile
.B ] ]
.SH DESCRIPTION
.PP
.I cpp
is the C language preprocessor that is automatically invoked by the
.IR cc (1)
command.
The preferred method is to invoke
.I cpp
through
.IR cc (1)
as the implementation may someday change.
.PP
.I cpp
optionally accepts two file name arguments.
.I ifile
and
.I ofile
are respectively the input and output for the preprocessor.
They default to standard input
and standard output if not specified.
.SU "Options"
The options are:
.TP
.B \-C
Do not strip C-style comments from the input file.
.TP
.BI \-D name [ =def ]
Define
.I name
as if by a
.B #define
directive.
If 
.I =def
is omitted then
.I name
is defined to be 1.
.TP
.BI \-I dir
.B #include
file names enclosed in "\|"
and not beginning with
.B /
are first searched for in the directory of the
.ie \n(dA \{file containing the
.B #include
statement,\}
.el \{.I ifile
argument,\}
then in the directories named in
.B \-I
options and finally in the directories on the standard list.
.B #include
file names enclosed in <\|>
are not searched for in the directory of the
.ie \n(aA \{file containing the
.B #include
statement.\}
.el \{.I ifile
argument.\}
If 
.I dir
is
.B \-
then files are not automatically searched for in the directory of the
.ie \n(dA \{file containing the
.B #include
statement,\}
.el \{.I ifile
argument.\}
.TP
.B \-P
Preprocess without producing line control information.
.if \n(dQ \{.TP
.B \-S
Produce the following dependency information lines in
.IR ofile :
.RS
.PD 0
.TP
.BI "#pragma info include " "file path"
Specifies that
.I file
is being included at this point.
.I Path
is the expanded path name of
.IR file .
.TP
.BI "#pragma info end " "file"
Specifies that the end of include file
.I file
has been reached.
.B "#pragma info include"
and 
.B "#pragma info end"
pairs are nested to show include file nesting.
.TP
.BI "#pragma info parameter " "file"
Specifies that the include file
.I file
is a
.I parameter
file.
A parameter file contains only 
.B #define
directives, comments
and 
.B #include
directives on other parameter files.
.TP
.BI "#pragma info reference " "file symbol " "[ " "value " "]"
Specifies that 
.I symbol
defined in
.I file
has been referenced.
.I Value
is the current value of
.IR symbol .
If
.I file
is
.B \-
then
.I symbol
can only be defined by
.BR \-D symbol[=value]
on the command line.
.TP
.BI "#pragma info unused " "file "
Specifies that
.I file
is a parameter file and that none of the symbols defined in
.I file
were used.
.PD
.RE\}
.TP
.B \-T
Use only the first eight characters in distinguishing symbol names.
.TP
.BI \-U name
Remove any initial definition of
.IR name ,
where
.I name
is a predefined reserved name.
Predefined names are defined in the default include file
.BR <default.h> .
The
.B \-U
option overrides the
.B \-D
option.
.if \n(dE \{Notice that the
.B #assert
directive makes reserved preprocessor names obsolete.\}
.TP
.B \-X
Scan
.I ifile
for directives but do not output any text generated by 
.IR ifile .
This is equivalent to
.BR "#pragma notext" .
.TP
.BI \-Y dir
Use 
.I dir
as the default include file directory,
replacing
.B /usr/include
and
.B $CPPINCLUDE
as the default directory.
.if \n(dQ \{.PP
The option combination
.B "\-P \-S \-X"
produces only dependency information in
.IR ofile .\}
.SU "Directives"
All
.I cpp
directives start with
.BR #
as the first
.if \n(dR non-space
character on a line.
Any number of space characters may appear between the
.B #
and the directive name.
The directives are:
.TP
.BI #define " name" " " token-string
Replace subsequent instances of
.I name
with
.IR token-string .
.TP
.BI #define " name(arg" ", ..., " "arg) token-string"
Replace subsequent instances of
.I name
followed by a
.BR ( ,
a list of comma-separated set of tokens, and a
.B )
by
.IR token-string ,
where each occurrence of an
.I arg
in the
.I token-string
is replaced by the corresponding set of tokens in the comma-separated list.
When a macro with arguments is expanded, the arguments are placed
into the expanded
.I token-string
unchanged.
After the entire
.I token-string
has been expanded,
.I cpp
re-scans then newly generated
.IR token-string .
Notice that there can be no space between
.I name
and
.B (
in the definition.
Formal arguments appearing in single or double quoted strings are
.ie \n(dO replaced by the corresponding (unexpanded) actual argument text.
.el not expanded.
Macro recursion is not permitted.
.if \n(dT \{However, a macro is temporarily undefined while 
.I token-string
is being re-scanned.\}
.ie \n(dF However, if a macro name appears in its definition then it is not expanded.
.if \n(dK \{The sequence
.B \\newline
is replaced by
.B blank
in macro definitions.\}
.if \n(dP \{.PP
The token
.B #
in
.I token-string
causes the immediatley following formal argument to be expanded
and enclosed in double quotes.
The token
.B ##
in
.I token-string
concatenates the space separated tokens immediately preceding and following the
.B ##
token.
The resulting token is not checked for further macro expansions.\}
.TP
.BI #undef " name"
Cause the definition of
.I name
(if any) to be forgotten from now on.
.TP
.BI #assert " predicate" ( argument )
Makes the assertion
.IR predicate ( argument )
which may only be tested in 
.B #if 
directive expressions.
.I predicate
must be a valid identifier and
.I argument
may be any sequence of characters not including
.BR space ,
.BR tab ,
.BR newline ,
.B (
or
.BR ) .
Occurrences of
.IR predicate ( argument )
in the input text are not expanded.
The only interaction between
.B #assert
and
.B #define
is that 
.BI #define " predicate(argument) value"
overrides 
.BI #assert " predicate(argument)"
in 
.B #if
expressions.
.TP
.BI #include " \\\\"filename\\\\""
.PD 0
.TP
.BI #include " <filename>"
Include at this point the contents of
.I filename
(which will then be run through
.IR cpp ).
When the
.BI < filename >
notation is used,
.I filename
is not searched for in the directory of the
.ie \n(dA \{file containing the
.B #include
directive.\}
.el \{.I ifile
argument.\}
.PD
.TP
.BI #line " integer-constant \\\\"filename\\\\""
Causes
.I cpp
to generate line control information for the next pass of the
C compiler.
.I integer-constant
is the line number of the next line
and
.I filename
is the originating file.
If
.I \\\\"filename\\\\"
is not given, the current file name is unchanged.
.TP
.B #endif
Ends a section of lines begun by a test directive
.RB ( #if ,
.BR #ifdef ,
or
.BR #ifndef ).
Each test directive must have a matching
.BR #endif .
.TP
.BI #ifdef " name"
The lines following will appear in the output if and only if
.I name
has been the subject of a previous
.B #define
without being the subject of an intervening
.BR #undef .
.TP
.BI #ifndef " name"
The lines following will not appear in the output if and only if
.I name
has been the subject of a previous
.B #define
without being the subject of an intervening
.BR #undef .
.TP
.BI #if " constant-expression"
Lines following will appear in the output if and only if the
.I constant-expression
evaluates to non-zero.
All binary non-assignment C operators, the
.B ?:
operator, the unary
.BR \(mi ,
.BR ! ,
and
.B ~
operators are all valid in
.IR constant-expression .
Operator precedence is the same as in the C language.
The builtin predicate
.BI defined( name )
tests if the preprocessor name
.I name
has been defined.
The builtin predicate
.BI exists( file )
is true if 
.I file
can be found using the
.B #include
search rules.
.I file
may be enclosed in "\|" or <\|>.
The builtin function
.BI identifiers( file,id1,...,idn )
searches 
.I file
for the null-terminated identifier strings
.I id1
through
.IR idn .
The number of identifiers found is returned, with each identifier
counted only once.
A leading
.B \|_\|
character, if any, is ignored when matching identifier strings.
If
.I file
is an archive with a symbol directory
(see 
.IR ar (1))
then only the symbol directory is searched for identifiers.
Only these operators, functions, predicates, integer constants
and names should be used in
.IR constant-expression .
In particular, the
.B sizeof
operator is not valid in this context.
.TP
.B #else
Reverses the notion of the test directive 
matching this directive.
If lines previous to this directive are ignored then the following lines
will appear in the output.
.TP
.BI #elif " constant-expression"
Allows multiple alternate branches for the 
.B #if
directive.
.I constant-expression 
is the same as for
.BR #if .
The 
.BR #if ,
.B #ifdef
and
.B #ifndef
test directives can be nested.
.TP
.BI #pragma " [" no "]option[=value]"
Sets preprocessor and compiler control options.
Options not defined below are passed on to the next compiler pass.
If
.B no 
is present then
.I option
is turned off.
The options are:
.RS
.PD 0
.TP
.B class
Instructs
.I cpp
to use the special
.I "C with classes"
exit code.
This option replaces the obsolete
.B #class
directive.
.TP
.BI ident \=\\"identification\\"
Sets the identification string for the current file.
This option replaces the obsolete
.B #ident
directive.
.TP
.B multiple
Allows the current file to be included more than once.
The default action
.B nomultiple
causes each
.B #include
file to be included only once.
.TP
.B text
.B notext
suppresses output to
.I ofile
generated by text in
.IR ifile .
This allows files to be scanned for
.I cpp
directives without generating any text output.
Note that the
.B \-P
option must still be used to suppress line number information output.
.PD
.RE
.SU "Default Definitions"
The special macro
.BI ppsymbol( arg )
can be used to access preprocess time symbols.
.I arg
may be one of the following:
.TP
.I predicate
The argument associated with 
.I predicate
from a previous
.B #assert
statement, enclosed in "\|".
If 
.I predicate
has not been asserted then the arguments below are checked.
.TP
.B FILE
The current file name enclosed in "\|".
.TP
.B LINE
The current line number (decimal integer).
.TP
.B DATE
The current month, day and year enclosed in "\|"
.IB ( "MMM DD YYYY" ).
.TP
.B TIME
The current time enclosed in "\|"
.IB ( "HH:MM:SS" ).
.TP
.I undefined
If
.I arg
is undefined then the null string
.B "\|"
is returned.
.if \n(dE \{.PP
.B "#include <default.h>"
is automatically executed before the first line of
.I ifile
is read.
.B <default.h>
typically contains
.B #assert
directives defining the current hardware and software environment.
By using the 
.B \-I
option different
.B <default.h>
files may be used to support cross-compilation.
.PP
The proposed standard assertions for
.B <default.h>
are:
.TP
.BI system( system-name )
Defines the operating system name.
Example values for
.I system-name
are
.B unix
and
.BR gcos .
.TP
.BI release( system-release )
Defines the operating system release name.
Example values for
.I system-release
are
.BR apollo ,
.BR bsd ,
.BR research ,
.BR sun ,
.BR system5 ,
.BR uts ,
and
.BR venix .
.TP
.BI version( release-version )
Defines the operating system release version.
Example values for
.I release-version
are
.B 4.1c
and
.B 4.2
for
.BR release(bsd) ,
.B 7
and
.B 8
for
.B release(research)
and
.BR 5.0
etc. for
.BR release(system5) .
.TP
.BI model( model-name )
Defines the hardware model or workstation name.
Example values for
.I model-name
are
.BR apollo ,
.BR sun ,
.B ibm-pc
and
.BR unix-pc .
.TP
.BI architecture( architecture-name )
Defines the processor architecture name.
Example values for
.I architecture-name
are
.BR 3b ,
.BR 68000 ,
.BR ibm ,
.BR pdp11 ,
and
.BR vax .
.TP
.BI machine( architecture-version )
Defines the processor architecture version.
Example values for
.I architecture-version
are
.BR 2 ,
.B 20 
and
.B 20s
for
.BR architecture(3b) ,
.B 70
etc. for
.B architecture(pdp11)
and
.BR 750 ,
.B 780 
and
.B micro
for
.BR architecture(vax) .\}
.SH FILES
.TP 1.5i
.PD 0
/usr/include
standard directory for
.B #include
files
.TP 1.5i
.PD 0
$CPPINCLUDE
environment override for /usr/include
.if \n(dE \{.TP 1.5i
.PD 0
<default.h>
predefined symbols and assertions\}
.SH SEE ALSO
cc(1), m4(1), ar(1)
.SH DIAGNOSTICS
The error messages produced by
.I cpp
are intended to be self-explanatory. 
The line number and filename are printed along with the diagnostic.
.PP
.I cpp
warns when when preprocessor constructs cross file boundaries.
Misplaced
.if \n(dB comments and
directives are also detected.
.SH NOTES
.PP
Extra characters after
.BR #ifdef ,
.BR #ifndef ,
.B #else
and
.B #endif
directives
.ie \n(dJ \{are interpreted as nesting labels.
Conflicting nesting labels cause warning messages to be output.\}
.el not allowed.
.if \n(dN \{.PP
Single and double quoted strings may be escaped to allow macro
expansion within quoted character and string constants:
.DS
.nf
	#define a b
	s = \\"a\\"";
	c = \\'a';
expands to
	s = "b\\"";
	c = 'b';
.fi
.DE
Notice that only the first quote character is escaped.\}
.if \n(dM \{.PP
The sequence
.B \\+
in the input text concatenates tokens without further expansion:
.DS
.nf
	#define A a
	#define B b
	#define ab xyz
	A\\+B
expands to
	ab
.fi
.DE\}
.if \n(dS \{.PP
The ANSI
.I trigraph
sequences
.B ??*
are expanded when the input text is read.\}
.PP
.I cpp
may be configured for ANSI compatability.
In this case
these are the only differences with the X3J11/85-008 draft document:
.DS
.nf
	B.1.1.2	(2) physical source lines are not joined into logical lines
	C.8.1	#include "file" is relative to the directory of \f2ifile\fP
.fi
.DE
