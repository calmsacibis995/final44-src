. \"
.PF "'Copyright (c) 1984, 1985, 1986, 1987''AT&T All Rights Reserved'"
. \" use ?roff -mm
. \"
. \" G. S. Fowler
. \" AT&T Bell Laboratories
. \"
.de XS		\" start example
.DS
.in 4
.ta 4
.ft 5
..
.de XE		\" end example
.ta
.ft P
.DE
..
.ds DT June 18, 1985
.SA 1  \"  right justified
.TL "312510-0101" "49059-6"  \" charging case filing case
The Fourth Generation Make
.AU "Glenn S. Fowler" GSF
.AF "AT&T Bell Laboratories" 1
.TM  "59545-850618-03"  \"  TM number
.AS 1
.I Make
is a program that is widely used to maintain and update
programs and libraries on UNIX*
.FS *
UNIX is a trademark of AT&T Bell Laboratories.
.FE
systems.
This paper introduces the
.I "Fourth Generation Make"
which embodies major semantic and syntactic enhancements
to the standard
.I make
program.
The enhancements include support for source files distributed
among many directories,
an efficient
.I shell
interface that allows concurrent execution of update commands,
dynamic dependency generation,
dependencies on conditional compilation symbols
and a powerful new meta language for constructing default rules.
A complete rewrite of the standard make code has resulted
in a unified software construction program that also provides improved 
functionality and performance.
Improved performance includes an average five to ten times decrease
in makfile size and an average two to five times decrease in execution time.
It is assumed that the reader is familiar with the features and
operation of the standard
.IR make .
.AE
.OK make build "program maintenance"
.MT 4
.H 1 INTRODUCTION
Since it first appeared in 1976\*(Rf,
.RS
S. I. Feldman,
.I "Make \- A Program for Maintaining Computer Programs" ,
Software \- Practice and Experience, Vol. 9 No. 4, pp. 256-265, April 1979.
.RF
.I make
has changed little,
and most of these changes have been syntactic in nature\*(Rf.
.RS
.I "Augmented Version of Make" ,
UNIX System V \- Release 2.0 Support Tools Guide, pp. 3.1-3.19, April 1984.
.RF
However, the
.I build
variant of
.I make\*(Rf
.RS
V. B. Erickson and J. F. Pellegrin,
.I "Build \- A Software Construction Tool" ,
AT&T Bell Laboratories Technical Journal Vol. 63 No. 6 Part 2,
pp. 1049-1059, July-August 1984.
.RF
introduced a major semantic change.
.I Build
has
.I viewpaths
that allow source files to reside
in more than one directory.
.I Viewpaths
support the sharing of source files between many users
and help eliminate the proliferation of source copies.
The semantics of multiple directories, however, conflict with the
flat, single directory approach of
old-make
.RI ( old-make
refers to the
.I make
distributed with the System 5 UNIX*
.FS *
UNIX is a trademark of AT&T Bell Laboratories.
.FE
system and
.I new-make
refers to the Fourth Generation
.IR make ).
.I Build
must
.I link
or
.I copy
files into the current directory
to comply with the single directory nature of
.IR old-make .
Without
.IR build ,
multiple directories are usually handled
by using recursive
.IR make s.
Because of the
large data area (which must be copied on
.IR fork )
and the time consumed by
the startup mechanisms (parsing builtin rules, scanning directories, etc.),
recursive
.I make
calls are inefficient.
.P
The Fourth Generation
.I make
is the result of a research effort to improve
the execution and semantics of
.I old-make
and to update the model of
.I make
to be more consistent with such concepts as
multiple source directories and concurrent execution of update commands.
.P
The main features of the Fourth Generation
.I make
are that it:
.P
.BL
.LI
Efficiently supports both source and targets in multiple directories.
.LI
Provides a more efficient interface to the
.IR shell .
.LI
Decreases redundancies inherent in old makefiles.
.LI
Refines the granularity from the
.I file
to the
.I variable
level.
.LI
Provides mechanisms for writing portable makefiles.
.LI
Provides a powerful metalanguage for constructing builtin rules.
.LI
Supports program configuration and generation for many UNIX system environments.
.LI
Compiles makefiles into binary form for reduced startup time.
.LI
Provides an abbreviated syntax to accommodate the most common
uses of
.IR make .
.LI
Provides optional dynamic dependency generation.
.LI
Provides a natural interface for object library maintenance.
.LI
Provides a natural interface to SCCS.
.LE
.P
This paper describes the motivation and design of the new features
of the Fourth Generation
.I make
and also discusses
the advantages of using
.IR new-make .
Some of these advantages are:
.P
.BL
.LI
.B "Decreased makefile size \-"
most
.I new
makefiles
consist of one or two lines of
.I source
file dependencies.
Conversion of the BSD and 3B2 kernel makefiles shows a factor of ten
decrease in makefile size.
.LI
.B "Consolidation of makefiles \-"
usually, recursive
configurations of old makefiles can be replaced by
one makefile.
This occurred in the conversion of BSD and 3B2 kernel makefiles.
.LI
.B "Improved consistency checking \-"
duplicate source and header files are reported.
Additionally, missing header files are reported before
compilation takes place.
.LI
.B "User definable builtin rules \-"
the default builtin rules are just
a compiled makefile binary, so there is no loss of
efficiency when other default rules are used.
The default rules can either be completely bypassed or augmented,
depending on the input options to
.IR make .
.LI
.B "Decreased execution time \-"
experiments on large makefiles
(when all targets are up to date)
show a factor of ten average decrease in execution time.
The shell
interface also eliminates one
.I fork
and one
.I exec
for each makefile command line executed.
In contrast to
.IR old-make ,
which
.I forks
for each command line,
.I new-make
.I forks
only once to initialize the
.I shell
co-process.
After this initialization the shell is the only
.I forked
process.
.LI
.B "Efficient file sharing \-"
software development teams can easily
share single copies of source and object files.
.LI
.B "Improved software organization \-"
the multiple directory
nature of
.I new-make
encourages the organization of large
software project files into more than one directory.
Unlike
.IR build ,
.I new-make
allows files to be distributed
over arbitrary directory structures.
.LE
.P
Since the full functionality of
.I new-make
cannot be realized using the restricted model
provided by
.IR old-make ,
.I new-make
does not support old makefiles.
This is because the research effort of
.IR new-make 
emphasizes increased execution speed
and simplicity of use over issues of backward compatibility.
.P
The remaining sections elaborate on the features and improvements
introduced in
.IR new-make .
This paper is not a tutorial and so does not
contain a detailed description
of specific command
arguments, options or actions.
All timing estimates are based on the user and sys times
of programs running on a VAX/750*.
.FS *
VAX is a trademark of Digital Equipment Corporation.
.FE
.H 1 MAKEFILES
Makefiles are typically at the source of software portability problems.
More often than not, makefiles are run in combination with
shell scripts to determine the current environment parameters.
In the worst cases, the user is interactively prompted for the desired
information.
.P
A major goal of
.I new-make
is to encapsulate as much information as possible into a single makefile.
A new shell interface and makefile preprocessor make 
this encapsulation possible.
As a result
it is possible for the same makefile to run on different
machines and even on different versions of the UNIX system.
.H 2 Preprocessing
Each makefile is preprocessed by the C preprocessor
.IR cpp ,
making the full flexibility of include files and macro definitions
available to makefile users.
The version of
.I cpp
distributed with the
.I new-make
also contains some changes that improve makefile portability.
.B #if
statements may use the following builtin tests:
.P
.VL 10 2
.LI \f3exists\fP(\f2file\fP)
.br
Returns 1 if
.I file
can be found using the
.B #include
search rules.
.I File
may optionally be enclosed in
.BR "<\|>" ,
just as in the
.B #include
statement.
This test can be used to tailor software generation for specific
UNIX variants and environments.
.LI \f3identifiers\fP(\f2file\fP,\f2id1\fP,...)
.br
Searches
.I file
for the null terminated identifiers
.IR id1 ...
and returns the number of identifiers found.
Initial
.B _
characters in both
.IR id1 ...
and identifiers in
.I file
are ignored.
If
.I file
is an archive with a symbol directory then only the symbol directory
is searched.
Therefore, this test can be used to determine if a function or global symbol
is present in an object library.
.LE
.P
Additional function predicates are defined by
.B #assert
statements in the include file
.B <default.h>
which is automatically included by
.I cpp
before the first input file is read.
.BI "#assert " predicate ( value )
makes assertions that can be tested in
.B #if
expressions.
Such assertions
are only recognized within
.B #if
expressions and do not conflict with
.B #define
variable expansions.
Most assertions deal with the current machine environment:
.P
.VL 10 2
.LI \f3system\fP(\f2system-name\fP)
.br
Defines the operating system name.
Example values for
.I system-name
are
.B unix
and
.BR gcos .
.LI \f3release\fP(\f2system-release\fP)
.br
Defines the operating system release name.
Example values for
.I system-release
are
.BR apollo ,
.BR bsd ,
.BR research ,
.BR sun ,
.BR system5 ,
.BR uts ,
and
.BR venix .
.LI \f3version\fP(\f2release-version\fP)
.br
Defines the operating system release version.
Example values for
.I release-version
are
.B 4.1c
and
.B 4.2
for
.BR release(bsd) ,
.B 7
and
.B 8
for
.B release(research)
and
.BR 5.0
etc. for
.BR release(system5) .
.LI \f3model\fP(\f2model-name\fP)
.br
Defines the hardware model name that also encompasses workstation names.
Example values for
.I model-name
are
.BR apollo ,
.BR sun ,
.B ibm-pc
and
.BR unix-pc .
.LI \f3architecture\fP(\f2architecture-name\fP)
.br
Defines the processor architecture name.
Example values for
.I architecture-name
are
.BR 3b ,
.BR 68000 ,
.BR ibm ,
.BR pdp11 ,
and
.BR vax .
.LI \f3machine\fP(\f2architecture-version\fP)
.br
Defines the processor architecture version.
Example values for
.I architecture-version
are
.BR 2 ,
.B 20
and
.B 20s
for
.BR architecture(3b) ,
.B 70
etc. for
.B architecture(pdp11)
and
.BR 750 ,
.B 780
and
.B micro
for
.BR architecture(vax) .
.LE
.H 2 Compilation
When all targets are up to date,
.I old-make
spends most of its time parsing the builtin rules and input makefiles,
whereas
.I new-make
avoids this problem by compiling makefiles into binary make object files.
The input makefile
.IB x .mk
is automatically compiled into the make object file
.IB x .mo
whenever the object file is out of date with the corresponding makefile.
.P
Compilation takes place after the makefiles are read and parsed
and involves writing the internal structures to a file in relocatable
form.
The time spent compiling is negligible compared to the parsing time and
loading compiled makefiles saves an average of 2 seconds on program startup.
.P
Whereas 
.I old-make
must parse its builtin rules on program startup,
.I new-make
loads the standard builtin rules from a compiled makefile.
Since the standard builtin rules are placed in a compiled makefile,
substituting local builtin rules for the standard ones
results in no loss of performance.
Local builtin rules can be specified either on the
.I make
command line or in the
.B MAKERULES
environment variable.
.H 2 Operators
.I New-make
supports (two character) operators that may be
defined in the builtin rules file.
The usage syntax of these operators is exactly like the
.B :
dependency operator,
but the semantics depend on the specific operator definitions.
.P
Only one new operator,
.BR :: ,
is provided in the standard builtin rules.
Unlike the
.B :
dependency operator,
which typically specifies
.I object
file dependencies,
.B ::
may be used to specify
.I source
file dependencies:
.XS
program : p1.o p2.o p3.o
	$(CC) -o program p1.o p2.o p3.o -lm
.XE
can be specified as
.XS
program :: program.mk p1.y p2.l p3.c -lm
.XE
Using
.B ::
eliminates the duplication of file name lists and also provides
other important features (see
.B "Dependency Generation"
and
.B "Common Actions"
below).
.H 1 BINDING
A basic internal operation
is the
.I binding
of rule names to objects
(e.g., files and variables)
in the system.
.I Binding
enables files to be placed in more than one directory and also allows
targets to depend on variable definitions as well as files.
.H 2 Files
Rule names are bound to file names using the dependencies of
the special
.B .SOURCE
and
.BI .SOURCE .x
rules.
The dependencies of these rules are directories to be scanned
when searching for files.
The current directory is always scanned first.
Then, files with suffix
.I .x
are searched for in the directories specified by
.BI .SOURCE .x.
Finally, the
.B .SOURCE
directories are searched.
The left to right
.B .SOURCE
dependency ordering is important;
.I make
warns when a file is found in more than one directory, but continues with the
first file found.
.H 2 "State Variables"
A
.I "state variable"
is a variable whose modify time and definition is stored
from one invocation of
.I make
to the next.
.I "State variables"
have two basic forms:
.BI ( variable )
is a makefile or
.I environment
variable and
.IR file ( variable )
is a variable corresponding to a
.B #define
statement in
.IR file .
For example:
.XS
x.o : header.h(DEBUG) (MACHINE)
.XE
specifies that
.I x.o
depends on the definition of the variable
.B DEBUG
in the file
.I header.h
and the definition of
.B MACHINE
from the current makefile.
If either definition changes from one invocation to the next then
.I x.o
will become out of date and will be regenerated.
.P
A file is scanned for
.B #define
definitions only if it has been modified since the last time it was scanned.
The first 
.B #define
definition for a variable is used and all other definitions are ignored.
.P
The state variable definitions are stored in the state file
.IB base .ms
where
.I base
is the base name of the first makefile in the argument list.
The state file is implemented as a compiled make object file,
resulting in little maintenance overhead.
Some dependency information is also stored in the state file
(see
.B "Dependency Generation"
below).
.H 1 "VARIABLE EXPANSION"
The basic actions of
.I new-make
are controlled by the builtin rules,
with most of the expressive power concentrated in
variable definitions and expansions.
The addition of operators and editing to variable expansions
has resulted in a powerful makefile metalanguage.
As a testimony to the strength of this metalanguage, most new
.I make
features
and ideas have resulted in changes to the standard builtin rules
(written as a makefile)
rather than in changes to the
.I make
C source files.
.P
The metalanguage produces a more complex set of builtin rules,
but in turn allows simple, concise and easy to maintain user makefiles.
.H 2 Assignment
There are three variable definition operators:
.P
.VL 20 2
.LI \f2variable\fP\|\f3=\fP\|\f2value\fP
.I Value
is assigned to
.I variable
without expansion.
.LI \f2variable\fP\|\f3:=\fP\|\f2value\fP
.I Value
is expanded and then assigned to
.IR variable.
This allows a variable to contain all or portions of its previous value.
.LI \f2variable\fP\|\f3+=\fP\|\f2value\fP
.I Value
is expanded and appended to the current value of
.IR variable .
This allows lists to be generated in variable values.
.LE
.H 2 "Expansion"
Each occurrence of
.BI $( variable )
in a makefile is replaced by the assigned
.I value
of 
.IR variable .
The substitution is recursive in that 
.I value
is checked for other variable expansions before being substituted.
.BI $( variable : operator )
causes 
.I value
to be edited according to the specifications in
.I operator
before being substituted.
.B :
is used to separate multiple
.IR operators .
The general form for 
.I operator
is
.IB op [= arg ]
where
.I op
is a single character operator name and
.I arg
is an optional operator argument.
The operators are applied to each space separated token
in the expanded variable value.
The variable name itself is expanded before the value is determined,
implementing primitive variable subscripting.
.H 3 "File Components"
Because of the multiple directory nature of
.I new-make
it is important to be able to separate a file name into its
individual components.
File names are divided into the following five basic components:
.P
.VL 20 2
.LI \f3M\fP\|\f2machine\fP
All characters up to and including the last
.BR ! .
.I Null
if no
.B !
appears.
The
.I machine
component is supported but not used in the current implementation.
.LI \f3D\fP\|\f2directory\fP
All characters after the last
.B !
up to and including the last
.BR / .
.I Null
if no
.B /
appears.
.LI \f3P\fP\|\f2prefix\fP
All characters after the last
.B /
up to and including the first
.BR . .
.I Null
if there are less than two
.BR . 's
or if
.B .
is the first character.
.LI \f3B\fP\|\f2base\fP
All characters after the first
.B .
up to but not including the last
.BR . .
.LI \f3S\fP\|\f2suffix\fP
All characters from the last
.B .
to the end.
.I Null
if no
.B .
appears.
.LE
.P
Here is an example using file name component editing:
.XS
FILES = a.y dir/s.x.c bozo!.profile

$(FILES)                 ->      a.y dir/s.x.c bozo!.profile
$(FILES:B:S=.o)          ->      a.o x.o .profile.o
$(FILES:DBS)             ->      a.y dir/x.c .profile
$(FILES:M)               ->      bozo!
.XE
.H 3 Matching
Space separated tokens in variable values can be matched using the shell file
pattern matching characters in the
.BI :N= pattern :
.BI :N!= pattern :
edit operators.
The matching occurs before component editing takes place.
Using
.B FILES
as an example:
.XS
$(FILES:N=*.c)           ->      dir/s.x.c
$(FILES:N!=*.c)          ->      a.y bozo!.profile
$(FILES:N=*.[cy]:BS=.o)  ->      a.o x.o
.XE
.H 3 Substitution
Tokens in variable values can be substituted using the
.BI :C <del>old<del>new<del> :
substitute edit command.
.I <del>
may be any character and
.B C/
may be abbreviated by
.BR / .
For example:
.XS
$(FILES:/ /\\\\:/)           ->      a.y:dir/s.x.c:bozo!.profile
$(FILES:C%/%--%)          ->      a.y dir--s.x.c bozo!.profile
.XE
Notice that the
.B :
must be escaped to distinguish it from the
.B :
edit operator.
.H 3 Binding
Variable value tokens may also be
.I bound
and selected by type using the
.BI :T= type :
edit operator.
The types are:
.P
.VL 10 2
.LI \f3A\fP
Each token that can be bound to an
.I archive
is expanded.
.LI \f3D\fP
Each token that can be bound to a
.I "state variable"
is expanded using the
.I "state variable"
definition.
The expanded definitions may be used as arguments to the
.I cc
command.
.LI \f3F\fP
Each token that can be
.I bound
to a file is expanded using the
.I bound
file name.
.LI \f3N\fP
If
.I variable
has a null value then the null string is expanded, otherwise
.B #
is expanded.
This can be used to specify conditional makefile input.
.LI \f3O\fP
Each token that is bound neither to a file nor to a
.I "state variable"
is expanded.
.LI \f3S\fP
Each token that can be
.I bound
to a
.I "state variable"
is expanded.
.LI \f3V\fP
If
.I variable
has a non-null value then the null string is expanded, otherwise
.B #
is expanded.
.LE
.P
For example:
.XS
FILES = x.c (DEBUG) (TEST) libc.a
TEST =
DEBUG = 1

$(FILES:T=D)              ->      -DDEBUG
$(FILES:T=F)              ->      x.c /lib/libc.a
$(FILES:T=S)              ->      (DEBUG) (TEST)
$(TEST:T=V)               ->      #
$(FILES:T=V)              -> 
.XE
.H 1 "RULE ATTRIBUTES"
.I New-make
uses rule attributes
to control the disposition of rules and targets.
For example, the
.B .ARCHIVE
attribute specifies that a bound rule is to be treated as an
object file archive.
This attribute allows the following concise archive dependency specification:
.XS
lib.a :: a.c b.c c.y x.s
.XE
Attributes also allow
.I new-make
to assume some system dependent maintenance responsibilities.
For example,
on Berkeley variants of the UNIX system,
.B .ARCHIVE
targets are automatically updated using
.IR ranlib .
.P
Some attributes are assigned automatically,
some are determined by the suffix of the current target
.RB ( .a
files are given the
.B .ARCHIVE
attribute)
and others may be assigned explicitly in the makefile.
.P
Another attribute
.B .USE
allows a single command update sequence to be shared by many targets.
For example:
.XS
a.o : (DEBUG)
	$(CC) $(CCFLAGS) -S $(>)
	$(FIXUP) $(>:BS=.s)
	$(CC) -c $(>:BS=.s)
	$(RM) $(RMFLAGS) $(>:BS=.s)

b.o : (PROFILE)
	$(CC) $(CCFLAGS) -S $(>)
	$(FIXUP) $(>:BS=.s)
	$(CC) -c $(>:BS=.s)
	$(RM) $(RMFLAGS) $(>:BS=.s)
.XE
can be replaced by
.XS
a.o : .FIXUP (DEBUG)
b.o : .FIXUP (PROFILE)

\&.FIXUP : .USE
	$(CC) $(CCFLAGS) -S $(>)
	$(FIXUP) $(>:BS=.s)
	$(CC) -c $(>:BS=.s)
	$(RM) $(RMFLAGS) $(>:BS=.s)
.XE
.P
A brief description of the attributes and special rules appears in the
attached manual pages.
.H 1 "DEPENDENCY GENERATION"
The main task of 
.I make
is to verify that any changes made to source files are reflected in the
corresponding object files.
This verification, however, relies on the proper dependencies being 
placed in the controlling makefiles.
A single omitted dependency can cause inconsistencies between the
source and object files.
.P
.I New-make
eliminates some of these inconsistencies by
dynamically generating file dependencies from a given set of source files.
Such dependencies are automatically generated when the
.B ::
dependency operator is used.
The generated dependencies are stored in the state file along with the
state variable definitions.
.P
The file dependencies are determined by scanning the files for
.B #include
statements.
A file is only scanned if it has been modified since the last
time it was scanned.
In the worst cases, automatic dependency generation
only doubles the execution
time of
.I make
(not including the time spent updating the targets).
.P
.B #include
dependencies within conditional
.B #if
constructs are given the
.B .DONTCARE
attribute that allows
.I make
to continue if the corresponding files cannot be found.
.P
A minor drawback is that the files depend on
.I all
.B #include
dependencies, even if some of the dependencies are from
``compiled out'' parts of the source files.
However, for a given application the 
``compiled out'' dependencies are rarely modified.
A proposed alternative is to use
.I cpp
to produce the exact dependencies, and feasibility experiments
are now underway.
Initial results show that
.I cpp
scanning may be appropriate only after major changes to the source files,
and that the basic
.B #include
scanning is sufficient for most applications.
.P
In any event, even the basic dynamic
.B #include
file dependency generation
provides a more consistent environment than statically generated dependencies
using
.IR old-make .
.H 1 "SHELL INTERFACE"
The execution of update commands has undergone major performance
and semantic changes in
.IR new-make .
All update commands are sent to a single copy of the shell,
keeping the shell environment intact between command executions.
This includes the effects of
.I cd
and shell parameter assignments.
.P
Since only one copy of the shell is used,
.I new-make
.I forks
just once to initialize the shell as a
.IR co-process .
While commands are being executed by the shell,
.I new-make
continues by checking the dependencies of the next target.
Thus the next update command is almost always determined by the time
the current command completes.
.P
An added advantage is that command 
.I aliasing
and shell
.I functions
are preserved in update command blocks.
.I Old-make
uses either the
.I system
or 
.I exec
call to execute each command line.
In
.IR old-make ,
if a line contains shell metacharacters
.RB ( $\||\|()>< )
then it is sent to the shell via
.IR system ,
otherwise the command is executed via a
.I fork
and
.IR exec .
.I Aliases
in the latter case are ignored by
.IR old-make .
.H 2 "Command Blocks"
The new makefile structure supports natural shell command specification.
Update command lines for a particular target are sent to the
shell as a block, allowing shell
.BR case ,
.BR for ,
.BR if
and
.B while
constructs to cross
.B newline
boundaries without intervening
.B backslash
and
.B semicolon
characters.
.P
With this co-process arrangement makefiles can be viewed as
.I labeled
shell scripts.
The labels (targets) merely determine when the corresponding
command blocks are executed.
.P
To avoid confusion between the use of
.B $
in
.I new-make
and the shell,
only the
.B $(...)
forms are expanded by
.I new-make
.RB ( $$(...)
expands to
.BR $(...) ).
.B $
in any other context is passed untouched to the shell.
.H 2 "Communication"
.I Pipes
are used for communication between
.I new-make
and the shell.
.I Make
sends commands to the shell on one
.I pipe
and receives status information from the shell on a second
.IR pipe .
The status information is organized into four message packets:
.P
.VL 10 2
.LI "\f3error exit-code\fP"
.br
Sent when a command returns a non-zero exit code.
.LI "\f3exit\fP"
.br
Sent when a command block completes.
.LI "\f3read make-command\fP"
.br
Sends
.I make-command
back to
.I make
to be parsed as if it originated in a makefile.
This allows dynamic makefile generation,
but this feature has not been used (or recommended)
in any major applications.
.LI "\f3start process-id\fP"
.br
This packet associates a command block with a subshell process id
when concurrent execution is enabled.
This allows
.I make
to wait for its children for proper time accounting.
.LE
.P
It is sometimes desirable for
.I make
to continue with other targets even after an error has occurred.
A
.I trap
on command error was added to the
shell to handle this case in a co-process environment.
In addition, since entire command blocks are sent to the shell,
the
.B \-x
execution trace flag of the shell is used to echo each individual command
as it is executed.
.I New-make
places control commands between the command update blocks and constantly
switches between the
.B \-x
and
.B +x
options.
So as not to clutter the execution trace with
.B "set +x"
commands,
the shell suppresses the execution trace of
.B "set +x"
when
.B "set \-x"
is in effect.
Many thanks to Dave Korn for adding these two features to
.IR ksh\*(Rf .
.RS
D. G. Korn,
.I "KSH \- A Shell Programming Language" ,
USENIX Toronto 1983 Summer Conference Proceedings,
pp. 191-202, 1983.
.RF
Although 
.I new-make 
works best with KSH, it also runs with the Bourne shell\*(Rf.
.RS
S. R. Bourne,
.I "The UNIX Shell",
AT&T Bell Laboratories Technical Journal,
Vol. 57 No. 6 Part 2, pp. 1971-1990, July-August 1978.
.RF
.H 2 "Concurrent Execution"
With the shell as a co-process it is a trivial matter to add concurrent
command execution to
.IR new-make .
Internally each command block is simply enclosed by
.B {
and
.B }&
and a
.I jobs
table is used to associate targets with process ids.
The dependency graph specified by the input makefiles is then used
to determine when
.I new-make
must wait for certain targets to complete.
.P
The
.BI \-j n
command line option is used to specify the maximum number of concurrent
jobs.
By default only one job is used,
but if
.I n
is greater than 1 then each update command block is sent to a new subshell
(background shell).
Background shells inherit the environment of the main shell
(foreground shell) and the foreground shell inherits the environment of
.IR new-make .
It is important to
note that no makefile changes are necessary to support concurrent
execution.
.P
Concurrent execution should have a major effect on multi\-processor
machines and on systems equipped with compiler ``black boxes.''
On such machines it would be possible for each command block to execute
on different processors.
.H 1 "OPTION GENERATION"
The builtin rules automatically generate the proper
.BR \-D ,
.B \-I
and
.B \-L
options of
.I cc
in the
.B $(CCFLAGS)
variable.
The
.B \-D
options are generated from
.I "state variable"
dependencies,
the
.B \-I
options are generated from the dependencies of the
.B .SOURCE.h
rule and the
.B \-L
options are generated from the dependencies of the
.B .SOURCE.a
rule.
.I "State variable"
dependencies specified using the
.B ::
operator apply to all dependencies of the corresponding target
(global dependencies),
otherwise the dependencies apply only to the individual target of each
.B :
operator.
.H 1 "COMMON ACTIONS"
When the
.B ::
operator is used several common action targets are automatically defined.
The common action target
.I xxx
is defined as
.I .XXX
in the builtin rules.
If
.I xxx
appears as a command line target and
.I xxx
has not been defined by the input
.I makefiles
then the target
.I .XXX
is made.
The common actions are:
.P
.VL 10 2
.LI \f3clean\fP
Deletes all object files corresponding to the current makefile.
.LI \f3clobber\fP
Executes the
.B clean
action and also deletes the target(s) corresponding to the current makefile.
.LI \f3cpio\fP
Creates a
.I cpio
archive of the source files listed after each
.B ::
operator.
The archive is placed in the file
.IB main .cpio
where
.I main
is the base name of the main target rule.
.LI \f3install\fP
Makes the main target and copies it to the directory
.BR $(INSTALLDIR) .
By default,
.B $(INSTALLDIR)
is
.B $(ROOT\||\|HOME)/bin
(use
.B $(ROOT)
if it is defined otherwise use
.BR $(HOME) )
for executable targets and
.B $(ROOT\||\|HOME)/lib
for object archive targets.
The commands associated with the rule
.B .DOINSTALL
are used to do the copy.
.LI \f3lint\fP
Runs
.I lint
on the input source files.
The proper
.B \-D
and
.B \-I
options are associated with each source file
(see
.BR "Option Generation" ).
Any
.B .l
and
.B .y
source files are automatically preprocessed if necessary.
.LI \f3print\fP
The source files are printed by passing them through the filter
.B $(PR)
and listing them with
.BR $(LP) .
.LI \f3tar\fP
Creates a
.I tar
archive of the source files listed after each
.B ::
operator.
The archive is placed in the file
.IB main .tar
where
.I main
is the base name of the main target rule.
.LI \f3ucpio\fP
Same as
.B cpio
except that only those source files modified since the last
.B ucpio
are archived.
If
.B $(UTIME)
is defined then it is taken to be a file name whose modify time is used
to determine the files to be archived; only those files newer than
this modify time are archived.
.LI \f3uprint\fP
Same as
.B print
except that only those source files modified since the last
.B uprint
are printed.
.LI \f3utar\fP
Same as
.B tar
except that only those source files modified since the last
.B utar
are archived.
.H 1 "SCCS INTERFACE"
The SCCS\*(Rf
.RS
L. E. Bonnani and C. A. Salemi,
.I "Source Code Control System User's Guide" ,
System V Programmer's Manual.
.RF
interface is enhanced by the addition of
.I prefix
rules.
The prefix rule
.I p.
specifies how the file
.B x
is to be generated from the file
.IB p. x .
The following rules provide complete support for SCCS files:
.XS
\&.PREFIXES : s.

s. :
	$(GET) $(GETFLAGS) $(>) > $(<)
	...
	$(UNGET) $(<)
.XE
The
.B ...
separates the update blocks into
.IR pre \-commands
and
.IR post \-commands.
The
.IR pre \-commands
are executed to update the target, whereas the
.IR post \-commands
are stacked (first in first out) until the last target has been updated.
.P
This implementation eliminates the proliferation of
.B \~
rules found in
.I old-make
and
.IR build .
.H 1 CONCLUSION
The Fourth Generation
.I make
is being used successfully by a growing community of users.
The program
performs well enough that users are not tempted to bypass
.I make
by manually issuing compile and
.I touch
commands.
.P
After nearly five months of constant use
the program has settled into a panic-free steady state
and is ready for wider experimental distribution.
The features and performance gains of this program should
make it an attractive software construction tool for both individual
users and large projects.
The average tenfold decrease in makefile size should be of particular
interest to large software project managers.
.sp
.sp
.SG ""
.RP
.nr Hu 1
.nr Hc 1
.nr Ej 1
.HU "Appendix A: MAKEFILE EXAMPLE"
.XS
#
# old makefile
#

DEBUG = -DDEBUG
MAX = 123

CFLAGS = -O -I$(HOME)/include $(DEBUG)

CFILES = dir/a.c b.c c.c d.c
HFILES = c.h
OFILES = a.o b.o c.o d.o

command : $(OFILES)
	$(CC) -o command $(OFILES) $(HOME)/lib/lib.a -lm

a.o : dir/a.c $(HOME)/include/a.h
	$(CC) $(CFLAGS) dir/a.c

b.o : $(HOME)/include/b.h c.h

c.o : c.c
	$(CC) $(CFLAGS) -DMAX=$(MAX) c.c

print :
	pr Makefile $(HFILES) $(CFILES) | lp

lint :
	lint $(CFLAGS) $(CFILES)



/*
 * new makefile
 * all files recompiled if DEBUG value changes
 * c.o recompiled if MAX value changes
 */

DEBUG = 1
MAX = 123

\&.SOURCE.h : $(HOME)/include
\&.SOURCE.a : $(HOME)/lib
\&.SOURCE : dir

command :: Makefile c.h a.c b.c c.c d.c lib.a -lm (DEBUG)

c.o : (MAX)

.XE
.HU "Appendix B: MANUAL PAGE"
.TC
.CS 12 13 25
