.ds nM nmake\"	`make' someday
.ds oM make\"	`omake' someday
.TH MKCV 1
.(B
.tl @Copyright (c) 1984, 1985, 1986, 1987@@AT&T All Rights Reserved@
.(E 2
.SH NAME
mkcv \- convert an old makefile
.SH SYNOPSIS
.B mkcv
[
.I old-make-options
]
.SH DESCRIPTION
.I mkcv
converts an old
.IR \*(oM (1)
makefile and lists the equivalent Fourth Generation
.IR \*(nM (1)
makefile on the standard output.
.I mkcv
accepts
.I \*(oM
arguments and options and should be run in the same directory as
.I \*(oM
would have been run.
Only active targets are listed in the output makefile.
.PP
The conversion process is divided into two passes.
The first pass is a modified version of
.IR \*(oM .
The second pass constructs the
.I \*(nM
makefile on the standard output based on information supplied by the first pass.
.PP
Symbolic information is preserved where possible in the output makefile.
Comments, however, are lost in the conversion.
Header file dependencies are not listed in the output makefile since these
are automatically generated by
.IR \*(nM .
.PP
.I mkcv
is only an
.I aid
to be used as the first phase in the makefile conversion process.
In almost all cases the output makefiles should be edited for fine tuning.
.SH FILES
makefile, Makefile
.SH DIAGNOSTICS
Messages from 
.I mkcv
are preceded by 
.BR "mkcv: " ;
all other messages are output by
.I \*(oM .
.SH "SEE ALSO"
\*(nM(1), mkold(1), \*(oM(1)
.SH CAVEATS
The output makefile should be edited and tested at least once using
.B "\*(nM -n"
for verification.
.PP
Recursive makefiles are not converted;
each makefile level must be converted separately.
.PP
Some targets are omitted in the output makefiles.
Most of these are provided as default action targets in
.I \*(nM .
.PP
State variables with quoted values may have the quotes dropped in the
translation.
Be sure to check for these.
.PP
Common command sequences are placed in the
.B .USE
rules named
.BI .COMMAND. nn.
Local
.B \-I
dependencies are placed in the state variables named
.BI (.INCLUDE. nn ) .
