.TH PEOPLE 1 "6/6/87
.SH NAME
people \- Access private user name database
.SH SYNOPIS
.B people
[
.B \-f
file ] [
search-key
]
.br
.B ph
[
.B \-f
file ] [
search-key
]
.br
.B email
[
.B \-f
file ] [
search-key
]
.br
.B home
[
.B \-f
file ] [
search-key
]
.br
.B work
[
.B \-f
file ] [
search-key
]
.SH DESCRIPTION
These programs are all links to the same binary which is used to
access a user's private database of contact addresses.
The contact addresses are stored in an ascii file which can be
maintained by normal editing operations.
Another program
.IR peopledbm (1)
may be optionally used to generate an index stored in a
.IR dbm (3x)
format giving fast random access into the data base.
.LP
The datafile is usually stored in a file `.people' on the users home
directory.
The
.B \-f
switch can be used to access other databases, alternatively
another location may be selected by supplying an environment variable
.IP
PEOPLE=
.LP
where the value of the variable gives the name of the file
containing the people database.
.SS "Datafile format"
The datafile consists of a number of records, each spanning several lines.
Records are separated by one or more blank lines.
Fields in the records commence at the start of the line with the
construction:
.IP
*keyword:
.LP
Where the keywords indicates the field type.
White space (tabs and spaces) after the colon is ignored.
Conventionally, the colon is followed by a single space.
The field is terminated by the end of the line, there is no provision
for continuation.
To make a field span several lines, the *keyword: construction
is used at the start of each line in the field.
The software assumes that this is happening (apart from the *name: line)
and presents the multiple fields in the order which they appear in the
record.
.SS "Keywords"
The software currently knows about the following keywords:
.TP "\w'home-phone 'u"
name
Gives the name of the person to which the record refers.
The convention here is that the surname is the last token (see below) on
the line, with forenames preceding it.
This is the only field which must consist of a single line.
.IP "work"
Gives the work address of the person to which the record refers.
This is normally several lines.
.IP "phone"
The work telephone number, conventionally in international format.
.IP "telex"
The telex number of the person's work.
.IP "fax"
The fax number of the persons work.
.IP email
The email address of the person.
.IP "home"
The home address of the person.
.IP "home-phone"
The home telephone number.
.IP "key"
A number of keywords which may be used to tie together several
records; for instance, `ukc-staff' is used for staff members at UKC.
.IP "comment"
Lines containing comments.
The software does not use this one but it seems sensible to define it here.
.IP date
The date which the record was created.
The idea here is that all records will be dated, and this will eventually
give an indication of the validity of the data the record.
This is another comment field.
.LP
The software does not check the keywords, so users may invent other
comment ones.
.SS "Enquiries"
The entire database is normally printed
if the programs are given no extra parameters.
But usually the arguments to the program are used to select records
for printing.
The `name', `email' and `key' fields are searched for matching
data.
For example,
.IP
people john
.LP
will match all the John's in the database.
More selective matching may be obtained by supplying further
qualifying arguments, for example:
.IP
people john smith
.LP
Will match a name line like:
.IP
*name: John Smith
.LP
Notice that it will also match
.IP
*name: John and Joan Smith
.LP
Matching is case independent and is done on complete words (or tokens)
in the input line.
A token consists of the letters `a' to `z', and the characters `\-'
and single quote.
There is currently no provision for fuzzy matching, regular expressions
or wild cards.
This permits the use of a dbm data base to cut down searching time, see
.IR peopledbm (1).
Also,
in mitigation, since the data file is a regular ascii file,
.IR grep (1)
or one of its variants may be used to search the database for fuzzy
matches when required.
.SS "Program output"
The reason for having several programs which access the database,
is to provide fast access to common enquiries.
The section below gives the output produced by the programs,
notice that the programs all fail silently, printing nothing
if nothing is to be printed.
.TP  "\w'people 'u"
people
Outputs the entire matched record as it is found in the source file.
To allow the creation of new databases, an extra newline is
added after each record.
.IP ph
Prints the phone numbers found in the matched records.
The format is:
.RS
.IP
Full Name: (work) phone
.IP
from the `*phone' keywords, and
.IP
Full Name: (home) phone
.IP
from the `*home-phone' keywords.
.RE
.IP
`Full name', here is taken from the `*name' line.
.IP email
Prints the email addresses found in each matched record in the form:
.RS
.IP
Full Name: email
.RE
.LP
.IP work
Prints an `address' like output from the matched records.
Output is:
.RS
.IP
Full name \- from the *name: field
.br
Work address \- several lines from the *work: field
.br
Work phone number \- from the *phone field
.br
Fax number \- from the *fax field
.br
Telex number \- from the *telex field
.br
Email address \- from the *email field
.RE
.LP
.IP home
Prints the domestic information for the user.
Output is:-
.RS
.IP
Full name \- from the *name: field
.br
The home address \- from the *home field
.br
The home phone number \- from the *home-phone field.
.RE
.SH "SEE ALSO"
peoplesort (1), peopledbm(1)
.SH BUGS
There should be some way to generate user selectable formatted output
like
.IR prs (1).
.SH AUTHOR
Peter Collinson, UKC. From an idea from David Tilbrook.
