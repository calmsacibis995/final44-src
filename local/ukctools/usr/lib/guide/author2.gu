This lesson covers `usage-buttons', and how to extend or destroy replacements and 
.Gu
other structures.
.Nl
.Nl
-- PART A:  CREATING USAGE-BUTTONS --
.Nl
.Nl
In the previous lesson you created a definition, and used that definition for a glossary-
.Gu
button.  You can equally well use a definition for a replace-button; such a replace-
.Gu
button is called a `usage-button', since it (normally) represents a usage of a definition 
.Gu
that is separate from the button itself.
.Nl
.Nl
EXPERIMENT 1:  As a prelude to later Experiments create a definition of `supervisor'
.Gu
 as `Mrs. Smith'.  (As you probably know, you do this by (1) placing the marker-bar 
.Gu
-- e.g. just below this Experiment, (2) selecting the Author command, (3) selecting 
.Gu
the +Definition command, (4) typing `supervisor', and then (5) selecting your new 
.Gu
button and typing `Mrs. Smith'.)
.Nl
.Nl
EXPERIMENT 2:  Create a usage-button corresponding to the above definition.  Do this 
.Gu
by placing the marker-bar just before the semicolon in the sentence below, and then 
.Gu
selecting the +Usage command and typing `supervisor' as the name of the usage-button:
.Nl
.Nl
	When in doubt consult ;
.Nl
.Nl
EXPERIMENT 3:  Select the usage-button that you have just created, and then try undoing 
.Gu
it.  You will see that it behaves like an ordinary replace-button.  The user does 
.Gu
not need to know whether a replace-button is a usage-button or a local-button: he 
.Gu
just selects the button and a replacement appears.
.Nl
.Nl
You may have noticed that the replacement of  a usage-button (like the replacement 
.Gu
of a glossary-buttons) is surrounded by reverse-video Cs (meaning Copy), whereas the 
.Gu
replacement of a definition-button or of a local-button is surrounded by reverse-video 
.Gu
Rs.  This lets the author identify which replacements are from usage-buttons.  The 
.Gu
Cs also warn the author that if he edits the material within them he is editing a 
.Gu
copy, not the original.
.Nl
.Nl
The same definition can be used by any number of usage-buttons and glossary-buttons.
.Gu
.Nl
.Nl
EXPERIMENT 4:  Select the following usage-button 
.Bu u 1 n
supervisor
.bU
 and then undo its replacement (in preparation for a later Experiment).  Select the 
.Gu
following glossary-button 
.Bu g 1 n
supervisor
.bU
.Gu .
.Nl
.Nl
As the above Experiments have suggested, definition-buttons and usage-buttons are 
.Gu
valuable when the author wants to have several buttons with the same name and the 
.Gu
same replacement (e.g. a `supervisor' button which gives the name of the supervisor)
.Gu
.Gu .
  In contrast, local-buttons are used when a particular occurrence of a button has 
.Gu
its own unique replacement; with local-buttons you can have several buttons each with 
.Gu
the same name but each with a different replacement (e.g. several buttons, each called 
.Gu
`More' and each giving more information on a different topic).
.Nl
.Nl
EXPERIMENT 5:  In order to save screen space, get rid of the glossary-view you have 
.Gu
just created.  Do this by selecting the Quit command and then selecting Delete-last-
.Gu
view.
.Nl
.Nl
EXPERIMENT 6:  Select the following usage-button 
.Bu u 1 n
supervisor
.bU
 and then edit its replacement (e.g. change `Smith' to `Smythe').  This change only 
.Gu
applies to this temporary copy of the definition, not to the definition itself.  To 
.Gu
confirm this select this usage: 
.Bu u 1 n
supervisor
.bU
; you will see that the definition has not changed.
.Nl
.Nl
EXPERIMENT 7:  Change the definition of `supervisor' that you created in Experiment 
.Gu
1.  Do this by (1) using the thumb-bar, if necessary,  to go back to the place where 
.Gu
you put the definition -- you should see its replacement (Mrs. Smith) enclosed within 
.Gu
reverse-video Rs); (2) changing `Mrs. Smith' to `Mr. Jones'; (3) using the thumb-bar 
.Gu
to get back here again.
.Nl
.Nl
EXPERIMENT 8:  Select the following usage-button: 
.Bu u 1 n
supervisor
.bU
.Gu .
  You will see that it is replaced by the new definition.
.Nl
.Nl
EXPERIMENT 9:  Select the usage-button of `supervisor' in Experiment 4; you will perhaps 
.Gu
be surprised to see that it is still replaced by the old definition (i.e. Mrs. Smith)
.Gu
.Gu .
  This behaviour is explained below; if, however, you are not interested in detail 
.Gu
just accept the rule that `an edited definition might not apply during the current 
.Gu
session, but if the source is saved it will apply in the next session' and skip to 
.Gu
PART B below.
.Nl
.Nl
When a definition is used, either by a glossary-button or by a usage-button, a copy 
.Gu
is made of the definition (hence the reverse-video Cs surrounding it).  Thereafter 
.Gu
the button is independent of the definition, and thus a change in the definition does 
.Gu
not affect the button.  Even undoing the button does not rid it of its temporary-definition.
.Gu
  This behaviour is designed to suit the reader, who may only be dimly aware of what 
.Gu
a definition is: the reader can be sure that if he makes change at one point in a 
.Gu
document (even if it happens to be a change in a definition), this will not mysteriously 
.Gu
alter some other text he has seen in his document.  The `surprising' behaviour in 
.Gu
Experiment 9 is a small penalty that the author pays for the reader's convenience.
.Gu
.Nl
.Nl
When a source file is saved, copies of definitions (as attached to usage-buttons and 
.Gu
glossary-buttons) are not (normally) saved.  Thus if you save a source file, anyone 
.Gu
who re-loads this source file will get the get the latest definition since it will 
.Gu
be copied anew when users employ it.
.Nl
.Nl
EXPERIMENT 10:  Save the current source (using the normal options) in a file called 
.Gu
t#, and then load the file t# by using the New command with Replace-all and with `t#
.Gu
.Gu '
 as the filename.  Skip through the new file to PART B as below, stopping on the 
.Gu
way to select a `supervisor' usage-button to make sure that it indeed does use the 
.Gu
new definition (i.e. that its replacement is now `Mr. Jones').
.Nl
.Nl
.Nl
-- PART B:  EXTENSIONS TO BUTTON-NAMES --
.Nl
.Nl
Usage-buttons and glossary-buttons are called `dependent' buttons, since their replacement 
.Gu
depends on something else.  So far we have assumed that the replacement always comes 
.Gu
from searching for a definition which matches the name of the dependent button;  there 
.Gu
are, however, several other ways of defining where the replacement is to come from.
.Gu
  This is achieved by means of an `extension' to the button-name.
.Nl
.Nl
EXPERIMENT 11:  Alternately select Author and Reader, and see what happens to this 
.Gu
glossary-button:  
.Bu g 1 n
supervisory executive officer	alias supervisor
.bU
.Gu .
  You will see that the button-name has an extension `alias supervisor', which is 
.Gu
only visible in author-display.
.Nl
.Nl
EXPERIMENT 12:  Select the glossary-button in the above Experiment.  You will see 
.Gu
that it behaves as if the button had the name `supervisor'.  To save screen space,
.Gu
 then use the Quit command to delete the glossary-view you have just created.
.Nl
.Nl
An extension is separated from the button-name by a tab.  (Ordinary button-names should 
.Gu
not contain tabs.)   The purpose of the extension is to define how the replacement 
.Gu
is to be created; it allows the author to choose any name for the button, and to disguise 
.Gu
from the reader the mechanics of the button's replacement.  Extensions can be attached 
.Gu
to usage-buttons, to glossary-buttons, and, in one special way, to definition-buttons.
.Gu
  As you have doubtless guessed, an `alias' extension allows the effective name of 
.Gu
the button to be different from the name the user sees.
.Nl
.Nl
Extensions can also be used to create dependent buttons that use completely different 
.Gu
mechanisms to create their replacements.
.Nl
.Nl
EXPERIMENT 13:  Select and undo the following button: 
.Bu u 1 n
timestamp	run date
.bU
.Gu .
  You will see the replacement of the usage-button is created by running the UNIX 
.Gu
command `date'.  Repeat this Experiment both in reader-display and author-display,
.Gu
 to see how each side views it.
.Nl
.Nl
Note that the replacement of a dependent button is created when the button is first 
.Gu
selected; if the button is subsequently undone and re-selected, the same replacement 
.Gu
will be used -- in the above example the UNIX date command is only run once.  (The 
.Gu
only exception to this arises when the author edits the button-name, e.g. by changing 
.Gu
`date' to `ls'; Guide then discards the old replacement.)
.Nl
.Nl
EXPERIMENT 14:  Create a dependent button to run any UNIX command of your choice (
.Gu
e.g. create a usage-button called `files    run ls -l'); beware, however, of anything 
.Gu
too exotic, since this facility gives authors rope to hang themselves.
.Nl
.Nl
Extensions offer lots of further facilities, but we will only outline them here, by 
.Gu
showing some examples which give a flavour of how authors can exploit them.
.Nl
.Nl
EXPERIMENT 15:  Select author-display, and try selecting and (for usage-buttons) undoing 
.Gu
the following buttons:
.Nl
.Nl
1:	
.Bu u 1 n
copier problems?	load copier
.bU
  (This button loads a separate Guide source; such buttons are useful for splitting 
.Gu
a large Guide source into smaller ones; `load' can be followed by any Guide command 
.Gu
string, i.e. any command string that can be typed for the New command.)
.Nl
.Nl
2:	Beware: this will overwrite the current window with a new incarnation of Guide: 
.Gu
select Quit to get back: 
.Bu g 1 n
RUN GUIDE	run guide	nowhere
.bU
; note that `nowhere' is an example of a `placement' -- it says where the replacement 
.Gu
is to be placed.  In this case there is no replacement so it is not kept anywhere; 
.Gu
another possible placement is `append', meaning place the temporary-definition at 
.Gu
the current end of this view, rather than in the glossary-view.
.Nl
.Nl
3:	
.Bu d 1 n
widget stock	of gs/23/789
.bU
.Re
334 widgets are in stock
.rE
; 
.Bu u 1 n
current stock	alias widget stock	of gs/23/789
.bU
; here the definition-button has an extension, introduced by the word `of'.  In this 
.Gu
example the extension is a reference number that the author uses to identify the definition 
.Gu
uniquely.  The usage-button labelled `current stock' uses this definition -- note 
.Gu
that the full name, including the `of' extension must be matched.  (This results in 
.Gu
the usage-button having a double extension: `alias' and `of'.)
.Nl
.Nl
4:	This command finds the first occurrence of xx in the document: 
.Bu g 1 n
Find-it	load -fxx	nowhere
.bU
  (It loads nothing, but the -f option causes a Find of xx.  It does, however, have 
.Gu
a problem if the xx is AFTER the button that causes the search; the search will then 
.Gu
find the xx that lies within the above button, i.e. it will find itself.  Quotes, 
.Gu
which are otherwise ignored in argument lists after `load', can be used to prevent 
.Gu
this: e.g. 
.Bu g 1 n
Find-it	load -fx''x	nowhere
.bU
.Gu .
)
.Nl
.Nl
5:	This usage-button shows how yes/no answers within an enquiry can be made to use 
.Gu
definitions: 
.En
Do you want to know the stock?  
.Bu u 1 n
Yes	alias widget stock	of gs/23/789
.bU
.eN
.Nl
.Nl
Also try the above Experiment in reader-display, to get the reader's perspective.
.Nl
.Nl
.Nl
-- PART C:  THE EXTEND AND DESTRUCT COMMANDS --
.Nl
.Nl
The Extend command is useful for adding structure to existing text: it allows a Guide 
.Gu
structure (replacement, enquiry or button-name) to be extended to include text that 
.Gu
lies beyond it.
.Nl
.Nl
EXPERIMENT 16:  As preparation for the next Experiment: (1) place the marker-bar immediately 
.Gu
before the word `This' at the start of the sentence below; (2) select the +Local command; 
.Gu
(3) type `MORE' as the name of the new button, and (4) select the new button and type 
.Gu
`I have done it.  ' as its replacement.
.Nl
.Nl
This text will, in a subsequent Experiment, be made the replacement of a MORE button,
.Gu
 and this is its END.
.Nl
.Nl
To use the Extend command you place the marker-bar anywhere in the structure you want 
.Gu
to extend, select the Extend command and then place the marker-bar at the position 
.Gu
where you want to extend to.  This position must be beyond the end of the structure,
.Gu
 but otherwise there are no restrictions other than the obvious one that structures 
.Gu
should be properly nested.  If you want to extend beyond the current frame-of-view 
.Gu
you can use the thumb-bar to advance the frame-of-view before defining where you want 
.Gu
to extend to.
.Nl
.Nl
EXPERIMENT 17:  Place the marker-bar anywhere within the replacement of your MORE 
.Gu
button (as it happens the marker-bar is currently at the end of this replacement, 
.Gu
since that is where you left it at the end of Experiment 16), and then select the 
.Gu
Extend command.  Place the marker-bar just beyond END above as the end of the extension,
.Gu
 and select Proceed.
.Nl
.Nl
EXPERIMENT 18:  Test your newly extended button by undoing it and selecting it.
.Nl
.Nl
If you want to remove any structure, you place the marker-bar within that structure 
.Gu
and select the Destruct command.  The Destruct command destroys structuring but does 
.Gu
NOT destroy any text (unless you Destruct a usage-button -- in this case you lose 
.Gu
the replacement of the usage-button, which is usually some temporary copy of another 
.Gu
definition).  Thus if you Destruct, for example, a local-button both the button-name 
.Gu
and its replacement become part of the ordinary text.  You can apply Destruct to a 
.Gu
button either with the marker-bar within the button-name (a later Experiment, using 
.Gu
the Change-button command, will show how to do this) or with the marker-bar within 
.Gu
its replacement.
.Nl
.Nl
EXPERIMENT 19:  Select the following local-button: 
.Bu l 1 n
a-target-button
.bU
.Re
THE REPLACEMENT OF THE TARGET-BUTTON
.rE
.Gu .
  Place the marker-bar anywhere in its replacement and select the Destruct command; 
.Gu
the button will cease to exist.
.Nl
.Nl
If you want to change the structuring of a source, this can usually be done by a combination 
.Gu
of Destructing, Extending, and creating new structures.
.Nl
.Nl
EXPERIMENT 20:  This ends the lesson.  Use the Quit menu command (and its Proceed 
.Gu
option) to finish.
.Nl
