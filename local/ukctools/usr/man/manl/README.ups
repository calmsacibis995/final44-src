The ups debugger is under active development an does not have any current user
documentation. These notes are intended as a very brief guide to the
current state of the program.

				John Bovey  (17/9/87).


RUNNING XUPS

	xups  [ executable [ corefile [ source-directory ]]]

The executable defaults to 'a.out', the corefile to 'core' and the
source directory to '.'. A corefile which can't be opened will be
silently ignored so you can specify a source directory without
a corefile using something like:

	xups a.out x ../src

Needless to say, the executable (or target) should be compiled using
the -g flag.

If corefile is a number, it is taken to be the process id of the target.
This allows you to attach ups to an already running process.


THE XUPS DISPLAY

From the top of the window:

 1.	A large menu button used to quit the debugger.

 2.	A menu which depends on the current selection in the main display
	area (see below).

 3.	A space used for debugger error messages etc.

 4.	The main display area used to display the current state of the
	target program. Some fields are selectable to produce a menu
	in 2. above and other fields are editable. The use of mouse
	buttons and menus in this area is very similar to that in fs
	but, since the menu depends on the selection, multiple selections
	must all be of the same type. There is a scroll area on the left.

 5a.	The name and line number of the current source file (displayed
	in 6. below).

 5b.	A menu of options used to control execution of the target process.
	These are mostly self explanatory. 'next' and 'step' both execute
	to the next line but 'next' passes over function calls (as with
	dbx).

 6.	The current source file with the current line highlighted.


INSERTING BREAKPOINTS

Select 'Breakpoints' in the main display area (4), select 'add new breakpoint'
from the menu and then edit the function name and line number. Selection
of a field for editing is done using the middle button. A breakpoint can
be moved at any time by editing is function name or line number.

Selecting an individual breakpoint produces a menu which can be used to
modify the breakpoint or to show its position in the source file ( the
'source' button).

Alternatively, press the right hand button in the source window over the
line you want a breakpoint set at.  A popup menu lets you either set
a breakpoint at that line, or to run the target until it gets to that line.


TARGET COMMAND-LINE ARGUMENTS

Edited into the second line of the main display (4) after the target program
name. Simple redirection ('<', '>' and '>>') are supported but not wildcards
or '~'.


EXAMINING VARIABLES

Select and expand the active function (or source file for non local variables).
You can then select the variable itself to get a menu of options for changing
the way it is displayed. In this menu, use '*' to indirect through a pointer
and 'expand' to expand a structure. For a structure pointer select '*'
first then 'expand'. Individual elements of arrays (or indirected pointers)
can be viewed by editing the array index in the declaration. When editing
an array index you can use '>' and '<' to increment or decrement its value.

You can also point with the left mouse button at a variable in the source
window.  The variable will be shown and selected in the display area.


GENERAL NOTES

Displayed variables have their values updated whenever the target stops
so you can organize the display to show variables of interest and then
use 'next', 'step' or 'continue' (with breakpoints) to see how they
change as the target procedes.

Xups waits for the target while it is running and so does not respond
to mouse input etc.  To make an executing target stop, type ^C in the
window that you started ups from.  Unfortunately in the current version
this also sends an interrupt to the target process.

At present you can't put breakpoints in signal catching routines.
Next and step both step over routines called as a result of a signal.
