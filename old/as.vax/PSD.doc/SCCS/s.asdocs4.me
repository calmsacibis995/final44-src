h08742
s 00005/00002/00322
d D 5.1 91/04/17 09:59:54 bostic 10 9
c new copyright; att/bsd/shared
e
s 00007/00002/00317
d D 1.9 83/07/01 12:42:02 rrh 9 8
c no limit on strings and on input line length; document 
c glitches with -V and verbose string table
e
s 00000/00000/00319
d D 1.8 83/02/11 16:18:30 rrh 8 7
c Blocks around all tables and hanging indents for directives
e
s 00005/00005/00314
d D 1.7 83/02/09 15:45:59 rrh 7 6
c fix formatting botches and spelling errors
e
s 00001/00001/00318
d D 1.6 83/02/09 15:09:27 rrh 6 5
c String length is now 2048, per requirements of dbx
e
s 00000/00000/00319
d D 1.5 83/02/09 15:04:24 rrh 5 4
c Document the : field initialization operator
e
s 00000/00003/00319
d D 1.4 83/02/09 14:29:59 rrh 4 3
c Remove text documenting the purging of: .stab, ":" operator.
c Remove text documenting the addition of the .global operator.
c Document that the .stab and ":" operator may disappear in the near future
e
s 00000/00243/00322
d D 1.3 83/02/09 14:13:51 rrh 3 2
c move all descriptions of the binary symbolic intermediate form 
c from asdocs4.me to asdocs5.me
e
s 00004/00000/00561
d D 1.2 83/02/09 09:16:34 rrh 2 1
c This file has been checked out for so long I don't know what I 
c did to it.  It was checked out for over 6 months
e
s 00561/00000/00000
d D 1.1 82/08/22 14:16:29 rrh 1 0
c date and time created 82/08/22 14:16:29 by rrh
e
u
U
t
T
I 10
.\" Copyright (c) 1982 The Regents of the University of California.
.\" All rights reserved.
E 10
I 2
.\"
D 10
.\"	Copyright (c) 1982 Regents of the University of California
.\"	%Z%%M% %I% %G%
E 10
I 10
.\" %sccs.include.redist.roff%
.\"
.\"	%W% (Berkeley) %G%
E 10
.\"
E 2
I 1
.EQ
delim $$
.EN
.SH 1 "Machine instructions"
.pp
The syntax of machine instruction statements accepted by
.i as
is generally similar to the syntax of \*(DM.
There are differences,
however.
.SH 2 "Character set"
.pp
.i As
uses the character
.q \*(DL
instead of
.q # 
for immediate constants,
and the character
.q *
instead of
.q @ 
for indirection.
Opcodes and register names
are spelled with lower-case rather than upper-case letters.
.SH 2 "Specifying Displacement Lengths"
.pp
Under certain circumstances,
D 7
the following constructs are (optionallly) recognized by
E 7
I 7
the following constructs are (optionally) recognized by
E 7
.i as
to indicate the number of bytes to allocate for
the displacement used when constructing
displacement and displacement deferred addressing modes:
.(b
.TS
center;
c c l
cb cb l.
primary	alternate	length
_
B\`	B^	byte (1 byte)
W\`	W^	word (2 bytes)
L\`	L^	long word (4 bytes)
.TE
.)b
.pp
One can also use lower case
.b b ,
.b w
or
.b l
instead of the upper
case letters.
There must be no space between the size specifier letter and the
.q "^"
or
.q "\`" .
The constructs
.b "S^"
and
.b "G^"
are not recognized
by
.i as ,
as they are by the \*(DM assembler.
It is preferred to use the 
.q "\`" displacement specifier,
so that the
.q "^"
is not
misinterpreted as the
.b xor
operator.
.pp
Literal values
(including floating-point literals used where the
hardware expects a floating-point operand)
are assembled as short
literals if possible,
hence not needing the
.b "S^"
\*(DM directive.
.pp
If the displacement length modifier is present,
then the displacement is 
.b always
assembled with that displacement,
even if it will fit into a smaller field,
or if significance is lost.
If the length modifier is not present,
D 7
and if the value of the displacment is known exactly in
E 7
I 7
and if the value of the displacement is known exactly in
E 7
.i as 's
first pass,
then
.i as
determines the length automatically,
assembling it in the shortest possible way,
Otherwise,
.i  as
will use the value specified by the
.b \-d
argument,
which defaults to 4 bytes.
.SH 2 "case\fIx\fP Instructions"
.pp
.i As
considers the instructions
.b caseb ,
.b casel ,
.b casew
to have three operands.
The displacements must be explicitly computed by 
.i as ,
using one or more
.b .word
statements.
.SH 2 "Extended branch instructions"
.pp
These opcodes (formed in general
by substituting a
.q j
for the initial
.q b
of the standard opcodes)
take as branch destinations
the name of a label in the current subsegment.
It is an error if the destination is known to be in a different subsegment,
and it is a warning if the destination is not defined within
the object module being assembled.
.pp
If the branch destination is close enough,
then the corresponding
short branch
.q b
instruction is assembled.
Otherwise the assembler choses a sequence
of one or more instructions which together have the same effect as if the
.q b
instruction had a larger span.
In general,
.i as
chooses the inverse branch followed by a
.b brw ,
but a
.b brw
is sometimes pooled among several
.q j
instructions with the same destination.
.pp
.i As
is unable to perform the same long/short branch generation
for other instructions with a fixed byte displacement,
such as the
.b sob ,
.b aob 
families,
or for the
.b acbx
family of instructions which has a fixed word displacement.
This would be desirable,
but is prohibitive because of the complexity of these instructions.
.pp
If the
.b \-J
assembler option is given,
a
.b jmp
instruction is used instead of a
.b brw
instruction
for
.b ALL
.q j
instructions with distant destinations.
This makes assembly of large (>32K bytes)
programs (inefficiently)
possible.
.i As
does not try to use clever combinations of
.b brb ,
.b brw
and
.b jmp
instructions.
The
.b jmp
instructions use PC relative addressing,
with the length of the offset given by the
.b \-d
assembler
option.
.pp
These are the extended branch instructions
.i as
recognizes:
.(b
.TS
center;
lb lb lb.
jeql	jeqlu	jneq	jnequ
jgeq	jgequ	jgtr	jgtru
jleq	jlequ	jlss	jlssu
jbcc	jbsc	jbcs	jbss

jlbc	jlbs
jcc	jcs	
jvc	jvs
jbc	jbs
jbr
.TE
.)b
.pp
Note that
.b jbr
turns into
.b brb
if its target is close enough;
otherwise a
.b brw
is used.
.SH 1 "Diagnostics"
.pp
Diagnostics are intended to be self explanatory and appear on
the standard output.
Diagnostics either report an
.i error
or a
.i warning.
Error diagnostics complain about lexical, syntactic and some
semantic errors, and abort the assembly.
.pp
The majority of the warnings complain about the use of \*(VX
features not supported by all implementations of the architecture.
.i As
will warn if new opcodes are used,
if
.q G
or
.q H
floating point numbers are used
D 7
and will complain about mixed floating conversions,
E 7
I 7
and will complain about mixed floating conversions.
E 7
.SH 1 "Limits"
.(b
.TS
center;
l l.
limit	what
_
Arbitrary\**	Files to assemble
BUFSIZ	Significant characters per name
D 9
BUFSIZ	Characters per input line
D 6
127	Characters per string
E 6
I 6
2048	Characters per string
E 9
I 9
Arbitrary	Characters per input line
Arbitrary	Characters per string
E 9
E 6
Arbitrary	Symbols
4	Text segments
4	Data segments
.TE
.)b
.(f
\**Although the number of characters available to the \fIargv\fP line
is restricted by \*(UX to 10240.
.)f
.SH 1 "Annoyances and Future Work"
.pp
Most of the annoyances deal with restrictions on the extended
branch instructions.
.pp
.i As
only uses a two level algorithm for resolving extended branch
instructions into short or long displacements.
What is really needed is a general mechanism
to turn a short conditional jump into a 
reverse conditional jump over one of
.b two
possible unconditional branches,
either a
.b brw
or a 
.b jmp
instruction.
Currently, the 
.b \-J
forces the
.b jmp
instruction to
.i always
be used,
instead of the
shorter
.b brw
instruction when needed.
.pp
The assembler should also recognize extended branch instructions for
.b sob ,
.b aob ,
and
.b acbx
instructions.
.b Sob
instructions will be easy,
.b aob
will be harder because the synthesized instruction
uses the index operand twice,
so one must be careful of side effects,
and the
.b acbx
family will be much harder (in the general case)
D 7
because the comparision depends on the sign of the addend operand,
E 7
I 7
because the comparison depends on the sign of the addend operand,
E 7
and two operands are used more than once.
Augmenting
.i as
with these extended loop instructions
D 7
will allow the peephole optmizer to produce much better
E 7
I 7
will allow the peephole optimizer to produce much better
E 7
loop optimizations,
since it currently assumes the worst
case about the size of the loop body.
I 9
.pp
The string temporary file is not put in memory when the -V flag is set.
The string table in the generated a.out contains some strings
and names that are never referenced from the symbol table;
the loader removes these unreferenced strings, however.
E 9
D 4
.pp
There has been no experience with foreign programs using
the binary symbolic intermediate form.
E 4
D 3
.bp
.SH 1 "Appendix 1: Binary Symbolic Intermediate Format"
.pp
The binary symbolic (\c
.i bs
for short) intermediate
form for assembly language
closely follows the syntax of 
.q human
symbolic assembly language.
However,
some of the expressive flexibility allowed in the
human symbolic assembly language is not allowed in the 
.i bs
form,
to simplify the 
.i bs
form as much as possible.
In addition,
concessions to the internals
of the assembler are made in the
.i bs
form.
This implementation decision 
simplifies the assembler's internal buffering and
necessitates only one internal form.
.pp
.i Bs
is structured as a prefix linearized forest of description trees.
Each node in the description tree
is represented by a byte code.
The nodes may have up to six children.
Some of the nodes have semantic attributes;
some semantic attributes are of concern only to the assembler,
but must be in the
.i bs
form as place holders.
The semantic attributes immediately follow the byte code.
.SH 2 "Binary Symbolic Node Definitions"
.pp
Table 1
defines the symbolic names for the description nodes,
the type of the node,
the number of children to the node,
the restrictions on the kind of children,
and the mapping of the description node,
including its children,
to the human assembly format.
Table 2 defines the semantic attributes required for
all attributed nodes.
.pp
The restrictions on the children are encoded in the mapping string.
In addition,
the prefix left to right order of a node's children is identical
to the left to right enumeration of the children in the mapping string.
The restrictions are encoded in the mapping string as
.i printf
like escapes.
.(b
.TS
center;
l l.
escape	child requirement
_
%a	address mode node, ADDR
%b	Bignum (large scalar or floating)
%e	expression mode node, EXPR
%c	comma node for operands, CMTR
%n	name, BS\*(USNAME
%r	register, BS\*(USREG
%r	register expression, BS\*(USREGOP
%s	string, BS\*(USSTRING
%%	% sign

%I	print an integer constant
%N	print a name
%S	print a string
%R	print a register
%B	print a big number
%O	print an instruction
.TE
.)b
.pp
These are the node types used in Table 1:
.(b
.TS
center;
c l.
node type	description
_
ROOT	the node can only appear at the root of a tree
CMTR	the node is the only argument to an instruction
ADDR	an addressing mode
EXPR	an expression
VADDR	an illegal addressing mode
.TE
.)b
.bp
.ce 1
Table 1: Binary Symbolic Node Definitions
.ce 0
.sp 1
.TS
center;
l       l       n      l        l
l       l       n      lb       l.
node	type	arity	key	arguments
=
Root
_
 BS\*(USNL	ROOT	0	\en
 BS\*(USPARSEEOF	ROOT	0	<EOF>	
 BS\*(USLABEL	ROOT	1	%n:	
=
Directives
_
 BS\*(USABORT	ROOT	0	.ABORT;
 BS\*(USFILE	ROOT	1	.file	%s;
 BS\*(USLINENO	ROOT	1	.line	%e;
_
 BS\*(USDATA	ROOT	1	.data	%e;
 BS\*(USTEXT	ROOT	1	.text	%e;
_
 BS\*(USORG	ROOT	2	.org	%e,%e;
 BS\*(USALIGN	ROOT	2	.align	%e,%e;
 BS\*(USSPACE	ROOT	2	.space	%e,%e;
 BS\*(USFILL	ROOT	3	.fill	%e,%e,%e;
_
 BS\*(USBYTE	ROOT	1	.byte	%e;
 BS\*(USWORD	ROOT	1	.word	%e;
 BS\*(USLONG	ROOT	1	.long	%e;
 BS\*(USQUAD	ROOT	1	.quad	%b;
 BS\*(USOCTA	ROOT	1	.octa	%b;
 BS\*(USFFLOAT	ROOT	1	.ffloat	%b;
 BS\*(USDFLOAT	ROOT	1	.dfloat	%b;
 BS\*(USGFLOAT	ROOT	1	.gfloat	%b;
 BS\*(USHFLOAT	ROOT	1	.hfloat	%b;
 BS\*(USASCII	ROOT	1	.ascii	%s;
_
 BS\*(USCOMM	ROOT	2	.com	%n,%e;
 BS\*(USLCOMM	ROOT	2	.lcomm	%n,%e;
 BS\*(USGLOBAL	ROOT	1	.global	%n;
 BS\*(USSET	ROOT	2	.set	%n,%e;
 BS\*(USLSYM	ROOT	2	.lsym	%n,%e;
_
 BS\*(USSTABN	ROOT	4	.stabn	%e,%e,%e,%e;
 BS\*(USSTABS	ROOT	5	.stabs	%s,%e,%e,%e,%e;
 BS\*(USSTABD	ROOT	3	.stabd	%e,%e,%e;
=
Leaves
_
 BS\*(USICON	EXPR	0	\&	<integer, in decimal>
 BS\*(USNAME	EXPR	0	\&	<name>
 BS\*(USSTRING	EXPR	0	\&	<quoted string>
 BS\*(USREG	EXPR	0	\&	r<integer>
_
 BS\*(USBNQ	EXPR	0		<quad scalar, in hex>
 BS\*(USBNO	EXPR	0	\&	<octal scalar, in hex>
 BS\*(USBNF	EXPR	0	\&	<F float, in hex>
 BS\*(USBND	EXPR	0	\&	<D float, in hex>
 BS\*(USBNG	EXPR	0	\&	<G float, in hex>
 BS\*(USBNH	EXPR	0	\&	<H float, in hex>
.bp
=
Operators
_
 BS\*(USREGOP	EXPR	1	\&	%%%e
_
 BS\*(USPLUS	EXPR	2	\&	(%e + %e)
 BS\*(USMINUS	EXPR	2	\&	(%e - %e)
 BS\*(USMUL	EXPR	2	\&	(%e * %e)
 BS\*(USDIV	EXPR	2	\&	(%e / %e)
 BS\*(USMOD	EXPR	2	\&	(%e %% %e)
_
 BS\*(USLSH	EXPR	2	\&	(%e < %e)
 BS\*(USRSH	EXPR	2	\&	(%e > %e)
_
 BS\*(USXOR	EXPR	2	\&	(%e ^ %e)
 BS\*(USIOR	EXPR	2	\&	(%e | %e)
 BS\*(USAND	EXPR	2	\&	(%e & %e)
 BS\*(USORNOT	EXPR	2	\&	(%e ! %e)
=
Instructions
_
 BS\*(USINST	ROOT	1	%O	%c;
 BS\*(USJXXX	ROOT	1	%O	%c;
_
 BS\*(USCM0	CMTR	0	\&	
 BS\*(USCM1	CMTR	1	\&	%a
 BS\*(USCM2	CMTR	2	\&	%a,%a
 BS\*(USCM3	CMTR	3	\&	%a,%a,%a
 BS\*(USCM4	CMTR	4	\&	%a,%a,%a,%a
 BS\*(USCM5	CMTR	5	\&	%a,%a,%a,%a,%a
 BS\*(USCM6	CMTR	6	\&	%a,%a,%a,%a,%a,%a
.bp
=
Address modes
_
 AM\*(USIMM	ADDR	1	\&	\*(DL%e
 AMD(AM\*(USIMM)	VADDR	1	\&	snark
 AMI(AM\*(USIMM)	VADDR	1	\&	snark
 AMDD(AM\*(USIMM)	VADDR	1	\&	snark
_
 AM\*(USREG	ADDR	1	\&	%r
 AMD(AM\*(USREG)	ADDR	1	\&	(%r)
 AMI(AM\*(USREG)	VADDR	1	\&	snark
 AMDI(AM\*(USREG)	ADDR	2	\&	(%r)[%r]
_
 AM\*(USINCR	ADDR	1	\&	(%r)+
 AMD(AM\*(USINCR)	ADDR	1	\&	*(%r)+
 AMI(AM\*(USINCR)	ADDR	2	\&	(%r)+[%r]
 AMDI(AM\*(USINCR)	ADDR	2	\&	*(%r)+[%r]
_
 AM\*(USEXPR	ADDR	1	\&	%e
 AMD(AM\*(USEXPR)	ADDR	1	\&	*%e
 AMI(AM\*(USEXPR)	ADDR	2	\&	%e[%r]
 AMDI(AM\*(USEXPR)	ADDR	2	\&	*%e[%r]
_
 AM\*(USDECR	ADDR	1	\&	-(%r)
 AMD(AM\*(USDECR)	VADDR	1	\&	snark
 AMI(AM\*(USDECR)	ADDR	2	\&	-(%r)[%r]
 AMDI(AM\*(USDECR)	VADDR	2	\&	snark
_
 AM\*(USDISPA	ADDR	2	\&	%e(%r)
 AMD(AM\*(USDISPA)	ADDR	2	\&	*%e(%r)
 AMI(AM\*(USDISPA)	ADDR	3	\&	%e(%r)[%r]
 AMDI(AM\*(USDISPA)	ADDR	3	\&	*%e(%r)[%r]
_
 AM\*(USDISP1	ADDR	2	\&	b\`%e(%r)
 AMD(AM\*(USDISP1)	ADDR	2	\&	*b\`%e(%r)
 AMI(AM\*(USDISP1)	ADDR	3	\&	b\`%e(%r)[%r]
 AMDI(AM\*(USDISP1)	ADDR	3	\&	*b\`%e(%r)[%r]
_
 AM\*(USDISP2	ADDR	2	\&	w\`%e(%r)
 AMD(AM\*(USDISP2)	ADDR	2	\&	*w\`%e(%r)
 AMI(AM\*(USDISP2)	ADDR	3	\&	w\`%e(%r)[%r]
 AMDI(AM\*(USDISP2)	ADDR	3	\&	*w\`%e(%r)[%r]
_
 AM\*(USDISP4	ADDR	2	\&	l\`%e(%r)
 AMD(AM\*(USDISP4)	ADDR	2	\&	*l\`%e(%r)
 AMI(AM\*(USDISP4)	ADDR	3	\&	l\`%e(%r)[%r]
 AMDI(AM\*(USDISP4)	ADDR	3	\&	*l\`%e(%r)[%r]
.TE
E 3
E 1
