h55841
s 00039/00042/00240
d D 6.6 91/08/07 22:14:33 cael 8 7
c mdoc version three
e
s 00005/00004/00277
d D 6.5 91/04/17 16:54:54 bostic 7 6
c new copyright; att/bsd/shared
e
s 00012/00026/00269
d D 6.4 90/07/24 22:41:21 cael 6 5
c .Xr botch fix
e
s 00003/00004/00292
d D 6.3 90/06/26 00:58:39 cael 5 4
c converted man page
e
s 00195/00139/00101
d D 6.2 90/06/11 05:53:14 cael 4 3
c converted man page
e
s 00001/00001/00239
d D 6.1 85/04/29 17:20:29 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00003/00003/00237
d D 5.1 85/04/29 17:20:11 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00240/00000/00000
d D 4.1 85/04/29 17:19:56 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 4
.\"	%W% (Berkeley) %G%
E 4
I 4
D 5
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 4
.\"
D 2
.TH AWK 1 
E 2
I 2
D 3
.TH AWK 1 "18 January 1983"
E 3
I 3
D 4
.TH AWK 1 "%Q%"
E 3
E 2
.AT 3
.SH NAME
awk \- pattern scanning and processing language
.SH SYNOPSIS
.B awk
[
.BI \-F c
]
[ prog ] [ file ] ...
.SH DESCRIPTION
.I Awk
E 4
I 4
.\" %sccs.include.redist.man%
E 5
I 5
D 7
.\" Copyright (c) 1990 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 7
I 7
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 7
E 5
.\"
D 7
.\"     %W% (Berkeley) %G%
E 7
I 7
.\" %sccs.include.proprietary.roff%
.\"
.\"	%W% (Berkeley) %G%
E 7
.\"
.Dd %Q%
.Dt AWK 1
.Os ATT 7
.Sh NAME
.Nm awk
.Nd pattern scanning and processing language
.Sh SYNOPSIS
.Nm awk
D 8
.Oo
.Op Fl \&F Ar \&c
.Oo
E 8
I 8
.Op Fl F Ar c
E 8
D 6
.\".Op Op Fl \&f Ar file Op Ar prog
.Cx \&[
.Op Fl f Ar file
E 6
I 6
.Op Fl f Ar prog_file
E 6
.Op Ar prog
D 6
.Cx \&]
.Cx
E 6
.Ar
.Sh DESCRIPTION
.Nm Awk
E 4
scans each input
D 4
.I file
E 4
I 4
.Ar file
E 4
for lines that match any of a set of patterns specified in
D 4
.IR prog .
E 4
I 4
.Ar prog .
E 4
With each pattern in
D 4
.I prog
E 4
I 4
.Ar prog
E 4
there can be an associated action that will be performed
when a line of a
D 4
.I file
E 4
I 4
.Ar file
E 4
matches the pattern.
The set of patterns may appear literally as
D 4
.I prog,
E 4
I 4
.Ar prog
E 4
or in a file
specified as
D 4
.B \-f
.IR file .
.PP
E 4
I 4
.Fl f
.Ar file .
.Pp
D 6
.Tw Fl
E 6
I 6
D 8
.Tw Ds
E 6
.Tp Cx Fl F
.Ar c
.Cx
E 8
I 8
.Bl -tag -width flag
.It Fl F Ns Ar c 
E 8
Specify a field separator of
.Ar c .
D 8
.Tp Fl f
E 8
I 8
.It Fl f
E 8
Use 
D 6
.Ar file
E 6
I 6
.Ar prog_file
E 6
as an input
.Ar prog
(an awk script).
D 8
.Tp
E 8
I 8
.El
E 8
.Pp
E 4
Files are read in order;
if there are no files, the standard input is read.
D 4
The file name `\-'
E 4
I 4
The file name
D 6
.Fl
E 6
I 6
.Sq Fl
E 6
E 4
means the standard input.
Each line is matched against the
pattern portion of every pattern-action statement;
the associated action is performed for each matched pattern.
D 4
.PP
E 4
I 4
.Pp
E 4
An input line is made up of fields separated by white space.
D 4
(This default can be changed by using FS,
.IR "vide infra" ".)"
E 4
I 4
(This default can be changed by using 
.Li FS ,
.Em vide infra . )
E 4
The fields are denoted $1, $2, ... ;
$0 refers to the entire line.
D 4
.PP
.PP
E 4
I 4
.Pp
E 4
A pattern-action statement has the form
D 4
.PP
	pattern { action }
.PP
E 4
I 4
.Pp
.Dl pattern {action}
.Pp
E 4
A missing { action } means print the line;
a missing pattern always matches.
D 4
.PP
E 4
I 4
.Pp
E 4
An action is a sequence of statements.
A statement can be one of the following:
D 4
.PP
.nf
	if ( conditional ) statement [ else statement ]
	while ( conditional ) statement
	for ( expression ; conditional ; expression ) statement
	break
	continue
	{ [ statement ] ... }
	variable = expression
	print [ expression-list ] [ >expression ]
	printf format [ , expression-list ] [ >expression ]
	next	# skip remaining patterns on this input line 
	exit	# skip the rest of the input
.fi
.PP
E 4
I 4
D 8
.Pp
.Ds I
E 8
I 8
.Bd -unfilled -offset indent
E 8
if ( conditional ) statement [ else statement ]
while ( conditional ) statement
for ( expression ; conditional ; expression ) statement
break
continue
{ [ statement ] ... }
variable = expression
print [ expression-list ] [ >expression ]
printf format [, expression-list ] [ >expression ]
next	# skip remaining patterns on this input line
exit	# skip the rest of the input
D 8
.De
E 8
I 8
.Ed
E 8
.Pp
E 4
Statements are terminated by
semicolons, newlines or right braces.
An empty expression-list stands for the whole line.
Expressions take on string or numeric values as appropriate,
and are built using the operators
+, \-, *, /, %,  and concatenation (indicated by a blank).
The C operators ++, \-\-, +=, \-=, *=, /=, and %=
are also available in expressions.
Variables may be scalars, array elements
(denoted
D 4
x[i])
E 4
I 4
D 8
.Cx x
.Op i
.Cx )
.Cx
E 8
I 8
.x Ns Ns Op i ) 
E 8
E 4
or fields.
Variables are initialized to the null string.
Array subscripts may be any string,
not necessarily numeric;
this allows for a form of associative memory.
String constants are quoted "...".
D 4
.PP
The 
.I print
E 4
I 4
.Pp
The
.Ic print
E 4
statement prints its arguments on the standard output
D 4
(or on a file if 
.I >file
E 4
I 4
(or on a file if
.Ar \&>file
E 4
is present), separated by the current output field separator,
and terminated by the output record separator.
The
D 4
.I printf
E 4
I 4
.Ic printf
E 4
statement formats its expression list according to the format
(see
D 2
.IR printf (3)).
E 2
I 2
D 4
.IR printf (3S)).
E 2
.PP
E 4
I 4
.Xr printf 3 ) .
.Pp
E 4
The built-in function
D 4
.I length
E 4
I 4
.Ic length
E 4
returns the length of its argument
taken as a string,
or of the whole line if no argument.
There are also built-in functions
D 4
.I exp,
.I log,
.I sqrt,
E 4
I 4
.Ic exp ,
.Ic log ,
.Ic sqrt
E 4
and
D 4
.IR int .
E 4
I 4
.Ic int .
E 4
The last truncates its argument to an integer.
D 4
.IR substr(s,\ m,\ n)
returns the 
.IR n -character
E 4
I 4
The function
D 6
.Cx Ic substr
.Cx (
.Ar s ,
.Ar \& m ,
.Ar \& n )
.Cx
E 6
I 6
.Fn substr s m n
E 6
returns the
D 8
.Cx Ar n
.Cx \-
.Cx character
.Cx
E 8
I 8
.Ar n Ns \- character 
E 8
E 4
substring of
D 4
.I s
E 4
I 4
.Ar s
E 4
that begins at position
D 4
.IR m .
E 4
I 4
.Ar m .
E 4
D 6
The function
D 4
.IR sprintf(fmt,\ expr,\ expr,\ ...)
E 4
I 4
.Cx Ic sprintf
.Cx (
.Ar fmt ,
.Ar \& expr ,
.Ar \& expr ,
.Ar \& ... )
.Cx
E 6
I 6
The
D 8
.Fn sprintf fmt expr expr \&...
E 8
I 8
.Fn sprintf fmt expr expr ...
E 8
function
E 6
E 4
formats the expressions
according to the
D 2
.IR printf (3)
E 2
I 2
D 4
.IR printf (3S)
E 4
I 4
.Xr printf 3
E 4
E 2
format given by
D 4
.I fmt
E 4
I 4
.Ar fmt
E 4
and returns the resulting string.
D 4
.PP
E 4
I 4
.Pp
E 4
Patterns are arbitrary Boolean combinations
D 4
(!, \(or\(or, &&, and parentheses) of 
E 4
I 4
(!, \(or\(or, &&, and parentheses) of
E 4
regular expressions and
relational expressions.
Regular expressions must be surrounded
by slashes and are as in
D 4
.IR egrep .
E 4
I 4
.Xr egrep 1 .
E 4
Isolated regular expressions
in a pattern apply to the entire line.
Regular expressions may also occur in
relational expressions.
D 4
.PP
E 4
I 4
.Pp
E 4
A pattern may consist of two patterns separated by a comma;
in this case, the action is performed for all lines
between an occurrence of the first pattern
and the next occurrence of the second.
D 4
.PP
.nf
E 4
I 4
.Pp
E 4
A relational expression is one of the following:
D 4
.PP
.nf
	expression matchop regular-expression
	expression relop expression
.PP
.fi
E 4
I 4
D 6
.Ds
E 6
I 6
D 8
.Pp
.Ds I
E 8
I 8
.Bd -unfilled -offset indent
E 8
E 6
expression matchop regular-expression
expression relop expression
D 8
.De
E 8
I 8
.Ed
E 8
.Pp
E 4
where a relop is any of the six relational operators in C,
and a matchop is either ~ (for contains)
or !~ (for does not contain).
A conditional is an arithmetic expression,
a relational expression,
or a Boolean combination
of these.
D 4
.PP
E 4
I 4
.Pp
E 4
The special patterns
D 4
BEGIN
E 4
I 4
.Li BEGIN
E 4
and
D 4
END
E 4
I 4
.Li END
E 4
may be used to capture control before the first input line is read
and after the last.
D 4
BEGIN must be the first pattern, END the last.
.PP
E 4
I 4
.Li BEGIN
must be the first pattern,
.Li END
the last.
.Pp
E 4
A single character
D 4
.I c
E 4
I 4
.Ar c
E 4
may be used to separate the fields by starting
the program with
D 4
.PP
	BEGIN { FS = "c" }
.PP
E 4
I 4
.Pp
.Dl BEGIN { FS = "c" }
.Pp
E 4
or by using the
D 4
.BI \-F c
E 4
I 4
D 8
.Cx Fl F
.Ar c
.Cx
E 8
I 8
.Fl F Ns Ns Ar c 
E 8
E 4
option.
D 4
.PP
E 4
I 4
.Pp
E 4
Other variable names with special meanings
D 4
include NF, the number of fields in the current record;
NR, the ordinal number of the current record;
FILENAME, the name of the current input file;
OFS, the output field separator (default blank);
ORS, the output record separator (default newline);
and
OFMT, the output format for numbers (default "%.6g").
.PP
.SH EXAMPLES
.PP
E 4
I 4
include
D 8
.Dp Li NF
E 8
I 8
.Pp
.Bl -tag -width "file name" -compact
.It Li NF
E 8
the number of fields in the current record;
D 8
.Dp Li NR
E 8
I 8
.It Li NR
E 8
the ordinal number of the current record;
D 8
.Dp Li FILENAME
E 8
I 8
.It Li FILENAME
E 8
the name of the current input file;
D 8
.Dp Li OFS
E 8
I 8
.It Li OFS
E 8
the output field separator (default blank);
D 8
.Dp Li ORS
E 8
I 8
.It Li ORS
E 8
the output record separator (default newline);
D 8
.Dp Li OFMT
E 8
I 8
.It Li OFMT
E 8
the output format for numbers (default "%.6g").
D 8
.Dp
E 8
I 8
.El
E 8
.Pp
.Sh EXAMPLES
.Pp
E 4
Print lines longer than 72 characters:
D 4
.PP
.nf
	length > 72
.fi
.PP
E 4
I 4
.Pp
.Dl length > 72
.Pp
E 4
Print first two fields in opposite order:
D 4
.PP
.nf
	{ print $2, $1 }
.fi
.PP
E 4
I 4
.Pp
.Dl { print $2, $1 }
.Pp
E 4
Add up first column, print sum and average:
D 4
.PP
.nf
		{ s += $1 }
	END	{ print "sum is", s, " average is", s/NR }
.fi
.PP
E 4
I 4
D 8
.Pp
.Ds I
E 8
I 8
.Bd -literal -offset indent
E 8
	{ s += $1 }
END	{ print "sum is", s, " average is", s/NR }
D 8
.De
E 8
I 8
.Ed
E 8
.Pp
E 4
Print fields in reverse order:
D 4
.PP
.nf
	{ for (i = NF; i > 0; \-\-i) print $i }
.fi
.PP
E 4
I 4
.Pp
.Dl { for (i = NF; i > 0; \-\-i) print $i }
.Pp
E 4
Print all lines between start/stop pairs:
D 4
.PP
.nf
	/start/, /stop/
.fi
.PP
E 4
I 4
.Pp
.Dl /start/, /stop/
.Pp
E 4
Print all lines whose first field is different from previous one:
D 4
.PP
.nf
	$1 != prev { print; prev = $1 }
.fi
.SH SEE ALSO
.PP
lex(1), sed(1)
.br
E 4
I 4
.Pp
.Dl $1 != prev { print; prev = $1 }
.Sh SEE ALSO
.Xr lex 1 ,
.Xr sed 1
.Pp
E 4
D 8
A. V. Aho, B. W. Kernighan, P. J. Weinberger,
D 4
.I
Awk \- a pattern scanning and processing language
.SH BUGS
E 4
I 4
.Em Awk \- a pattern scanning and processing language
E 8
I 8
.Rs
.%A A. V. Aho
.%A B. W. Kernighan
.%A P. J. Weinberger
.%T "Awk \- a pattern scanning and processing language"
.Re
E 8
.Sh HISTORY
D 8
.Nm Awk
appeared in Version 7 AT&T UNIX.  A much improved
E 8
I 8
The version of
.Nm awk
this man page describes
appeared in Version
.At v7 .
A much improved
E 8
and true to the book version of
.Nm awk
D 8
appeared in the AT&T Toolchest in the late 1980's.
E 8
I 8
appeared in the
.Tn AT&T
Toolchest in the late 1980's.
E 8
The version of
.Nm awk
this manual page describes
is a derivative of the original and not the Toolchest version.
.Sh BUGS
E 4
There are no explicit conversions between numbers and strings.
To force an expression to be treated as a number add 0 to it;
D 4
to force it to be treated as a string concatenate ""
E 4
I 4
D 6
to force it to be treated as a string concatenate
.Dq
E 4
to it.
E 6
I 6
to force it to be treated as a string concatenate "" (an empty
string) to it.
E 6
E 1
