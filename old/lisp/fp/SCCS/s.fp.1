h07653
s 00020/00023/00085
d D 6.6 91/07/29 15:58:44 cael 8 7
c mdoc version three
e
s 00002/00000/00106
d D 6.5 91/03/14 00:12:58 cael 7 5
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00001/00000/00106
d R 6.5 91/03/13 20:31:00 cael 6 5
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00000/00001/00106
d D 6.4 90/06/26 00:59:43 cael 5 4
c converted man page
e
s 00068/00069/00039
d D 6.3 90/06/24 19:03:56 cael 4 3
c converted man page
e
s 00014/00003/00094
d D 6.2 89/02/17 17:39:10 bostic 3 2
c add Berkeley specific copyright
e
s 00001/00001/00096
d D 6.1 85/04/29 21:17:54 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00097/00000/00000
d D 5.1 85/04/29 21:17:06 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 3
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 3
I 3
D 4
.\" Copyright (c) 1983 The Regents of the University of California.
E 4
I 4
.\" Copyright (c) 1983, 1990 The Regents of the University of California.
E 4
.\" All rights reserved.
.\"
D 4
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 4
I 4
D 8
.\" %sccs.include.redist.man%
E 8
I 8
.\" %sccs.include.redist.roff%
E 8
E 4
E 3
.\"
D 4
.\"	%W% (Berkeley) %G%
E 4
I 4
D 8
.\"     %W% (Berkeley) %G%
E 8
I 8
.\"	%W% (Berkeley) %G%
E 8
E 4
.\"
I 7
D 8
.Vx
.Vx
E 8
E 7
D 2
.TH FP 1 "28 April 1983"
E 2
I 2
D 4
.TH FP 1 "%Q%"
E 2
.UC 5
E 4
I 4
.Dd %Q%
.Dt FP 1
.Os BSD 4.2
E 4
D 5
.ds s 1
E 5
D 4
.SH NAME
fp \-  Functional Programming language compiler/interpreter
.SH SYNOPSIS
.B fp
.SH DESCRIPTION
.PP
.I Fp
E 4
I 4
.Sh NAME
.Nm fp
.Nd Functional Programming language compiler/interpreter
.Sh SYNOPSIS
.Nm fp
.Sh DESCRIPTION
.Nm Fp
E 4
is an
interpreter/compiler that implements the applicative language proposed
by John Backus.  It is written in
D 4
.SM
.BR "FRANZ LISP" .
.PP
E 4
I 4
D 8
.Em FRANZ LISP .
E 8
I 8
.Tn FRANZ LISP .
E 8
.Pp
E 4
In a  functional programming language
intent is expressed
in  a mathematical style devoid of assignment statements
and variables.
Functions compute by value only; there are no side-effects
since  the result of a computation depends solely on the inputs.
D 4
.PP
.I Fp
"programs" consist of
.I functional expressions \-
primitive and user-defined 
.I fp
E 4
I 4
.Pp
.Nm Fp
D 8
.Em programs
consist of
E 8
I 8
programs consist of
E 8
.Em functional expressions
\-
primitive and user-defined
.Nm fp
E 4
functions
D 4
combined by 
.I functional forms.
E 4
I 4
combined by
.Em functional forms .
E 4
These forms take functional arguments
and return functional results.
For example, the composition
D 4
operator 
.I '@'
E 4
I 4
operator
.Sq Ic @
E 4
takes two functional arguments and returns a function
which represents their composition.
D 4
.PP
There exists a single operation in 
.I fp
E 4
I 4
.Pp
There exists a single operation in
.Nm fp
E 4
\&\-
D 4
.I application.
E 4
I 4
.Em application .
E 4
This operation causes the system to evaluate the indicated function using
D 4
the single argument 
E 4
I 4
the single argument
E 4
as input
(all functions are monadic).
D 4
.SH GETTING STARTED
.PP
.I Fp
invokes the system.  
.I Fp
E 4
I 4
.Sh GETTING STARTED
.Pp
.Nm Fp
invokes the system.
.Nm Fp
E 4
compiles functions into
D 4
.IR lisp (1)
E 4
I 4
.Xr lisp  1
E 4
source code;
D 4
.IR lisp (1)
E 4
I 4
.Xr lisp  1
E 4
interprets this code
(the user may compile this code using the
D 4
liszt (\*s) compiler to gain a factor of 10 in performance).
.I Control D
E 4
I 4
.Xr liszt 1
compiler to gain a factor of 10 in performance).
.Ic Control D
E 4
exits back to the shell.
D 4
.I Break
E 4
I 4
.Ic Break
E 4
terminates any computation in progress  and resets any open file units.
D 4
.I )help
E 4
I 4
.Ic )help
E 4
provides a short summary of all user commands.
D 4
.SH FILES
.DT
/usr/ucb/lisp	the FRANZ LISP interpreter
E 4
I 4
.Sh FILES
D 8
.Dw liszt
.Di L
.Dp Pa lisp
the FRANZ LISP interpreter
.Dp Pa liszt
the liszt compiler
.\" .Dp Pa /usr/doc/fp
.\" the User's Guide
.Dp
E 8
I 8
.Bl -tag -width liszt -compact
.It Pa lisp
The
.Dv FRANZ LISP
interpreter.
.It Pa liszt
The liszt compiler.
.El
E 8
.Sh SEE ALSO
.Xr lisp 1 ,
.Xr liszt 1 ,
E 4
D 8
.br
D 4
/usr/ucb/liszt	the liszt compiler
.br
/usr/doc/fp	the User's Guide
.SH SEE ALSO
.PP
lisp(\*s), liszt(\*s).
.PP
.I The Berkeley FP user's manual,
E 4
I 4
.Em The Berkeley FP user's manual ,
E 4
available on-line.
E 8
I 8
.Rs
.%T "The Berkeley FP user's manual"
.Re
.Pp
E 8
D 4
The language is described  in  the August 1978 issue of  
.I CACM
E 4
I 4
The language is described  in  the August 1978 issue of
.Em CACM
E 4
(Turing award lecture by John Backus).
D 4
.SH BUGS
.PP
E 4
I 4
.Sh BUGS
E 4
If a non-terminating function is applied as the result of loading a file,
then control is returned to the user immediately, everything
after that position in the file is ignored.
D 4
.PP
FP incorrectly marks the location of a syntax error on
E 4
I 4
.Pp
.Nm Fp
incorrectly marks the location of a syntax error on
E 4
large, multi-line function definitions or applications.
D 4
.SH AUTHOR
E 4
I 4
.Sh HISTORY
D 8
.Nm Fp
appeared in 4.2 BSD.
.Sh AUTHOR
E 4
Scott B. Baden
E 8
I 8
The
.Nm fp
program appeared in
.Bx 4.2 .
E 8
E 1
