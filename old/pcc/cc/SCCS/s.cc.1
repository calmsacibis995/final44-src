h57750
s 00088/00101/00166
d D 6.7 91/08/09 18:07:10 cael 9 8
c mdoc version three
e
s 00015/00010/00252
d D 6.6 90/07/24 22:41:57 cael 8 7
c .Xr botch fix
e
s 00002/00003/00260
d D 6.5 90/06/26 00:58:49 cael 7 6
c converted man page
e
s 00166/00171/00097
d D 6.4 90/06/11 05:53:50 cael 6 5
c converted man page
e
s 00002/00006/00266
d D 6.3 89/05/10 22:19:06 bostic 5 4
c file reorg, pathnames.h paths.h
c rip out `standard backup' directory
e
s 00006/00002/00266
d D 6.2 85/06/07 14:45:10 lepreau 4 3
c doc restrictions on "register float" vars
e
s 00025/00001/00243
d D 6.1 85/04/29 14:17:19 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00039/00013/00205
d D 5.1 85/04/29 14:17:04 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00218/00000/00000
d D 4.1 85/04/29 14:16:54 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
.\" Copyright (c) 1980, 1990 The Regents of the University of California.
D 7
.\" All rights reserved.
E 6
.\"
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\" %sccs.include.redist.man%
E 7
I 7
D 9
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 9
I 9
.\" All rights reserved.
E 9
E 7
E 6
.\"
D 2
.TH CC 1 4/1/81
E 2
I 2
D 3
.TH CC 1 "9 February 1982"
E 3
I 3
D 6
.TH CC 1 "%Q%"
E 3
E 2
.UC 4
.SH NAME
cc \- C compiler
.SH SYNOPSIS
.B cc
[ option ] ... file ...
.SH DESCRIPTION
.I Cc
E 6
I 6
D 9
.\"     %W% (Berkeley) %G%
E 9
I 9
.\" %sccs.include.redist.roff%
E 9
.\"
I 9
.\"	%W% (Berkeley) %G%
.\"
E 9
.Dd %Q%
.Dt CC 1
.Os BSD 4
.Sh NAME
.Nm cc
.Nd C compiler
.Sh SYNOPSIS
.Nm cc
.Op  option
D 9
...
E 9
I 9
Ar ...
E 9
.Ar file ...
.Sh DESCRIPTION
.Nm Cc
E 6
is the UNIX C compiler.
D 2
.B N.B.:
.I cc
has been recently modified to accept arbitrary length identifiers
and to produce a new object file format; see
.IR old (8)
for information on dealing with old format programs.
.PP
E 2
D 6
.I Cc
E 6
I 6
.Nm Cc
E 6
accepts several types of arguments:
D 6
.PP
E 6
I 6
.Pp
E 6
Arguments whose names end with `.c' are taken to be
C source programs; they are compiled, and
each object program is left on the file
whose name is that of the source with `.o' substituted
for `.c'.
The `.o' file is normally deleted, however, if a single
C program is compiled and loaded all at one go.
D 6
.PP
E 6
I 6
.Pp
E 6
In the same way,
arguments whose names end with `.s' are taken to be assembly source programs
and are assembled, producing a `.o' file.
D 6
.PP
E 6
I 6
.Pp
E 6
The following options are interpreted by
D 6
.IR cc .
E 6
I 6
.Nm cc .
E 6
See
D 6
.IR ld (1)
E 6
I 6
.Xr ld 1
E 6
for load-time options.
D 6
.TP 8
.B \-c
E 6
I 6
D 8
.Tw Fl
E 8
I 8
D 9
.Tw Ds
E 8
.Tp Fl c
E 9
I 9
.Bl -tag -width Ds
.It Fl c
E 9
E 6
Suppress the loading phase of the compilation, and force
an object file to be produced even if only one program is compiled.
D 6
.TP
.B \-g
E 6
I 6
D 9
.Tp Fl g
E 9
I 9
.It Fl g
E 9
E 6
Have the compiler produce additional symbol table information
D 6
for 
I 2
.IR dbx (1).
E 6
I 6
for
.Xr dbx 1
E 6
Also pass the
D 6
.B \-lg
E 6
I 6
.Fl lg
E 6
flag to
D 6
.IR ld (1).
.TP
.B \-go
E 6
I 6
.Xr ld 1 .
D 9
.Tp Fl go
E 9
I 9
.It Fl go
E 9
E 6
Have the compiler produce additional symbol table information
for the obsolete debugger
E 2
D 6
.IR sdb (1).
E 6
I 6
.Xr sdb 1 .
E 6
Also pass the
D 6
.B \-lg
E 6
I 6
.Fl lg
E 6
flag to
D 6
.IR ld (1).
.TP
.B \-w
E 6
I 6
.Xr ld 1 .
D 9
.Tp Fl w
E 9
I 9
.It Fl w
E 9
E 6
Suppress warning diagnostics.
D 6
.TP
.B \-p
E 6
I 6
D 9
.Tp Fl p
E 9
I 9
.It Fl p
E 9
E 6
Arrange for the compiler to produce code
D 2
which counts the number of times each routine is called;
also, if loading takes place, replace the standard startup
E 2
I 2
which counts the number of times each routine is called.
If loading takes place, replace the standard startup
E 2
routine by one which automatically calls
D 6
.IR monitor (3)
E 6
I 6
.Xr monitor 3
E 6
at the start and arranges to write out a
D 6
.I mon.out
E 6
I 6
.Pa mon.out
E 6
file at normal termination of execution of the object program.
An execution profile can then be generated by
use of
D 6
.IR  prof (1).
.TP
I 2
.B \-pg
E 6
I 6
.Xr prof 1 .
D 9
.Tp Fl pg
E 9
I 9
.It Fl pg
E 9
E 6
Causes the compiler to produce counting code in the manner of
D 6
.B \-p,
E 6
I 6
.Fl p
E 6
but invokes a run-time recording mechanism that keeps more
D 6
extensive statistics and produces a 
.I gmon.out
E 6
I 6
extensive statistics and produces a
.Pa gmon.out
E 6
file at normal termination.
Also, a profiling library is searched, in lieu of the standard C library.
An execution profile can then be generated by  use of
D 6
.IR gprof (1).
.TP
E 2
.SM
.B \-O
E 6
I 6
.Xr gprof 1 .
D 9
.Tp Fl O
E 9
I 9
.It Fl O
E 9
E 6
Invoke an
object-code improver.
D 6
.TP
.SM
.B \-R
E 6
I 6
D 9
.Tp Fl R
E 9
I 9
.It Fl R
E 9
E 6
Passed on to
D 6
.I as,
E 6
I 6
.Xr as 1
E 6
making initialized variables shared and read-only.
D 6
.TP
.SM
.B \-S
E 6
I 6
D 9
.Tp Fl S
E 9
I 9
.It Fl S
E 9
E 6
Compile the named C programs, and leave the
assembler-language output on corresponding files suffixed `.s'.
D 6
.TP
.SM
I 3
.B \-M
E 6
I 6
D 9
.Tp Fl M
E 9
I 9
.It Fl M
E 9
E 6
Run only the macro preprocessor
on the named C programs,
requesting it to generate Makefile dependencies
and send the result to the standard output.
D 6
.TP
.SM
E 3
.B \-E
E 6
I 6
D 9
.Tp Fl E
E 9
I 9
.It Fl E
E 9
E 6
Run only the macro preprocessor
on the named C programs, and send the result to the
standard output.
D 6
.TP
.SM
.B \-C
E 6
I 6
D 9
.Tp Fl C
E 9
I 9
.It Fl C
E 9
E 6
prevent the macro preprocessor from eliding comments.
D 6
.TP
.BI \-o " output"
E 6
I 6
D 9
.Tp Cx Fl o
.Cx \& \&
.Ar output
.Cx
E 9
I 9
.It Fl o Ns Ar output 
E 9
E 6
Name the final output file
D 6
.IR output .
E 6
I 6
.Ar output .
E 6
If this option is used the file `a.out' will be left undisturbed.
D 6
.TP
.SM
.BI \-D name=def
.br
.ns
.TP
.SM
.BI \-D \*Sname
E 6
I 6
D 8
.Tp Cx Fl D
E 8
I 8
D 9
.Tp
.Dw Ds
.Di L
.Dp Cx Fl D
E 8
.Ar name=def
.Cx
D 8
.Tp Cx Fl D
E 8
I 8
.Dp Cx Fl D
E 8
.Ar name
.Cx
E 9
I 9
.El
.Bl -tag -width Ds -compact
.It Fl D Ns Ar name=def 
.It Fl D Ns Ar name 
E 9
E 6
Define the
D 6
.I name
E 6
I 6
.Ar name
E 6
to the preprocessor,
D 6
as if by
`#define'.
E 6
I 6
as if by `#define'.
E 6
If no definition is given, the name is defined as "1".
I 8
D 9
.Dp
.Tw Ds
E 8
D 6
.TP
.SM
.BI \-U \*Sname
E 6
I 6
.Tp Cx Fl U
.Ar name
.Cx
E 9
I 9
.El
.Bl -tag -width Ds
.It Fl U Ns Ar name 
E 9
E 6
Remove any initial definition of
D 6
.IR name .
.TP
.SM
.BI \-I \*Sdir
`#include' files
whose names do not begin with `/' are always
sought first in the directory 
E 6
I 6
.Ar name .
D 9
.Tp Cx Fl I
.Ar dir
.Cx
E 9
I 9
.It Fl I Ns Ar dir 
E 9
D 8
`#include files'
E 8
I 8
`#include' files
E 8
whose names do not begin with `/'
are always
sought first in the directory
E 6
of the
D 6
.I file
E 6
I 6
.Ar file
E 6
argument,
D 6
then in directories named in 
.B \-I
E 6
I 6
then in directories named in
.Fl I
E 6
options,
then in directories on a standard list.
D 6
.TP
.SM
I 3
.BI \-L \*Sdir
Library archives are sought first in
E 6
I 6
D 9
.Tp Cx Fl L
.Ar dir
.Cx
E 9
I 9
.It Fl L Ns Ar dir 
E 9
Library archives are sought first in
E 6
directories named in
D 6
.B \-L
E 6
I 6
.Fl L
E 6
options,
then in directories on a standard list.
D 6
.TP
.B \-f
E 6
I 6
D 9
.Tp Fl f
E 9
I 9
.It Fl f
E 9
E 6
Use an alternate compiler which does not convert expressions involving
only floats to double. This does not conform to the standard which states
that all intermediate results should be converted to double but does
provide a speed improvement for programs which don't require full double
D 4
precision.
E 4
I 4
precision.  This option also makes
D 6
.B "register float"
E 6
I 6
.Sy register float
E 6
variables work appropriately.
E 4
D 6
.TP
.SM
E 3
D 5
.BI \-B \*Sstring
Find substitute compiler passes in the files named
.I string
E 5
I 5
.BI \-B \*Spath
E 6
I 6
D 9
.Tp Cx Fl B
.Ar path
.Cx
E 9
I 9
.It Fl B Ns Ar path 
E 9
E 6
Find substitute compiler passes in the named path
E 5
with the suffixes cpp, ccom and c2.
D 5
If 
.I string 
is empty, use a standard backup version.
E 5
D 6
.TP
.BR \-t [ p012 ]
E 6
I 6
D 9
.Tp Cx Fl t
.Op p012
.Cx
E 9
I 9
.It Fl t Ns Op p012 
E 9
E 6
Find only the designated compiler passes in the
files whose names are constructed by a
D 6
.B \-B
E 6
I 6
.Fl B
E 6
option.
I 8
D 9
.Tp
E 9
I 9
.El
E 9
E 8
D 6
In the absence of a
.B \-B 
option, the
.I string
is taken to be `/usr/c/'.
.PP
E 6
I 6
.Pp
E 6
Other arguments
are taken
to be either loader option arguments, or C-compatible
object programs, typically produced by an earlier
D 6
.I cc
E 6
I 6
.Nm cc
E 6
run,
or perhaps libraries of C-compatible routines.
These programs, together with the results of any
compilations specified, are loaded (in the order
given) to produce an executable program with name
D 6
.B a.out.
.SH FILES
.ta \w'/usr/c/occom  'u
file.c	input file
.br
file.o	object file
.br
a.out	loaded output
.br
/tmp/ctm?	temporary
.br
/lib/cpp	preprocessor
.br
/lib/ccom	compiler
I 3
.br
/lib/sccom	compiler for single precision floats
E 3
.br
/usr/c/occom	backup compiler
.br
/usr/c/ocpp	backup preprocessor
.br
/lib/c2	optional optimizer
.br
/lib/crt0.o	runtime startoff
.br
/lib/mcrt0.o	startoff for profiling
.br
D 2
/lib/libc.a	standard library, see (3)
E 2
I 2
/usr/lib/gcrt0.o	startoff for gprof-profiling
E 2
.br
I 2
/lib/libc.a	standard library, see
.IR intro (3)
.br
/usr/lib/libc_p.a	profiling library, see
.IR intro (3)
.br
E 2
/usr/include	standard directory for `#include' files
I 2
.br
mon.out	file produced for analysis by
.IR prof (1)
.br
gmon.out	file produced for analysis by
.IR gprof (1)
E 2
.SH "SEE ALSO"
E 6
I 6
.Pa a.out .
.Sh FILES
D 9
.Dw /usr/libexec/sccom
D 8
.Ds L
E 8
I 8
.Di L
E 8
.Dp Pa file.c
input file
.Dp Pa file.o
object file
.Dp Pa a.out
loaded output
.Dp Pa ctm?
temporary
.Dp Pa /usr/bin/cpp
preprocessor
.Dp Pa /usr/libexec/ccom
compiler
.Dp Pa /usr/libexec/ccom
compiler for single precision floats
.Dp Pa /usr/libexec/c2
optional optimizer
.Dp Pa /usr/lib/crt0.o
runtime startoff
.Dp Pa /usr/lib/mcrt0.o
startoff for profiling
.Dp Pa /usr/lib/gcrt0.o
startoff for gprof-profiling
.Dp Pa /usr/lib/libc.a
standard library, see
D 8
.Ar intro 3
E 8
I 8
.Xr intro 3
E 8
.Dp Pa /usr/lib/libc_p.a
profiling library, see
D 8
.Ar intro 3
E 8
I 8
.Xr intro 3
E 8
.Dp Pa /usr/include
standard directory for `#include' files
.Dp Pa mon.out
file produced for analysis by
.Xr prof 1
.Dp Pa gmon.out
file produced for analysis by
.Xr gprof 1
.Dp
E 9
I 9
.Bl -tag -width /usr/libexec/sccom -compact
.It Pa file.c
Input file.
.It Pa file.o
Object file.
.It Pa a.out
Loaded output.
.It Pa ctm?
Temporary.
.It Pa /usr/bin/cpp
Preprocessor.
.It Pa /usr/libexec/ccom
Compiler.
.It Pa /usr/libexec/ccom
Compiler for single precision floats.
.It Pa /usr/libexec/c2
Optional optimizer.
.It Pa /usr/lib/crt0.o
Runtime startoff.
.It Pa /usr/lib/mcrt0.o
Startoff for profiling.
.It Pa /usr/lib/gcrt0.o
Startoff for gprof-profiling.
.It Pa /usr/lib/libc.a
Standard library, see.
.Xr intro 3 .
.It Pa /usr/lib/libc_p.a
Profiling library, see
.Xr intro 3 .
.It Pa /usr/include
Standard directory for `#include' files.
.It Pa mon.out
File produced for analysis by
.Xr prof 1 .
.It Pa gmon.out
File produced for analysis by
.Xr gprof 1 .
.El
E 9
.Sh SEE ALSO
E 6
D 9
B. W. Kernighan and D. M. Ritchie,
D 6
.I The C Programming Language,
Prentice-Hall,
E 6
I 6
.Em The Programming Language ,
D 8
Prentice-.Xr Hall,
E 8
I 8
Prentice-Hall,
E 8
E 6
1978
D 6
.br
E 6
I 6
.Pp
E 6
B. W. Kernighan,
D 6
.I
Programming in C\(ema tutorial
.br
E 6
I 6
D 8
.Em Programming in C\-em a tutorial
E 8
I 8
.Em Programming in C \- a tutorial
E 8
.Pp
E 6
D. M. Ritchie,
D 6
.I
C Reference Manual
.br
D 2
monitor(3), prof(1), adb(1), ld(1), sdb(1), old(8)
E 2
I 2
monitor(3), prof(1), gprof(1), adb(1), ld(1), dbx(1), as(1)
E 2
.SH DIAGNOSTICS
E 6
I 6
.Em C Reference Manual
.Pp
E 9
.Xr monitor 3 ,
.Xr prof 1 ,
.Xr gprof 1 ,
.Xr adb 1 ,
.Xr ld 1 ,
.Xr dbx 1 ,
.Xr as 1
I 9
.Rs
.%A B. W. Kernighan
.%A D. M. Ritchie
.%T "The Programming Language"
.%I Prentice-Hall
.%D 1978
.Re
.Rs
.%A B. W. Kernighan
.%T "Programming in C \- a tutorial"
.Re
.Rs
.%A D. M. Ritchie
.%T "C Reference Manual"
.Re
E 9
.Sh DIAGNOSTICS
E 6
The diagnostics produced by C itself are intended to be
self-explanatory.
Occasional messages may be produced by the assembler
or loader.
D 6
.SH BUGS
D 2
The compiler currently ignores advice to put \fBchar\fR, \fBunsigned char\fR,
E 2
I 2
The compiler currently ignores advice to put 
\fBchar\fR, \fBunsigned char\fR,
E 2
D 4
\fBshort\fR or \fBunsigned short\fR variables in registers.  It previously
E 4
I 4
\fBshort\fR, \fBunsigned short\fR,
\fBfloat\fR, or \fBdouble\fR
E 6
I 6
.Sh HISTORY
The
D 9
.Nm
compiler was distributed with Version 6 AT&T UNIX.
E 9
I 9
.Nm \&cc
compiler was distributed with
.At v6 .
E 9
D 8
The current version was derived from the original.
E 8
.Sh BUGS
The compiler currently ignores advice to put
.Ic char ,
.Ic unsigned char ,
.Ic short ,
.Ic unsigned short ,
.Ic float ,
or
.Ic double
E 6
variables in registers, except as noted above.  It previously
E 4
produced poor, and in some cases incorrect, code for such declarations.
E 1
