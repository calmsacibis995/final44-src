Mrefer1	refer1.c	/^main(argc,argv)		\/* process command-line argument/
addch	refer8.c	/^addch(s, c)$/
append	refer4.c	/^append(s)$/
artskp	refer5.c	/^artskp(s)	\/* skips over initial "a ", "an ", "the/
auxil	../hunt/hunt6.c	/^auxil( res, output)$/
baddrop	../hunt/hunt6.c	/^baddrop(master, nf, fc, nitem, qitem, rprog, full)/
c_look	../mkey/mkey3.c	/^c_look (s, fl)$/
callhunt	glue3.c	/^callhunt(in, out, arg, outlen)$/
caps	refer6.c	/^caps(a, b)$/
cfail	glue5.c	/^cfail() {$/
cgotofn	glue5.c	/^cgotofn() {$/
chkdup	refer7.c	/^chkdup(tag)$/
choices	refer2.c	/^choices(buff)$/
ckexist	../hunt/hunt8.c	/^ckexist(s, t)$/
class	refer6.c	/^class (nt, tv)$/
cleanup	refer1.c	/^cleanup()$/
clfgrep	glue4.c	/^clfgrep()$/
cominit	../mkey/mkey3.c	/^cominit()$/
common	../mkey/mkey3.c	/^common (s)$/
condense	refer7.c	/^condense(wref, wcnt, sig)$/
control	refer2.c	/^control(c)$/
corout	glue3.c	/^corout(in, out, rprog, arg, outlen)$/
dodeliv	glue3.c	/^dodeliv(in, out, arg, outlen)$/
doquery	../hunt/hunt2.c	/^doquery(hpt, nhash, fb, nitem, qitem, master)$/
doref	refer2.c	/^doref(line1)$/
dumpold	refer7.c	/^dumpold()$/
err	../deliv/deliv2.c	/^err (s, a)$/
execute	glue5.c	/^execute()$/
fgrep	glue5.c	/^fgrep(argc, argv)$/
findline	../hunt/hunt7.c	/^findline(in, out, outlen, indexdate)$/
flout	refer4.c	/^flout()$/
fpar	refer5.c	/^fpar (nf, flds, out, c, seq, prepend)$/
gch	glue5.c	/^gch()$/
gdate	../hunt/hunt5.c	/^gdate(f)$/
getl	../hunt/hunt2.c	/^getl(fb)$/
getq	../hunt/hunt3.c	/^getq(v)$/
grepcall	glue4.c	/^grepcall (in, out, arg)$/
hash	../deliv/deliv2.c	/^hash (s)$/
hastype	refer6.c	/^hastype (nt, tv, c)$/
hcomp	../hunt/hunt2.c	/^hcomp( n1, n2)$/
hexch	../hunt/hunt2.c	/^hexch( n1, n2 )$/
huntmain	glue1.c	/^huntmain(argc,argv)$/
initadd	refer5.c	/^initadd(to, from, stop)$/
input	refer8.c	/^input(s)$/
intr	refer1.c	/^intr()$/
iopen	../hunt/hunt8.c	/^iopen(s, t)$/
keylet	refer5.c	/^keylet(t, nref)$/
last	refer6.c	/^last(s)$/
lookat	refer8.c	/^lookat()$/
makefgrep	../hunt/hunt8.c	/^makefgrep(indexname)$/
mindex	../deliv/deliv2.c	/^mindex(s, c)$/
move	glue3.c	/^#define move(x, y) close(y); dup(x); close(x);$/
mycpy	refer5.c	/^mycpy(s, t)$/
mycpy2	refer5.c	/^mycpy2(s, t, n)$/
new	glue5.c	/^new (x)$/
newline	refer2.c	/^newline(s)$/
output	refer4.c	/^output(s)$/
overflo	glue5.c	/^overflo() {$/
prefix	../deliv/deliv2.c	/^prefix(t, s)$/
punctuat	refer4.c	/^#define punctuat(c) (c=='.' || c=='?' || c=='!' ||/
putkey	refer5.c	/^putkey(nf, flds, nref, keystr)$/
putl	../hunt/hunt2.c	/^putl(ll, f)$/
putref	refer6.c	/^putref(n, tvec)$/
putsig	refer5.c	/^putsig (nf, flds, nref, nstline, endline, toindex)/
recopy	refer7.c	/^recopy (fnam)$/
remote	../hunt/hunt9.c	/^remote(in, out)$/
restodir	glue2.c	/^restodir()$/
result	../hunt/hunt5.c	/^result(master, nf, fc)$/
revauth	refer6.c	/^revauth(s, b)$/
runbib	../hunt/hunt8.c	/^runbib (s)$/
savedir	glue2.c	/^savedir()$/
setfrom	glue1.c	/^setfrom(c)$/
shell	../hunt/shell.c	/^shell (n, comp, exch)$/
signals	refer1.c	/^signals()$/
tabs	refer6.c	/^tabs (sv, line)$/
todir	glue1.c	/^todir(t)$/
tokeytab	refer5.c	/^tokeytab (t, nref)$/
trimnl	refer4.c	/^trimnl(ln)$/
unopen	glue1.c	/^#define unopen(fil) {if (fil!=NULL) {fclose(fil); /
wswap	refer7.c	/^wswap(iw1, iw2)$/
zalloc	../deliv/deliv2.c	/^zalloc(m,n)$/
