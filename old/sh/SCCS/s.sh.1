h59394
s 00219/00331/00630
d D 6.8 91/08/09 16:38:15 cael 10 9
c mdoc version three
e
s 00003/00003/00958
d D 6.7 91/02/05 11:13:03 karels 9 8
c typos
e
s 00001/00001/00960
d D 6.6 90/07/24 22:51:43 cael 8 7
c .Xr botch fix
e
s 00003/00004/00958
d D 6.5 90/06/26 01:01:06 cael 7 6
c converted man page
e
s 00632/00536/00330
d D 6.4 90/06/11 06:00:33 cael 6 5
c converted man page
e
s 00012/00000/00854
d D 6.3 86/05/05 16:03:27 mckusick 5 4
c IFS not imported for root shells; # starts comment in non-interactive shells
e
s 00001/00001/00853
d D 6.2 86/04/20 05:22:16 lepreau 4 3
c typo
e
s 00001/00001/00853
d D 6.1 85/04/29 17:55:11 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00142/00262/00712
d D 5.1 85/04/29 17:54:33 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00974/00000/00000
d D 4.1 85/04/29 17:54:15 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
D 7
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 6
.\"
D 2
.TH SH 1
E 2
I 2
D 3
.TH SH 1 "7 February 1983"
E 3
I 3
D 6
.TH SH 1 "%Q%"
E 3
E 2
.AT 3
.SH NAME
D 2
sh, for, case, if, while, \fB:\fP, \fB.\fP, break, continue, cd, eval, exec, exit, export, login, newgrp, read, readonly, set, shift, times, trap, umask, wait \- command language
E 2
I 2
sh, for, case, if, while, \fB:\fP, \fB.\fP, break, continue, cd, eval, exec, exit, export, login, read, readonly, set, shift, times, trap, umask, wait \- command language
E 2
.SH SYNOPSIS
.B sh
[
.B \-ceiknrstuvx
] [ arg ] ...
.ds OK [\|
.ds CK \|]
.ds LT \s-2<\s0
.ds GT \s-2>\s0
.ds LE \s-2<\s0
.ds ST *
.SH DESCRIPTION
.I Sh
E 6
I 6
.\" %sccs.include.redist.man%
E 7
I 7
.\" Copyright (c) 1990 Regents of the University of California.
D 10
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 10
I 10
.\" All rights reserved.
E 10
E 7
.\"
D 10
.\"     %W% (Berkeley) %G%
E 10
I 10
.\" %sccs.include.proprietary.roff%
E 10
.\"
I 10
.\"	%W% (Berkeley) %G%
.\"
E 10
.Dd %Q%
.Dt SH 1
.Os ATT 7th
.Sh NAME
.Nm sh
.Nd shell command interpreter
.Sh SYNOPSIS
.Nm sh
.Op Fl ceiknrstuvx
.Op arg
.Ar ...
.Sh DESCRIPTION
.Nm Sh
E 6
D 2
is a command programming language
that executes commands read from a terminal
or a file.
See
E 2
I 2
is a command programming language that executes commands read from a terminal
D 6
or a file.  See
E 2
.B invocation
for the meaning of arguments to the shell.
.PP
.B Commands.
.br
E 6
I 6
or a file. The shell this page describes is called the
.Em Bourne
shell.
.Pp
Command line options:
.Pp
D 9
If the first character of argument 0 if
.Fl ,
E 9
I 9
If the first character of argument 0 is
D 10
.Fl \& ,
E 10
I 10
.Fl ,
E 10
E 9
commands are read from
.Pa $HOME/.profile ,
if such a file exists.
The following flags are interpreted by the shell when it is invoked.
D 10
.Tw Fl
.Tp Cx Fl c
.Cx \&\ \&
.Ar string
.Cx
E 10
I 10
.Bl -tag -width flag
.It Fl c Ar string 
E 10
Commands are read from
.Ar string.
D 10
.Tp Fl s
E 10
I 10
.It Fl s
E 10
If the
.Fl s
flag is present or if no arguments remain
then commands are read from the standard input.
Shell output is written to file descriptor 2.
D 10
.Tp Fl i
E 10
I 10
.It Fl i
E 10
If the
.Fl i
flag is present or
if the shell input and output are attached to a terminal (as told by
.Xr getty  )
then this shell is
.Em interactive .
D 10
In this case the terminate signal SIGTERM (see
E 10
I 10
In this case the terminate signal
.Dv SIGTERM
(see
E 10
.Xr sigvec  2  )
is ignored (so that 'kill 0'
does not kill an interactive shell) and the interrupt signal
D 10
SIGINT is caught and ignored (so that
E 10
I 10
.Dv SIGINT
is caught and ignored (so that
E 10
.Xr wait
is interruptible).
D 10
In all cases SIGQUIT is ignored by the shell.
.Tp
E 10
I 10
In all cases
.Dv SIGQUIT
is ignored by the shell.
.El
E 10
.Pp
This next set of options can be used on the command line invoking
the
.Nm sh
or set with the interactive command
.Ic set .
D 10
.Tp Fl e
E 10
I 10
.Bl -tag -width Fl e
.It Fl e
E 10
If non interactive, exit immediately if a command fails.
D 10
.Tp Fl k
E 10
I 10
.It Fl k
E 10
All keyword arguments are placed in the environment for a command,
not just those that precede the command name.
D 10
.Tp Fl n
E 10
I 10
.It Fl n
E 10
Read commands but do not execute them.
D 10
.Tp Fl t
E 10
I 10
.It Fl t
E 10
Exit after reading and executing one command.
D 10
.Tp Fl u
E 10
I 10
.It Fl u
E 10
Treat unset variables as an error when substituting.
D 10
.Tp Fl v
E 10
I 10
.It Fl v
E 10
Print shell input lines as they are read.
D 10
.Tp Fl x
E 10
I 10
.It Fl x
E 10
Print commands and their arguments as they are executed.
D 10
.Tp Fl
E 10
I 10
.It Fl
E 10
Turn off the
.Fl x
and
.Fl v
options.
D 10
.Tp
.Ss Commands .
E 10
I 10
.El
.Ss Commands
E 10
E 6
A
D 6
.I simple-command
E 6
I 6
.Em simple-command
E 6
is a sequence of non blank
D 6
.I words
E 6
I 6
.Em words
E 6
separated by blanks (a blank is a
D 6
.B tab
E 6
I 6
.Em tab
E 6
or a
D 6
.BR space ).
E 6
I 6
.Em space  ) .
E 6
D 2
A word that begins with a # introduces a comment; that word and the
rest of the line is ignored.
.PP
The first word of a simple-command specifies the name of the command to
be executed.
Except as specified below
the remaining words are passed as arguments
E 2
I 2
The first word specifies the name of the command to be executed.
Except as specified below the remaining words are passed as arguments
E 2
to the invoked command.
D 2
The command name is passed as argument 0
(see
.IR exec (2)).
E 2
I 2
The command name is passed as argument 0 (see
D 6
.IR execve (2)).
E 6
I 6
.Xr execve  2  ) .
E 6
E 2
The
D 6
.I value
E 6
I 6
.Em value
E 6
of a simple-command is its exit status
D 2
if it terminates normally or 200+\fIstatus\fP if
it terminates abnormally (see
.IR signal (2)
for a list of
status values).
E 2
I 2
D 6
if it terminates normally or 200+\fIstatus\fP if it terminates abnormally (see
.IR sigvec (2)
E 6
I 6
if it terminates normally or
D 10
.Cx Li 200+
.Em status
.Cx
E 10
I 10
.Li 200+ Ns Ns Em status 
E 10
if it terminates abnormally (see
.Ar sigvec  2
E 6
for a list of status values).
E 2
D 6
.LP
E 6
I 6
.Pp
E 6
A
D 6
.I pipeline
E 6
I 6
.Em pipeline
E 6
is a sequence of one or more
D 6
.I commands
E 6
I 6
.Em commands
E 6
separated by
D 6
.B \(or.
E 6
I 6
.Sq Nm \&|  .
E 6
D 2
The standard output of each command but the last
is connected by a
E 2
I 2
The standard output of each command but the last is connected by a
E 2
D 6
.IR pipe (2)
E 6
I 6
.Xr pipe  2
E 6
to the standard input of the next command.
Each command is run as a separate process;
the shell waits for the last command to terminate.
D 6
.LP
E 6
I 6
.Pp
E 6
A
D 6
.I list
E 6
I 6
.Em list
E 6
is a sequence of one or more
D 6
.I pipelines
E 6
I 6
.Em pipelines
E 6
separated by
D 6
.BR ; ,
.BR & ,
.B &&
E 6
I 6
.Nm \&; ,
.Nm \&& ,
.Nm \&&&
E 6
or
D 6
.B \(or\|\(or
E 6
I 6
.Nm \&|
or
.Nm \&|\&|
E 6
and optionally terminated by
D 6
.B ;
E 6
I 6
.Nm \&;
E 6
or
D 6
.BR & .
.B ;
E 6
I 6
.Nm \&& .
.Nm \&;
E 6
and
D 6
.B &
E 6
I 6
.Nm \&&
E 6
D 2
have equal precedence
which is lower than that of
E 2
I 2
have equal precedence which is lower than that of
E 2
D 6
.B &&
E 6
I 6
.Nm \&&&
E 6
and
D 6
.BR \(or\|\(or ,
.B &&
E 6
I 6
.Nm \&|\&| ,
.Nm &&
E 6
and
D 6
.B \(or\|\(or
E 6
I 6
.Nm \&|\&| ,
E 6
also have equal precedence.
D 2
A semicolon causes sequential execution; an ampersand causes
the preceding
E 2
I 2
A semicolon causes sequential execution; an ampersand causes the preceding
E 2
D 6
.I pipeline
E 6
I 6
.Em pipeline
E 6
D 2
to be executed without waiting for it to finish.
The symbol
E 2
I 2
to be executed without waiting for it to finish.  The symbol
E 2
D 6
.B &&
.RB ( \(or\|\(or )
E 6
I 6
.Nm \&&&
.Pq Nm \&|\&|
E 6
causes the
D 6
.I list
E 6
I 6
.Em list
E 6
following to be executed only if the preceding
D 6
.I pipeline
E 6
I 6
.Em pipeline
E 6
D 2
returns a zero (non zero) value.
Newlines may appear in a
E 2
I 2
returns a zero (non zero) value.  Newlines may appear in a
E 2
D 6
.I list,
E 6
I 6
.Em list ,
E 6
D 2
instead of semicolons,
to delimit commands.
E 2
I 2
instead of semicolons, to delimit commands.
E 2
D 6
.LP
E 6
I 6
.Pp
E 6
A
D 6
.I command
E 6
I 6
.Em command
E 6
D 2
is either a simple-command
or one of the following.
E 2
I 2
is either a simple-command or one of the following.
E 2
The value returned by a command is that of the
last simple-command executed in the command.
D 6
.TP
\fBfor \fIname\fR \*(OK\fBin \fIword\fR ...\*(CK \fBdo \fIlist \fBdone\fR
E 6
I 6
D 10
.Tw Fl
.Tp Cx Ic for
.Cx \&\ \&
.Ar name
.Cx \&\ \&
.Op Ic in Ar word ...
.Cx \&\ \&
.Ic do
.Cx \&\ \&
.Ar list
.Cx \&\ \&
.Ic  done
.Cx
E 10
I 10
.Bl -tag -width Fl
.It Xo
.Ic for Ar name
.Op Ic \&in Ar word ...
.Ic \&do Ar list Ic done 
.Xc
E 10
E 6
Each time a
D 6
.B for
E 6
I 6
.Ic for
E 6
command is executed
D 6
.I name
E 6
I 6
.Ar name
E 6
is set to the next word in the
D 6
.B for
E 6
I 6
.Ic for
E 6
D 4
word list
E 4
I 4
word list.
E 4
If
D 6
.BI in \ word
\&...
E 6
I 6
D 10
.Ic in
E 10
I 10
.Ic \&in
E 10
.Ar word \&...
E 6
D 2
is omitted then
E 2
I 2
is omitted,
E 2
D 6
.B
in "$@"
E 6
I 6
D 10
.Ic in
E 10
I 10
.Ic \&in
E 10
.Dq Ic \&$@
E 6
D 2
is assumed.
Execution ends when there are no more words in the list.
E 2
I 2
D 10
is assumed.  Execution ends when there are no more words in the list.
E 2
D 6
.TP
\fBcase \fIword \fBin\fR \*(OK\fIpattern \fR\*(OK \fB\(or \fIpattern \fR\*(CK ... \fB) \fIlist \fB;;\fR\*(CK ... \fBesac\fR
E 6
I 6
.Tp Cx Ic case
.Cx \&\ \&
.Ar word
.Cx \&\ \&
.Ic in
.Cx \&\ \&[
.Ar pattern
.Cx \&\ \&
.Op Ar \&| pattern ...
.Cx \&\ \&
.Ic \&)
.Cx \&\ \&
.Ar list
.Cx \&\ \&
.Ic \&;;
.Cx \&]\ \& ...
.Ar esac
.Cx
E 10
I 10
is assumed.
Execution ends when there are no more words in the list.
.It Xo
.Ic case Ar word
.Ic \&in
.Oo Ar pattern Op Ar \&| pattern
.Ar ... Ic \&) Ar list Ic \&;; Oc
.Ar ... Ar esac 
.Xc
E 10
E 6
A
D 6
.B case
E 6
I 6
.Ic case
E 6
command executes the
D 6
.I list
E 6
I 6
.Ar list
E 6
D 2
associated with the first
pattern that matches
E 2
I 2
associated with the first pattern that matches
E 2
D 6
.I word.
E 6
I 6
.Ar word .
E 6
D 2
The form of the patterns is
the same as that used for
file name generation.
E 2
I 2
The form of the patterns is the same as that used for file name generation.
E 2
D 6
.TP
\fBif \fIlist \fBthen \fIlist\fR \*(OK\fBelif \fIlist \fBthen \fIlist\fR\*(CK ... \*(OK\fBelse \fIlist\fR\*(CK \fBfi\fR
E 6
I 6
D 10
.Tp Cx Ic if
.Cx \&\ \&
.Ar list
.Cx \&\ \&
.Ic then
.Cx \&\ \&
.Ar list
.Cx \&\ \&
E 10
I 10
.It Xo
.Ic \&if Ar list
.Ic then Ar list
E 10
.Op Ic elif Ar list Ic then Ar list
D 10
.Cx \&\ \&
.Cx \&...
.Cx \&\ \&
.Op Ic else Ar list
.Cx \&\ \&
.Ic fi
.Cx
E 10
I 10
.Ar ...
.Op Ic else Ar list Ic
.No \&fi 
.Xc
E 10
E 6
The
D 6
.I list
E 6
I 6
.Ar list
E 6
following
D 6
.B if
E 6
I 6
D 10
.Ic if
E 10
I 10
.Ic \&if
E 10
E 6
is executed and if it returns zero the
D 6
.I list
E 6
I 6
.Ar list
E 6
following
D 6
.B then
E 6
I 6
.Ic then
E 6
D 2
is executed.
Otherwise, the
E 2
I 2
is executed.  Otherwise, the
E 2
D 6
.I list
E 6
I 6
.Ar list
E 6
following
D 6
.B elif
E 6
I 6
.Ic elif
E 6
D 2
is executed and if its value is zero
the
E 2
I 2
is executed and if its value is zero the
E 2
D 6
.I list
E 6
I 6
.Ar list
E 6
following
D 6
.B then
E 6
I 6
.Ic then
E 6
D 2
is executed.
Failing that the
E 2
I 2
is executed.  Failing that the
E 2
D 6
.B else
.I list
E 6
I 6
.Ic else
.Ar list
E 6
is executed.
D 6
.TP
\fBwhile \fIlist\fR \*(OK\fBdo \fIlist\fR\*(CK \fBdone\fR
E 6
I 6
D 10
.Tp Cx Ic  while
.Cx \&\ \&
.Ar list
.Cx \&\ \&
.Op Ic  do Ar list
.Cx \&\ \&
.Ic  done
.Cx
E 10
I 10
.It Xo
.Ic while Ar list
.Op Ic \&do Ar list
.Ic done 
.Xc
E 10
E 6
A
D 6
.B while
E 6
I 6
.Ic while
E 6
command repeatedly executes the
D 6
.B while
.I list
E 6
I 6
.Ic  while
.Ar list
E 6
and if its value is zero executes the
D 6
.B do
.I list;
E 6
I 6
D 10
.Ic do
E 10
I 10
.Ic \&do
E 10
.Ar list ;
E 6
D 2
otherwise the loop terminates.
The value returned by a
E 2
I 2
otherwise the loop terminates.  The value returned by a
E 2
D 6
.B while
E 6
I 6
.Ic while
E 6
D 2
command is that
of the last executed command in the
E 2
I 2
command is that of the last executed command in the
E 2
D 6
.B do
.I list.
.B until
E 6
I 6
D 10
.Ic do
E 10
I 10
.Ic \&do
E 10
.Ar list .
.Ic until
E 6
may be used in place of
D 6
.B while
E 6
I 6
.Ic while
E 6
D 2
to negate
the loop termination test.
E 2
I 2
to negate the loop termination test.
E 2
D 6
.TP
.BI ( " list " )
E 6
I 6
D 10
.Tp Pq Ar list
E 10
I 10
.It Ic \&( Ar list Ic \&)
E 10
E 6
Execute
D 6
.I list
E 6
I 6
.Ar list
E 6
in a subshell.
D 6
.TP
.BI { " list " }
.I list
E 6
I 6
D 10
.Tp Cx \&{
E 10
I 10
.It Ic \&{ Ar list Ic \&} 
E 10
.Ar list
D 10
.Cx \&}
.Cx
.Ar list
E 10
E 6
is simply executed.
D 6
.LP
E 6
I 6
D 10
.Tp
E 10
I 10
.El
E 10
.Pp
E 6
D 2
The following words
are only recognized as the first word of a command
E 2
I 2
The following words are only recognized as the first word of a command
E 2
and when not quoted.
D 6
.IP
.B
if then else elif fi case in esac for while until do done { }
.PP
.B Command substitution.
.br
D 2
The standard output from a command enclosed in
a pair of grave accents
E 2
I 2
The standard output from a command enclosed in a pair of back quotes 
E 2
.RB ( \`\|\` )
E 6
I 6
D 10
.Df I
E 10
I 10
.Bd -filled -offset indent -compact
E 10
.Nm if then else elif fi case in esac
.Nm for while until do done \&{ \&}
D 10
.De
.Pp
E 10
I 10
.Ed
E 10
.Ss Command substitution 
The standard output from a command enclosed in a pair of back quotes
.Pq Ic \&``
E 6
D 2
may be used as part or all
of a word;
trailing newlines are removed.
E 2
I 2
may be used as part or all of a word; trailing newlines are removed.
E 2
D 6
.PP
.B Parameter substitution.
.br
E 6
I 6
D 10
.Pp
.Ss Parameter substitution .
E 10
I 10
.Ss Parameter substitution
E 10
E 6
The character
D 6
.B $
E 6
I 6
.Ic \&$
E 6
D 2
is used to introduce substitutable
parameters.
E 2
I 2
is used to introduce substitutable parameters.
E 2
Positional parameters may be assigned values by
D 6
.BR set .
E 6
I 6
.Ic set  .
E 6
Variables may be set by writing
D 6
.IP
.IB name = value
[
.IB name = value
] ...
.TP
$\fB\|{\fIparameter\fB\|}\fR
E 6
I 6
.Pp
D 10
.Df I
E 10
I 10
.Bd -filled -offset indent -compact
E 10
.Ar name=value
.Op Ar name=value
\&...
D 10
.De
E 10
I 10
.Ed
E 10
.Pp
D 10
.Tp Cx Ic \&$
.Cx \&\ \&
.Sy \&{
.Ar parameter
.Sy \&}
.Cx
E 10
I 10
.Bl -tag -width flag
.It Ic \&$\&{ Ns Ar parameter Ns Ic \&} 
E 10
E 6
A
D 6
.I parameter
E 6
I 6
.Ar parameter
E 6
is a sequence of letters, digits or underscores (a
D 6
.IR name ),
E 6
I 6
.Ar name  ) ,
E 6
D 2
a digit,
or any of the characters
E 2
I 2
a digit, or any of the characters
E 2
D 6
.B
* @ # ? \- $ !\|.
E 6
I 6
D 10
.Nm \&* \&@ \&# \&? \&\- \&$ \&!\ 
E 10
I 10
.Nm "\&* \&@ \&# \&? \&\- \&$ \&!\ " .
E 10
E 6
The value, if any, of the parameter is substituted.
The braces are required only when
D 6
.I parameter
E 6
I 6
.Ar parameter
E 6
is followed by a letter, digit, or underscore
D 2
that is not to be interpreted as part of its name.
If
E 2
I 2
that is not to be interpreted as part of its name.  If
E 2
D 6
.I parameter
E 6
I 6
.Ar parameter
E 6
D 2
is a digit then it is a positional parameter.
If
E 2
I 2
is a digit, it is a positional parameter.  If
E 2
D 6
.I parameter
E 6
I 6
.Ar parameter
E 6
is
D 6
.BR * " or" " @"
E 6
I 6
.Ic \&*
or
.Ic \&@
E 6
D 2
then all the positional
parameters, starting with
E 2
I 2
then all the positional parameters, starting with
E 2
D 6
.SM
.BR $1 ,
E 6
I 6
.Ic $1 ,
E 6
D 2
are substituted
separated by spaces.
E 2
I 2
are substituted separated by spaces.
E 2
D 6
.SM
.B $0
E 6
I 6
.Ic $0
E 6
D 2
is set from argument zero when the shell
is invoked.
E 2
I 2
is set from argument zero when the shell is invoked.
E 2
D 6
.TP
$\fB\|{\fIparameter\|\-word\|\fB}\fR
E 6
I 6
D 10
.Tp Cx Ic \&$
.Cx \&\ \&
.Sy \&{
.Ar parameter 
.Fl
.Ar word
.Sy \&}
.Cx
E 10
I 10
.Sm off
.It Xo
.Ic \&$\&{ Ar parameter
.Ic - Ar word Ic \&} 
.Xc
.Sm on
E 10
E 6
If
D 6
.I parameter
E 6
I 6
.Ar parameter
E 6
D 2
is set then substitute its value;
otherwise substitute
E 2
I 2
is set, substitute its value; otherwise substitute
E 2
D 6
.I word.
.TP
$\fB\|{\fIparameter\|\(eq\|word\|\fB}\fR
E 6
I 6
.Ar word .
D 10
.Tp Cx Ic \&$
.Cx \&\ \&
.Sy \&{
.Ar parameter
.Ic \&=
.Ar word
.Cx \&\ \&
.Sy \&}
.Cx
E 10
I 10
.Sm off
.It Xo
.Ic \&$\&{ Ar parameter
.Ic \&= Ar word Ic \&} 
.Xc
.Sm on
E 10
E 6
If
D 6
.I parameter
E 6
I 6
.Ar parameter
E 6
D 2
is not set then set it to
E 2
I 2
is not set, set it to
E 2
D 6
.I word;
E 6
I 6
.Ar word ;
E 6
the value of the parameter is then substituted.
D 2
Positional parameters may not be assigned to
in this way.
E 2
I 2
Positional parameters may not be assigned to in this way.
E 2
D 6
.TP
$\fB\|{\fIparameter\|?\|word\|\fB}\fR
E 6
I 6
D 10
.Tp Cx Ic \&$
.Cx \&\ \&
.Sy \&{
.Ar parameter 
.Ic \&?
.Ar word
.Sy \&}
.Cx
E 10
I 10
.Sm off
.It Xo
.Ic \&$\&{ Ar parameter
.Ic \&? Ar word Ic \&} 
.Xc
.Sm on
E 10
E 6
If
D 6
.I parameter
E 6
I 6
.Ar parameter
E 6
D 2
is set then substitute its value;
otherwise, print
E 2
I 2
is set, substitute its value; otherwise, print
E 2
D 6
.I word
E 6
I 6
.Ar word
E 6
D 2
and exit from the shell.
If
E 2
I 2
and exit from the shell.  If
E 2
D 6
.I word
E 6
I 6
.Ar word
E 6
D 2
is omitted then a standard message is printed.
E 2
I 2
is omitted, a standard message is printed.
E 2
D 6
.TP
$\fB\|{\fIparameter\|\(plword\|\fB}\fR
E 6
I 6
D 10
.Tp Cx Ic \&$
.Cx \&\ \&
.Sy \&{
.Ar parameter
.Ic \&+
.Ar word
.Sy \&}
.Cx
E 10
I 10
.Sm off
.It Xo
.Ic \&$\&{ Ar parameter
.Ic \&+ Ar word Ic \&} 
.Xc
.Sm on
E 10
E 6
If
D 6
.I parameter
E 6
I 6
.Ar parameter
E 6
D 2
is set then substitute
E 2
I 2
is set, substitute
E 2
D 6
.I word;
E 6
I 6
.Ar word ;
E 6
otherwise substitute nothing.
D 6
.LP
E 6
I 6
D 10
.Tp
E 10
I 10
.El
E 10
.Pp
E 6
In the above
D 6
.I word
E 6
I 6
.Ar word
E 6
D 2
is not evaluated unless it is
to be used as the substituted string.
(So that, for example,
echo ${d\-\`pwd\`}
will only execute
E 2
I 2
is not evaluated unless it is to be used as the substituted string.
D 10
(So that, for example, echo ${d\-\'pwd\'} will only execute
E 10
I 10
(So that, for example,
.Li echo ${d\-'pwd'}
will only execute
E 10
E 2
D 6
.I pwd
E 6
I 6
.Ar pwd
E 6
if
D 6
.I d
E 6
I 6
.Ar d
E 6
is unset.)
D 6
.LP
E 6
I 6
.Pp
E 6
The following
D 6
.I parameters
E 6
I 6
.Ar parameters
E 6
are automatically set by the shell.
D 6
.RS
.TP
.B #
E 6
I 6
.Pp
D 10
.Dw Ds
.Dp Ic \&#
E 10
I 10
.Bl -tag -width flag -compact
.It Ic \&#
E 10
E 6
The number of positional parameters in decimal.
D 6
.PD 0
.TP
.B \-
E 6
I 6
D 10
.Dp Fl
E 10
I 10
.It Fl
E 10
E 6
Options supplied to the shell on invocation or by
D 6
.BR set .
.TP
.B ?
E 6
I 6
.Ar set  .
D 10
.Dp Ic \&?
E 10
I 10
.It Ic \&?
E 10
E 6
D 2
The value returned by the last executed command
in decimal.
E 2
I 2
The value returned by the last executed command in decimal.
E 2
D 6
.TP
.B $
E 6
I 6
D 10
.Dp Ic \&$
E 10
I 10
.It Ic \&$
E 10
E 6
The process number of this shell.
D 6
.TP
.B !
E 6
I 6
D 10
.Dp Ic \&!
E 10
I 10
.It Ic \&!
E 10
E 6
The process number of the last background command invoked.
D 6
.PD
.RE
.LP
E 6
I 6
D 10
.Dp
.De
E 10
I 10
.El
E 10
.Pp
E 6
The following
D 6
.I parameters
E 6
I 6
.Ar parameters
E 6
are used but not set by the shell.
D 6
.RS
.TP
.B
.SM HOME
E 6
I 6
.Pp
D 10
.Ds I
.Tp Ev HOME
E 10
I 10
.Bl -tag -width flag -compact
.It Ev HOME
E 10
E 6
The default argument (home directory) for the
D 6
.B cd
E 6
I 6
.Ic cd
E 6
command.
D 6
.PD 0
.TP
.B
.SM PATH
E 6
I 6
D 10
.Tp Ev PATH
E 10
I 10
.It Ev PATH
E 10
E 6
The search path for commands (see
D 6
.BR execution ).
.TP
.B
.SM MAIL
E 6
I 6
.Ar execution  ) .
D 10
.Tp Ev MAIL
E 10
I 10
.It Ev MAIL
E 10
E 6
If this variable is set to the name of
D 2
a mail file then the shell informs the user of
E 2
I 2
a mail file, the shell informs the user of
E 2
the arrival of mail in the specified file.
D 6
.SM
.TP
.B PS1
E 6
I 6
D 10
.Tp Ev PS1
E 10
I 10
.It Ev PS1
E 10
E 6
D 2
Primary prompt string, by default `$ '.
E 2
I 2
Primary prompt string, by default '$ '.
E 2
D 6
.TP
.SM
.B PS2
E 6
I 6
D 10
.Tp Ev PS2
E 10
I 10
.It Ev PS2
E 10
E 6
D 2
Secondary prompt string, by default `> '.
E 2
I 2
Secondary prompt string, by default '> '.
E 2
D 6
.TP
.SM
.B IFS
E 6
I 6
D 10
.Tp Ev IFS
E 10
I 10
.It Ev IFS
E 10
E 6
D 2
Internal field separators,
normally
E 2
I 2
Internal field separators, normally
E 2
D 6
.BR space ,
.BR tab ,
E 6
I 6
.Em space  ,
.Em tab ,
E 6
and
D 6
.BR newline .
I 5
.B IFS
is ignored if 
.I sh
E 6
I 6
.Em newline  .
.Ev IFS
is ignored if
.Nm sh
E 6
is running as root or if the effective user id differs from the real user id.
E 5
D 6
.PD
.RE
.PP
.B Blank interpretation.
.br
E 6
I 6
D 10
.Tp
.De
.Ss Blank interpretation .
E 10
I 10
.El
.Ss Blank interpretation
E 10
E 6
After parameter and command substitution,
any results of substitution are scanned for internal field separator
characters (those found in
D 6
.SM
.BR $IFS \*S)
E 6
I 6
D 10
.Cx Ic $
.Ev IFS )
.Cx
E 10
I 10
.Ic $ Ns Ev IFS ) 
E 10
E 6
and split into distinct arguments where such characters are found.
Explicit null arguments ("" or \'\') are retained.
D 2
Implicit null arguments
(those resulting from
E 2
I 2
Implicit null arguments (those resulting from
E 2
D 6
.I parameters
E 6
I 6
.Em parameters
E 6
that have no values) are removed.
D 6
.PP
.B File name generation.
.br
E 6
I 6
D 10
.Pp
.Ss File name generation .
E 10
I 10
.Ss File name generation
E 10
E 6
D 2
Following substitution, each command word is scanned for
the characters
E 2
I 2
Following substitution, each command word is scanned for the characters
E 2
D 6
.BR * ,
.B ?
E 6
I 6
.Ic \&* ,
.Ic \&?
E 6
and
D 6
.B \*(OK.
E 6
I 6
.Ic \&[ .
E 6
D 2
If one of these characters appears
then the word is regarded as a pattern.
The word is replaced with alphabetically sorted file names that match the pattern.
If no file name is found that matches the pattern then
the word is left unchanged.
The character
E 2
I 2
If one of these characters appears, the word is regarded as a pattern.
The word is replaced with alphabetically sorted file names that match the
pattern.  If no file name is found that matches the pattern,
the word is left unchanged.  The character
E 2
D 6
.B .
E 6
I 6
.Ic \&.
E 6
D 2
at the start of a file name
or immediately following a
E 2
I 2
at the start of a file name or immediately following a
E 2
D 6
.BR / ,
E 6
I 6
.Ic \&/ ,
E 6
and the character
D 6
.BR / ,
E 6
I 6
.Ic \&/ ,
E 6
must be matched explicitly.
D 6
.TP 
.B \*(ST
E 6
I 6
D 10
.Dp Ic \&*\&
E 10
I 10
.Pp
.Bl -tag -width x...x -compact
.It Ic \&*\&
E 10
E 6
Matches any string, including the null string.
D 6
.PD 0
.TP 
.B ?
E 6
I 6
D 10
.Dp Ic \&?
E 10
I 10
.It Ic \&?
E 10
E 6
Matches any single character.
D 6
.TP 
.B \*(OK...\*(CK
E 6
I 6
D 10
.Dp Ic \&[...]
E 10
I 10
.It Ic \&[...]
E 10
E 6
D 2
Matches any one of the characters
enclosed.
E 2
I 2
Matches any one of the characters enclosed.
E 2
A pair of characters separated by
D 6
.B \-
E 6
I 6
.Fl
E 6
D 2
matches any
character lexically between the pair.
E 2
I 2
matches any character lexically between the pair.
E 2
D 6
.PD
.PP
.B Quoting.
.br
E 6
I 6
D 10
.Dp
.Pp
.Ss Quoting .
E 10
I 10
.El
.Ss Quoting
E 10
E 6
The following characters have a special meaning to the shell
and cause termination of a word unless quoted.
I 10
.Bd -filled -offset indent
.Ic "\&;  \&&  \&(  \&)  \&|  \&<  \&>  newline   space   tab"
.Ed
E 10
D 6
.LP
	\fB;   &   (   )   \(or   \*(LT   \*(GT   newline   space   tab\fP
.LP
E 6
I 6
.Pp
D 10
.Df I
.Sy \&; \&& \&( \&) \&| \&< \&>
.Sy newline  space  tab
.De
.Pp
E 10
E 6
A character may be
D 6
.I quoted
E 6
I 6
.Ar quoted
E 6
D 2
by preceding
it with a
E 2
I 2
by preceding it with a
E 2
D 6
.B
\\\|.
.B \\\\newline
E 6
I 6
D 10
.Sq Sy \e .
.Sy \enewline
E 10
I 10
.Sq Ic \e .
.Ic \enewline
E 10
E 6
is ignored.
D 6
All characters enclosed between a pair of quote marks (\fB\'\|\'\fP),
D 2
except a single quote,
are quoted.
Inside double quotes
(\fB"\|"\fP)
E 2
I 2
except a single quote, are quoted.  Inside double quotes (\fB"\|"\fP)
E 6
I 6
All characters enclosed between a pair of quote marks
.Pq Sq ,
except a single quote, are quoted.  Inside double quotes
.Pq Dq
E 6
E 2
parameter and command substitution occurs and
D 6
.B
\\
E 6
I 6
D 10
.Sy \e
E 10
I 10
.Ic \e
E 10
E 6
quotes the characters
D 6
.B
D 2
\\ \` "
E 2
I 2
\\ \' "
E 6
I 6
D 10
.Sy \e\' "
E 10
I 10
.Ic \e' "
E 10
E 6
E 2
and
D 6
.BR $ \|.
.LP
.B
"$*"
E 6
I 6
D 10
.Sy \&$ .
E 10
I 10
.Ic \&$ .
E 10
.Pp
D 10
.Dq \&$*
E 10
I 10
.Bd -filled -offset indent -compact
.Dq Ic \&$\&*
E 10
E 6
is equivalent to
D 6
.SM
.B
"$1 $2 ..."
E 6
I 6
D 10
.Dq Sy $1 $2 \&...
E 10
I 10
.Dq Ic "$1 $2" \&...
E 10
E 6
whereas
D 10
.br
D 6
.B
"$@"
E 6
I 6
.Dq Sy $@
E 10
I 10
.Ed
.Bd -filled -offset indent -compact
.Dq Ic $@
E 10
E 6
is equivalent to
D 6
.SM
.B
"$1" "$2" ... .
.PP
.B Prompting.
.br
E 6
I 6
D 10
.Dq Sy $1 
.Dq Sy $2 
\&...\ .
.Pp
.Ss Prompting .
E 10
I 10
.Dq Ic "$1"
.Dq Ic "$2"
... .
.Ed
.Ss Prompting
E 10
E 6
D 2
When used interactively,
the shell prompts with the value of
E 2
I 2
When used interactively, the shell prompts with the value of
E 2
D 6
.SM
PS1
E 6
I 6
.Ev PS1
E 6
before reading a command.
If at any time a newline is typed and further input is needed
D 2
to complete a command then the secondary prompt
E 2
I 2
to complete a command, the secondary prompt
E 2
D 6
.RB ( \s-2$PS2\s0 )
E 6
I 6
D 10
.Cx Sy $
.Ev PS2
.Cx
E 10
I 10
.Ic $ Ns Ev PS2 
E 10
E 6
is issued.
D 6
.PP
.B Input output.
.br
E 6
I 6
D 10
.Pp
.Ss Input/Output .
E 10
I 10
.Ss Input/Output
E 10
E 6
Before a command is executed its input and output
may be redirected using a special notation interpreted by the shell.
The following may appear anywhere in a simple-command
or may precede or follow a
D 6
.I command
E 6
I 6
.Ar command
E 6
and are not passed on to the invoked command.
Substitution occurs before
D 6
.I word
E 6
I 6
.Ar word
E 6
or
D 6
.I digit
E 6
I 6
.Ar digit
E 6
is used.
D 6
.TP
\*(LT\fI\|word\fP
E 6
I 6
D 10
.Tw Ic
.Tp Cx Ic \&<
.Cx \&\ \&
.Ar word
.Cx
E 10
I 10
.Bl -tag -width Ic
.It Ic \&< Ar word 
E 10
E 6
Use file
D 6
.I word
E 6
I 6
.Ar word
E 6
as standard input (file descriptor 0).
D 6
.PD
.TP
\*(GT\fI\|word\fP
E 6
I 6
D 10
.Tp Cx Ic \&>
.Cx \&\ \&
.Ar word
.Cx
E 10
I 10
.It Ic \&> Ar word 
E 10
E 6
Use file
D 6
.I word
E 6
I 6
.Ar word
E 6
as standard output (file descriptor 1).
D 2
If the file does not exist then it is created;
E 2
I 2
If the file does not exist, it is created;
E 2
otherwise it is truncated to zero length.
D 6
.TP
\*(GT\*(GT\fI\|word\fP
E 6
I 6
D 10
.Tp Cx Ic \&>\&>
.Cx \&\ \&
.Ar word
.Cx
E 10
I 10
.It Ic \&>\&> Ar word 
E 10
E 6
Use file
D 6
.I word
E 6
I 6
.Ar word
E 6
as standard output.
D 2
If the file exists then output is appended (by seeking to the end);
E 2
I 2
If the file exists, output is appended (by seeking to the end);
E 2
otherwise the file is created.
D 6
.TP
\*(LT\*(LT\fI\|word\fP
E 6
I 6
D 10
.Tp Cx Ic \&<\&<
.Cx \&\ \&
.Ar word
.Cx
E 10
I 10
.It Ic \&<\&< Ar word 
E 10
E 6
The shell input is read up to a line the same as
D 6
.IR word ,
E 6
I 6
.Ar word  ,
E 6
or end of file.
D 2
The resulting document becomes
the standard input.
E 2
I 2
The resulting document becomes the standard input.
E 2
If any character of
D 6
.I word
E 6
I 6
.Ar word
E 6
D 2
is quoted then no interpretation
is placed upon the characters of the document;
E 2
I 2
is quoted, no interpretation is placed upon the characters of the document;
E 2
otherwise, parameter and command substitution occurs,
D 6
.B
\\newline
E 6
I 6
D 10
.Sy \enewline
E 10
I 10
.Ic \enewline
E 10
E 6
D 2
is ignored,
and
E 2
I 2
is ignored, and
E 2
D 6
.B
\\
E 6
I 6
D 10
.Sy \e
E 10
I 10
.Ic \e
E 10
E 6
is used to quote the characters
D 6
.B
D 2
\\ $ \`
E 2
I 2
\\ $ \'
E 6
I 6
D 10
.Sy \&$ \&\'
E 10
I 10
.Ic \&$ \&'
E 10
E 6
E 2
and the first character of
D 6
.I word.
.TP
\*(LT\|&\|\fIdigit\fP
E 6
I 6
.Ar word .
D 10
.Tp Cx Ic \&<\&&
.Cx \&\ \&
.Ar digit
.Cx
E 10
I 10
.It Ic \&<\&& Ar digit 
E 10
E 6
The standard input is duplicated from file descriptor
D 6
.I digit;
E 6
I 6
.Ar digit ;
E 6
see
D 6
.IR dup (2).
Similarly for the standard output using \*(GT\|.
.TP
\*(LT\|&\|\-
E 6
I 6
.Xr dup  2  .
Similarly for the standard output using
.Ic \&> .
D 10
.Tp Ic \&<\&&\-
E 10
I 10
.It Ic \&< \&\-
E 10
E 6
The standard input is closed.
D 6
Similarly for the standard output using \*(GT\|.
.PD
.LP
E 6
I 6
Similarly for the standard output using
.Ic \&> .
D 10
.Tp
E 10
I 10
.El
E 10
.Pp
E 6
D 2
If one of the above is preceded by a digit
then the
file descriptor created is that specified
by the digit
(instead of the default 0 or 1).
For example,
E 2
I 2
If one of the above is preceded by a digit, the
file descriptor created is that specified by the digit
(instead of the default 0 or 1).  For example,
E 2
D 6
.LP
	\&... 2\*(GT&1
.LP
E 6
I 6
.Pp
.Dl \&... 2>&1
.Pp
E 6
creates file descriptor 2 to be a duplicate
of file descriptor 1.
D 6
.LP
E 6
I 6
.Pp
E 6
If a command is followed by
D 6
.B &
E 6
I 6
.Ic \&&
E 6
D 2
then the default standard input
for the command
is the empty file
E 2
I 2
then the default standard input for the command is the empty file
E 2
D 6
(/dev/null).
E 6
I 6
.Pq Pa dev/null .
E 6
Otherwise, the environment for the execution of a command contains the
file descriptors of the invoking shell as modified by input
output specifications.
D 6
.PP
.B Environment.
.br
E 6
I 6
D 10
.Pp
E 10
.Ss Environment
E 6
D 2
The environment
is a list of name-value pairs that is passed to
an executed program in the same way as a normal argument list;
see
.IR exec (2)
E 2
I 2
The environment is a list of name-value pairs that is passed to
an executed program in the same way as a normal argument list; see
D 6
.IR execve (2)
E 6
I 6
.Xr execve  2
E 6
E 2
and
D 2
.IR environ (5).
E 2
I 2
D 6
.IR environ (7).
E 6
I 6
.Xr environ  7  .
E 6
E 2
The shell interacts with the environment in several ways.
D 2
On invocation, the shell scans the environment
and creates a
E 2
I 2
On invocation, the shell scans the environment and creates a
E 2
D 6
.I parameter
E 6
I 6
.Ar parameter
E 6
D 2
for each name found,
giving it the corresponding value.
E 2
I 2
for each name found, giving it the corresponding value.
E 2
Executed commands inherit the same environment.
If the user modifies the values of these
D 6
.I parameters
E 6
I 6
.Ar parameters
E 6
D 2
or creates new ones,
none of these affects the environment
unless the
E 2
I 2
or creates new ones, none of these affects the environment unless the
E 2
D 6
.B export
E 6
I 6
.Ic export
E 6
command is used to bind the shell's
D 6
.I parameter
E 6
I 6
.Ar parameter
E 6
to the environment.
The environment seen by any executed command is thus composed
of any unmodified name-value pairs originally inherited by the shell,
D 2
plus any modifications or additions,
all of which must be noted in
E 2
I 2
plus any modifications or additions, all of which must be noted in
E 2
D 6
.B export
E 6
I 6
.Ic export
E 6
commands.
D 6
.LP
E 6
I 6
.Pp
E 6
The environment for any
D 6
.I simple-command
E 6
I 6
.Ar simple-command
E 6
may be augmented by prefixing it with one or more assignments to
D 6
.I parameters.
E 6
I 6
.Ar parameters .
E 6
Thus these two lines are equivalent
D 6
.IP
TERM=450 cmd args
.br
(export TERM; TERM=450; cmd args)
.LP
E 6
I 6
.Pp
.Dl TERM=450 cmd args
.Dl (export TERM; TERM=450; cmd args)
.Pp
E 6
If the
D 6
.B \-k
E 6
I 6
.Fl k
E 6
flag is set,
D 6
.I all
E 6
I 6
.Ar all
E 6
keyword arguments are placed in the environment,
D 6
even if the occur after the command name.
E 6
I 6
even if they occur after the command name.
E 6
D 2
The following prints `a=b c' and `c':
E 2
I 2
D 10
The following prints 'a=b c' and 'c':
E 2
D 6
.nf
E 6
I 6
.Pp
.Ds I
E 10
I 10
The following prints
.Ql a=b c
and
.Ql c :
.Bd -literal -offset indent
E 10
E 6
echo a=b c
set \-k
echo a=b c
D 6
.fi
.PP
.B Signals.
.br
E 6
I 6
D 10
.De
.Pp
.Ss Signals .
E 6
The INTERRUPT and QUIT signals for an invoked
E 10
I 10
.Ed
.Ss Signals
The
.Dv INTERRUPT
and
.Dv QUIT
signals for an invoked
E 10
command are ignored if the command is followed by
D 6
.BR & ;
E 6
I 6
.Ic \&& ;
E 6
D 2
otherwise signals have the values
inherited by the shell from its parent.
E 2
I 2
otherwise signals have the values inherited by the shell from its parent.
E 2
(But see also
D 6
.BR trap. )
.PP
.B Execution.
.br
E 6
I 6
.Ic trap . )
D 10
.Pp
.Ss Execution .
E 10
I 10
.Ss Execution
E 10
E 6
D 2
Each time a command is executed the above substitutions
are carried out.
Except for the `special commands' listed below a new
process is created and
E 2
I 2
Each time a command is executed the above substitutions are carried out.
Except for the 'special commands' listed below a new process is created and
E 2
an attempt is made to execute the command via an
D 2
.IR exec (2).
E 2
I 2
D 6
.IR execve (2).
E 2
.LP
E 6
I 6
.Xr execve  2  .
.Pp
E 6
The shell parameter
D 6
.B
.SM $PATH
E 6
I 6
D 10
.Cx Ic \&$
.Ev $PATH
.Cx
E 10
I 10
.Ic \&$ Ns Ev PATH 
E 10
E 6
D 2
defines the search path for
the directory containing the command.
Each alternative directory name is separated by
a colon
E 2
I 2
defines the search path for the directory containing the command.
Each alternative directory name is separated by a colon
E 2
D 6
.RB ( : ).
E 6
I 6
D 10
.Pq Sy \&: .
E 10
I 10
.Pq Ic \&: .
E 10
E 6
The default path is
D 6
.BR :/bin:/usr/bin .
D 2
If the command name contains a / then the search path
is not used.
Otherwise, each directory in the path is
searched for an executable file.
E 2
I 2
If the command name contains a /, the search path is not used.
E 6
I 6
.Pa :/bin:/usr/bin .
If the command name contains a
D 10
.Sy / ,
E 10
I 10
.Ql / ,
E 10
the search path is not used.
E 6
Otherwise, each directory in the path is searched for an executable file.
E 2
If the file has execute permission but is not an
D 6
.I a.out
E 6
I 6
.Pa a.out
E 6
D 2
file,
it is assumed to be a file containing shell commands.
E 2
I 2
file, it is assumed to be a file containing shell commands.
E 2
A subshell (i.e., a separate process) is spawned to read it.
D 2
A parenthesized command is also executed in
a subshell.
E 2
I 2
A parenthesized command is also executed in a subshell.
E 2
D 6
.PP
.B Special commands.
.br
E 6
I 6
D 10
.Pp
.Ss Special commands .
E 10
I 10
.Ss Special commands
E 10
E 6
The following commands are executed in the shell process
and except where specified
no input output redirection is permitted for such commands.
I 5
D 6
.TP
.B #
E 6
I 6
D 10
.Tw Fl
.Tp Ic \&#
E 10
I 10
.Bl -tag -width indent
.It Ic \&#
E 10
E 6
For non-interactive shells, everything following the
D 6
.B #
E 6
I 6
.Ic \&#
E 6
is treated as a comment, i.e. the rest of the line is ignored.
For interactive shells, the
D 6
.B #
E 6
I 6
.Ic \&#
E 6
has no special effect.
E 5
D 6
.TP
.B :
E 6
I 6
D 10
.Tp Ic \&:\&
E 10
I 10
.It Ic \&:\&
E 10
E 6
No effect; the command does nothing.
D 6
.PD 0
.TP
.BI . \ file
E 6
I 6
D 10
.Tp Cx Ic \&.\&
.Ar  file
.Cx
E 10
I 10
.It Ic \&. Ar file 
E 10
E 6
Read and execute commands from
D 6
.I file
E 6
I 6
.Ar file
E 6
D 2
and return.
The search path
E 2
I 2
and return.  The search path
E 2
D 6
.B
.SM $PATH
E 6
I 6
D 10
.Cx Ic \&$
.Ev PATH
.Cx
E 10
I 10
.Ic \&$ Ns Ev PATH 
E 10
E 6
is used to find the directory containing
D 6
.IR file .
.TP
\fBbreak\fR \*(OK\fIn\fR\*(CK
E 6
I 6
.Ar file  .
D 10
.Tp Cx Ic break
.Cx \&\ \&
.Op Ar n
.Cx
E 10
I 10
.It Ic break Op Ar n 
E 10
E 6
Exit from the enclosing
D 6
.B for
E 6
I 6
.Ic for
E 6
or
D 6
.B while
E 6
I 6
.Ic while
E 6
loop, if any.
If
D 6
.I n
E 6
I 6
.Ar n
E 6
D 2
is specified then break
E 2
I 2
is specified, break
E 2
D 6
.I n
E 6
I 6
.Ar n
E 6
levels.
D 6
.TP
\fBcontinue\fR \*(OK\fIn\fR\*(CK
E 6
I 6
D 10
.Tp Cx Ic continue
.Cx \&\ \&
.Op Ar n
.Cx
E 10
I 10
.It Ic continue Op Ar n 
E 10
E 6
Resume the next iteration of the enclosing
D 6
.B for
E 6
I 6
.Ic for
E 6
or
D 6
.B while
E 6
I 6
.Ic while
E 6
D 2
loop.
If
E 2
I 2
loop.  If
E 2
D 6
.I n
E 6
I 6
.Ar n
E 6
D 2
is specified then resume at the
E 2
I 2
is specified, resume at the
E 2
D 6
.IR n -th
E 6
I 6
D 10
.Cx Ar n
.Cx \'th
.Cx
E 10
I 10
.Ar n Ns 'th
E 10
E 6
enclosing loop.
D 6
.TP
\fBcd\fR \*(OK\fIarg\fR\*(CK
E 6
I 6
D 10
.Tp Cx Ic cd
.Cx \&\ \&
.Op Ar arg
.Cx
E 10
I 10
.It Ic cd Op Ar arg 
E 10
E 6
Change the current directory to
D 6
.I arg.
E 6
I 6
.Ar arg .
E 6
D 2
The shell
parameter
E 2
I 2
The shell parameter
E 2
D 6
.B
.SM $HOME
E 6
I 6
D 10
.Cx Sy \&$
.Ev $HOME
.Cx
E 10
I 10
.Ic \&$ Ns Ev HOME 
E 10
E 6
is the default
D 6
.IR arg .
.TP
\fBeval\fR \*(OK\fIarg \fR...\*(CK
E 6
I 6
.Ar arg  .
D 10
.Tp Cx Ic eval
.Cx \&\ \&
.Op Ar arg  \&...
.Cx
E 10
I 10
.It Ic eval Op Ar arg  \&... 
E 10
E 6
D 2
The arguments are read as input
to the shell
E 2
I 2
The arguments are read as input to the shell
E 2
and the resulting command(s) executed.
D 6
.TP
\fBexec\fR \*(OK\fIarg \fR...\*(CK
E 6
I 6
D 10
.Tp Cx Ic exec
.Cx \&\ \&
.Op Ar arg  \&...
.Cx
E 10
I 10
.It Ic exec Op Ar arg  \&... 
E 10
E 6
D 2
The command specified by
the arguments is executed in place of this shell
E 2
I 2
The command specified by the arguments is executed in place of this shell
E 2
without creating a new process.
Input output arguments may appear and if no other
D 2
arguments are given cause the shell input
output to be modified.
E 2
I 2
arguments are given cause the shell input output to be modified.
E 2
D 6
.TP
\fBexit\fR \*(OK\fIn\fR\*(CK
E 6
I 6
D 10
.Tp Cx Ic exit
.Cx \&\ \&
.Op Ar n
.Cx
E 10
I 10
.It Ic exit Op Ar n 
E 10
E 6
D 2
Causes a non interactive shell to exit
with the exit status specified by
E 2
I 2
Causes a non interactive shell to exit with the exit status specified by
E 2
D 6
.I n.
E 6
I 6
.Ar n .
E 6
If
D 6
.I n
E 6
I 6
.Ar n
E 6
D 2
is omitted then the exit status is that of the last command executed.
E 2
I 2
is omitted, the exit status is that of the last command executed.
E 2
(An end of file will also exit from the shell.)
D 6
.TP
\fBexport\fR \*(OK\fIname\fR ...\*(CK
E 6
I 6
D 10
.Tp Cx Ic export
.Cx \&\ \&
.Op Ar name ...
.Cx
E 10
I 10
.It Ic export Op Ar name ... 
E 10
E 6
D 2
The given names are marked
for automatic export to the
E 2
I 2
The given names are marked for automatic export to the
E 2
D 6
.I environment
E 6
I 6
.Ar environment
E 6
of subsequently-executed commands.
D 2
If no arguments are given then a list of
exportable names is printed.
E 2
I 2
If no arguments are given, a list of exportable names is printed.
E 2
D 6
.TP
\fBlogin\fR \*(OK\fIarg\fR ...\*(CK
E 6
I 6
D 10
.Tp Cx Ic login
.Cx \&\ \&
.Op Ar arg ...
.Cx
E 6
D 2
Equivalent to `exec login arg ...'.
E 2
I 2
Equivalent to 'exec login arg ...'.
E 2
D 6
.TP
D 2
\fBnewgrp\fR \*(OK\fIarg \fR...\*(CK
Equivalent to `exec newgrp arg ...'.
.TP
E 2
.BI read \ name\ ...
E 6
I 6
.Tp Cx Ic read
.Cx \&\ \&
.Ar name \&...
.Cx
E 10
I 10
.It Ic login Op Ar arg ... 
Equivalent to
.Ql exec login arg ... .
.It Ic read Ar name \&... 
E 10
E 6
One line is read from the standard input;
D 2
successive words of the input are assigned to the
variables
E 2
I 2
successive words of the input are assigned to the variables
E 2
D 6
.I name
E 6
I 6
.Ar name
E 6
D 2
in order,
with leftover words to the last variable.
E 2
I 2
in order, with leftover words to the last variable.
E 2
The return code is 0 unless the end-of-file is encountered.
D 6
.TP
\fBreadonly\fR \*(OK\fIname \fR...\*(CK
E 6
I 6
D 10
.Tp Cx Ic readonly
.Cx \&\ \&
.Op Ar name \&...
.Cx
E 10
I 10
.It Ic readonly Op Ar name \&... 
E 10
E 6
The given names are marked readonly and
the values of the these names may not be changed
by subsequent assignment.
D 2
If no arguments are given then a list
of all readonly names is printed.
E 2
I 2
If no arguments are given, a list of all readonly names is printed.
E 2
D 6
.TP
\fBset\fR \*(OK\fB\-eknptuvx\fR \*(OK\fIarg \fR...\*(CK\*(CK
.RS
.PD 0
.TP 3m
.B \-e
D 2
If non interactive then exit immediately if a command fails.
E 2
I 2
If non interactive, exit immediately if a command fails.
E 2
.TP
.B \-k
All keyword arguments are placed in the environment for a command,
not just those that precede the command name.
.TP
.B \-n
Read commands but do not execute them.
.TP
.B \-t
Exit after reading and executing one command.
.TP
.B \-u
Treat unset variables as an error when substituting.
.TP
.B \-v
Print shell input lines as they are read.
.TP
.B \-x
Print commands and their arguments as they are executed.
.TP
.B \-
Turn off the
.B \-x
and
.B \-v
options.
.PD
.LP
These flags can also be used upon invocation of the shell.
E 6
I 6
D 10
.Tp Cx Ic set
.Cx \&\ \&
.Op Fl eknptuvx
.Cx \&\ \&
.Op Ar arg ...
.Cx
E 10
I 10
.It Xo
.Ic set Oo Fl eknptuvx Op Ar arg ... 
.Oc
.Xc
E 10
The set flags are described in the options section at the beginning
of this man page.
E 6
The current set of flags may be found in
D 6
.BR $\- .
.LP
Remaining arguments are positional
E 6
I 6
.Ic \&$\- .
.Pp
Remaining arguments after the flag are positional
E 6
parameters and are assigned, in order, to
D 6
.SM
.BR $1 ,
.SM
.BR $2 ,
E 6
I 6
.Ic \&$1 ,
.Ic \&$2 ,
E 6
D 2
etc.
If no arguments are given then the values
of all names are printed.
E 2
I 2
etc.  If no arguments are given, the values of all names are printed.
E 2
D 6
.RE
.TP
.B shift
E 6
I 6
D 10
.Tp Ic shift
E 10
I 10
.It Ic shift
E 10
E 6
The positional parameters from
D 6
.SM
.BR $2 ...
E 6
I 6
.Ic \&$2 ...
E 6
are renamed
D 6
.SM
.BR $1 ...
.TP
.B times
E 6
I 6
.Ic $1 ...
D 10
.Tp Ic times
E 10
I 10
.It Ic times
E 10
E 6
D 2
Print the accumulated user and system times for
processes run from the shell.
E 2
I 2
Print the accumulated user and system times for processes run from the shell.
E 2
D 6
.TP
\fBtrap\fR \*(OK\fIarg\fR\*(CK \*(OK\fIn\fR\*(CK ...
.I Arg
E 6
I 6
D 10
.Tp Cx Ic trap
.Cx \&\ \&
.Op Ar arg
.Cx \&\ \&
E 10
I 10
.It Xo
.Ic trap Op Ar arg
E 10
.Op Ar n
D 10
.Cx \&\ \& \&...
.Cx
E 10
I 10
.Ar ... 
.Xc
E 10
.Ar Arg
E 6
D 2
is a command to be read and executed when the shell
receives signal(s)
E 2
I 2
is a command to be read and executed when the shell receives signal(s)
E 2
D 6
.I n.
E 6
I 6
.Ar n .
E 6
(Note that
D 6
.I arg
E 6
I 6
.Ar arg
E 6
D 2
is scanned once when
the trap is set and once when the trap
is taken.)
Trap commands are executed in order of signal number.
If
E 2
I 2
is scanned once when the trap is set and once when the trap is taken.)
Trap commands are executed in order of signal number.  If
E 2
D 6
.I arg
E 6
I 6
.Ar arg
E 6
D 2
is absent then all trap(s)
E 2
I 2
is absent, all trap(s)
E 2
D 6
.I n
E 6
I 6
.Ar n
E 6
D 2
are reset
to their original values.
E 2
I 2
are reset to their original values.
E 2
If
D 6
.I arg
E 6
I 6
.Ar arg
E 6
is the null
D 2
string then this signal is ignored by the shell and by invoked commands.
E 2
I 2
string, this signal is ignored by the shell and by invoked commands.
E 2
If
D 6
.I n
E 6
I 6
.Ar n
E 6
D 2
is 0 then the command
E 2
I 2
is 0, the command
E 2
D 6
.I arg
E 6
I 6
.Ar arg
E 6
D 2
is executed
on exit from the shell,
otherwise upon receipt of signal
E 2
I 2
is executed on exit from the shell, otherwise upon receipt of signal
E 2
D 6
.I n
E 6
I 6
.Ar n
E 6
as numbered in
D 2
.IR signal (2).
E 2
I 2
D 6
.IR sigvec (2).
E 2
.I Trap
E 6
I 6
.Xr sigvec  2  .
.Ic Trap
E 6
D 2
with no arguments prints a list
of commands associated with each signal number.
E 2
I 2
with no arguments prints a list of commands associated with each signal number.
E 2
D 6
.TP
\fBumask \fR[ \fInnn\fR ]
E 6
I 6
D 10
.Tp Cx Ic umask
.Cx \&\ \&
.Op Ar nnn
.Cx
E 10
I 10
.It Ic umask Op Ar nnn 
E 10
E 6
D 2
The user file creation mask is set to
the octal value
E 2
I 2
The user file creation mask is set to the octal value
E 2
D 6
.I nnn
E 6
I 6
.Ar nnn
E 6
(see
D 6
.IR umask (2)).
E 6
I 6
.Xr umask  2  ) .
E 6
If
D 6
.I nnn
E 6
I 6
.Ar nnn
E 6
is omitted, the current value of the mask is printed.
D 6
.TP
\fBwait\fP \*(OK\fIn\fP\*(CK
E 6
I 6
D 10
.Tp Cx Ic wait
.Cx \&\ \&
.Op Ar n
.Cx
E 10
I 10
.It Ic wait Op Ar n 
E 10
E 6
D 2
Wait for the specified process and
report its termination status.
If
E 2
I 2
Wait for the specified process and report its termination status.  If
E 2
D 6
.I n
E 6
I 6
.Ar n
E 6
D 2
is not given then all currently active child processes are waited for.
The return code from this command is that of
the process waited for.
E 2
I 2
is not given, all currently active child processes are waited for.
The return code from this command is that of the process waited for.
E 2
D 6
.PD
.LP
.PP
.B Invocation.
.br
If the first character of argument zero is
.BR \- ,
commands are read from
.BR \s-2$HOME\s0/.\|profile ,
if such a file exists.
Commands are then read as described below.
D 2
The following flags are interpreted by the shell
when it is invoked.
E 2
I 2
The following flags are interpreted by the shell when it is invoked.
E 2
.PD 0
.TP 11n
.BI \-c \ string
If the
.B \-c
D 2
flag is present then
commands are read from
E 2
I 2
flag is present, commands are read from
E 2
.I string\|.
.TP 11n
.B \-s
If the
.B \-s
D 2
flag is present or if no
arguments remain
E 2
I 2
flag is present or if no arguments remain
E 2
then commands are read from the standard input.
D 2
Shell output is written to
file descriptor 2.
E 2
I 2
Shell output is written to file descriptor 2.
E 2
.TP 11n
.B \-i
If the
.B \-i
flag is present or
if the shell input and output are attached to a terminal (as told by
.IR gtty )
then this shell is
.I interactive.
D 2
In this case the terminate signal
SIGTERM (see
.IR signal (2))
is ignored (so that `kill 0'
E 2
I 2
In this case the terminate signal SIGTERM (see
.IR sigvec (2))
is ignored (so that 'kill 0'
E 2
does not kill an interactive shell) and the interrupt signal
D 2
SIGINT is caught and ignored
(so that
E 2
I 2
SIGINT is caught and ignored (so that
E 2
.B wait
D 2
is interruptable).
E 2
I 2
is interruptible).
E 2
In all cases SIGQUIT is ignored by the shell.
.PD
.LP
The remaining flags and arguments are described under the
.B set
command.
.SH FILES
.RB $HOME/ . \^profile
.br
/tmp/sh*
.br
/dev/null
.SH SEE ALSO
csh(1),
test(1),
D 2
exec(2),
E 2
I 2
execve(2),
environ(7)
E 2
.SH DIAGNOSTICS
E 6
I 6
D 10
.Tp
E 10
I 10
.El
E 10
.Sh FILES
D 10
.Dw (longest file name here)
.Di L
.Dp Pa $HOME/.profile
.Dp Pa /tmp/sh*
.Dp Pa /dev/null
.Dp
E 10
I 10
.Bl -tag -width xhome/.profile -compact
.It Pa $HOME/.profile
User customized environment variables.
.It Pa /tmp/sh*
Default temporary file directory.
.It Pa /dev/null
Bit bucket.
.El
E 10
.Sh SEE ALSO
.Xr csh 1 ,
.Xr test 1 ,
.Xr execve 2 ,
.Xr environ 7
.Sh DIAGNOSTICS
E 6
D 2
Errors detected by the shell, such as syntax errors
cause the shell
E 2
I 2
Errors detected by the shell, such as syntax errors cause the shell
E 2
to return a non zero exit status.
If the shell is being used non interactively
then execution of the shell file is abandoned.
Otherwise, the shell returns the exit status of
the last command executed (see also
D 6
.BR exit ).
E 6
I 6
.Ic exit  ) .
.Sh HISTORY
The
D 10
.Nm Sh
D 9
shell appeared in Version 6 AT&Y UNIX.
E 9
I 9
shell appeared in Version 6 AT&T UNIX.
E 9
E 6
.SH BUGS
E 10
I 10
.Nm sh
shell appeared in
.At v6 .
.Sh BUGS
E 10
D 2
IF \*(LT\*(LT is used to provide standard input to an asynchronous
process invoked by &,
the shell gets mixed up about naming the input document.
E 2
I 2
D 6
If \*(LT\*(LT is used to provide standard input to an asynchronous
process invoked by &, the shell gets mixed up about naming the input document.
E 2
A garbage file /tmp/sh* is created, and the shell complains about
E 6
I 6
If
.Ic \&<\&<
is used to provide standard input to an asynchronous
D 8
process invoked by
E 8
I 8
process invoked by
E 8
.Ic \&& ,
the shell gets mixed up about naming the input document.
A garbage file
.Pa /tmp/sh*
is created, and the shell complains about
E 6
not being able to find the file by another name.
I 6
D 10
.\" .Sh ENVIRONMENT
.\" /usr/src/bin/sh/defs.h:STRING		*setenv();
.\" /usr/src/bin/sh/name.c:STRING	*setenv()
.\" /usr/src/bin/sh/service.c:		xecenv=setenv();
E 10
E 6
E 1
