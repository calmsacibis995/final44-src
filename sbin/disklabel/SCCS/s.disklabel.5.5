h14478
s 00004/00000/00358
d D 8.2 94/05/06 17:13:43 mckusick 9 8
c add history
e
s 00002/00002/00360
d D 8.1 93/06/05 10:50:43 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00036/00005/00326
d D 6.7 93/03/09 18:51:05 mckusick 7 6
c update for HP300 from Mike Hibler
e
s 00128/00123/00203
d D 6.6 91/05/10 13:28:32 cael 6 5
c mdoc version three
e
s 00001/00011/00325
d D 6.5 90/06/23 18:01:15 trent 5 4
c new copyright notice
e
s 00017/00004/00319
d D 6.4 88/07/09 11:36:54 bostic 4 3
c install approved copyright notice
e
s 00248/00001/00075
d D 6.3 88/07/05 17:24:04 mckusick 3 2
c improve formating
e
s 00034/00000/00042
d D 6.2 88/06/13 17:58:49 karels 2 1
c add info about ioctl's
e
s 00042/00000/00000
d D 6.1 87/06/18 21:14:11 karels 1 0
c from Symmetric, with update
e
u
U
t
T
I 1
D 4
.\" from Symmetric Computer Systems.
.\" Modifications Copyright (c) 1987 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 6
.\" Copyright (c) 1987 Regents of the University of California.
E 6
I 6
D 8
.\" Copyright (c) 1987, 1991 Regents of the University of California.
E 6
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1987, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Symmetric Computer Systems.
.\"
D 5
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 5
I 5
D 6
.\" %sccs.include.redist.man%
E 6
I 6
.\" %sccs.include.redist.roff%
E 6
E 5
E 4
.\"
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\"     %W% (Berkeley) %G%
E 6
.\"
D 6
.TH DISKLABEL 5 "%Q%"
.UC 7
.SH NAME
disklabel \- disk pack label
.SH SYNOPSIS
.B #include <sys/disklabel.h>
.SH DESCRIPTION
E 6
I 6
.Dd %Q%
.Dt DISKLABEL 5
.Os
.Sh NAME
.Nm disklabel
.Nd disk pack label
.Sh SYNOPSIS
.Fd #include <sys/disklabel.h>
.Sh DESCRIPTION
E 6
Each disk or disk pack on a system may contain a disk label
which provides detailed information
about the geometry of the disk and the partitions into which the disk
is divided.
It should be initialized when the disk is formatted,
and may be changed later with the
D 6
.IR disklabel (8)
E 6
I 6
.Xr disklabel 8
E 6
program.
This information is used by the system disk driver and by the bootstrap
program to determine how to program the drive
and where to find the filesystems on the disk partitions.
Additional information is used by the filesystem in order
to use the disk most efficiently and to locate important filesystem information.
I 2
The description of each partition contains an identifier for the partition
type (standard filesystem, swap area, etc.).
The filesystem updates the in-core copy of the label if it contains
incomplete information about the filesystem.
D 6
.PP
E 6
I 6
.Pp
E 6
E 2
The label is located in sector number
D 6
.I LABELSECTOR
E 6
I 6
.Dv LABELSECTOR
E 6
of the drive, usually sector 0 where it may be found
without any information about the disk geometry.
It is at an offset
D 6
.I LABELOFFSET
E 6
I 6
.Dv LABELOFFSET
E 6
from the beginning of the sector, to allow room for the initial bootstrap.
I 2
The disk sector containing the label is normally made read-only
so that it is not accidentally overwritten by pack-to-pack copies
or swap operations;
D 6
the DIOCWLABEL
.IR ioctl ,
E 6
I 6
the
.Dv DIOCWLABEL
.Xr ioctl 2 ,
E 6
which is done as needed by the
D 6
.IR disklabel (8)
E 6
I 6
.Xr disklabel
E 6
program.
D 6
.PP
A copy of the in-core label for a disk can be obtained with the DIOCGDINFO
.IR ioctl ;
E 6
I 6
.Pp
A copy of the in-core label for a disk can be obtained with the
.Dv DIOCGDINFO
.Xr ioctl ;
E 6
this works with a file descriptor for a block or character (``raw'') device
for any partition of the disk.
D 6
The in-core copy of the label is set by the DIOCSDINFO
.IR ioctl .
E 6
I 6
The in-core copy of the label is set by the 
.Dv DIOCSDINFO
.Xr ioctl .
E 6
The offset of a partition cannot generally be changed while it is open,
nor can it be made smaller while it is open.
One exception is that any change is allowed if no label was found
on the disk, and the driver was able to construct only a skeletal label
without partition information.
D 6
Finally, the DIOCWDINFO
.I ioctl
E 6
I 6
Finally, the 
.Dv DIOCWDINFO
.Xr ioctl
E 6
operation sets the in-core label and then updates the on-disk label;
there must be an existing label on the disk for this operation to succeed.
Thus, the initial label for a disk or disk pack must be installed
by writing to the raw disk.
All of these operations are normally done using
D 6
.IR disklabel (8).
.PP
E 6
I 6
.Xr disklabel .
.Pp
E 6
E 2
The format of the disk label, as specified in
D 6
.RI < sys/disklabel.h >,
E 6
I 6
.Aw Pa sys/disklabel.h ,
E 6
is
D 6
.nf
.DT
E 6
I 6
.Bd -literal
E 6
D 3
.so /usr/include/sys/disklabel.h
E 3
I 3
/*
D 6
 * Disk description table, see disktab(5)
 */
E 6
I 6
* Disk description table, see disktab(5)
*/
E 6
#define	DISKTAB		"/etc/disktab"

/*
D 6
 * Each disk has a label which includes information about the hardware
 * disk geometry, filesystem partitions, and drive specific information.
 * The label is in block 0 or 1, possibly offset from the beginning
 * to leave room for a bootstrap, etc.
 */
.ta \w'#define  'u +\w'MAXPARTITIONS  'u +\w'((u_long) 0x82564557)  'u
E 6
I 6
* Each disk has a label which includes information about the hardware
* disk geometry, filesystem partitions, and drive specific information.
* The label is in block 0 or 1, possibly offset from the beginning
* to leave room for a bootstrap, etc.
*/

E 6
D 7
#define	LABELSECTOR	0	/* sector containing label */
#define LABELOFFSET	64	/* offset of label in sector */
E 7
I 7
#ifndef	LABELSECTOR
#define LABELSECTOR	0			/* sector containing label */
#endif

#ifndef	LABELOFFSET
#define LABELOFFSET	64			/* offset of label in sector */
#endif

E 7
#define DISKMAGIC	((u_long) 0x82564557)	/* The disk magic number */
#ifndef MAXPARTITIONS
#define	MAXPARTITIONS	8
#endif

D 6

.ta \w'struct  'u +\w'u_long  'u +\w'd_packname[16]  'u
E 6
#ifndef LOCORE
struct disklabel {
	u_long	d_magic;	/* the magic number */
	short	d_type;		/* drive type */
	short	d_subtype;	/* controller/d_type specific */
	char	d_typename[16];	/* type name, e.g. "eagle" */
	/* 
D 6
	 * d_packname contains the pack identifier and is returned when
	 * the disklabel is read off the disk or in-core copy.
	 * d_boot0 and d_boot1 are the (optional) names of the
	 * primary (block 0) and secondary (block 1-15) bootstraps
	 * as found in /usr/mdec.  These are returned when using
	 * getdiskbyname(3) to retrieve the values from /etc/disktab.
	 */
E 6
I 6
	* d_packname contains the pack identifier and is returned when
	* the disklabel is read off the disk or in-core copy.
	* d_boot0 and d_boot1 are the (optional) names of the
	* primary (block 0) and secondary (block 1-15) bootstraps
	* as found in /usr/mdec.  These are returned when using
	* getdiskbyname(3)
	to retrieve the values from /etc/disktab.
	*/
E 6
#if defined(KERNEL) || defined(STANDALONE)
	char	d_packname[16];		/* pack identifier */ 
#else
D 6
.ta \w'struct  'u +\w'struct  'u +\w'struct {  'u +\w'un_d_packname[16]  'u
E 6
	union {
		char	un_d_packname[16];	/* pack identifier */ 
		struct {
			char *un_d_boot0;	/* primary bootstrap name */
			char *un_d_boot1;	/* secondary bootstrap name */
		} un_b; 
	} d_un; 
D 6
.ta \w'#define  'u +\w'd_packname  'u
E 6
I 6

E 6
#define d_packname	d_un.un_d_packname
#define d_boot0		d_un.un_b.un_d_boot0
#define d_boot1		d_un.un_b.un_d_boot1
#endif	/* ! KERNEL or STANDALONE */
D 6
.ta \w'struct  'u +\w'u_short  'u +\w'd_d_drivedata[NDDATA]  'u
		/* disk geometry: */
E 6
I 6

	/* disk geometry: */
E 6
	u_long	d_secsize;	/* # of bytes per sector */
	u_long	d_nsectors;	/* # of data sectors per track */
	u_long	d_ntracks;	/* # of tracks per cylinder */
	u_long	d_ncylinders;	/* # of data cylinders per unit */
	u_long	d_secpercyl;	/* # of data sectors per cylinder */
	u_long	d_secperunit;	/* # of data sectors per unit */
	/*
D 6
	 * Spares (bad sector replacements) below
	 * are not counted in d_nsectors or d_secpercyl.
	 * Spare sectors are assumed to be physical sectors
	 * which occupy space at the end of each track and/or cylinder.
	 */
E 6
I 6
	* Spares (bad sector replacements) below
	* are not counted in d_nsectors or d_secpercyl.
	* Spare sectors are assumed to be physical sectors
	* which occupy space at the end of each track and/or cylinder.
	*/
E 6
	u_short	d_sparespertrack;	/* # of spare sectors per track */
	u_short	d_sparespercyl;	/* # of spare sectors per cylinder */
	/*
D 6
	 * Alternate cylinders include maintenance, replacement,
	 * configuration description areas, etc.
	 */
E 6
I 6
	* Alternate cylinders include maintenance, replacement,
	* configuration description areas, etc.
	*/
E 6
	u_long	d_acylinders;	/* # of alt. cylinders per unit */

		/* hardware characteristics: */
	/*
D 6
	 * d_interleave, d_trackskew and d_cylskew describe perturbations
	 * in the media format used to compensate for a slow controller.
	 * Interleave is physical sector interleave, set up by the formatter
	 * or controller when formatting.  When interleaving is in use,
	 * logically adjacent sectors are not physically contiguous,
	 * but instead are separated by some number of sectors.
	 * It is specified as the ratio of physical sectors traversed
	 * per logical sector.  Thus an interleave of 1:1 implies contiguous
	 * layout, while 2:1 implies that logical sector 0 is separated
	 * by one sector from logical sector 1.
	 * d_trackskew is the offset of sector 0 on track N
	 * relative to sector 0 on track N-1 on the same cylinder.
	 * Finally, d_cylskew is the offset of sector 0 on cylinder N
	 * relative to sector 0 on cylinder N-1.
	 */
E 6
I 6
	* d_interleave, d_trackskew and d_cylskew describe perturbations
	* in the media format used to compensate for a slow controller.
	* Interleave is physical sector interleave, set up by the formatter
	* or controller when formatting.  When interleaving is in use,
	* logically adjacent sectors are not physically contiguous,
	* but instead are separated by some number of sectors.
	* It is specified as the ratio of physical sectors traversed
	* per logical sector.  Thus an interleave of 1:1 implies contiguous
	* layout, while 2:1 implies that logical sector 0 is separated
	* by one sector from logical sector 1.
	* d_trackskew is the offset of sector 0 on track N
	* relative to sector 0 on track N-1 on the same cylinder.
	* Finally, d_cylskew is the offset of sector 0 on cylinder N
	* relative to sector 0 on cylinder N-1.
	*/
E 6
	u_short	d_rpm;	/* rotational speed */
	u_short	d_interleave;	/* hardware sector interleave */
	u_short	d_trackskew;	/* sector 0 skew, per track */
	u_short	d_cylskew;	/* sector 0 skew, per cylinder */
	u_long	d_headswitch;	/* head switch time, usec */
	u_long	d_trkseek;	/* track-to-track seek, usec */
	u_long	d_flags;	/* generic flags */
#define NDDATA 5
	u_long	d_drivedata[NDDATA];	/* drive-type specific information */
#define NSPARE 5
	u_long	d_spare[NSPARE];	/* reserved for future use */
	u_long	d_magic2;	/* the magic number (again) */
	u_short	d_checksum;	/* xor of data incl. partitions */

D 6
			/* filesystem and partition information: */
E 6
I 6
	/* filesystem and partition information: */
E 6
	u_short	d_npartitions;	/* number of partitions in following */
	u_long	d_bbsize;	/* size of boot area at sn0, bytes */
	u_long	d_sbsize;	/* max size of fs superblock, bytes */
	struct	partition {	/* the partition table */
D 6
.ta \w'struct  'u +\w'struct  'u +\w'u_short  'u +\w'd_d_drivedata[NDDATA]  'u
E 6
		u_long	p_size;	/* number of sectors in partition */
		u_long	p_offset;	/* starting sector */
		u_long	p_fsize;	/* filesystem basic fragment size */
		u_char	p_fstype;	/* filesystem type, see below */
		u_char	p_frag;	/* filesystem fragments per block */
I 7
		union {
			u_short	cpg;	/* UFS: FS cylinders per group */
			u_short	sgs;	/* LFS: FS segment shift */
		} __partition_u1;
#define	p_cpg	__partition_u1.cpg
#define	p_sgs	__partition_u1.sgs
E 7
		u_short	p_cpg;	/* filesystem cylinders per group */
D 6
.ta \w'struct  'u +\w'u_short  'u +\w'd_d_drivedata[NDDATA]  'u
E 6
	} d_partitions[MAXPARTITIONS];	/* actually may be more */
};

/* d_type values: */
D 6
.ta \w'#define  'u +\w'DTYPE_FLOPPY  'u +\w'0x10  'u
E 6
#define	DTYPE_SMD	1	/* SMD, XSMD; VAX hp/up */
#define	DTYPE_MSCP	2	/* MSCP */
#define	DTYPE_DEC	3	/* other DEC (rk, rl) */
#define	DTYPE_SCSI	4	/* SCSI */
#define	DTYPE_ESDI	5	/* ESDI interface */
#define	DTYPE_ST506	6	/* ST506 etc. */
I 7
#define	DTYPE_HPIB	7	/* CS/80 on HP-IB */
#define	DTYPE_HPFL	8	/* HP Fiber-link */
E 7
#define	DTYPE_FLOPPY	10	/* floppy */

#ifdef DKTYPENAMES
static char *dktypenames[] = {
	"unknown",
	"SMD",
	"MSCP",
	"old DEC",
	"SCSI",
	"ESDI",
D 7
	"type 6",
	"type 7",
	"type 8",
E 7
I 7
	"ST506",
	"HP-IB",
	"HP-FL",
E 7
	"type 9",
	"floppy",
	0
};
#define DKMAXTYPES	(sizeof(dktypenames) / sizeof(dktypenames[0]) - 1)
#endif

/*
D 6
 * Filesystem type and version.
 * Used to interpret other filesystem-specific
 * per-partition information.
 */
E 6
I 6
* Filesystem type and version.
* Used to interpret other filesystem-specific
* per-partition information.
*/
E 6
#define	FS_UNUSED	0	/* unused */
D 6
#define	FS_SWAP	1	/* swap */
#define	FS_V6	2	/* Sixth Edition */
#define	FS_V7	3	/* Seventh Edition */
#define	FS_SYSV	4	/* System V */
#define	FS_V71K	5	/* V7 with 1K blocks (4.1, 2.9) */
#define	FS_V8	6	/* Eighth Edition, 4K blocks */
E 6
I 6
#define	FS_SWAP		1	/* swap */
#define	FS_V6		2	/* Sixth Edition */
#define	FS_V7		3	/* Seventh Edition */
#define	FS_SYSV		4	/* System V */
#define	FS_V71K		5	/* V7 with 1K blocks (4.1, 2.9) */
#define	FS_V8		6	/* Eighth Edition, 4K blocks */
E 6
#define	FS_BSDFFS	7	/* 4.2BSD fast file system */
I 7
#define	FS_MSDOS	8	/* MSDOS file system */
#define	FS_BSDLFS	9	/* 4.4BSD log-structured file system */
#define	FS_OTHER	10	/* in use, but unknown/unsupported */
#define	FS_HPFS		11	/* OS/2 high-performance file system */
#define	FS_ISO9660	12	/* ISO 9660, normally CD-ROM */
#define	FS_BOOT		13	/* partition contains bootstrap */
E 7

#ifdef	DKTYPENAMES
static char *fstypenames[] = {
	"unused",
	"swap",
	"Version 6",
	"Version 7",
	"System V",
	"4.1BSD",
	"Eighth Edition",
	"4.2BSD",
I 7
	"MSDOS",
	"4.4LFS",
	"unknown",
	"HPFS",
	"ISO9660",
	"boot",
E 7
	0
};
#define FSMAXTYPES	(sizeof(fstypenames) / sizeof(fstypenames[0]) - 1)
#endif

/*
D 6
 * flags shared by various drives:
 */
E 6
I 6
* flags shared by various drives:
*/
E 6
#define	D_REMOVABLE	0x01	/* removable media */
D 6
#define	D_ECC	0x02	/* supports ECC */
E 6
I 6
#define	D_ECC		0x02	/* supports ECC */
E 6
#define	D_BADSECT	0x04	/* supports bad sector forw. */
#define	D_RAMDISK	0x08	/* disk emulator */
D 6
#define	D_CHAIN	0x10	/* can do back-back transfers */
E 6
I 6
#define	D_CHAIN		0x10	/* can do back-back transfers */
E 6

/*
D 6
 * Drive data for SMD.
 */
.ta \w'#define  'u +\w'DTYPE_FLOPPY  'u +\w'd_drivedata[1]  'u
E 6
I 6
* Drive data for SMD.
*/

E 6
#define	d_smdflags	d_drivedata[0]
D 6
#define	D_SSE	0x1	/* supports skip sectoring */
E 6
I 6
#define	D_SSE		0x1	/* supports skip sectoring */
E 6
#define	d_mindist	d_drivedata[1]
#define	d_maxdist	d_drivedata[2]
D 6
#define	d_sdist	d_drivedata[3]
E 6
I 6
#define	d_sdist		d_drivedata[3]
E 6

/*
D 6
 * Drive data for ST506.
 */
E 6
I 6
* Drive data for ST506.
*/
E 6
#define d_precompcyl	d_drivedata[0]
D 6
#define d_gap3	d_drivedata[1]	/* used only when formatting */
E 6
I 6
#define d_gap3		d_drivedata[1]	/* used only when formatting */
I 7

/*
 * Drive data for SCSI.
 */
#define	d_blind		d_drivedata[0]
E 7
E 6

#ifndef LOCORE
/*
D 6
 * Structure used to perform a format
 * or other raw operation, returning data
 * and/or register values.
 * Register identification and format
 * are device- and driver-dependent.
 */
.ta \w'struct  'u +\w'daddr_t  'u +\w'df_startblk  'u
E 6
I 6
* Structure used to perform a format
* or other raw operation, returning data
* and/or register values.
* Register identification and format
* are device- and driver-dependent.
*/
E 6
struct format_op {
	char	*df_buf;
	int	df_count;	/* value-result */
	daddr_t	df_startblk;
	int	df_reg[8];	/* result */
};

/*
D 6
 * Structure used internally to retrieve
 * information about a partition on a disk.
 */
E 6
I 6
* Structure used internally to retrieve
* information about a partition on a disk.
*/
E 6
struct partinfo {
	struct	disklabel *disklab;
	struct	partition *part;
};

/*
D 6
 * Disk-specific ioctls.
 */
		/* get and set disklabel; DIOCGPART used internally */
.ta \w'#define  'u +\w'DIOCSRETRIES  'u +\w'_IOW( d , 103, struct disklabel)  'u
#define DIOCGDINFO	_IOR('d', 101, struct disklabel)	/* get */
#define DIOCSDINFO	_IOW('d', 102, struct disklabel)	/* set */
#define DIOCWDINFO	_IOW('d', 103, struct disklabel)	/* set, update disk */
#define DIOCGPART	_IOW('d', 104, struct partinfo)	/* get partition */
E 6
I 6
* Disk-specific ioctls.
*/
	/* get and set disklabel; DIOCGPART used internally */
#define DIOCGDINFO   _IOR('d', 101, struct disklabel) /* get */
#define DIOCSDINFO   _IOW('d', 102, struct disklabel) /* set */
#define DIOCWDINFO   _IOW('d', 103, struct disklabel) /* set, update disk */
#define DIOCGPART    _IOW('d', 104, struct partinfo)  /* get partition */
E 6

/* do format operation, read or write */
#define DIOCRFORMAT	_IOWR('d', 105, struct format_op)
#define DIOCWFORMAT	_IOWR('d', 106, struct format_op)

D 6
#define DIOCSSTEP	_IOW('d', 107, int)	/* set step rate */
#define DIOCSRETRIES	_IOW('d', 108, int)	/* set # of retries */
#define DIOCWLABEL	_IOW('d', 109, int)	/* write en/disable label */
E 6
I 6
#define DIOCSSTEP	_IOW('d', 107, int) /* set step rate */
#define DIOCSRETRIES	_IOW('d', 108, int) /* set # of retries */
#define DIOCWLABEL	_IOW('d', 109, int) /* write en/disable label */
E 6

D 6
#define DIOCSBAD	_IOW('d', 110, struct dkbad)	/* set kernel dkbad */
E 6
I 6
#define DIOCSBAD	_IOW('d', 110, struct dkbad) /* set kernel dkbad */
E 6

#endif LOCORE
E 3
D 6
.SH "SEE ALSO"
disktab(5), disklabel(8)
E 6
I 6
.Ed
.Sh SEE ALSO
.Xr disktab 5 ,
.Xr disklabel 8
.Sh HISTORY
I 9
The
.Nm disklabel
function was introduced in
.Bx 4.3 Tahoe .
E 9
E 6
E 1
