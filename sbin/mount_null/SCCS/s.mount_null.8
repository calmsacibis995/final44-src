h57017
s 00002/00002/00204
d D 8.6 95/05/01 22:01:16 mckusick 10 9
c more descriptive title
e
s 00017/00005/00189
d D 8.5 95/05/01 21:58:25 mckusick 9 8
c describe use as a loopback filesystem
e
s 00005/00005/00189
d D 8.4 94/04/19 08:34:50 bostic 8 7
c spell
e
s 00025/00011/00169
d D 8.3 94/03/27 09:13:05 bostic 7 6
c Jan-Simon Pendry's and my new mount code
e
s 00003/00003/00177
d D 8.2 93/12/11 23:43:13 mckusick 6 5
c copyediting for Usenix manuals
e
s 00002/00002/00178
d D 8.1 93/06/09 19:07:55 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00003/00178
d D 5.3 93/06/09 19:07:49 bostic 4 2
c fixed the under development line
e
s 00002/00002/00179
d R 8.1 93/06/05 11:03:11 bostic 3 2
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00151/00019/00030
d D 5.2 92/07/11 15:26:38 heideman 2 1
c 
e
s 00049/00000/00000
d D 5.1 92/07/09 13:47:37 heideman 1 0
c date and time created 92/07/09 13:47:37 by heideman
e
u
U
t
T
I 1
.\"
D 5
.\" Copyright (c) 1992 The Regents of the University of California
D 2
.\" Copyright (c) 1990, 1992 Jan-Simon Pendry
E 2
.\" All rights reserved.
E 5
I 5
D 7
.\" Copyright (c) 1992, 1993
E 7
I 7
.\" Copyright (c) 1992, 1993, 1994
E 7
.\"	The Regents of the University of California.  All rights reserved.
E 5
.\"
.\" This code is derived from software donated to Berkeley by
D 2
.\" Jan-Simon Pendry and the null layer from John Heidemann of
.\" the UCLA Ficus proejct.
E 2
I 2
.\" John Heidemann of the UCLA Ficus project.
E 2
.\"
.\"
.\" %sccs.include.redist.roff%
.\"
.\"     %W% (Berkeley) %G%
.\"
.\"
.Dd %Q%
.Dt MOUNT_NULL 8
.Os BSD 4.4
.Sh NAME
.Nm mount_null
I 9
D 10
.Nd mount a virtual copy of an existing filesystem sub-tree;
E 9
D 2
.Nd mount a null layer, making a virtual copy of an existing filesystem sub-tree
E 2
I 2
.Nd demonstrate the use of a null file system layer
E 10
I 10
.Nd mount a loopback filesystem sub-tree;
demonstrate the use of a null file system layer
E 10
E 2
.Sh SYNOPSIS
.Nm mount_null
D 7
.Op Fl F Ar fsoptions
.Ar target mount-point
I 2
.\"
.\"
E 7
I 7
.Op Fl o Ar options
.Ar target
.Ar mount-point
E 7
E 2
.Sh DESCRIPTION
The
.Nm mount_null
D 2
command makes a sub-tree of an existing filesystem visible
in another part of the global filesystem namespace.
This allows existing files and directories to be accessed
using a different pathname.
E 2
I 2
command creates a
null layer, duplicating a sub-tree of the file system
name space under another part of the global file system namespace.
D 9
In this respect, it is
similar to the loopback file system (see
.Xr mount_lofs 8 ) .
It differs from
D 7
the loopback file system in two respects:  it is implemented using
E 7
I 7
the loopback file system in two respects: it is implemented using
E 9
I 9
This allows existing files and directories to be accessed
using a different pathname.
.Pp
The primary differences between a virtual copy of the filesystem
and a symbolic link are that
.Xr getcwd 3
functions correctly in the virtual copy, and that other filesystems
may be mounted on the virtual copy without affecting the original.
A different device number for the virtual copy is returned by
.Xr stat 2 ,
but in other respects it is indistinguishable from the original.
.Pp
The
.Nm mount_null
filesystem differs from a traditional
loopback file system in two respects: it is implemented using
E 9
E 7
a stackable layers techniques, and it's 
.Do
null-node
.Dc s
stack above
all lower-layer vnodes, not just over directory vnodes.
E 2
.Pp
D 2
Virtual file system sub-trees created by the null layer should
be identical to those created by the loopback
The virtual copy of a file system sub-tree created by the null
layer should be nearly identical to one created by
.Xr mount_lofs 8 .
The purpose of the null layer is to serve as a basis for future
layer development.
E 2
I 2
D 7
The null layer has two purposes.  First, it serves as a demonstration
of layering by proving a layer which does nothing.  (It actually
does everything the loopback file system does, which is slightly
more than nothing.)  Second, the null layer can serve as a prototype
layer.  Since it provides all necessary layer framework,
E 7
I 7
The options are as follows:
.Bl -tag -width indent
.It Fl o
Options are specified with a
.Fl o
flag followed by a comma separated string of options.
See the
.Xr mount 8
man page for possible options and their meanings.
.El
.Pp
The null layer has two purposes.
First, it serves as a demonstration of layering by proving a layer
which does nothing.
(It actually does everything the loopback file system does,
which is slightly more than nothing.)
Second, the null layer can serve as a prototype layer.
Since it provides all necessary layer framework,
E 7
new file system layers can be created very easily be starting
with a null layer.
E 2
.Pp
D 2
An example of a layer constructed from the null layer is
the umap layer (see
.Xr mount_umap 8 ).
E 2
I 2
The remainder of this man page examines the null layer as a basis
for constructing new layers.
.\"
.\"
.Sh INSTANTIATING NEW NULL LAYERS
New null layers are created with 
.Xr mount_null 8 .
.Xr Mount_null 8
takes two arguments, the pathname
of the lower vfs (target-pn) and the pathname where the null
layer will appear in the namespace (mount-point-pn).  After
the null layer is put into place, the contents
of target-pn subtree will be aliased under mount-point-pn.
.\"
.\"
.Sh OPERATION OF A NULL LAYER
The null layer is the minimum file system layer,
simply bypassing all possible operations to the lower layer
for processing there.  The majority of its activity centers
on the bypass routine, though which nearly all vnode operations
pass.
.Pp
The bypass routine accepts arbitrary vnode operations for
handling by the lower layer.  It begins by examing vnode
operation arguments and replacing any null-nodes by their
D 6
lower-layer equivlants.  It then invokes the operation
E 6
I 6
D 8
lower-layer equivalants.  It then invokes the operation
E 8
I 8
lower-layer equivalents.  It then invokes the operation
E 8
E 6
on the lower layer.  Finally, it replaces the null-nodes
D 6
in the arguments and, if a vnode is return by the operation,
E 6
I 6
in the arguments and, if a vnode is returned by the operation,
E 6
stacks a null-node on top of the returned vnode.
.Pp
Although bypass handles most operations, 
.Em vop_getattr , 
.Em vop_inactive ,
.Em vop_reclaim ,
and
.Em vop_print
are not bypassed.
.Em Vop_getattr
must change the fsid being returned.
.Em Vop_inactive
and vop_reclaim are not bypassed so that
they can handle freeing null-layer specific data.
.Em Vop_print
is not bypassed to avoid excessive debugging
information.
.\"
.\"
.Sh INSTANTIATING VNODE STACKS
Mounting associates the null layer with a lower layer,
in effect stacking two VFSes.  Vnode stacks are instead
created on demand as files are accessed.
.Pp
The initial mount creates a single vnode stack for the
root of the new null layer.  All other vnode stacks
are created as a result of vnode operations on
this or other null vnode stacks.
.Pp
D 8
New vnode stacks come into existance as a result of
E 8
I 8
New vnode stacks come into existence as a result of
E 8
an operation which returns a vnode.  
The bypass routine stacks a null-node above the new
vnode before returning it to the caller.
.Pp
For example, imagine mounting a null layer with
.Bd -literal -offset indent
mount_null /usr/include /dev/layer/null
.Ed
D 8
Chainging directory to 
E 8
I 8
Changing directory to 
E 8
.Pa /dev/layer/null
will assign
the root null-node (which was created when the null layer was mounted).
Now consider opening 
.Pa sys .
A vop_lookup would be
done on the root null-node.  This operation would bypass through
to the lower layer which would return a vnode representing 
the UFS 
.Pa sys .
Null_bypass then builds a null-node
aliasing the UFS 
.Pa sys
and returns this to the caller.
Later operations on the null-node 
.Pa sys
will repeat this 
process when constructing other vnode stacks.
.\"
.\"
.Sh CREATING OTHER FILE SYSTEM LAYERS
One of the easiest ways to construct new file system layers is to make
a copy of the null layer, rename all files and variables, and
D 8
then begin modifing the copy.  Sed can be used to easily rename
E 8
I 8
then begin modifyng the copy.  Sed can be used to easily rename
E 8
all variables.
.Pp
The umap layer is an example of a layer descended from the 
null layer.
.\"
.\"
.Sh INVOKING OPERATIONS ON LOWER LAYERS
There are two techniques to invoke operations on a lower layer 
when the operation cannot be completely bypassed.  Each method
is appropriate in different situations.  In both cases,
it is the responsibility of the aliasing layer to make
the operation arguments "correct" for the lower layer
by mapping an vnode arguments to the lower layer.
.Pp
The first approach is to call the aliasing layer's bypass routine.
This method is most suitable when you wish to invoke the operation
D 6
currently being hanldled on the lower layer.  It has the advantage
E 6
I 6
currently being handled on the lower layer.  It has the advantage
E 6
the the bypass routine already must do argument mapping.
An example of this is 
.Em null_getattrs
in the null layer.
.Pp
A second approach is to directly invoked vnode operations on
the lower layer with the
.Em VOP_OPERATIONNAME
interface.
The advantage of this method is that it is easy to invoke
arbitrary operations on the lower layer.  The disadvantage
D 8
is that vnodes arguments must be manualy mapped.
E 8
I 8
is that vnodes arguments must be manually mapped.
E 8
.\"
.\"
.Sh SEE ALSO
I 7
.Xr mount 8
.sp
E 7
UCLA Technical Report CSD-910056,
.Em "Stackable Layers: an Architecture for File System Development" .
E 2
.Sh HISTORY
The
D 2
loopback filesystem
E 2
I 2
D 4
null file system layer
E 2
is
.Ud
E 4
I 4
.Nm mount_null
utility first appeared in 4.4BSD.
E 4
E 1
