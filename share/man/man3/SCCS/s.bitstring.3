h47845
s 00002/00002/00151
d D 8.1 93/07/19 11:13:59 bostic 9 8
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/00151
d D 5.6 93/07/19 11:13:46 bostic 8 6
c the bit_test() macro returns non-zero if set and zero if zero
c From: abaddon@abyss.demon.co.uk (David Boyce)
e
s 00002/00002/00151
d R 8.1 93/06/09 19:09:03 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00003/00151
d D 5.5 93/06/09 19:09:00 bostic 6 4
c fixed the under development line
e
s 00002/00002/00152
d R 8.1 93/06/05 13:22:53 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00096/00103/00058
d D 5.4 91/04/19 14:30:36 cael 4 3
c macro and text revision (-mdoc version 3)
e
s 00001/00011/00160
d D 5.3 90/06/23 18:07:04 trent 3 2
c new copyright notice
e
s 00008/00016/00163
d D 5.2 90/04/04 11:06:14 bostic 2 1
c remove side-effects, make value a pointer so could be a function
e
s 00168/00000/00000
d D 5.1 89/12/13 20:59:09 bostic 1 0
c date and time created 89/12/13 20:59:09 by bostic
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1989 The Regents of the University of California.
E 4
I 4
D 9
.\" Copyright (c) 1989, 1991 The Regents of the University of California.
E 4
.\" All rights reserved.
E 9
I 9
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 9
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Paul Vixie.
D 4
.\"
E 4
D 3
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 3
I 3
.\" %sccs.include.redist.man%
E 3
.\"
D 4
.\"	%W% (Berkeley) %G%
E 4
I 4
.\"     %W% (Berkeley) %G%
E 4
.\"
D 4
.TH BITSTRING 3  "%Q%"
.UC 4
.SH NAME
bit_alloc, bit_clear, bit_decl, bit_ffs, bit_nclear, bit_nset,
bit_set, bitstr_size, bit_test \- bit-string manipulation macros
.SH SYNOPSIS
.ft B
.nf
#include <bitstring.h>

name = bit_alloc(nbits)
bitstr_t *name;
int nbits;

bit_decl(name, nbits)
bitstr_t name;
int nbits;

bit_clear(name, bit)
bitstr_t name;
int bit;

bit_ffc(name, nbits, value)
bitstr_t name;
D 2
int nbits, value;
E 2
I 2
int nbits, *value;
E 2

bit_ffs(name, nbits, value)
bitstr_t name;
D 2
int nbits, value;
E 2
I 2
int nbits, *value;
E 2

bit_nclear(name, start, stop)
bitstr_t name;
int start, stop;

bit_nset(name, start, stop)
bitstr_t name;
int start, stop;

bit_set(name, bit)
bitstr_t name;
int bit;

bitstr_size(nbits)
int nbits;

bit_test(name, bit)
bitstr_t name;
int bit;
.fi
.ft R
.SH DESCRIPTION
E 4
I 4
.Dd %Q%
.Dt BITSTRING 3
.Os BSD 4
.Sh NAME
.Nm bit_alloc ,
.Nm bit_clear ,
.Nm bit_decl ,
.Nm bit_ffs ,
.Nm bit_nclear ,
.Nm bit_nset,
.Nm bit_set ,
.Nm bitstr_size ,
.Nm bit_test
.Nd bit-string manipulation macros
.Sh SYNOPSIS
.Fd #include <bitstring.h>
.Ft bitstr_t *
.Fn bit_alloc "int nbits"
.Fn bit_decl "bit_str name" "int nbits"
.Fn bit_clear "bit_str name" "int bit"
.Fn bit_ffc "bit_str name" "int nbits" "int *value"
.Fn bit_ffs "bit_str name" "int nbits" "int *value"
.Fn bit_nclear "bit_str name" "int start" "int stop"
.Fn bit_nset "bit_str name" "int start" "int stop"
.Fn bit_set "bit_str name" "int bit"
.Fn bitstr_size "int nbits"
.Fn bit_test "bit_str name" "int bit"
.Sh DESCRIPTION
E 4
These macros operate on strings of bits.
D 4
.PP
.I Bit_alloc
E 4
I 4
.Pp
The macro
.Fn bit_alloc
E 4
returns a pointer of type
D 4
.I bitstr_t\ *
E 4
I 4
.Dq Fa "bitstr_t *"
E 4
to sufficient space to store
D 4
.I nbits
bits, or NULL if no space is available.
.PP
.I Bit_decl
is a macro for allocating sufficient space to store
.I nbits
E 4
I 4
.Fa nbits
bits, or
.Dv NULL
if no space is available.
.Pp
The macro
.Fn bit_decl
allocates sufficient space to store
.Fa nbits
E 4
bits on the stack.
D 4
.PP
.I Bitstr_size
E 4
I 4
.Pp
The macro
.Fn bitstr_size
E 4
returns the number of elements of type
D 4
.I bitstr_t
E 4
I 4
.Fa bitstr_t
E 4
necessary to store
D 4
.I nbits
E 4
I 4
.Fa nbits
E 4
bits.
This is useful for copying bit strings.
D 4
.PP
.I Bit_clear
E 4
I 4
.Pp
The macros
.Fn bit_clear
E 4
and
D 4
.I bit_set
E 4
I 4
.Fn bit_set
E 4
clear or set the zero-based numbered bit
D 4
.IR bit ,
E 4
I 4
.Fa bit ,
E 4
in the bit string
D 4
.IR name .
.PP
.I Bit_nset
E 4
I 4
.Ar name .
.Pp
The
.Fn bit_nset
E 4
and
D 4
.I bit_nclear
E 4
I 4
.Fn bit_nclear
macros
E 4
set or clear the zero-based numbered bits from
D 4
.I start
E 4
I 4
.Fa start
E 4
to
D 4
.I stop
E 4
I 4
.Fa stop
E 4
in the bit string
D 4
.IR name .
.PP
.I Bit_test
E 4
I 4
.Ar name .
.Pp
The
.Fn bit_test
macro
E 4
D 8
evaluates to zero if the zero-based numbered bit
E 8
I 8
evaluates to non-zero if the zero-based numbered bit
E 8
D 4
.I bit
E 4
I 4
.Fa bit
E 4
of bit string
D 4
.I name
E 4
I 4
.Fa name
E 4
D 8
is set, and non-zero otherwise.
E 8
I 8
is set, and zero otherwise.
E 8
D 4
.PP
.I Bit_ffs
E 4
I 4
.Pp
The
.Fn bit_ffs
macro
E 4
D 2
stores in
E 2
I 2
stores in the location referenced by
E 2
D 4
.I value
E 4
I 4
.Fa value
E 4
the zero-based number of the first bit set in the array of
D 4
.I nbits
E 4
I 4
.Fa nbits
E 4
bits referenced by
D 4
.IR name .
E 4
I 4
.Fa name .
E 4
D 2
If no bits are set,
E 2
I 2
If no bits are set, the location referenced by
E 2
D 4
.I value
is set to -1.
.PP
.I Bit_ffc
E 4
I 4
.Fa value
is set to \-1.
.Pp
The macro
.Fn bit_ffc
E 4
D 2
stores in
E 2
I 2
stores in the location referenced by
E 2
D 4
.I value
E 4
I 4
.Fa value
E 4
the zero-based number of the first bit not set in the array of
D 4
.I nbits
E 4
I 4
.Fa nbits
E 4
bits referenced by
D 4
.IR name .
E 4
I 4
.Fa name .
E 4
D 2
If all bits are set,
E 2
I 2
If all bits are set, the location referenced by
E 2
D 4
.I value
is set to -1.
.PP
E 4
I 4
.Fa value
is set to \-1.
.Pp
E 4
D 2
The macros
.IR bit_nclear ,
.IR bit_nset ,
.I bit_ffc
and
.I bit_ffs
are fairly complex.
It should be noted that they evaluate some of their arguments multiple
times.
Their arguments should not have side effects.
E 2
I 2
The arguments to these macros are evaluated only once and may safely
have side effects.
E 2
D 4
.SH EXAMPLE
.nf
.in +5
E 4
I 4
.Sh EXAMPLE
.Bd -literal -offset indent
E 4
#include <limits.h>
#include <bitstring.h>

...
#define	LPR_BUSY_BIT		0
#define	LPR_FORMAT_BIT		1
#define	LPR_DOWNLOAD_BIT	2
...
#define	LPR_AVAILABLE_BIT	9
#define	LPR_MAX_BITS		10

make_lpr_available()
{
	bitstr_t bit_decl(bitlist, LPR_MAX_BITS);
	...
	bit_nclear(bitlist, 0, LPR_MAX_BITS - 1);
	...
	if (!bit_test(bitlist, LPR_BUSY_BIT)) {
		bit_clear(bitlist, LPR_FORMAT_BIT);
		bit_clear(bitlist, LPR_DOWNLOAD_BIT);
		bit_set(bitlist, LPR_AVAILABLE_BIT);
	}
}
D 4
.fi
.SH "SEE ALSO"
malloc(3)
E 4
I 4
.Ed
.Sh SEE ALSO
.Xr malloc 3
.Sh HISTORY
The
D 6
.Nm
functions are
.Ud .
E 6
I 6
.Nm bitstring
functions first appeared in 4.4BSD.
E 6
E 4
E 1
