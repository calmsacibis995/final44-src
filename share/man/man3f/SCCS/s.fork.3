h12406
s 00002/00002/00053
d D 8.1 93/06/05 13:24:34 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00004/00003/00051
d D 6.3 91/04/30 18:12:52 bostic 4 3
c new copyright; att/bsd/shared
e
s 00004/00004/00050
d D 6.2 86/05/27 10:26:37 kjd 3 2
c fix quotes
e
s 00001/00001/00053
d D 6.1 85/05/15 16:18:13 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00054/00000/00000
d D 5.1 85/05/15 16:18:06 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 5
.\" Copyright (c) 1983 The Regents of the University of California.
.\" All rights reserved.
E 5
I 5
.\" Copyright (c) 1983, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 5
.\"
.\" %sccs.include.proprietary.roff%
E 4
.\"
.\"	%W% (Berkeley) %G%
.\"
D 2
.TH FORK 3F "13 June 1983"
E 2
I 2
.TH FORK 3F "%Q%"
E 2
.UC 5
.SH NAME
fork \- create a copy of this process
.SH SYNOPSIS
.B integer function fork()
.SH DESCRIPTION
.I Fork
creates a copy of the calling process.
The only distinction between the 2 processes is that the value
D 3
returned to one of them (referred to as the 'parent' process)
will be the process id if the copy.
The copy is usually referred to as the 'child' process.
The value returned to the 'child' process will be zero.
E 3
I 3
returned to one of them (referred to as the `parent' process)
will be the process id of the copy.
The copy is usually referred to as the `child' process.
The value returned to the `child' process will be zero.
E 3
.PP
All logical units open for writing are flushed before the fork to avoid
duplication of the contents of I/O buffers in the external file(s).
.PP
If the returned value is negative, it indicates an error and will be
the negation of the system error code.
See perror(3F).
.PP
A corresponding
.I exec
routine has not been provided because there is no satisfactory way to
retain open logical units across the exec.
However, the usual function of
.I fork/exec
can be performed using
.IR system (3F).
.if 0 \{
A pipe can be opened to another process using the f77
.B open
statement with
.sp 1
.ti +5
.B "file=\(fm\fIprocess\fB\(fm, status=\(fmpipe\(fm, access=\(fmread\(fm"
.br
or
.br
.ti +5
.B "file=\(fm\fIprocess\fB\(fm, status=\(fmpipe\(fm, access=\(fmwrite\(fm"
\}
.SH FILES
.ie \nM /usr/ucb/lib/libU77.a
.el /usr/lib/libU77.a
.SH "SEE ALSO"
fork(2), wait(3F), kill(3F), system(3F), perror(3F)
E 1
