h12753
s 00002/00002/00123
d D 8.1 93/06/05 13:25:34 bostic 3 2
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00004/00003/00121
d D 6.2 91/04/30 18:13:15 bostic 2 1
c new copyright; att/bsd/shared
e
s 00124/00000/00000
d D 6.1 85/05/15 16:43:09 mckusick 1 0
c manual page first distributed with 4.3BSD
e
u
U
t
T
I 1
D 2
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 2
I 2
D 3
.\" Copyright (c) 1983 The Regents of the University of California.
.\" All rights reserved.
E 3
I 3
.\" Copyright (c) 1983, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 3
.\"
.\" %sccs.include.proprietary.roff%
E 2
.\"
.\"	%W% (Berkeley) %G%
.\"
.TH MALLOC 3F  "%Q%"
.UC 6
.SH NAME
malloc, free, falloc \- memory allocator
.SH SYNOPSIS
.nf
.B subroutine malloc (size, addr)
.B integer size, addr
.PP
.B subroutine free (addr)
.B integer addr
.PP
.B
subroutine falloc (nelem, elsize, clean, basevec, addr, offset)
.B
integer nelem, elsize, clean, addr, offset
.fi
.SH DESCRIPTION
.IR Malloc , \ falloc
and
.I free
provide a general-purpose memory allocation package.
.I Malloc
returns in
.I addr
the address of a block of at least
.I size
bytes beginning on an even-byte boundary.
.PP
.I Falloc
allocates space for an array of
.I nelem
elements of size
.I elsize
and returns the address of the block in
.I addr.
It zeros the block if
.I clean
is 1.
It returns in
.I offset
an index such that the storage may be addressed as
.I basevec(offset+1) ... basevec(offset+nelem).
.I Falloc
gets extra bytes so that after address arithmetic,
all the objects so addressed are within the block.
.PP
The argument to
.I free
is the address of a block previously allocated by
.I malloc
or
.IR falloc ;
this space is made available for further allocation,
but its contents are left undisturbed.
To free blocks allocated by
.I falloc,
use
.I addr
in calls to
.I free,
do not use
.I basevec(offset+1).
.PP
Needless to say, grave disorder will result if the space assigned by
.IR malloc or falloc
is overrun or if some random number is handed to
.IR free .
.SH DIAGNOSTICS
.I Malloc
and
.I falloc
set
.I addr
to 0 if there is no available memory or if the arena
has been detectably corrupted by storing outside the bounds of a block.
.PP
The following example shows how to obtain memory and use it within a
subprogram:
.nf

      integer addr, work(1), offset
         ...
      call falloc ( n, 4, 0, work, addr, offset )
      do 10 i = 1, n
      work(offset+i) = ...
10    continue
.fi
.PP
The next example reads in dimension information,
allocates space for two arrays and two vectors,
and calls subroutine
.I doit
to do the computations:
.nf

      integer addr, dummy(1), offs
      read *, k, l, m
      indm1   = 1
      indm2   = indm1 + k*l
      indm3   = indm2 + l*m
      indsym  = indm3 + k*m
      lsym = n*(n+1)/2
      indv  = indsym + lsym
      indtot = indv + m
      call falloc ( indtot, 4, 0, dummy, addr, offs )
      call doit( dummy(indm1+offs), dummy(indm2+offs),
     .           dummy(indm3+offs), dummy(indsym+offs),
     .           dummy(indv +offs), m, n, lsym )
      end
      subroutine doit( arr1, arr2, arr3, vsym, vec, m, n, lsym )
      real arr1(k,l), arr2(l,m), arr3(k,m), vsym(lsym), v2(m)
         ...
.fi
.SH FILES
/usr/lib/libU77.a
.SH SEE ALSO
malloc(3)
E 1
