h29678
s 00002/00002/00157
d D 8.1 93/06/05 13:45:13 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00103/00070/00056
d D 1.4 91/03/28 00:45:59 cael 4 3
c macro and text revision (-mdoc version 3)
e
s 00001/00011/00125
d D 1.3 90/06/23 18:04:53 trent 3 2
c new copyright notice
e
s 00016/00008/00120
d D 1.2 89/02/14 17:18:19 bostic 2 1
c add Berkeley specific copyright notice, remove subsection notation
e
s 00128/00000/00000
d D 1.1 85/07/30 21:55:19 sklower 1 0
c date and time created 85/07/30 21:55:19 by sklower
e
u
U
t
T
I 1
D 2
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 2
I 2
D 4
.\" Copyright (c) 1985 The Regents of the University of California.
E 4
I 4
D 5
.\" Copyright (c) 1985, 1991 The Regents of the University of California.
E 4
.\" All rights reserved.
E 5
I 5
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 5
E 2
.\"
I 2
D 3
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 3
I 3
.\" %sccs.include.redist.man%
E 3
.\"
E 2
D 4
.\"	%W% (Berkeley) %G%
E 4
I 4
.\"     %W% (Berkeley) %G%
E 4
.\"
D 2
.TH IDP 4P "July 30, 1985"
E 2
I 2
D 4
.TH IDP 4 "July 30, 1985"
E 2
.UC 6
.SH NAME
idp \- Xerox Internet Datagram Protocol
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netns/ns.h>
.br
.B #include <netns/idp.h>
.PP
.B s = socket(AF_NS, SOCK_DGRAM, 0);
.SH DESCRIPTION
IDP is a simple, unreliable datagram protocol which is used
to support the SOCK_DGRAM abstraction for the Internet
protocol family.  IDP sockets are connectionless, and are
E 4
I 4
.Dd %Q%
.Dt IDP 4
.Os BSD 4.3
.Sh NAME
.Nm idp
.Nd Xerox Internet Datagram Protocol
.Sh SYNOPSIS
.Fd #include <sys/socket.h>
.Fd #include <netns/ns.h>
.Fd #include <netns/idp.h>
.Ft int
.Fn socket AF_NS SOCK_DGRAM 0
.Sh DESCRIPTION
.Tn IDP
is a simple, unreliable datagram protocol which is used
to support the
.Dv SOCK_DGRAM
abstraction for the Internet
protocol family.
.Tn IDP
sockets are connectionless, and are
E 4
normally used with the
D 4
.I sendto 
E 4
I 4
.Xr sendto
E 4
and
D 4
.IR recvfrom 
E 4
I 4
.Xr recvfrom
E 4
calls, though the
D 4
.IR connect (2)
E 4
I 4
.Xr connect 2
E 4
call may also be used to fix the destination for future
packets (in which case the 
D 4
.IR recv (2)
E 4
I 4
.Xr recv 2
E 4
or
D 4
.IR read (2)
E 4
I 4
.Xr read 2
E 4
and 
D 4
.IR send (2)
E 4
I 4
.Xr send 2
E 4
or
D 4
.IR write(2)
E 4
I 4
.Xr write 2
E 4
system calls may be used).
D 4
.PP
Xerox protocols are built vertically on top of IDP.
Thus, IDP address formats are identical to those used by
SPP.
Note that the IDP port
space is the same as the SPP port space (i.e. a IDP port
may be \*(lqconnected\*(rq to a SPP port, with certain
E 4
I 4
.Pp
Xerox protocols are built vertically on top of
.Tn IDP .
Thus,
.Tn IDP
address formats are identical to those used by
.Tn SPP .
Note that the
.Tn IDP
port
space is the same as the
.Tn SPP
port space (i.e. a
.Tn IDP
port
may be
.Dq connected
to a
.Tn SPP
port, with certain
E 4
options enabled below).
In addition broadcast packets may be sent
(assuming the underlying network supports
D 4
this) by using a reserved \*(lqbroadcast address\*(rq; this address
E 4
I 4
this) by using a reserved
.Dq broadcast address ;
this address
E 4
is network interface dependent.
D 4
.SH DIAGNOSTICS
E 4
I 4
.Sh DIAGNOSTICS
E 4
A socket operation may fail with one of the following errors returned:
D 4
.TP 15
[EISCONN]
E 4
I 4
.Bl -tag -width [EADDRNOTAVAIL]
.It Bq Er EISCONN
E 4
when trying to establish a connection on a socket which
already has one, or when trying to send a datagram with the destination
address specified and the socket is already connected;
D 4
.TP 15
[ENOTCONN]
E 4
I 4
.It Bq Er ENOTCONN
E 4
when trying to send a datagram, but
no destination address is specified, and the socket hasn't been
connected;
D 4
.TP 15
[ENOBUFS]
E 4
I 4
.It Bq Er ENOBUFS
E 4
when the system runs out of memory for
an internal data structure;
D 4
.TP 15
[EADDRINUSE]
E 4
I 4
.It Bq Er EADDRINUSE
E 4
when an attempt
is made to create a socket with a port which has already been
allocated;
D 4
.TP 15
[EADDRNOTAVAIL]
E 4
I 4
.It Bq Er EADDRNOTAVAIL
E 4
when an attempt is made to create a 
socket with a network address for which no network interface
exists.
D 4
.SH SOCKET OPTIONS
.TP 15
[SO_HEADERS_ON_INPUT]
E 4
I 4
.El
.Sh SOCKET OPTIONS
.Bl -tag -width [SO_HEADERS_ON_OUTPUT]
.It Bq Dv SO_ALL_PACKETS
When set, this option defeats automatic processing of Error packets,
and Sequence Protocol packets.
.It Bq Dv SO_DEFAULT_HEADERS
The user provides the kernel an
.Tn IDP
header, from which
it gleans the Packet Type.
When requested, the kernel will provide an
.Tn IDP
header, showing
the default packet type, and local and foreign addresses, if
connected.
.It Bq Dv SO_HEADERS_ON_INPUT
E 4
When set, the first 30 bytes of any data returned from a read
D 4
or recv from will be the initial 30 bytes of the IDP packet,
E 4
I 4
or recv from will be the initial 30 bytes of the
.Tn IDP
packet,
E 4
as described by
D 4
.nf
E 4
I 4
.Bd -literal -offset indent
E 4
struct idp {
	u_short		idp_sum;
	u_short		idp_len;
	u_char		idp_tc;
	u_char		idp_pt;
	struct ns_addr	idp_dna;
	struct ns_addr	idp_sna;
};
D 4
.fi
E 4
I 4
.Ed
.Pp
E 4
This allows the user to determine the packet type, and whether
the packet was a multi-cast packet or directed specifically at
the local host.
When requested, gives the current state of the option,
D 4
(NSP_RAWIN or 0).
.TP 15
[SO_HEADERS_ON_OUTPUT]
E 4
I 4
.Pf ( Dv NSP_RAWIN
or 0).
.It Bq Dv SO_HEADERS_ON_OUTPUT
E 4
When set, the first 30 bytes of any data sent
D 4
will be the initial 30 bytes of the IDP packet.
E 4
I 4
will be the initial 30 bytes of the
.Tn IDP
packet.
E 4
This allows the user to determine the packet type, and whether
the packet should be multi-cast packet or directed specifically at
the local host.
You can also misrepresent the sender of the packet.
When requested, gives the current state of the option.
D 4
(NSP_RAWOUT or 0).
.TP 15
[SO_DEFAULT_HEADERS]
The user provides the kernel an IDP header, from which
it gleans the Packet Type.
When requested, the kernel will provide an IDP header, showing
the default packet type, and local and foreign addresses, if
connected.
.TP 15
[SO_ALL_PACKETS]
When set, this option defeats automatic processing of Error packets,
and Sequence Protocol packets.
.TP 15
[SO_SEQNO]
E 4
I 4
.Pf ( Dv NSP_RAWOUT
or 0).
.It Bq Dv SO_SEQNO
E 4
When requested, this returns a sequence number which is not likely
to be repeated until the machine crashes or a very long time has passed.
It is useful in constructing Packet Exchange Protocol packets.
D 4
.SH SEE ALSO
D 2
send(2),
recv(2),
intro(4N),
ns(4F)
E 2
I 2
send(2), recv(2), intro(4), ns(4)
E 4
I 4
.El
.Sh SEE ALSO
.Xr send 2 ,
.Xr recv 2 ,
.Xr intro 4 ,
.Xr ns 4
.Sh HISTORY
The
.Nm
protocol appeared in
.Bx 4.3 .
E 4
E 2
E 1
