h04881
s 00002/00002/00350
d D 8.2 93/11/30 16:48:26 mckusick 9 8
c copy edit changes from Usenix
e
s 00002/00002/00350
d D 8.1 93/06/05 13:45:44 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00221/00016/00131
d D 6.6 93/05/13 21:10:27 andrew 7 6
c document reno and mcast socket options & changes
c to IP_HDRINCL semantics. mcast stuff based on text by Steve Deering.
e
s 00098/00059/00049
d D 6.5 91/03/28 00:46:02 cael 6 5
c macro and text revision (-mdoc version 3)
e
s 00001/00011/00107
d D 6.4 90/06/23 18:04:40 trent 5 4
c new copyright notice
e
s 00016/00005/00102
d D 6.3 89/02/14 17:18:24 bostic 4 3
c add Berkeley specific copyright notice, remove subsection notation
e
s 00047/00010/00060
d D 6.2 86/05/16 15:53:18 karels 3 2
c options, updates
e
s 00001/00001/00069
d D 6.1 85/05/15 17:44:54 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00070/00000/00000
d D 5.1 85/05/15 17:44:48 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 6
.\" Copyright (c) 1983 The Regents of the University of California.
E 6
I 6
D 8
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
E 6
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
E 4
.\"
I 4
D 5
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 5
I 5
.\" %sccs.include.redist.man%
E 5
.\"
E 4
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\"     %W% (Berkeley) %G%
E 6
.\"
D 2
.TH IP 4P "25 March 1982"
E 2
I 2
D 4
.TH IP 4P "%Q%"
E 4
I 4
D 6
.TH IP 4 "%Q%"
E 4
E 2
.UC 5
.SH NAME
ip \- Internet Protocol
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.PP
D 3
.B s = socket(AF_INET, SOCK_RAW, 0);
E 3
I 3
.B s = socket(AF_INET, SOCK_RAW, proto);
E 3
.SH DESCRIPTION
IP is the transport layer protocol used
E 6
I 6
.Dd %Q%
.Dt IP 4
.Os BSD 4.2
.Sh NAME
.Nm ip
.Nd Internet Protocol
.Sh SYNOPSIS
.Fd #include <sys/socket.h>
.Fd #include <netinet/in.h>
.Ft int
.Fn socket AF_INET SOCK_RAW proto
.Sh DESCRIPTION
.Tn IP 
is the transport layer protocol used
E 6
D 3
by the Internet protocol family.  It may be accessed
E 3
I 3
by the Internet protocol family.
D 6
Options may be set at the IP level
when using higher-level protocols that are based on IP
(such as TCP and UDP).
E 6
I 6
Options may be set at the
.Tn IP
level
when using higher-level protocols that are based on
.Tn IP
(such as
.Tn TCP
and
.Tn UDP ) .
E 6
It may also be accessed
E 3
D 6
through a \*(lqraw socket\*(rq when developing new protocols, or
E 6
I 6
through a
.Dq raw socket
when developing new protocols, or
E 6
D 3
special purpose applications.  IP sockets are connectionless,
E 3
I 3
D 7
special purpose applications.
E 7
I 7
special-purpose applications.
E 7
D 6
.PP
A single generic option is supported at the IP level, IP_OPTIONS,
that may be used to provide IP options to be transmitted in the IP
E 6
I 6
.Pp
D 7
A single generic option is supported at the
E 7
I 7
There are several
D 9
.Tn IP -level
E 9
I 9
.Tn IP-level
E 9
.Xr setsockopt 2 / Ns
.Xr getsockopt 2
options.
.Dv IP_OPTIONS 
may be used to provide
E 7
.Tn IP
D 7
level,
.Dv IP_OPTIONS ,
that may be used to provide
.Tn IP
E 7
options to be transmitted in the
.Tn IP
E 6
D 7
header of each outgoing packet.
Options are set with
D 6
.IR setsockopt (2)
E 6
I 6
.Xr setsockopt 2
E 6
and examined with
D 6
.IR getsockopt (2).
The format of IP options to be sent is that specified by the IP protocol
E 6
I 6
.Xr getsockopt 2 .
E 7
I 7
header of each outgoing packet
or to examine the header options on incoming packets.
.Tn IP
options may be used with any socket type in the Internet family.
E 7
The format of
.Tn IP
options to be sent is that specified by the
D 7
.Tn IP protocol
E 6
specification, with one exception:
E 7
I 7
.Tn IP 
protocol specification (RFC-791), with one exception:
E 7
the list of addresses for Source Route options must include the first-hop
gateway at the beginning of the list of gateways.
The first-hop gateway address will be extracted from the option list
and the size adjusted accordingly before use.
D 6
IP options may be used with any socket type in the Internet family.
.PP
Raw IP sockets are connectionless,
E 6
I 6
D 7
.Tn IP
options may be used with any socket type in the Internet family.
E 7
I 7
To disable previously specified options,
use a zero-length buffer:
.Bd -literal
setsockopt(s, IPPROTO_IP, IP_OPTIONS, NULL, 0);
.Ed
E 7
.Pp
I 7
.Dv IP_TOS 
and 
.Dv IP_TTL 
may be used to set the type-of-service and time-to-live
fields in the 
.Tn IP 
header for 
.Dv SOCK_STREAM 
and 
.Dv SOCK_DGRAM 
sockets. For example,
.Bd -literal
int tos = IPTOS_LOWDELAY;       /* see <netinet/in.h> */
setsockopt(s, IPPROTO_IP, IP_TOS, &tos, sizeof(tos));

int ttl = 60;                   /* max = 255 */
setsockopt(s, IPPROTO_IP, IP_TTL, &ttl, sizeof(ttl));
.Ed
.Pp
If the 
.Dv IP_RECVDSTADDR 
option is enabled on a 
.Dv SOCK_DGRAM 
socket,
the
.Xr recvmsg
call will return the destination 
.Tn IP 
address for a 
.Tn UDP 
datagram. 
The msg_control field in the msghdr structure points to a buffer 
that contains a cmsghdr structure followed by the 
.Tn IP 
address. 
The cmsghdr fields have the following values:
.Bd -literal
cmsg_len = sizeof(struct in_addr)
cmsg_level = IPPROTO_IP
cmsg_type = IP_RECVDSTADDR
.Ed
.Ss "Multicast Options"
.Pp
.Tn IP 
multicasting is supported only on 
.Dv AF_INET 
sockets of type
.Dv SOCK_DGRAM 
and 
.Dv SOCK_RAW,
and only on networks where the interface
driver supports multicasting.
.Pp
The 
.Dv IP_MULTICAST_TTL 
option changes the time-to-live (TTL)
for outgoing multicast datagrams
in order to control the scope of the multicasts:
.Bd -literal
u_char ttl;	/* range: 0 to 255, default = 1 */
setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl));
.Ed
.sp
Datagrams with a TTL of 1 are not forwarded beyond the local network.
Multicast datagrams with a TTL of 0 will not be transmitted on any network,
but may be delivered locally if the sending host belongs to the destination
group and if multicast loopback has not been disabled on the sending socket
(see below).  Multicast datagrams with TTL greater than 1 may be forwarded
to other networks if a multicast router is attached to the local network.
.Pp
For hosts with multiple interfaces, each multicast transmission is 
sent from the primary network interface.
The 
.Dv IP_MULTICAST_IF 
option overrides the default for 
subsequent transmissions from a given socket:
.Bd -literal
struct in_addr addr;
setsockopt(s, IPPROTO_IP, IP_MULTICAST_IF, &addr, sizeof(addr));
.Ed
.sp
where "addr" is the local 
.Tn IP 
address of the desired interface or
.Dv INADDR_ANY 
to specify the default interface.
An interface's local IP address and multicast capability can 
be obtained via the 
.Dv SIOCGIFCONF 
and 
.Dv SIOCGIFFLAGS 
ioctls. 
Normal applications should not need to use this option.
.Pp
If a multicast datagram is sent to a group to which the sending host itself
belongs (on the outgoing interface), a copy of the datagram is, by default,
looped back by the IP layer for local delivery. 
The 
.Dv IP_MULTICAST_LOOP 
option gives the sender explicit control 
over whether or not subsequent datagrams are looped back:
.Bd -literal
u_char loop;	/* 0 = disable, 1 = enable (default) */
setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, &loop, sizeof(loop));
.Ed
.sp
This option
improves performance for applications that may have no more than one
instance on a single host (such as a router demon), by eliminating
the overhead of receiving their own transmissions.  It should generally not
be used by applications for which there may be more than one instance on a
single host (such as a conferencing program) or for which the sender does
not belong to the destination group (such as a time querying program).
.Pp
A multicast datagram sent with an initial TTL greater than 1 may be delivered
to the sending host on a different interface from that on which it was sent,
if the host belongs to the destination group on that other interface.  The
loopback control option has no effect on such delivery.
.Pp
A host must become a member of a multicast group before it can receive 
datagrams sent to the group.  To join a multicast group, use the 
.Dv IP_ADD_MEMBERSHIP 
option:
.Bd -literal
struct ip_mreq mreq;
setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
.Ed
.sp
where 
.Fa mreq
is the following structure:
.Bd -literal
struct ip_mreq {
    struct in_addr imr_multiaddr; /* multicast group to join */
    struct in_addr imr_interface; /* interface to join on */
}
.Ed
.sp
.Dv imr_interface 
should
be 
.Dv INADDR_ANY 
to choose the default multicast interface, 
or the 
.Tn IP 
address of a particular multicast-capable interface if
the host is multihomed.
Membership is associated with a single interface; 
D 9
programs running on multihomed hosts may need to to 
E 9
I 9
programs running on multihomed hosts may need to 
E 9
join the same group on more than one interface.  
Up to 
.Dv IP_MAX_MEMBERSHIPS 
(currently 20) memberships may be added on a
single socket.
.Pp
To drop a membership, use:
.Bd -literal
struct ip_mreq mreq;
setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, &mreq, sizeof(mreq));
.Ed
.sp
where 
.Fa mreq
contains the same values as used to add the membership. 
Memberships are dropped when the socket is closed or the process exits.  
.\"-----------------------
.Ss "Raw IP Sockets"
.Pp
E 7
Raw
.Tn IP
sockets are connectionless,
E 6
E 3
and are normally used with the
D 6
.I sendto 
E 6
I 6
.Xr sendto
E 6
and
D 6
.I recvfrom 
E 6
I 6
.Xr recvfrom
E 6
calls, though the
D 6
.IR connect (2)
E 6
I 6
.Xr connect 2
E 6
call may also be used to fix the destination for future
packets (in which case the 
D 6
.IR read (2)
E 6
I 6
.Xr read 2
E 6
or
D 6
.IR recv (2)
E 6
I 6
.Xr recv 2
E 6
and 
D 6
.IR write (2)
E 6
I 6
.Xr write 2
E 6
or
D 6
.IR send (2)
E 6
I 6
.Xr send 2
E 6
system calls may be used).
D 6
.PP
E 6
I 6
.Pp
E 6
I 3
If
D 6
.I proto
is 0, the default protocol IPPROTO_RAW is used for outgoing
E 6
I 6
.Fa proto
is 0, the default protocol
.Dv IPPROTO_RAW
is used for outgoing
E 6
packets, and only incoming packets destined for that protocol
are received.
If
D 6
.I proto
E 6
I 6
.Fa proto
E 6
is non-zero, that protocol number will be used on outgoing packets
and to filter incoming packets.
D 6
.PP
E 3
Outgoing packets automatically have an IP header prepended to
E 6
I 6
.Pp
Outgoing packets automatically have an
.Tn IP
header prepended to
E 6
them (based on the destination address and the protocol
D 7
number the socket is created with).
E 7
I 7
number the socket is created with),
unless the 
.Dv IP_HDRINCL 
option has been set.
E 7
D 3
Likewise, incoming packets have their IP header stripped
before being sent to the user.
E 3
I 3
D 6
Incoming packets are received with IP header and options intact.
E 3
.SH DIAGNOSTICS
E 6
I 6
Incoming packets are received with
.Tn IP
header and options intact.
I 7
.Pp
.Dv IP_HDRINCL 
indicates the complete IP header is included with the data
and may be used only with the 
.Dv SOCK_RAW 
type.
.Bd -literal
#include <netinet/ip.h>

int hincl = 1;                  /* 1 = on, 0 = off */
setsockopt(s, IPPROTO_IP, IP_HDRINCL, &hincl, sizeof(hincl));
.Ed
.sp
Unlike previous 
.Tn BSD 
releases, the program must set all
the fields of the IP header, including the following:
.Bd -literal
ip->ip_v = IPVERSION;
ip->ip_hl = hlen >> 2;
ip->ip_id = 0;  /* 0 means kernel set appropriate value */
ip->ip_off = offset;
.Ed
.sp .5
If the header source address is set to 
.Dv INADDR_ANY,
the kernel will choose an appropriate address.
E 7
.Sh DIAGNOSTICS
E 6
A socket operation may fail with one of the following errors returned:
D 6
.TP 15
[EISCONN]
E 6
I 6
.Bl -tag -width [EADDRNOTAVAIL]
.It Bq Er EISCONN
E 6
when trying to establish a connection on a socket which
already has one, or when trying to send a datagram with the destination
address specified and the socket is already connected;
D 6
.TP 15
[ENOTCONN]
E 6
I 6
.It Bq Er ENOTCONN
E 6
when trying to send a datagram, but
no destination address is specified, and the socket hasn't been
connected;
D 6
.TP 15
[ENOBUFS]
E 6
I 6
.It Bq Er ENOBUFS
E 6
when the system runs out of memory for
an internal data structure;
D 6
.TP 15
[EADDRNOTAVAIL]
E 6
I 6
.It Bq Er EADDRNOTAVAIL
E 6
when an attempt is made to create a 
socket with a network address for which no network interface
exists.
I 7
.It Bq Er EACESS
when an attempt is made to create
a raw IP socket by a non-privileged process.
E 7
D 3
.SH SEE ALSO
send(2), recv(2), intro(4N), inet(4F)
.SH BUGS
One should be able to send and receive ip options.
E 3
D 6
.PP
D 3
The protocol should be settable after socket creation.
E 3
I 3
The following errors specific to IP
may occur when setting or getting IP options:
.TP 15
[EINVAL]
E 6
I 6
.El
.Pp
The following errors specific to
.Tn IP
may occur when setting or getting
.Tn IP
options:
.Bl -tag -width EADDRNOTAVAILxx
.It Bq Er EINVAL
E 6
An unknown socket option name was given.
D 6
.TP 15
[EINVAL]
E 6
I 6
.It Bq Er EINVAL
E 6
The IP option field was improperly formed;
an option field was shorter than the minimum value
or longer than the option buffer provided.
D 6
.SH SEE ALSO
D 4
getsockopt(2), send(2), recv(2), intro(4N), icmp(4P), inet(4F)
E 4
I 4
getsockopt(2), send(2), recv(2), intro(4), icmp(4), inet(4)
E 6
I 6
.El
.Sh SEE ALSO
.Xr getsockopt 2 ,
.Xr send 2 ,
.Xr recv 2 ,
.Xr intro 4 ,
.Xr icmp 4 ,
.Xr inet 4
.Sh HISTORY
The
.Nm
protocol appeared in
.Bx 4.2 .
E 6
E 4
E 3
E 1
