h11353
s 00002/00002/00158
d D 8.2 93/11/30 16:48:27 mckusick 6 5
c copy edit changes from Usenix
e
s 00002/00002/00158
d D 8.1 93/06/09 19:16:55 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00000/00005/00160
d D 6.3 93/06/09 19:16:52 bostic 4 2
c fixed the under development line
e
s 00002/00002/00163
d R 8.1 93/06/05 13:45:54 bostic 3 2
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00125/00074/00040
d D 6.2 91/03/28 00:46:04 cael 2 1
c macro and text revision (-mdoc version 3)
e
s 00114/00000/00000
d D 6.1 90/05/30 13:40:55 sklower 1 0
c date and time created 90/05/30 13:40:55 by sklower
e
u
U
t
T
I 1
D 2
.\" Copyright (c) 1990 The Regents of the University of California.
E 2
I 2
D 5
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 2
.\" All rights reserved.
E 5
I 5
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 5
.\"
.\" %sccs.include.redist.man%
.\"
D 2
.\"	%W% (Berkeley) %G%
E 2
I 2
.\"     %W% (Berkeley) %G%
E 2
.\"
D 2
.TH ISO 4F "%Q%"
.UC  4
.SH NAME
iso \- ISO protocol family
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <netiso/iso.h>
.SH DESCRIPTION
The ISO protocol family is a collection of protocols
that uses the ISO address format.
The ISO family provides protocol support for the
SOCK_SEQPACKET abstraction through the TP protocol (ISO 8073), 
for the SOCK_DGRAM abstraction through the connectionless transport
protocol (ISO 8602),
and for the SOCK_RAW abstraction
E 2
I 2
.Dd %Q%
.Dt ISO 4
.Os
.Sh NAME
.Nm iso
.Nd
.Tn ISO
protocol family
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <netiso/iso.h>
.Sh DESCRIPTION
The
.Tn ISO
protocol family is a collection of protocols
that uses the
.Tn ISO
address format.
The
.Tn ISO
family provides protocol support for the
.Dv SOCK_SEQPACKET
abstraction through the
.Tn TP
protocol
.Pf ( Tn ISO
8073), 
for the
.Dv SOCK_DGRAM
abstraction through the connectionless transport
protocol
.Pf ( Tn ISO
8602),
and for the
.Dv SOCK_RAW
abstraction
E 2
by providing direct access (for debugging) to the
D 2
CLNP (ISO 8473) network layer protocol.
.SH ADDRESSING
ISO addresses are based upon ISO 8348/AD2, 
"Addendum to the Network Service Definition Covering Network Layer Addressing."
.PP
E 2
I 2
.Tn CLNP 
.Pf ( Tn ISO
8473) network layer protocol.
.Sh ADDRESSING
.Tn ISO
addresses are based upon
.Tn ISO
8348/AD2, 
.%T "Addendum to the Network Service Definition Covering Network Layer Addressing."
.Pp
E 2
Sockets bound to the OSI protocol family use
the following address structure:
D 2
.sp 1
.nf
._f
E 2
I 2
.Bd -literal
E 2
struct iso_addr {
D 2
	u_char	isoa_len;		/* length, not including this byte */
	char	isoa_genaddr[20];	/* general opaque address */
E 2
I 2
     u_char    isoa_len;  /* length, not including this byte */
     char      isoa_genaddr[20];  /* general opaque address */
E 2
};

struct sockaddr_iso {
D 2
	u_char	siso_len;		/* size of this sockaddr */
	u_char	siso_family;		/* addressing domain, AF_ISO */
	u_char	siso_plen;		/* presentation selector length */
	u_char	siso_slen;		/* session selector length */
	u_char	siso_tlen;		/* transport selector length */
	struct 	iso_addr siso_addr;	/* network address */
	u_char	siso_pad[6];		/* space for gosip v2 SELs */
E 2
I 2
     u_char    siso_len;      /* size of this sockaddr */
     u_char    siso_family;   /* addressing domain, AF_ISO */
     u_char    siso_plen;     /* presentation selector length */
     u_char    siso_slen;     /* session selector length */
     u_char    siso_tlen;     /* transport selector length */
     struct    iso_addr siso_addr; /* network address */
     u_char    siso_pad[6];    /* space for gosip v2 SELs */
E 2
};
#define siso_nlen siso_addr.isoa_len
#define siso_data siso_addr.isoa_genaddr
D 2
.sp 1
.fi
.PP
E 2
I 2
.Ed
.Pp
E 2
The fields of this structure are:
D 2
.TP 10
\fIsiso_len:\fR
E 2
I 2
.Bl -tag -width Ds
.It Ar siso_len:
E 2
Length of the entire address structure, in bytes, which may grow to
D 6
be longer than the 32 bytes show above.
E 6
I 6
be longer than the 32 bytes shown above.
E 6
D 2
.TP 10
\fIsiso_family:\fR
Identifies the domain: AF_ISO.
.TP 10
\fIsiso_tlen:\fR
E 2
I 2
.It Ar siso_family:
Identifies the domain:
.Dv AF_ISO .
.It Ar siso_tlen:
E 2
Length of the transport selector.
D 2
.TP 10
\fIsiso_slen:\fR
E 2
I 2
.It Ar siso_slen:
E 2
Length of the session selector.
This is not currently supported by the kernel and is provided as
a convenience for user level programs.
D 2
.TP 10
\fIsiso_plen:\fR
E 2
I 2
.It Ar siso_plen:
E 2
Length of the presentation selector.
This is not currently supported by the kernel and is provided as
a convenience for user level programs.
D 2
.TP 10
\fIsiso_addr:\fR
E 2
I 2
.It Ar siso_addr:
E 2
The network part of the address, described below.
D 2
.SS TRANSPORT ADDRESSING
.PP
An ISO transport address is similar to an Internet address in that
E 2
I 2
.El
.Sh TRANSPORT ADDRESSING
.Pp
An
.Tn ISO
transport address is similar to an Internet address in that
E 2
it contains a network-address portion and a portion that the
transport layer uses to multiplex its services among clients.
D 2
In the Internet domain, this portion of the address is called a \fIport\fR.
In the ISO domain, this is called a \fItransport selector\fR
(also known at one time as a \fItransport suffix\fR).
E 2
I 2
In the Internet domain, this portion of the address is called a
.Em port .
In the
.Tn ISO
domain, this is called a
.Em transport selector
(also known at one time as a
.Em transport suffix ) .
E 2
While ports are always 16 bits, 
transport selectors may be
of (almost) arbitrary size.
D 2
.PP
E 2
I 2
.Pp
E 2
D 6
Since the C language does not provide conveninent variable
E 6
I 6
Since the C language does not provide convenient variable
E 6
length structures, we have separated the selector lengths
from the data themselves.
The network address and various selectors are stored contiguously,
with the network address first, then the transport selector, and so
on.  Thus, if you had a nework address of less then 20 bytes,
the transport selector would encroach on space normally reserved
for the network address.
D 2
.PP
.SS NETWORK ADDRESSING.
ISO network addresses are limited to 20 bytes in length.
ISO network addresses can take any format.
.SH PROTOCOLS
The ARGO 1.0 implementation of the 
ISO protocol family comprises
the Connectionless-Mode Network Protocol (CLNP), 
and the Transport Protocol (TP), classes 4 and 0,
and X.25.
TP is used to support the SOCK_SEQPACKET
E 2
I 2
.Pp
.Sh NETWORK ADDRESSING.
.Tn ISO
network addresses are limited to 20 bytes in length.
.Tn ISO
network addresses can take any format.
.Sh PROTOCOLS
The
.Tn ARGO
1.0 implementation of the 
.Tn ISO
protocol family comprises
the Connectionless-Mode Network Protocol
.Pq Tn CLNP , 
and the Transport Protocol
.Pq Tn TP ,
classes 4 and 0,
and
.Tn X.25 .
.Tn TP
is used to support the
.Dv SOCK_SEQPACKET
E 2
abstraction.
D 2
A raw interface to CLNP is available
by creating an ISO socket of type SOCK_RAW.
This is used for CLNP debugging only.
.SH SEE ALSO
tp(4), clnp(4), cltp(4)
E 2
I 2
A raw interface to
.Tn CLNP
is available
by creating an
.Tn ISO
socket of type
.Dv SOCK_RAW .
This is used for
.Tn CLNP
debugging only.
.Sh SEE ALSO
.Xr tp 4 ,
.Xr clnp 4 ,
.Xr cltp 4
D 4
.Sh HISTORY
The
.Nm
protocol family implementation
.Ud
E 4
E 2
E 1
