h09495
s 00001/00001/00152
d D 8.2 93/11/30 16:48:29 mckusick 8 7
c copy edit changes from Usenix
e
s 00002/00002/00151
d D 8.1 93/06/05 13:46:29 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00110/00055/00043
d D 1.6 91/03/28 00:46:08 cael 6 5
c macro and text revision (-mdoc version 3)
e
s 00001/00011/00097
d D 1.5 90/06/23 18:04:32 trent 5 4
c new copyright notice
e
s 00020/00009/00088
d D 1.4 89/02/14 17:18:31 bostic 4 3
c add Berkeley specific copyright notice, remove subsection notation
e
s 00001/00001/00096
d D 1.3 86/05/21 15:57:47 anne 3 2
c spelling
e
s 00004/00004/00093
d D 1.2 86/05/13 17:43:31 karels 2 1
c correct see also
e
s 00097/00000/00000
d D 1.1 85/07/30 21:55:22 sklower 1 0
c date and time created 85/07/30 21:55:22 by sklower
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 6
.\" Copyright (c) 1985 The Regents of the University of California.
E 6
I 6
D 7
.\" Copyright (c) 1985, 1991 The Regents of the University of California.
E 6
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
E 4
.\"
I 4
D 5
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 5
I 5
.\" %sccs.include.redist.man%
E 5
.\"
E 4
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\"     %W% (Berkeley) %G%
E 6
.\"
D 4
.TH NS 4F "July 30, 1985"
E 4
I 4
D 6
.TH NS 4 "%Q%"
E 4
.UC 6
.SH NAME
ns \- Xerox Network Systems(tm) protocol family
.SH SYNOPSIS
\fBoptions NS\fP
.br
\fBoptions NSIP\fP
.br
\fBpseudo-device ns\fP
.SH DESCRIPTION
.IX  "ns device"  ""  "\fLns\fP \(em Xerox NS protocol family"
The NS protocol family is a collection of protocols
E 6
I 6
.Dd %Q%
.Dt NS 4
.Os BSD 4.3
.Sh NAME
.Nm ns
.Nd Xerox Network Systems(tm) protocol family
.Sh SYNOPSIS
.Nm options NS
.Nm options NSIP
.Nm pseudo-device ns
.Sh DESCRIPTION
The
.Tn NS
protocol family is a collection of protocols
E 6
layered atop the
D 6
.I Internet Datagram Protocol
(IDP) transport layer, and using the Xerox NS address formats.
The NS family provides protocol support for the
SOCK_STREAM, SOCK_DGRAM, SOCK_SEQPACKET, and SOCK_RAW socket types; the
SOCK_RAW interface is a debugging tool, allowing you to trace all packets
E 6
I 6
.Em Internet  Datagram  Protocol
.Pq Tn IDP
transport layer, and using the Xerox 
.Tn NS
address formats.
The
.Tn NS
family provides protocol support for the
.Dv SOCK_STREAM , SOCK_DGRAM , SOCK_SEQPACKET ,
and
.Dv SOCK_RAW
socket types; the
.Dv SOCK_RAW
interface is a debugging tool, allowing you to trace all packets
E 6
entering, (or with toggling kernel variable, additionally leaving) the local
host.
D 6
.SH ADDRESSING
NS addresses are 12 byte quantities, consisting of a 
E 6
I 6
.Sh ADDRESSING
.Tn NS
addresses are 12 byte quantities, consisting of a 
E 6
4 byte Network number, a 6 byte Host number and a 2 byte port number,
all stored in network standard format.
D 6
(on the VAX these are word and byte reversed; on the Sun they are not
E 6
I 6
(on the
.Tn VAX
these are word and byte reversed; on the
D 8
.Tn Sun
E 8
I 8
.Tn SUN 
E 8
they are not
E 6
reversed).  The include file
D 6
.RI < netns/ns.h >
defines the NS address as a structure containing unions (for quicker
E 6
I 6
.Aq Pa netns/ns.h
defines the
.Tn NS
address as a structure containing unions (for quicker
E 6
comparisons).
D 6
.PP
E 6
I 6
.Pp
E 6
Sockets in the Internet protocol family use the following
addressing structure:
D 6
.nf

E 6
I 6
.Bd -literal -offset indent
E 6
struct sockaddr_ns {
	short		sns_family;
	struct ns_addr	sns_addr;
	char		sns_zero[2];
};
D 6

where an ns_addr is composed as follows:

E 6
I 6
.Ed
.Pp
where an
.Ar ns_addr
is composed as follows:
.Bd -literal -offset indent
E 6
union ns_host {
	u_char		c_host[6];
	u_short		s_host[3];
};

union ns_net {
	u_char		c_net[4];
	u_short		s_net[2];
};

struct ns_addr {
	union ns_net	x_net;
	union ns_host	x_host;
	u_short	x_port;
};
D 6

.fi
E 6
I 6
.Ed
.Pp
E 6
Sockets may be created with an address of all zeroes to effect
D 6
``wildcard'' matching on incoming messages.
E 6
I 6
.Dq wildcard
matching on incoming messages.
E 6
The local port address specified in a
D 6
.IR bind (2)
call is restricted to be greater than NSPORT_RESERVED
(=3000, in <netns/ns.h>) unless the creating process is running
E 6
I 6
.Xr bind 2
call is restricted to be greater than
.Dv NSPORT_RESERVED
(=3000, in
.Aq Pa netns/ns.h )
unless the creating process is running
E 6
as the super-user, providing a space of protected port numbers.
D 6
.SH PROTOCOLS
The NS protocol family supported by the operating system
E 6
I 6
.Sh PROTOCOLS
The
.Tn NS
protocol family supported by the operating system
E 6
is comprised of
D 6
the Internet Datagram Protocol (IDP)
D 4
.IR idp (4P),
E 4
I 4
.IR idp (4),
E 4
Error Protocol (available through IDP),
E 6
I 6
the Internet Datagram Protocol
.Pq Tn IDP
.Xr idp 4 ,
Error Protocol (available through
.Tn IDP ) ,
E 6
and
D 6
Sequenced Packet Protocol (SPP)
D 4
.IR spp (4P).
E 4
I 4
.IR spp (4).
E 4
.LP
SPP is used to support the SOCK_STREAM and SOCK_SEQPACKET abstraction,
while IDP is used to support the SOCK_DGRAM abstraction.
E 6
I 6
Sequenced Packet Protocol
.Pq Tn SPP
.Xr spp 4 .
.Pp
.Tn SPP
is used to support the
.Dv SOCK_STREAM
and
.Dv SOCK_SEQPACKET
abstraction,
while
.Tn IDP
is used to support the
.Dv SOCK_DGRAM
abstraction.
E 6
The Error protocol is responded to by the kernel
to handle and report errors in protocol processing;
it is, however,
only accessible to user programs through heroic actions.
D 6
.SH SEE ALSO
D 2
intro(3N), byteorder(3N), gethostent(3N), getnetent(3N),
getprotoent(3N), getservent(3N), inet(3N), network(3N),
spp(4P), idp(4P), nsip(4)
E 2
I 2
D 4
intro(3), byteorder(3N), gethostbyname(3N), getnetent(3N),
getprotoent(3N), getservent(3N), ns(3N),
intro(4N), spp(4P), idp(4P), nsip(4)
E 4
I 4
intro(3), byteorder(3), gethostbyname(3), getnetent(3),
getprotoent(3), getservent(3), ns(3),
intro(4), spp(4), idp(4), nsip(4)
E 4
E 2
.br
Internet Transport Protocols, Xerox Corporation document XSIS-028112
.br
D 2
A 4.2BSD Interprocess Communication Primer
E 2
I 2
D 3
An Advanced 4.3BSD Interprocess Communication Tutuorial
E 3
I 3
An Advanced 4.3BSD Interprocess Communication Tutorial
E 6
I 6
.Sh SEE ALSO
.Xr intro 3 ,
.Xr byteorder 3 ,
.Xr gethostbyname 3 ,
.Xr getnetent 3 ,
.Xr getprotoent 3 ,
.Xr getservent 3 ,
.Xr ns 3 ,
.Xr intro 4 ,
.Xr spp 4 ,
.Xr idp 4 ,
.Xr nsip 4
.Rs
.%T "Internet Transport Protocols"
.%R Xerox Corporation document XSIS
.%N 028112
.Re
.Rs
.%T "An Advanced 4.3 BSD Interprocess Communication Tutorial"
.Re
.Sh HISTORY
The
.Nm
protocol family
appeared in
.Bx 4.3 .
E 6
E 3
E 2
E 1
