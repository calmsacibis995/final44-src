h55877
s 00001/00001/00164
d D 8.2 94/04/19 07:40:23 bostic 7 6
c spell
e
s 00002/00002/00163
d D 8.1 93/06/05 13:47:03 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00095/00067/00070
d D 1.5 91/03/28 00:46:13 cael 5 4
c macro and text revision (-mdoc version 3)
e
s 00001/00011/00136
d D 1.4 90/06/23 18:04:24 trent 4 3
c new copyright notice
e
s 00016/00005/00131
d D 1.3 89/02/14 17:18:34 bostic 3 2
c add Berkeley specific copyright notice, remove subsection notation
e
s 00010/00002/00126
d D 1.2 85/09/17 19:52:50 sklower 2 1
c document SO_MTU
e
s 00128/00000/00000
d D 1.1 85/07/30 21:55:26 sklower 1 0
c date and time created 85/07/30 21:55:26 by sklower
e
u
U
t
T
I 1
D 3
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 3
I 3
D 5
.\" Copyright (c) 1985 The Regents of the University of California.
E 5
I 5
D 6
.\" Copyright (c) 1985, 1991 The Regents of the University of California.
E 5
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1985, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
E 3
.\"
I 3
D 4
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 4
I 4
.\" %sccs.include.redist.man%
E 4
.\"
E 3
D 5
.\"	%W% (Berkeley) %G%
E 5
I 5
.\"     %W% (Berkeley) %G%
E 5
.\"
D 3
.TH SPP 4P "July 30, 1985"
E 3
I 3
D 5
.TH SPP 4 "%Q%"
E 3
.UC 6
.SH NAME
spp \- Xerox Sequenced Packet Protocol
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netns/ns.h>
.br
.B s = socket(AF_NS, SOCK_STREAM, 0);
.PP
.B #include <netns/sp.h>
.br
.B s = socket(AF_NS, SOCK_SEQPACKET, 0);
.SH DESCRIPTION
The SPP protocol provides reliable, flow-controlled, two-way
E 5
I 5
.Dd %Q%
.Dt SPP 4
.Os BSD 4.3
.Sh NAME
.Nm spp
.Nd Xerox Sequenced Packet Protocol
.Sh SYNOPSIS
.Fd #include <sys/socket.h>
.Fd #include <netns/ns.h>
.Fd #include <netns/sp.h>
.Ft int
.Fn socket AF_NS SOCK_STREAM 0
.Ft int
.Fn socket AF_NS SOCK_SEQPACKET 0
.Sh DESCRIPTION
The
.Tn SPP
protocol provides reliable, flow-controlled, two-way
E 5
transmission of data.  It is a byte-stream protocol used to
D 5
support the SOCK_STREAM abstraction.  SPP uses the standard
NS(tm) address formats.
.PP
Sockets utilizing the SPP protocol are either \*(lqactive\*(rq or
\*(lqpassive\*(rq.  Active sockets initiate connections to passive
sockets.  By default SPP sockets are created active; to create a
E 5
I 5
support the
.Dv SOCK_STREAM
abstraction.
.Tn SPP
uses the standard
.Tn NS Ns (tm)
address formats.
.Pp
Sockets utilizing the
.Tn SPP
protocol are either
.Dq active
or
.Dq passive .
Active sockets initiate connections to passive
sockets.  By default
.Tn SPP
sockets are created active; to create a
E 5
passive socket the
D 5
.IR listen (2)
E 5
I 5
.Xr listen 2
E 5
system call must be used
after binding the socket with the
D 5
.IR bind (2)
E 5
I 5
.Xr bind 2
E 5
system call.  Only
passive sockets may use the 
D 5
.IR accept (2)
E 5
I 5
.Xr accept 2
E 5
call to accept incoming connections.  Only active sockets may
use the
D 5
.IR connect (2)
E 5
I 5
.Xr connect 2
E 5
call to initiate connections.
D 5
.PP
Passive sockets may \*(lqunderspecify\*(rq their location to match
E 5
I 5
.Pp
Passive sockets may
.Dq underspecify
their location to match
E 5
incoming connection requests from multiple networks.  This
D 5
technique, termed \*(lqwildcard addressing\*(rq, allows a single
E 5
I 5
technique, termed
.Dq wildcard addressing ,
allows a single
E 5
server to provide service to clients on multiple networks.
D 5
To create a socket which listens on all networks, the NS
E 5
I 5
To create a socket which listens on all networks, the
.Tn NS
E 5
address of all zeroes must be bound.
D 5
The SPP port may still be specified
E 5
I 5
The
.Tn SPP
port may still be specified
E 5
at this time; if the port is not specified the system will assign one.
Once a connection has been established the socket's address is
fixed by the peer entity's location.   The address assigned the
socket is the address associated with the network interface
through which packets are being transmitted and received.  Normally
this address corresponds to the peer entity's network.
D 5
.LP
If the SOCK_SEQPACKET socket type is specified,
E 5
I 5
.Pp
If the
.Dv SOCK_SEQPACKET
socket type is specified,
E 5
each packet received has the actual 12 byte sequenced packet header
left for the user to inspect:
D 5
.nf
E 5
I 5
.Bd -literal -offset indent
E 5
struct sphdr {
D 5
	u_char		sp_cc;		/* \fIconnection control\fP */
#define	SP_EM	0x10			/* \fIend of message\fP */
	u_char		sp_dt;		/* \fIdatastream type\fP */
E 5
I 5
	u_char		sp_cc;	/* connection control */
#define	SP_EM	0x10		/* end of message */
	u_char		sp_dt;	/* datastream type */
E 5
	u_short		sp_sid;
	u_short		sp_did;
	u_short		sp_seq;
	u_short		sp_ack;
	u_short		sp_alo;
};
D 5
.fi
E 5
I 5
.Ed
.Pp
E 5
This facilitates the implementation of higher level Xerox protocols
which make use of the data stream type field and the end of message bit.
Conversely, the user is required to supply a 12 byte header,
the only part of which inspected is the data stream type and end of message
fields.
D 5
.LP
E 5
I 5
.Pp
E 5
For either socket type,
packets received with the Attention bit sent are interpreted as
D 5
out of band data.  Data sent with send(..., ..., ..., MSG_OOB)
E 5
I 5
out of band data.  Data sent with
.Dq send(..., ..., ..., Dv MSG_OOB )
E 5
cause the attention bit to be set.
D 5
.SH DIAGNOSTICS
E 5
I 5
.Sh DIAGNOSTICS
E 5
A socket operation may fail with one of the following errors returned:
D 5
.TP 20
[EISCONN]
E 5
I 5
.Bl -tag -width [EADDRNOTAVAIL]
.It Bq Er EISCONN
E 5
when trying to establish a connection on a socket which
already has one;
D 5
.TP 20
[ENOBUFS]
E 5
I 5
.It Bq Er ENOBUFS
E 5
when the system runs out of memory for
an internal data structure;
D 5
.TP 20
[ETIMEDOUT]
E 5
I 5
.It Bq Er ETIMEDOUT
E 5
when a connection was dropped
due to excessive retransmissions;
D 5
.TP 20
[ECONNRESET]
E 5
I 5
.It Bq Er ECONNRESET
E 5
when the remote peer
forces the connection to be closed;
D 5
.TP 20
[ECONNREFUSED]
E 5
I 5
.It Bq Er ECONNREFUSED
E 5
when the remote
peer actively refuses connection establishment (usually because
no process is listening to the port);
D 5
.TP 20
[EADDRINUSE]
E 5
I 5
.It Bq Er EADDRINUSE
E 5
when an attempt
is made to create a socket with a port which has already been
allocated;
D 5
.TP 20
[EADDRNOTAVAIL]
E 5
I 5
.It Bq Er EADDRNOTAVAIL
E 5
when an attempt is made to create a 
socket with a network address for which no network interface
exists.
D 5
.SH SOCKET OPTIONS
.TP 20
SO_DEFAULT_HEADERS
E 5
I 5
.El
.Sh SOCKET OPTIONS
.Bl -tag -width SO_DEFAULT_HEADERS
.It Dv SO_DEFAULT_HEADERS
E 5
when set, this determines the data stream type and whether
the end of message bit is to be set on every ensuing packet.
I 2
D 5
.TP 20
SO_MTU
E 5
I 5
.It Dv SO_MTU
E 5
D 7
This specifies the maximum ammount of user data in a single packet.
E 7
I 7
This specifies the maximum amount of user data in a single packet.
E 7
The default is 576 bytes - sizeof(struct spidp).  This quantity
D 5
affects windowing -- increasing it without increasing the amount
E 5
I 5
affects windowing \- increasing it without increasing the amount
E 5
of buffering in the socket will lower the number of unread packets
accepted.  Anything larger than the default will not be forwarded
D 5
by a bona fide XEROX product internetwork router.
E 5
I 5
by a bona fide
.Tn XEROX
product internetwork router.
E 5
The data argument for the setsockopt call must be
an unsigned short.
E 2
D 5
.SH SEE ALSO
D 3
intro(4N), ns(4F)
E 3
I 3
intro(4), ns(4)
E 3
.SH BUGS
E 5
I 5
.El
.Sh SEE ALSO
.Xr intro 4 ,
.Xr ns 4
.Sh HISTORY
The
.Nm
protocol appeared in
.Bx 4.3 .
.Sh BUGS
E 5
D 2
There should be a socket option to increase the nominal
maximum SPP packet size.
E 2
There should be some way to reflect record boundaries in
a stream.
For stream mode, there should be an option to get the data stream type of
the record the user process is about to receive.
E 1
