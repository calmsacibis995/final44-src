h25897
s 00002/00002/00150
d D 8.1 93/06/05 13:47:14 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00097/00060/00055
d D 6.5 91/03/28 00:46:14 cael 6 5
c macro and text revision (-mdoc version 3)
e
s 00001/00011/00114
d D 6.4 90/06/23 18:04:19 trent 5 4
c new copyright notice
e
s 00018/00007/00107
d D 6.3 89/02/14 17:18:35 bostic 4 3
c add Berkeley specific copyright notice, remove subsection notation
e
s 00026/00006/00088
d D 6.2 86/05/16 15:53:12 karels 3 2
c options, updates
e
s 00001/00001/00093
d D 6.1 85/05/15 17:47:17 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00094/00000/00000
d D 5.1 85/05/15 17:47:10 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 6
.\" Copyright (c) 1983 The Regents of the University of California.
E 6
I 6
D 7
.\" Copyright (c) 1983, 1991 The Regents of the University of California.
E 6
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
E 4
.\"
I 4
D 5
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 5
I 5
.\" %sccs.include.redist.man%
E 5
.\"
E 4
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\"     %W% (Berkeley) %G%
E 6
.\"
D 2
.TH TCP 4P "7 July 1983"
E 2
I 2
D 4
.TH TCP 4P "%Q%"
E 4
I 4
D 6
.TH TCP 4 "%Q%"
E 4
E 2
.UC 5
.SH NAME
tcp \- Internet Transmission Control Protocol
.SH SYNOPSIS
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.PP
.B s = socket(AF_INET, SOCK_STREAM, 0);
.SH DESCRIPTION
The TCP protocol provides reliable, flow-controlled, two-way
E 6
I 6
.Dd %Q%
.Dt TCP 4
.Os BSD 4.2
.Sh NAME
.Nm tcp
.Nd Internet Transmission Control Protocol
.Sh SYNOPSIS
.Fd #include <sys/socket.h>
.Fd #include <netinet/in.h>
.Ft int
.Fn socket AF_INET SOCK_STREAM 0
.Sh DESCRIPTION
The
.Tn TCP
protocol provides reliable, flow-controlled, two-way
E 6
transmission of data.  It is a byte-stream protocol used to
D 6
support the SOCK_STREAM abstraction.  TCP uses the standard
E 6
I 6
support the
.Dv SOCK_STREAM
abstraction.  TCP uses the standard
E 6
Internet address format and, in addition, provides a per-host
D 6
collection of \*(lqport addresses\*(rq.  Thus, each address is composed
E 6
I 6
collection of
.Dq port addresses .
Thus, each address is composed
E 6
of an Internet address specifying the host and network, with
D 6
a specific TCP port on the host identifying the peer entity.
.PP
Sockets utilizing the tcp protocol are either \*(lqactive\*(rq or
\*(lqpassive\*(rq.  Active sockets initiate connections to passive
sockets.  By default TCP sockets are created active; to create a
E 6
I 6
a specific
.Tn TCP
port on the host identifying the peer entity.
.Pp
Sockets utilizing the tcp protocol are either
.Dq active
or
.Dq passive .
Active sockets initiate connections to passive
sockets.  By default
.Tn TCP
sockets are created active; to create a
E 6
passive socket the
D 6
.IR listen (2)
E 6
I 6
.Xr listen 2
E 6
system call must be used
after binding the socket with the
D 6
.IR bind (2)
E 6
I 6
.Xr bind 2
E 6
system call.  Only
passive sockets may use the 
D 6
.IR accept (2)
E 6
I 6
.Xr accept 2
E 6
call to accept incoming connections.  Only active sockets may
use the
D 6
.IR connect (2)
E 6
I 6
.Xr connect 2
E 6
call to initiate connections.
D 6
.PP
Passive sockets may \*(lqunderspecify\*(rq their location to match
E 6
I 6
.Pp
Passive sockets may
.Dq underspecify
their location to match
E 6
incoming connection requests from multiple networks.  This
D 6
technique, termed \*(lqwildcard addressing\*(rq, allows a single
E 6
I 6
technique, termed
.Dq wildcard addressing ,
allows a single
E 6
server to provide service to clients on multiple networks.
To create a socket which listens on all networks, the Internet
D 6
address INADDR_ANY
must be bound.  The TCP port may still be specified
E 6
I 6
address
.Dv INADDR_ANY
must be bound.  The
.Tn TCP
port may still be specified
E 6
at this time; if the port is not specified the system will assign one.
Once a connection has been established the socket's address is
fixed by the peer entity's location.   The address assigned the
socket is the address associated with the network interface
through which packets are being transmitted and received.  Normally
this address corresponds to the peer entity's network.
I 3
D 6
.PP
TCP supports one socket option which is set with
.IR setsockopt (2)
E 6
I 6
.Pp
.Tn TCP
supports one socket option which is set with
.Xr setsockopt 2
E 6
and tested with
D 6
.IR getsockopt (2).
Under most circumstances, TCP sends data when it is presented;
E 6
I 6
.Xr getsockopt 2 .
Under most circumstances,
.Tn TCP
sends data when it is presented;
E 6
when outstanding data has not yet been acknowledged, it gathers
small amounts of output to be sent in a single packet once
an acknowledgement is received.
For a small number of clients, such as window systems
that send a stream of mouse events which receive no replies,
this packetization may cause significant delays.
D 6
Therefore, TCP provides a boolean option, TCP_NODELAY (from
.IR <netinet/tcp.h> ,
E 6
I 6
Therefore,
.Tn TCP
provides a boolean option,
.Dv TCP_NODELAY
(from
.Aq Pa netinet/tcp.h ,
E 6
to defeat this algorithm.
The option level for the
D 6
.I setsockopt
call is the protocol number for TCP,
E 6
I 6
.Xr setsockopt
call is the protocol number for
.Tn TCP ,
E 6
available from
D 4
.IR getprotobyname (3N).
E 4
I 4
D 6
.IR getprotobyname (3).
E 4
.PP
Options at the IP transport level may be used with TCP; see
D 4
.IR ip (4P).
E 4
I 4
.IR ip (4).
E 6
I 6
.Xr getprotobyname 3 .
.Pp
Options at the
.Tn IP
transport level may be used with
.Tn TCP ;
see
.Xr ip 4 .
E 6
E 4
Incoming connection requests that are source-routed are noted,
and the reverse source route is used in responding.
E 3
D 6
.SH DIAGNOSTICS
E 6
I 6
.Sh DIAGNOSTICS
E 6
A socket operation may fail with one of the following errors returned:
D 6
.TP 20
[EISCONN]
E 6
I 6
.Bl -tag -width [EADDRNOTAVAIL]
.It Bq Er EISCONN
E 6
when trying to establish a connection on a socket which
already has one;
D 6
.TP 20
[ENOBUFS]
E 6
I 6
.It Bq Er ENOBUFS
E 6
when the system runs out of memory for
an internal data structure;
D 6
.TP 20
[ETIMEDOUT]
E 6
I 6
.It Bq Er ETIMEDOUT
E 6
when a connection was dropped
due to excessive retransmissions;
D 6
.TP 20
[ECONNRESET]
E 6
I 6
.It Bq Er ECONNRESET
E 6
when the remote peer
forces the connection to be closed;
D 6
.TP 20
[ECONNREFUSED]
E 6
I 6
.It Bq Er ECONNREFUSED
E 6
when the remote
peer actively refuses connection establishment (usually because
no process is listening to the port);
D 6
.TP 20
[EADDRINUSE]
E 6
I 6
.It Bq Er EADDRINUSE
E 6
when an attempt
is made to create a socket with a port which has already been
allocated;
D 6
.TP 20
[EADDRNOTAVAIL]
E 6
I 6
.It Bq Er EADDRNOTAVAIL
E 6
when an attempt is made to create a 
socket with a network address for which no network interface
exists.
D 6
.SH SEE ALSO
D 3
intro(4N), inet(4F)
.SH BUGS
It should be possible to send and receive TCP options.
The system always tries to negotiates the maximum TCP segment
size to be 1024 bytes.  This can result in poor performance
if an intervening network performs excessive fragmentation.
E 3
I 3
D 4
getsockopt(2), socket(2), intro(4N), inet(4F), ip(4P)
E 4
I 4
getsockopt(2), socket(2), intro(4), inet(4), ip(4)
E 6
I 6
.El
.Sh SEE ALSO
.Xr getsockopt 2 ,
.Xr socket 2 ,
.Xr intro 4 ,
.Xr inet 4 ,
.Xr ip 4
.Sh HISTORY
The
.Nm
protocol stack appeared in
.Bx 4.2 .
E 6
E 4
E 3
E 1
