h23456
s 00002/00002/01383
d D 8.4 94/04/19 07:42:23 bostic 9 8
c spell
e
s 00002/00003/01383
d D 8.3 94/04/16 06:53:20 bostic 8 7
c typos
c From: kuku@acds.physik.rwth-aachen.de (Christoph Kukulies)
e
s 00053/00048/01333
d D 8.2 93/11/30 16:48:32 mckusick 7 6
c copy edit changes from Usenix
e
s 00002/00002/01379
d D 8.1 93/06/05 13:47:25 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/01380
d D 5.4 93/01/19 22:57:24 marc 5 4
c check in for Marc
e
s 00002/00002/01379
d D 5.3 92/07/14 14:45:54 cael 4 3
c attempted to get rid of extraneous blank line
e
s 01155/00566/00226
d D 5.2 92/07/12 13:18:24 cael 3 2
c mdoc version three, needs tlc (too posix)
e
s 00008/00001/00784
d D 5.1 91/09/26 16:11:16 bostic 2 1
c add sccs header, copyright, yank to 5.1
e
s 00785/00000/00000
d D 1.1 91/09/26 16:04:20 marc 1 0
c date and time created 91/09/26 16:04:20 by marc
e
u
U
t
T
I 1
D 2
.TH TERMIOS 4 "Jun 11, 1991"
E 2
I 2
D 3
.\" Copyright (c) 1991 The Regents of the University of California.
E 3
I 3
D 6
.\" Copyright (c) 1991, 1992 The Regents of the University of California.
E 3
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1991, 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
.\"
.\" %sccs.include.redist.roff%
.\"
.\"	%W% (Berkeley) %G%
.\"
D 3
.TH TERMIOS 4 "%Q%"
E 2
.UC 4
.SH NAME
termios - general terminal interface
.SH SYNOPSIS
#include <termios.h>
.SH DESCRIPTION
.PP
E 3
I 3
.Dd %Q%
.Dt TERMIOS 4
.Os BSD 4
.Sh NAME
.Nm termios
D 5
.Nd general terminal interface
E 5
I 5
.Nd general terminal line discipline
E 5
.Sh SYNOPSIS
.Fd #include <termios.h>
.Sh DESCRIPTION
E 3
This describes a general terminal line discipline that is
supported on tty asynchronous communication ports.
D 3
.LP
.B "Opening a Terminal Device File"
.LP
E 3
I 3
.Ss Opening a Terminal Device File
E 3
When a terminal file is opened, it normally causes the process to wait
until a connection is established.  For most hardware, the presence
D 3
of a connection is indicated by the assertion of the hardware CARRIER line.
E 3
I 3
of a connection is indicated by the assertion of the hardware
.Dv CARRIER line.
E 3
If the termios structure associated with the terminal file has the
D 3
CLOCAL flag set in the cflag, or if the O_NONBLOCK flag is set
in the open(2) call, then the open will succeed even without
E 3
I 3
.Dv CLOCAL
flag set in the cflag, or if the
.Dv O_NONBLOCK
flag is set
in the
.Xr open 2
call, then the open will succeed even without
E 3
a connection being present.
In practice, applications
seldom open these files; they are opened by special programs, such
D 3
as getty(2) or rlogind(2), and become
E 3
I 3
as
.Xr getty 2
or
.Xr rlogind 2 ,
and become
E 3
an application's standard input, output, and error files.
D 3
.LP
.B "Job Control in a Nutshell"
.LP
E 3
I 3
.Ss Job Control in a Nutshell
E 3
Every process is associated with a particular process group and session.
D 3
The grouping is hierarchical: every member of a particular process group is a 
E 3
I 3
The grouping is hierarchical: every member of a particular process group is a
E 3
member of the same session.  This structuring is used in managing groups
D 3
of related processes for purposes of "job control"; that is, the
ability from the keyboard (or from program control) to simultaneously 
E 3
I 3
of related processes for purposes of
.\" .Gw "job control" ;
.Em "job control" ;
that is, the
ability from the keyboard (or from program control) to simultaneously
E 3
stop or restart
a complex command (a command composed of one or more related
processes).  The grouping into process groups allows delivering
of signals that stop or start the group as a whole, along with
arbitrating which process group has access to the single controlling
D 3
terminal.  The grouping at a higher layer into sessions is to restrict 
E 3
I 3
terminal.  The grouping at a higher layer into sessions is to restrict
E 3
the job control related signals and system calls to within processes
resulting from a particular instance of a "login".  Typically, a session
is created when a user logs in, and the login terminal is setup
to be the controlling terminal; all processes spawned from that
login shell are in the same session, and inherit the controlling
D 3
terminal.  
E 3
I 3
terminal.
E 3
A job control shell
operating interactively (that is, reading commands from a terminal)
normally groups related processes together by placing them into the
same process group.  A set of processes in the same process group
D 3
is collectively refered to as a "job". When the foreground process 
E 3
I 3
D 9
is collectively refered to as a "job". When the foreground process
E 9
I 9
is collectively referred to as a "job". When the foreground process
E 9
E 3
group of the terminal is the same as the process group of a particular
job, that job is said to be in the "foreground".  When the process
group of the terminal is different than the process group of
D 3
a job (but is still the controlling terminal), that job is said 
E 3
I 3
a job (but is still the controlling terminal), that job is said
E 3
to be in the "background".  Normally the
shell reads a command and starts the job that implements that
command.  If the command is to be started in the foreground (typical), it
sets the process group of the terminal to the process group
of the started job, waits for the job to complete, and then
sets the process group of the terminal back to its own process
group (it puts itself into the foreground).  If the job is to
be started in the background (as denoted by the shell operator "&"),
it never changes the process group of the terminal and doesn't
wait for the job to complete (that is, it immediately attempts to read the next
command).  If the job is started in the foreground, the user may
D 3
type a key (ususally ^Z) which generates the terminal stop signal
(SIGTSTP) and has the affect of stopping the entire job. 
E 3
I 3
D 9
type a key (ususally
E 9
I 9
type a key (usually
E 9
.Ql \&^Z )
which generates the terminal stop signal
.Pq Dv SIGTSTP
and has the affect of stopping the entire job.
E 3
The shell will notice that the job stopped, and will resume running after
placing itself in the foreground.
The shell also has commands for placing stopped jobs in the background,
D 7
and for placing stopped or background jobs into to the foreground.
E 7
I 7
and for placing stopped or background jobs into the foreground.
E 7
D 3
.LP
.B "Orphaned Process Groups"
.LP
E 3
I 3
.Ss Orphaned Process Groups
E 3
An orphaned process group is a process group that has no process
whose parent is in a different process group, yet is in the same
session.  Conceptually it means a process group that doesn't have
a parent that could do anything if it were to be stopped.  For example,
the initial login shell is typically in an orphaned process group.
Orphaned process groups are immune to keyboard generated stop
signals and job control signals resulting from reads or writes to the
controlling terminal.
D 3
.LP
.B "The Controlling Terminal"
.LP
E 3
I 3
.Ss The Controlling Terminal
E 3
A terminal may belong to a process as its controlling terminal.  Each
process of a session that has a controlling terminal has the same
controlling terminal.  A terminal may be the controlling terminal for at
most one session.  The controlling terminal for a session is allocated by
D 3
the session leader by issueing the TIOCSCTTY ioctl.  A controlling terminal
E 3
I 3
the session leader by issuing the
.Dv TIOCSCTTY
ioctl.  A controlling terminal
E 3
D 7
is never acquired by mereley opening a terminal device file.
E 7
I 7
is never acquired by merely opening a terminal device file.
E 7
When a controlling terminal becomes
D 3
associated with a session, its foreground process group shall be set to
E 3
I 3
associated with a session, its foreground process group is set to
E 3
the process group of the session leader.
D 3
.PP
The controlling terminal is inherited by a child process during a fork()
E 3
I 3
.Pp
The controlling terminal is inherited by a child process during a
.Xr fork 2
E 3
function call.  A process relinquishes its controlling terminal when it
D 3
creates a new session with the setsid() function; other processes
E 3
I 3
creates a new session with the
.Xd setsid 2
function; other processes
E 3
remaining in the old session that had this terminal as their controlling
D 3
terminal continue to have it.  
E 3
I 3
terminal continue to have it.
E 3
A process does not relinquish its
controlling terminal simply by closing all of its file descriptors
associated with the controlling terminal if other processes continue to
have it open.
D 3
.PP
E 3
I 3
.Pp
E 3
When a controlling process terminates, the controlling terminal is
disassociated from the current session, allowing it to be acquired by a
new session leader.  Subsequent access to the terminal by other processes
in the earlier session will be denied, with attempts to access the
terminal treated as if modem disconnect had been sensed.
D 3
.LP
.B "Terminal Access Control"
.LP
E 3
I 3
.Ss Terminal Access Control
E 3
If a process is in the foreground process group of its controlling
D 3
terminal, read operations shall be allowed.  
E 3
I 3
terminal, read operations are allowed.
E 3
Any attempts by a process
D 3
in a background process group to read from its controlling terminal shall
cause its process group to be sent a SIGTTIN signal unless one of the
E 3
I 3
in a background process group to read from its controlling terminal
causes a
.Dv SIGTTIN
signal to be sent to
the process's group
unless one of the
E 3
following special cases apply:  If the reading process is ignoring or
D 3
blocking the SIGTTIN signal, or if the process group of the reading
process is orphaned, the read() returns -1 with errno set to [EIO] and no
signal is sent.  The default action of the SIGTTIN signal is to stop the
E 3
I 3
blocking the
.Dv SIGTTIN signal, or if the process group of the reading
process is orphaned, the
.Xr read 2
returns -1 with
.Va errno set to
.Er Dv EIO
and no
signal is sent.  The default action of the
.Dv SIGTTIN
signal is to stop the
E 3
process to which it is sent.
D 3
.PP
E 3
I 3
.Pp
E 3
If a process is in the foreground process group of its controlling
D 3
terminal, write operations shall be allowed.
E 3
I 3
terminal, write operations are allowed.
E 3
Attempts by a process in a background process group to write to its
D 3
controlling terminal shall cause the process group to be sent a SIGTTOU
signal unless one of the following special cases apply:  If TOSTOP is not
set, or if TOSTOP is set and the process is ignoring or blocking the
SIGTTOU signal, the process is allowed to write to the terminal and the
SIGTTOU signal is not sent.  If TOSTOP is set, and the process group of
E 3
I 3
controlling terminal will cause the process group to be sent a
.Dv SIGTTOU
signal unless one of the following special cases apply:  If
.Dv TOSTOP
is not
set, or if
.Dv TOSTOP
is set and the process is ignoring or blocking the
.Dv SIGTTOU
signal, the process is allowed to write to the terminal and the
.Dv SIGTTOU
signal is not sent.  If
.Dv TOSTOP
is set, and the process group of
E 3
the writing process is orphaned, and the writing process is not ignoring
D 3
or blocking SIGTTOU, the write() returns -1 with errno set to [EIO] and
no signal is sent.
.PP
E 3
I 3
or blocking
.Dv SIGTTOU ,
the
.Xr write
returns -1 with
errno set to
.Er Dv EIO
and no signal is sent.
.Pp
E 3
Certain calls that set terminal parameters are treated in the same
D 3
fashion as write, except that TOSTOP is ignored; that is, the effect is
identical to that of terminal writes when TOSTOP is set.
.LP
.B "Input Processing and Reading Data"
.LP
E 3
I 3
fashion as write, except that
.Dv TOSTOP
is ignored; that is, the effect is
identical to that of terminal writes when
.Dv TOSTOP
is set.
.Ss Input Processing and Reading Data
E 3
A terminal device associated with a terminal device file may operate in
full-duplex mode, so that data may arrive even while output is occurring.
Each terminal device file has associated with it an input queue, into
which incoming data is stored by the system before being read by a
D 3
process.  The system imposees a limit, {MAX_INPUT}, on the number of
E 3
I 3
process.  The system imposes a limit,
.Pf \&{ Dv MAX_INPUT Ns \&} ,
on the number of
E 3
bytes that may be stored in the input queue.  The behavior of the system
D 3
when this limit is exceeded depends on the setting of the IMAXBEL
flag in the termios c_iflag.  If this flag is set, the terminal
is a sent an ASCII BEL character each time a character is recieved
E 3
I 3
when this limit is exceeded depends on the setting of the
.Dv IMAXBEL
flag in the termios
.Fa c_iflag .
If this flag is set, the terminal
D 8
is a sent an
E 8
I 8
is sent an
E 8
.Tn ASCII
.Dv BEL
D 7
character each time a character is recieved
E 7
I 7
character each time a character is received
E 7
E 3
while the input queue is full.  Otherwise, the input queue is flushed
upon receiving the character.
D 3
.PP
E 3
I 3
.Pp
E 3
Two general kinds of input processing are available, determined by
whether the terminal device file is in canonical mode or noncanonical
mode. Additionally,
D 3
input characters are processed according to the c_iflag and
c_lflag fields.  Such processing can include echoing, which
E 3
I 3
input characters are processed according to the
.Fa c_iflag
and
.Fa c_lflag
fields.  Such processing can include echoing, which
E 3
in general means transmitting input characters immediately back to the
terminal when they are received from the terminal.  This is useful for
terminals that can operate in full-duplex mode.
D 3
.PP
E 3
I 3
.Pp
E 3
The manner in which data is provided to a process reading from a terminal
device file is dependent on whether the terminal device file is in
canonical or noncanonical mode.
D 3
.PP
Another dependency is whether the O_NONBLOCK flag is set by open() or
fcntl().  If the O_NONBLOCK flag is clear, then the read request shall be
E 3
I 3
.Pp
Another dependency is whether the
.Dv O_NONBLOCK
flag is set by
.Xr open()
or
.Xr fcntl() .
If the
.Dv O_NONBLOCK
flag is clear, then the read request is
E 3
blocked until data is available or a signal has been received.  If the
D 3
O_NONBLOCK flag is set, then the read request shall be completed, without
E 3
I 3
.Dv O_NONBLOCK
flag is set, then the read request is completed, without
E 3
blocking, in one of three ways:
D 3
.nf
    (1)  If there is enough data available to satisfy the entire request,
         the read() shall complete successfully and return the number of
         bytes read.

    (2)  If there is not enough data available to satisfy the entire
         request, the read() shall complete successfully, having read as
         much data as possible, and return the number of bytes it was
         able to read.

    (3)  If there is no data available, the read() shall return -1, with
         errno set to [EAGAIN].
.fi
.PP
E 3
I 3
.Bl -enum -offset indent
.It
If there is enough data available to satisfy the entire request,
and the read completes successfully the number of
bytes read is returned.
.It
If there is not enough data available to satisfy the entire
request, and the read completes successfully, having read as
much data as possible, the number of bytes read is returned.
.It
If there is no data available, the read returns -1, with
errno set to
D 7
.Br EAGAIN .
E 7
I 7
.Er EAGAIN .
E 7
.El
.Pp
E 3
When data is available depends on whether the input processing mode is
D 3
canonical or noncanonical.  
.LP
.B "Canonical Mode Input Processing"
.LP
E 3
I 3
canonical or noncanonical.
.Ss Canonical Mode Input Processing
E 3
In canonical mode input processing, terminal input is processed in units
D 3
of lines.  A line is delimited by a newline ('\\n') character, an end-of-
file (EOF) character, or an end-of-line (EOL) character.  See the "Special
Characters" section
for
more information on EOF and EOL.  This means that a read request shall
E 3
I 3
of lines.  A line is delimited by a newline
.Ql \&\en
character, an end-of-file
.Pq Dv EOF
character, or an end-of-line
.Pq Dv EOL
character.  See the
.Sx "Special Characters"
section for
more information on
.Dv EOF
and
.Dv EOL .
This means that a read request will
E 3
not return until an entire line has been typed, or a signal has been
received.  Also, no matter how many bytes are requested in the read call,
D 3
at most one line shall be returned.  It is not, however, necessary to
E 3
I 3
at most one line is returned.  It is not, however, necessary to
E 3
read a whole line at once; any number of bytes, even one, may be
requested in a read without losing information.
D 3
.PP
{MAX_CANON} is a limit on the
number of bytes in a line.  
E 3
I 3
.Pp
.Pf \&{ Dv MAX_CANON Ns \&}
is a limit on the
number of bytes in a line.
E 3
The behavior of the system when this limit is
D 3
exceeded is the same as when the input queue limit {MAX_INPUT}, is exceeded.
.PP
E 3
I 3
exceeded is the same as when the input queue limit
.Pf \&{ Dv MAX_INPUT Ns \&} ,
is exceeded.
.Pp
E 3
Erase and kill processing occur when either of two special characters,
D 3
the ERASE and KILL characters (see the Special Characters section), is received.
E 3
I 3
the
.Dv ERASE
and
.Dv KILL
characters (see the
.Sx "Special Characters section" ) ,
is received.
E 3
This processing affects data in the input queue that has not yet been
D 3
delimited by a newline (NL), EOF, or EOL character.  This un-delimited
data makes up the current line.  The ERASE character deletes the last
character in the current line, if there is any.  The KILL character
deletes all data in the current line, if there is any.  The ERASE and
KILL characters have no effect if there is no data in the current line.
The ERASE and KILL characters themselves are not placed in the input
E 3
I 3
delimited by a newline
.Dv NL,
.Dv EOF ,
or
.Dv EOL
character.  This un-delimited
data makes up the current line.  The
.Dv ERASE
character deletes the last
character in the current line, if there is any.  The
.Dv KILL
character
deletes all data in the current line, if there is any.  The
.Dv ERASE
and
.Dv KILL
characters have no effect if there is no data in the current line.
The
.Dv ERASE
and
.Dv KILL
characters themselves are not placed in the input
E 3
queue.
D 3
.LP
.B "Noncanonical Mode Input Processing"
.LP
E 3
I 3
.Ss Noncanonical Mode Input Processing
E 3
In noncanonical mode input processing, input bytes are not assembled into
lines, and erase and kill processing does not occur.  The values of the
D 3
MIN and TIME members of the c_cc array are used to determine how to
E 3
I 3
.Dv MIN
and
.Dv TIME
members of the
.Fa c_cc
array are used to determine how to
E 3
process the bytes received.
D 3
.PP
MIN represents the minimum number of bytes that should be received when
the read() function successfully returns.  TIME is a timer of 0.1 second
E 3
I 3
.Pp
.Dv MIN
represents the minimum number of bytes that should be received when
the
.Xr read
function successfully returns.
.Dv TIME
is a timer of 0.1 second
E 3
granularity that is used to time out bursty and short term data
D 3
transmissions.  If MIN is greater than {MAX_INPUT}, the response to the
request is undefined.  The four possible values for MIN and TIME and
E 3
I 3
transmissions.  If
.Dv MIN
is greater than
.Dv \&{ Dv MAX_INPUT Ns \&} ,
the response to the
request is undefined.  The four possible values for
.Dv MIN
and
.Dv TIME
and
E 3
their interactions are described below.
D 3
.LP
.B "Case A: MIN > 0, TIME > 0"
.LP
In this case TIME serves as an inter-byte timer and is activated after
E 3
I 3
.Ss "Case A: MIN > 0, TIME > 0"
In this case
.Dv TIME
serves as an inter-byte timer and is activated after
E 3
the first byte is received.  Since it is an inter-byte timer, it is reset
D 3
after a byte is received.  The interaction between MIN and TIME is as
E 3
I 3
after a byte is received.  The interaction between
.Dv MIN
and
.Dv TIME
is as
E 3
follows:  as soon as one byte is received, the inter-byte timer is
D 3
started.  If MIN bytes are received before the inter-byte timer expires
E 3
I 3
started.  If
.Dv MIN
bytes are received before the inter-byte timer expires
E 3
(remember that the timer is reset upon receipt of each byte), the read is
D 3
satisfied.  If the timer expires before MIN bytes are received, the
E 3
I 3
satisfied.  If the timer expires before
.Dv MIN
bytes are received, the
E 3
characters received to that point are returned to the user.  Note that if
D 3
TIME expires at least one byte shall be returned because the timer would
not have been enabled unless a byte was received.  In this case (MIN > 0,
TIME > 0) the read shall block until the MIN and TIME mechanisms are
E 3
I 3
.Dv TIME
expires at least one byte is returned because the timer would
not have been enabled unless a byte was received.  In this case
.Pf \&( Dv MIN
> 0,
.Dv TIME
> 0) the read blocks until the
.Dv MIN
and
.Dv TIME
mechanisms are
E 3
activated by the receipt of the first byte, or a signal is received.  If
D 3
data is in the buffer at the time of the read(), the result shall be as
E 3
I 3
data is in the buffer at the time of the read(), the result is as
E 3
if data had been received immediately after the read().
D 3
.LP
.B "Case B: MIN > 0, TIME = 0"
.LP
In this case, since the value of TIME is zero, the timer plays no role
and only MIN is significant.  A pending read is not satisfied until MIN
bytes are received (i.e., the pending read shall block until MIN bytes
E 3
I 3
.Ss "Case B: MIN > 0, TIME = 0"
In this case, since the value of
.Dv TIME
is zero, the timer plays no role
and only
.Dv MIN
is significant.  A pending read is not satisfied until
.Dv MIN
bytes are received (i.e., the pending read blocks until
.Dv MIN
bytes
E 3
are received), or a signal is received.  A program that uses this case to
D 3
read record-based terminal I/O may block indefinitely in the read
E 3
I 3
read record-based terminal
.Dv I/O
may block indefinitely in the read
E 3
operation.
D 3
.LP
.B "Case C: MIN = 0, TIME > 0"
.LP
In this case, since MIN = 0, TIME no longer represents an inter-byte
E 3
I 3
.Ss "Case C: MIN = 0, TIME > 0"
In this case, since
.Dv MIN
= 0,
.Dv TIME
no longer represents an inter-byte
E 3
timer.  It now serves as a read timer that is activated as soon as the
D 3
read() function is processed.  A read is satisfied as soon as a single
E 3
I 3
read function is processed.  A read is satisfied as soon as a single
E 3
byte is received or the read timer expires.  Note that in this case if
D 3
the timer expires, no bytes shall be returned.  If the timer does not
E 3
I 3
the timer expires, no bytes are returned.  If the timer does not
E 3
expire, the only way the read can be satisfied is if a byte is received.
D 3
In this case the read shall not block indefinitely waiting for a byte; if
no byte is received within TIME*0.1 seconds after the read is initiated,
the read() shall return a value of zero, having read no data.  If data is
in the buffer at the time of the read(), the timer shall be started as if
data had been received immediately after the read().
.LP
.B "Case D: MIN = 0, TIME = 0"
.LP
E 3
I 3
In this case the read will not block indefinitely waiting for a byte; if
no byte is received within
.Dv TIME Ns *0.1
seconds after the read is initiated,
the read returns a value of zero, having read no data.  If data is
in the buffer at the time of the read, the timer is started as if
data had been received immediately after the read.
.Ss Case D: MIN = 0, TIME = 0
E 3
The minimum of either the number of bytes requested or the number of
D 3
bytes currently available shall be returned without waiting for more
bytes to be input.  If no characters are available, read() shall return a
E 3
I 3
bytes currently available is returned without waiting for more
bytes to be input.  If no characters are available, read returns a
E 3
value of zero, having read no data.
D 3
.LP
.B "Writing Data and Output Processing"
.LP
E 3
I 3
.Ss Writing Data and Output Processing
E 3
When a process writes one or more bytes to a terminal device file, they
D 3
are processed according to the c_oflag field (see the Output Modes
E 3
I 3
are processed according to the
.Fa c_oflag
field (see the
.Sx "Output Modes
E 3
section).  The
implementation may provide a buffering mechanism; as such, when a call to
write() completes, all of the bytes written have been scheduled for
transmission to the device, but the transmission will not necessarily
D 3
have completed.  See also 6.4.2 for the effects of O_NONBLOCK on write().
.LP
.B "Special Characters"
.LP
E 3
I 3
D 7
have completed.
E 7
I 7
have been completed.
E 7
.\" See also .Sx "6.4.2" for the effects of
.\" .Dv O_NONBLOCK
.\" on write.
.Ss Special Characters
E 3
Certain characters have special functions on input or output or both.
These functions are summarized as follows:
D 3
.nf
   INTR          Special character on input and is recognized if the ISIG
                 flag (see the Local Modes section) is enabled.  Generates 
		 a SIGINT
                 signal which is sent to all processes in the foreground
                 process group for which the terminal is the controlling
                 terminal.  If ISIG is set, the INTR character is
                 discarded when processed.

   QUIT          Special character on input and is recognized if the ISIG
                 flag is enabled.  Generates a SIGQUIT signal which is
                 sent to all processes in the foreground process group
                 for which the terminal is the controlling terminal.  If
                 ISIG is set, the QUIT character is discarded when
                 processed.

   ERASE         Special character on input and is recognized if the
                 ICANON flag is set.  Erases the last character in the
                 current line; see "Canonical Mode Input Processing".  
		  It shall not erase beyond
                 the start of a line, as delimited by an NL, EOF, or EOL
                 character.  If ICANON is set, the ERASE character is
                 discarded when processed.

   KILL          Special character on input and is recognized if the
                 ICANON flag is set.  Deletes the entire line, as
                 delimited by a NL, EOF, or EOL character.  If ICANON is
                 set, the KILL character is discarded when processed.

   EOF           Special character on input and is recognized if the
                 ICANON flag is set.  When received, all the bytes
                 waiting to be read are immediately passed to the
                 process, without waiting for a newline, and the EOF is
                 discarded.  Thus, if there are no bytes waiting (that
                 is, the EOF occurred at the beginning of a line), a byte
                 count of zero shall be returned from the read(),
                 representing an end-of-file indication.  If ICANON is
                 set, the EOF character is discarded when processed.

   NL            Special character on input and is recognized if the
                 ICANON flag is set.  It is the line delimiter ('\\n').

   EOL           Special character on input and is recognized if the
                 ICANON flag is set.  Is an additional line delimiter,
                 like NL.

   SUSP          If the ISIG
                 flag is enabled, receipt of the SUSP character causes a
                 SIGTSTP signal to be sent to all processes in the
                 foreground process group for which the terminal is the
                 controlling terminal, and the SUSP character is
                 discarded when processed.

   STOP          Special character on both input and output and is
                 recognized if the IXON (output control) or IXOFF (input
                 control) flag is set.  Can be used to temporarily
                 suspend output.  It is useful with fast terminals to
                 prevent output from disappearing before it can be read.
                 If IXON is set, the STOP character is discarded when
                 processed.

   START         Special character on both input and output and is
                 recognized if the IXON (output control) or IXOFF (input
                 control) flag is set.  Can be used to resume output that
                 has been suspended by a STOP character.  If IXON is set,
                 the START character is discarded when processed.

   CR            Special character on input and is recognized if the
                 ICANON flag is set; it is the '\\r', as denoted in the
                 C Standard {2}.  When ICANON and ICRNL are set and IGNCR
                 is not set, this character is translated into a NL, and
                 has the same effect as a NL character.

.fi
E 3
I 3
.Bl -tag -width indent
.It Dv INTR
Special character on input and is recognized if the
.Dv ISIG
flag (see the
.Sx "Local Modes"
section) is enabled.  Generates a
.Dv SIGINT
signal which is sent to all processes in the foreground
process group for which the terminal is the controlling
terminal.  If
.Dv ISIG
is set, the
.Dv INTR
character is
discarded when processed.
.It Dv QUIT
Special character on input and is recognized if the
.Dv ISIG
flag is enabled.  Generates a
.Dv SIGQUIT
signal which is
sent to all processes in the foreground process group
for which the terminal is the controlling terminal.  If
.Dv ISIG
is set, the
.Dv QUIT
character is discarded when
processed.
.It Dv ERASE
Special character on input and is recognized if the
.Dv ICANON
flag is set.  Erases the last character in the
current line; see
.Sx "Canonical Mode Input Processing" .
It does not erase beyond
the start of a line, as delimited by an
.Dv NL ,
.Dv EOF ,
or
.Dv EOL
character.  If
.Dv ICANON
is set, the
.Dv ERASE
character is
discarded when processed.
.It Dv KILL
Special character on input and is recognized if the
.Dv ICANON
flag is set.  Deletes the entire line, as
delimited by a
.Dv NL ,
.Dv EOF ,
or
.Dv EOL
character.  If
.Dv ICANON
is set, the
.Dv KILL
character is discarded when processed.
.It Dv EOF
Special character on input and is recognized if the
.Dv ICANON
flag is set.  When received, all the bytes
waiting to be read are immediately passed to the
process, without waiting for a newline, and the
.Dv EOF
is discarded.  Thus, if there are no bytes waiting (that
is, the
.Dv EOF
occurred at the beginning of a line), a byte
count of zero is returned from the read(),
representing an end-of-file indication.  If
.Dv ICANON
is
set, the
.Dv EOF
character is discarded when processed.
.Dv NL
Special character on input and is recognized if the
.Dv ICANON
flag is set.  It is the line delimiter
.Ql \&\en .
.It Dv EOL
Special character on input and is recognized if the
.Dv ICANON
flag is set.  Is an additional line delimiter,
like
.Dv NL .
.It Dv SUSP
If the
.Dv ISIG
flag is enabled, receipt of the
.Dv SUSP
character causes a
.Dv SIGTSTP
signal to be sent to all processes in the
foreground process group for which the terminal is the
controlling terminal, and the
.Dv SUSP
character is
discarded when processed.
.It Dv STOP
Special character on both input and output and is
recognized if the
.Dv IXON
(output control) or
.Dv IXOFF
(input
control) flag is set.  Can be used to temporarily
suspend output.  It is useful with fast terminals to
prevent output from disappearing before it can be read.
If
.Dv IXON
is set, the
.Dv STOP
character is discarded when
processed.
.It Dv START
Special character on both input and output and is
recognized if the
.Dv IXON
(output control) or
.Dv IXOFF
(input
control) flag is set.  Can be used to resume output that
has been suspended by a
.Dv STOP
character.  If
.Dv IXON
is set, the
.Dv START
character is discarded when processed.
.Dv CR
Special character on input and is recognized if the
.Dv ICANON
flag is set; it is the
.Ql \&\er ,
as denoted in the
.Tn \&C
Standard {2}.  When
.Dv ICANON
and
.Dv ICRNL
are set and
.Dv IGNCR
is not set, this character is translated into a
.Dv NL ,
and
has the same effect as a
.Dv NL
character.
.El
.Pp
E 3
The following special characters are extensions defined by this
system and are not a part of 1003.1 termios.
D 3
.nf

   EOL2		 Secondary EOL character.  Same function as EOL.

   WERASE	 Special character on input and is recognized if the
		 ICANON flag is set.  Erases the last word in the current
		 line according to one of two algorithms.  If the ALTWERASE
		 flag is not set, first any preceding whitespace is
		 erased, and then the maximal sequence of non-whitespace
		 characters.  If ALTWERASE is set, first any preceding
		 whitespace is erased, and then the maximal sequence
		 of alphabetic/underscores or non alphabetic/underscores.
		 As a special case in this second algorithm, the first previous
		 non-whitespace character is skippied in determining
		 whether the preceding word is a sequence of 
		 alphabetic/undercores.  This sounds confusing but turns
		 out to be quite practical.

   REPRINT	 Special character on input and is recognized if the
		 ICANON flag is set.  Causes the current input edit line
		 to be retyped.

   DSUSP	 Has similar actions to the SUSP character, except that
		 the SIGTSTP signal is delivered when one of the processes
		 in the foreground process group issues a read() to the
		 controlling terminal. 

   LNEXT	 Special character on input and is recognized if the IEXTEN
		 flag is set.  Receipt of this character causes the next
		 character to be taken literally.

   DISCARD	 Special character on input and is recognized if the IEXTEN
		 flag is set.  Receipt of this character toggles the flushing
		 of terminal output.  

   STATUS	 Special character on input and is recognized if the ICANON
		 flag is set.  Receipt of this character causes a SIGINFO
		 signal to be sent to the forground process group of the
		 terminal.  Also, if the NOKERNINFO flag is not set, it
		 causes the kernel to write a status message to the terminal
		 that displays the current load average, the name of the
		 command in the foreground, its process ID, the symbolic
		 wait channel, the number of user and system seconds used,
		 the percentage of cpu the process is getting, and the resident
		 set size of the process.


.fi
.pp
The NL and CR characters cannot be changed.  
E 3
I 3
.Bl -tag -width indent
D 4
.It Dv EOL2	
E 4
I 4
.It Dv EOL2
E 4
Secondary
.Dv EOL
character.  Same function as
.Dv EOL.
.It Dv WERASE
Special character on input and is recognized if the
.Dv ICANON
flag is set.  Erases the last word in the current
line according to one of two algorithms.  If the
.Dv ALTWERASE
flag is not set, first any preceding whitespace is
erased, and then the maximal sequence of non-whitespace
characters.  If
.Dv ALTWERASE
is set, first any preceding
whitespace is erased, and then the maximal sequence
of alphabetic/underscores or non alphabetic/underscores.
As a special case in this second algorithm, the first previous
D 7
non-whitespace character is skippied in determining
E 7
I 7
non-whitespace character is skipped in determining
E 7
whether the preceding word is a sequence of
alphabetic/undercores.  This sounds confusing but turns
out to be quite practical.
.It Dv REPRINT
Special character on input and is recognized if the
.Dv ICANON
flag is set.  Causes the current input edit line
to be retyped.
.It Dv DSUSP
Has similar actions to the
.Dv SUSP
character, except that
the
.Dv SIGTSTP
signal is delivered when one of the processes
in the foreground process group issues a read() to the
controlling terminal.
.It Dv LNEXT
Special character on input and is recognized if the
.Dv IEXTEN
flag is set.  Receipt of this character causes the next
character to be taken literally.
.It Dv DISCARD
Special character on input and is recognized if the
.Dv IEXTEN
flag is set.  Receipt of this character toggles the flushing
of terminal output.
.It Dv STATUS
Special character on input and is recognized if the
.Dv ICANON
flag is set.  Receipt of this character causes a
.Dv SIGINFO
D 7
signal to be sent to the forground process group of the
E 7
I 7
signal to be sent to the foreground process group of the
E 7
terminal.  Also, if the
.Dv NOKERNINFO
flag is not set, it
causes the kernel to write a status message to the terminal
that displays the current load average, the name of the
command in the foreground, its process ID, the symbolic
wait channel, the number of user and system seconds used,
the percentage of cpu the process is getting, and the resident
set size of the process.
.El
.Pp
The
.Dv NL
and
.Dv CR
characters cannot be changed.
E 3
The values for all the remaining characters can be set and are
D 3
described later in the document under Special Control Characters.
.PP
E 3
I 3
described later in the document under
Special Control Characters.
.Pp
E 3
Special
character functions associated with changeable special control characters
D 3
can be disabled individually by setting their value to {_POSIX_VDISABLE};
see "Special Control Characters".
.PP
E 3
I 3
can be disabled individually by setting their value to
.Dv {_POSIX_VDISABLE};
see
.Sx "Special Control Characters" .
.Pp
E 3
If two or more special characters have the same value, the function
performed when that character is received is undefined.
D 3
.LP
.B "Modem Disconnect"
.LP
E 3
I 3
.Ss Modem Disconnect
E 3
If a modem disconnect is detected by the terminal interface for a
D 3
controlling terminal, and if CLOCAL is not set in the c_cflag field for
the terminal, the SIGHUP signal is sent to the controlling
E 3
I 3
controlling terminal, and if
.Dv CLOCAL
is not set in the
.Fa c_cflag
field for
the terminal, the
.Dv SIGHUP
signal is sent to the controlling
E 3
process associated with the terminal.  Unless other arrangements have
been made, this causes the controlling process to terminate.
D 3
Any subsequent call to the read() function shall return the value zero,
E 3
I 3
D 7
Any subsequent call to the read() function return the value zero,
E 7
I 7
Any subsequent call to the read() function returns the value zero,
E 7
E 3
indicating end of file.  Thus, processes that read a terminal
file and test for end-of-file can terminate appropriately after a
D 3
disconnect.  If the [EIO] condition specified in 6.1.1.4 that applies
when the implementation supports job control also exists, it is
unspecified whether the EOF condition or the [EIO] is returned.  Any
subsequent write() to the terminal device returns -1, with errno set to
[EIO], until the device is closed.
.LP
.B "General Terminal Interface"
.LP
.B "Closing a Terminal Device File"
.LP
The last process to close a terminal device file shall cause any output
to be sent to the device and any input to be discarded.  Then, if HUPCL
E 3
I 3
disconnect.
.\" If the
.\" .Er EIO
.\" condition specified in 6.1.1.4 that applies
.\" when the implementation supports job control also exists, it is
.\" unspecified whether the
.\" .Dv EOF
.\" condition or the
.\" .Pf [ Dv EIO
.\" ] is returned.
Any
subsequent write() to the terminal device returns -1, with
.Va errno
set to
.Er EIO ,
until the device is closed.
.Sh General Terminal Interface
.Pp
.Ss Closing a Terminal Device File
The last process to close a terminal device file causes any output
to be sent to the device and any input to be discarded.  Then, if
.Dv HUPCL
E 3
is set in the control modes, and the communications port supports a
D 3
disconnect function, the terminal device shall perform a disconnect.
.LP
.B "Parameters That Can Be Set"
.LP
Routines that need to control certain terminal I/O characteristics shall
E 3
I 3
disconnect function, the terminal device performs a disconnect.
.Ss Parameters That Can Be Set
Routines that need to control certain terminal
.Tn I/O
characteristics
E 3
do so by using the termios structure as defined in the header
D 3
<termios.h>.
E 3
I 3
.Aq Pa termios.h .
E 3
This structure contains minimally four scalar elements of bit flags
and one array of special characters.  The scalar flag elements are
D 3
named: c_iflag, c_oflag, c_cflag, and c_lflag.  The character array
is named c_cc, and its maximum index is NCCS.
.LP
.B "Input Modes"
.LP
Values of the c_iflag field describe the basic
E 3
I 3
named:
.Fa c_iflag ,
.Fa c_oflag ,
.Fa c_cflag ,
and
D 7
.Fa c_lflag .  The character array
is named
E 7
I 7
.Fa c_lflag .
The character array is named
E 7
.Fa c_cc ,
and its maximum index is
.Dv NCCS .
.Ss Input Modes
Values of the
.Fa c_iflag
field describe the basic
E 3
terminal input control, and are composed of
D 3
following masks: 
.nf
	(XXX cael - make into table)
	IGNBRK /* ignore BREAK condition */
	BRKINT /* map BREAK to SIGINTR */
	IGNPAR /* ignore (discard) parity errors */
	PARMRK /* mark parity and framing errors */
	INPCK  /* enable checking of parity errors */
	ISTRIP /* strip 8th bit off chars */
	INLCR  /* map NL into CR */
	IGNCR  /* ignore CR */
	ICRNL  /* map CR to NL (ala CRMOD) */
	IXON   /* enable output flow control */
	IXOFF  /* enable input flow control */
	IXANY  /* any char will restart after stop */
	IMAXBEL /* ring bell on input queue full */
.fi
.PP
E 3
I 3
following masks:
.Pp
.Bl -tag -width IMAXBEL -offset indent -compact
.It Dv IGNBRK
/* ignore BREAK condition */
.It Dv BRKINT
/* map BREAK to SIGINTR */
.It Dv IGNPAR
/* ignore (discard) parity errors */
.It Dv PARMRK
/* mark parity and framing errors */
.It Dv INPCK
/* enable checking of parity errors */
.It Dv ISTRIP
/* strip 8th bit off chars */
.It Dv INLCR
/* map NL into CR */
.It Dv IGNCR
/* ignore CR */
.It Dv ICRNL
/* map CR to NL (ala CRMOD) */
.It Dv IXON
/* enable output flow control */
.It Dv IXOFF
/* enable input flow control */
.It Dv IXANY
/* any char will restart after stop */
.It Dv IMAXBEL
/* ring bell on input queue full */
.El
.Pp
E 3
In the context of asynchronous serial data transmission, a break
condition is defined as a sequence of zero-valued bits that continues for
more than the time to send one byte.  The entire sequence of zero-valued
bits is interpreted as a single break condition, even if it continues for
a time equivalent to more than one byte.  In contexts other than
asynchronous serial data transmission the definition of a break condition
is implementation defined.
D 3
.PP
If IGNBRK is set, a break condition detected on input is ignored, that
E 3
I 3
.Pp
If
.Dv IGNBRK
is set, a break condition detected on input is ignored, that
E 3
is, not put on the input queue and therefore not read by any process.  If
D 3
IGNBRK is not set and BRKINT is set, the break condition shall flush the
E 3
I 3
.Dv IGNBRK
is not set and
.Dv BRKINT
is set, the break condition flushes the
E 3
input and output queues and if the terminal is the controlling terminal
D 3
of a foreground process group, the break condition shall generate a
single SIGINT signal to that foreground process group.  If neither IGNBRK
nor BRKINT is set, a break condition is read as a single '\\0', or if
PARMRK is set, as '\\377', '\\0', '\\0'.
.PP
If IGNPAR is set, a byte with a framing or parity error (other than
E 3
I 3
of a foreground process group, the break condition generates a
single
.Dv SIGINT
signal to that foreground process group.  If neither
.Dv IGNBRK
nor
.Dv BRKINT
is set, a break condition is read as a single
.Ql \&\e0 ,
or if
.Dv PARMRK
is set, as
.Ql \&\e377 ,
.Ql \&\e0 ,
.Ql \&\e0 .
.Pp
If
.Dv IGNPAR
is set, a byte with a framing or parity error (other than
E 3
break) is ignored.
D 3
.PP
If PARMRK is set, and IGNPAR is not set, a byte with a framing or parity
E 3
I 3
.Pp
If
.Dv PARMRK
is set, and
.Dv IGNPAR
is not set, a byte with a framing or parity
E 3
D 7
error (other than break) is given to the application as the three-
D 3
character sequence '\\377', '\\0', X, where '\\377', '\\0' is a two-character
E 3
I 3
character sequence
E 7
I 7
error (other than break) is given to the application as the
three-character sequence
E 7
.Ql \&\e377 ,
.Ql \&\e0 ,
X, where
.Ql \&\e377 ,
.Ql \&\e0
is a two-character
E 3
flag preceding each sequence and X is the data of the character received
D 3
in error.  To avoid ambiguity in this case, if ISTRIP is not set, a valid
character of '\\377' is given to the application as '\\377', '\\377'.  If
neither PARMRK nor IGNPAR is set, a framing or parity error (other than
break) is given to the application as a single character '\\0'.
.PP
If INPCK is set, input parity checking is enabled.  If INPCK is not set,
E 3
I 3
in error.  To avoid ambiguity in this case, if
.Dv ISTRIP
is not set, a valid
character of
.Ql \&\e377
is given to the application as
.Ql \&\e377 ,
.Ql \&\e377 .
If
neither
.Dv PARMRK
nor
.Dv IGNPAR
is set, a framing or parity error (other than
break) is given to the application as a single character
.Ql \&\e0 .
.Pp
If
.Dv INPCK
is set, input parity checking is enabled.  If
.Dv INPCK
is not set,
E 3
input parity checking is disabled, allowing output parity generation
without input parity errors.  Note that whether input parity checking is
enabled or disabled is independent of whether parity detection is enabled
D 3
or disabled (see "Control Modes").  If parity detection is enabled but input
E 3
I 3
or disabled (see
.Sx "Control Modes" ) .
If parity detection is enabled but input
E 3
parity checking is disabled, the hardware to which the terminal is
D 3
connected shall recognize the parity bit, but the terminal special file
shall not check whether this bit is set correctly or not.
.PP
If ISTRIP is set, valid input bytes are first stripped to seven bits,
E 3
I 3
connected recognizes the parity bit, but the terminal special file
does not check whether this bit is set correctly or not.
.Pp
If
.Dv ISTRIP
is set, valid input bytes are first stripped to seven bits,
E 3
otherwise all eight bits are processed.
D 3
.PP
If INLCR is set, a received NL character is translated into a CR
character.  If IGNCR is set, a received CR character is ignored (not
read).  If IGNCR is not set and ICRNL is set, a received CR character is
translated into a NL character.
.PP
If IXON is set, start/stop output control is enabled.  A received STOP
character shall suspend output and a received START character shall
restart output. If IXANY is also set, then any character shall
restart output. When IXON is set, START and STOP characters are not
read, but merely perform flow control functions.  When IXON is not set,
the START and STOP characters are read.
.PP
If IXOFF is set, start/stop input control is enabled.  The system shall
transmit one or more STOP characters, which are intended to cause the
E 3
I 3
.Pp
If
.Dv INLCR
is set, a received
D 7
.Dv NL character is translated into a
E 7
I 7
.Dv NL
character is translated into a
E 7
.Dv CR
character.  If
.Dv IGNCR
is set, a received
.Dv CR
character is ignored (not
read).  If
.Dv IGNCR
is not set and
.Dv ICRNL
is set, a received
.Dv CR
character is
translated into a
.Dv NL
character.
.Pp
If
.Dv IXON
is set, start/stop output control is enabled.  A received
.Dv STOP
character suspends output and a received
.Dv START
character
restarts output. If
.Dv IXANY
is also set, then any character may
restart output. When
.Dv IXON
is set,
.Dv START
and
.Dv STOP
characters are not
read, but merely perform flow control functions.  When
.Dv IXON
is not set,
the
.Dv START
and
.Dv STOP
characters are read.
.Pp
If
.Dv IXOFF
is set, start/stop input control is enabled.  The system shall
transmit one or more
.Dv STOP
characters, which are intended to cause the
E 3
terminal device to stop transmitting data, as needed to prevent the input
queue from overflowing and causing the undefined behavior described in
D 3
"Input Processing and Reading Data", and shall transmit one or more 
START characters, which are
E 3
I 3
.Sx "Input Processing and Reading Data" ,
and shall transmit one or more
.Dv START
characters, which are
E 3
intended to cause the terminal device to resume transmitting data, as
soon as the device can continue transmitting data without risk of
D 3
overflowing the input queue.  The precise conditions under which STOP and
START characters are transmitted are implementation defined.
.PP
If IMAXBEL is set and the input queue is full, subsequent input
shall causes an ASCII BEL character to be transmitted to the
E 3
I 3
overflowing the input queue.  The precise conditions under which
.Dv STOP
and
START
characters are transmitted are implementation defined.
.Pp
If
.Dv IMAXBEL
D 8
is set and the input queue is full, subsequent input
shall causes an
E 8
I 8
is set and the input queue is full, subsequent input shall cause an
E 8
.Tn ASCII
.Dv BEL
character to be transmitted to the
E 3
the output queue.
D 3
.PP
E 3
I 3
.Pp
E 3
The initial input control value after open() is implementation defined.
D 3
.LP
.B "Output Modes"
.LP
Values of the c_oflag field describe the basic terminal output control,
E 3
I 3
.Ss Output Modes
Values of the
.Fa c_oflag
field describe the basic terminal output control,
E 3
and are composed of the following masks:
D 3
.nf
	(XXX cael - make into table)
	OPOST	/* enable following output processing */
	ONLCR	/* map NL to CR-NL (ala CRMOD) */
	OXTABS	/* expand tabs to spaces */
	ONOEOT	/* discard EOT's (^D) on output) */
.fi
.PP
If OPOST is set, the remaining flag masks are interpreted as follows;
E 3
I 3
.Pp
.Bl -tag -width OXTABS -offset indent -compact
.It Dv OPOST
/* enable following output processing */
.It Dv ONLCR
/* map NL to CR-NL (ala
.Dv CRMOD)
*/
.It Dv OXTABS
/* expand tabs to spaces */
.It Dv ONOEOT
/* discard
.Dv EOT Ns 's
.Ql \&^D
on output) */
.El
.Pp
If
.Dv OPOST
is set, the remaining flag masks are interpreted as follows;
E 3
otherwise characters are transmitted without change.
D 3
.PP
If ONLCR is set, newlines are translated to carriage return, linefeeds.
.PP
If OXTABS is set, tabs are expanded to the appropiate number of
E 3
I 3
.Pp
If
.Dv ONLCR
is set, newlines are translated to carriage return, linefeeds.
.Pp
If
.Dv OXTABS
D 7
is set, tabs are expanded to the appropiate number of
E 7
I 7
is set, tabs are expanded to the appropriate number of
E 7
E 3
spaces (assuming 8 column tab stops).
D 3
.PP
If ONOEOT is set, ASCII EOT's are discarded on output.
.LP
.B "Control Modes"
.LP
Values of the c_cflag field describe the basic
terminal hardware control, and are composed of the 
E 3
I 3
.Pp
If
.Dv ONOEOT
is set,
.Tn ASCII
.Dv EOT NS 's
are discarded on output.
.Ss Control Modes
Values of the
.Fa c_cflag
field describe the basic
terminal hardware control, and are composed of the
E 3
D 7
the following masks.
E 7
I 7
following masks.
E 7
Not all values
specified are supported by all hardware.
D 3
.nf
	(XXX cael - make into table)
	CSIZE		/* character size mask */
	CS5		    /* 5 bits (pseudo) */
	CS6		    /* 6 bits */
	CS7		    /* 7 bits */
	CS8		    /* 8 bits */
	CSTOPB		/* send 2 stop bits */
	CREAD		/* enable receiver */
	PARENB		/* parity enable */
	PARODD		/* odd parity, else even */
	HUPCL		/* hang up on last close */
	CLOCAL		/* ignore modem status lines */
	CCTS_OFLOW	/* CTS flow control of output */
	CRTSCTS		/* same as CCTS_OFLOW */
	CRTS_IFLOW	/* RTS flow control of input */
	MDMBUF		/* flow control output via Carrier */
.fi
.PP
The CSIZE bits specify the byte size in bits for both transmission and
reception.  The c_cflag is masked with CSIZE and compared with the
values CS5, CS6, CS7, or CS8. This size does not include the parity bit, if any.  If CSTOPB
E 3
I 3
.Pp
D 4
.Bl -tag -width CRTS_IFLOW -offset indent -compact
E 4
I 4
.Bl -tag -width CRTSXIFLOW -offset indent -compact
E 4
.It Dv CSIZE
/* character size mask */
.It Dv CS5
/* 5 bits (pseudo) */
.It Dv CS6
/* 6 bits */
.It Dv CS7
/* 7 bits */
.It Dv CS8
/* 8 bits */
.It Dv CSTOPB
/* send 2 stop bits */
.It Dv CREAD
/* enable receiver */
.It Dv PARENB
/* parity enable */
.It Dv PARODD
/* odd parity, else even */
.It Dv HUPCL
/* hang up on last close */
.It Dv CLOCAL
/* ignore modem status lines */
.It Dv CCTS_OFLOW
/*
.Dv CTS
flow control of output */
.It Dv CRTSCTS
/* same as
.Dv CCTS_OFLOW
*/
.It Dv CRTS_IFLOW
/* RTS flow control of input */
.It Dv MDMBUF
/* flow control output via Carrier */
.El
.Pp
The
.Dv CSIZE
bits specify the byte size in bits for both transmission and
reception.  The
.Fa c_cflag
is masked with
.Dv CSIZE
and compared with the
values
.Dv CS5 ,
.Dv CS6 ,
.Dv CS7 ,
or
.Dv CS8 .
This size does not include the parity bit, if any.  If
.Dv CSTOPB
E 3
is set, two stop bits are used, otherwise one stop bit.  For example, at
110 baud, two stop bits are normally used.
D 3
.PP
If CREAD is set, the receiver is enabled.  Otherwise, no characters shall
E 3
I 3
.Pp
If
.Dv CREAD
D 7
is set, the receiver is enabled.  Otherwise, no characters shall
E 3
be received.  Not all hardware supports this bit.  In fact, this flag
E 7
I 7
is set, the receiver is enabled.  Otherwise, no character is
received. 
Not all hardware supports this bit.  In fact, this flag
E 7
D 3
is pretty silly and if it were not part of the termios(4) specification
E 3
I 3
is pretty silly and if it were not part of the
.Nm termios
specification
E 3
D 7
it would be ommitted.
E 7
I 7
it would be omitted.
E 7
D 3
.PP
If PARENB is set, parity generation and detection is enabled and a parity
bit is added to each character.  If parity is enabled, PARODD specifies
E 3
I 3
.Pp
If
.Dv PARENB
D 7
is set, parity generation and detection is enabled and a parity
E 7
I 7
is set, parity generation and detection are enabled and a parity
E 7
bit is added to each character.  If parity is enabled,
.Dv PARODD
specifies
E 3
odd parity if set, otherwise even parity is used.
D 3
.PP
If HUPCL is set, the modem control lines for the port shall be lowered
E 3
I 3
.Pp
If
.Dv HUPCL
D 7
is set, the modem control lines for the port shall be lowered
E 7
I 7
is set, the modem control lines for the port are lowered
E 7
E 3
when the last process with the port open closes the port or the process
D 7
terminates.  The modem connection shall be broken.
E 7
I 7
terminates.  The modem connection is broken.
E 7
D 3
.PP
If CLOCAL is set, a connection does not depend on the state of the modem
status lines.  If CLOCAL is clear, the modem status lines shall be
E 3
I 3
.Pp
If
.Dv CLOCAL
is set, a connection does not depend on the state of the modem
status lines.  If
.Dv CLOCAL
D 7
is clear, the modem status lines shall be
E 7
I 7
is clear, the modem status lines are
E 7
E 3
monitored.
D 3
.PP
E 3
I 3
.Pp
E 3
D 7
Under normal circumstances, a call to the open() function shall wait for
E 7
I 7
Under normal circumstances, a call to the open() function waits for
E 7
D 3
the modem connection to complete.  However, if the O_NONBLOCK flag is set
or if CLOCAL has been set, the open() function shall return
E 3
I 3
the modem connection to complete.  However, if the
.Dv O_NONBLOCK
flag is set
or if
.Dv CLOCAL
D 7
has been set, the open() function shall return
E 7
I 7
has been set, the open() function returns
E 7
E 3
immediately without waiting for the connection.
D 3
.PP
The CCTS_OFLOW (CRTSCTS) flag is currently unused.
.PP
If MDMBUF is set then output flow control is controlled by the state
E 3
I 3
.Pp
The
.Dv CCTS_OFLOW
.Pf ( Dv CRTSCTS )
flag is currently unused.
.Pp
If
.Dv MDMBUF
is set then output flow control is controlled by the state
E 3
of Carrier Detect.
D 3
.PP
E 3
I 3
.Pp
E 3
If the object for which the control modes are set is not an asynchronous
serial connection, some of the modes may be ignored; for example, if an
attempt is made to set the baud rate on a network connection to a
terminal on another host, the baud rate may or may not be set on the
connection between that terminal and the machine it is directly connected
to.
D 3
.LP
.B "Local Modes"
.LP
E 3
I 3
.Ss Local Modes
E 3
D 7
Values of the c_lflag field describe the control of
E 7
I 7
Values of the
.Fa c_lflag
field describe the control of
E 7
various functions, and are composed of the following
D 3
masks.  
.nf
	(XXX cael - make into table)
	ECHOKE		/* visual erase for line kill */
	ECHOE		/* visually erase chars */
	ECHO		/* enable echoing */
	ECHONL		/* echo NL even if ECHO is off */
	ECHOPRT		/* visual erase mode for hardcopy */
	ECHOCTL  	/* echo control chars as ^(Char) */
	ISIG		/* enable signals INTR, QUIT, [D]SUSP */
	ICANON		/* canonicalize input lines */
	ALTWERASE	/* use alternate WERASE algorithm */
	IEXTEN		/* enable DISCARD and LNEXT */
	EXTPROC         /* external processing */
	TOSTOP		/* stop background jobs from output */
	FLUSHO		/* output being flushed (state) */
	NOKERNINFO	/* no kernel output from VSTATUS */
	PENDIN		/* XXX retype pending input (state) */
	NOFLSH		/* don't flush after interrupt */
.fi
.PP
If ECHO is set, input characters are echoed back to the terminal.  If
ECHO is not set, input characters are not echoed.
.PP
If ECHOE and ICANON are set, the ERASE character shall cause the terminal
E 3
I 3
masks.
.Pp
.Bl -tag -width NOKERNINFO -offset indent -compact
.It Dv ECHOKE
/* visual erase for line kill */
.It Dv ECHOE
/* visually erase chars */
.It Dv ECHO
/* enable echoing */
.It Dv ECHONL
/* echo
.Dv NL
even if
.Dv ECHO
is off */
.It Dv ECHOPRT
/* visual erase mode for hardcopy */
.It Dv ECHOCTL
/* echo control chars as ^(Char) */
.It Dv ISIG
/* enable signals
.Dv INTR ,
.Dv QUIT ,
.Dv [D]SUSP
*/
.It Dv ICANON
/* canonicalize input lines */
.It Dv ALTWERASE
/* use alternate
.Dv WERASE
algorithm */
.It Dv IEXTEN
/* enable
.Dv DISCARD
and
.Dv LNEXT
*/
.It Dv EXTPROC
/* external processing */
.It Dv TOSTOP
/* stop background jobs from output */
.It Dv FLUSHO
/* output being flushed (state) */
.It Dv NOKERNINFO
/* no kernel output from
.Dv VSTATUS
*/
.It Dv PENDIN
/* XXX retype pending input (state) */
.It Dv NOFLSH
/* don't flush after interrupt */
.El
.Pp
If
.Dv ECHO
is set, input characters are echoed back to the terminal.  If
.Dv ECHO
is not set, input characters are not echoed.
.Pp
If
.Dv ECHOE
and
.Dv ICANON
are set, the
.Dv ERASE
D 7
character shall cause the terminal
E 7
I 7
character causes the terminal
E 7
E 3
to erase the last character in the current line from the display, if
possible.  If there is no character to erase, an implementation may echo
an indication that this was the case or do nothing.
D 3
.PP
If ECHOK and ICANON are set, the KILL character shall 
E 3
I 3
.Pp
If
.Dv ECHOK
and
.Dv ICANON
are set, the
.Dv KILL
D 7
character shall
E 3
cause the current line to be discarded and the system shall
D 3
echo the '\\n'
character after the KILL character.
.PP
If ECHOKE and ICANON are set, the KILL character shall cause
E 3
I 3
echo the
E 7
I 7
character causes
the current line to be discarded and the system echoes the
E 7
.Ql \&\en
character after the
.Dv KILL
character.
.Pp
If
.Dv ECHOKE
and
.Dv ICANON
are set, the
.Dv KILL
D 7
character shall cause
E 3
the current line to be discarded and the system shall cause
E 7
I 7
character causes
the current line to be discarded and the system causes
E 7
the terminal
to erase the line from the display.
D 3
.PP
If ECHOPRT and ICANON are set, the system shall assume
E 3
I 3
.Pp
If
.Dv ECHOPRT
and
.Dv ICANON
D 7
are set, the system shall assume
E 3
that the display is a printing device and shall print a
E 7
I 7
are set, the system assumes
that the display is a printing device and prints a
E 7
D 3
backslash and the erased characters when processing ERASE
E 3
I 3
backslash and the erased characters when processing
.Dv ERASE
E 3
characters, followed by a forward slash.
D 3
.PP
If ECHOCTL is set, the system shall echo control characters
E 3
I 3
.Pp
If
.Dv ECHOCTL
D 7
is set, the system shall echo control characters
E 3
in a visible fashion using a carrot followed by the control character.
E 7
I 7
is set, the system echoes control characters
in a visible fashion using a caret followed by the control character.
E 7
D 3
.PP
If ALTWERASE is set, the system will use an alternative algorithm
for determining what constitutes a word when processing WERASE
characters (see WERASE).
.PP
If ECHONL and ICANON are set, the '\\n' character shall be echoed even if
ECHO is not set.
.PP
If ICANON is set, canonical processing is enabled.  This enables the
E 3
I 3
.Pp
If
.Dv ALTWERASE
D 7
is set, the system will use an alternative algorithm
E 7
I 7
is set, the system uses an alternative algorithm
E 7
for determining what constitutes a word when processing
.Dv WERASE
characters (see
.Dv WERASE ) .
.Pp
If
.Dv ECHONL
and
.Dv ICANON
are set, the
.Ql \&\en
D 7
character shall be echoed even if
E 7
I 7
character echoes even if
E 7
.Dv ECHO
is not set.
.Pp
If
.Dv ICANON
is set, canonical processing is enabled.  This enables the
E 3
erase and kill edit functions, and the assembly of input characters into
D 3
lines delimited by NL, EOF, and EOL, as described in "Canonical Mode
Input Processing".
.PP
If ICANON is not set, read requests are satisfied directly from the input
queue.  A read shall not be satisfied until at least MIN bytes have been
received or the timeout value TIME expired between bytes.  The time value
represents tenths of seconds.  See "Noncanonical Mode Input Processing"
E 3
I 3
lines delimited by
.Dv NL,
.Dv EOF ,
and
.Dv EOL,
as described in
.Sx "Canonical Mode Input Processing" .
.Pp
If
.Dv ICANON
is not set, read requests are satisfied directly from the input
D 7
queue.  A read shall not be satisfied until at least
E 7
I 7
queue.  A read is not satisfied until at least
E 7
.Dv MIN
bytes have been
received or the timeout value
.Dv TIME
expired between bytes.  The time value
represents tenths of seconds.  See
.Sx "Noncanonical Mode Input Processing"
E 3
for more details.
D 3
.PP
If ISIG is set, each input character is checked against the special
control characters INTR, QUIT, and SUSP (job control only).  If an input
E 3
I 3
.Pp
If
.Dv ISIG
is set, each input character is checked against the special
control characters
.Dv INTR ,
.Dv QUIT ,
and
.Dv SUSP
(job control only).  If an input
E 3
character matches one of these control characters, the function
D 3
associated with that character is performed.  If ISIG is not set, no
E 3
I 3
associated with that character is performed.  If
.Dv ISIG
is not set, no
E 3
checking is done.  Thus these special input functions are possible only
D 3
if ISIG is set.
.PP
If IEXTEN is set, implementation-defined functions shall be recognized
from the input data.  It is implementation defined how IEXTEN being set
interacts with ICANON, ISIG, IXON, or IXOFF.  If IEXTEN is not set, then
E 3
I 3
if
.Dv ISIG
is set.
.Pp
If
.Dv IEXTEN
D 7
is set, implementation-defined functions shall be recognized
from the input data.  It is implementation defined how
E 7
I 7
is set, implementation-defined functions are recognized
from the input data.  How
E 7
.Dv IEXTEN
being set
interacts with
.Dv ICANON ,
.Dv ISIG ,
.Dv IXON ,
or
D 7
.Dv IXOFF .
E 7
I 7
.Dv IXOFF
is implementation defined.
E 7
If
.Dv IEXTEN
is not set, then
E 3
D 7
implementation-defined functions shall not be recognized, and the
corresponding input characters shall be processed as described for
E 7
I 7
implementation-defined functions are not recognized, and the
corresponding input characters are not processed as described for
E 7
D 3
ICANON, ISIG, IXON, and IXOFF.
.PP
If NOFLSH is set, the normal flush of the input and output queues
associated with the INTR, QUIT, and SUSP characters
E 3
I 3
.Dv ICANON ,
.Dv ISIG ,
.Dv IXON ,
and
.Dv IXOFF .
.Pp
If
.Dv NOFLSH
is set, the normal flush of the input and output queues
associated with the
.Dv INTR ,
.Dv QUIT ,
and
.Dv SUSP
characters
E 3
D 7
shall not be done.
E 7
I 7
are not be done.
E 7
D 3
.PP
If TOSTOP is set, the signal
SIGTTOU is sent to the process group of a process that tries to write to
E 3
I 3
.Pp
If
.Dv TOSTOP
is set, the signal
.Dv SIGTTOU
is sent to the process group of a process that tries to write to
E 3
its controlling terminal if it is not in the foreground process group for
that terminal.  This signal, by default, stops the members of the process
group.  Otherwise, the output generated by that process is output to the
D 3
current output stream.  Processes that are blocking or ignoring SIGTTOU
signals are excepted and allowed to produce output and the SIGTTOU signal
E 3
I 3
current output stream.  Processes that are blocking or ignoring
.Dv SIGTTOU
signals are excepted and allowed to produce output and the
.Dv SIGTTOU
signal
E 3
is not sent.
D 3
.PP
If NOKERNINFO is set, the kernel shall not produce a status message
when processing STATUS characters (see STATUS).
.LP
.B "Special Control Characters"
.LP
The special control characters values are defined by the array c_cc. 
E 3
I 3
.Pp
If
.Dv NOKERNINFO
D 7
is set, the kernel shall not produce a status message
E 7
I 7
is set, the kernel does not produce a status message
E 7
when processing
.Dv STATUS
characters (see
.Dv STATUS ) .
.Ss Special Control Characters
D 7
The special control characters values are defined by the array c_cc.
E 7
I 7
The special control characters values are defined by the array
.Fa c_cc .
E 7
E 3
This table lists the array index, the corresponding special character,
and the system default value.  For an accurate list of
D 3
the system defaults, consult the header file <ttydefaults.h>.
.nf
	(XXX cael - make into table)
	Index Name	Special Character	Default Value
	----------	-----------------	-------------
	VEOF		EOF			^D
	VEOL		EOL			_POSIX_VDISABLE
	VEOL2		EOL2			_POSIX_VDISABLE
	VERASE		ERASE			^? ('\\177')
	VWERASE 	WERASE			^W
	VKILL		KILL			^U
	VREPRINT	REPRINT			^R
	VINTR		INTR			^C
	VQUIT		QUIT			^\\ ('\\34')
	VSUSP		SUSP			^Z
	VDSUSP		DSUSP			^Y
	VSTART		START			^Q
	VSTOP		STOP			^S
	VLNEXT		LNEXT			^V
	VDISCARD	DISCARD			^O
	VMIN		---			1
	VTIME		---			0
	VSTATUS		STATUS			^T
.fi
.PP
E 3
I 3
the system defaults, consult the header file
.Aq Pa ttydefaults.h .
.Pp
.Bl -column "Index Name" "Special Character" -offset indent -compact
.It Em "Index Name	Special Character	Default Value"
.It Dv VEOF Ta EOF Ta \&^D
.It Dv VEOL Ta EOL Ta _POSIX_VDISABLE
.It Dv VEOL2 Ta EOL2 Ta _POSIX_VDISABLE
.It Dv VERASE Ta ERASE Ta \&^? Ql \&\e177
.It Dv VWERASE  Ta WERASE Ta \&^W
.It Dv VKILL Ta KILL Ta \&^U
.It Dv VREPRINT Ta REPRINT Ta \&^R
.It Dv VINTR Ta INTR Ta \&^C
.It Dv VQUIT Ta QUIT Ta \&^\e\e Ql \&\e34
.It Dv VSUSP Ta SUSP Ta \&^Z
.It Dv VDSUSP Ta DSUSP Ta \&^Y
.It Dv VSTART Ta START Ta \&^Q
.It Dv VSTOP Ta STOP Ta \&^S
.It Dv VLNEXT Ta LNEXT Ta \&^V
.It Dv VDISCARD Ta DISCARD Ta \&^O
.It Dv VMIN Ta --- Ta \&1
.It Dv VTIME Ta --- Ta \&0
.It Dv VSTATUS Ta STATUS Ta \&^T
.El
.Pp
E 3
If the
D 3
value of one of the changeable special control characters (see "Special
Characters")
is {_POSIX_VDISABLE}, that function shall be disabled; that is, no input
data shall be recognized as the disabled special character.  If ICANON is
not set, the value of {_POSIX_VDISABLE} has no special meaning for the
VMIN and VTIME entries of the c_cc array.
.PP
The initial values of the flags and control characters 
E 3
I 3
value of one of the changeable special control characters (see
.Sx "Special Characters" )
is
.Dv {_POSIX_VDISABLE} ,
D 7
that function shall be disabled; that is, no input
data shall be recognized as the disabled special character.
E 7
I 7
that function is disabled; that is, no input
data is recognized as the disabled special character.
E 7
If
.Dv ICANON
is
not set, the value of
.Dv {_POSIX_VDISABLE}
has no special meaning for the
.Dv VMIN
and
.Dv VTIME
entries of the
.Fa c_cc
array.
.Pp
The initial values of the flags and control characters
E 3
after open() is set according to
D 3
the values in the header <sys/ttydefaults.h>.
E 3
I 3
the values in the header
.Aq Pa sys/ttydefaults.h .
E 3
E 1
