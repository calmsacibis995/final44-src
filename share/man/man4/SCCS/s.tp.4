h27688
s 00001/00001/00695
d D 8.4 94/04/19 07:44:39 bostic 10 9
c spell
e
s 00001/00001/00695
d D 8.3 94/04/19 07:43:06 bostic 9 8
c spell
e
s 00008/00008/00688
d D 8.2 93/11/30 16:48:34 mckusick 8 7
c copy edit changes from Usenix
e
s 00002/00002/00694
d D 8.1 93/06/09 19:17:27 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00000/00005/00696
d D 6.5 93/06/09 19:17:23 bostic 6 4
c fixed the under development line
e
s 00002/00002/00699
d R 8.1 93/06/05 13:47:35 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00472/00385/00229
d D 6.4 91/03/28 00:46:16 cael 4 3
c macro and text revision (-mdoc version 3)
e
s 00000/00002/00614
d D 6.3 90/07/25 22:34:47 sklower 3 2
c fix minor nit in manual page
e
s 00003/00002/00613
d D 6.2 90/05/30 13:47:00 sklower 2 1
c change ``SEE ALSO'' references to have (4) instead of (4[PF])
e
s 00615/00000/00000
d D 6.1 90/05/30 13:40:56 sklower 1 0
c date and time created 90/05/30 13:40:56 by sklower
e
u
U
t
T
I 1
D 4
.\" Copyright (c) 1990 The Regents of the University of California.
E 4
I 4
D 7
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 4
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
.\"
.\" %sccs.include.redist.man%
.\"
D 4
.\"	%W% (Berkeley) %G%
E 4
I 4
.\"     %W% (Berkeley) %G%
E 4
.\"
D 4
.TH TP 4 "%Q%"
.UC 5
.SH NAME
D 3
.UC 4
.SH NAME
E 3
TP \- ISO Transport Protocol
.SH SYNOPSIS
.nf
\fB#include <sys/socket.h>\fR
\fB#include <netiso/iso_errno.h>\fR
\fB#include <netiso/tp_param.h>\fR
\fB#include <netiso/tp_user.h>\fR
.PP
\fBs = socket( [ AF_INET, AF_ISO ] , SOCK_SEQPACKET, 0);\fR
.SH DESCRIPTION
.PP
The TP protocol provides reliable, flow-controlled, two-way
E 4
I 4
.Dd %Q%
.Dt TP 4
.Os
.Sh NAME
.Nm TP
.Nd
.Tn ISO
Transport Protocol
.Sh SYNOPSIS
.Fd #include <sys/socket.h>
.Fd #include <netiso/iso_errno.h>
.Fd #include <netiso/tp_param.h>
.Fd #include <netiso/tp_user.h>
.Ft int
.Fn socket "[AF_INET, AF_ISO]" SOCK_SEQPACKET 0
.Sh DESCRIPTION
.Pp
The
.Tn TP
protocol provides reliable, flow-controlled, two-way
E 4
transmission of data and record boundaries. 
It is a byte-stream protocol and is accessed according to
D 4
the SOCK_SEQPACKET abstraction.
The TP protocol makes use of a standard ISO address format,
E 4
I 4
the
.Dv SOCK_SEQPACKET
abstraction.
The
.Tn TP
protocol makes use of a standard
.Tn ISO
address format,
E 4
including a Network Service Access Point, and a Transport Service Entity
Selector.
Subclass 4 may make use of the internet
Internet address format.
D 4
.PP
Sockets utilizing the tp protocol are either \*(lqactive\*(rq or
\*(lqpassive\*(rq.  Active sockets initiate connections to passive
sockets.  By default TCP sockets are created active; to create a
E 4
I 4
.Pp
Sockets utilizing the tp protocol are either
.Dq active
or
.Dq passive .
Active sockets initiate connections to passive
sockets.  By default
.Tn TCP
sockets are created active; to create a
E 4
passive socket the
D 4
.IR listen (2)
E 4
I 4
.Xr listen 2
E 4
system call must be used
after binding the socket with the
D 4
.IR bind (2)
E 4
I 4
.Xr bind 2
E 4
system call.  Only
passive sockets may use the 
D 4
.IR accept (2)
E 4
I 4
.Xr accept 2
E 4
call to accept incoming connections.  Only active sockets may
use the
D 4
.IR connect (2)
E 4
I 4
.Xr connect 2
E 4
call to initiate connections.
D 4
.PP
Passive sockets may \*(lqunderspecify\*(rq their location to match
E 4
I 4
.Pp
Passive sockets may
.Dq underspecify
their location to match
E 4
incoming connection requests from multiple networks.  This
D 4
technique, termed \*(lqwildcard addressing\*(rq, allows a single
E 4
I 4
technique, termed
.Dq wildcard addressing ,
allows a single
E 4
server to provide service to clients on multiple networks.
D 4
To create a socket which listens on all networks, the NSAP portion
E 4
I 4
To create a socket which listens on all networks, the
.Tn NSAP
portion
E 4
of the bound address must be void (of length zero).
The Transport Selector may still be specified
at this time; if the port is not specified the system will assign one.
Once a connection has been established the socket's address is
fixed by the peer entity's location.   The address assigned the
socket is the address associated with the network interface
through which packets are being transmitted and received.
D 4
.PP
The ISO Transport Protocol implemented for AOS R2
E 4
I 4
.Pp
The
.Tn ISO
Transport Protocol implemented for
.Tn AOS R2
E 4
at the University of Wisconsin - Madison,
and modified for inclusion in the Berkeley Software Distribution,
includes classes 0 and 4 
D 4
of the ISO transport protocols
E 4
I 4
of the
.Tn ISO
transport protocols
E 4
as specified in
D 4
the June 1986 version of IS 8073.
E 4
I 4
the June 1986 version of
.Tn IS
8073.
E 4
Class 4 of the protocol provides reliable, sequenced,
flow-controlled, two-way
transmission of data packets with an alternate stop-and-wait data path called
the "expedited data" service.
Class 0 is essentially a null transport protocol, which is used
when the underlying network service provides reliable, sequenced,
flow-controlled, two-way data transmission.
Class 0 does not provide the expedited data service.
The protocols are implemented as a single transport layer entity 
that coexists with the Internet protocol suite.
D 4
Class 0 may be used only in the ISO domain.
Class 4 may be used in the Internet domain as well as in the ISO domain.
.PP
E 4
I 4
Class 0 may be used only in the
.Tn ISO
domain.
Class 4 may be used in the Internet domain as well as in the
.Tn ISO
domain.
.Pp
E 4
Two system calls were modified from the previous
release of the Berkeley Software Distribution
D 4
to permit the support the end-of-transport-service-data-unit (EOTSDU)
E 4
I 4
D 8
to permit the support the end-of-transport-service-data-unit
E 8
I 8
to permit the support of the end-of-transport-service-data-unit
E 8
.Pq Dv EOTSDU
E 4
indication, and for the receipt and transmission of user
connect, confirm, and disconnect data.
D 4
See \fIsendmsg(2)\fR and \fIrecmsgv(2)\fR, and further discussion
E 4
I 4
See
.Xr sendmsg 2
and
D 10
.Xr recmsgv 2 ,
E 10
I 10
.Xr recvmsg 2 ,
E 10
and further discussion
E 4
below for the formats of the data in the ancillary data buffer.
D 4
If the EOTSDU is not needed, the normal
.IR read (2),
E 4
I 4
If the
.Dv EOTSDU
is not needed, the normal
.Xr read 2 ,
E 4
and
D 4
.IR write (2)
E 4
I 4
.Xr write 2
E 4
system calls may be used.
D 4
.PP
E 4
I 4
.Pp
E 4
Through the 
D 4
\fIgetsockopt\fR and \fIsetsockopt\fR
E 4
I 4
.Xr getsockopt
and
.Xr setsockopt
E 4
system calls,
D 4
TP supports several options 
E 4
I 4
.Tn TP
supports several options 
E 4
to control such things as negotiable options
in the protocol and protocol strategies.
D 4
The options are defined in \fB<netiso/tp_user.h>\fR,
E 4
I 4
The options are defined in
.Aq Pa netiso/tp_user.h ,
E 4
and are described below.
D 4
.\".PP
.\"The options marked with a percent sign ( \fB%\fR )
.\"are limited to use by the super-user.
.PP
E 4
I 4
.Pp
E 4
In the tables below,
D 4
the options marked with a pound sign ( \fB#\fR )
E 4
I 4
the options marked with a pound sign
.Ql \&#
E 4
may be used 
D 4
with \fIsetsockopt()\fR
E 4
I 4
with
.Xr setsockopt
E 4
after a connection is established.
Others must be used before the connection
is established, in other words,
before calling
D 4
\fIconnect()\fR or 
\fIaccept()\fR.
E 4
I 4
.Xr connect
or 
.Xr accept .
E 4
All options may be used 
D 4
with \fIgetsockopt()\fR
E 4
I 4
with
.Xr getsockopt
E 4
before or
after a connection is established.
D 4
.\"
.\" .PP
.\" The options marked with an exclamation point ( \fB!\fR )
.\" may be used after a connection is released,
.\" but before 
.\" the TP reference timer (which generally
.\" has a value in minutes) expires, and before
.\" a \fIclose()\fR system call.
.\" In other words, these commands may be used when the peer closes
.\" a connection (possibly causing a disconnect indication), as long as the command
.\" is issued "soon" after the disconnection occurred.  
.sp 1
.TP 25
\fBName\fR
\fBValue [default]\fR
.IP
\fBDescription\fR
.TP 25
TPOPT_CONN_DATA
E 4
I 4
.Bl -tag -width TPOPT_PSTATISTICS
.It Dv TPOPT_CONN_DATA
E 4
(char *) [none]
D 4
.IP
Data to send on \fIconnect()\fR.
E 4
I 4
.br
Data to send on
.Xr connect .
E 4
The passive user may issue a
D 4
.IR getsockopt ()
E 4
I 4
.Xr getsockopt
E 4
call to retrieve a connection request's user data,
after having done the
D 4
.IR accept ()
E 4
I 4
.Xr accept
E 4
system call without implying confirmation of the connection.
D 4
.IP
E 4
I 4
.Pp
E 4
The data may also be retrieved by issuing a
D 4
.IR recvmsg ()
E 4
I 4
.Xr recvmsg
E 4
request for ancillary data only,
without implying confirmation of the connection.
D 4
The returned cmsghdr will contain SOL_TRANSPORT for the csmg_level
and TPOPT_CONN_DATA for cmsg_type.
.TP 25
TPOPT_DISC_DATA\fB #\fR
E 4
I 4
The returned
.Va cmsghdr
will contain
.Dv SOL_TRANSPORT
for the
.Va csmg_level
and
.Dv TPOPT_CONN_DATA
for
.Va cmsg_type.
.It Dv TPOPT_DISC_DATA \&#
E 4
(char *) [none]
D 4
.IP
Data to send on \fIclose()\fR.
E 4
I 4
.br
Data to send on
.Xr close .
E 4
Disconnect data may be sent by the side initiating the close
but not by the passive side ("passive" with respect to the closing
of the connection), so there is no need to read disconnect data
D 4
after calling \fIclose()\fR.
E 4
I 4
after calling
.Xr close .
E 4
This may be sent by a
D 4
.IR setsockopt ()
E 4
I 4
.Xr setsockopt
E 4
system call, or by issuing a
D 4
.IR sendmsg ()
E 4
I 4
.Xr sendmsg
E 4
request specifying ancillary data only.
D 4
The user-provided cmsghdr must contain SOL_TRANSPORT for csmg_level
and TPOPT_DISC_DATA for cmsg_type.
E 4
I 4
The user-provided
.Va cmsghdr
must contain
.Dv SOL_TRANSPORT
for
.Va csmg_level
and
.Dv TPOPT_DISC_DATA
for
.Va cmsg_type .
E 4
Sending of disconnect data will in of itself tear down (or reject)
the connection.
D 4
.TP 25
TPOPT_CFRM_DATA\fB #\fR
E 4
I 4
.It Dv TPOPT_CFRM_DATA \&#
E 4
(char *) [none]
D 4
.IP
E 4
I 4
.br
E 4
Data to send when confirming a connection.
D 8
This may aslo be sent by a 
E 8
I 8
This may also be sent by a 
E 8
D 4
.IR setsockopt ()
E 4
I 4
.Xr setsockopt
E 4
system call, or by issuing a
D 4
.IR sendmsg ()
E 4
I 4
.Xr sendmsg
E 4
request, as above.
Sending of connect confirm data will cause the connection
to be confirmed rather than rejected.
D 4
.\".TP 25
.\"TPOPT_CDDATA_CLEAR\fB #\fR
.\"No associated value.
.\".IP
.\"Erase outgoing connect or disconnect data.
.TP 25
TPOPT_PERF_MEAS\fB #\fR
E 4
I 4
.It Dv TPOPT_PERF_MEAS \&#
E 4
Boolean.
D 4
.IP
When \fBtrue\fR, performance measurements will be kept
E 4
I 4
.br
When
.Xr true ,
performance measurements will be kept
E 4
for this connection.  
When set before a connection is established, the
active side will use a locally defined parameter on the
D 4
connect request packet; if the peer is another ARGO
E 4
I 4
connect request packet; if the peer is another
.Tn ARGO
E 4
implementation, this will cause performance measurement to be
turned on 
on the passive side as well.
D 4
See \fItpperf(8)\fR.
.TP 25
TPOPT_PSTATISTICS\fB\fR
E 4
I 4
See
.Xr tpperf 8 .
.It Dv TPOPT_PSTATISTICS
E 4
No associated value on input.
D 4
On output, struct tp_pmeas.
.IP
E 4
I 4
On output,
.Ar struct tp_pmeas .
.Pp
E 4
This command is used to read the performance statistics accumulated
during a connection's lifetime.
D 4
It can only be used with \fIgetsockopt()\fR.
The structure it returns is described in \fB<netiso/tp_stat.h>\fR.
See \fItpperf(8)\fR.
.TP 25
TPOPT_FLAGS
unsigned integer. [ 0x0 ]
.IP
This command can only be used with \fIgetsockopt()\fR.
E 4
I 4
It can only be used with
.Xr getsockopt .
The structure it returns is described in
.Aq Pa netiso/tp_stat.h .
See
.Xr tpperf 8 .
.It Dv TPOPT_FLAGS
unsigned integer. [0x0]
.br
This command can only be used with
.Xr getsockopt .
E 4
See the description of the flags below.
D 4
.TP 25
TPOPT_PARAMS\fB\fR
struct tp_conn_param.
.IP
E 4
I 4
.It Dv TPOPT_PARAMS
.Ar struct tp_conn_param
.br
E 4
Used to get or set a group parameters for a connection.
D 4
The struct tp_conn_param is the argument used with the
\fIgetsockopt()\fR or \fIsetsockopt()\fR system call. 
E 4
I 4
The
.Ar struct tp_conn_param
is the argument used with the
.Xr getsockopt
or
.Xr setsockopt
system call. 
E 4
It is described in 
D 4
\fB<netiso/tp_user.h>\fR.
.PP
The fields of the \fItp_conn_param\fR structure are
E 4
I 4
.Aq Pa netiso/tp_user.h .
.Pp
The fields of the
.Ar tp_conn_param
structure are
E 4
described below.
D 4
.nf
.sp 1
\fIValues for TPOPT_PARAMS:\fR
.fi
.TP 25
\fBField\fR
\fBValue [default]\fR
.IP
\fBDescription\fR
.\" ******************8
.TP 25
p_Nretrans
nonzero short integer [ 1 ]
.IP
Number of times a TPDU will be retransmitted before the
E 4
I 4
.El
.Pp
.Em Values for TPOPT_PARAMS:
.Bl -tag -width p_sendack_ticks
.It Ar p_Nretrans
nonzero short integer [1]
.br
Number of times a TPDU
will be retransmitted before the
E 4
local TP entity closes a connection.
D 4
.\" ******************8
.TP 25
p_dr_ticks
nonzero short integer [ various ]
.IP
Number of clock ticks between retransmissions of disconnect request TPDUs.
.\" ******************8
.TP 25
p_dt_ticks
nonzero short integer [ various ]
.IP
Number of clock ticks between retransmissions of data TPDUs.
E 4
I 4
.It Ar p_dr_ticks
nonzero short integer [various]
.br
Number of clock ticks between retransmissions of disconnect request
TPDUs.
.It Ar p_dt_ticks
nonzero short integer [various]
.br
Number of clock ticks between retransmissions of data
TPDUs.
E 4
This parameter applies only to class 4.
D 4
.\" ******************8
.TP 25
p_cr_ticks
nonzero short integer [ various ]
.IP
Number of clock ticks between retransmissions of connection request TPDUs.
.\" ******************8
.TP 25
p_cc_ticks
nonzero short integer [ various ]
.IP
Number of clock ticks between retransmissions of connection confirm TPDUs.
E 4
I 4
.It Ar p_cr_ticks
nonzero short integer [various]
.br
Number of clock ticks between retransmissions of connection request
TPDUs.
.It Ar p_cc_ticks
nonzero short integer [various]
.br
Number of clock ticks between retransmissions of connection confirm
TPDUs.
E 4
This parameter applies only to class 4.
D 4
.\" ******************8
.TP 25
p_x_ticks
nonzero short integer [ various ]
.IP
Number of clock ticks between retransmissions of expedited data TPDUs.
E 4
I 4
.It Ar p_x_ticks
nonzero short integer [various]
.br
Number of clock ticks between retransmissions of expedited data
TPDUs.
E 4
This parameter applies only to class 4.
D 4
.\" ******************8
.TP 25
p_sendack_ticks
nonzero short integer [ various ]
.IP
E 4
I 4
.It Ar p_sendack_ticks
nonzero short integer [various]
.br
E 4
Number of clock ticks that the local TP entity
will wait before sending an acknowledgment for normal data
D 4
(not applicable if the acknowlegement strategy is TPACK_EACH).
E 4
I 4
D 9
(not applicable if the acknowlegement strategy is
E 9
I 9
(not applicable if the acknowledgement strategy is
E 9
.Dv TPACK_EACH ) .
E 4
This parameter applies only to class 4.
D 4
.\" ******************8
.TP 25
p_ref_ticks
nonzero short integer [ various ]
.IP
E 4
I 4
.It Ar p_ref_ticks
nonzero short integer [various]
.br
E 4
Number of clock ticks for which a reference will
be considered frozen after the connection to which
it applied is closed.
This parameter applies to classes 4 and 0 in the 
D 4
ARGO implementation, despite the fact that
E 4
I 4
.Tn ARGO
implementation, despite the fact that
E 4
the frozen reference function is required only for
class 4.
D 4
.\" ******************8
.TP 25
p_inact_ticks
nonzero short integer [ various ]
.IP
E 4
I 4
.It Ar p_inact_ticks
nonzero short integer [various]
.br
E 4
Number of clock ticks without an incoming packet from the peer after which 
D 4
TP close the connection.
E 4
I 4
.Tn TP
close the connection.
E 4
This parameter applies only to class 4.
D 4
.\" ******************8
.TP 25
p_keepalive_ticks
nonzero short integer [ various ]
.IP
nonzero short integer [ various ]
E 4
I 4
.It Ar p_keepalive_ticks
nonzero short integer [various]
.br
E 4
Number of clock ticks between acknowledgments that are sent
to keep an inactive connection open (to prevent the peer's
inactivity control function from closing the connection).
This parameter applies only to class 4.
D 4
.\" ******************8
.TP 25
p_winsize
E 4
I 4
.It Ar p_winsize
E 4
short integer between 128 and 16384. [4096 bytes]
D 4
.IP
E 4
I 4
.br
E 4
The buffer space limits in bytes for incoming and outgoing data.
There is no way to specify different limits for incoming and outgoing
paths.
The actual window size at any time
during the lifetime of a connection
is a function of the buffer size limit, the negotiated
D 4
maximum TPDU size, and the 
E 4
I 4
maximum TPDU
size, and the 
E 4
rate at which the user program receives data.
This parameter applies only to class 4.
D 4
.\" ******************8
.TP 25
p_tpdusize
E 4
I 4
.It Ar p_tpdusize
E 4
unsigned char between 0x7 and 0xd. 
D 4
[ 0xc for class 4 ] [ 0xb for class 0 ]
.IP
E 4
I 4
[0xc for class 4] [0xb for class 0]
.br
E 4
Log 2 of the maximum TPDU size to be negotiated.
D 4
The TP standard (ISO 8473) gives an upper bound of 
E 4
I 4
The
.Tn TP
standard
.Pf ( Tn ISO
8473) gives an upper bound of 
E 4
0xd for class 4 and 0xb for class 0.
D 4
The ARGO implementation places upper bounds of
E 4
I 4
The
.Tn ARGO
implementation places upper bounds of
E 4
0xc on class 4 and 0xb on class 0.
D 4
.\" ******************8
.TP 25
p_ack_strat
TPACK_EACH or TPACK_WINDOW.  [ TPACK_WINDOW ]
.IP
E 4
I 4
.It Ar p_ack_strat
.Dv TPACK_EACH
or
.Dv TPACK_WINDOW.
.Bq Dv TPACK_WINDOW
.br
E 4
This parameter applies only to class 4.
Two acknowledgment strategies are supported:
D 4
.IP
TPACK_EACH means that each data TPDU is acknowledged
E 4
I 4
.Pp
.Dv TPACK_EACH means that each data TPDU
is acknowledged
E 4
with an AK TPDU.
D 4
.IP
TPACK_WINDOW
E 4
I 4
.Pp
.Dv TPACK_WINDOW
E 4
means that upon receipt of the packet that represents
D 8
the high edge of the last window advertised, and AK TPDU is generated.
E 8
I 8
the high edge of the last window advertised, an AK TPDU is generated.
E 8
D 4
.\" ******************8
.TP 25
p_rx_strat
E 4
I 4
.It Ar p_rx_strat
E 4
4 bit mask
D 4
[ TPRX_USE_CW | TPRX_FASTSTART over
connectionless network protocols ]
[ TPRX_USE_CW over
connection-oriented network protocols ]
.IP
E 4
I 4
.Bq Dv TPRX_USE_CW No \&|\  Dv TPRX_FASTSTART
over
connectionless network protocols]
.Pf [ Dv TPRX_USE_CW
over
connection-oriented network protocols]
.br
E 4
This parameter applies only to class 4.
The bit mask may include the following values:
D 4
.IP
TPRX_EACH: When a retransmission timer expires, retransmit
E 4
I 4
.Pp
.Dv TPRX_EACH :
When a retransmission timer expires, retransmit
E 4
each packet in the send window rather than
just the first unacknowledged packet.
D 4
.IP
TPRX_USE_CW: Use a "congestion window" strategy borrowed
E 4
I 4
.Pp
.Dv TPRX_USE_CW :
Use a "congestion window" strategy borrowed
E 4
from Van Jacobson's congestion window strategy for TCP.
The congestion window size is set to one whenever
a retransmission occurs.
D 4
.IP
TPRX_FASTSTART: Begin sending the maximum amount of data permitted
E 4
I 4
.Pp
.Dv TPRX_FASTSTART :
Begin sending the maximum amount of data permitted
E 4
by the peer (subject to availability).
The alternative is to start sending slowly by 
pretending the peer's window is smaller than it is, and letting
D 8
it slowly grow up to the real peer's window size.
E 8
I 8
it slowly grow up to the peer window's real size.
E 8
This is to smooth the effect of new connections on a congested network
by preventing a transport connection from suddenly 
overloading the network with a burst of packets.
This strategy is also due to Van Jacobson.
D 4
.\" ******************8
.TP 25
p_class
E 4
I 4
.It Ar p_class
E 4
5 bit mask
D 4
[ TP_CLASS_4 | TP_CLASS_0 ]
.IP
Bit mask including one or both of the values TP_CLASS_4 and TP_CLASS_0.
E 4
I 4
.Bq Dv TP_CLASS_4 No \&|\  Dv TP_CLASS_0
.br
Bit mask including one or both of the values
.Dv TP_CLASS_4
and
.Dv TP_CLASS_0 .
E 4
The higher class indicated is the preferred class.
If only one class is indicated, negotiation will not occur
during connection establishment.
D 4
.\" ******************8
.TP 25
p_xtd_format
E 4
I 4
.It Ar p_xtd_format
E 4
Boolean.
D 4
[ false ]
.IP
E 4
I 4
[false]
.br
E 4
D 8
Boolean indicating that extended format shall be negotiated.
E 8
I 8
Boolean indicating that extended format is negotiated.
E 8
This parameter applies only to class 4.
D 4
.\" ******************8
.TP 25
p_xpd_service
E 4
I 4
.It Ar p_xpd_service
E 4
Boolean.
D 4
[ true ]
.IP
E 4
I 4
[true]
.br
E 4
Boolean indicating that 
the expedited data transport service will be negotiated.
This parameter applies only to class 4.
D 4
.\" ******************8
.TP 25
p_use_checksum
E 4
I 4
.It Ar p_use_checksum
E 4
Boolean.
D 4
[ true ]
.IP
E 4
I 4
[true]
.br
E 4
Boolean indicating the the use of checksums will be negotiated.
This parameter applies only to class 4.
D 4
.\" ******************8
.TP 25
p_use_nxpd
E 4
I 4
.It Ar p_use_nxpd
E 4
Reserved for future use.
D 4
.\" ******************8
.TP 25
p_use_rcc
E 4
I 4
.It Ar p_use_rcc
E 4
Reserved for future use.
D 4
.\" ******************8
.TP 25
p_use_efc
E 4
I 4
.It Ar p_use_efc
E 4
Reserved for future use.
D 4
.\" ******************8
.TP 25
p_no_disc_indications
E 4
I 4
.It Ar p_no_disc_indications
E 4
Boolean.
D 4
[ false ]
.IP
Boolean indicating that the local TP entity shall not issue
indications (signals) when a TP connection is disconnected.
.\" ******************8
.TP 25
p_dont_change_params
Boolean.
[ false ]
.IP
If \fBtrue\fR the TP entity will not override
E 4
I 4
[false]
.Pp
Boolean indicating that the local
.Tn TP
D 8
entity shall not issue
E 8
I 8
entity will not issue
E 8
indications (signals) when a
.Tn TP
connection is disconnected.
.It Ar p_dont_change_params
Boolean.  [false]
.br
If
.Em true
the
.Tn TP
entity will not override
E 4
any of the other values given in this structure.
D 4
If the values cannot be used, the TP entity will drop, disconnect,
E 4
I 4
If the values cannot be used, the
.Tn TP
entity will drop, disconnect,
E 4
or refuse to establish the connection to which this structure pertains.
D 4
.\" ******************8
.TP 25
p_netservice
One of { ISO_CLNS, ISO_CONS, ISO_COSNS, IN_CLNS }.
[ ISO_CLNS ]
.IP
E 4
I 4
.It Ar p_netservice
One of {
.Dv ISO_CLNS ,
.Dv ISO_CONS ,
.Dv ISO_COSNS ,
.Dv IN_CLNS } .
.Pf [ Dv ISO_CLNS ]
.br
E 4
Indicates which network service is to be used.
D 4
.IP
ISO_CLNS indicates the connectionless network service provided
by CLNP (ISO 8473).
.IP
ISO_CONS indicates the connection-oriented network service provided
by X.25 (ISO 8208) and ISO 8878.
.IP
ISO_COSNS indicates the 
E 4
I 4
.Pp
.Dv ISO_CLNS
indicates the connectionless network service provided
by CLNP 
.Pf ( Tn ISO
8473).
.Pp
.Dv ISO_CONS
indicates the connection-oriented network service provided
by X.25
.Pf ( Tn ISO
8208) and
.Tn ISO
8878.
.Pp
.Dv ISO_COSNS
indicates the 
E 4
connectionless network service running over a
D 4
connection-oriented subnetwork service : CLNP (ISO 8473) over X.25 (ISO 8208).
.IP
IN_CLNS indicates the 
E 4
I 4
connection-oriented subnetwork service: CLNP 
.Pf ( Tn ISO
8473) over X.25
.Pf ( Tn ISO
8208).
.Pp
.Dv IN_CLNS
indicates the 
E 4
DARPA Internet connectionless network service provided by IP (RFC 791).
D 4
.\" ******************8
.TP 25
p_dummy
E 4
I 4
.It Ar p_dummy
E 4
Reserved for future use.
D 4
.sp 1
.PP
The TPOPT_FLAGS option is used for obtaining
E 4
I 4
.El
.Pp
The
.Dv TPOPT_FLAGS
option is used for obtaining
E 4
various boolean-valued options.
Its meaning is as follows.
The bit numbering used is that of the RT PC, which means that bit
0 is the most significant bit, while bit 8 is the least significant bit.
D 4
.nf
E 4
.sp 1
D 4
\fIValues for TPOPT_FLAGS:\fR
.fi
.TP 10
\fBBits\fR
\fBDescription [Default]\fR
.TP 10
0
TPFLAG_NLQOS_PDN : set when the quality of the 
E 4
I 4
.Em Values for TPOPT_FLAGS:
.Bl -tag -width Bitsx
.It Sy Bits
.Sy Description [Default]
.It \&0
.Dv TPFLAG_NLQOS_PDN :
set when the quality of the 
E 4
network service is
similar to that of a public data network.
D 4
.TP 10
1
TPFLAG_PEER_ON_SAMENET : set when the peer TP entity
E 4
I 4
.It \&1
.Dv TPFLAG_PEER_ON_SAMENET :
set when the peer
.Tn TP
entity
E 4
is considered to be on the same network as the local
D 4
TP entity.
.TP 10
2
E 4
I 4
.Tn TP
entity.
.It \&2
E 4
Not used.
D 4
.TP 10
3
TPFLAG_XPD_PRES : set when expedited data are present
[ 0 ]
.TP 10
4..7
E 4
I 4
.It \&3
.Dv TPFLAG_XPD_PRES :
set when expedited data are present
[0]
.It 4\&..7
E 4
Reserved.
D 4
.\".TP 10
.\"4
.\"Reserved.
.\".TP 10
.\"5
.\"TPFLAG_DISC_DATA_IN : read only flag, if set indicates that
.\"data from a disconnect TPDU are present.
.\".TP 10
.\"6
.\"Reserved.
.\".TP 10
.\"7
.\"TPFLAG_CONN_DATA_IN : read only flag, if set indicates that
.\"data from a connect TPDU are present.
.SH "ERROR VALUES
.PP
The TP entity returns \fIerrno\fR error values as defined in
\fB<sys/errno.h>\fR
E 4
I 4
.El
.Sh ERROR VALUES
.Pp
The
.Tn TP
entity returns
.Va errno
error values as defined in
.Aq Pa sys/errno.h
E 4
and
D 4
\fB<netiso/iso_errno.h>\fR.
E 4
I 4
.Aq Pa netiso/iso_errno.h .
E 4
User programs may print messages associated with these value by
D 4
using an expanded version of \fIperror()\fR
found in the ISO library, \fIlibisodir.a\fR.
.PP
If the TP entity encounters asynchronous events
E 4
I 4
using an expanded version of
.Xr perror
found in the
.Tn ISO
library,
.Pa libisodir.a .
.Pp
If the
.Tn TP
entity encounters asynchronous events
E 4
that will cause a transport connection to be closed,
such as
timing out while retransmitting a connect request TPDU,
or receiving a DR TPDU,
D 4
the TP entity issues a SIGURG signal, indicating that
E 4
I 4
the
.Tn TP
entity issues a
.Dv SIGURG
signal, indicating that
E 4
disconnection has occurred.
If the signal is issued during a 
a system call, the system call may be interrupted,
in which case the
D 4
\fIerrno\fR value upon return from the system call is EINTR.
If the signal SIGURG
E 4
I 4
.Va errno
value upon return from the system call is
.Er EINTR.
If the signal
.Dv SIGURG
E 4
is being handled by reading
D 4
from the socket, and it was a \fIaccept()\fR that
timed out, the read may result in ENOTSOCK,
because the \fIaccept()\fR call had not yet returned a
E 4
I 4
D 8
from the socket, and it was a
E 8
I 8
from the socket, and it was an
E 8
.Xr accept 2
that
timed out, the read may result in
.Er ENOTSOCK ,
because the
.Xr accept
call had not yet returned a
E 4
legitimate socket descriptor when the signal was handled.
D 4
ETIMEDOUT (or a some other errno value appropriate to the
type of error) is returned if SIGURG is blocked
E 4
I 4
.Dv ETIMEDOUT
(or a some other errno value appropriate to the
type of error) is returned if
.Dv SIGURG
is blocked
E 4
for the duration of the system call.
A user program should take one of the following approaches:
D 4
.IP "Block SIGURG." 5
E 4
I 4
.Bl -tag -width Ds
.It Block Dv SIGURG
E 4
If the program is servicing
D 4
only one connection, it can block or ignore SIGURG during connection 
E 4
I 4
only one connection, it can block or ignore
.Dv SIGURG
during connection 
E 4
establishment.
D 4
The advantage of this is that the \fIerrno\fR value
E 4
I 4
The advantage of this is that the
.Va errno
value
E 4
returned is somewhat meaningful.
The disadvantage of this is that
if ignored, disconnection and expedited data indications could be
missed.
For some programs this is not a problem.
D 4
.IP "Handle SIGURG." 5
E 4
I 4
.It Handle Dv SIGURG
E 4
If the program is servicing more than one connection at a time
or expedited data may arrive or both, the program may elect to
D 4
service SIGURG.
It can use the \fIgetsockopt(...TPOPT_FLAGS...)\fR system 
E 4
I 4
service
.Dv SIGURG .
It can use the
.Fn getsockopt ...TPOPT_FLAGS...
system 
E 4
call to see if the signal
was due to the arrival of expedited data or due to a disconnection.
In the latter case, 
D 4
\fIgetsockopt()\fR
will return ENOTCONN.
.SH BUGS
.PP
E 4
I 4
.Xr getsockopt
will return
.Er ENOTCONN .
.El
.Sh SEE ALSO
.Xr tcp 4 ,
.Xr netstat 1 ,
.Xr iso 4 ,
.Xr clnp 4 ,
.Xr cltp 4 ,
.Xr ifconfig 8 .
D 6
.Sh HISTORY
The
.Nm
protocol
.Ud
E 6
.Sh BUGS
E 4
The protocol definition of expedited data is slightly problematic,
in a way that renders expedited data almost useless,
if two or more packets of expedited data are send within
D 4
time 
\(*e,
where \(*e
E 4
I 4
time \(*e, where \(*e
E 4
depends on the application.
The problem is not of major significance since most applications
do not use transport expedited data.
The problem is this:
D 4
the expedited data acknowledgment TPDU has no field for conveying
credit, thus it is not possible for a TP entity to inform its peer
E 4
I 4
the expedited data acknowledgment TPDU
has no field for conveying
credit, thus it is not possible for a
.Tn TP
entity to inform its peer
E 4
that "I received your expedited data but have no room to receive more."
D 4
The TP entity has the choice of acknowledging receipt of the
XPD TPDU 
.TP 10
when the user receives the XPD TSDU
E 4
I 4
The
.Tn TP
entity has the choice of acknowledging receipt of the
XPD TPDU:
.Bl -tag -width Ds
.It "when the user receives the" XPD TSDU
E 4
which may be a fairly long time,
D 4
which may cause the sending TP entity to retransmit the packet,
E 4
I 4
which may cause the sending
.Tn TP
entity to retransmit the packet,
E 4
and possibly to close the connection after retransmission, or
D 4
.TP 10
when the TP entity receives it
E 4
I 4
.It "when the" Tn TP No "entity receives it"
E 4
so the sending entity does not retransmit or close the connection.
If the sending user then tries to send more expedited data
D 4
"soon", the expedited data will not be acknowledged (until the
E 4
I 4
.Dq soon ,
the expedited data will not be acknowledged (until the
E 4
receiving user receives the first XPD TSDU).
D 4
.PP
The ARGO implementation acknowledges XPD TPDUs immediately,
E 4
I 4
.El
.Pp
The
.Tn ARGO
implementation acknowledges XPD TPDUs
immediately,
E 4
D 8
in the hope that most users will not use expedited data requently
E 8
I 8
in the hope that most users will not use expedited data frequently
E 8
enough for this to be a problem.
D 4
.SH SEE ALSO
.PP
D 2
tcp(4P), 
E 2
I 2
tcp(4), 
E 2
netstat(1),
D 2
iso(4F), clnp(4P), 
E 2
I 2
iso(4), clnp(4), 
cltp(4),
E 2
ifconfig(8). 
E 4
E 1
