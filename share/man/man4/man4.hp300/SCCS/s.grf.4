h19677
s 00002/00002/00181
d D 8.1 93/06/09 19:13:44 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00005/00182
d D 5.4 93/06/09 19:13:41 bostic 5 3
c fixed the under development line
e
s 00002/00002/00185
d R 8.1 93/06/05 13:40:48 bostic 4 3
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/00186
d D 5.3 91/07/31 23:12:38 cael 3 2
c fix macro request
e
s 00126/00091/00061
d D 5.2 91/03/27 23:24:44 cael 2 1
c macro and text revision (-mdoc version 3)
e
s 00152/00000/00000
d D 5.1 90/06/29 19:04:00 bostic 1 0
c date and time created 90/06/29 19:04:00 by bostic
e
u
U
t
T
I 1
D 2
.\" Copyright (c) 1990 The Regents of the University of California.
E 2
I 2
D 6
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 2
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the Systems Programming Group of the University of Utah Computer
.\" Science Department.
I 5
.\"
E 5
D 2
.\"
E 2
.\" %sccs.include.redist.man%
.\"
D 2
.\"	%W% (Berkeley) %G%
E 2
I 2
.\"     %W% (Berkeley) %G%
E 2
.\"
D 2
.TH GRF 4 "%Q%"
.UC 7
.SH NAME
grf \- HP graphics frame buffer device interface
.SH DESCRIPTION
E 2
I 2
.Dd %Q%
.Dt GRF 4 hp300
.Os
.Sh NAME
.Nm grf
.Nd
.Tn HP
graphics frame buffer device interface
.Sh DESCRIPTION
E 2
This is a generic description of the frame buffer device interface.
The devices to which this applies are the 98544, 98545 and 98547
D 2
Topcat display cards (also known as HP300H devices),
E 2
I 2
Topcat display cards (also known as
.Tn HP300H
devices),
E 2
the 98548, 98549 and 98550
Catseye display cards,
the 98700
Gatorbox graphics box,
the 98720
Renaissance graphics box,
and the 98730
DaVinci graphics box.
D 2
.PP
E 2
I 2
.Pp
E 2
Use of the devices can be effectively approached from two directions.
D 2
The first is through HP-UX
.I Starbase
routines, the second is by direct control in the BSD environment.
E 2
I 2
The first is through
.Tn HP-UX
.Em Starbase
routines, the second is by direct control in the
.Bx
environment.
E 2
In order to use the Starbase libraries,
D 2
code must be compiled in an HP-UX environment, either by doing so on an HP-UX
machine and transferring the binaries to the BSD machine, or by compilation
E 2
I 2
code must be compiled in an
.Tn HP-UX
environment, either by doing so on an
.Tn HP-UX
machine and transferring the binaries to the
.Bx
machine, or by compilation
E 2
with the use of the
D 2
.IR hpux (1)
E 2
I 2
.Xr hpux 1
E 2
command.
Applications using Starbase libraries have been run successfully
D 2
on BSD machines using both of these compilation techniques.
.PP
E 2
I 2
on
.Bx
machines using both of these compilation techniques.
.Pp
E 2
Direct compilation,
such as that used for the X Window System servers, has also been successful.
Examples of some frame buffer operations can be found in
the device dependent X Window system sources, for example the
D 2
.I /usr/src/new/X/libhp.fb
E 2
I 2
.Pa /usr/src/new/X/libhp.fb
E 2
directory.  These files contain examples of device dependent color map
initialization, frame buffer operations, bit moving routines etc.
D 2
.PP
E 2
I 2
.Pp
E 2
The basic programming of the
D 2
.IR grf \?
E 2
I 2
D 3
.Nm grf Ns Em \?
E 3
I 3
.Nm grf Ns ?
E 3
E 2
devices involves opening the device
file, mapping the control registers and frame buffer addresses into user
space, and then manipulating the device as the application requires.
The address mapping is controlled by an
D 2
.IR ioctl (2)
E 2
I 2
.Xr ioctl 2
E 2
call to map the device into user space, and an unmap call when finished.
D 2
The ioctls supported by BSD are:
.TP
GRFIOCGINFO
E 2
I 2
The ioctls supported by
.Bx
are:
.Bl -tag -width indent
.It Dv GRFIOCGINFO
E 2
Get Graphics Info
D 2
.sp
E 2
I 2
.Pp
E 2
Get info about device, setting the entries in the
D 2
.I grfinfo
E 2
I 2
.Em grfinfo
E 2
structure, as defined in <hpdev/grfioctl.h>:
D 2
.DS
E 2
I 2
.Bd -literal
E 2
struct	grfinfo {
D 2
	int		gd_id;			/* HPUX identifier */
	caddr_t	gd_regaddr;		/* control registers physaddr */
	int		gd_regsize;		/* control registers size */
	caddr_t	gd_fbaddr;		/* frame buffer physaddr */
	int		gd_fbsize;		/* frame buffer size */
	short	gd_colors;		/* number of colors */
	short	gd_planes;		/* number of planes */
E 2
I 2
	int	gd_id;		/* HPUX identifier */
	caddr_t	gd_regaddr;	/* control registers physaddr */
	int	gd_regsize;	/* control registers size */
	caddr_t	gd_fbaddr;	/* frame buffer physaddr */
	int	gd_fbsize;	/* frame buffer size */
	short	gd_colors;	/* number of colors */
	short	gd_planes;	/* number of planes */
E 2
/* new stuff */
D 2
	int		gd_fbwidth;		/* frame buffer width */
	int		gd_fbheight;		/* frame buffer height */
	int		gd_dwidth;		/* displayed part width */
	int		gd_dheight;		/* displayed part height */
	int		gd_pad[6];		/* for future expansion */
E 2
I 2
	int	gd_fbwidth;	/* frame buffer width */
	int	gd_fbheight;	/* frame buffer height */
	int	gd_dwidth;	/* displayed part width */
	int	gd_dheight;	/* displayed part height */
	int	gd_pad[6];	/* for future expansion */
E 2
};
D 2
.DE
.TP
GRFIOCON
E 2
I 2
.Ed
.It Dv GRFIOCON
E 2
Graphics On
D 2
.sp
Turn graphics on by enabling CRT output.  The screen will come on, displaying
E 2
I 2
.Pp
Turn graphics on by enabling
.Tn CRT
output.  The screen will come on, displaying
E 2
whatever is in the frame buffer, using whatever colormap is in place.
D 2
.TP
GRFIOCOFF
E 2
I 2
.It Dv GRFIOCOFF
E 2
Graphics Off
D 2
.sp
Turn graphics off by disabling output to the CRT.  The frame buffer contents
E 2
I 2
.Pp
Turn graphics off by disabling output to the
.Tn CRT .
The frame buffer contents
E 2
are not affected.
D 2
.TP
GRFIOCMAP
E 2
I 2
.It Dv GRFIOCMAP
E 2
Map Device to user space
D 2
.sp
E 2
I 2
.Pp
E 2
Map in control registers and framebuffer space. Once the device file is
mapped, the frame buffer structure is accessible.
D 2
.TP
GRFIOCUNMAP
E 2
I 2
.It Dv GRFIOCUNMAP
E 2
Unmap Device
D 2
.sp
E 2
I 2
.Pp
E 2
Unmap control registers and framebuffer space.
D 2
.PP
E 2
I 2
.El
.Pp
E 2
For further information about the use of ioctl see the man page.
D 2
.SH EXAMPLE
E 2
I 2
.Sh EXAMPLE
E 2
This short code fragment is an example of opening some graphics device and
mapping in the control and frame buffer space:
D 2
.DS
E 2
I 2
.Bd -literal
E 2
#define GRF_DEV <some_graphics_device>  /* /dev/grfN */
{
D 2
    struct fbstruct *regs;  /*  fbstruct = gboxfb, rboxfb, etc. */
    u_char *Addr, frame_buffer;
    struct grfinfo gi;
    int disp_fd;
E 2
I 2
	struct fbstruct *regs;  /*  fbstruct = gboxfb, rboxfb, etc. */
	u_char *Addr, frame_buffer;
	struct grfinfo gi;
	int disp_fd;
E 2

D 2
      disp_fd = open(GRF_DEV,1);
      if (ioctl (disp_fd, GRFIOCGINFO, &gi) < 0) return -1;
      (void) ioctl (disp_fd, GRFIOCON, 0);
E 2
I 2
	disp_fd = open(GRF_DEV,1);
	if (ioctl (disp_fd, GRFIOCGINFO, &gi) < 0) return -1;
	(void) ioctl (disp_fd, GRFIOCON, 0);
E 2

D 2
      Addr = (u_char *) 0;
      if (ioctl (disp_fd, GRFIOCMAP, &Addr) < 0) {
           (void) ioctl (disp_fd, GRFIOCOFF, 0);
           return -1;
      }
      regs = (fbstruct *) Addr;                       /* Control Registers   */
      frame_buffer = (u_char *) Addr + gi.gd_regsize; /* Frame buffer memory */
E 2
I 2
	Addr = (u_char *) 0;
	if (ioctl (disp_fd, GRFIOCMAP, &Addr) < 0) {
		(void) ioctl (disp_fd, GRFIOCOFF, 0);
		return -1;
	}
	regs = (fbstruct *) Addr;               /* Control Registers   */
	frame_buffer = (u_char *) Addr + gi.gd_regsize; /* Frame buffer mem */
E 2
}
D 2
.DE
.SH SEE ALSO
ioctl(2), dv(4), gb(4), rb(4), tc(4), hil(4)
.SH FILES
.ta \w'/dev/*crt*  'u
/dev/grf?	BSD interface special files
.br
/dev/*crt*	HP-UX \fIstarbase\fP interface special files
.SH ERRORS
.TP 15
[ENODEV]
E 2
I 2
.Ed
.Sh FILES
.Bl -tag -width /dev/*crt*? -compact
.It Pa /dev/grf?
.Bx
interface special files
.It Pa /dev/*crt*
.Tn HP-UX
.Em starbase
interface special files
.El
.Sh DIAGNOSTICS
None under
.Bx .
.Tn HP-UX
The
.Tn CE.utilities/Crtadjust
programs must be used for each specific device.
.Sh ERRORS
.Bl -tag -width [EINVAL]
.It Bq Er ENODEV
E 2
no such device.
D 2
.TP 15
[EBUSY]
E 2
I 2
.It Bq Er EBUSY
E 2
Another process has the device open.
D 2
.TP 15
[EINVAL]
E 2
I 2
.It Bq Er EINVAL
E 2
Invalid ioctl specification.
D 2
.SH DIAGNOSTICS
None under BSD.
.br
HP-UX CE.utilities/Crtadjust programs must be used for each specific device.
E 2
I 2
.El
.Sh SEE ALSO
.Xr ioctl 2 ,
.Xr dv 4 ,
.Xr gb 4 ,
.Xr rb 4 ,
.Xr tc 4 ,
.Xr hil 4
D 5
.Sh HISTORY
The
.Nm
driver
.Ud
E 5
E 2
E 1
