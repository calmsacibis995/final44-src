h26364
s 00001/00001/00347
d D 8.2 93/11/30 16:49:34 mckusick 6 5
c copy edit changes from Usenix
e
s 00002/00002/00346
d D 8.1 93/06/09 19:13:56 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00000/00005/00348
d D 5.3 93/06/09 19:13:52 bostic 4 2
c fixed the under development line
e
s 00002/00002/00351
d R 8.1 93/06/05 13:40:57 bostic 3 2
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00231/00151/00122
d D 5.2 91/03/27 23:24:45 cael 2 1
c macro and text revision (-mdoc version 3)
e
s 00273/00000/00000
d D 5.1 90/06/29 19:04:02 bostic 1 0
c date and time created 90/06/29 19:04:02 by bostic
e
u
U
t
T
I 1
D 2
.\" Copyright (c) 1990 The Regents of the University of California.
E 2
I 2
D 5
.\" Copyright (c) 1990, 1991 The Regents of the University of California.
E 2
.\" All rights reserved.
E 5
I 5
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 5
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the Systems Programming Group of the University of Utah Computer
.\" Science Department.
.\"
.\" %sccs.include.redist.man%
.\"
D 2
.\"	%W% (Berkeley) %G%
E 2
I 2
.\"     %W% (Berkeley) %G%
E 2
.\"
D 2
.TH HIL 4 "%Q%"
.UC 7
.SH NAME
hil \- Human Interface Link device driver
.SH DESCRIPTION
The Human Interface Link (HIL) is the interface used by the Series
E 2
I 2
.Dd %Q%
.Dt HIL 4 hp300
.Os
.Sh NAME
.Nm hil
.Nd Human Interface Link device driver
.Sh DESCRIPTION
The Human Interface Link
.Pq Tn HIL
is the interface used by the Series
E 2
300 computers to connect devices such as keyboards, mice, control knobs,
D 2
and ID modules to the machine. 
.PP
Special files /dev/hil[1-7] refer to physical HIL devices 1 through 7.
/dev/hil0 refers to the ``loop'' pseudo-device and is used for the queue
E 2
I 2
and
.Tn ID
modules to the machine. 
.Pp
Special files
.Pa /dev/hil[1-7]
refer to physical
.Tn HIL
devices 1 through 7.
.Pa /dev/hil0
refers to the ``loop'' pseudo-device and is used for the queue
E 2
allocation commands described below.
In the current implementation,
D 2
there can only be one keyboard and it must be the first device (hil1).
.PP
The device file that corresponds to a particular HIL device is determined
by the order of the devices on the loop. For instance, if the ID module
is the second physical device on the loop, then /dev/hil2 is the special
E 2
I 2
there can only be one keyboard and it must be the first device
.Pq Li hil1 .
.Pp
The device file that corresponds to a particular
.Tn HIL
device is determined
by the order of the devices on the loop. For instance, if the
.Tn ID
module
is the second physical device on the loop, then
.Pa /dev/hil2
is the special
E 2
file that should be used for communication with the module.
D 2
.PP
Communication with an HIL device is begun with an
.I open
E 2
I 2
.Pp
Communication with an
.Tn HIL
device is begun with an
.Em open
E 2
system call.
A process may open a device already opened by another process unless
D 2
the process is operating in HP-UX compatibility mode
E 2
I 2
the process is operating in
.Tn HP-UX
compatibility mode
E 2
in which case it requires exclusive use of the device, or
D 2
another process has the device open and is using HP-UX style
E 2
I 2
another process has the device open and is using
.Tn HP-UX
style
E 2
device access (see
D 2
.SM HILIOCHPUX
E 2
I 2
.Dv HILIOCHPUX
E 2
below).
D 2
.PP
E 2
I 2
.Pp
E 2
Input data from a device are obtained in one of two ways.
D 2
Processes may use an HP-UX style interface in which the \fIread\fP(2)
E 2
I 2
Processes may use an
.Tn HP-UX
style interface in which the
.Xr read 2
E 2
system call is used to get fixed-size input packets,
or they can use a
D 2
.I "shared-queue"
E 2
I 2
.Em shared-queue
E 2
interface.
The shared-queue interface avoids the system call overhead associated with
D 2
the HP-UX read interface by sharing a region of memory between the system
E 2
I 2
the
.Tn HP-UX
read interface by sharing a region of memory between the system
E 2
and a user process.
This region consists of a circular list of 255 event packets,
and a header containing the size of the queue, and its head and tail indices.
The system deposits event data at the tail of the queue,
a process extracts it from the head.
Extracting an event is done by copying it from the queue and then updating
the head appropriately (i.e. head = (head + 1) % qsize).
It is up to the process to ensure that packets are removed from the
queue quickly enough to prevent the queue from filling.
The system, when it determines that the queue is full,
will ignore future packets from the device.
D 2
Devices are \fImapped\fP to queues via an ioctl.
E 2
I 2
Devices are
.Em mapped
to queues via an
.Xr ioctl 2.
E 2
More than one device can be mapped to a single queue and one device can
be mapped to several queues.
D 2
Queues are implicitly unmapped by a \fIfork\fP(2) and thus,
E 2
I 2
Queues are implicitly unmapped by a
.Xr fork 2
and thus,
E 2
cannot be shared between processes.
D 2
.PP
E 2
I 2
.Pp
E 2
Choosing the type of interface is done on a per device basis using
D 2
an ioctl, but each device can only have one interface at any given time.
.PP
.I Select
E 2
I 2
an
.Xr ioctl ,
but each device can only have one interface at any given time.
.Pp
.Em Select
E 2
may be used with either interface to detect when input data are present.
With the read interface, selecting indicates when there is input for a
given device.
D 2
With the shared-queue interface, selecting on the loop pseudo-device (hil0)
E 2
I 2
With the shared-queue interface, selecting on the loop pseudo-device
.Pq Li hil0
E 2
indicates when data are present from any device on any queue
while selecting on an individual device indicates when data are present
for that device on any queue.
D 2
.PP
.I Close
shuts down the file descriptor associated with the HIL device.
E 2
I 2
.Pp
.Em Close
shuts down the file descriptor associated with the
.Tn HIL
device.
E 2
The last close (system-wide) of any device removes that device
from all queues it was mapped to while the last close of the loop
pseudo-device unmaps all devices and deallocates all queues.
D 2
.PP
.IR Ioctl (2)
is used to control the HIL device.
The ioctl commands (see <hpdev/hilioctl.h>)
E 2
I 2
.Pp
.Xr Ioctl 2
is used to control the
.Tn HIL
device.
The ioctl commands (see
.Aq Pa hpdev/hilioctl.h )
E 2
listed below are separated into two groups.
D 2
The first are those which provide functions identical to HP-UX.
Refer to \fIhil\fP(7) in the HP-UX documentation for more
E 2
I 2
The first are those which provide functions identical to
.Tn HP-UX .
Refer to
.Xr hil 7
in the
.Tn HP-UX
documentation for more
E 2
complete descriptions of these ioctls.
The second set of ioctls are specific to this implementation and are
primarily related to the shared-queue interface.
D 2
.TP 10
HILIOCID
E 2
I 2
.Bl -tag -width HILIOCARO
.It Dv HILIOCID
E 2
Identify and Describe
D 2
.sp
E 2
I 2
.Pp
E 2
The device will return up to 11 bytes of information describing the
type and characteristics of the device.
At the very least, 2 bytes of information,
D 2
the device ID, and the Describe Record Header will be returned.
Identical to the HP-UX
.SM HILID
E 2
I 2
the device
.Tn ID ,
and the Describe Record Header will be returned.
Identical to the
.Tn HP-UX
.Dv HILID
E 2
ioctl.
D 2
.TP
HILIOCSC
E 2
I 2
.It Dv HILIOCSC
E 2
Report Security Code
D 2
.sp
E 2
I 2
.Pp
E 2
Request the security code record from a device. The security code can
D 2
vary from 1 byte to 15, and is only supported by some HIL devices.
Identical to the HP-UX
.SM HILSC
E 2
I 2
vary from 1 byte to 15, and is only supported by some
.Tn HIL
devices.
Identical to the
.Tn HP-UX
.Dv HILSC
E 2
ioctl.
D 2
.TP
HILIOCRN
E 2
I 2
.It Dv HILIOCRN
E 2
Report Name
D 2
.sp
E 2
I 2
.Pp
E 2
An ascii string of up to 15 bytes in length that describes the device
is returned.
D 2
Identical to the HP-UX
.SM HILRN
E 2
I 2
Identical to the
.Tn HP-UX
.Dv HILRN
E 2
ioctl.
D 2
.TP
HILIOCRS
E 2
I 2
.It Dv HILIOCRS
E 2
Report Status
D 2
.sp
E 2
I 2
.Pp
E 2
An ascii string of up to 15 bytes in length that describes the current
status of the device is returned.
D 2
Identical to the HP-UX
.SM HILRS
E 2
I 2
Identical to the
.Tn HP-UX
.Dv HILRS
E 2
ioctl.
D 2
.TP
HILIOCED
E 2
I 2
.It Dv HILIOCED
E 2
Extended Describe
D 2
.sp
E 2
I 2
.Pp
E 2
Additional information of up to 15 bytes is returned describing the device.
D 2
This ioctl is similar to HILIOCID, which must be used first
E 2
I 2
This ioctl is similar to
.Tn HILIOCID ,
which must be used first
E 2
to determine if the device supports extended describe.
D 2
Identical to the HP-UX
.SM HILED
E 2
I 2
Identical to the
.Tn HP-UX
.Dv HILED
E 2
ioctl.
D 2
.TP
HILIOCAROFF
E 2
I 2
.It Dv HILIOCAROFF
E 2
Disable Auto Repeat
D 2
.sp
E 2
I 2
.Pp
E 2
D 6
Turn off auto repeat on the keyboard while it is cooked mode.
E 6
I 6
Turn off auto repeat on the keyboard while it is in cooked mode.
E 6
D 2
Identical to the HP-UX
.SM HILDKR
E 2
I 2
Identical to the
.Tn HP-UX
.Dv HILDKR
E 2
ioctl.
D 2
.TP
HILIOCAR1
E 2
I 2
.It Dv HILIOCAR1
E 2
Enable Auto Repeat
D 2
.sp
E 2
I 2
.Pp
E 2
Turn on auto repeat on the keyboard while it is in raw mode.
The repeat rate is set to 1/30th of a second.
D 2
Identical to the HP-UX
.SM HILER1
E 2
I 2
Identical to the
.Tn HP-UX
.Dv HILER1
E 2
ioctl.
D 2
.TP
HILIOCAR2
E 2
I 2
.It Dv HILIOCAR2
E 2
Enable Auto Repeat
D 2
.sp
E 2
I 2
.Pp
E 2
Turn on auto repeat on the keyboard while it is in raw mode.
The repeat rate is set to 1/60th of a second.
D 2
Identical to the HP-UX
.SM HILER2
E 2
I 2
Identical to the
.Tn HP-UX
.Dv HILER2
E 2
ioctl.
D 2
.PP
E 2
I 2
.Pp
E 2
The following ioctls are specific to this implementation:
D 2
.TP 13
HILIOCBEEP
E 2
I 2
.It Dv HILIOCBEEP
E 2
Beep
D 2
.sp
E 2
I 2
.Pp
E 2
Generate a keyboard beep as defined by
D 2
.IR arg .
.I Arg
E 2
I 2
.Ar arg .
.Ar Arg
E 2
is a pointer to two bytes of information,
the first is the duration of the beep (microseconds),
the second is the frequency of the beep.
D 2
.TP 13
HILIOCALLOCQ
E 2
I 2
.It Dv HILIOCALLOCQ
E 2
Allocate Queue
D 2
.sp
E 2
I 2
.Pp
E 2
Allocate and map into user space,
D 2
an HILQ structure as defined in <hpdev/hilioctl.h>.
.I Arg
E 2
I 2
an
.Tn HILQ
structure as defined in
.Aq Pa hpdev/hilioctl.h .
.Ar Arg
E 2
is a pointer to a
D 2
.I hilqinfo
structure (also described in <hpdev/hilioctl.h>)
E 2
I 2
.Ar hilqinfo
structure (also described in
.Aq Pa hpdev/hilioctl.h )
E 2
consisting of a
D 2
.I qid
E 2
I 2
.Pa qid
E 2
and an
D 2
.I addr .
E 2
I 2
.Pa addr .
E 2
If
D 2
.I addr
E 2
I 2
.Pa addr
E 2
is non-zero it specifies where in the address space to map the queue.
If zero, the system will select a convenient location and fill in
D 2
.IR addr .
.I Qid
E 2
I 2
.Pa addr .
.Pa Qid
E 2
is filled in by the system and
is a small integer used to uniquely identify this queue.
This ioctl can only be issued to the loop pseudo-device.
D 2
.TP 14
HILIOCFREEQ
E 2
I 2
.It Dv HILIOCFREEQ
E 2
Free Queue
D 2
.sp
Release a previously allocated HIL event queue,
E 2
I 2
.Pp
Release a previously allocated
.Tn HIL
event queue,
E 2
unmapping it from the user's address space.
D 2
.I Arg
E 2
I 2
.Ar Arg
E 2
should point to a
D 2
.I hilqinfo
E 2
I 2
.Ar hilqinfo
E 2
structure which contains the
D 2
.I qid
E 2
I 2
.Ar qid
E 2
of the queue to be released.
All devices that are currently mapped to the queue are unmapped.
This ioctl can only be issued to the loop pseudo-device.
D 2
.TP 14
HILIOCMAPQ
E 2
I 2
.It Dv HILIOCMAPQ
E 2
Map Device to Queue
D 2
.sp
Maps this device to a previously allocated HIL event queue.
.I Arg
E 2
I 2
.Pp
Maps this device to a previously allocated
.Tn HIL
event queue.
.Ar Arg
E 2
is a pointer to an integer containing the
D 2
.I qid
E 2
I 2
.Ar qid
E 2
of the queue.
Once a device is mapped to a queue,
all event information generated by the device will be placed
into the event queue at the tail.
D 2
.TP 14
HILIOCUNMAPQ
E 2
I 2
.It Dv HILIOCUNMAPQ
E 2
Unmap Device from Queue
D 2
.sp
Unmap this device from a previously allocated HIL event queue.
.I Arg
E 2
I 2
.Pp
Unmap this device from a previously allocated
.Tn HIL
event queue.
.Ar Arg
E 2
is a pointer to an integer containing the
D 2
.I qid
E 2
I 2
.Ar qid
E 2
for the queue.
Future events from the device are no longer placed on the event queue.
D 2
.TP 14
HILIOCHPUX
E 2
I 2
.It Dv HILIOCHPUX
E 2
Use HP-UX Read Interface
D 2
.sp
Use HP-UX semantics for gathering data from this device.
E 2
I 2
.Pp
Use
.Tn HP-UX
semantics for gathering data from this device.
E 2
Instead of placing input events for the device on a queue,
D 2
they are placed, in HP-UX format, into a buffer from which they
can be obtained via \fIread\fP(2).
E 2
I 2
they are placed, in
.Tn HP-UX
format, into a buffer from which they
can be obtained via
.Xr read 2 .
E 2
This interface is provided for backwards compatibility.
D 2
Refer to the HP-UX documentation for a description of the event packet.
.SH ERRORS
.TP 15
[ENODEV]
E 2
I 2
Refer to the
.Tn HP-UX
documentation for a description of the event packet.
.El
.Sh FILES
.Bl -tag -width /dev/hil[2-7] -compact
.It Pa /dev/hil0
.Tn HIL
loop pseudo device.
.It Pa /dev/hil1
.Tn HIL
keyboard device.
.It Pa /dev/hil[2-7]
Individual
.Tn HIL
loop devices.
.El
.Sh ERRORS
.Bl -tag -width [EINVAL]
.It Bq Er ENODEV
E 2
no such HIL loop device.
D 2
.TP 15
[ENXIO]
E 2
I 2
.It Bq Er ENXIO
E 2
HIL loop is inoperative.
D 2
.TP 15
[EBUSY]
Another HP-UX process has the device open, or another BSD process has the
device open, and is using it in HP-UX mode.
.TP 15
[EINVAL]
Invalid ioctl specification.
.TP 15
[EMFILE]
E 2
I 2
.It Bq Er EBUSY
Another HP-UX process has the device open, or another
.Bx
process has the
device open, and is using it in
.Tn HP-UX
mode.
.It Bq Er EINVAL
Invalid
.Xr ioctl
specification.
.It Bq Er EMFILE
E 2
No more shared queues available.
D 2
.SH FILES
.ta \w'/dev/hil[1-7]  'u
/dev/hil0	HIL loop pseudo device.
.br
/dev/hil1	HIL keyboard device.
.br
/dev/hil[2-7]	Individual HIL loop devices.
E 2
I 2
.El
D 4
.Sh HISTORY
The
.Nm
interface
.Ud
E 4
E 2
E 1
