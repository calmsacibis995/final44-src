h11620
s 00002/00002/00124
d D 8.1 93/06/05 13:47:52 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00066/00066/00060
d D 6.4 91/03/27 23:51:56 cael 5 4
c  macro and text revision (-mdoc version 3)
e
s 00003/00003/00123
d D 6.3 86/05/21 15:56:29 anne 4 3
c spelling
e
s 00001/00001/00125
d D 6.2 85/11/13 21:10:36 sam 3 2
c update to reflect change in interrupt handling
e
s 00001/00001/00125
d D 6.1 85/05/15 17:46:05 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00126/00000/00000
d D 5.1 85/05/15 17:45:58 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 5
I 5
D 6
.\" Copyright (c) 1983, 1991 Regents of the University of California.
.\" All rights reserved.
E 6
I 6
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 6
E 5
.\"
D 5
.\"	%W% (Berkeley) %G%
E 5
I 5
.\" %sccs.include.redist.man%
E 5
.\"
D 2
.TH PS 4 "27 July 1983"
E 2
I 2
D 5
.TH PS 4 "%Q%"
E 2
.UC 5
.SH NAME
ps \- Evans and Sutherland Picture System 2 graphics device interface
.SH SYNOPSIS
D 3
.B "device ps0 at uba? csr 0172460 vector psintr"
E 3
I 3
.B "device ps0 at uba? csr 0172460 vector psclockintr pssystemintr"
E 3
.SH DESCRIPTION
E 5
I 5
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt PS 4 vax
.Os BSD 4.2
.Sh NAME
.Nm ps
.Nd Evans and Sutherland Picture System 2 graphics device interface
.Sh SYNOPSIS
.Cd "device ps0 at uba? csr 0172460 vector psclockintr pssystemintr"
.Sh DESCRIPTION
E 5
The
D 5
.I ps
E 5
I 5
.Nm ps
E 5
driver provides access
to an Evans and
Sutherland Picture System 2 graphics device.
D 5
Each minor device is a new PS2.
E 5
I 5
Each minor device is a new
.Tn PS2 .
E 5
When the device is opened, its interface registers are mapped,
via virtual memory, into a user process's address space.
This allows the user process very high bandwidth to the device
with no system call overhead.
D 5
.PP
DMA to and from the PS2 is not supported. All read and write
E 5
I 5
.Pp
.Tn DMA
to and from the
.Tn PS2
is not supported. All read and write
E 5
system calls will fail.
D 5
All data is moved to and from the PS2 via programmed I/O using
E 5
I 5
All data is moved to and from the
.Tn PS2
via programmed
.Tn I/O
using
E 5
the device's interface registers.
D 5
.PP
Commands are fed to and from the driver using the following ioctls:
.TP
PSIOGETADDR
.br
E 5
I 5
.Pp
Commands are fed to and from the driver using the following
.Xr ioctl 2 Ns s :
.Bl -tag -width PSIOSINGLEREFRESH
.It Dv PSIOGETADDR
E 5
Returns the virtual address through which the user process can access
the device's interface registers.
D 5
.TP
PSIOAUTOREFRESH
.br
E 5
I 5
.It Dv PSIOAUTOREFRESH
E 5
Start auto refreshing the screen.
The argument is an address in user space where the following data resides.
The first longword is a
D 5
.I count
E 5
I 5
.Em count
E 5
of the number of static refresh buffers.
The next
D 5
.I count
E 5
I 5
.Em count
E 5
longwords are the addresses in refresh memory where
the refresh buffers lie.
D 4
The driver will cycle thru these refresh buffers displaying them one by one
E 4
I 4
The driver will cycle through these refresh buffers displaying them one by one
E 4
on the screen.
D 5
.TP
PSIOAUTOMAP
.br
E 5
I 5
.It Dv PSIOAUTOMAP
E 5
D 4
Start automatically passing the display file thru the matrix processor and
E 4
I 4
Start automatically passing the display file through the matrix processor and
E 4
into the refresh buffer.
The argument is an address in user memory where the following data resides.
The first longword is a
D 5
.I count
E 5
I 5
.Em count
E 5
of the number of display files to operate on.
The next
D 5
.I count
E 5
I 5
.Em count
E 5
longwords are the address of these display files.
The final longword is the address in refresh buffer memory where transformed
coordinates are to be placed if the driver is not in double buffer mode (see
below).
D 5
.TP
PSIODOUBLEBUFFER
.br
E 5
I 5
.It Dv PSIODOUBLEBUFFER
E 5
Cause the driver to double buffer the output from the map that
is going to the refresh buffer.
The argument is again a user space address where the real arguments are stored.
The first argument is the starting address of refresh memory where the two
double buffers are located.
The second argument is the length of each double buffer.
The refresh mechanism displays the current double buffer, in addition
to its static refresh lists, when in double buffer mode.
D 5
.TP
PSIOSINGLEREFRESH
.br
E 5
I 5
.It Dv PSIOSINGLEREFRESH
E 5
Single step the refresh process. That is, the driver does not continually
refresh the screen.
D 5
.TP
PSIOSINGLEMAP
.br
E 5
I 5
.It Dv PSIOSINGLEMAP
E 5
Single step the matrix process.
D 4
The driver does not automatically feed display files thru the matrix unit.
E 4
I 4
The driver does not automatically feed display files through the matrix unit.
E 4
D 5
.TP
PSIOSINGLEBUFFER
.br
E 5
I 5
.It Dv PSIOSINGLEBUFFER
E 5
Turn off double buffering.
D 5
.TP
PSIOTIMEREFRESH
.br
E 5
I 5
.It Dv PSIOTIMEREFRESH
E 5
The argument is a count of the number of refresh interrupts to take
before turning off the screen.  This is used to do time exposures.
D 5
.TP
PSIOWAITREFRESH
.br
E 5
I 5
.It Dv PSIOWAITREFRESH
E 5
Suspend the user process until a refresh interrupt has occurred.
D 5
If in TIMEREFRESH mode, suspend until count refreshes have occurred.
.TP
PSIOSTOPREFRESH
.br
E 5
I 5
If in
.Dv TIMEREFRESH
mode, suspend until count refreshes have occurred.
.It Dv PSIOSTOPREFRESH
E 5
Wait for the next refresh, stop all refreshes, and then return to user process.
D 5
.TP
PSIOWAITMAP
.br
E 5
I 5
.It Dv PSIOWAITMAP
E 5
Wait until a map done interrupt has occurred.
D 5
.TP
PSIOSTOPMAP
.br
E 5
I 5
.It Dv PSIOSTOPMAP
E 5
Wait for a map done interrupt, do not restart the map, and then
return to the user.
D 5
.SH FILES
/dev/ps
.SH DIAGNOSTICS
.BR "ps device intr" .
.br
.BR "ps dma intr" .
E 5
I 5
.El
.Sh FILES
.Bl -tag -width /dev/psxx
.It Pa /dev/ps
.El
.Sh DIAGNOSTICS
.Bl -diag
.It ps device intr.
.It ps dma intr.
E 5
An interrupt was received from the device. 
This shouldn't happen,
check your device configuration for overlapping interrupt vectors.
D 5
.SH BUGS
E 5
I 5
.El
.Sh HISTORY
The
.Nm
driver appeared in
.Bx 4.2 .
.Sh BUGS
E 5
An invalid access (e.g., longword) to a mapped interface register
can cause the system to crash with a machine check.
A user process could possibly cause infinite interrupts hence
bringing things to a crawl.
E 1
