h22009
s 00065/00019/00106
d D 8.4 95/05/03 17:19:50 mckusick 8 7
c update for current include files
e
s 00001/00001/00124
d D 8.3 94/04/19 07:47:51 bostic 7 6
c spell
e
s 00002/00002/00123
d D 8.2 93/12/11 23:16:31 mckusick 6 5
c copyediting for Usenix manuals
e
s 00002/00002/00123
d D 8.1 93/06/05 13:52:20 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00116/00084/00009
d D 6.2 91/04/29 04:31:33 cael 4 3
c mdoc version three/bsd copyright
e
s 00001/00001/00092
d D 6.1 85/05/15 18:25:09 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00072/00025/00021
d D 5.1 85/05/15 18:24:53 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00046/00000/00000
d D 4.1 85/05/15 18:23:52 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 2
D 4
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 4
I 4
D 5
.\" Copyright (c) 1983, 1991 Regents of the University of California.
.\" All rights reserved.
E 5
I 5
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 5
E 4
.\"
E 2
I 1
D 4
.\"	%W% (Berkeley) %G%
E 4
I 4
.\" %sccs.include.redist.man%
E 4
.\"
D 2
.TH DIR 5 
.AT 3
E 2
I 2
D 3
.TH DIR 5  "15 January 1983"
E 3
I 3
D 4
.TH DIR 5  "%Q%"
E 3
.UC 5
E 2
.SH NAME
dir \- format of directories
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <sys/dir.h>
.SH DESCRIPTION
D 2
A directory
behaves exactly like an ordinary file, save that no
E 2
I 2
A directory behaves exactly like an ordinary file, save that no
E 2
user may write into a directory.
The fact that a file is a directory is indicated by
D 2
a bit in the flag word of its i-node entry;
see
.IR filsys (5).
The structure of a directory entry as given in the
include file is:
E 2
I 2
a bit in the flag word of its i-node entry; see
.IR fs (5).
The structure of a directory entry as given in the include file is:
E 2
.RS
D 2
.ta 8n +10n
E 2
I 2
.ta 8n +10n +10n
E 2
.PP
.nf
E 4
I 4
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt DIR 5
.Os BSD 4.2
.Sh NAME
.Nm dir ,
.Nm dirent
.Nd directory file format
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/dir.h>
.Sh DESCRIPTION
D 6
Directories provide a convienent hierarchical method of grouping
E 6
I 6
Directories provide a convenient hierarchical method of grouping
E 6
files while obscuring the underlying details of the storage medium.
A directory file is differentiated from a plain file
by a flag in its
.Xr inode 5
entry.
D 6
It consists of records (directory entries) each of which contain
E 6
I 6
It consists of records (directory entries) each of which contains
E 6
information about a file and a pointer to the file itself.
Directory entries may contain other directories
as well as plain files; such nested directories are refered to as
subdirectories. 
A hierarchy of directories and files is formed in this manner
D 7
and is called a file system (or refered to as a file system tree).
E 7
I 7
and is called a file system (or referred to as a file system tree).
E 7
.\" An entry in this tree,
.\" nested or not nested,
.\" is a pathname.
.Pp
Each directory file contains two special directory entries; one is a pointer
to the directory itself
called dot
.Ql \&.
and the other a pointer to its parent directory called dot-dot
.Ql \&.. .
Dot and dot-dot
are valid pathnames, however,
the system root directory
.Ql / ,
has no parent and dot-dot points to itself like dot.
.Pp
File system nodes are ordinary directory files on which has
been grafted a file system object, such as a physical disk or a
partitioned area of such a disk.
(See
.Xr mount 1
and
.Xr mount 8 . )
.Pp
The directory entry format is defined in the file
.Aq dirent.h :
.Bd -literal
#ifndef _DIRENT_H_
#define _DIRENT_H_

E 4
D 2
#ifndef	DIRSIZ
#define	DIRSIZ	14
E 2
I 2
/*
D 4
 * A directory consists of some number of blocks of DIRBLKSIZ
 * bytes, where DIRBLKSIZ is chosen such that it can be transferred
 * to disk in a single atomic operation (e.g. 512 bytes on most machines).
 *
 * Each DIRBLKSIZ byte block contains some number of directory entry
 * structures, which are of variable length.  Each directory entry has
 * a struct direct at the front of it, containing its inode number,
 * the length of the entry, and the length of the name contained in
 * the entry.  These are followed by the name padded to a 4 byte boundary
 * with null bytes.  All names are guaranteed null terminated.
 * The maximum length of a name in a directory is MAXNAMLEN.
 *
 * The macro DIRSIZ(dp) gives the amount of space required to represent
 * a directory entry.  Free space in a directory is represented by
 * entries which have dp->d_reclen > DIRSIZ(dp).  All DIRBLKSIZ bytes
 * in a directory block are claimed by the directory entries.  This
 * usually results in the last entry in a directory having a large
 * dp->d_reclen.  When entries are deleted from a directory, the
 * space is returned to the previous entry in the same directory
 * block by increasing its dp->d_reclen.  If the first entry of
 * a directory block is free, then its dp->d_ino is set to 0.
 * Entries other than the first in a directory do not normally have
 * dp->d_ino set to 0.
 */
#ifdef KERNEL
#define DIRBLKSIZ DEV_BSIZE
E 4
I 4
D 8
* A directory entry has a struct dirent at the front of it, containing its
* inode number, the length of the entry, and the length of the name
* contained in the entry.  These are followed by the name padded to a 4
* byte boundary with null bytes.  All names are guaranteed null terminated.
* The maximum length of a name in a directory is MAXNAMLEN.
*/
E 8
I 8
 * The dirent structure defines the format of directory entries returned by 
 * the getdirentries(2) system call.
 *
 * A directory entry has a struct dirent at the front of it, containing its
 * inode number, the length of the entry, and the length of the name
 * contained in the entry.  These are followed by the name padded to a 4
 * byte boundary with null bytes.  All names are guaranteed null terminated.
 * The maximum length of a name in a directory is MAXNAMLEN.
 */
E 8

struct dirent {
D 8
	u_long	d_fileno;	/* file number of entry */
	u_short	d_reclen;	/* length of this record */
	u_short	d_namlen;	/* length of string in d_name */
E 8
I 8
	u_int32_t d_fileno;		/* file number of entry */
	u_int16_t d_reclen;		/* length of this record */
	u_int8_t  d_type; 		/* file type, see below */
	u_int8_t  d_namlen;		/* length of string in d_name */
E 8
#ifdef _POSIX_SOURCE
D 8
	char	d_name[MAXNAMLEN + 1];	/* maximum name length */
E 8
I 8
	char	d_name[255 + 1];	/* name must be no longer than this */
E 8
E 4
#else
D 4
#define	DIRBLKSIZ 512
E 4
I 4
D 8
#define MAXNAMLEN       255
	char    d_name[MAXNAMLEN + 1];  /* maximum name length */
E 8
I 8
#define	MAXNAMLEN	255
	char	d_name[MAXNAMLEN + 1];	/* name must be no longer than this */
E 8
E 4
E 2
#endif
D 2
struct	direct
{
	ino_t	d_ino;
	char	d_name[DIRSIZ];
E 2
I 2
D 8

E 8
D 4
#define MAXNAMLEN 255
E 4
I 4
};
E 4

I 8
/*
 * File types
 */
#define	DT_UNKNOWN	 0
#define	DT_FIFO		 1
#define	DT_CHR		 2
#define	DT_DIR		 4
#define	DT_BLK		 6
#define	DT_REG		 8
#define	DT_LNK		10
#define	DT_SOCK		12
#define	DT_WHT		14

/*
 * Convert between stat structure types and directory types.
 */
#define	IFTODT(mode)	(((mode) & 0170000) >> 12)
#define	DTTOIF(dirtype)	((dirtype) << 12)

E 8
D 4
/*
 * The DIRSIZ macro gives the minimum record length which will hold
 * the directory entry.  This requires the amount of space in struct direct
 * without the d_name field, plus enough space for the name with a terminating
 * null byte (dp->d_namlen+1), rounded up to a 4 byte boundary.
 */
#undef DIRSIZ
#define DIRSIZ(dp) \e
    ((sizeof (struct direct) - (MAXNAMLEN+1)) + (((dp)->d_namlen+1 + 3) &~ 3))
E 4
I 4
#ifdef _POSIX_SOURCE
typedef void *	DIR;
#else
E 4

D 4
struct	direct {
	u_long	d_ino;
	short	d_reclen;
	short	d_namlen;
	char	d_name[MAXNAMLEN + 1];
	/* typically shorter */
E 2
};
E 4
I 4
#define	d_ino		d_fileno	/* backward compatibility */
E 4
I 2

D 4
struct _dirdesc {
	int	dd_fd;
	long	dd_loc;
	long	dd_size;
	char	dd_buf[DIRBLKSIZ];
};
E 2
.fi
.RE
.PP
By convention, the first two entries in each directory
D 2
are for `\fB.\fR' and `\fB..\fR'.  The first is an entry for the
directory itself.  The second is for the parent
directory.
The meaning of `\fB..\fR' is modified for the root directory
of the master file system
.RB (\*(lq / \*(rq),
where `\fB..\fR' has the
same meaning as `\fB.\fR'.
E 2
I 2
are for `.' and `..'.  The first is an entry for the
directory itself.  The second is for the parent directory.
The meaning of `..' is modified for the root directory
of the master file system (\*(lq/\*(rq),
where `..' has the same meaning as `.'.
E 2
.SH "SEE ALSO"
D 2
filsys(5)
E 2
I 2
fs(5)
E 4
I 4
/* definitions for library routines operating on directories. */
#define	DIRBLKSIZ	1024

/* structure describing an open directory. */
typedef struct _dirdesc {
D 8
	int	dd_fd;    /* file descriptor associated with directory */
	long	dd_loc;	  /* offset in current buffer */
	long	dd_size;  /* amount of data returned by getdirentries */
	char	*dd_buf;  /* data buffer */
	int	dd_len;   /* size of data buffer */
	long	dd_seek;  /* magic cookie returned by getdirentries */
E 8
I 8
	int	dd_fd;		/* file descriptor associated with directory */
	long	dd_loc;		/* offset in current buffer */
	long	dd_size;	/* amount of data returned by getdirentries */
	char	*dd_buf;	/* data buffer */
	int	dd_len;		/* size of data buffer */
	long	dd_seek;	/* magic cookie returned by getdirentries */
	long	dd_rewind;	/* magic cookie for rewinding */
	int	dd_flags;	/* flags for readdir */
E 8
} DIR;

#define	dirfd(dirp)	((dirp)->dd_fd)

I 8
/* flags for opendir2 */
#define DTF_HIDEW	0x0001	/* hide whiteout entries */
#define DTF_NODUP	0x0002	/* don't return duplicate names */
#define DTF_REWIND	0x0004	/* rewind after reading union stack */
#define __DTF_READALL	0x0008	/* everything has been read */

E 8
#ifndef NULL
#define	NULL	0
#endif

#endif /* _POSIX_SOURCE */

#ifndef KERNEL

#include <sys/cdefs.h>
I 8

__BEGIN_DECLS
DIR *opendir __P((const char *));
struct dirent *readdir __P((DIR *));
void rewinddir __P((DIR *));
int closedir __P((DIR *));
#ifndef _POSIX_SOURCE
DIR *__opendir2 __P((const char *, int));
long telldir __P((const DIR *));
void seekdir __P((DIR *, long));
int scandir __P((const char *, struct dirent ***,
    int (*)(struct dirent *), int (*)(const void *, const void *)));
int alphasort __P((const void *, const void *));
int getdirentries __P((int, char *, int, long *));
#endif /* not POSIX */
__END_DECLS
E 8

#endif /* !KERNEL */

#endif /* !_DIRENT_H_ */
.Ed
.Sh SEE ALSO
.Xr fs 5
.Xr inode 5
.Sh HISTORY
A
.Nm
file format appeared in
.At v7 .
E 4
E 2
E 1
