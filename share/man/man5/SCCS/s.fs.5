h38965
s 00001/00001/00315
d D 8.2 94/04/19 07:50:17 bostic 8 7
c spell
e
s 00002/00002/00314
d D 8.1 93/06/05 13:52:37 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00149/00096/00167
d D 6.4 91/04/29 04:31:26 cael 6 5
c mdoc version three/bsd copyright
e
s 00087/00085/00176
d D 6.3 88/05/02 17:41:27 mckusick 5 4
c convert to describe dynamic file system structure
e
s 00020/00008/00241
d D 6.2 86/05/16 11:49:36 mckusick 4 3
c update for 4.3BSD
e
s 00001/00001/00248
d D 6.1 85/05/15 18:29:14 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00232/00268/00017
d D 5.1 85/05/15 18:28:39 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00285/00000/00000
d D 4.1 85/05/15 18:27:36 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 2
D 6
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 7
.\" Copyright (c) 1983, 1991 Regents of the University of California.
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
E 6
.\"
E 2
I 1
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\" %sccs.include.redist.roff%
E 6
.\"
D 2
.TH FILSYS 5
.AT 3
E 2
I 2
D 3
.TH FS 5 "18 July 1983"
E 3
I 3
D 6
.TH FS 5 "%Q%"
E 3
.UC 5
E 2
.SH NAME
D 2
filsys, flblk, ino \- format of file system volume
E 2
I 2
fs, inode \- format of file system volume
E 2
.SH SYNOPSIS
.B #include <sys/types.h>
.br
D 2
.B #include <sys/flbk.h>
E 2
I 2
.B #include <sys/fs.h>
E 2
.br
D 2
.B #include <sys/filsys.h>
.br
.B #include <sys/ino.h>
E 2
I 2
.B #include <sys/inode.h>
E 2
.SH DESCRIPTION
D 2
Every
file system storage volume
(e.g. RF disk, RK disk, RP disk, DECtape reel)
E 2
I 2
Every file system storage volume (disk, nine-track tape, for instance)
E 2
has a common format for certain vital information.
D 2
Every such volume is divided into a certain number
of 1024-byte blocks.
Block 0 is unused and is available to contain
a bootstrap program, pack label, or other information.
E 2
I 2
Every such volume is divided into a certain number of blocks.
The block size is a parameter of the file system.
D 4
Sectors 0 to 15 on a file system are used to contain primary
and secondary bootstrapping programs.
E 4
I 4
Sectors beginning at BBLOCK and continuing for BBSIZE are used to
D 5
contain primary and secondary bootstrapping programs.
E 5
I 5
contain a label and for some hardware
primary and secondary bootstrapping programs.
E 5
E 4
E 2
.PP
D 2
Block 1 is the
E 2
I 2
D 4
The actual file system begins at sector 16 with the
E 2
.I "super block."
E 4
I 4
The actual file system begins at sector SBLOCK with the
.I "super block"
that is of size SBSIZE.
E 4
The layout of the super block as defined by the include file
D 2
.I <sys/filsys.h>
E 2
I 2
.RI < sys/fs.h >
E 2
is:
.PP
.nf
D 2
.ta \w'struct 'u +\w'daddr_t  'u +\w's_inode[NICINOD]; 'u
.so /usr/include/sys/filsys.h
E 2
I 2
D 5
#define	FS_MAGIC	0x011954
struct	fs {
	struct	fs *fs_link;		/* linked list of file systems */
	struct	fs *fs_rlink;		/*     used for incore super blocks */
	daddr_t	fs_sblkno;		/* addr of super-block in filesys */
	daddr_t	fs_cblkno;		/* offset of cyl-block in filesys */
	daddr_t	fs_iblkno;		/* offset of inode-blocks in filesys */
	daddr_t	fs_dblkno;		/* offset of first data after cg */
	long	fs_cgoffset;		/* cylinder group offset in cylinder */
	long	fs_cgmask;		/* used to calc mod fs_ntrak */
	time_t 	fs_time;    		/* last time written */
	long	fs_size;		/* number of blocks in fs */
	long	fs_dsize;		/* number of data blocks in fs */
	long	fs_ncg;			/* number of cylinder groups */
	long	fs_bsize;		/* size of basic blocks in fs */
	long	fs_fsize;		/* size of frag blocks in fs */
	long	fs_frag;		/* number of frags in a block in fs */
E 5
I 5
.ta \w'\ \ \ \ 'u +\w'daddr_t\ \ 'u +\w'fs_fsmnt[MAXMNTLEN];\ \ 'u
E 6
I 6
.\"     %W% (Berkeley) %G%
.\"
.Dd %Q%
.Dt FS 5
.Os BSD 4.2
.Sh NAME
.Nm fs ,
.Nm inode
.Nd format of file system volume
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <ufs/fs.h>
.Fd #include <ufs/inode.h>
.Sh DESCRIPTION
The files
.Aq Pa fs.h
and
.Aq Pa inode.h
declare several structures, defined variables and macros
which are used to create and manage the underlying format of
file system objects on random access devices (disks).
.Pp
The block size and number of blocks which
comprise a file system are parameters of the file system.
Sectors beginning at
.Dv BBLOCK
and continuing for
.Dv BBSIZE
are used
for a disklabel and for some hardware primary
and secondary bootstrapping programs.
.Pp
The actual file system begins at sector
.Dv SBLOCK
with the
.Em super-block
that is of size
.Dv SBSIZE .
The following structure described the super-block and is
from the file
.Aq Pa ufs/fs.h :
.Bd -literal
E 6
#define	FS_MAGIC 0x011954
struct fs {
	struct	fs *fs_link;	/* linked list of file systems */
	struct	fs *fs_rlink;	/*     used for incore super blocks */
	daddr_t	fs_sblkno;	/* addr of super-block in filesys */
	daddr_t	fs_cblkno;	/* offset of cyl-block in filesys */
	daddr_t	fs_iblkno;	/* offset of inode-blocks in filesys */
	daddr_t	fs_dblkno;	/* offset of first data after cg */
	long	fs_cgoffset;	/* cylinder group offset in cylinder */
	long	fs_cgmask;	/* used to calc mod fs_ntrak */
	time_t 	fs_time;    	/* last time written */
	long	fs_size;	/* number of blocks in fs */
	long	fs_dsize;	/* number of data blocks in fs */
	long	fs_ncg;	/* number of cylinder groups */
	long	fs_bsize;	/* size of basic blocks in fs */
	long	fs_fsize;	/* size of frag blocks in fs */
	long	fs_frag;	/* number of frags in a block in fs */
E 5
/* these are configuration parameters */
D 5
	long	fs_minfree;		/* minimum percentage of free blocks */
	long	fs_rotdelay;		/* num of ms for optimal next block */
	long	fs_rps;			/* disk revolutions per second */
E 5
I 5
	long	fs_minfree;	/* minimum percentage of free blocks */
	long	fs_rotdelay;	/* num of ms for optimal next block */
	long	fs_rps;	/* disk revolutions per second */
E 5
/* these fields can be computed from the others */
D 5
	long	fs_bmask;		/* ``blkoff'' calc of blk offsets */
	long	fs_fmask;		/* ``fragoff'' calc of frag offsets */
	long	fs_bshift;		/* ``lblkno'' calc of logical blkno */
	long	fs_fshift;		/* ``numfrags'' calc number of frags */
E 5
I 5
	long	fs_bmask;	/* ``blkoff'' calc of blk offsets */
	long	fs_fmask;	/* ``fragoff'' calc of frag offsets */
	long	fs_bshift;	/* ``lblkno'' calc of logical blkno */
	long	fs_fshift;	/* ``numfrags'' calc number of frags */
E 5
/* these are configuration parameters */
D 5
	long	fs_maxcontig;		/* max number of contiguous blks */
	long	fs_maxbpg;		/* max number of blks per cyl group */
E 5
I 5
	long	fs_maxcontig;	/* max number of contiguous blks */
	long	fs_maxbpg;	/* max number of blks per cyl group */
E 5
/* these fields can be computed from the others */
D 5
	long	fs_fragshift;		/* block to frag shift */
	long	fs_fsbtodb;		/* fsbtodb and dbtofsb shift constant */
	long	fs_sbsize;		/* actual size of super block */
	long	fs_csmask;		/* csum block offset */
	long	fs_csshift;		/* csum block number */
	long	fs_nindir;		/* value of NINDIR */
	long	fs_inopb;		/* value of INOPB */
	long	fs_nspf;		/* value of NSPF */
D 4
	long	fs_sparecon[6];		/* reserved for future constants */
E 4
I 4
	long	fs_optim;		/* optimization preference, see below */
	long	fs_sparecon[5];		/* reserved for future constants */
E 5
I 5
	long	fs_fragshift;	/* block to frag shift */
	long	fs_fsbtodb;	/* fsbtodb and dbtofsb shift constant */
	long	fs_sbsize;	/* actual size of super block */
	long	fs_csmask;	/* csum block offset */
	long	fs_csshift;	/* csum block number */
	long	fs_nindir;	/* value of NINDIR */
	long	fs_inopb;	/* value of INOPB */
	long	fs_nspf;	/* value of NSPF */
/* yet another configuration parameter */
	long	fs_optim;	/* optimization preference, see below */
/* these fields are derived from the hardware */
	long	fs_npsect;	/* # sectors/track including spares */
	long	fs_interleave;	/* hardware sector interleave */
	long	fs_trackskew;	/* sector 0 skew, per track */
	long	fs_headswitch;	/* head switch time, usec */
	long	fs_trkseek;	/* track-to-track seek, usec */
E 5
E 4
/* sizes determined by number of cylinder groups and their sizes */
D 5
	daddr_t fs_csaddr;		/* blk addr of cyl grp summary area */
	long	fs_cssize;		/* size of cyl grp summary area */
	long	fs_cgsize;		/* cylinder group size */
/* these fields should be derived from the hardware */
	long	fs_ntrak;		/* tracks per cylinder */
	long	fs_nsect;		/* sectors per track */
	long  	fs_spc;   		/* sectors per cylinder */
E 5
I 5
	daddr_t fs_csaddr;	/* blk addr of cyl grp summary area */
	long	fs_cssize;	/* size of cyl grp summary area */
	long	fs_cgsize;	/* cylinder group size */
/* these fields are derived from the hardware */
	long	fs_ntrak;	/* tracks per cylinder */
	long	fs_nsect;	/* sectors per track */
	long  	fs_spc;   	/* sectors per cylinder */
E 5
/* this comes from the disk driver partitioning */
D 5
	long	fs_ncyl;   		/* cylinders in file system */
E 5
I 5
	long	fs_ncyl;   	/* cylinders in file system */
E 5
/* these fields can be computed from the others */
D 5
	long	fs_cpg;			/* cylinders per group */
	long	fs_ipg;			/* inodes per group */
	long	fs_fpg;			/* blocks per group * fs_frag */
E 5
I 5
	long	fs_cpg;	/* cylinders per group */
	long	fs_ipg;	/* inodes per group */
	long	fs_fpg;	/* blocks per group * fs_frag */
E 5
/* this data must be re-computed after crashes */
	struct	csum fs_cstotal;	/* cylinder summary information */
/* these fields are cleared at mount time */
D 5
	char   	fs_fmod;    		/* super block modified flag */
	char   	fs_clean;    		/* file system is clean flag */
	char   	fs_ronly;   		/* mounted read-only flag */
	char   	fs_flags;   		/* currently unused flag */
E 5
I 5
	char   	fs_fmod;    	/* super block modified flag */
	char   	fs_clean;    	/* file system is clean flag */
	char   	fs_ronly;   	/* mounted read-only flag */
	char   	fs_flags;   	/* currently unused flag */
E 5
	char	fs_fsmnt[MAXMNTLEN];	/* name mounted on */
/* these fields retain the current block allocation info */
D 5
	long	fs_cgrotor;		/* last cg searched */
	struct	csum *fs_csp[MAXCSBUFS];/* list of fs_cs info buffers */
	long	fs_cpc;			/* cyl per cycle in postbl */
	short	fs_postbl[MAXCPG][NRPOS];/* head of blocks for each rotation */
	long	fs_magic;		/* magic number */
	u_char	fs_rotbl[1];		/* list of blocks for each rotation */
E 5
I 5
	long	fs_cgrotor;	/* last cg searched */
	struct	csum *fs_csp[MAXCSBUFS]; /* list of fs_cs info buffers */
	long	fs_cpc;	/* cyl per cycle in postbl */
	short	fs_opostbl[16][8];	/* old rotation block list head */
	long	fs_sparecon[56];	/* reserved for future constants */
	quad	fs_qbmask;	/* ~fs_bmask - for use with quad size */
	quad	fs_qfmask;	/* ~fs_fmask - for use with quad size */
D 6
	long	fs_postblformat;	/* format of positional layout tables */
E 6
I 6
	long	fs_postblformat; /* format of positional layout tables */
E 6
D 8
	long	fs_nrpos;	/* number of rotaional positions */
E 8
I 8
	long	fs_nrpos;	/* number of rotational positions */
E 8
	long	fs_postbloff;	/* (short) rotation block list head */
	long	fs_rotbloff;	/* (u_char) blocks for each rotation */
	long	fs_magic;	/* magic number */
	u_char	fs_space[1];	/* list of blocks for each rotation */
E 5
/* actually longer */
};
E 2
D 6
.fi
D 2
.PP
.I S_isize
is the address of the first block after the i-list,
which starts just after the super-block, in block 2.
Thus the i-list is
.IR s_isize \-2
blocks long.
.I S_fsize
is the address of the first block not potentially
available for allocation
to a file.
These numbers are used by the system to
check for bad block addresses;
if an `impossible' block address is allocated from the free list
or is freed,
a diagnostic is written on the on-line console.
Moreover, the free array is cleared, so as to prevent further
allocation from a presumably corrupted free list.
.PP
The free list for each volume is maintained as
follows.
E 2
I 2
.LP
E 6
I 6
.Ed
.Pp
E 6
Each disk drive contains some number of file systems.
A file system consists of a number of cylinder groups.
Each cylinder group has inodes and data.
D 6
.LP
E 6
I 6
.Pp
E 6
A file system is described by its super-block, which in turn
describes the cylinder groups.  The super-block is critical
data and is replicated in each cylinder group to protect against
catastrophic loss.  This is done at file system creation
time and the critical
super-block data does not change, so the copies need not be
referenced further unless disaster strikes.
D 6
.LP
E 6
I 6
.Pp
E 6
Addresses stored in inodes are capable of addressing fragments
D 6
of `blocks'. File system blocks of at most size MAXBSIZE can 
E 6
I 6
of `blocks'. File system blocks of at most size
.Dv MAXBSIZE
can 
E 6
be optionally broken into 2, 4, or 8 pieces, each of which is
D 6
addressable; these pieces may be DEV_BSIZE, or some multiple of
a DEV_BSIZE unit.
.LP
E 6
I 6
addressable; these pieces may be
.Dv DEV_BSIZE ,
or some multiple of
a
.Dv DEV_BSIZE
unit.
.Pp
E 6
Large files consist of exclusively large data blocks.  To avoid
undue wasted disk space, the last data block of a small file is
allocated as only as many fragments of a large block as are
necessary.  The file system format retains only a single pointer
to such a fragment, which is a piece of a single large block that
has been divided.  The size of such a fragment is determinable from
D 6
information in the inode, using the ``blksize(fs, ip, lbn)'' macro.
.LP
E 6
I 6
information in the inode, using the
.Fn blksize fs ip lbn
macro.
.Pp
E 6
The file system records space availability at the fragment level;
to determine block availability, aligned fragments are examined.
D 6
.LP
E 6
I 6
.Pp
E 6
The root inode is the root of the file system.
Inode 0 can't be used for normal purposes and
historically bad blocks were linked to inode 1,
thus the root inode is 2 (inode 1 is no longer used for
this purpose, however numerous dump tapes make this
assumption, so we are stuck with it).
E 2
D 5
The
D 2
.I s_free
array contains, in
.I "s_free[1], ... , s_free[s_nfree\-1],"
up to NICFREE free block numbers.
NICFREE is a configuration constant.
.I S_free[0]
is the block address of the head
of a chain of blocks constituting the free list.
The layout of each block of the free chain as defined
in the include file
.I <sys/fblk.h>
is:
.PP
.nf
.so /usr/include/sys/fblk.h
.fi
.PP
The fields
.I df_nfree
and
.I df_free
in a free block are used exactly like
.I s_nfree
and 
.I s_free
in the super block.
To allocate a block:
decrement
.I s_nfree,
and the new block number is
.I s_free[s_nfree].
If the new block address is 0,
there are no blocks left, so give an error.
If
.I s_nfree
became 0,
read the new block into
.I s_nfree
and 
.I s_free.
To free a block, check if
.I s_nfree
is NICFREE; if so,
copy
.I s_nfree
and the
.I s_free
array into it,
write it out, and set
.I s_nfree
to 0.
In any event set
.I s_free[s_nfree]
to the freed block's address and
increment
.I s_nfree.
.PP
.I S_ninode
is the number of free i-numbers in the
.I s_inode
array.
To allocate an i-node:
if
.I s_ninode
is greater than 0,
decrement it and return
.I s_inode[s_ninode].
If it was 0, read the i-list
and place the numbers of all free inodes
(up to NICINOD) into the
.I s_inode
array,
then try again.
To free an i-node,
provided
.I s_ninode
is less than NICINODE,
place its number into
.I s_inode[s_ninode]
and increment
.I s_ninode.
If
.I s_ninode
is already NICINODE, don't bother to enter the freed i-node into any table.
This list of i-nodes is only to speed
up the allocation process; the information
as to whether the inode is really free
or not is maintained in the inode itself.
.PP
The fields
.I s_lasti
and
.I s_nbehind
are used to avoid searching the inode list from the beginning
each time the system runs out of inodes.
.I S_lasti
gives the base of the block of inodes last searched on the filesystem
when inodes ran out, and
.I s_nbehind
gives the number of inodes, whose numbers were less than
.I s_lasti
when they were freed with
.I s_ninode
already
NICINODE.
Thus
.I s_ninode
is the number of free inodes before
.I s_lasti.
The system will search forward for free inodes from
.I s_lasti
for more inodes unless
.I s_nbehind
is sufficiently large, in which case it will search the file system
inode list from the beginning.
This mechanism serves to avoid n**2 behavior in allocating inodes.
.PP
.I S_flock
and
.I s_ilock
are flags maintained in the core
copy of the file system
while it is mounted
and their values on disk are immaterial.
The value of
.I s_fmod
on disk is likewise immaterial;
it is used as a flag to indicate that the super-block has
changed and should be copied to
the disk during the next periodic update of file
system information.
.I S_ronly
is a write-protection indicator; its disk value is also immaterial.
.PP
.I S_time
is the last time the super-block of the file system was changed.
During a reboot,
.I s_time
of the super-block for the root file system
is used to set the system's idea of the time.
.PP
The fields
.I s_tfree, s_tinode, s_fname
and
.I s_fpack
are not currently maintained.
.PP
I-numbers begin at 1, and the storage for i-nodes
begins in block 2.
.tr |
I-nodes are 64 bytes long, so 16 of them fit into a block.
I-node 2 is reserved for the root directory of the file
system, but no other i-number has a built-in
meaning.
Each i-node represents one file.
The format of an i-node as given in the include file
.I <sys/ino.h>
is:
.PP
.nf
.ta \w'#define 'u +\w'time_t  'u +\w'di_addr[40]; 'u
.so /usr/include/sys/ino.h
.fi
.PP
.I Di_mode
tells the kind of file; it
is encoded identically to the
.I st_mode field of
.IR stat (2).
.I Di_nlink
is the number of directory entries
(links) that refer to this i-node.
.I Di_uid
and
.I di_gid
are the owner's user and group IDs.
.I Size
is the number of bytes in the file.
.I Di_atime
and
.I di_mtime
are the times of last access and modification
of the file contents (read, write or create)
(see
.IR times (2));
.I Di_ctime
records the time of last modification
to the inode or to the file, and is used
to determine whether it should be dumped.
.PP
Special files are recognized by their modes
and not by i-number.
A block-type special file is one which
can potentially be mounted as a file system;
a character-type special file cannot, though it is
not necessarily character-oriented.
For special files, the 
.I di_addr
field is occupied by the device code
(see
.IR types (5)).
The device codes
of block and character special files overlap.
.PP
Disk addresses of plain files and directories
are kept in the array
.I di_addr
packed into 3 bytes each.
The first 10 addresses specify device blocks directly.
The last 3 addresses are singly, doubly, and triply
indirect and point to blocks of 256 block pointers.
Pointers in indirect blocks have the type
.I daddr_t
(see
.IR types (5)).
.PP
For block
.I b
in a file to exist,
it
is not necessary that all blocks less than
.I b
exist.
A zero block number either in the address words of
the i-node or in an indirect block indicates that the
corresponding block has never been allocated.
Such a missing block reads as if it contained all zero words.
.SH "SEE ALSO"
fsck(8), icheck(8), dcheck(8), dir(5), mount(8), stat(2), types(5)
E 2
I 2
.I lost+found
directory is given the next available
inode when it is initially created by
.IR mkfs .
E 5
D 6
.LP
.I fs_minfree
gives the minimum acceptable percentage of file system
E 6
I 6
.Pp
The
.Fa fs_minfree
element gives the minimum acceptable percentage of file system
E 6
D 4
blocks which may be free. If the freelist drops below this level
E 4
I 4
blocks that may be free. If the freelist drops below this level
E 4
D 5
only the super-user may continue to allocate blocks. This may
be set to 0 if no reserve of free blocks is deemed necessary,
E 5
I 5
only the super-user may continue to allocate blocks.
D 6
.I Fs_minfree
E 6
I 6
The
.Fa fs_minfree
element
E 6
may be set to 0 if no reserve of free blocks is deemed necessary,
E 5
however severe performance degradations will be observed if the
file system is run at greater than 90% full; thus the default
value of
D 6
.I fs_minfree
E 6
I 6
.Fa fs_minfree
E 6
is 10%.
D 6
.LP
E 6
I 6
.Pp
E 6
Empirically the best trade-off between block fragmentation and
overall disk utilization at a loading of 90% comes with a
D 5
fragmentation of 4, thus the default fragment size is a fourth
E 5
I 5
fragmentation of 8, thus the default fragment size is an eighth
E 5
of the block size.
D 6
.LP
I 4
.I fs_optim
E 6
I 6
.Pp
The element
.Fa fs_optim
E 6
specifies whether the file system should try to minimize the time spent
allocating blocks, or if it should attempt to minimize the space
fragmentation on the disk.
If the value of fs_minfree (see above) is less than 10%,
then the file system defaults to optimizing for space to avoid
running out of full sized blocks.
If the value of minfree is greater than or equal to 10%,
fragmentation is unlikely to be problematical, and
the file system defaults to optimizing for time.
D 6
.LP
E 4
.I Cylinder group related
.IR limits :
E 6
I 6
.Pp
.Em Cylinder group related limits :
E 6
Each cylinder keeps track of the availability of blocks at different
rotational positions, so that sequential blocks can be laid out
D 5
with minimum rotational latency.  NRPOS is the number of rotational
positions which are distinguished.  With NRPOS 8 the resolution of the
E 5
I 5
with minimum rotational latency. With the default of 8 distinguished
rotational positions, the resolution of the
E 5
summary information is 2ms for a typical 3600 rpm drive.
D 6
.LP
.I fs_rotdelay
E 6
I 6
.Pp
The element
.Fa fs_rotdelay
E 6
gives the minimum number of milliseconds to initiate
D 6
another disk transfer on the same cylinder.  It is used in
determining the rotationally optimal layout for disk blocks
within a file; the default value for
.I fs_rotdelay
E 6
I 6
another disk transfer on the same cylinder.
It is used in determining the rotationally optimal
layout for disk blocks within a file;
the default value for
.Fa fs_rotdelay
E 6
is 2ms.
D 6
.LP
E 6
I 6
.Pp
E 6
Each file system has a statically allocated number of inodes.
D 6
An inode is allocated for each NBPI bytes of disk space.
E 6
I 6
An inode is allocated for each
.Dv NBPI
bytes of disk space.
E 6
The inode allocation strategy is extremely conservative.
D 6
.LP
D 5
MAXIPG bounds the number of inodes per cylinder group, and
is needed only to keep the structure simpler by having the
only a single variable size element (the free bit map).
.LP
.B N.B.:
MAXIPG must be a multiple of INOPB(fs).
.LP
E 5
MINBSIZE is the smallest allowable block size.
With a MINBSIZE of 4096
E 6
I 6
.Pp
.Dv MINBSIZE
is the smallest allowable block size.
With a
.Dv MINBSIZE
of 4096
E 6
it is possible to create files of size
2^32 with only two levels of indirection.
D 6
MINBSIZE must be big enough to hold a cylinder group block,
thus changes to (struct cg) must keep its size within MINBSIZE.
D 5
MAXCPG is limited only to dimension an array in (struct cg);
it can be made larger as long as that structure's size remains
within the bounds dictated by MINBSIZE.
E 5
Note that super blocks are never more than size SBSIZE.
.LP
E 6
I 6
.Dv MINBSIZE
must be big enough to hold a cylinder group block,
thus changes to
.Pq Fa struct cg
must keep its size within
.Dv MINBSIZE .
Note that super-blocks are never more than size
.Dv SBSIZE .
.Pp
E 6
D 4
The path name on which the file system is mounted is maintained
in
E 4
I 4
The path name on which the file system is mounted is maintained in
E 4
D 6
.IR fs_fsmnt .
MAXMNTLEN defines the amount of space allocated in 
the super block for this name.
E 6
I 6
.Fa fs_fsmnt .
.Dv MAXMNTLEN
defines the amount of space allocated in 
the super-block for this name.
E 6
The limit on the amount of summary information per file system
D 5
is defined by MAXCSBUFS. It is currently parameterized for a
E 5
I 5
D 6
is defined by MAXCSBUFS.
E 6
I 6
is defined by
.Dv MAXCSBUFS.
E 6
For a 4096 byte block size, it is currently parameterized for a
E 5
maximum of two million cylinders.
D 6
.LP
E 6
I 6
.Pp
E 6
Per cylinder group information is summarized in blocks allocated
from the first cylinder group's data blocks. 
These blocks are read in from
D 6
.I fs_csaddr
E 6
I 6
.Fa fs_csaddr
E 6
(size
D 6
.IR fs_cssize )
in addition to the super block.
.LP
.B N.B.:
sizeof (struct csum) must be a power of two in order for
the ``fs_cs'' macro to work.
.LP
.I Super block for a file
.IR system :
E 6
I 6
.Fa fs_cssize )
in addition to the super-block.
.Pp
.Sy N.B.:
.Xr sizeof Pq Fa struct csum
must be a power of two in order for
the
.Fn fs_cs
macro to work.
.Pp
The
.Em "Super-block for a file system" :
E 6
D 5
MAXBPC bounds the size of the rotational layout tables and
E 5
I 5
The size of the rotational layout tables
E 5
D 6
is limited by the fact that the super block is of size SBSIZE.
E 6
I 6
is limited by the fact that the super-block is of size
.Dv SBSIZE .
E 6
The size of these tables is
D 6
.B inversely
E 6
I 6
.Em inversely
E 6
proportional to the block
size of the file system. The size of the tables is
increased when sector sizes are not powers of two,
as this increases the number of cylinders
D 6
included before the rotational pattern repeats (
.IR fs_cpc ).
E 6
I 6
included before the rotational pattern repeats
.Pq Fa fs_cpc .
E 6
The size of the rotational layout
D 6
tables is derived from the number of bytes remaining in (struct fs).
.LP
E 6
I 6
tables is derived from the number of bytes remaining in
.Pq Fa struct fs .
.Pp
E 6
D 5
MAXBPG bounds the number of blocks of data per cylinder group,
and is limited by the fact that cylinder groups are at most one block.
The size of the free block table
is derived from the size of blocks and the number
of remaining bytes in the cylinder group structure (struct cg).
E 5
I 5
The number of blocks of data per cylinder group
is limited because cylinder groups are at most one block.
The inode and free block tables
must fit into a single block after deducting space for
D 6
the cylinder group structure (struct cg).
E 5
.LP
.IR Inode :
E 6
I 6
the cylinder group structure
.Pq Fa struct cg .
.Pp
The
.Em Inode :
E 6
The inode is the focus of all file activity in the
D 6
UNIX file system.  There is a unique inode allocated
E 6
I 6
.Tn UNIX
file system.
There is a unique inode allocated
E 6
for each active file,
each current directory, each mounted-on file,
text file, and the root.
An inode is `named' by its device/i-number pair.
For further information, see the include file
D 6
.RI < sys/inode.h >.
E 6
I 6
.Aq Pa sys/inode.h .
.Sh HISTORY
A super-block structure named filsys appeared in
.At v6 .
The file system described in this manual appeared
in
.Bx 4.2 .
E 6
E 2
E 1
