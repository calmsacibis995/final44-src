h45769
s 00002/00000/02800
d D 8.3 94/06/01 20:53:42 ah 16 15
c page breaks for 4.4BSD manuals
e
s 00060/00060/02740
d D 8.2 93/12/30 15:53:53 mckusick 15 14
c copyediting for Usenix manuals
e
s 00002/00002/02798
d D 8.1 93/06/09 19:19:21 bostic 14 13
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00000/00005/02800
d D 5.10 93/06/09 19:19:12 bostic 13 11
c fixed the under development line
e
s 00002/00002/02803
d R 8.1 93/06/05 13:53:32 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00113/00092/02692
d D 5.9 91/08/06 05:32:20 cael 11 10
c stupid boo boos
e
s 01166/00624/01618
d D 5.8 91/08/05 07:20:06 cael 10 9
c major update
e
s 00005/00003/02237
d D 5.7 91/07/01 14:26:45 bostic 9 8
c move comment out of copyright notice
e
s 00052/00070/02188
d D 5.6 91/07/01 14:25:23 cael 8 6
c deleted apostrophe catastrophe
e
s 00053/00071/02187
d R 5.6 91/07/01 14:18:59 cael 7 6
c deleted apostrophe catastrophe
e
s 00001/00001/02257
d D 5.5 91/05/01 01:59:22 cael 6 5
c fix sccs.include.redist.roff 
e
s 01869/01094/00389
d D 5.4 91/05/01 01:57:56 cael 5 4
c mdoc version three - this has some glaring errors still
c for instance the apostrophe stuff no longer is necessary.
e
s 00001/00001/01482
d D 5.3 90/07/12 14:55:29 cael 4 3
c add fix to .Va example
e
s 00001/00001/01482
d D 5.2 90/06/22 16:34:54 cael 3 2
c .
e
s 00000/00000/01483
d D 5.1 90/06/22 16:34:09 cael 2 1
c .
e
s 01483/00000/00000
d D 1.1 90/06/22 16:33:16 cael 1 0
c date and time created 90/06/22 16:33:16 by cael
e
u
U
t
T
I 1
D 14
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 14
I 14
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 14
.\"
D 3
.\" %sccs.include.redist.mdoc%
E 3
I 3
D 5
.\" %sccs.include.redist.man%
E 5
I 5
D 6
.\" %sccs.include.redist.mdoc%
E 6
I 6
.\" %sccs.include.redist.roff%
E 6
E 5
E 3
.\"
.\"     %W% (Berkeley) %G%
.\"
D 9
.\"	This sampler invokes every macro in the package several
.\" 	times and is garanteed to give a worst case performance
D 5
.\"	for an already slow package.
E 5
I 5
.\"	for an already extremely slow package.
E 9
I 9
D 10

.\" This sampler invokes every macro in the package several
.\" times and is garanteed to give a worst case performance
E 10
I 10
.\" This tutorial sampler invokes every macro in the package several
.\" times and is guaranteed to give a worst case performance
E 10
.\" for an already extremely slow package.
D 10

E 10
I 10
.\"
E 10
E 9
E 5
.Dd %Q%
D 10
.Os BSD 4.4
E 10
I 10
.Os
E 10
.Dt MDOC.SAMPLES 7
.Sh NAME
D 10
.Nm mdoc.sample
D 5
.Nd detailed samples utilizing
the
E 5
I 5
.Nd writing manual pages with
E 5
.Nm -mdoc
macro package
E 10
I 10
.Nm mdoc.samples
.Nd tutorial sampler for writing
.Bx
manuals with
.Nm \-mdoc
E 10
.Sh SYNOPSIS
D 10
.Nm man mdoc.sample
E 10
I 10
.Nm man mdoc.samples
E 10
.Sh DESCRIPTION
D 5
A fairly complete sampler of how the
E 5
I 5
A tutorial sampler for writing
.Bx
manual pages with the
E 5
.Nm \-mdoc
D 5
macro package is used.
E 5
I 5
D 8
macro package; a
.Em content Ns \-
based formatting
E 8
I 8
macro package, a
.Em content Ns \-based
I 10
and
.Em domain Ns \-based
E 10
formatting
E 8
package for
.Xr troff 1 .
Its predecessor, the
.Xr \-man 7
package,
D 10
addressed page structure leaving the
E 10
I 10
D 11
addressed page structure content leaving the
E 11
I 11
addressed page layout leaving the
E 11
E 10
manipulation of fonts and other
typesetting details to the individual author.
D 10
The
.Nm \-mdoc
package
allows the author to ignore font considerations by
using macros to label
pieces of text according to content.
In the context of manual pages, examples of content
are a command name, a file pathname or a cross
reference to another manual page; these
E 10
I 10
In
.Nm \-mdoc ,
page layout macros
make up the
.Em "page structure domain"
which consists of macros for titles, section headers, displays
and lists. Essentially items which affect the physical position
of text on a formatted page.
In addition to the page structure domain, there are two more domains,
the manual domain and the general text domain.
The general text domain is defined as macros which
perform tasks such as quoting or emphasizing pieces of text.
The manual domain is defined as macros that are a subset of the
day to day informal language used to describe commands, routines
and related
.Bx
files.
Macros in the manual domain handle
command names, command line arguments and options, function names,
function parameters, pathnames, variables, cross
references to other manual pages, and so on.
These domain
E 10
items have value
for both the author and the future user of the manual page.
It is hoped the consistency gained
across the manual set will provide easier
translation to future documentation tools.
.Pp
D 15
Through out the
E 15
I 15
Throughout the
E 15
.Ux
manual pages, a manual entry
is simply referred
to as a man page, regardless of actual length and without
sexist intention.
I 10
.Sh GETTING STARTED
Since a tutorial document is normally read when a person
desires to use the material immediately, the assumption has
been made that the user of this document may be impatient.
The material presented in the remained of this document is
outlined as follows:
.Bl -enum -offset indent
.It
.Tn "TROFF IDIOSYNCRASIES"
.Bl -tag -width flag -compact -offset indent
D 15
.It Tn "Macro Usage" .
.It Tn "Passing Space Characters in an Argument" .
.It Tn "Trailing Blank Space Characters (a warning)" .
.It Tn "Escaping Special Characters" .
E 15
I 15
.It "Macro Usage" .
.It "Passing Space Characters in an Argument" .
.It "Trailing Blank Space Characters (a warning)" .
.It "Escaping Special Characters" .
E 15
.El
.It
.Tn "THE ANATOMY OF A MAN PAGE"
.Bl -tag -width flag -compact -offset indent
D 15
.It Tn "A manual page template" .
E 15
I 15
.It "A manual page template" .
E 15
.El
.It
.Tn "INTRODUCTION OF TITLE MACROS" .
.It
.Tn "INTRODUCTION OF MANUAL AND GENERAL TEXT DOMAINS" .
.Bl -tag -width flag -compact -offset indent
D 15
.It Tn "What's in a name..." .
.It Tn "General Syntax" .
E 15
I 15
.It "What's in a name..." .
.It "General Syntax" .
E 15
.El
.It
.Tn "MANUAL DOMAIN"
.Bl -tag -width flag -compact -offset indent
D 15
.It Tn "Addresses" .
.It Tn "Arguments" .
.It Tn "Configuration Declarations (section four only)" .
.It Tn "Command Modifier .
.It Tn "Defined Variables" .
.It Tn "Errno's (Section two only)" .
.It Tn "Environment Variables" .
.It Tn "Function Argument" .
.It Tn "Function Declaration" .
.It Tn "Flags" .
.It Tn "Functions (library routines)" .
.It Tn "Function Types" .
.\" .It Tn "Header File (including source code)" .
.It Tn "Interactive Commands" .
.It Tn "Literals" .
.It Tn "Names" .
.It Tn "Options" .
.It Tn "Pathnames" .
.It Tn "Variables" .
.It Tn "Cross References" .
E 15
I 15
.It "Addresses" .
.It "Arguments" .
.It "Configuration Declarations (section four only)" .
.It "Command Modifier .
.It "Defined Variables" .
.It "Errno's (Section two only)" .
.It "Environment Variables" .
.It "Function Argument" .
.It "Function Declaration" .
.It "Flags" .
.It "Functions (library routines)" .
.It "Function Types" .
.\" .It "Header File (including source code)" .
.It "Interactive Commands" .
.It "Literals" .
.It "Names" .
.It "Options" .
.It "Pathnames" .
.It "Variables" .
.It "Cross References" .
E 15
.El
.It
.Tn "GENERAL TEXT DOMAIN"
.Bl -tag -width flag -compact -offset indent
D 15
.It Tn "AT&T Macro" .
.It Tn "BSD Macro" .
.It Tn "UNIX Macro" .
.It Tn "Emphasis Macro" .
.It Tn "Enclosure/Quoting Macros"
E 15
I 15
.It "AT&T Macro" .
.It "BSD Macro" .
.It "UNIX Macro" .
.It "Emphasis Macro" .
.It "Enclosure/Quoting Macros"
E 15
.Bl -tag -width flag -compact -offset indent
D 15
.It Tn "Angle Bracket Quote/Enclosure" .
.It Tn "Bracket Quotes/Enclosure" .
.It Tn "Double Quote macro/Enclosure" .
.It Tn "Parenthesis Quote/Enclosure" .
.It Tn "Single Quotes/Enclosure" .
.It Tn "Prefix Macro" .
E 15
I 15
.It "Angle Bracket Quote/Enclosure" .
.It "Bracket Quotes/Enclosure" .
.It "Double Quote macro/Enclosure" .
.It "Parenthesis Quote/Enclosure" .
.It "Single Quotes/Enclosure" .
.It "Prefix Macro" .
E 15
.El
D 15
.It Tn "Extended  Arguments" .
.It Tn "No\-Op or Normal Text Macro" .
.It Tn "No Space Macro" .
.It Tn "Section Cross References" .
.It Tn "Symbolic Macro" .
.It Tn "References and Citations" .
.It Tn "Trade Names (Acronyms and Type Names)" .
E 15
I 15
.It "Extended  Arguments" .
.It "No\-Op or Normal Text Macro" .
.It "No Space Macro" .
.It "Section Cross References" .
.It "Symbolic Macro" .
.It "References and Citations" .
.It "Trade Names (Acronyms and Type Names)" .
E 15
.El
.It
.Tn "PAGE STRUCTURE DOMAIN"
.Bl -tag -width flag -compact -offset indent
D 15
.It Tn "Section Headers" .
.It Tn "Paragraphs and Line Spacing" .
.It Tn "Keeps" .
.It Tn "Displays" .
.It Tn "Lists and Columns" .
E 15
I 15
.It "Section Headers" .
.It "Paragraphs and Line Spacing" .
.It "Keeps" .
.It "Displays" .
.It "Lists and Columns" .
E 15
.El
.It
.Tn "PREDEFINED STRINGS"
.It
.Tn "DIAGNOSTICS"
.It
.Tn "FORMATTING WITH GROFF, TROFF AND NROFF"
.It
.Tn "BUGS"
.El
.ne 7
E 10
E 5
.Sh TROFF IDIOSYNCRASIES
D 5
Although this is a content based formatting package, and
theoretically one should not have to learn
E 5
I 5
The
.Nm \-mdoc
package attempts to simplify the process of writing a man page.
Theoretically, one should not have to learn the dirty details of
E 5
.Xr troff 1
D 5
to use it, there are a few
E 5
I 5
to use
.Nm \-mdoc ;
however, there are a few
E 5
limitations which are unavoidable and best gotten out
D 5
of the way. And, too, be forewarned, this package is slow.
Its purpose is to allow translation of man pages from
.Xr troff 1
to
.Xr TeX Coming\ Soon
and vice versa.
E 5
I 5
D 10
of the way. And, too, be forewarned, this package is
E 10
I 10
of the way.
And, too, be forewarned, this package is
E 10
.Em not
fast.
E 5
.Ss Macro Usage
As in
.Xr troff 1 ,
D 5
a macro (request) is called by placing a
.Li \&\.
E 5
I 5
a macro is called by placing a
.Ql \&\.
E 5
(dot character)
at the beginning of
a line followed by the two character name for the macro.
D 5
Arguments may follow the request separated by spaces.
E 5
I 5
Arguments may follow the macro separated by spaces.
E 5
It is the dot character at the beginning of the line which causes
.Xr troff 1
D 5
to interpret the next two characters as a request.
E 5
I 5
to interpret the next two characters as a macro name.
E 5
To place a
D 5
.Li \&\.
E 5
I 5
.Ql \&\.
E 5
(dot character)
at the beginning of a line in some context other than
D 5
a macro request, precede the
.Li \&\.
E 5
I 5
D 10
a macro macro, precede the
E 10
I 10
a macro invocation, precede the
E 10
.Ql \&\.
E 5
D 10
(dot) with a
D 5
.Li \e&.
In this macro package, some macros may be given the
E 5
I 5
.Ql \e& .
E 10
I 10
(dot) with the
.Ql \e&
escape sequence.
The
.Ql \e&
translates literally to a zero width space, and is never displayed in the
output.
E 10
.Pp
In general,
.Xr troff 1
macros accept up to nine arguments, any
extra arguments are ignored.
Most macros in
.Nm \-mdoc
accept nine arguments and,
in limited cases, arguments may be continued or extended
on the
next line (See
D 10
.Sx Extensions
\-
macro
.Ql \&.Xo
and
.Ql \&.Xc ) .
A few macros handle quoted aguments (see
E 10
I 10
.Sx Extensions ) .
A few macros handle quoted arguments (see
E 10
.Sx Passing Space Characters in an Argument
below).
D 10
Many
E 10
I 10
.Pp
Most of the
E 10
.Nm \-mdoc
D 10
macros may be given the
E 5
name of another macro as an argument. In this case
E 10
I 10
general text domain and manual domain macros are special
in that their argument lists are
.Em parsed
for callable macro names.
This means an argument on the argument list which matches
a general text or manual domain macro name and is determined
to be callable will be executed
or called when it is processed.
In this case
E 10
the argument, although the name of a macro,
is not preceded by a
D 5
.Li \&\.
E 5
I 5
.Ql \&\.
E 5
D 10
(dot),
D 5
and will be executed
with the remaining arguments.
It is in this manner that some requests are nested, such
as the
.Li \&.Op
request may
E 5
I 5
and is
.Em called
when the argument is processed.
It is in this manner that some macros are nested; for
E 10
I 10
(dot).
It is in this manner that many macros are nested; for
E 10
example
the option macro,
.Ql \&.Op ,
may
E 5
.Em call
D 5
the flag request
.Li \&.Fl .
.Dp Op Fl ls
E 5
I 5
the flag and argument macros,
D 10
.Ql \&.Fl
E 10
I 10
.Ql \&Fl
E 10
and
D 10
.Ql \&.Ar ,
E 10
I 10
.Ql \&Ar ,
E 10
to specify an optional flag with an argument:
D 10
.nr D 1
E 10
.Bl -tag -width "\&.Op \&Fl s \&Ar bytes" -offset indent
.It Op Fl s Ar bytes
E 5
is produced by
D 5
.Li \&.Op Fl ls
.Dp
The only requests which check to see if the first argument
is executable are:
.Ds I
.Cw \&.Cx\ Complex\ Expressions
.Cl \&.Cl\ Column Line Entry	\&.Dp Display Examples (tagged paragraph)
.Cl \&.Cx\ Complex\ Expressions	\&.Op\ Option Request
.Cl \&.Dl\ Display (one) Line	\&.Sq Single Quotes
.Cl \&.Dq\ Double Quotes	\&.Tp Tagged Paragraphs
.Cw
.De
E 5
I 5
.Li \&.Op \&Fl s \&Ar bytes
.El
E 5
.Pp
D 5
The eligible first arguments are:
.Ds I
.Cw \&.Cx\ Complex\ Expressions
.Cl \&.Ad Addresses	\&.Fn Functions
.Cl \&.Ar Arguments	\&.Ic Interactive Commands
.Cl \&.Cl Column Entries	\&.Li Literals
.Cl \&.Cm Command Modifiers	\&.Nm Names, subjects
.Cl \&.Cw Column Widths	\&.Op Options
.Cl \&.Cx Complex Expressions	\&.Pa Pathnames
.Cl \&.Em Emphasis	\&.Sy Symbolic
.Cl \&.Er Errno's	\&.Tp Tagged Paragraphs
.Cl \&.Ev Environment	\&.Va Variables
.Cl \&.Fl Flags	\&.Xr Cross References
.Cw
.De
E 5
I 5
To prevent a two character
string from being interpreted as a macro name, precede
the string with the
escape sequence
.Ql \e& :
D 11
.Bl -tag -width "[\&Fl s \&Ar bytes]" -offset indent
E 11
I 11
.Bl -tag -width "\&.Op \&Fl s \&Ar bytes" -offset indent
E 11
.It Op \&Fl s \&Ar bytes
is produced by
.Li \&.Op \e&Fl s \e&Ar bytes
.El
E 5
.Pp
D 5
Requests which cannot be called, or call any other macro:
.Ds I
.Cw \&.Cx\ Complex\ Expressions
.Cl \&.Di Display Indent	\&.Dw Display Tag Width
.Cl \&.De Display End	\&.Pp Paragraph Start
.Cl \&.Df Display Filled	\&.Tw Tagged Paragraph Tag Width
.Cl \&.Df Display unfilled
.Cw
.De
.Pp
The macro
.Li .Op
is unusual that it can call more than one request on the same
line.
E 5
I 5
D 10
.nr D 0
E 10
Here the strings
.Ql \&Fl
and
.Ql \&Ar
D 11
were not interpreted as macros.
D 10
Details on callable macros are presented in the
sections
.Sx CONTENT MACROS
and
.Sx PAGE LAYOUT MACROS.
E 10
I 10
Macros which are parsed for callable arguments are referred to
as parsed macros and macros which may be called from an argument
list (are defined as executable) are simply referred to as callable
E 11
I 11
are not interpreted as macros.
Macros whose argument lists are parsed for callable arguments
are referred to
as parsed and macros which may be called from an argument
list are referred to as callable
E 11
D 15
through out this document and in the companion quick reference
E 15
I 15
throughout this document and in the companion quick reference
E 15
D 11
document
E 11
I 11
manual
E 11
.Xr mdoc 7 .
D 11
More details on callable macros are presented in the
section on
.Sx MANUAL DOMAIN MACROS .
E 11
I 11
This is a technical
.Em faux pas
as almost all of the macros in 
.Nm \-mdoc
are parsed, but as it was cumbersome to constantly refer to macros
as being callable and being able to call other macros,
the term parsed has been used.
E 11
E 10
E 5
.Ss Passing Space Characters in an Argument
D 5
To pass an argument
to a macro request which contains spaces, the space must be preceded
by a
.Li \e
to escape special interpretation:
.Dw int\ *fetch()
.Dp Fn int\ *fetch
E 5
I 5
Sometimes it is desirable to give as one argument a string
D 10
containing one or more blank space characters. This may be necessary
E 10
I 10
containing one or more blank space characters.
This may be necessary
E 10
to defeat the nine argument limit or to specify arguments to macros
which expect particular arrangement of items in the argument list.
For example,
the function macro
.Ql \&.Fn
expects the first argument to be the name of a function and any
D 10
remaining arguments to be function parameters. As
E 10
I 10
remaining arguments to be function parameters.
As
E 10
.Tn "ANSI C"
stipulates the declaration of function parameters in the
parenthesized parameter list, each parameter is guaranteed
D 10
to be at minimum a two word string. For example,
E 10
I 10
to be at minimum a two word string.
For example,
E 10
.Fa int foo .
I 10
.Pp
E 10
There are two possible ways to pass an argument which contains
D 10
an imbedded space. Unfortunately, the most convient way
of passing such a space between quotes was too expensive to implement for
all the macros. It is however, implemented for the following macros which need
E 10
I 10
an embedded space.
.Em Implementation note :
Unfortunately, the most convenient way
of passing spaces in between quotes by reassigning individual
arguments before parsing was fairly expensive speed wise
and space wise to implement in all the macros for
.Tn AT&T
.Xr troff .
It is not expensive for
.Xr groff
but for the sake of portability, has been limited
to the following macros which need
E 10
it the most:
.Pp
.Bl -tag -width 4n -offset indent -compact
.It Li \&Cd
D 10
Configuration declaration (section 4 SYNOPSIS)
E 10
I 10
Configuration declaration (section 4
.Sx SYNOPSIS )
E 10
.It Li \&Bl
Begin list (for the width specifier).
.It Li \&Em
Emphasized text.
.It Li \&Fn
Functions (sections two and four).
.It Li \&It
List items.
.It Li \&Li
Literal text.
.It Li \&Sy
Symbolic text.
.It Li \&%B
Book titles.
.It Li \&%J
Journal names.
.It Li \&%O
Optional notes for a reference.
.It Li \&%R
Report title (in a reference).
.It Li \&%T
Title of article in a book or journal.
.El
.Pp
One way of passing a string
containing blank spaces is to use the hard or unpaddable space character
.Ql \e\  ,
D 10
that is, a blank space preceeded by the escape character
E 10
I 10
that is, a blank space preceded by the escape character
E 10
.Ql \e .
This method may be used with any macro but has the side effect
of interfering with the adjustment of text
over the length of a line.
.Xr Troff
sees the hard space as if it were any other printable character and
cannot split the string into blank or newline separated pieces as one
D 10
would expect. The method is useful for strings which are not expected
to overlap a line boundary. For example:
E 10
I 10
would expect.
The method is useful for strings which are not expected
to overlap a line boundary.
For example:
E 10
.Bl -tag -width "fetch(char *str)" -offset indent
.It Fn fetch char\ *str
E 5
is created by
D 5
.Li \&.Fn int\e *fetch
.Dp
For critical spaces at the end of a line, as might be needed
with the request
.Li \&.Cx ,
following the space with
.Li \e&
is a good guarantee the space will not be stripped (e.g.
.Li \e \e&) .
A blank space at the end of a line is otherwise an open invitation
to party for
.Xr troff 1 .
E 5
I 5
.Ql \&.Fn fetch char\e *str
.It Fn fetch "char *str"
can also be created by
.Ql \&.Fn fetch "\\*q*char *str\\*q"
.El
.Pp
If the
.Ql \e
or quotes
were omitted,
.Ql \&.Fn
would see three arguments and
the result would be:
.Pp
.Dl Fn fetch char *str
.Pp
D 8
Note what happens if the parameter list overlaps a newline
boundary. For example, the next two examples are repeated several times
to make sure a line boundary is crossed:
.Bd -literal
\&.Fn struct\e\ dtable\e\ *dlookup struct\e\ dtable\e\ *tab[]
.Ed
.Pp
produces, nudge nudge,
.Fn struct\ dtable\ *dlookup char\ *h struct\ dtable\ *tab[] ,
.Fn struct\ dtable\ *dlookup char\ *h struct\ dtable\ *tab[] ,
nudge
.Fn struct\ dtable\ *dlookup char\ *h struct\ dtable\ *tab[] .
.Pp
If double quotes are used, for example:
.Bd -literal
\&.Fn \*qstruct dtable *dlookup\*q \*qchar *h\*q \*qstruct dtable *tab[]\*q
.Ed
.Pp
produces, nudge nudge,
.Fn "struct dtable *dlookup" "char *h" "struct dtable *tab[]" ,
nudge
.Fn "struct dtable *dlookup" "char *h" "struct dtable *tab[]" ,
nudge
.Fn "struct dtable *dlookup" "char *h" "struct dtable *tab[]" .
.Pp
Not a pretty sight...
In a paragraph, a long parameter containing unpaddable spaces as
in the former example will cause
.Xr troff
to break the line and spread
the remaining words out.  The latter example will adjust nicely to
justified margins, but may break in between an argument and its
declaration. In
.Xr nroff
the right margin adjustment is normally ragged and the problem is
not as severe.
E 8
I 8
For an example of what happens when the parameter list overlaps
a newline boundary, see the
.Sx BUGS
section.
D 10
.\" Note what happens if the parameter list overlaps a newline
.\" boundary. For example, the next two examples are repeated several times
.\" to make sure a line boundary is crossed:
.\" .Bd -literal
.\" \&.Fn struct\e\ dictionarytable\e\ *dictionarylookup struct\e\ dictionarytable\e\ *tab[]
.\" .Ed
.\" .Pp
.\" produces, nudge nudge,
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] ,
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] ,
.\" nudge
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] .
.\" .Pp
.\" If double quotes are used, for example:
.\" .Bd -literal
.\" \&.Fn \*qstruct dictionarytable *dictionarylookup\*q \*qchar *h\*q \*qstruct dictionarytable *tab[]\*q
.\" .Ed
.\" .Pp
.\" produces, nudge nudge,
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" ,
.\" nudge
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" ,
.\" nudge
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" .
.\" .Pp
.\" Not a pretty sight...
.\" In a paragraph, a long parameter containing unpaddable spaces as
.\" in the former example will cause
.\" .Xr troff
.\" to break the line and spread
.\" the remaining words out.  The latter example will adjust nicely to
.\" justified margins, but may break in between an argument and its
.\" declaration. In
.\" .Xr nroff
.\" the right margin adjustment is normally ragged and the problem is
.\" not as severe.
E 10
E 8
.Ss Trailing Blank Space Characters
.Xr Troff
D 10
can be confused by blank space characters at the end of a line. It
is wise preventative measure to globally remove all blank spaces
from <blank-space><end-of-line> character sequences. Should the need
E 10
I 10
can be confused by blank space characters at the end of a line.
It
is a wise preventive measure to globally remove all blank spaces
from <blank-space><end-of-line> character sequences.
Should the need
E 10
arise to force a blank character at the end of a line,
it may be forced with an unpaddable space and the
.Ql \e&
escape character.
For example,
.Ql string\e\ \e& .
E 5
.Ss Escaping Special Characters
Special characters
like the newline character
D 5
.Li \en ,
E 5
I 5
.Ql \en ,
E 5
are handled by replacing the
D 5
.Li \e
E 5
I 5
.Ql \e
E 5
with
D 5
.Li \ee
E 5
I 5
.Ql \ee
E 5
(e.g.
D 5
.Li \een )
E 5
I 5
.Ql \een )
E 5
to preserve
the backslash.
D 5
.Sh HEADER REQUESTS
E 5
I 5
D 10
.Sh THE ANATOMY OF A MAN PAGE (Getting Started)
There are three basic groups of macros: specific header macros
called only once at the very beginning of
each manual page, page layout or structure macros
which may be called many times, and content macros which also
may be called many times.
E 10
I 10
.Sh THE ANATOMY OF A MAN PAGE
E 10
The body of a man page is easily constructed from a basic
template found in the file:
.Bd -literal -offset indent
D 10
\&.\e" /usr/share/misc/man.tempate :
E 10
I 10
\&.\e" /usr/share/misc/man.template:
E 10
\&.\e" The following six lines are required.
D 10
\&.Dt DOCUMENT_TITLE [section number] [volume]
\&.Os OPERATING_SYSTEM [version/release]
E 10
\&.Dd Month day, year
I 10
\&.Os OPERATING_SYSTEM [version/release]
\&.Dt DOCUMENT_TITLE [section number] [volume]
E 10
\&.Sh NAME
\&.Sh SYNOPSIS
\&.Sh DESCRIPTION
\&.\e" The following requests should be uncommented and
\&.\e" used where appropriate.  This next request is
\&.\e" for sections 2 and 3 function return values only.
\&.\e" .Sh RETURN VALUES
\&.\e" This next request is for sections 1, 6, 7 & 8 only
\&.\e" .Sh ENVIRONMENT
\&.\e" .Sh FILES
\&.\e" .Sh EXAMPLES
\&.\e" This next request is for sections 1, 6, 7 & 8 only
\&.\e"     (command return values (to shell) and
\&.\e"	  fprintf/stderr type diagnostics)
\&.\e" .Sh DIAGNOSTICS
\&.\e" The next request is for sections 2 and 3 error
\&.\e" and signal handling only.
\&.\e" .Sh ERRORS
\&.\e" .Sh SEE ALSO
\&.\e" .Sh STANDARDS
\&.\e" .Sh HISTORY
\&.\e" .Sh AUTHORS
\&.\e" .Sh BUGS
.Ed
.Pp
The first items in the template are the macros
D 10
.Pq Li \&.Dt , \&.Dd , \&.Os ;
the document or man page title
.Pq Em in upper case ,
the section of the manual the page
belongs to, the (document) date,
and the operating system the man page is derived
from. These macros identify the page,
E 10
I 10
.Pq Li \&.Dd , \&.Os , \&.Dt ;
the document date,
the operating system the man page or subject source is developed
or modified for,
and the man page title
.Pq Em in upper case
along with the section of the manual the page
belongs in.
These macros identify the page,
E 10
and are discussed below in
.Sx TITLE MACROS .
.Pp
The remaining items in the template are section headers
.Pq Li \&.Sh ;
D 10
of which NAME, SYNOPSIS and DESCRIPTION
are mandatory. The
E 10
I 10
of which
.Sx NAME ,
.Sx SYNOPSIS
and
.Sx DESCRIPTION
are mandatory.
The
E 10
headers are
discussed in
D 10
.Sx PAGE LAYOUT MACROS,
E 10
I 10
.Sx PAGE STRUCTURE DOMAIN ,
E 10
after
presentation of
D 10
.Sx CONTENT MACROS .
E 10
I 10
.Sx MANUAL DOMAIN .
E 10
Several content macros are used to demonstrate page layout macros;
reading about content macros before page layout macros is
recommended.
.Sh TITLE MACROS
I 10
The title macros are the first portion of the page structure
domain, but are presented first and separate for someone who
wishes to start writing a man page yesterday.
E 10
E 5
Three header macros designate the document title or manual page title,
the operating system,
D 5
and the date of authorship (if not derived from
.Xr sccs 1
or
.Xr rcs 1 ) .
E 5
I 5
and the date of authorship.
E 5
These macros are one called once at the very beginning of the document
and are used to construct the headers and footers only.
D 5
.Tp Li \&.Dt DOCUMENT_TITLE section# [volume]
E 5
I 5
.Bl -tag -width 6n
.It Li \&.Dt DOCUMENT_TITLE section# [volume]
E 5
The document title is the
D 10
subject of the man page and must be in CAPITALS due to troff
E 10
I 10
subject of the man page and must be in
.Tn CAPITALS
due to troff
E 10
limitations.
D 5
The section number may be 1,...,8,
E 5
I 5
The section number may be 1,\ ...,\ 8,
E 5
and if it is specified,
the volume title may be omitted.
A volume title may be arbitrary or one of the following:
.\" .Cl
.\" USD	UNIX User's Supplementary Documents
.\" .Cl
D 10
.\" PS1	UNIX Programmers's Supplementary Documents
E 10
I 10
.\" PS1	UNIX Programmer's Supplementary Documents
E 10
D 5
.Cw SMM
.Cl AMD	UNIX Ancestral Manual Documents
.Cl SMM	UNIX System Manager's Manual
.Cl URM	UNIX Reference Manual
.Cl PRM	UNIX Programmers's Manual
.Cw
E 5
I 5
.Pp
.Bl -column SMM -offset indent -compact
D 10
.It AMD	UNIX Ancestral Manual Documents
.It SMM	UNIX System Manager's Manual
.It URM	UNIX Reference Manual
.It PRM	UNIX Programmers's Manual
E 10
I 10
.It Li AMD	UNIX Ancestral Manual Documents
.It Li SMM	UNIX System Manager's Manual
.It Li URM	UNIX Reference Manual
.It Li PRM	UNIX Programmer's Manual
E 10
.El
.Pp
I 10
The default volume labeling is
.Li URM
for sections 1, 6, and 7;
.Li SMM
for section 8;
.Li PRM
for sections 2, 3, 4, and 5.
E 10
E 5
.\" .Cl
.\" MMI	UNIX Manual Master Index
.\" .Cl
.\" CON	UNIX Contributed Software Manual
.\" .Cl
.\" LOC	UNIX Local Manual
D 5
.Tp Li \&.Os operating_system release#
E 5
I 5
.It Li \&.Os operating_system release#
E 5
The name of the operating system
D 10
should be the common acronym, e.g. BSD
or ATT.  The release should be the standard release
E 10
I 10
should be the common acronym, e.g.
.Tn BSD
or
.Tn ATT .
The release should be the standard release
E 10
D 5
nomenclature for the system specified, e.g. 4.3, 4.3+tahoe, V.3,
E 5
I 5
nomenclature for the system specified, e.g. 4.3, 4.3+Tahoe, V.3,
E 5
D 10
V.4. Unrecognized arguments are displayed as given in the page footer.
For instance, for the footer on this page, the 4.4 Berkeley Distribution
was produced by:
E 10
I 10
V.4.
Unrecognized arguments are displayed as given in the page footer.
For instance, a typical footer might be:
E 10
.Pp
D 5
.Dl Li \&.Os BSD 4.4
.Tp Li \&.Dd month day, year
E 5
I 5
D 10
.Dl \&.Os BSD 4.4
E 10
I 10
.Dl \&.Os BSD 4.3
.Pp
or for a locally produced set
.Pp
.Dl \&.Os CS Department
.Pp
The Berkeley default,
.Ql \&.Os
without an argument, has been defined as
.Tn BSD
Experimental in the
site specific file
.Pa /usr/src/share/tmac/doc-common .
It really should default to
.Tn LOCAL .
Note, if the
.Ql \&.Os
macro is not present, the bottom left corner of the page
will be ugly.
E 10
.It Li \&.Dd month day, year
E 5
The date should be written formally:
.Pp
I 10
.ne 5
E 10
.Dl January 25, 1989
D 5
.\" %Q% is not a standard SCCS id-key. ??
.Tp
.Sh TEXT MACROS
The following macro requests have similar
syntax; the exceptions being the behaviour of the
request if called without an argument, and the
behaviour of the requests
.Li \&.Fn ,
.Li \&.Pa ,
E 5
I 5
.El
D 10
.Sh CONTENT MACROS
E 10
I 10
.Sh MANUAL DOMAIN
E 10
.Ss What's in a name...
D 10
Content macro names are derived from the day to day
E 10
I 10
The manual domain macro names are derived from the day to day
E 10
informal language used to describe commands, subroutines and related
D 10
files. Slightly
E 10
I 10
files.
Slightly
E 10
different variations of this language are used to describe
the three different aspects of writing a man page.
First, there is the description of
.Nm \-mdoc
macro request usage.
Second is the description of a
.Ux
command
.Em with
.Nm \-mdoc
macros and third,
the
D 15
description a command to a user in the verbal sense;
E 15
I 15
description of a command to a user in the verbal sense;
E 15
that is, discussion of a command in the text of a man page.
.Pp
In the first case,
.Xr troff 1
macros are themselves a type of command;
the general syntax for a troff command is:
.Bd -filled -offset indent
\&.Va argument1 argument2 ... argument9
.Ed
.Pp
The
.Ql \&.Va
is a macro command or request, and anything following it is an argument to
be processed.
In the second case,
the description of a
.Ux
command using the content macros is a
bit more involved;
D 10
a typical SYNOPSIS command line might be displayed as:
.Pp
E 10
I 10
a typical
.Sx SYNOPSIS
command line might be displayed as:
E 10
.Bd -filled -offset indent
.Nm filter
.Op Fl flag
.Ar infile outfile
.Ed
.Pp
Here,
.Nm filter
is the command name and the
bracketed string
.Fl flag
is a
.Em flag
argument designated as optional by the option brackets.
In
.Nm \-mdoc
terms,
.Ar infile
E 5
and
D 5
.Li \&.Xr ,
which expect a specific format.
The other requests can handle up to 9 arguments
and will format punctuation properly as
long as the punctuation is placed in the last
arguments.  Punctuation placed in the middle
of a string of text arguments will result
in a out of place space character.
E 5
I 5
.Ar outfile
are
called
.Em arguments .
The macros which formatted the above example:
E 5
D 10
.Pp
E 10
I 5
D 8
.Bd -ragged -offset indent
.Li \&.Nm filter
.Li \&.Op \&Fl flag
.Li \&.Ar infile outfile
E 8
I 8
.Bd -literal -offset indent
\&.Nm filter
\&.Op \&Fl flag
\&.Ar infile outfile
E 8
.Ed
.Pp
In the third case, discussion of commands and command syntax
D 10
includes both examples above, but may add more detail. The
E 10
I 10
includes both examples above, but may add more detail.
The
E 10
arguments
.Ar infile
and
.Ar outfile
D 10
from the example above might be refered to as
E 10
I 10
from the example above might be referred to as
E 10
.Em operands
or
.Em file arguments .
Some command line argument lists are quite long:
D 10
.\" .Bl -tag -width make -offset indent
E 10
.Bl -tag -width make -offset indent
.It Nm make
.Op Fl eiknqrstv
.Op Fl D Ar variable
.Op Fl d Ar flags
.Op Fl f Ar makefile
I 10
.Bk -words
E 10
.Op Fl I Ar directory
I 10
.Ek
E 10
.Op Fl j Ar max_jobs
.Op Ar variable=value
D 10
.br
.Op Ar "target\ ..."
E 10
I 10
.Bk -words
.Op Ar target ...
.Ek
E 10
.El
.Pp
Here one might talk about the command
.Nm make
and qualify the argument
.Ar makefile ,
as an argument to the flag,
.Fl f ,
or discuss the optional
file
operand
.Ar target .
In the verbal context, such detail can prevent confusion,
however the
.Nm \-mdoc
package
does not have a macro for an argument
.Em to
a flag.
Instead the
.Ql \&Ar
argument macro is used for an operand or file argument like
.Ar target
as well as an argument to a flag like
D 10
.Ar variable :
E 10
I 10
.Ar variable .
The make command line was produced from:
E 10
.Bd -literal -offset indent
\&.Nm make
\&.Op Fl eiknqrstv
\&.Op Fl D Ar variable
\&.Op Fl d Ar flags
\&.Op Fl f Ar makefile
\&.Op Fl I Ar directory
\&.Op Fl j Ar max_jobs
\&.Op Ar variable=value
I 10
\&.Bk -words
E 10
\&.Op Ar target ...
I 10
\&.Ek
E 10
.Ed
I 10
.Pp
The
.Ql \&.Bk
and
.Ql \&.Ek
D 11
are explained in
E 11
I 11
macros are explained in
E 11
.Sx Keeps .
E 10
.Ss General Syntax
D 10
All content macros share a similar
E 10
I 10
The manual domain and general text domain macros share a similar
E 10
syntax with a few minor deviations:
.Ql \&.Ar ,
.Ql \&.Fl ,
.Ql \&.Nm ,
and
.Ql \&.Pa
differ only when called without arguments;
.Ql \&.Fn
and
.Ql \&.Xr
impose an order on their argument lists
and the
D 10
.Em enclosure
E 10
I 10
.Ql \&.Op
E 10
and
D 10
.Em quoting
E 10
I 10
.Ql \&.Fn
E 10
macros
D 10
have nesting limitations. All content macros
are capable of handling punctuation.
E 5
Any argument which may be tested for punctuation
and contains a member of the mathematical, logical or
E 10
I 10
have nesting limitations.
All content macros
are capable of recognizing and properly handling punctuation,
provided each punctuation character is separated by a leading space.
If an request is given:
.Pp
.Dl \&.Li sptr, ptr),
.Pp
The result is:
.Pp
.Dl Li sptr, ptr),
.Pp
The punctuation is not recognized and all is output in the
literal font. If the punctuation is separated by a leading
white space:
.Pp
.Dl \&.Li "sptr , ptr ) ,"
.Pp
The result is:
.Pp
.Dl Li sptr , ptr ) ,
.Pp
The punctuation is now recognized and is output in the
default font distinguishing it from the strings in literal font.
.Pp
To remove the special meaning from a punctuation character
escape it with
.Ql \e& .
.Xr Troff
is limited as a macro language, and has difficulty
when presented with a string containing
a member of the mathematical, logical or
E 10
D 5
quotation
set
E 5
I 5
quotation set:
D 10
.Bd -literal -offset indent -compact
E 5
{+,\-,/,*,%,<,>,<=,>=,=,==,&,`,',"}
E 10
I 10
.Bd -literal -offset indent-two
\&{+,\-,/,*,\&%,<,>,<=,>=,=,==,&,`,',"}
E 10
I 5
.Ed
E 5
D 10
should have
D 5
the character escaped.
.Pp
.Ss Address Request
The address request constructs and address
E 5
I 5
the character escaped with
E 10
I 10
.Pp
The problem is that
.Xr troff
may assume it is supposed to actually perform the operation
or evaluation suggested by the characters.  To prevent
the accidental evaluation of these characters,
escape them with
E 10
.Ql \e& .
Typical syntax is shown in the first content macro displayed
below,
D 10
.Ql \&.Ad ,
and the syntax for enclosure/quoting macros is shown in
.Sx Enclosure and Quoting Macros .
E 10
I 10
.Ql \&.Ad .
E 10
.Ss Address Macro
D 10
The address macro constructs an address
E 10
I 10
The address macro identifies an address construct
E 10
E 5
of the form addr1[,addr2[,addr3]].
.Pp
D 5
.Dl \&.Ad Usage: .Ad address ... \*(Pu
.Dw \&.Ad\ f1\ ,\ f2\ ,\ f3\ :
.Dp Li \&.Ad addr1
E 5
I 5
.Dl Usage: .Ad address ... \*(Pu
.Bl -tag -width ".Ad f1 , f2 , f3 :" -compact -offset 14n
.It Li \&.Ad addr1
E 5
.Ad addr1
D 5
.Dp Li \&.Ad addr1\ .
E 5
I 5
.It Li \&.Ad addr1\ .
E 5
.Ad addr1 .
D 5
.Dp Li \&.Ad addr1\ , file2
E 5
I 5
.It Li \&.Ad addr1\ , file2
E 5
.Ad addr1 , file2
D 5
.Dp Li \&.Ad f1\ , f2\ , f3\ :
E 5
I 5
.It Li \&.Ad f1\ , f2\ , f3\ :
E 5
.Ad f1 , f2 , f3 :
D 5
.Dp Li \&.Ad addr\ )\ )\ ,
E 5
I 5
.It Li \&.Ad addr\ )\ )\ ,
E 5
.Ad addr ) ) ,
D 5
.Dp
E 5
I 5
.El
.Pp
E 5
It is an error to call
.Li \&.Ad
without arguments.
D 5
The request may be called by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
.Ss Argument Request
E 5
I 5
.Li \&.Ad
D 11
is callable by other macros and may call other macros.
E 11
I 11
is callable by other macros and is parsed.
E 11
.Ss Argument Macro
E 5
The
.Li \&.Ar
D 5
argument request may be used whenever
E 5
I 5
argument macro may be used whenever
E 5
a command line argument is referenced.
.Pp
.Dl Usage: .Ar argument ... \*(Pu
D 5
.Dw Tx
.Dp Li \&.Ar
E 5
I 5
.Bl -tag -width ".Ar file1 file2" -compact -offset 15n
.It Li \&.Ar
E 5
.Ar
D 5
.Dp Li \&.Ar file1
E 5
I 5
.It Li \&.Ar file1
E 5
.Ar file1
D 5
.Dp Li \&.Ar file1\ .
E 5
I 5
.It Li \&.Ar file1\ .
E 5
.Ar file1 .
D 5
.Dp Li \&.Ar file1 file2
E 5
I 5
.It Li \&.Ar file1 file2
E 5
.Ar file1 file2
D 5
.Dp Li \&.Ar f1 f2 f3\ :
E 5
I 5
.It Li \&.Ar f1 f2 f3\ :
E 5
.Ar f1 f2 f3 :
D 5
.Dp Li \&.Ar file\ )\ )\ ,
E 5
I 5
.It Li \&.Ar file\ )\ )\ ,
E 5
.Ar file ) ) ,
D 5
.Dp
E 5
I 5
.El
E 5
.Pp
If
.Li \&.Ar
D 5
is called with no arguments
.Ar
E 5
I 5
is called without arguments
.Ql Ar
E 5
D 10
is assumed. The
E 10
I 10
is assumed.
The
E 10
.Li \&.Ar
D 5
request cannot call other macros, but may
be called by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
See the
.Li \&.Op
request for an example of using
.Li \&.Ar
in combination with the
.Li \&.Fl
request.
.Ss Double Quote Request
E 5
I 5
D 11
macro may call other macros, and may be
called by other macros.
E 11
I 11
macro is parsed and is callable.
E 11
D 10
.Ss Angle Bracket Quote/Enclosure
Encloses a string or strings in between angle brackets. The macro
.Ql \&.Aq
encloses the remaining arguments on the macro command line, and the
.Ql \&.Ao
(angle open) and
.Ql \&.Ac
(angle close) macros may be used across one or more lines.
.Pp
.Dl Usage: .Aq string ... \*(Pu
.Bl -tag -width ".Aq Pa ctype.h ) ," -compact -offset 14n
.It Li \&.Aq
.Aq
.It Li \&.Aq string.
.Aq string.
.It Li \&.Aq string\ .
.Aq string .
.It Li \&.Aq stdio.h
.Aq stdio.h
.It Li \&.Aq \&Ar ctype.h\ )\ ,
.Aq Ar ctype.h ) ,
.El
.Pp
See
.Sx Enclosure Macros
for discussion and
.Sx Options
for examples of the open and close
macros
.Ql \&.Ac
and
.Ql \&.Ao .
.Ql \&.Aq
is callable by other macros and may call other macros.
D 8
.Ss Apostrophes
The simple act of appending an apostrophe to the end of a word
is quite painful with out the apostrophe macro. All arguments
in
.Nm \-mdoc
are measured for width and the apostrophe character is misinterpreted
as a width delimiter.  To get around this, the aprostrophe macro
appends the apostrophe character to the word after is has been measured.
.Pp
.Dl Usage: .(macro_name) string Ap appended string \*(Pu
.Bl -tag -width ".Aq Pa ctype.h ) ," -compact -offset 14n
.It Li \&.Em execve \&Ap ing
.Em execve Ap ing
.El
.Pp
E 5
The
D 5
.Li \&.Dq
double quote request may be used to surround
a string with double quotes. Punctuation is
placed after the edn quote.  To place punctuation
in inside the quotes it must be escaped with
.Li \&\e& .
E 5
I 5
.Ql \&Ap
macro may be called by other macros and may call other macros, it cannot
however, be the first macro on a request line.
E 8
.Ss Bracket Quotes/Enclosure
Bracket quotes should be used when the string being bracketed is
.Em not
an option string.  The brackets for an option may be different
than the default brackets. The macro
.Ql \&.Bq
encloses the remaining arguments on a macro command line and the
macros
.Ql \&.Bo
and
.Ql \&.Bc
may be used across one or more lines.
E 5
.Pp
I 5
.Dl Usage: .Bq string ... \*(Pu
.Pp
The
.Li \&.Bq
macro exists for statements which use other macros:
.Bq Em Greek , French .
This was done with:
.Pp
.Dl Li \&.Bq \&Em Greek \&, French \&.
.Pp
It also could have been done using the prefix macro:
.Pp
.Dl Li ".Pf [ Em Greek , French ] ."
.Pp
See
.Sx Enclosure Macros
for discussion and
.Sx Options
for examples of the open and close
macros
.Ql \&.Bc
and
.Ql \&.Bo .
The
.Ql \&.Bq
macro
is callable and may call other macros.
E 10
.Ss Configuration Declaration (section four only)
The
.Ql \&.Cd
macro is used to demonstrate a
.Xr config 8
declaration for a device interface in a section four manual.
This macro accepts quoted arguments (double quotes only).
.Pp
.Bl -tag -width "device le0 at scode?" -offset indent
.It Cd "device le0 at scode?"
produced by:
.Ql ".Cd device le0 at scode?" .
.El
.Ss Command Modifier
The command modifier is identical to the
.Ql \&.Fl
(flag) command with the exception
the
.Ql \&.Cm
macro does not assert a dash
D 10
in front of every argument. Traditionally flags are marked by the
E 10
I 10
in front of every argument.
Traditionally flags are marked by the
E 10
preceding dash, some commands or subsets of commands do not use them.
Command modifiers may also be specified in conjunction with interactive
commands such as editor commands.
See
.Sx Flags .
D 10
.Ss Double Quote macro/Enclosure
The
.Ql \&.Dq
double quote encloses
any remaining strings on the command line with double quotes.
Punctuation is
placed after the end quote.
The macros
.Ql \&.Do
and
.Ql \&.Dc
may be used across one or more lines.
.Pp
E 5
.Dl Usage: .Dq string ... \*(Pu
D 5
.Dw \&.Dq\ fools\ and\ follies
.Dp Li \&.Dq
E 5
I 5
.Bl -tag -width ".Dq Ar patternx ) ) ," -compact -offset 14n
.It Li \&.Dq
E 5
.Dq
D 5
.Dp Li \&.Dq string
.Dq string
.Dp Li \&.Dq string\ .
.Dq string .
.Dp Li \&.Dq fools and follies
.Dq fools and follies
.Dp Li \&.Dq Ar pattern\ )\ )\ ,
E 5
I 5
.It Li ".Dq string."
.Dq string.
.It Li ".Dq string abc ."
.Dq string abc .
.It Li ".Dq \'^[A-Z]\'"
.Dq \'^[A-Z]\'
.It Li \&.Dq \&Ar pattern\ )\ )\ ,
E 5
.Dq Ar pattern ) ) ,
D 5
.Dp
E 5
I 5
.El
E 5
.Pp
If
D 5
.Li \&.Dq
E 5
I 5
.Ql \&.Dq
E 5
is called with no arguments
.Dq
is assumed. The
D 5
.Li \&.Dq
request may call or be called by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
.Li \&.Sq ,
or
.Li \&.Tp .
.Pp
The
.Li \&.Sq
provides single quotes
in the same manner as
.Li \&.Dq .
Neither request can nest with in itself, but
.Li \&.Dq
E 5
I 5
.Ql \&.Dq
macro may call or be called by
other macros.
See
.Sx Enclosure Macros
for discussion of
.Ql \&.Dc
E 5
and
D 5
.Li \&.Sq
can be nested with in each other.
.Ss Emphasis Request
A portion of text may be stressed or emphasized with the .Em
request.  The font used is commonly italic.
E 5
I 5
.Ql \&.Do
macro types.
E 10
.Ss Defined Variables
A variable which is defined in an include file is specified
by the macro
.Ql \&.Dv .
E 5
.Pp
I 5
.Dl Usage: .Dv defined_variable ... \*(Pu
.Bl -tag -width ".Dv MAXHOSTNAMELEN" -compact -offset 14n
.It Li ".Dv MAXHOSTNAMELEN"
.Dv MAXHOSTNAMELEN
.It Li ".Dv TIOCGPGRP )"
.Dv TIOCGPGRP )
.El
.Pp
It is an error to call
.Ql \&.Dv
without arguments.
.Ql \&.Dv
D 11
may call other macros and
may be called by other macros.
E 11
I 11
is parsed and is callable.
E 11
D 10
.Ss Emphasis Macro
Text may be stressed or emphasized with the
.Ql \&.Em
macro.  The usual font for emphasis is italic.
.Pp
E 5
.Dl Usage: .Em argument ... \*(Pu
D 5
.Dw \&.Em\ vide\ infra\ )\ )\ ,
.Dp Li \&.Em does not
E 5
I 5
.Bl -tag -width ".Em vide infra ) ) ," -compact -offset 14n
.It Li ".Em does not"
E 5
.Em does not
D 5
.Dp Li \&.Em exceed 1024\ .
E 5
I 5
.It Li ".Em exceed 1024 ."
E 5
.Em exceed 1024 .
D 5
.Dp Li \&.Em vide infra\ )\ )\ ,
E 5
I 5
.It Li ".Em vide infra ) ) ,"
E 5
.Em vide infra ) ) ,
D 5
.Dp
E 5
I 5
.El
E 5
.Pp
I 5
The emphasis can be forced across several lines of text by using
the
.Ql \&.Bf
macro discussed in
.Sx Modes
under
.Sx PAGE LAYOUT .
.\" .Pp
.\" .Em
.\" I'm certain the reason so many people desire an MBA from Harvard
.\" is because they want to be successful philanthropists.
.\" .Em
.Pp
The
.Ql \&.Em
macro
is callable and may call other macros.
E 5
It is an error to call
D 5
.Li \&.Em
E 5
I 5
.Ql \&.Em
E 5
without arguments.
D 5
The request cannot call other macros, but
may be invoked by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
.Ss Errno's (Section's two and three only)
E 5
I 5
.Ss Enclosure and Quoting Macros
The concept of enclosure is similar to quoting.
The object is to enclose a string or more between
a pair of characters like quotes or parentheses.
The terms quoting and enclosure are used
interchangeably throughout this document.  Many of the
one line enclosure macros end
end in small letter
.Ql q
to give a hint of quoting, but there are a few exceptions
(the macros
.Ql \&.En ,
.Ql \&.Fn
and
.Ql \&.Op
are also enclosure macros).
For each enclosure macro
there is also a pair of open and close macros which end
in small letters
.Ql o
and
.Ql c
respectively. These can be used across one or more lines of text
and while they cannot be nested, the one line quote macros
can be used inside
of them.
For a good example of one these macros, see
.Sx Options .
.Pp
.Bd -filled -offset indent
.Bl -column "quote" "close" "open" "Enclose Stringx(in XX)" XXstringXX
.Em " quote	 close	 open	function	result"
\&.Aq,	.Ac,	.Ao	Angle Bracket Enclosure	<string>
\&.Bq,	.Bc,	.Bo	Bracket Enclosure	[string]
\&.Dq,	.Dc,	.Do	Double Quote	``string''
	.Ec,	.Eo	Enclose String (in XX)	XXstringXX
\&.Fn,	.Fc,	.Fo	Function Enclosure	function(string)
\&.Op,	.Oc,	.Oo	Option Enclosure	[string]
\&.Pq,	.Pc,	.Po	Parenthesis Enclosure	(string)
\&.Qq,	.Qc,	.Qo	Straight Double Quote	"string"
\&.Sq,	.Sc,	.So	Single Quote	`string'
\&	.Xc,	.Xo	Extend Argument	\ \-\-
.El
.Ed
.Pp
The macros
.Ql \&.Eo
and
.Ql \&.Ec
allow a user to specify an open and close with the first argument as the
opening or closing string respectively.
E 10
.Ss Errno's (Section two only)
E 5
The
D 5
.Li \&.Er
errno request specifies the error return value
for section two and three library routines. The second example
E 5
I 5
.Ql \&.Er
errno macro specifies the error return value
D 10
for section two library routines. The second example
E 10
I 10
for section two library routines.
The second example
E 10
E 5
below shows
D 5
.Li \&.Er
E 5
I 5
.Ql \&.Er
E 5
used with the
D 5
.Li \&.Op
request, as it would be used in the error
section of a section two manual page.
E 5
I 5
.Ql \&.Bq
D 10
macro, as it would be used in
E 10
I 10
general text domain macro, as it would be used in
E 10
a section two manual page.
E 5
.Pp
.Dl Usage: .Er ERRNOTYPE ... \*(Pu
D 5
.Dw Tx
.Dp Li \&.Er ENOENT
E 5
I 5
.Bl -tag -width ".Bq Er ENOTDIR" -compact -offset 14n
.It Li \&.Er ENOENT
E 5
.Er ENOENT
D 5
.Dp Li \&.Op \&Er ENOTDIR
.Op Er ENOTDIR
.Dp
E 5
I 5
.It Li \&.Er ENOENT\ )\ ;
.Er ENOENT ) ;
.It Li \&.Bq \&Er ENOTDIR
.Bq Er ENOTDIR
.El
E 5
.Pp
It is an error to call
D 5
.Li \&.Er
E 5
I 5
.Ql \&.Er
E 5
without arguments.
D 5
The request cannot call other macros, but
may be invoked by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
E 5
I 5
The
.Ql \&.Er
D 11
macro
is callable and may call other macros.
E 11
I 11
macro is parsed and is callable.
E 11
E 5
.Ss Environment Variables
The
D 5
.Li \&.Ev
request specifies a environment variable.
E 5
I 5
.Ql \&.Ev
D 15
macro specifies a environment variable.
E 15
I 15
macro specifies an environment variable.
E 15
E 5
.Pp
.Dl Usage: .Ev argument ... \*(Pu
D 5
.Dw \&.Ev\ PRINTER\ )\ )\ ,
.Dp Li \&.Ev DISPLAY
E 5
I 5
.Bl -tag -width ".Ev PRINTER ) ) ," -compact -offset 14n
.It Li \&.Ev DISPLAY
E 5
.Ev  DISPLAY
D 5
.Dp Li \&.Ev PATH\ .
E 5
I 5
.It Li \&.Ev PATH\ .
E 5
.Ev PATH .
D 5
.Dp Li \&.Ev PRINTER\ )\ )\ ,
E 5
I 5
.It Li \&.Ev PRINTER\ )\ )\ ,
E 5
.Ev PRINTER ) ) ,
D 5
.Dp
E 5
I 5
.El
E 5
.Pp
It is an error to call
D 5
.Li \&.Ev
E 5
I 5
.Ql \&.Ev
E 5
without arguments.
D 5
The request cannot call other macros, but
may be invoked by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
E 5
I 5
The
.Ql \&.Ev
D 11
macro
is callable by other macros and may call other macros.
E 11
I 11
macro is parsed and is callable.
E 11
.Ss Function Argument
The
.Ql \&.Fa
macro is used to refer to function arguments (parameters)
D 10
outside of the SYNOPSIS section of the manual or inside
the SYNOPSIS section should a parameter list be too
E 10
I 10
outside of the
.Sx SYNOPSIS
section of the manual or inside
the
.Sx SYNOPSIS
section should a parameter list be too
E 10
long for the
.Ql \&.Fn
macro and the enclosure macros
.Ql \&.Fo
and
.Ql \&.Fc
must be used.
.Ql \&.Fa
may also be used to refer to structure members.
.Pp
.Dl Usage: .Fa function_argument ... \*(Pu
.Bl -tag -width ".Fa d_namlen\ )\ )\ ," -compact -offset 14n
.It Li \&.Fa d_namlen\ )\ )\ ,
.Fa d_namlen ) ) ,
.It Li \&.Fa iov_len
.Fa iov_len
.El
.Pp
It is an error to call
.Ql \&.Fa
without arguments.
.Ql \&.Fa
D 11
is callable by other macros and may call other macros.
E 11
I 11
is parsed and is callable.
E 11
.Ss Function Declaration
The
.Ql \&.Fd
D 10
macro is used in the SYNOPSIS section with section two or three
functions. The
E 10
I 10
macro is used in the
.Sx SYNOPSIS
section with section two or three
functions.
The
E 10
.Ql \&.Fd
macro does not call other macros and is not callable by other
macros.
.Pp
.Dl Usage: .Fd include_file (or defined variable)
.Pp
D 10
In the SYNOPSIS section a
E 10
I 10
In the
.Sx SYNOPSIS
section a
E 10
.Ql \&.Fd
request causes a line break if a function has already been presented
D 10
and a break has not occurred. This leaves a nice vertical space
E 10
I 10
and a break has not occurred.
This leaves a nice vertical space
E 10
in between the previous function call and the declaration for the
next function.
E 5
.Ss Flags
The
D 5
.Li \&.Fl
request handles command line flags. It prepends
E 5
I 5
.Ql \&.Fl
D 10
macro handles command line flags. It prepends
E 10
I 10
macro handles command line flags.
It prepends
E 10
E 5
a dash,
D 5
.Li \- ,
E 5
I 5
.Ql \- ,
E 5
D 10
to the flag. For interactive command flags, which
E 10
I 10
to the flag.
For interactive command flags, which
E 10
are not prepended with a dash, the
D 5
.Li \&.Cm
request is identical, but with out the dash.
The
.Li \&.Cm
stands for command modifier.
E 5
I 5
.Ql \&.Cm
(command modifier)
D 15
macro is identical, but with out the dash.
E 15
I 15
macro is identical, but without the dash.
E 15
E 5
.Pp
.Dl Usage: .Fl argument ... \*(Pu
D 5
.Dw Tx
.Dp Li \&.Fl
E 5
I 5
.Bl -tag -width ".Fl \-s \-t \-v" -compact -offset 14n
.It Li \&.Fl
E 5
.Fl
D 5
.Dp Li \&.Fl cfv
E 5
I 5
.It Li \&.Fl cfv
E 5
.Fl cfv
D 5
.Dp Li \&.Fl cfv\ .
E 5
I 5
.It Li \&.Fl cfv\ .
E 5
.Fl cfv .
D 5
.Dp Li \&.Fl s v t
E 5
I 5
.It Li \&.Fl s v t
E 5
.Fl s v t
D 5
.Dp Li \&.Fl -\ ,
E 5
I 5
.It Li \&.Fl -\ ,
E 5
.Fl - ,
D 5
.Dp Li \&.Fl xyz\ )\ ,
E 5
I 5
.It Li \&.Fl xyz\ )\ ,
E 5
.Fl xyz ) ,
D 5
.Dp
E 5
I 5
.El
E 5
.Pp
The
D 5
.Li \&.Fl
request without any arguments results
in a dash sign representing stdin/stdout.
E 5
I 5
.Ql \&.Fl
macro without any arguments results
in a dash representing stdin/stdout.
E 5
Note that giving
D 5
.Li \&.Fl
E 5
I 5
.Ql \&.Fl
E 5
a single dash, will result in two dashes.
D 5
The request cannot call other macros, but
may be invoked by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
.Pp
E 5
I 5
The
.Ql \&.Fl
D 11
macro
is callable and may call other macros.
E 11
I 11
macro is parsed and is callable.
E 11
E 5
.Ss Functions (library routines)
D 5
The .Fn request is modeled on ANSI C conventions. It
may fail on old style parameter lists.
.Pp
Usage: .Fn [type\e\ ] function [[type\e\ ] params ... \*(Pu
.Dw \&.Fn\ void\e\ push\ int\e\ p\ int\e\ *ptr,
.Di L
.Dp Li \&.Fn getchar
E 5
I 5
The .Fn macro is modeled on ANSI C conventions.
.Bd -literal
D 10
Usage: .Fn [type] function [[type] params ... \*(Pu]
E 10
I 10
Usage: .Fn [type] function [[type] parameters ... \*(Pu]
E 10
.Ed
D 8
.Bl -tag -width ".Fn .int align. .const * char *sptrs" -compact
E 8
I 8
.Bl -tag -width ".Fn .int align. .const * char *sptrsxx" -compact
E 8
.It Li "\&.Fn getchar"
E 5
.Fn getchar
D 5
.Dp Li \&.Fn strlen\ )\ ,
E 5
I 5
.It Li "\&.Fn strlen ) ,"
E 5
.Fn strlen ) ,
D 5
.Dp Li \&.Fn strcpy char\e\ *dst char\e\ *src
.Fn strcpy char\ *dst char\ *src
.Dp Li \&.Fn int\e\ align int\e\ word
.Fn int\ align int\ word
.Dp Li \&.Fn void\e\ push int\e\ p int\e\ *ptr\ ,
.Fn void\ push int\ p int\ *ptr ,
.Dp
E 5
I 5
.It Li \&.Fn "\\*qint align\\*q" "\\*qconst * char *sptrs\\*q" ,
.Fn "int align" "const * char *sptrs" ,
.El
E 5
.Pp
It is an error to call
D 5
.Li \&.Fn
E 5
I 5
.Ql \&.Fn
E 5
without any arguments.
I 5
The
.Ql \&.Fn
macro
D 10
is callable by other macros and may call other macros, but
E 10
I 10
is parsed and is callable,
E 10
note that any call to another macro signals the end of
the
.Ql \&.Fn
D 10
call (it will close-paren at that point).
E 10
I 10
call (it will close-parenthesis at that point).
E 10
.Pp
D 10
In the SYNOPSIS section, the function will always begin at
the beginning of line. If there is more than one function
presented in the SYNOPSIS section and a function type has not been
E 10
I 10
For functions that have more than eight parameters (and this
is rare), the
macros
.Ql \&.Fo
(function open)
and
.Ql \&.Fc
(function close)
may be used with
.Ql \&.Fa
(function argument)
to get around the limitation. For example:
.Bd -literal -offset indent
\&.Fo "int res_mkquery"
\&.Fa "int op"
\&.Fa "char *dname"
\&.Fa "int class"
\&.Fa "int type"
\&.Fa "char *data"
\&.Fa "int datalen"
\&.Fa "struct rrec *newrr"
\&.Fa "char *buf"
\&.Fa "int buflen"
\&.Fc
.Ed
.Pp
Produces:
.Bd -filled -offset indent
.Fo "int res_mkquery"
.Fa "int op"
.Fa "char *dname"
.Fa "int class"
.Fa "int type"
.Fa "char *data"
.Fa "int datalen"
.Fa "struct rrec *newrr"
.Fa "char *buf"
.Fa "int buflen"
.Fc
.Ed
.Pp
The
.Ql \&.Fo
and
.Ql \&.Fc
macros are parsed and are callable.
In the
.Sx SYNOPSIS
section, the function will always begin at
the beginning of line.
If there is more than one function
presented in the
.Sx SYNOPSIS
section and a function type has not been
E 10
given, a line break will occur, leaving a nice vertical space
between the current function name and the one prior.
E 5
At the moment,
D 5
.Li \&.Fn
E 5
I 5
.Ql \&.Fn
E 5
does not check its word boundaries
D 5
against troff line lengths.  It may split across a
line ungracefully. This will be fixed in the near future.
In the examples above, arguments with more than one word
escape the blank spaces with a
.Li \e .
E 5
I 5
against troff line lengths and may split across a newline
D 10
ungracefully. This will be fixed in the near future.
E 10
I 10
ungracefully.
This will be fixed in the near future.
E 10
.Ss Function Type
D 10
This macro is intended for the SYNOPSIS section. It may be used
anywhere else in the manpage without problems, but its main purpose
is to present the function type in kernel normal form for the SYNOPSIS
E 10
I 10
This macro is intended for the
.Sx SYNOPSIS
section.
It may be used
anywhere else in the man page without problems, but its main purpose
is to present the function type in kernel normal form for the
.Sx SYNOPSIS
E 10
of sections two and three
(it causes a page break allowing the function name to appear
on the next line).
.Pp
.Dl Usage: .Ft type ... \*(Pu
D 11
.Pp
E 11
.Bl -tag -width "\&.Ft struct stat" -offset 14n -compact
.It Li \&.Ft struct stat
.Ft struct stat
.El
.Pp
E 5
The
D 5
.Li \&.Fn
request cannot execute any macro
names given as the first argument.
It may be called by the
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
E 5
I 5
.Ql \&.Ft
request is not callable by other macros.
.Ss Interactive Commands
The
.Ql \&.Ic
macro designates an interactive or internal command.
.Pp
.Dl Usage: .Li argument ... \*(Pu
D 11
.Bl -tag -width ".Ic setenv , unsetenv" -compact -offset 14n
E 11
I 11
.Bl -tag -width ".Ic setenv , unsetenvxx" -compact -offset 14n
E 11
.It Li \&.Ic :wq
.Ic :wq
.It Li \&.Ic do while {...}
.Ic do while {...}
.It Li \&.Ic setenv\ , unsetenv
.Ic setenv , unsetenv
.El
.Pp
It is an error to call
.Ql \&.Ic
without arguments.
The
.Ql \&.Ic
D 11
macro may call other macros and is callable.
E 11
I 11
macro is parsed and is callable.
E 11
E 5
.Ss Literals
The
D 5
.Li \&.Li
literal request may be used for special characters,
E 5
I 5
.Ql \&.Li
literal macro may be used for special characters,
E 5
variable constants, anything which should be displayed as it
would be typed.
.Pp
.Dl Usage: .Li argument ... \*(Pu
D 5
.Dw Tx
.Dp Li \&.Li \een
E 5
I 5
.Bl -tag -width ".Li cntrl-D ) ,"  -compact -offset 14n
.It Li \&.Li \een
E 5
.Li \en
D 5
.Dp Li \&.Li M1 M2 M3\ ;
E 5
I 5
.It Li \&.Li M1 M2 M3\ ;
E 5
.Li M1 M2 M3 ;
D 5
.Dp Li \&.Li cntrl-D\ )\ ,
E 5
I 5
.It Li \&.Li cntrl-D\ )\ ,
E 5
.Li cntrl-D ) ,
D 5
.Dp Li \&.Li 1024\ ...
E 5
I 5
.It Li \&.Li 1024\ ...
E 5
.Li 1024 ...
D 5
.Dp
E 5
I 5
.El
E 5
.Pp
D 5
It is an error to call
.Li \&.Li
without arguments.
The request cannot call other macros, but
may be invoked by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
.Ss Name Request
E 5
The
D 5
.Li \&.Nm
request is used for the document title or subject name.
It has the peculiarity of remembering  the first
E 5
I 5
.Ql \&.Li
D 11
macro
is callable by other macros and may call other macros.
E 11
I 11
macro is parsed and is callable.
E 11
.Ss Name Macro
The
.Ql \&.Nm
macro is used for the document title or subject name.
It has the peculiarity of remembering the first
E 5
argument it was called with, which should
D 10
always be the subject name of the page.  When called without
E 10
I 10
always be the subject name of the page.
When called without
E 10
arguments,
D 5
.Li \&.Nm
E 5
I 5
.Ql \&.Nm
E 5
regurgitates this initial name for the sole purpose
of making less work for the author.
D 5
Beyond the NAME section of the man page, a section two
E 5
I 5
Note:
a section two
E 5
or three document function name is addressed with the
D 5
.Li \&Fn
request, while
.Li \&.Nm
can continue to be used for any other sections.
E 5
I 5
.Ql \&.Nm
D 10
in the NAME section, and with
E 10
I 10
in the
.Sx NAME
section, and with
E 10
.Ql \&.Fn
D 10
in the SYNOPSIS
E 10
I 10
in the
.Sx SYNOPSIS
E 10
and remaining sections.
E 5
For interactive commands, such as the
D 5
.Li while
E 5
I 5
.Ql while
E 5
command keyword in
.Xr csh 1 ,
the
D 5
.Li \&.Ic
request should be used.
E 5
I 5
.Ql \&.Ic
macro should be used.
E 5
While the
D 5
.Li \&.Ic
E 5
I 5
.Ql \&.Ic
E 5
is nearly identical
to
D 5
.Li \&.Nm ,
E 5
I 5
.Ql \&.Nm ,
E 5
it can not recall the first argument it was invoked with.
.Pp
.Dl Usage: .Nm argument ... \*(Pu
D 5
.Dw Tx
.Dp Li \&.Nm mdoc.sample
E 5
I 5
.Bl -tag -width ".Nm mdoc.sample" -compact -offset 14n
.It Li \&.Nm mdoc.sample
E 5
.Nm  mdoc.sample
D 5
.Dp Li \&.Nm \-mdoc
E 5
I 5
D 11
.It Li \&.Nm \-mdoc
E 11
I 11
.It Li \&.Nm \e-mdoc
E 11
E 5
.Nm \-mdoc .
D 5
.Dp Li \&.Nm foo\ )\ )\ ,
E 5
I 5
.It Li \&.Nm foo\ )\ )\ ,
E 5
.Nm foo ) ) ,
D 5
.Dp Li \&.Nm
E 5
I 5
.It Li \&.Nm
E 5
.Nm
D 5
.Dp
E 5
I 5
.El
E 5
.Pp
The
D 5
.Li \&.Nm
request cannot call other macros, but
may be called by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
E 5
I 5
.Ql \&.Nm
D 11
macro
is callable by other macros and may call other macros.
E 11
I 11
macro is parsed and is callable.
E 11
D 10
.Ss No\-Op or Normal Text Macro
The macro
.Li \&.No
is
a hack for words in a macro command line which should
.Em not
be formatted and follows the conventional syntax
for content macros.
.Ss No Space Macro
The
.Ql \&.Ns
macro eliminates unwanted spaces in between macro requests.
It is useful for old style argument lists where there is no space
between the flag and argument:
.Bl -tag -width ".Op Fl I Ns Ar directory" -offset indent
.It Li ".Op Fl I Ns Ar directory"
produces
.Op Fl I Ns Ar directory
.El
.Pp
Note: the
.Ql \&.Ns
macro always invokes the
.Ql \&.No
macro after eliminating the space unless another macro name
follows it.
The macro
.Ql \&.Ns
is callable and may call other macros.
E 10
D 8
For the special case of appending an apostrophe to a string, see
.Ql \&Ap .
.Sx Apostrophes .
For prefixes see
.Sx Prefixes.
E 8
.Ss Options
The
.Ql \&.Op
macro
places option brackets around the any remaining arguments on the command
line, and places any
D 10
trailing punctuation outside the brackets. The macros
E 10
I 10
trailing punctuation outside the brackets.
The macros
E 10
.Ql \&.Oc
and
.Ql \&.Oo
may be used across one or more lines.
.Pp
.Dl Usage: .Op options ... \*(Pu
.Bl -tag -width ".Op Fl c Ar objfil Op Ar corfil ," -compact -offset indent
.It Li \&.Op
.Op
.It Li ".Op Fl k"
.Op Fl k
.It Li ".Op Fl k ) ."
.Op Fl k ) .
.It Li ".Op Fl k Ar kookfile"
.Op Fl k Ar kookfile
.It Li ".Op Fl k Ar kookfile ,"
.Op Fl k Ar kookfile ,
.It Li ".Op Ar objfil Op Ar corfil"
.Op Ar objfil Op Ar corfil
.It Li ".Op Fl c Ar objfil Op Ar corfil ,"
.Op Fl c Ar objfil Op Ar corfil ,
.It Li \&.Op word1 word2
.Op word1 word2
.El
.Pp
The
.Ql \&.Oc
and
.Ql \&.Oo
macros:
.Bd -literal -offset indent
\&.Oo
\&.Op \&Fl k \&Ar kilobytes
\&.Op \&Fl i \&Ar interval
\&.Op \&Fl c \&Ar count
\&.Oc
.Ed
.Pp
Produce:
.Oo
.Op Fl k Ar kilobytes
.Op Fl i Ar interval
.Op Fl c Ar count
.Oc
.Pp
The macros
.Ql \&.Op ,
.Ql \&.Oc
and
.Ql \&.Oo
D 11
are callable and may call other macros.
E 11
I 11
are parsed and are callable.
E 11
D 10
.Ss Parenthesis Quote/Enclosure
Macros
.Li \&.Pq , \&.Pc
and
.Li \&.Po
follow the conventions for a typical quoting macros,
see
.Sx Enclosure Macros
and
.Sx Options
above.
E 10
E 5
.Ss Pathnames
The
D 5
.Li \&.Pa
request formats path or file names.  It has two
different behaviours. In any section of the man page
.Em except
the section FILES, it
expects at most one path or file name, and any amount
of punctuation. In the section FILES,
it is often desirable to have a column of pathnames
and a column of pathname descriptions.
E 5
I 5
.Ql \&.Pa
macro formats path or file names.
E 5
.Pp
.Dl Usage: .Pa pathname \*(Pu
D 5
.Dw \&.Pa\ /tmp/fooXXXXX\ )\ .
.Dp Li \&.Pa /usr/share
E 5
I 5
.Bl -tag -width ".Pa /tmp/fooXXXXX ) ." -compact -offset 14n
.It Li \&.Pa /usr/share
E 5
.Pa /usr/share
D 5
.Dp Li \&.Pa /tmp/fooXXXXX\ )\ .
E 5
I 5
.It Li \&.Pa /tmp/fooXXXXX\ )\ .
E 5
.Pa /tmp/fooXXXXX ) .
D 5
.Dp
E 5
I 5
.El
E 5
.Pp
D 5
From within section FILES, use the
.Li \&.Dw
and
.Li \&.Dp
requests to format the pathnames
and their descriptions.
.Li \&.Pa
request cannot call other macros, but
may be called by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
.Ss Single Quotes
See the request
.Li \&.Dq
above.  The single quoting request
.Li \&.Sq
works in the same manner as
.Li \&.Dq.
E 5
I 5
The
.Ql \&.Pa
D 11
macro
is callable by other macros and may call other macros.
E 11
I 11
macro is parsed and is callable.
E 11
D 10
.Ss Single Quotes/Enclosure
See
.Sx Enclosure Macros .
See
.Sx Double Quote/Enclosure
above.
The single quoting macro
.Ql \&.Sq
works in the identical manner as
.Ql \&.Dq.
.Ss Prefix Macro
E 10
I 10
.Ss Variables
Generic variable reference:
.Pp
.Dl Usage: .Va variable ... \*(Pu
.Bl -tag -width ".Va char s ] ) ) ," -compact -offset 14n
.It Li \&.Va count
.Va count
.It Li \&.Va settimer ,
.Va settimer ,
.It Li \&.Va int\ *prt\ )\ :
.Va int\ *prt ) :
.It Li \&.Va char\ s\ ]\ )\ )\ ,
.Va char\ s ] ) ) ,
.El
.Pp
It is an error to call
.Ql \&.Va
without any arguments.
E 10
The
D 8
.Ql \&.Pf is a short cut for combining
E 8
I 8
D 10
.Ql \&.Pf
E 10
I 10
.Ql \&.Va
E 10
D 11
macro
D 10
is a short cut for combining
E 8
two strings together, the first of which is
D 8
in the default font, and the second is a content
E 8
I 8
in the default font, and the second a content
E 8
specified string.
E 10
I 10
is callable by other macros and may call other macros.
E 11
I 11
macro is parsed and is callable.
E 11
.Ss Manual Page Cross References
The
.Ql \&.Xr
macro expects the first argument to be
a manual page name, and the second argument, if it exists,
to be either a section page number or punctuation.
Any
remaining arguments are assumed to be punctuation.
E 10
.Pp
D 10
.Bl -tag -width ".Pf ( Fa name2 " -offset 14n -compact
.It Li ".Pf ( Fa name2"
E 10
I 10
.Dl Usage: .Xr man_page [1,...,8] \*(Pu
.Bl -tag -width ".Xr mdoc 7 ) ) ," -compact -offset 14n
.It Li \&.Xr mdoc
.Xr mdoc
.It Li \&.Xr mdoc\ ,
.Xr mdoc ,
.It Li \&.Xr mdoc 7
.Xr mdoc 7
.It Li \&.Xr mdoc 7\ )\ )\ ,
.Xr mdoc 7 ) ) ,
.El
.Pp
The
.Ql \&.Xr
D 11
macro
is callable by other macros and may call other macros.
E 11
I 11
macro is parsed and is callable.
E 11
It is an error to call
.Ql \&.Xr
without
any arguments.
.Sh GENERAL TEXT DOMAIN
.Ss AT&T Macro
.Bd -literal -offset indent -compact
Usage: .At [v6 | v7 | 32v | V.1 | V.4] ... \*(Pu
.Ed
.Bl -tag -width ".At v6 ) ," -compact -offset 14n
.It Li ".At"
.At
.It Li ".At v6 ."
.At v6 .
.El
.Pp
The
.Ql \&.At
macro is
.Em not
parsed and
.Em not
callable. It accepts at most two arguments.
.Ss BSD Macro
.Dl Usage: .Bx [Version/release] ... \*(Pu
.Bl -tag -width ".Bx 4.3 ) ," -compact -offset 14n
.It Li ".Bx"
.Bx
.It Li ".Bx 4.3 ."
.Bx 4.3 .
.El
.Pp
The
.Ql \&.Bx
macro is parsed and is callable.
.Ss UNIX Macro
.Dl Usage: .Ux ... \*(Pu
.Bl -tag -width ".Ux 4.3 ) ," -compact -offset 14n
.It Li ".Ux"
.Ux
.El
.Pp
The
.Ql \&.Ux
macro is parsed and is callable.
.Ss Emphasis Macro
Text may be stressed or emphasized with the
.Ql \&.Em
macro.
The usual font for emphasis is italic.
.Pp
.Dl Usage: .Em argument ... \*(Pu
.Bl -tag -width ".Em vide infra ) ) ," -compact -offset 14n
.It Li ".Em does not"
.Em does not
.It Li ".Em exceed 1024 ."
.Em exceed 1024 .
.It Li ".Em vide infra ) ) ,"
.Em vide infra ) ) ,
.El
D 11
.Pp
The emphasis can be forced across several lines of text by using
the
.Ql \&.Bf
macro discussed in
.Sx Modes
under
.Sx PAGE LAYOUT .
E 11
.\" .Pp
D 11
.\" .Em
E 11
I 11
.\" The emphasis can be forced across several lines of text by using
.\" the
.\" .Ql \&.Bf
.\" macro discussed in
.\" .Sx Modes
.\" under
.\" .Sx PAGE STRUCTURE DOMAIN .
.\" .Pp
.\" .Bf -emphasis
E 11
.\" We are certain the reason most people desire a Harvard MBA
.\" so they can become to be successful philanthropists.  Only
.\" mathematicians and physicists go to graduate school strictly
.\" to acquire infinite wealthy and fame. Its that inifinity
.\" word that does it to them. Ruins them.
D 11
.\" .Em
E 11
I 11
.\" .Ef
E 11
.Pp
The
.Ql \&.Em
D 11
macro
is callable and may call other macros.
E 11
I 11
macro is parsed and is callable.
E 11
It is an error to call
.Ql \&.Em
without arguments.
.Ss Enclosure and Quoting Macros
The concept of enclosure is similar to quoting.
The object being to enclose one or more strings between
a pair of characters like quotes or parentheses.
The terms quoting and enclosure are used
interchangeably throughout this document.
Most of the
one line enclosure macros end
D 15
end in small letter
E 15
I 15
in small letter
E 15
.Ql q
to give a hint of quoting, but there are a few irregularities.
For each enclosure macro
there is also a pair of open and close macros which end
in small letters
.Ql o
and
.Ql c
respectively.
These can be used across one or more lines of text
and while they have nesting limitations, the one line quote macros
can be used inside
of them.
D 11
For a good example of one these macros, see
.Sx Options .
E 11
.Pp
I 11
.ne 5
E 11
.Bd -filled -offset indent
.Bl -column "quote " "close " "open " "Enclose Stringx(in XX) " XXstringXX
.Em " Quote	 Close	 Open	Function	Result"
\&.Aq	.Ac	.Ao	Angle Bracket Enclosure	<string>
\&.Bq	.Bc	.Bo	Bracket Enclosure	[string]
\&.Dq	.Dc	.Do	Double Quote	``string''
	.Ec	.Eo	Enclose String (in XX)	XXstringXX
\&.Pq	.Pc	.Po	Parenthesis Enclosure	(string)
\&.Ql			Quoted Literal	`st' or string
\&.Qq	.Qc	.Qo	Straight Double Quote	"string"
\&.Sq	.Sc	.So	Single Quote	`string'
.El
.Ed
.Pp
D 11
Except for the following irregular macros, all
E 11
I 11
Except for the irregular macros noted below, all
E 11
of the quoting macros are parsed and callable.
All handle punctuation properly, as long as it
is presented one character at a time and separated by spaces.
The quoting macros examine opening and closing punctuation
to determine whether it comes before or after the
enclosing string. This makes some nesting possible.
.Bl -tag -width xxx,xxxx
.It Li \&.Ec , \&.Eo
These macros expect the first argument to be the
opening and closing strings respectively.
.It Li \&.Ql
The quoted literal macro behaves differently for
.Xr troff
than
.Xr nroff .
If formatted with
.Xr nroff ,
a quoted literal is always quoted. If formatted with
troff, an item is only quoted if the width
of the item is less than three constant width characters.
This is to make short strings more visible where the font change
to literal (constant width) is less noticeable.
.It Li \&.Pf
The prefix macro is not callable, but it is parsed:
D 11
.Pp
.Dl ".Pf ( Fa name2"
.Pp
E 11
I 11
.Bl -tag -width "(namexx" -offset indent
.It Li ".Pf ( Fa name2"
E 11
E 10
becomes
D 10
.Pf ( Fa name2
E 10
I 10
.Pf ( Fa name2 .
I 11
.El
.Pp
E 11
The
.Ql \&.Ns
(no space) macro performs the analogous suffix function.
E 10
.El
.Pp
I 10
.ne 4
Examples of quoting:
.Bl -tag -width ".Aq Pa ctype.h ) ,xxxxxxxx" -compact -offset indent
.It Li \&.Aq
.Aq
.It Li \&.Aq \&Ar ctype.h\ )\ ,
.Aq Ar ctype.h ) ,
.It Li \&.Bq
.Bq
.It Li \&.Bq \&Em Greek \&, French \&.
.Bq Em Greek , French .
.It Li \&.Dq
.Dq
.It Li ".Dq string abc ."
.Dq string abc .
.It Li ".Dq \'^[A-Z]\'"
.Dq \'^[A-Z]\'
.It Li "\&.Ql man mdoc"
.Ql man mdoc
.It Li \&.Qq
.Qq
.It Li "\&.Qq string ) ,"
.Qq string ) ,
I 11
.It Li "\&.Qq string Ns ),"
.Qq string Ns ),
E 11
.It Li \&.Sq
.Sq
.It Li "\&.Sq string
.Sq string
.El
.Pp
For a good example of nested enclosure macros, see the
.Ql \&.Op
option macro.
It was created from the same
underlying enclosure macros as those presented in the list
above.
E 10
The
D 10
.Ql \&.Pf
macro is not callable, but may call other macros.  The
E 10
I 10
.Ql \&.Xo
and
.Ql \&.Xc
extended argument list macros
were also built from the same underlying routines and are a good
example of
.Nm \-mdoc
macro usage at its worst.
.Ss No\-Op or Normal Text Macro
The macro
.Li \&.No
is
a hack for words in a macro command line which should
.Em not
be formatted and follows the conventional syntax
for content macros.
.Ss No Space Macro
The
E 10
.Ql \&.Ns
D 10
macro performs the analogus suffix function.
E 10
I 10
macro eliminates unwanted spaces in between macro requests.
It is useful for old style argument lists where there is no space
between the flag and argument:
.Bl -tag -width ".Op Fl I Ns Ar directoryxx" -offset indent
.It Li ".Op Fl I Ns Ar directory"
produces
.Op Fl I Ns Ar directory
.El
.Pp
Note: the
.Ql \&.Ns
macro always invokes the
.Ql \&.No
macro after eliminating the space unless another macro name
follows it.
The macro
.Ql \&.Ns
D 11
is callable and may call other macros.
E 11
I 11
is parsed and is callable.
E 11
E 10
.Ss Section Cross References
The
.Ql \&.Sx
macro designates a reference to a section header
D 10
within the same document. It is callable by other macros and may
E 10
I 10
within the same document.
D 11
It is callable by other macros and may
E 10
call other macros.
E 11
I 11
It is parsed and is callable.
E 11
.Pp
.Bl -tag -width "Li \&.Sx FILES" -offset 14n
.It Li \&.Sx FILES
.Sx FILES
.El
I 10
.Ss Symbolic
The symbolic emphasis macro is generally a boldface macro in
either the symbolic sense or the traditional English usage.
.Pp
.Dl Usage: .Sy symbol ... \*(Pu
.Bl -tag -width ".Sy Important Noticex" -compact -offset 14n
.It Li \&.Sy Important Notice
.Sy Important Notice
.El
.Pp
The
.Ql \&.Sy
D 11
macro
is callable by other macros and may call other macros, except
in the second form.
E 11
I 11
macro is parsed and is callable.
E 11
Arguments to
.Ql \&.Sy
may be quoted.
E 10
.Ss References and Citations
The following macros make a modest attempt to handle references.
D 10
At best, the macros make it convientent to manually drop in a subset of
E 10
I 10
At best, the macros make it convenient to manually drop in a subset of
E 10
refer style references.
.Pp
.Bl -tag -width 6n -offset indent -compact
.It Li ".Rs"
D 10
Reference Start. Causes a line break and begins collection
E 10
I 10
Reference Start.
Causes a line break and begins collection
E 10
of reference information until the
reference end macro is read.
.It Li ".Re"
D 10
Reference End. The reference is printed.
E 10
I 10
Reference End.
The reference is printed.
E 10
.It Li ".%A"
Reference author name, one name per invocation.
.It Li ".%B"
Book title.
I 10
.It Li ".\&%C"
City/place.
.It Li ".\&%D"
Date.
E 10
.It Li ".%J"
D 10
Journal title.
E 10
I 10
Journal name.
E 10
.It Li ".%N"
Issue number.
.It Li ".%O"
Optional information.
I 10
.It Li ".%P"
Page number.
E 10
.It Li ".%R"
Report name.
.It Li ".%T"
Title of article.
.It Li ".%V"
Volume(s).
.El
.Pp
D 10
The macros begining with
E 10
I 10
The macros beginning with
E 10
.Ql %
D 10
are not callable, but may call only the trade name macro which
returns to its caller. The purpose is to allow trade names
to be pretty printed in troff/ditroff output. WARNING: this
has very few trade names defined at the moment and will print unknown
trade names in the default font.
E 5
.Ss Symbolic
D 5
The symbolic request is really a boldface request.
The need for this macro has not been established,
it is included 'just in case'.
E 5
I 5
The symbolic emphasis macro is generally a boldface macro in
either the symbolic sense or the traditional English usage.
E 10
I 10
are not callable, and are parsed only for the trade name macro which
returns to its caller.
(And not very predictably at the moment either.)
The purpose is to allow trade names
D 11
to be pretty printed in troff/ditroff output.
E 11
I 11
to be pretty printed in
.Xr troff Ns / Ns Xr ditroff
output.
E 11
.Ss Trade Names (or Acronyms and Type Names)
The trade name macro is generally a small caps macro for
all upper case words longer than two characters.
E 10
E 5
.Pp
D 10
.Dl Usage: .Sy symbol ... \*(Pu
D 5
.Dw \&.Sy\ something\ bold
.Dp Li \&.Sy something bold
.Sy something bold
.Dp
E 5
I 5
.Bl -tag -width ".Sy Important Notice" -compact -offset 14n
.It Li \&.Sy Important Notice
.Sy Important Notice
E 10
I 10
.Dl Usage: .Tn symbol ... \*(Pu
.Bl -tag -width ".Tn ASCII" -compact -offset 14n
.It Li \&.Tn DEC
.Tn DEC
.It Li \&.Tn ASCII
.Tn ASCII
E 10
.El
E 5
.Pp
The
D 5
.Li \&.Sy
request cannot call other macros, but can be called
by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
E 5
I 5
D 10
.Ql \&.Sy
E 10
I 10
.Ql \&.Tn
E 10
macro
D 10
is callable by other macros and may call other macros, except
in the second form.  Arguments to
.Ql \&.Sy
may be quoted.
E 5
.Ss Variables
Generic variable reference:
.Pp
.Dl Usage: .Va variable ... \*(Pu
D 4
.Dw \&.Va char\ s\ ]\ )\ )\ ,
E 4
I 4
D 5
.Dw \&.Va\ char\ s\ ]\ )\ )\ ,
E 4
.Dp Li \&.Va count
E 5
I 5
.Bl -tag -width ".Va char s ] ) ) ," -compact -offset 14n
.It Li \&.Va count
E 5
.Va count
D 5
.Dp Li \&.Va settimer ,
E 5
I 5
.It Li \&.Va settimer ,
E 5
.Va settimer ,
D 5
.Dp Li \&.Va int\ *prt\ )\ :
E 5
I 5
.It Li \&.Va int\ *prt\ )\ :
E 5
.Va int\ *prt ) :
D 5
.Dp Li \&.Va char\ s\ ]\ )\ )\ ,
E 5
I 5
.It Li \&.Va char\ s\ ]\ )\ )\ ,
E 5
.Va char\ s ] ) ) ,
D 5
.Dp
E 5
I 5
.El
E 5
.Pp
I 5
It is an error to call
.Ql \&.Va
without any arguments.
The
.Ql \&.Va
macro
is callable by other macros and may call other macros.
E 5
.Ss Cross References
The
D 5
.Li \&.Xr
request expects the first argument to be
E 5
I 5
.Ql \&.Xr
macro expects the first argument to be
E 5
a manual page name, and the second argument, if it exists,
to be either a section page number or punctuation.  Any
remaining arguments are assumed to be punctuation.
.Pp
.Dl Usage: .Xr manpage [1,...,8] \*(Pu
D 5
.Dw Tx
.Dp Li \&.Xr mdoc
E 5
I 5
.Bl -tag -width ".Xr mdoc 7 ) ) ," -compact -offset 14n
.It Li \&.Xr mdoc
E 5
.Xr mdoc
D 5
.Dp Li \&.Xr mdoc\ ,
E 5
I 5
.It Li \&.Xr mdoc\ ,
E 5
.Xr mdoc ,
D 5
.Dp Li \&.Xr mdoc 7
E 5
I 5
.It Li \&.Xr mdoc 7
E 5
.Xr mdoc 7
D 5
.Dp Li \&.Xr mdoc 7\ )\ )\ ,
E 5
I 5
.It Li \&.Xr mdoc 7\ )\ )\ ,
E 5
.Xr mdoc 7 ) ) ,
D 5
.Dp
E 5
I 5
.El
E 5
.Pp
The
D 5
.Li \&.Xr
request cannot call other macros, but may be called
by
.Li \&.Cl ,
.Li \&.Cx ,
.Li \&.Dl ,
.Li \&.Dp ,
.Li \&.Op
or
.Li \&.Tp .
E 5
I 5
.Ql \&.Xr
macro
is callable by other macros and may call other macros.
E 5
It is an error to call
D 5
.Li \&.Xr
E 5
I 5
.Ql \&.Xr
E 5
without
any arguments.
E 10
I 10
is parsed and is callable by other macros.
E 10
D 5
.Pp
E 5
I 5
.Ss Extended  Arguments
The
.Li \&.Xo
and
.Li \&.Xc
D 10
maxros allow one to extend an argument list
on a macro boundary.  Argument lists cannot
E 10
I 10
macros allow one to extend an argument list
on a macro boundary.
Argument lists cannot
E 10
be extended within a macro
which expects all of its arguments on one line such
as
.Ql \&.Op .
E 5
D 10
.\" ---
.Sh PAGE LAYOUT MACROS
E 10
I 10
.Pp
Here is an example of
.Ql \&.Xo
using the space mode macro to turn spacing off:
.Bd -literal -offset indent
\&.Sm off
\&.It Xo Sy I Ar operation
D 11
\&.No \en Ar count No \en
E 11
I 11
\&.No \een Ar count No \een
E 11
\&.Xc
\&.Sm on
.Ed
.Pp
Produces
.Bd -filled -offset indent
.Bl -tag -width flag -compact
.Sm off
.It Xo Sy I Ar operation
.No \en Ar count No \en
.Xc
.Sm on
.El
.Ed
.Pp
Another one:
.Bd -literal -offset indent
\&.Sm off
\&.It Cm S No \&/ Ar old_pattern Xo
\&.No \&/ Ar new_pattern
\&.No \&/ Op Cm g
\&.Xc
\&.Sm on
.Ed
.Pp
Produces
.Bd -filled -offset indent
.Bl -tag -width flag -compact
.Sm off
.It Cm S No \&/ Ar old_pattern Xo
.No \&/ Ar new_pattern
.No \&/ Op Cm g
.Xc
.Sm on
.El
.Ed
.Pp
Another example of
.Ql \&.Xo
and using enclosure macros:
Test the value of an variable.
.Bd -literal -offset indent
\&.It Xo
\&.Ic .ifndef
\&.Oo \e&! Oc Ns Ar variable
\&.Op Ar operator variable ...
\&.Xc
.Ed
.Pp
Produces
.Bd -filled -offset indent
.Bl -tag -width flag -compact
.It Xo
.Ic .ifndef
.Oo \&! Oc Ns Ar variable
.Op Ar operator variable ...
.Xc
.El
.Ed
.Pp
All of the above examples have used the
.Ql \&.Xo
macro on the argument list of the
.Ql \&.It
(list-item)
macro.
The extend macros are not used very often, and when they are
it is usually to extend the list-item argument list.
Unfortunately, this is also where the extend macros are the
most finicky.
In the first two examples, spacing was turned off;
in the third, spacing was desired in part of the output but
not all of it.
To make these macros work in this situation make sure
the
.Ql \&.Xo
and
.Ql \&.Xc
macros are placed as shown in the third example.
If the
.Ql \&.Xo
macro is not alone on the
.Ql \&.It
argument list, spacing will be unpredictable.
The
.Ql \&.Ns
(no space macro)
must not occur as the first or last macro on a line
in this situation.
D 11
Out of 900 manual pages (about 1800 actual pages)
E 11
I 11
Out of 900 manual pages (about 1500 actual pages)
E 11
currently released with
.Bx
only fifteen use the
.Ql \&.Xo
macro.
.Sh PAGE STRUCTURE DOMAIN
E 10
.Ss Section Headers
D 5
Several
.Li \&.Sh
section header requests are required in every
man page. The
.Li \&.Sh
request can take up to nine arguments.
.Tp \&.Sh NAME
E 5
I 5
The first three
.Ql \&.Sh
section header macros
list below are required in every
D 10
man page. The remaining section headers
are recommended at the disgression of the author
writing the manual page. The
E 10
I 10
man page.
The remaining section headers
are recommended at the discretion of the author
writing the manual page.
The
E 10
.Ql \&.Sh
D 10
macro can take up to nine arguments. It may call
E 10
I 10
macro can take up to nine arguments.
D 11
It may call
E 10
other macros, but it may not be called by other macros.
E 11
I 11
It is parsed and but is not callable.
E 11
.Bl -tag -width ".Sh SYNOPSIS"
.It \&.Sh NAME
E 5
The
D 5
.Li \&.Sh NAME
request is mandatory. If not specified,
E 5
I 5
.Ql \&.Sh NAME
D 10
macro is mandatory. If not specified,
E 10
I 10
macro is mandatory.
If not specified,
E 10
E 5
the headers, footers and page layout defaults
will not be set and things will be rather unpleasant.
D 10
The NAME section consists of at least three items.
E 10
I 10
The
.Sx NAME
section consists of at least three items.
E 10
The first is the
D 5
.Li \&.Nm
name request naming the subject of the man page.
The second is the Name Description request,
.Li \&.Nd ,
E 5
I 5
.Ql \&.Nm
name macro naming the subject of the man page.
The second is the Name Description macro,
.Ql \&.Nd ,
E 5
which separates the subject
D 10
name from the third item, which is the description. The
E 10
I 10
name from the third item, which is the description.
The
E 10
description should be the most terse and lucid possible,
as the space available is small.
D 5
.Tp \&.Sh SYNOPSIS
E 5
I 5
.It \&.Sh SYNOPSIS
E 5
D 10
The SYNOPSIS section describes the typical usage of the
D 5
subject of a man page. The  requests required
E 5
I 5
subject of a man page. The  macros required
E 10
I 10
The
.Sx SYNOPSIS
section describes the typical usage of the
subject of a man page.
The  macros required
E 10
E 5
are either
D 5
.Li \&.Nm
E 5
I 5
.Ql ".Nm" ,
.Ql ".Cd" ,
E 5
D 10
or
D 5
.Li \&.Fn .
E 5
I 5
.Ql ".Fn"
E 10
I 10
.Ql ".Fn" ,
E 10
(and possibly
I 10
.Ql ".Fo" ,
.Ql ".Fc" ,
E 10
.Ql ".Fd" ,
.Ql ".Ft"
macros).
E 5
The function name
D 5
request
.Li \&.Fn
E 5
I 5
macro
.Ql ".Fn"
E 5
is required
for manual page sections 2 and 3, the command and general
D 5
name request
.Li \&.Nm
is required for the remaining sections 1, 4, 5, 6, 7, 8.
Several other requests may be necessary to produce
E 5
I 5
name macro
.Ql \&.Nm
is required for sections 1, 5, 6, 7, 8.
Section 4 manuals require a
.Ql ".Nm" , ".Fd"
or a
.Ql ".Cd"
configuration device usage macro.
Several other macros may be necessary to produce
E 5
the synopsis line as shown below:
.Pp
I 5
.Bd -filled -offset indent
E 5
.Nm cat
.Op Fl benstuv
.Op Fl
.Ar
I 5
.Ed
E 5
.Pp
D 5
The following requests were used:
E 5
I 5
The following macros were used:
E 5
.Pp
.Dl \&.Nm cat
D 5
.Dl \&.Op Fl benstuv
.Dl \&.Op Fl
E 5
I 5
.Dl \&.Op \&Fl benstuv
.Dl \&.Op \&Fl
E 5
.Dl \&.Ar
I 11
.Pp
E 11
I 10
.Sy Note :
The macros
.Ql \&.Op ,
.Ql \&.Fl ,
and
.Ql \&.Ar
recognize the pipe bar character
D 11
.Ql \*(Ba , so
a command line such as:
E 11
I 11
.Ql \*(Ba ,
so a command line such as:
E 11
.Pp
.Dl ".Op Fl a | Fl b"
.Pp
D 11
will not go into outer space.
E 11
I 11
will not go orbital.
E 11
.Xr Troff
normally interprets a \*(Ba as a special operator.
See
.Sx PREDEFINED STRINGS
for a usable \*(Ba
character in other situations.
E 10
D 5
.Pp
Note, the
.Li \&.Op
request has accepted as its first
argument the name of another macro
.Em \&Fl .
Upon discovering the first argument is callable,
.Li \&.Op
calls it with the remaining arguments
and returns the formatted text in option brackets.
.Tp \&.Sh DESCRIPTION
E 5
I 5
.It \&.Sh DESCRIPTION
E 5
D 10
In most cases the first text in the DESCRIPTION section
E 10
I 10
In most cases the first text in the
.Sx DESCRIPTION
section
E 10
is a brief paragraph on the command, function or file,
followed by a lexical list of options and respective
D 10
explanations. To create such a list, the
E 10
I 10
explanations.
To create such a list, the
E 10
D 5
.Li \&.Tp
request is used in conjunction with text macros, such
as the
.Li \&.Fl
macro (see
the EXAMPLES section below).
.Tp
E 5
I 5
.Ql \&.Bl
begin-list,
.Ql \&.It
list-item and
.Ql \&.El
end-list
macros are used (see
.Sx Lists and Columns
below).
.El
E 5
.Pp
D 5
Other user specified
.Li \&.Sh
sections may be added,
for instance, in this manual page
.Pp
.Dl Li \&.Sh PAGE LAYOUT MACROS
.Pp
was used for this section.
.Pp
E 5
The following
D 5
.Li \&.Sh
E 5
I 5
.Ql \&.Sh
E 5
section headers are part of the
preferred manual page layout and must be used appropriately
D 10
to maintain consistency. They are listed in the order
E 10
I 10
to maintain consistency.
They are listed in the order
E 10
in which they would be used.
D 5
.Tp \&.Sh ENVIRONMENT
E 5
I 5
.Bl -tag -width SYNOPSIS
.It \&.Sh ENVIRONMENT
E 5
D 10
The ENVIRONMENT section should reveal any related
E 10
I 10
The
.Sx ENVIRONMENT
section should reveal any related
E 10
environment
D 10
variables and clues to their behaviour and/or usage.
E 10
I 10
variables and clues to their behavior and/or usage.
E 10
D 5
.Tp \&.Sh EXAMPLES
E 5
I 5
.It \&.Sh EXAMPLES
E 5
D 10
There are several ways to create examples. See
the EXAMPLES section below
E 10
I 10
There are several ways to create examples.
See
the
.Sx EXAMPLES
section below
E 10
for details.
D 5
.Tp \&.Sh FILES
E 5
I 5
.It \&.Sh FILES
E 5
Files which are used or created by the man page subject
should be listed via the
D 5
.Li \&.Pa
request in the FILES section.
.Tp \&.Sh SEE ALSO
E 5
I 5
.Ql \&.Pa
D 10
macro in the FILES section.
E 10
I 10
macro in the
.Sx FILES
section.
E 10
.It \&.Sh SEE ALSO
E 5
References to other material on the man page topic and
cross references to other relevant man pages should
D 10
be placed in the SEE ALSO section.  Cross references
E 10
I 10
be placed in the
.Sx SEE ALSO
section.
Cross references
E 10
are specified using the
D 5
.Li \&.Xr
request.  At this time
E 5
I 5
.Ql \&.Xr
D 10
macro.  At this time
E 10
I 10
macro.
At this time
E 10
E 5
.Xr refer 1
style references are not accommodated.
D 5
.Tp \&.Sh STANDARDS
E 5
I 5
.It \&.Sh STANDARDS
E 5
If the command, library function or file adheres to a
D 10
specific implementation such as POSIX 1003.1 or
ANSI C X3.159-1989 this should be noted here.  If the
E 10
I 10
specific implementation such as
.St -p1003.2
or
.St -ansiC
this should be noted here.
If the
E 10
command does not adhere to any standard, its history
D 10
should be noted in the HISTORY section.
E 10
I 10
should be noted in the
.Sx HISTORY
section.
I 16
.ne 1i
E 16
E 10
D 5
.Tp \&.Sh HISTORY
E 5
I 5
.It \&.Sh HISTORY
E 5
Any command which does not adhere to any specific standards
should be outlined historically in this section.
D 5
.Tp \&.Sh AUTHORS
E 5
I 5
.It \&.Sh AUTHORS
E 5
Credits, if need be, should be placed here.
D 5
.Tp \&.Sh DIAGNOSTICS
E 5
I 5
.It \&.Sh DIAGNOSTICS
E 5
Diagnostics from a command should be placed in this section.
D 5
.Tp \&.Sh ERRORS
E 5
I 5
.It \&.Sh ERRORS
E 5
Specific error handling, especially from library functions
D 10
(man page sections 2 and 3) should go here.  The
E 10
I 10
(man page sections 2 and 3) should go here.
The
E 10
D 5
.Li \&.Er
request is used to specify an errno.
.Tp \&.Sh BUGS
E 5
I 5
.Ql \&.Er
macro is used to specify an errno.
.It \&.Sh BUGS
E 5
Blatant problems with the topic go here...
D 5
.Tp
E 5
I 5
.El
E 5
.Pp
I 5
User specified
.Ql \&.Sh
sections may be added,
for example, this section was set with:
.Bd -literal -offset 14n
\&.Sh PAGE LAYOUT MACROS
.Ed
E 5
.Ss Paragraphs and Line Spacing.
D 5
.Tp \&.Pp
E 5
I 5
.Bl -tag -width 6n
.It \&.Pp
E 5
The \&.Pp paragraph command may
be used to specify a line space where necessary.
D 5
The request is not necessary after a
.Li \&.Sh
E 5
I 5
The macro is not necessary after a
.Ql \&.Sh
E 5
or
D 5
.Li \&.Ss
request or before
E 5
I 5
.Ql \&.Ss
macro or before
E 5
a
D 5
.Li \&.Tp
or
.Li \&.Dp
request.
.Tp
.Ss Complex Expressions
A complex expression is one combined of many
different elements of text. It is usually only necessary
in particularly nasty man pages, such as
.Xr adb 1
or
.Xr ex 1 ,
where combinations of commands, addresses and symbols
may be needed.
When pieces of text are processed,
.Xr troff 1
assumes
that a space character will be desired after each word
making it difficult to combine expressions where
different requests are used.
.Li \&.Cx
merely glues text together without spaces.  Where
a space is required, it must be specified.
A few examples:
E 5
I 5
.Ql \&.Bl
macro.
(The
.Ql \&.Bl
macro asserts a vertical distance unless the -compact flag is given).
.El
I 10
.\" This worked with version one, need to redo for version three
E 10
.\" .Pp
.\" .Ds I
.\" .Cw (ax+bx+c) \ is\ produced\ by\ \&
.\" .\".Cw (ax+bx+c) \&.Va_by_) \&_and_\& \&[?/]m_b1_e1_f1[?/]\&
.\" .Cl Cx \t\t
.\" .Li \&.Cx\ (
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va ax
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy \+
.\" .Cx
.\" .Cl Cx \&(\&
.\" .Va ax
.\" .Cx +
.\" .Va by
.\" .Cx +
.\" .Va c )
.\" .Cx \t
.\" .Em is produced by
.\" .Cx \t
.\" .Li \&.Va by
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy \+
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va c )
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx
.\" .Cx
.\" .Cw
.\" .De
.\" .Pp
D 10
.\" This example shows the same equation in a different format. The spaces
E 10
I 10
.\" This example shows the same equation in a different format.
.\" The spaces
E 10
.\" around the
.\" .Li \&+
.\" signs were forced with
.\" .Li \e :
.\" .Pp
.\" .Ds I
.\" .Cw (ax\ +\ bx\ +\ c) \ is\ produced\ by\ \&
.\" .\".Cw (ax+bx+c) \&.Va_by_) \&_and_\& \&[?/]m_b1_e1_f1[?/]\&
.\" .Cl Cx \t\t
.\" .Li \&.Cx\ (
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va a
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy x
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx \e\ +\e\ \e&
.\" .Cx
.\" .Cl Cx \&(\&
.\" .Va a
.\" .Sy x
.\" .Cx \ +\ \&
.\" .Va b
.\" .Sy y
.\" .Cx \ +\ \&
.\" .Va c )
.\" .Cx \t
.\" .Em is produced by
.\" .Cl Cx \t\t
.\" .Li \&.Va b
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy y
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx \e\ +\e\ \e&
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va c )
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx
.\" .Cx
.\" .Cw
.\" .De
.\" .Pp
.\" The incantation below was
.\" lifted from the
.\" .Xr adb 1
.\" manual page:
.\" .Pp
.\" .Ds I
.\" .Cw \&[?/]m_b1_e1_f1[?/]\& is\ produced\ by
.\" .Cl Cx \t\t
.\" .Li \&.Cx Op Sy ?/
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Nm m
.\" .Cx
.\" .Cl Cx Op Sy ?/
.\" .Nm m
.\" .Ad \ b1 e1 f1
.\" .Op Sy ?/
.\" .Cx \t
.\" .Em is produced by
.\" .Cx \t
.\" .Li \&.Ar \e\ b1 e1 f1
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Op Sy ?/
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx
.\" .Cx
.\" .Cw
.\" .De
.\" .Pp
I 10
.Ss Keeps
The only keep that is implemented at this time is for words.
The macros are
.Ql \&.Bk
(begin-keep)
and
.Ql \&.Ek
(end-keep).
The only option that
.Ql \&.Bl
accepts is
.Fl words
and is useful for preventing line breaks in the middle of options.
In the example for the make command line arguments (see
.Sx What's in a name ) ,
the keep prevented
.Xr nroff
from placing up the
flag and the argument
on separate lines.
(Actually, the option macro used to prevent this from occurring,
but was dropped when the decision (religious) was made to force
right justified margins in
.Xr troff
as options in general look atrocious when spread across a sparse
line.
More work needs to be done with the keep macros, a
.Fl line
option needs to be added.)
E 10
.Ss Examples and Displays
There are five types of displays, a quickie one line indented display
.Ql \&.D1 ,
a quickie one line literal display
.Ql \&.Dl ,
D 10
a block literal, block filled and block ragged which use
E 10
I 10
and a block literal, block filled and block ragged which use
E 10
the
.Ql \&.Bd
begin-display
and
.Ql \&.Ed
end-display macros.
E 5
.Pp
D 5
This first example shows how to construct a simple
expression with no spacing in between:
E 5
I 5
D 10
.Bl -tag -width \&.D1
E 10
I 10
.Bl -tag -width \&.Dlxx
E 10
.It Li \&.D1
(D-one) Display one line of indented text.
D 10
Arguments are checked to see if they are callable.
.Bd -ragged -offset indent
.Li \&.D1 \&Fl ldghfstru
.Ed
E 10
I 10
This macro is parsed, but it is not callable.
E 10
E 5
.Pp
D 5
.Ds I
.Cw (ax+bx+c) \ is\ produced\ by\ \&
.\".Cw (ax+bx+c) \&.Va_by_) \&_and_\& \&[?/]m_b1_e1_f1[?/]\&
.Cl Cx \t\t
.Li \&.Cx\ (
.Cx
.Cl Cx \t\t
.Li \&.Va ax
.Cx
.Cl Cx \t\t
.Li \&.Sy \+
.Cx
.Cl Cx \&(\&
.Va ax
.Cx +
.Va by
.Cx +
.Va c )
.Cx \t
.Em is produced by
.Cx \t
.Li \&.Va by
.Cx
.Cl Cx \t\t
.Li \&.Sy \+
.Cx
.Cl Cx \t\t
.Li \&.Va c )
.Cx
.Cl Cx \t\t
.Li \&.Cx
.Cx
.Cw
.De
E 5
I 5
D 10
produces:
E 5
.Pp
E 10
D 5
This example shows the same equation in a different format. The spaces
around the
.Li \&+
signs were forced with
.Li \e :
.Pp
.Ds I
.Cw (ax\ +\ bx\ +\ c) \ is\ produced\ by\ \&
.\".Cw (ax+bx+c) \&.Va_by_) \&_and_\& \&[?/]m_b1_e1_f1[?/]\&
.Cl Cx \t\t
.Li \&.Cx\ (
.Cx
.Cl Cx \t\t
.Li \&.Va a
.Cx
.Cl Cx \t\t
.Li \&.Sy x
.Cx
.Cl Cx \t\t
.Li \&.Cx \e\ +\e\ \e&
.Cx
.Cl Cx \&(\&
.Va a
.Sy x
.Cx \ +\ \&
.Va b
.Sy y
.Cx \ +\ \&
.Va c )
.Cx \t
.Em is produced by
.Cl Cx \t\t
.Li \&.Va b
.Cx
.Cl Cx \t\t
.Li \&.Sy y
.Cx
.Cl Cx \t\t
.Li \&.Cx \e\ +\e\ \e&
.Cx
.Cl Cx \t\t
.Li \&.Va c )
.Cx
.Cl Cx \t\t
.Li \&.Cx
.Cx
.Cw
.De
.Pp
The incantation below was
lifted from the
.Xr adb 1
manual page:
.Pp
.Ds I
.Cw \&[?/]m_b1_e1_f1[?/]\& is\ produced\ by
.Cl Cx \t\t
.Li \&.Cx Op Sy ?/
.Cx
.Cl Cx \t\t
.Li \&.Nm m
.Cx
.Cl Cx Op Sy ?/
.Nm m
.Ad \ b1 e1 f1
.Op Sy ?/
.Cx \t
.Em is produced by
.Cx \t
.Li \&.Ar \e\ b1 e1 f1
.Cx
.Cl Cx \t\t
.Li \&.Op Sy ?/
.Cx
.Cl Cx \t\t
.Li \&.Cx
.Cx
.Cw
.De
.Pp
.Ss Examples and Displays
There are three types of displays, an indented one line display
.Li \&.Dl ,
a non\-filled block display
.Li Ds
and a filled block display.
.Pp
.Tw \&.Dl
.Tp Li \&.Dl
Display one line of indented text.
The
E 5
I 5
.Dl Fl ldghfstru
I 10
.Pp
The above was produced by:
.Li \&.Dl Fl ldghfstru .
E 10
.It Li \&.Dl
(D-ell)
Display one line of indented
.Em literal
D 10
text.  The
E 10
I 10
text.
The
E 10
.Ql \&.Dl
example macro has been used throughout this
D 10
file.  It allows
E 10
I 10
file.
It allows
E 10
the indent (display) of one line of text.
Its default font is set to
constant width (literal) however
D 10
.Ql \&.Dl
does check arguments to see it they are callable.
Macros called from
E 5
.Li \&.Dl
D 5
example request has been used throughout this
file.  It's
basic use is to indent (display) one line of text for quick
one line examples. Its default font is set to
constant width, however,
.Li \&.Dl
checks the first argument to see if it is callable. It cannot process
more than nine arguments.
.Pp
.Ds I
E 5
I 5
should be content macros; calling macros from
the page layout section
is redundant and may cause unpredictable errors.
.Bd -ragged -offset indent
E 5
.Li \&.Dl % ls -ldg /usr/local/bin
I 5
.Ed
E 10
I 10
it is parsed and will recognized other macros.
It is not callable however.
E 10
E 5
.Pp
D 10
produces:
I 5
.Pp
E 10
E 5
.Dl % ls -ldg /usr/local/bin
I 10
.Pp
The above was produced by
.Li \&.Dl % ls -ldg /usr/local/bin .
E 10
I 5
.It Li \&.Bd
D 10
Begin-display. The
E 10
I 10
Begin-display.
The
E 10
.Ql \&.Bd
display must be ended with the
.Ql \&.Ed
D 10
macro. Displays may be nested within displays and
E 10
I 10
macro.
Displays may be nested within displays and
E 10
lists.
.Ql \&.Bd
has the following syntax:
E 5
.Pp
D 5
.Li \&.Dl Fl ldghfstru
E 5
I 5
D 10
.Dl ".Bd display-type [offset offset_value]"
E 10
I 10
.Dl ".Bd display-type [-offset offset_value] [-compact]"
E 10
E 5
.Pp
D 5
produces:
.Dl  Fl ldghfstru
.De
E 5
I 5
The display-type must be one of the following four types and
may have an offset specifier for indentation:
.Ql \&.Bd .
E 5
.Pp
D 5
Calling either the request
.Li \&.Tp
or
.Li \&.Dp
from
.Li \&.Dl
is redundant and may cause unpredictable errors.
.Tp Li \&.Ds
E 5
I 5
D 10
.Bl -tag -width "literalxx" -compact
E 10
I 10
.Bl -tag -width "file file_name  " -compact
E 10
.It Fl ragged
E 5
Display a block of text as typed,
D 5
right margin edges are left ragged.
Nesting
.Li \&.Ds
requests seems to work,
so they can be used outside and within
tagged paragraphs. Each
.Li \&.Ds
request must be ended with a
.Li \&De
request.
.Li \&.Ds
takes can be manipulated to indent
with the
.Li \&L , \&C , \&R ,
and
.Li \&I
flags.
.Dw 4n
.Dp Li L
E 5
I 5
right (and left) margin edges are left ragged.
.It Fl filled
Display a filled (formatted) block.
The block of text is formatted (the edges are filled \-
D 10
not left ragged).
E 10
I 10
not left unjustified).
E 10
.It Fl literal
Display a literal block, useful for source code or
simple tabbed or spaced text.
.It Fl file Ar file_name
The file name following the
.Fl file
D 10
flag is read and displayed. Literal mode is
E 10
I 10
flag is read and displayed.
Literal mode is
E 10
asserted and tabs are set at 8 constant width character
intervals, however any
.Xr troff/ Ns Nm \-mdoc
commands in file will be processed.
.It Fl offset Ar string
If
.Fl offset
is specified with one of the following strings, the string
is interpreted to indicate the level of indentation for the
forthcoming block of text:
.Pp
D 10
.Bl -tag -width "indent" -compact
E 10
I 10
.Bl -tag -width "indent-two" -compact
E 10
.It Ar left
E 5
Align block on the current left margin,
this is the default mode of
D 5
.Li \&.Ds
if called without arguments.
.Dp Li C
E 5
I 5
.Ql \&.Bd .
.It Ar center
E 5
D 10
Supposedly center the block. At this time
E 10
I 10
Supposedly center the block.
At this time
E 10
unfortunately, the block merely gets
left aligned about an imaginary center margin.
D 5
This will be fixed some time inthe near future.
.Dp Li I
Indent from left margin default amount (usually
about a three quarters of an inch or eight
constant width characters).
.Dp Li R
This left aligns the block about two inches from
the right side of the page. It too, alas, needs
work.
.Dp
.Tp Li \&.De
Ends a
.Li \&.Ds
request.
.Tp Li \&.Df
Display a filled (formatted) block.  Identical to
.Li \&.Ds ,
except the block of text is formatted (the edges are
not left ragged).  Takes the same modifers as
.Li Ds .
.Tp
.Ss Tagged paragraphs and Columns
The commands
.Li \&.Tp
and
.Li \&.Dp
create tagged paragraph
lists.
Like the
.Li \&.Cx
request,
both require a begin and end.  When
.Li \&.Tp
or
.Li \&.Dp
are called with arguments, they collect and
create the tag portion from
the arguments.
Anything after the tag is placed in
the paragraph portion.
The
.Li \&.Dp
macro is essentially the same as
the \&.Tp
macro, but with a few added features.
These are discussed following the
.Li \&.Tp
example.
.Li \&.Tp
and
.Li \&.Dp
can call several macros,
these are:
E 5
I 5
.It Ar indent
D 10
Indents by one default indent value or tab. The default
E 10
I 10
Indents by one default indent value or tab.
The default
E 10
indent value is also used for the
.Ql \&.D1
D 10
display so one can be garanteed of the two types of displays
lining up. This indent is nornally set to 6n or about two
E 10
I 10
display so one is guaranteed the two types of displays
will line up.
This indent is normally set to 6n or about two
E 10
thirds of an inch (six constant width characters).
.It Ar indent-two
Indents two times the default indent value.
.It Ar right
This
.Em left
aligns the block about two inches from
D 10
the right side of the page. This macro also needs
work and perhaps may never be right in
E 10
I 10
the right side of the page.
This macro needs
work and perhaps may never do the right thing by
E 10
.Xr troff .
.El
.El
.It ".Ed"
End-display.
.El
.Ss Tagged Lists and Columns
There are several types of lists which may be initiated with the
.Ql ".Bl"
D 10
begin-list macro.  Items within the list
E 10
I 10
begin-list macro.
Items within the list
E 10
are specified with the
.Ql ".It"
item macro and
each list must end with the
.Ql ".El"
D 10
macro. Lists may be nested within themselves and within displays.
E 10
I 10
macro.
Lists may be nested within themselves and within displays.
E 10
Columns may be used inside of lists, but lists are unproven
inside of columns.
E 5
.Pp
D 5
.Dl \&.Ad, \&.Ar, \&.Cm, \&.Em, \&.Er, \&.Ev, \&.Fl, \&.Fn, \&.Ic,
.Dl \&.Li, \&.Nm, \&.Sy, \&.Va and \&.Xr.
E 5
I 5
In addition, several list attributes may be specified such as
D 11
the width of a tag, the list offset, and compactness specified
E 11
I 11
the width of a tag, the list offset, and compactness
E 11
(blank lines between items allowed or disallowed).
I 10
Most of this document has been formatted with a tag style list
.Pq Fl tag .
For a change of pace, the list-type used to present the list-types
is an over-hanging list
.Pq Fl ohang .
This type of list is quite popular with
.Tn TeX
D 11
users, but looks a bit funny after having read many pages of
E 11
I 11
users, but might look a bit funny after having read many pages of
E 11
tagged lists.
E 10
The following list types are accepted by
D 10
.Ql ".Bl":
E 10
I 10
.Ql ".Bl" :
E 10
E 5
.Pp
D 5
The
.Li \&.Tp
request can be nested, and values for determining
the width of each tag are based on which macro
.Li \&.Tp
is calling, if it is calling one, or by specifying
a width with the
.Li \&.Tw
request.
The default width for an unknown tag type is set to just
about one and three quarter inches, or 20 characters in a
constant width font.
If the default width is unsatisfactory,
.Li \&.Tw
can be used as follows:
.Dp Li \&.Tw Fl
sets the width to the default flag width
.Li \&.Fl ,
which is
set to ten constant width characters or about five sixth of
an inch.
.Dp Li \&.Tw 24n
sets the width to 24 constant width characters or about two
inches.  The
.Li n
is absolutely necessary for the scaling to work correctly.
.Dp Li \&.Tw ENAMETOOLONG
sets the width to the constant width length of the
string given.
.Dp Li \&.Tw  int\e\ mkfifo
again, the width is set to the constant width of the string
given, and the space is protected with a preceding
.Li \e .
.Dp
E 5
I 5
.Bl -ohang -compact
.It Fl bullet
.It Fl item
.It Fl enum
D 10
These three are the simplest types of lists. Once the
E 10
I 10
These three are the simplest types of lists.
Once the
E 10
.Ql ".Bl"
macro has been given, items in the list are merely
indicated by a line consisting solely of the
.Ql ".It"
D 10
macro. For example, the source text for a simple enumerated list
E 10
I 10
macro.
For example, the source text for a simple enumerated list
E 10
would look like:
.Bd -literal -offset indent-two
\&.Bl -enum -compact
\&.It
\&Item one goes here.
\&.It
\&And item two here.
\&.It
\&Lastly item three goes here.
\&.El
.Ed
E 5
.Pp
D 5
A nesting
.Li \&.Tp
Example:
E 5
I 5
The results:
E 5
.Pp
D 5
.Tp Nm Name1
This is the first call to
.Li \&.Tp
with
.Li \&.Nm .
.Tp Nm Name2
Another call with
.Li \&.Nm .
.Tp Va Variable1
An example of the
.Li \&.Va
request with
.Li \&.Tp .
Since the first argument was callable
and different from the last one, the
tag was indented.
.Tp Va Variable2
Another
.Li \&.Va
example.
.Tp Fl Flag1
A third nest (indent) using the
.Li \&.Fl
request.
.Tp Fl Flag2
Again the
.Li \&.Fl
.Tp
E 5
I 5
.Bl -enum -offset indent-two -compact
.It
Item one goes here.
.It
And item two here.
.It
Lastly item three goes here.
.El
E 5
.Pp
D 5
A
.Li \&.Tp
with no arguments stops the current nest
and exdents back to the previous level.
.Tp Va Variable3
Another call with the
.Li \&.Va
request.
.Tp
E 5
I 5
A simple bullet list construction:
.Bd -literal -offset indent-two
\&.Bl -bullet -compact
\&.It
\&Bullet one goes here.
\&.It
\&Bullet two here.
\&.El
.Ed
E 5
.Pp
D 5
Again a
.Li \&.Tp
without arguments exdents.  This will put
us back at the first level.
.Tp Nm Name3
Another
.Li \&.Nm
request. This request is followed
by the last call to
.Li \&.Tp
without arguments.
.Tp
E 5
I 5
Produces:
.Bl -bullet -offset indent-two -compact
.It
Bullet one goes here.
.It
Bullet two here.
.El
E 5
.Pp
D 5
The above was created from:
E 5
I 5
.It Fl tag
.It Fl diag
.It Fl hang
.It Fl ohang
.It Fl inset
These list-types collect arguments specified with the
.Ql \&.It
macro and create a label which may be
.Em inset
D 15
into the forth coming text,
E 15
I 15
into the forthcoming text,
E 15
.Em hanged
D 10
(exdented) from the forth coming text,
E 10
I 10
D 15
from the forth coming text,
E 15
I 15
from the forthcoming text,
E 15
E 10
.Em overhanged
D 10
set above the forth coming paragraph or
.Em tagged
(exdented and offset). This
E 10
I 10
D 11
hung above and not offset from the forth coming paragraph or
E 11
I 11
from above and not indented or
E 11
.Em tagged .
This
E 10
list was constructed with the
.Ql Fl ohang
D 10
list-type.  The
E 10
I 10
list-type.
The
E 10
.Ql \&.It
D 11
macro may call any callable macros for the inset, hang
and tag list-types, but will not call macros for the
diag type.
E 11
I 11
macro is parsed only for the inset, hang
and tag list-types and is not callable.
E 11
Here is an example of inset labels:
.Bl -inset -offset indent
.It Em Tag
The tagged list (also called a tagged paragraph) is the
most common type of list used in the Berkeley manuals.
.It Em Diag
Diag lists create section four diagnostic lists
and are similar to inset lists except callable
macros are ignored.
.It Em Hang
Hanged labels are a matter of taste.
.It Em Ohang
D 15
Over hanging labels are nice when space is constrained.
E 15
I 15
Overhanging labels are nice when space is constrained.
E 15
.It Em Inset
Inset labels are useful for controlling blocks of
paragraphs and are valuable for converting
.Nm \-mdoc
manuals to other formats.
.El
E 5
.Pp
D 5
.Ds I
\&.Tp Nm Name1
This is the first call to
\&.Li \&.Tp
with
\&.Li \&.Nm .
\&.Tp Nm Name2
Another call with
\&.Li \&.Nm .
\&.Tp Va Variable1
An example of the
\&.Li \&.Va
request with
\&.Li \&.Tp .
Since the first argument was callable and different from
the last one, the tag was indented.
\&.Tp Va Variable2
Another
\&.Li \&.Va
example.
\&.Tp Fl Flag1
A third nest (indent) using the
\&.Li \&.Fl
request.
\&.Tp Fl Flag2
Again the
\&.Li \&.Fl
\&.Tp
A
\&.Li \&.Tp
with no arguments stops the current nest
and exdents back to the previous level.
\&.Tp Va Variable3
Another call with the
\&.Li \&.Va
request.
\&.Tp
Again a
\&.Li \&.Tp
without argments exdents.
This will put us back at the first level.
\&.Tp Nm Name3
Another
\&.Li \&.Nm
request. This request is followed by the last call to
\&.Li \&.Tp
without arguments.
\&.Tp
.De
E 5
I 5
Here is the source text which produced the above example:
.Bd -literal -offset indent
\&.Bl -inset -offset indent
\&.It Em Tag
\&The tagged list (also called a tagged paragraph) is the
\&most common type of list used in the Berkeley manuals.
\&.It Em Diag
\&Diag lists create section four diagnostic lists
\&and are similar to inset lists except callable
\&macros are ignored.
\&.It Em Hang
\&Hanged labels are a matter of taste.
\&.It Em Ohang
D 15
\&Over hanging labels are nice when space is constrained.
E 15
I 15
\&Overhanging labels are nice when space is constrained.
E 15
\&.It Em Inset
\&Inset labels are useful for controlling blocks of
\&paragraphs and are valuable for converting
\&.Nm \-mdoc
\&manuals to other formats.
\&.El
.Ed
E 5
.Pp
D 5
An example of
.Li \&.Dp:
E 5
I 5
Here is a hanged list with just one item:
.Bl -hang -offset indent
.It Em Hanged
labels appear similar to tagged lists when the
label is smaller than the label width.
.It Em Longer hanged list labels
blend in to the paragraph unlike
tagged paragraph labels.
.El
E 5
.Pp
D 5
.Dw PAGEIN\ 10
.Dp SL 10
E 5
I 5
D 10
And the unfomatted text which created it:
E 10
I 10
And the unformatted text which created it:
E 10
.Bd -literal -offset indent
\&.Bl -hang -offset indent
\&.It Em Hanged
\&labels appear similar to tagged lists when the
\&label is smaller than the label width.
\&.It Em Longer hanged list labels
\&blend in to the paragraph unlike
\&tagged paragraph labels.
\&.El
.Ed
.Pp
D 10
The tagged list which follows uses an optional width specifier to controll
E 10
I 10
The tagged list which follows uses an optional width specifier to control
E 10
the width of the tag.
.Pp
D 11
.Bl -tag -width "PAGEIN 10" -compact -offset indent
.It SL 10
E 11
I 11
.Bl -tag -width "PAGEIN" -compact -offset indent
.It SL
E 11
E 5
sleep time of the process (seconds blocked)
D 5
.Dp PAGEIN 10
number of disk i/o's resulting from references by the process
to pages not loaded in core.
.Dp UID 10
E 5
I 5
D 11
.It PAGEIN 10
D 10
number of disk i/o's resulting from references
E 10
I 10
number of disk I/O's resulting from references
E 11
I 11
.It PAGEIN
number of disk
.Tn I/O Ns 's
resulting from references
E 11
E 10
by the process to pages not loaded in core.
D 11
.It UID 10
E 11
I 11
.It UID
E 11
E 5
numerical user-id of process owner
D 5
.Dp PPID 10
numerical id of parent of process
process priority (non-positive when in non-interruptible wait)
.Dp
E 5
I 5
D 11
.It PPID 10
E 11
I 11
.It PPID
E 11
numerical id of parent of process process priority
(non-positive when in non-interruptible wait)
.El
E 5
.Pp
The raw text:
I 5
.Bd -literal -offset indent
D 11
\&.Bl -tag -width "PAGEIN 10" -compact -offset indent
\&.It SL 10
E 11
I 11
\&.Bl -tag -width "PAGEIN" -compact -offset indent
\&.It SL
E 11
\&sleep time of the process (seconds blocked)
D 11
\&.It PAGEIN 10
D 10
\&number of disk i/o's resulting from references
E 10
I 10
\&number of disk I/O's resulting from references
E 11
I 11
\&.It PAGEIN
\&number of disk
\&.Tn I/O Ns 's
\&resulting from references
E 11
E 10
\&by the process to pages not loaded in core.
D 11
\&.It UID 10
E 11
I 11
\&.It UID
E 11
\&numerical user-id of process owner
D 11
\&.It PPID 10
E 11
I 11
\&.It PPID
E 11
\&numerical id of parent of process process priority
\&(non-positive when in non-interruptible wait)
\&.El
.Ed
E 5
.Pp
D 5
.Ds I
.Li \&.Dw PAGEIN\ 10
.Li \&.Dp SL 10
sleep time of the process (seconds blocked)
.Li \&.Dp PAGEIN 10
number of disk i/o's resulting from references by the process
to pages not loaded in core.
.Li \&.Dp UID 10
numerical user-id of process owner
.Li \&.Dp PPID 10
numerical id of parent of process
process priority (non-positive when in non-interruptible wait)
.Li \&.Dp
.De
E 5
I 5
Acceptable width specifiers:
.Bl -tag -width Ar -offset indent
.It Fl width Ar "\&Fl"
D 10
sets the width to the default width for a flag. All callable
macros have a default width value. The
E 10
I 10
sets the width to the default width for a flag.
All callable
macros have a default width value.
The
E 10
.Ql \&.Fl ,
value is presently
set to ten constant width characters or about five sixth of
an inch.
.It Fl width Ar "24n"
sets the width to 24 constant width characters or about two
D 10
inches.  The
E 10
I 10
inches.
The
E 10
.Ql n
is absolutely necessary for the scaling to work correctly.
.It Fl width Ar "ENAMETOOLONG"
sets width to the constant width length of the
string given.
.It Fl width  Ar "\\*qint mkfifo\\*q"
again, the width is set to the constant width of the string
given.
.El
E 5
.Pp
D 5
The default behaviour of
.Li \&.Dp
is to indent a small amount from the current margin before
processing the tag.  This margin can be changed with the
request
.Li \&.Di
which takes as its first argument either a numerical
argument (e.g. a scaled number like 24n) or a letter
.Li \&L
E 5
I 5
If a width is not specified for the tag list type, the first
time
.Ql \&.It
is invoked, an attempt is made to determine an appropriate
D 10
width.  If the first argument to
E 10
I 10
width.
If the first argument to
E 10
.Ql ".It"
is a callable macro, the default width for that macro will be used
D 10
as if the macro name had been supplied as the width.  However,
E 10
I 10
as if the macro name had been supplied as the width.
However,
E 10
if another item in the list is given with a different callable
D 10
macro name, a new and nested list is assumed. Here is an involved
example of a self nesting list:
E 10
I 10
macro name, a new and nested list is assumed.
.Sh PREDEFINED STRINGS
The following strings are predefined as may be used by
preceding with the troff string interpreting sequence
.Ql \&\e*(xx
where
.Em xx
is the name of the defined string or as
.Ql \&\e*x
where
.Em x
is the name of the string.
The interpreting sequence may be used any where in the text.
.Pp
.Bl -column "String " "Nroff " "Troff " -offset indent
.It Sy "String	Nroff	Troff"
.It Li "<=" Ta \&<\&= Ta \*(<=
.It Li ">=" Ta \&>\&= Ta \*(>=
.It Li "Rq" Ta "''" Ta \*(Rq
.It Li "Lq" Ta "``" Ta \*(Lq
.It Li "ua" Ta ^ Ta \*(ua
.It Li "aa" Ta ' Ta \*(aa
.It Li "ga" Ta \` Ta \*(ga
.\" .It Li "sL" Ta ` Ta \*(sL
.\" .It Li "sR" Ta ' Ta \*(sR
.It Li "q" Ta \&" Ta \*q
.It Li "Pi" Ta pi Ta \*(Pi
.It Li "Ne" Ta != Ta \*(Ne
.It Li "Le" Ta <= Ta \*(Le
.It Li "Ge" Ta >= Ta \*(Ge
.It Li "Lt" Ta < Ta \*(Gt
.It Li "Gt" Ta > Ta \*(Lt
.It Li "Pm" Ta +- Ta \*(Pm
.It Li "If" Ta infinity Ta \*(If
.It Li "Na" Ta \fINaN\fP Ta \*(Na
.It Li "Ba" Ta \fR\&|\fP Ta \*(Ba
.El
.Pp
.Sy Note :
The string named
.Ql q
should be written as
D 11
\e*q since it is only one char.
E 11
I 11
.Ql \e*q
since it is only one char.
E 11
E 10
.Sh DIAGNOSTICS
The debugging facilities for
.Nm \-mdoc
are limited, but can help detect subtle errors such
as the collision of an argument name with an internal
D 10
register or macro name. (A what?)
E 10
I 10
register or macro name.
(A what?)
E 10
A register is an arithmetic storage class for
.Xr troff
with a one or two character name.
All registers internal to
.Nm \-mdoc
for
.Xr troff
and
.Xr ditroff
are two characters and
D 10
of the form <uppercase><lowercase> such as
E 10
I 10
of the form <upper_case><lower_case> such as
E 10
.Ql \&Ar ,
D 10
<lowercase><uppercase> as
E 10
I 10
<lower_case><upper_case> as
E 10
.Ql \&aR
E 5
or
D 5
.Li \&I .
The
.Li \&L
forces a left margin, which is useful if something doesn't
quite fit (as in the example for the
.Li \&.Fn
macro in the TEXT MACRO section above).
The
.Li \&I
is the default, but may be used for a return to the default
if necessary.  Like all the tagged widths, the indents
are pushed on a stack, and when that stack (or level)
is expired, the previous values are used (this happens
whenever a
.Li \&.Dp
or
.Li \&.Tp
is called without arguments).
In this example,
.Li \&.Dw
has been used to set the width of the tag.
It is identical to the request
.Li \&.Tw
discussed above.
.Ss Columns
The column request is made up of a width request,
.Li \&.Cw ,
and a column line request,
.Li \&.Cl .
From one to four simple columns can be created
and all but the last column, are simple
single entry style columns.
The last (rightmost) column can overflow into
a indented paragraph.
E 5
I 5
<upper or lower letter><digit> as
.Ql \&C\&1 .
And adding to the muddle,
.Xr troff
has its own internal registers all of which are either
D 10
two lowercase characters or a dot plus a letter or meta-character
E 10
I 10
two lower case characters or a dot plus a letter or meta-character
E 10
character.
In one of the introduction examples, it was shown how to
prevent the interpretation of a macro name with the escape sequence
.Ql \e& .
This is sufficient for the internal register names also.
E 5
.Pp
D 5
The
.Li \&.Cw
request takes at most three arguments
as width indicators.  The number of columns is
always one more than given to
.Li \&.Cw .
the
.Li \&.Cl
request should have its arguments
on the next line and the columns should be
separated by a tab character.
E 5
I 5
.\" Every callable macro name has a corresponding register
D 10
.\" of the same name (<Uppercase><lowercase>).
E 10
I 10
.\" of the same name (<upper_case><lower_case>).
E 10
.\" There are also specific registers which have
.\" been used for stacks and arrays and are listed in the
.\" .Sx Appendix .
.\" .Bd -ragged -offset 4n
.\" [A-Z][a-z]	registers corresponding to macro names (example ``Ar'')
.\" [a-z][A-Z]	registers corresponding to macro names (example ``aR'')
.\" C[0-9]		argument types (example C1)
.\" O[0-9]		offset stack (displays)
.\" h[0-9]		horizontal spacing stack (lists)
.\" o[0-9]		offset (stack) (lists)
.\" t[0-9]		tag stack (lists)
.\" v[0-9]		vertical spacing stack (lists)
.\" w[0-9]		width tag/label stack
.\" .Ed
.\" .Pp
If a non-escaped register name is given in the argument list of a request
D 10
unpredictable behaviour will occur. In general, anytime huge portions
E 10
I 10
unpredictable behavior will occur.
In general, any time huge portions
E 10
of text do not appear where expected in the output, or small strings
such as list tags disappear, chances are there is a misunderstanding
about an argument type in the argument list.
Your mother never intended for you to remember this evil stuff - so here
is a way to find out whether or not your arguments are valid: The
.Ql \&.Db
(debug)
macro displays the interpretation of the argument list for most
D 10
macros.  Macros such as the
E 10
I 10
macros.
Macros such as the
E 10
.Ql \&.Pp
(paragraph)
D 10
macro do not contain debugging information. All of the callable macros do,
E 10
I 10
macro do not contain debugging information.
All of the callable macros do,
E 10
and it is strongly advised whenever in doubt,
turn on the
.Ql \&.Db
macro.
E 5
.Pp
D 5
An example of two columns:
.Cw Macros
.Cl Macros	Description
.Cl \&.Tp	List Request
.Cl \&.Nm	Name Request
.Cw
E 5
I 5
.Dl Usage: \&.Db [on | off]
E 5
.Pp
D 5
The requests used to format the
columns above (the jagged edges are from tabs which can
also be represented by
.Li \et ) :
E 5
I 5
An example of a portion of text with
the debug macro placed above and below an
artificially created problem (a flag argument
.Ql \&aC
which should be
.Ql \e&aC
in order to work):
.Bd -literal -offset indent
\&.Db on
\&.Op Fl aC Ar file )
\&.Db off
.Ed
E 5
.Pp
D 5
.Dl \&.Cw Macros
.Dl \&.Cl Macros	Description
.Dl \&.Cl \e&.Tp	 List Request
.Dl \&.Cl \e&.Nm	 Name Request
.Dl \&.Cw
E 5
I 5
The resulting output:
.Bd -literal -offset indent
DEBUGGING ON
DEBUG(argv) MACRO: `.Op'  Line #: 2
	Argc: 1  Argv: `Fl'  Length: 2
	Space: `'  Class: Executable
	Argc: 2  Argv: `aC'  Length: 2
	Space: `'  Class: Executable
	Argc: 3  Argv: `Ar'  Length: 2
	Space: `'  Class: Executable
	Argc: 4  Argv: `file'  Length: 4
	Space: ` '  Class: String
	Argc: 5  Argv: `)'  Length: 1
	Space: ` '  Class: Closing Punctuation or suffix
	MACRO REQUEST: .Op Fl aC Ar file )
DEBUGGING OFF
.Ed
E 5
.Pp
D 5
There some problems with columns at the moment, while they
work well in nested lists, they are otherwise difficult
to offset via example.
.Ss Options
The
.Li \&.Op
request ain't quite working perfectly.
The (eventual) goal of
.Li \&.Op
is to place brackets around the given arguments, and place any
punctuation outside the brackets.  In the case of
.Li \&.Cx,
trailing punctuation on the same request line as the
.Li \&.Op
should be placed outside the brackets.
The multiple macro calls are one of the reasons this request is so moody.
Is is the only macro which attempts to call other macros on the
request line. Its not doing too badly, just not perfect:
.Dw \&.Op\ Fl\ c\ Ar\ objfil\ Op\ Ar\ corfil\ ,
.Dp Li \&.Op
.Op
.Dp Li \&.Op Fl k
.Op Fl k
.Dp Li \&.Op Fl k\ )\ .
.Op Fl k ) .
.Dp Li \&.Op Fl k Ar kookfile
.Op Fl k Ar kookfile
.Dp Li \&.Op Fl k Ar kookfile\ ,
.Op Fl k Ar kookfile ,
.Dp Li \&.Op Ar objfil Op Ar corfil
.Op Ar objfil Op Ar corfil
.Dp Li \&.Op Fl c Ar objfil Op Ar corfil\ ,
.Op Fl c Ar objfil Op Ar corfil ,
.Dp Li \&.Op word1 word2
.Op word1 word2
.Dp
E 5
I 5
The first line of information tells the name of the calling
macro, here
.Ql \&.Op ,
D 10
and the line number it appears on. If one or more files are involved
E 10
I 10
and the line number it appears on.
If one or more files are involved
E 10
(especially if text from another file is included) the line number
D 10
may be bogus.  If there is only one file, it should be accurate.
E 10
I 10
may be bogus.
If there is only one file, it should be accurate.
E 10
The second line gives the argument count, the argument
.Pq Ql \&Fl
D 10
and its length. If the length of an argument is two characters, the
E 10
I 10
and its length.
If the length of an argument is two characters, the
E 10
argument is tested to see if it is executable (unfortunately, any
register which contains a non-zero value appears executable).
The third line gives the space allotted for a class, and the
D 10
class type. The problem here is the argument aC should not be
executable. The four types of classes are string, executable, closing
punctuation and opening punctuation.  The last line shows the entire
argument list as it was read. In this next example, the offending
E 10
I 10
class type.
The problem here is the argument aC should not be
executable.
The four types of classes are string, executable, closing
punctuation and opening punctuation.
The last line shows the entire
argument list as it was read.
In this next example, the offending
E 10
.Ql \&aC
is escaped:
.Bd -literal -offset indent
\&.Db on
\&.Em An escaped \e&aC
\&.Db off
.Ed
.Bd -literal -offset indent
I 16
.ne 1i
E 16
DEBUGGING ON
DEBUG(fargv) MACRO: `.Em'  Line #: 2
	Argc: 1  Argv: `An'  Length: 2
	Space: ` '  Class: String
	Argc: 2  Argv: `escaped'  Length: 7
	Space: ` '  Class: String
	Argc: 3  Argv: `aC'  Length: 2
	Space: ` '  Class: String
	MACRO REQUEST: .Em An escaped &aC
DEBUGGING OFF
.Ed
E 5
.Pp
D 5
The punctuation on the second to last example is
improperly placed and should be fixed some day.
E 5
I 5
The argument
.Ql \e&aC
shows up with the same length of 2 as the
.Ql \e&
sequence produces a zero width, but a register
named
.Ql \e&aC
was not found and the type classified as string.
.Pp
Other diagnostics consist of usage statements and are self explanatory.
I 11
.Sh GROFF, TROFF AND NROFF
The
.Nm \-mdoc
package does not need compatibility mode with
.Xr groff .
.Pp
The package inhibits page breaks, and the headers and footers
which normally occur at those breaks with
.Xr nroff ,
to make the manual more efficient for viewing on-line.
At the moment,
.Xr groff
with
.Fl T Ns Ar ascii
does eject the imaginary remainder of the page at end of file.
The inhibiting of the page breaks makes
.Xr nroff Ns 'd
files unsuitable for hardcopy.
There is a register named
.Ql \&cR
which can be set to zero in the site dependent style file
.Pa /usr/src/share/tmac/doc-nroff
to restore the old style behavior.
E 11
E 5
.Sh FILES
D 5
.\" .Pa /usr/share/tmac/tmac.doc.style site specific layout
.Dw /usr/share/man0/template.doc
.Di L
.Dp Pa /usr/share/tmac/tmac.doc
E 5
I 5
.Bl -tag -width /usr/share/man0/template.doc -compact
.It Pa /usr/share/tmac/tmac.doc
E 5
manual macro package
D 5
.Dp Pa /usr/share/man0/template.doc
E 5
I 5
.It Pa /usr/share/man0/template.doc
E 5
template for writing a man page
D 5
.Dp
E 5
I 5
.El
E 5
D 13
.Sh HISTORY
D 10
4.4 BSD
E 10
I 10
The
.Nm mdoc.samples
tutorial is
.Ud .
E 13
E 10
.Sh SEE ALSO
D 5
.Xr mdoc.samples 7 ,
E 5
I 5
.Xr mdoc 7 ,
E 5
.Xr man 1 ,
.Xr troff 1
.Sh BUGS
D 5
.Pp
Punctuation may be broken on
.Li \&.Op
again.
.Pp
E 5
Undesirable hyphenation on the dash of a flag
argument is not yet resolved, and causes
D 10
occasional mishaps in the DESCRIPTION section.
E 10
I 10
occasional mishaps in the
.Sx DESCRIPTION
section.
E 10
I 5
(line break on the hyphen).
E 5
.Pp
Predefined strings are not declared in documentation.
.Pp
Section 3f has not been added to the header routines.
.Pp
D 5
.Li \&.Nm
E 5
I 5
.Ql \&.Nm
E 5
D 10
font should be changed in NAME section.
E 10
I 10
font should be changed in
.Sx NAME
section.
E 10
.Pp
D 5
.Li \&.Fn
E 5
I 5
.Ql \&.Fn
E 5
needs to have a check to prevent splitting up
D 10
if the line length is too short. Right now it
E 10
I 10
if the line length is too short.
D 11
Right now it
E 11
I 11
Occasionally it
E 11
E 10
separates the last parenthesis, and sometimes
looks ridiculous if a line is in fill mode.
.Pp
The method used to prevent header and footer page
breaks (other than the initial header and footer) when using
D 11
nroff seems to be putting out a partially filled line
at the bottom of the page leaving an unsightly blank space.
E 11
I 11
nroff occasionally places an unsightly partially filled line (blank)
at the would be bottom of the page.
E 11
.Pp
D 5
The tagged paragraph, display and column requests to not do any keeps
E 5
I 5
The list and display macros to not do any keeps
E 5
and certainly should be able to.
I 10
.\" Note what happens if the parameter list overlaps a newline
.\" boundary.
.\" to make sure a line boundary is crossed:
.\" .Bd -literal
.\" \&.Fn struct\e\ dictionarytable\e\ *dictionarylookup struct\e\ dictionarytable\e\ *tab[]
.\" .Ed
.\" .Pp
.\" produces, nudge nudge,
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] ,
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] ,
.\" nudge
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] .
.\" .Pp
.\" If double quotes are used, for example:
.\" .Bd -literal
.\" \&.Fn \*qstruct dictionarytable *dictionarylookup\*q \*qchar *h\*q \*qstruct dictionarytable *tab[]\*q
.\" .Ed
.\" .Pp
.\" produces, nudge nudge,
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" ,
.\" nudge
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" ,
.\" nudge
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" .
.\" .Pp
.\" Not a pretty sight...
.\" In a paragraph, a long parameter containing unpaddable spaces as
.\" in the former example will cause
.\" .Xr troff
.\" to break the line and spread
.\" the remaining words out.
.\" The latter example will adjust nicely to
.\" justified margins, but may break in between an argument and its
.\" declaration.
.\" In
.\" .Xr nroff
.\" the right margin adjustment is normally ragged and the problem is
.\" not as severe.
E 10
D 5
.Pp
Occasionally there maybe a problem with mathematical
or logical interpretation of characters from the
set
{+,\-,/,*,%,<,>,<=,>=,=,==,&}
found as the second
character in an argument string which may be checked for punctuation.
This is a relatively rare occurrence, as a lot of checking is
done to prevent it,
but if it should happen
escape the characters
with
.Li \e& .
E 5
E 1
