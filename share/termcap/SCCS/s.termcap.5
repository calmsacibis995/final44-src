h26740
s 00002/00002/01816
d D 8.3 94/04/16 08:38:01 bostic 16 15
c roff bug in termcap man page
c From: "Chris G. Demetriou" <cgd@postgres.Berkeley.EDU>
e
s 00001/00002/01817
d D 8.2 93/12/11 23:16:36 mckusick 15 14
c copyediting for Usenix manuals
e
s 00002/00002/01817
d D 8.1 93/06/08 11:31:37 bostic 14 13
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00005/00009/01814
d D 6.11 93/03/06 10:30:10 bostic 13 12
c delete reference to two-character names
e
s 00005/00001/01818
d D 6.10 92/09/02 18:18:50 elan 12 11
c Added cap_mkdb and termcap.db notes.
e
s 00985/00854/00834
d D 6.9 91/05/10 14:17:15 cael 11 10
c mdoc version three
e
s 00001/00011/01687
d D 6.8 90/06/23 18:00:56 trent 10 9
c new copyright notice
e
s 00015/00004/01683
d D 6.7 89/11/15 08:37:01 bostic 9 8
c Berkeley copyright notice
e
s 00002/00007/01685
d D 6.6 89/03/02 11:19:17 jak 8 7
c ACT IV example obsoleted by change to termcap entry
e
s 00017/00008/01675
d D 6.5 87/09/30 17:22:33 jak 7 6
c added TERMPATH stuff and references to termcap(3X)
e
s 00007/00002/01676
d D 6.4 86/05/15 13:30:00 bloom 6 5
c comment about window size
e
s 01465/00390/00213
d D 6.3 85/11/01 11:56:04 bloom 5 4
c rewrite by Doug Gwyn (gwyn@brl.mil)
e
s 00002/00002/00601
d D 6.2 85/05/23 13:34:25 bloom 4 3
c ho and ll should be specified if there is a faster method than cm
e
s 00002/00001/00601
d D 6.1 85/05/15 18:50:28 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00006/00006/00596
d D 5.1 85/05/15 18:49:24 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00602/00000/00000
d D 4.1 85/05/15 18:48:53 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 9
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 9
I 9
D 11
.\" Copyright (c) 1985 The Regents of the University of California.
E 11
I 11
D 14
.\" Copyright (c) 1985, 1991 The Regents of the University of California.
E 11
.\" All rights reserved.
E 14
I 14
D 16
.\" Copyright (c) 1985, 1991, 1993
E 16
I 16
.\" Copyright (c) 1985, 1991, 1993, 1994
E 16
.\"	The Regents of the University of California.  All rights reserved.
E 14
E 9
.\"
I 9
D 10
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 10
I 10
.\" %sccs.include.redist.man%
E 10
.\"
E 9
D 11
.\"	%W% (Berkeley) %G%
E 11
I 11
.\"     %W% (Berkeley) %G%
E 11
.\"
I 5
D 11
.ie n \{\
.	ds lq \&"\"
.	ds rq \&"\"
.\}
.el \{\
.	ds rq ''
.	ds lq ``
.\}
E 5
.tr ||
D 2
.TH TERMCAP 5 5/10/80
E 2
I 2
D 3
.TH TERMCAP 5 "10 May 1980"
E 3
I 3
D 5
.TH TERMCAP 5 "%Q%"
E 3
E 2
.UC 3
E 5
I 5
.tr *\(**
.hw trans-parently
D 9
.TH TERMCAP 5 "1 November 1985"
E 9
I 9
.TH TERMCAP 5 "%Q%"
E 9
.UC
E 5
.SH NAME
termcap \- terminal capability data base
.SH SYNOPSIS
/etc/termcap
.SH DESCRIPTION
D 5
.I Termcap
E 5
I 5
.I Termcap\^
E 11
I 11
.Dd %Q%
.Dt TERMCAP 5
.Os BSD 3
.Sh NAME
.Nm termcap
.Nd terminal capability data base
.Sh SYNOPSIS
.Nm termcap
.Sh DESCRIPTION
The
.Nm Termcap
file
E 11
E 5
is a data base describing terminals,
used,
D 11
.IR e.g. ,
E 11
I 11
for example,
E 11
by
D 5
.IR vi (1)
E 5
I 5
D 11
.IR vi\^ (1)
E 11
I 11
.Xr \&vi 1
E 11
E 5
and
D 2
.IR curses (3).
E 2
I 2
D 5
.IR curses (3X).
E 5
I 5
D 11
.IR curses\^ (3X).
E 11
I 11
.Xr curses 3 .
E 11
E 5
E 2
Terminals are described in
D 5
.I termcap
by giving a set of capabilities which they have, and by describing
E 5
I 5
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
by giving a set of capabilities that they have and by describing
E 5
how operations are performed.
Padding requirements and initialization sequences
are included in
D 5
.I termcap.
E 5
I 5
D 11
.IR termcap\^ .
E 5
.PP
E 11
I 11
.Nm termcap .
.Pp
E 11
Entries in
D 5
.I termcap
consist of a number of `:' separated fields.
The first entry for each terminal gives the names which are known for the
terminal, separated by `|' characters.  The first name is always 2 characters
long and is used by older version 6 systems which store the terminal type
in a 16 bit word in a systemwide data base.
The second name given is the most common abbreviation for the terminal, and the
last name given should be a long name fully identifying the terminal.
The second name should contain no blanks; the last name may well contain
blanks for readability.
E 5
I 5
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
consist of a number of `:'-separated fields.
The first entry for each terminal gives the names that are known for the
terminal, separated by `|' characters.
D 13
The first name is always two characters
long and is used by older systems which store the terminal type
in a 16-bit word in a system-wide data base.
The second name given is the most common abbreviation for the terminal,
the last name given should be a long name fully identifying the terminal,
E 13
I 13
The first name given is the most common abbreviation for the terminal.
The last name given should be a long name fully identifying the terminal,
E 13
and all others are understood as synonyms for the terminal name.
D 13
All names but the first and last
should be in lower case and contain no blanks;
the last name may well contain
upper case and blanks for readability.
E 13
I 13
All names but the last should be in lower case and contain no blanks;
the last name may well contain upper case characters and blanks for
readability.
E 13
D 11
.PP
E 11
I 11
.Pp
E 11
Terminal names (except for the last, verbose entry)
should be chosen using the following conventions.
The particular piece of hardware making up the terminal
D 11
should have a root name chosen, thus \*(lqhp2621\*(rq.
E 11
I 11
should have a root name chosen, thus
.Dq hp2621
E 11
This name should not contain hyphens.
Modes that the hardware can be in
or user preferences
should be indicated by appending a hyphen and an indicator of the mode.
D 11
Therefore, a \*(lqvt100\*(rq in 132-column mode would be \*(lqvt100-w\*(rq.
E 11
I 11
Therefore, a
.Dq vt100
in 132-column mode would be
.Dq vt100-w .
E 11
The following suffixes should be used where possible:
D 11
.sp
.ev
.ta
.ta \w'\fBSuffix\fP\ \ \ 'u +\w'With automatic margins (usually default)\ \ 'u
.nf
.if t \{\
.nr Xx \n(.lu-\n(.i-\w'\fBSuffix\fP\ \ \ With automatic margins (usually default)\ \ vt100-am'u
.in +\n(Xxu/2u
.\}
\fBSuffix	Meaning	Example\fP
E 11
I 11
.Pp
.Bd -filled -offset indent
.Bl -column indent "With automatic margins (usually default)xx"
.Sy Suffix	Meaning	Example
E 11
-w	Wide mode (more than 80 columns)	vt100-w
-am	With automatic margins (usually default)	vt100-am
-nam	Without automatic margins	vt100-nam
D 11
-\fIn\fP	Number of lines on the screen	aaa-60
E 11
I 11
D 16
.Pf \- Ar n Ta No "Number of lines on the screen	aaa-60"
E 16
I 16
.Pf \- Ar n Ta No "Number of lines on screen	aaa-60"
E 16
E 11
-na	No arrow keys (leave them in local)	concept100-na
D 11
-\fIn\^\fPp	Number of pages of memory	concept100-4p
E 11
I 11
.Pf \- Ar \&np Ta No "Number of pages of memory	concept100-4p"
E 11
-rv	Reverse video	concept100-rv
D 11
.fi
.ev
E 5
.SH CAPABILITIES
I 5
.PP
E 11
I 11
.El
.Ed
.Sh CAPABILITIES
E 11
The characters in the
D 11
.I Notes
E 11
I 11
D 15
The
E 15
.Em Notes
function
E 11
field in the table have the following meanings
(more than one may apply to a capability):
D 11
.PP
.ev
.ta
.ta \w'N\ \ \ 'u
E 5
.nf
E 11
I 11
.Pp
.Bd -unfilled -offset indent
E 11
D 5
(P) indicates padding may be specified
(P*) indicates that padding may be based on no. lines affected

.ta \w'k0-k9  'u +\w'Type  'u +\w'Pad?  'u
\fBName	Type	Pad?	Description\fR
E 5
I 5
N	indicates numeric parameter(s)
P	indicates that padding may be specified
*	indicates that padding may be based on the number of lines affected
o	indicates capability is obsolete
D 11
.fi
.ev
.PP
\*(lqObsolete\*(rq capabilities have no
.I terminfo\^
E 11
I 11
.Ed
.Pp
.Dq Obsolete
capabilities have no
.Em terminfo
E 11
equivalents,
since they were considered useless,
or are subsumed by other capabilities.
New software should not rely on them at all.
D 11
.PP
.nf
.ta \w'\fBName  \fP'u +\w'\fBType  \fP'u +\w'\fBNotes  \fP'u
\fBName	Type	Notes	Description\fP
E 5
ae	str	(P)	End alternate character set
I 5
AL	str	(NP*)	Add \fIn\^\fP new blank lines
E 5
al	str	(P*)	Add new blank line
am	bool		Terminal has automatic margins
as	str	(P)	Start alternate character set
D 5
bc	str		Backspace if not \fB^H\fR
I 3
bl	str		Bell if not \fB^G\fR
E 3
bs	bool		Terminal can backspace with \fB^H\fR
E 5
I 5
bc	str	(o)	Backspace if not \fB^H\fP
bl	str	(P)	Audible signal (bell)
bs	bool	(o)	Terminal can backspace with \fB^H\fP
E 5
bt	str	(P)	Back tab
D 5
bw	bool		Backspace wraps from column 0 to last column
CC	str		Command character in prototype if terminal settable
E 5
I 5
bw	bool		\fBle\fP (backspace) wraps from column 0 to last column
CC	str		Terminal settable command character in prototype
E 5
cd	str	(P*)	Clear to end of display
ce	str	(P)	Clear to end of line
D 5
ch	str	(P)	Like cm but horizontal motion only, line stays same
cl	str	(P*)	Clear screen
cm	str	(P)	Cursor motion
E 5
I 5
ch	str	(NP)	Set cursor column (horizontal position)
cl	str	(P*)	Clear screen and home cursor
CM	str	(NP)	Memory-relative cursor addressing
cm	str	(NP)	Screen-relative cursor motion
E 5
D 6
co	num		Number of columns in a line
E 6
I 6
co	num		Number of columns in a line (See BUGS section below)
E 6
D 5
cr	str	(P*)	Carriage return, (default \fB^M\fR)
cs	str	(P)	Change scrolling region (vt100), like cm
cv	str	(P)	Like ch but vertical only.
da	bool		Display may be retained above
dB	num		Number of millisec of bs delay needed
db	bool		Display may be retained below
dC	num		Number of millisec of cr delay needed
E 5
I 5
cr	str	(P)	Carriage return
cs	str	(NP)	Change scrolling region (VT100)
ct	str	(P)	Clear all tab stops
cv	str	(NP)	Set cursor row (vertical position)
da	bool		Display may be retained above the screen
dB	num	(o)	Milliseconds of \fBbs\fP delay needed (default 0)
db	bool		Display may be retained below the screen
DC	str	(NP*)	Delete \fIn\^\fP characters
dC	num	(o)	Milliseconds of \fBcr\fP delay needed (default 0)
E 5
dc	str	(P*)	Delete character
D 5
dF	num		Number of millisec of ff delay needed
E 5
I 5
dF	num	(o)	Milliseconds of \fBff\fP delay needed (default 0)
DL	str	(NP*)	Delete \fIn\^\fP lines
E 5
dl	str	(P*)	Delete line
D 5
dm	str		Delete mode (enter)
dN	num		Number of millisec of nl delay needed
E 5
I 5
dm	str		Enter delete mode
dN	num	(o)	Milliseconds of \fBnl\fP delay needed (default 0)
DO	str	(NP*)	Move cursor down \fIn\^\fP lines
E 5
do	str		Down one line
D 5
dT	num		Number of millisec of tab delay needed
E 5
I 5
ds	str		Disable status line
dT	num	(o)	Milliseconds of horizontal tab delay needed (default 0)
dV	num	(o)	Milliseconds of vertical tab delay needed (default 0)
ec	str	(NP)	Erase \fIn\^\fP characters
E 5
ed	str		End delete mode
D 5
ei	str		End insert mode; give \*(lq:ei=:\*(rq if \fBic\fR
eo	str		Can erase overstrikes with a blank
ff	str	(P*)	Hardcopy terminal page eject (default \fB^L\fR)
E 5
I 5
ei	str		End insert mode
eo	bool		Can erase overstrikes with a blank
EP	bool	(o)	Even parity
es	bool		Escape can be used on the status line
ff	str	(P*)	Hardcopy terminal page eject
fs	str		Return from status line
gn	bool		Generic line type (\fIe.g.\fP dialup, switch)
E 5
hc	bool		Hardcopy terminal
I 5
HD	bool	(o)	Half-duplex
E 5
hd	str		Half-line down (forward 1/2 linefeed)
D 4
ho	str		Home cursor (if no \fBcm\fR)
E 4
I 4
D 5
ho	str		Home cursor
E 5
I 5
ho	str	(P)	Home cursor
hs	bool		Has extra \*(lqstatus line\*(rq
E 5
E 4
hu	str		Half-line up (reverse 1/2 linefeed)
D 5
hz	str		Hazeltine; can't print ~'s
ic	str	(P)	Insert character
if	str		Name of file containing \fBis\fR
im	bool		Insert mode (enter); give \*(lq:im=:\*(rq if \fBic\fR
in	bool		Insert mode distinguishes nulls on display
E 5
I 5
hz	bool		Cannot print ~s (Hazeltine)
i1-i3	str		Terminal initialization strings (\fIterminfo\^\fP only)
IC	str	(NP*)	Insert \fIn\^\fP blank characters
ic	str	(P*)	Insert character
if	str		Name of file containing initialization string
im	str		Enter insert mode
in	bool		Insert mode distinguishes nulls
iP	str		Pathname of program for initialization (\fIterminfo\^\fP only)
E 5
ip	str	(P*)	Insert pad after character inserted
D 5
is	str		Terminal initialization string
k0-k9	str		Sent by \*(lqother\*(rq function keys 0-9
E 5
I 5
is	str		Terminal initialization string (\fItermcap\^\fP only)
it	num		Tabs initially every \fIn\^\fP positions
K1	str		Sent by keypad upper left
K2	str		Sent by keypad upper right
K3	str		Sent by keypad center
K4	str		Sent by keypad lower left
K5	str		Sent by keypad lower right
k0-k9	str		Sent by function keys 0-9
kA	str		Sent by insert-line key
ka	str		Sent by clear-all-tabs key
E 5
kb	str		Sent by backspace key
D 5
kd	str		Sent by terminal down arrow key
E 5
I 5
kC	str		Sent by clear-screen or erase key
kD	str		Sent by delete-character key
kd	str		Sent by down-arrow key
kE	str		Sent by clear-to-end-of-line key
E 5
ke	str		Out of \*(lqkeypad transmit\*(rq mode
I 5
kF	str		Sent by scroll-forward/down key
kH	str		Sent by home-down key
E 5
kh	str		Sent by home key
D 5
kl	str		Sent by terminal left arrow key
kn	num		Number of \*(lqother\*(rq keys
ko	str		Termcap entries for other non-function keys
kr	str		Sent by terminal right arrow key
E 5
I 5
kI	str		Sent by insert-character or enter-insert-mode key
kL	str		Sent by delete-line key
kl	str		Sent by left-arrow key
kM	str		Sent by insert key while in insert mode
km	bool		Has a \*(lqmeta\*(rq key (shift, sets parity bit)
kN	str		Sent by next-page key
kn	num	(o)	Number of function (\fBk0\fP\-\fBk9\fP) keys (default 0)
ko	str	(o)	Termcap entries for other non-function keys
kP	str		Sent by previous-page key
kR	str		Sent by scroll-backward/up key
kr	str		Sent by right-arrow key
kS	str		Sent by clear-to-end-of-screen key
E 5
ks	str		Put terminal in \*(lqkeypad transmit\*(rq mode
D 5
ku	str		Sent by terminal up arrow key
l0-l9	str		Labels on \*(lqother\*(rq function keys
E 5
I 5
kT	str		Sent by set-tab key
kt	str		Sent by clear-tab key
ku	str		Sent by up-arrow key
l0-l9	str		Labels on function keys if not \*(lqf\fIn\^\fP\*(rq
LC	bool	(o)	Lower-case only
LE	str	(NP)	Move cursor left \fIn\^\fP positions
le	str	(P)	Move cursor left one position
E 5
D 6
li	num		Number of lines on screen or page
E 6
I 6
li	num		Number of lines on screen or page (See BUGS section below)
E 6
D 4
ll	str		Last line, first column (if no \fBcm\fR)
E 4
I 4
ll	str		Last line, first column
E 4
D 5
ma	str		Arrow key map, used by vi version 2 only
E 5
I 5
lm	num		Lines of memory if > \fBli\fP (0 means varies)
ma	str	(o)	Arrow key map (used by \fIvi\^\fP version 2 only)
mb	str		Turn on blinking attribute
md	str		Turn on bold (extra bright) attribute
me	str		Turn off all attributes
mh	str		Turn on half-bright attribute
E 5
mi	bool		Safe to move while in insert mode
D 5
ml	str		Memory lock on above cursor.
ms	bool		Safe to move while in standout and underline mode
mu	str		Memory unlock (turn off memory lock).
nc	bool		No correctly working carriage return (DM2500,H2000)
E 5
I 5
mk	str		Turn on blank attribute (characters invisible)
ml	str	(o)	Memory lock on above cursor
mm	str		Turn on \*(lqmeta mode\*(rq (8th bit)
mo	str		Turn off \*(lqmeta mode\*(rq
mp	str		Turn on protected attribute
mr	str		Turn on reverse-video attibute
ms	bool		Safe to move in standout modes
mu	str	(o)	Memory unlock (turn off memory lock)
nc	bool	(o)	No correctly-working \fBcr\fP (Datamedia 2500, Hazeltine 2000)
E 5
nd	str		Non-destructive space (cursor right)
D 5
nl	str	(P*)	Newline character (default \fB\en\fR)
ns	bool		Terminal is a \s-2CRT\s+2 but doesn't scroll.
E 5
I 5
NL	bool	(o)	\fB\\n\fP is newline, not line feed
nl	str	(o)	Newline character if not \fB\\n\fP
ns	bool	(o)	Terminal is a \s-1CRT\s0 but doesn't scroll
nw	str	(P)	Newline (behaves like \fBcr\fP followed by \fBdo\fP)
OP	bool	(o)	Odd parity
E 5
os	bool		Terminal overstrikes
D 5
pc	str		Pad character (rather than null)
pt	bool		Has hardware tabs (may need to be set with \fBis\fR)
se	str		End stand out mode
sf	str	(P)	Scroll forwards
sg	num		Number of blank chars left by so or se
so	str		Begin stand out mode
sr	str	(P)	Scroll reverse (backwards)
ta	str	(P)	Tab (other than \fB^I\fR or with padding)
tc	str		Entry of similar terminal - must be last
te	str		String to end programs that use \fBcm\fP
ti	str		String to begin programs that use \fBcm\fR
uc	str		Underscore one char and move past it
E 5
I 5
pb	num		Lowest baud where delays are required
pc	str		Pad character (default \s-2NUL\s0)
pf	str		Turn off the printer
pk	str		Program function key \fIn\^\fP to type string \fIs\fP (\fIterminfo\^\fP only)
pl	str		Program function key \fIn\^\fP to execute string \fIs\fP (\fIterminfo\^\fP only)
pO	str	(N)	Turn on the printer for \fIn\^\fP bytes
po	str		Turn on the printer
ps	str		Print contents of the screen
pt	bool	(o)	Has hardware tabs (may need to be set with \fBis\fP)
px	str		Program function key \fIn\^\fP to transmit string \fIs\fP (\fIterminfo\^\fP only)
r1-r3	str		Reset terminal completely to sane modes (\fIterminfo\^\fP only)
rc	str	(P)	Restore cursor to position of last \fBsc\fP
rf	str		Name of file containing reset codes
RI	str	(NP)	Move cursor right \fIn\^\fP positions
rp	str	(NP*)	Repeat character \fIc n\^\fP times
rs	str		Reset terminal completely to sane modes (\fItermcap\^\fP only)
sa	str	(NP)	Define the video attributes
sc	str	(P)	Save cursor position
se	str		End standout mode
SF	str	(NP*)	Scroll forward \fIn\^\fP lines
sf	str	(P)	Scroll text up
sg	num		Number of garbage chars left by \fBso\fP or \fBse\fP (default 0)
so	str		Begin standout mode
SR	str	(NP*)	Scroll backward \fIn\^\fP lines
sr	str	(P)	Scroll text down
st	str		Set a tab in all rows, current column
ta	str	(P)	Tab to next 8-position hardware tab stop
tc	str		Entry of similar terminal \- must be last
te	str		String to end programs that use \fItermcap\fP
ti	str		String to begin programs that use \fItermcap\fP
ts	str	(N)	Go to status line, column \fIn\^\fP
UC	bool	(o)	Upper-case only
uc	str		Underscore one character and move past it
E 5
ue	str		End underscore mode
D 5
ug	num		Number of blank chars left by us or ue
ul	bool		Terminal underlines even though it doesn't overstrike
E 5
I 5
ug	num		Number of garbage chars left by \fBus\fP or \fBue\fP (default 0)
ul	bool		Underline character overstrikes
UP	str	(NP*)	Move cursor up \fIn\^\fP lines
E 5
up	str		Upline (cursor up)
us	str		Start underscore mode
D 5
vb	str		Visible bell (may not move cursor)
ve	str		Sequence to end open/visual mode
vs	str		Sequence to start open/visual mode
xb	bool		Beehive (f1=escape, f2=ctrl C)
xn	bool		A newline is ignored after a wrap (Concept)
xr	bool		Return acts like \fBce\fP \er \en (Delta Data)
xs	bool		Standout not erased by writing over it (HP 264?)
xt	bool		Tabs are destructive, magic so char (Teleray 1061)
E 5
I 5
vb	str		Visible bell (must not move cursor)
ve	str		Make cursor appear normal (undo \fBvs\fP/\fBvi\fP)
vi	str		Make cursor invisible
vs	str		Make cursor very visible
vt	num		Virtual terminal number (not supported on all systems)
wi	str	(N)	Set current window
ws	num		Number of columns in status line
xb	bool		Beehive (f1=\s-2ESC\s0, f2=^C)
xn	bool		Newline ignored after 80 cols (Concept)
xo	bool		Terminal uses xoff/xon (\s-2DC3\s0/\s-2DC1\s0) handshaking
xr	bool	(o)	Return acts like \fBce cr nl\fP (Delta Data)
xs	bool		Standout not erased by overwriting (Hewlett-Packard)
xt	bool		Tabs ruin, magic \fBso\fP char (Teleray 1061)
xx	bool	(o)	Tektronix 4025 insert-line
E 5
.fi
I 5
.ta 8n +8n
E 5
.PP
.B A Sample Entry
.PP
E 11
I 11
.Pp
.Bl -column indent indent indent
.Sy Name	Type	Notes	Description
functions
.It "ae	str	(P)	End alternate character set."
.It AL	str	(NP*)	Add"
.Em n
new blank lines
.It "al	str	(P*)	Add new blank line."
.It "am	bool		Terminal has automatic margins."
.It "as	str	(P)	Start alternate character set."
.It "bc	str	(o)	Backspace if not."
.Sy \&^H .
.It "bl	str	(P)	Audible signal (bell)."
.It "bs	bool	(o)	Terminal can backspace with"
.Sy \&^H .
.It "bt	str	(P)	Back tab."
.It "bw	bool	" Ta Sy \&le
(backspace) wraps from column 0 to last column.
.It "CC	str		Terminal settable command character in prototype."
.It "cd	str	(P*)	Clear to end of display."
.It "ce	str	(P)	Clear to end of line."
.It "ch	str	(NP)	Set cursor column (horizontal position)."
.It "cl	str	(P*)	Clear screen and home cursor."
.It "CM	str	(NP)	Memory-relative cursor addressing."
.It "cm	str	(NP)	Screen-relative cursor motion."
.It "co	num		Number of columns in a line (See"
.Sx BUGS
section below).
.It "cr	str	(P)	Carriage return."
.It "cs	str	(NP)	Change scrolling region (VT100)."
.It "ct	str	(P)	Clear all tab stops."
.It "cv	str	(NP)	Set cursor row (vertical position)."
.It "da	bool		Display may be retained above the screen."
.It "dB	num	(o)	Milliseconds of"
.Sy \&bs
delay needed (default 0).
.It "db	bool		Display may be retained below the screen."
.It "DC	str	(NP*)	Delete"
.Em n
characters.
.It "dC	num	(o)	Milliseconds of"
.Sy \&cr
delay needed (default 0).
.It "dc	str	(P*)	Delete character."
.It "dF	num	(o)	Milliseconds of"
.Sy \&ff
delay needed (default 0).
.It "DL	str	(NP*)	Delete"
.Ar n
lines.
.It "dl	str	(P*)	Delete line."
.It "dm	str		Enter delete mode."
.It "dN	num	(o)	Milliseconds of
.Sy \&nl
delay needed (default 0).
.It "DO	str	(NP*)	Move cursor down:
.Ar n
lines.
.It "do	str		Down one line."
.It "ds	str		Disable status line."
.It "dT	num	(o)	Milliseconds of horizontal tab delay needed (default 0)."
.It "dV	num	(o)	Milliseconds of vertical tab delay needed (default 0)."
.It "ec	str	(NP)	Erase"
.Ar n
characters.
.It "ed	str		End delete mode."
.It "ei	str		End insert mode."
.It "eo	bool		Can erase overstrikes with a blank."
.It "EP	bool	(o)	Even parity."
.It "es	bool		Escape can be used on the status line."
.It "ff	str	(P*)	Hardcopy terminal page eject."
.It "fs	str		Return from status line."
.It "gn	bool		Generic line type, for example dialup, switch)."
.It "hc	bool		Hardcopy terminal."
.It "HD	bool	(o)	Half-duplex."
.It "hd	str		Half-line down (forward 1/2 linefeed)."
.It "ho	str	(P)	Home cursor."
.It "hs	bool		Has extra"
.Dq status line .
.It "hu	str		Half-line up (reverse 1/2 linefeed)."
.It "hz	bool		Cannot print ``~'' (Hazeltine)."
.It "i1-i3	str		Terminal initialization strings"
.Pf ( Xr terminfo
only)
.It "IC	str	(NP*)	Insert"
.Ar n
blank characters.
.It "ic	str	(P*)	Insert character."
.It "if	str		Name of file containing initialization string."
.It "im	str		Enter insert mode."
.It "in	bool		Insert mode distinguishes nulls."
.It "iP	str		Pathname of program for initialization"
.Pf ( Xr terminfo
only).
.It "ip	str	(P*)	Insert pad after character inserted."
.It "is	str		Terminal initialization string"
.Pf ( Nm termcap
only).
.It "it	num		Tabs initially every"
.Ar n
positions.
.It "K1	str		Sent by keypad upper left."
.It "K2	str		Sent by keypad upper right."
.It "K3	str		Sent by keypad center."
.It "K4	str		Sent by keypad lower left."
.It "K5	str		Sent by keypad lower right."
.It "k0-k9	str		Sent by function keys 0-9."
.It "kA	str		Sent by insert-line key."
.It "ka	str		Sent by clear-all-tabs key."
.It "kb	str		Sent by backspace key."
.It "kC	str		Sent by clear-screen or erase key."
.It "kD	str		Sent by delete-character key."
.It "kd	str		Sent by down-arrow key."
.It "kE	str		Sent by clear-to-end-of-line key."
.It "ke	str		Out of"
.Dq keypad transmit
mode.
.It "kF	str		Sent by scroll-forward/down key."
.It "kH	str		Sent by home-down key."
.It "kh	str		Sent by home key."
.It "kI	str		Sent by insert-character or enter-insert-mode key."
.It "kL	str		Sent by delete-line key."
.It "kl	str		Sent by left-arrow key."
.It "kM	str		Sent by insert key while in insert mode."
.It "km	bool		Has a"
.Dq meta
key (shift, sets parity bit).
.It "kN	str		Sent by next-page key."
.It "kn	num	(o)	Number of function"
.Pq Sy \&k\&0 Ns \- Sy \&k\&9
keys (default 0).
.It "ko	str	(o)	Termcap entries for other non-function keys."
.It "kP	str		Sent by previous-page key."
.It "kR	str		Sent by scroll-backward/up key."
.It "kr	str		Sent by right-arrow key."
.It "kS	str		Sent by clear-to-end-of-screen key."
.It "ks	str		Put terminal in"
.Dq keypad transmit
mode.
.It "kT	str		Sent by set-tab key."
.It "kt	str		Sent by clear-tab key."
.It "ku	str		Sent by up-arrow key."
.It "l0-l9	str		Labels on function keys if not"
.Dq \&f Ns Em n .
.It "LC	bool	(o)	Lower-case only."
.It "LE	str	(NP)	Move cursor left"
.Ar n
positions.
.It "le	str	(P)	Move cursor left one position."
.It "li	num		Number of lines on screen or page (See"
.Sx BUGS
section below)
.It "ll	str		Last line, first column
.It "lm	num		Lines of memory if >" Sy \&li
(0 means varies).
.It "ma	str	(o)	Arrow key map (used by"
.Xr \&vi
version 2 only).
.It "mb	str		Turn on blinking attribute."
.It "md	str		Turn on bold (extra bright) attribute."
.It "me	str		Turn off all attributes."
.It "mh	str		Turn on half-bright attribute."
.It "mi	bool		Safe to move while in insert mode."
.It "mk	str		Turn on blank attribute (characters invisible)."
.It "ml	str	(o)	Memory lock on above cursor."
.It "mm	str		Turn on"
.Dq meta mode
(8th bit).
.It "mo	str		Turn off"
.Dq meta mode .
.It "mp	str		Turn on protected attribute."
D 15
.It "mr	str		Turn on reverse-video attibute."
E 15
I 15
.It "mr	str		Turn on reverse-video attribute."
E 15
.It "ms	bool		Safe to move in standout modes."
.It "mu	str	(o)	Memory unlock (turn off memory lock)."
.It "nc	bool	(o)	No correctly-working"
.Sy \&cr
(Datamedia 2500, Hazeltine 2000).
.It "nd	str		Non-destructive space (cursor right)."
.It "NL	bool	(o)" Ta Sy \&\en No "is newline, not line feed."
.It "nl	str	(o)	Newline character if not" Sy \en .
.It "ns	bool	(o)	Terminal is a" Tn CRT No "but doesn't scroll."
.It "nw	str	(P)	Newline (behaves like"
.Sy \&cr
followed by
.Sy \&do ).
.It "OP	bool	(o)	Odd parity."
.It "os	bool		Terminal overstrikes."
.It "pb	num		Lowest baud where delays are required."
.It "pc	str		Pad character (default" Tn NUL ).
.It "pf	str		Turn off the printer."
.It "pk	str		Program function key"
.Em n
to type string
.Em s
.Pf ( Xr terminfo
only).
.It "pl	str		Program function key"
.Em n
to execute string
.Em s
.Pf ( Xr terminfo
only).
.It "pO	str	(N)	Turn on the printer for"
.Em n
bytes.
.It "po	str		Turn on the printer."
.It "ps	str		Print contents of the screen."
.It "pt	bool	(o)	Has hardware tabs (may need to be set with"
.Sy \&is ).
.It "px	str		Program function key"
.Em n
to transmit string
.Em s
.Pf ( Xr terminfo
only).
.It "r1-r3	str		Reset terminal completely to sane modes"
.Pf ( Xr terminfo
only).
.It "rc	str	(P)	Restore cursor to position of last"
.Sy \&sc .
.It "rf	str		Name of file containing reset codes."
.It "RI	str	(NP)	Move cursor right"
.Em n
positions.
.It "rp	str	(NP*)	Repeat character"
.Em c n
times.
.It "rs	str		Reset terminal completely to sane modes"
.Pf ( Nm termcap
only).
.It "sa	str	(NP)	Define the video attributes."
.It "sc	str	(P)	Save cursor position."
.It "se	str		End standout mode."
.It "SF	str	(NP*)	Scroll forward"
.Em n
lines.
.It "sf	str	(P)	Scroll text up."
.It "sg	num		Number of garbage chars left by"
.Sy \&so
or
.Sy \&se
(default 0).
.It "so	str		Begin standout mode."
.It "SR	str	(NP*)	Scroll backward"
.Em n
lines.
.It "sr	str	(P)	Scroll text down."
.It "st	str		Set a tab in all rows, current column."
.It "ta	str	(P)	Tab to next 8-position hardware tab stop."
.It "tc	str		Entry of similar terminal \- must be last."
.It "te	str		String to end programs that use"
.Nm termcap .
.It "ti	str		String to begin programs that use"
.Nm termcap .
.It "ts	str	(N)	Go to status line, column"
.Em n .
.It "UC	bool	(o)	Upper-case only."
.It "uc	str		Underscore one character and move past it."
.It "ue	str		End underscore mode."
.It "ug	num		Number of garbage chars left by"
.Sy \&us
or
.Sy \&ue
(default 0).
.It "ul	bool		Underline character overstrikes."
.It "UP	str	(NP*)	Move cursor up"
.Em n
lines.
.It "up	str		Upline (cursor up)."
.It "us	str		Start underscore mode."
.It "vb	str		Visible bell (must not move cursor)."
.It "ve	str		Make cursor appear normal (undo"
.Sy \&vs Ns / Sy \&vi ) .
.It "vi	str		Make cursor invisible."
.It "vs	str		Make cursor very visible."
.It "vt	num		Virtual terminal number (not supported on all systems)."
.It "wi	str	(N)	Set current window."
.It "ws	num		Number of columns in status line."
.It "xb	bool		Beehive"
.Pf ( "f1=" Dv ESC ,
.Pf "f2=" Sy \&^C ) .
.It "xn	bool		Newline ignored after 80 cols (Concept)."
.It "xo	bool		Terminal uses xoff/xon"
.Pq Dv DC3 Ns / Ns Dv DC1
handshaking.
.It "xr	bool	(o)	Return acts like"
.Sy "ce cr nl"
(Delta Data).
.It "xs	bool		Standout not erased by overwriting (Hewlett-Packard)."
.It "xt	bool		Tabs ruin, magic"
.SY \&so
char (Teleray 1061).
.It "xx	bool	(o)	Tektronix 4025 insert-line."
.El
.Ss A Sample Entry
E 11
The following entry, which describes the Concept\-100, is among the more
complex entries in the
D 5
.I termcap
E 5
I 5
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
E 5
file as of this writing.
D 5
(This particular concept entry is outdated,
and is used as an example only.)
E 5
D 11
.PP
.nf
E 11
I 11
.Pp
.Bd -literal
E 11
D 5
c1\||\|c100\||\|concept100:is=\eEU\eEf\eE7\eE5\eE8\eEl\eENH\eEK\eE\e200\eEo&\e200:\e
        :al=3*\eE^R:am:bs:cd=16*\eE^C:ce=16\eE^S:cl=2*^L:cm=\eEa%+ %+ :co#80:\e
        :dc=16\eE^A:dl=3*\eE^B:ei=\eE\e200:eo:im=\eE^P:in:ip=16*:li#24:mi:nd=\eE=:\e
        :se=\eEd\eEe:so=\eED\eEE:ta=8\et:ul:up=\eE;:vb=\eEk\eEK:xn:
E 5
I 5
ca\||\|concept100\||\|c100\||\|concept\||\|c104\||\|concept100-4p\||\|HDS Concept\-100:\e
	:al=3*\eE^R:am:bl=^G:cd=16*\eE^C:ce=16\eE^U:cl=2*^L:cm=\eEa%+ %+ :\e
	:co#80:.cr=9^M:db:dc=16\eE^A:dl=3*\eE^B:do=^J:ei=\eE\e200:eo:im=\eE^P:in:\e
	:ip=16*:is=\eEU\eEf\eE7\eE5\eE8\eEl\eENH\eEK\eE\e200\eEo&\e200\eEo\e47\eE:k1=\eE5:\e
	:k2=\eE6:k3=\eE7:kb=^h:kd=\eE<:ke=\eEx:kh=\eE?:kl=\eE>:kr=\eE=:ks=\eEX:\e
	:ku=\eE;:le=^H:li#24:mb=\eEC:me=\eEN\e200:mh=\eEE:mi:mk=\eEH:mp=\eEI:\e
	:mr=\eED:nd=\eE=:pb#9600:rp=0.2*\eEr%.%+ :se=\eEd\eEe:sf=^J:so=\eEE\eED:\e
	:.ta=8\et:te=\eEv    \e200\e200\e200\e200\e200\e200\eEp\er\en:\e
	:ti=\eEU\eEv  8p\eEp\er:ue=\eEg:ul:up=\eE;:us=\eEG:\e
	:vb=\eEk\e200\e200\e200\e200\e200\e200\e200\e200\e200\e200\e200\e200\e200\e200\eEK:\e
	:ve=\eEw:vs=\eEW:vt#8:xn:\e
	:bs:cr=^M:dC#9:dT#8:nl=^J:ta=^I:pt:
E 5
D 11
.fi
.PP
E 11
I 11
.Ed
.Pp
E 11
Entries may continue onto multiple lines by giving a \e as the last
D 5
character of a line, and that empty fields
E 5
I 5
character of a line, and empty fields
E 5
may be included for readability (here between the last field on a line
and the first field on the next).
D 5
Capabilities in
.I termcap
are of three types:
Boolean capabilities which indicate that the terminal has
some particular feature, numeric capabilities giving the size of the terminal
or the size of particular delays, and string
capabilities, which give a sequence which can be used to perform particular
terminal operations.
E 5
I 5
D 11
Comments may be included on lines beginning with \*(lq#\*(rq.
.br
.ne 5
E 5
.PP
.B Types of Capabilities
.PP
E 11
I 11
Comments may be included on lines beginning with
.Dq # .
.Ss Types of Capabilities
E 11
D 5
All capabilities have two letter codes.  For instance, the fact that
the Concept has \*(lqautomatic margins\*(rq (i.e. an automatic return and linefeed
when the end of a line is reached) is indicated by the capability \fBam\fR.
Hence the description of the Concept includes \fBam\fR.
Numeric capabilities are followed by the character `#' and then the value.
Thus \fBco\fR which indicates the number of columns the terminal has
E 5
I 5
Capabilities in
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
are of three types: Boolean capabilities,
which indicate particular features that the terminal has;
numeric capabilities,
giving the size of the display or the size of other attributes;
and string capabilities,
which give character sequences that can be used to perform particular
terminal operations.
All capabilities have two-letter codes.
For instance, the fact that
the Concept has
D 11
.I automatic margins
.RI ( i.e. ,
an automatic return and linefeed
E 11
I 11
.Em automatic margins
(an automatic return and linefeed
E 11
when the end of a line is reached) is indicated by the Boolean capability
D 11
.BR am .
E 11
I 11
.Sy \&am .
E 11
Hence the description of the Concept includes
D 11
.BR am .
.PP
E 11
I 11
.Sy \&am .
.Pp
E 11
Numeric capabilities are followed by the character `#' then the value.
In the example above
D 11
.BR co ,
E 11
I 11
.Sy \&co ,
E 11
which indicates the number of columns the display has,
E 5
gives the value `80' for the Concept.
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
Finally, string valued capabilities, such as \fBce\fR (clear to end of line
sequence) are given by the two character code, an `=', and then a string
ending at the next following `:'.  A delay in milliseconds may appear after
the `=' in such a capability, and padding characters are supplied by the
editor after the remainder of the string is sent to provide this delay.
The delay can be either a integer, e.g. `20', or an integer followed by
an `*', i.e. `3*'.  A `*' indicates that the padding required is proportional
E 5
I 5
Finally, string-valued capabilities, such as
D 11
.B ce
E 11
I 11
.Sy \&ce
E 11
(clear-to-end-of-line
sequence) are given by the two-letter code, an `=', then a string
ending at the next following `:'.
A delay in milliseconds may appear after
the `=' in such a capability,
which causes padding characters to be supplied by
D 11
.I tputs\^
E 11
I 11
.Xr tputs
E 11
after the remainder of the string is sent to provide this delay.
The delay can be either a number,
D 11
.I e.g.
`20', or a number followed by
E 11
I 11
such as `20', or a number followed by
E 11
an `*',
D 11
.IR i.e. ,
`3*'.
E 11
I 11
such as `3*'.
E 11
An `*' indicates that the padding required is proportional
E 5
to the number of lines affected by the operation, and the amount given is
D 5
the per-affected-unit padding required.
When a `*' is specified, it is sometimes useful to give a delay of the form
`3.5' specify a delay per unit to tenths of milliseconds.
E 5
I 5
the per-affected-line padding required.
(In the case of insert-character,
the factor is still the number of
D 11
.I lines\^
E 11
I 11
.Em lines
E 11
affected;
this is always 1 unless the terminal has
D 11
.B in
E 11
I 11
.Sy \&in
E 11
and the software uses it.)
When an `*' is specified, it is sometimes useful to give a delay of the form
`3.5' to specify a delay per line to tenths of milliseconds.
(Only one decimal place is allowed.)
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
A number of escape sequences are provided in the string valued capabilities
for easy encoding of characters there.  A \fB\eE\fR maps to an \s-2ESCAPE\s0
character, \fB^x\fR maps to a control-x for any appropriate x, and the sequences
\fB\en \er \et \eb \ef\fR give a newline, return, tab, backspace and formfeed.
Finally, characters may be given as three octal digits after a \fB\e\fR,
and the characters \fB^\fR and \fB\e\fR may be given as \fB\e^\fR and \fB\e\e\fR.
If it is necessary to place a \fB:\fR in a capability it must be escaped in
octal as \fB\e072\fR.
If it is necessary to place a null character in a string capability it
must be encoded as \fB\e200\fR.  The routines which deal with
.I termcap
use C strings, and strip the high bits of the output very late so that
a \fB\e200\fR comes out as a \fB\e000\fR would.
E 5
I 5
A number of escape sequences are provided in the string-valued capabilities
for easy encoding of control characters there.
D 11
.B \eE
maps to an \s-2ESC\s0
E 11
I 11
.Sy \&\eE
maps to an
.Dv ESC
E 11
character,
D 11
.B ^X
E 11
I 11
.Sy \&^X
E 11
maps to a control-X for any appropriate X,
and the sequences
D 11
.B \en
.B \er
.B \et
.B \eb
.B \ef
E 11
I 11
.Sy \&\en
.Sy \&\er
.Sy \&\et
.Sy \&\eb
.Sy \&\ef
E 11
map to linefeed, return, tab, backspace, and formfeed, respectively.
Finally, characters may be given as three octal digits after a
D 11
.BR \e ,
E 11
I 11
.Sy \&\e ,
E 11
and the characters
D 11
.B ^
E 11
I 11
.Sy \&^
E 11
and
D 11
.B \e
E 11
I 11
.Sy \&\e
E 11
may be given as
D 11
.B \e^
E 11
I 11
.Sy \&\e^
E 11
and
D 11
.BR \e\e .
E 11
I 11
.Sy \&\e\e .
E 11
If it is necessary to place a
D 11
.B :
E 11
I 11
.Sy \&:
E 11
in a capability it must be escaped in
octal as
D 11
.BR \e072 .
If it is necessary to place a \s-2NUL\s0
E 11
I 11
.Sy \&\e072 .
If it is necessary to place a
.Dv NUL
E 11
character in a string capability it
must be encoded as
D 11
.BR \e200 .
E 11
I 11
.Sy \&\e200 .
E 11
(The routines that deal with
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
use C strings and strip the high bits of the output very late, so that
a
D 11
.B \e200
E 11
I 11
.Sy \&\e200
E 11
comes out as a
D 11
.B \e000
E 11
I 11
.Sy \&\e000
E 11
would.)
D 11
.PP
E 11
I 11
.Pp
E 11
Sometimes individual capabilities must be commented out.
To do this, put a period before the capability name.
For example, see the first
D 11
.B cr
E 11
I 11
.Sy \&cr
E 11
and
D 11
.B ta
E 11
I 11
.Sy \&ta
E 11
in the example above.
E 5
D 11
.br
.ne 5
.PP
.B Preparing Descriptions
.PP
We now outline how to prepare descriptions of terminals.
E 11
I 11
.Ss Preparing Descriptions
E 11
The most effective way to prepare a terminal description is by imitating
the description of a similar terminal in
D 5
.I termcap
E 5
I 5
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
E 5
and to build up a description gradually, using partial descriptions
with
D 5
.I ex
E 5
I 5
D 11
.I vi\^
E 11
I 11
.Xr \&vi
E 11
E 5
to check that they are correct.
Be aware that a very unusual terminal may expose deficiencies in
the ability of the
D 5
.I termcap
E 5
I 5
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
E 5
file to describe it
or bugs in
D 5
.I ex.
E 5
I 5
D 11
.IR vi\^ .
E 11
I 11
.Xr \&vi .
E 11
E 5
D 7
To easily test a new terminal description you can set the environment variable
D 5
TERMCAP to a pathname of a file containing the description you are working
on and the editor will look there rather than in
.I /etc/termcap.
TERMCAP can also be set to the termcap entry itself
to avoid reading the file when starting up the editor.
(This only works on version 7 systems.)
E 5
I 5
.B
.SM TERMCAP
to the absolute pathname of a file containing the description you are working
on and programs will look there rather than in
E 7
I 7
To easily test a new terminal description you are working on
you can put it in your home directory in a file called
D 11
.I .termcap\^
E 11
I 11
.Pa .termcap
E 11
and programs will look there before looking in
E 7
D 11
.IR /etc/termcap\^ .
E 11
I 11
.Pa /usr/share/misc/termcap .
E 11
I 7
You can also set the environment variable
E 7
D 11
.B
I 7
.SM TERMPATH
E 11
I 11
.Ev TERMPATH
E 11
to a list of absolute file pathnames (separated by spaces or colons),
one of which contains the description you are working on,
and programs will search them in the order listed, and nowhere else.
See
D 11
.IR termcap\^ (3X).
E 11
I 11
.Xr termcap 3 .
E 11
The
D 11
.B
E 7
.SM TERMCAP
E 11
I 11
.Ev TERMCAP
E 11
D 7
can also be set to the
E 7
I 7
environment variable is usually set to the
E 7
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
entry itself
D 7
to avoid reading the file when starting up a program.
E 7
I 7
to avoid reading files when starting up a program.
E 7
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
.B Basic capabilities
E 5
I 5
To get the padding for insert-line right
(if the terminal manufacturer did not document it),
a severe test is to use
D 11
.I vi\^
E 11
I 11
.Xr \&vi
E 11
to edit
D 11
.I /etc/passwd\^
E 11
I 11
.Pa /etc/passwd
E 11
at 9600 baud, delete roughly 16 lines from the middle of the screen,
then hit the `u' key several times quickly.
If the display messes up, more padding is usually needed.
A similar test can be used for insert-character.
D 11
.br
.ne 5
E 5
.PP
D 5
The number of columns on each line for the terminal is given by the
\fBco\fR numeric capability.  If the terminal is a \s-2CRT\s0, then the
number of lines on the screen is given by the \fBli\fR capability.
If the terminal wraps around to the beginning of the next line when
it reaches the right margin, then it should have the \fBam\fR capability.
If the terminal can clear its screen, then this is given by the
\fBcl\fR string capability.  If the terminal can backspace, then it
should have the \fBbs\fR capability, unless a backspace is accomplished
by a character other than \fB^H\fR (ugh) in which case you should give
this character as the \fBbc\fR string capability.  If it overstrikes
(rather than clearing a position when a character is struck over)
then it should have the \fBos\fR capability.
E 5
I 5
.B Basic Capabilities
E 5
.PP
E 11
I 11
.Ss Basic Capabilities
E 11
I 5
The number of columns on each line of the display is given by the
D 11
.B co
E 11
I 11
.Sy \&co
E 11
numeric capability.
D 11
If the display is a \s-1CRT\s0, then the
E 11
I 11
If the display is a
.Tn CRT ,
then the
E 11
number of lines on the screen is given by the
D 11
.B li
E 11
I 11
.Sy \&li
E 11
capability.
If the display wraps around to the beginning of the next line when
the cursor reaches the right margin, then it should have the
D 11
.B am
E 11
I 11
.Sy \&am
E 11
capability.
If the terminal can clear its screen,
the code to do this is given by the
D 11
.B cl
E 11
I 11
.Sy \&cl
E 11
string capability.
If the terminal overstrikes
(rather than clearing the position when a character is overwritten),
it should have the
D 11
.B os
E 11
I 11
.Sy \&os
E 11
capability.
If the terminal is a printing terminal,
with no soft copy unit,
give it both
D 11
.B hc
E 11
I 11
.Sy \&hc
E 11
and
D 11
.BR os .
.RB ( os
E 11
I 11
.Sy \&os .
.Pf ( Sy \&os
E 11
applies to storage scope terminals,
such as the Tektronix 4010 series,
as well as to hard copy and
D 11
.SM APL
E 11
I 11
.Tn APL
E 11
terminals.)
If there is a code to move the cursor to the left edge of the current row,
give this as
D 11
.BR cr .
E 11
I 11
.Sy \&cr .
E 11
(Normally this will be carriage-return,
D 11
.BR ^M .)
E 11
I 11
.Sy \&^M . )
E 11
If there is a code to produce an audible signal (bell, beep,
D 11
.IR etc.\^ ),
E 11
I 11
etc. ) ,
E 11
give this as
D 11
.BR bl .
.PP
E 11
I 11
.Sy \&bl .
.Pp
E 11
If there is a code (such as backspace)
to move the cursor one position to the left,
that capability should be given as
D 11
.BR le .
E 11
I 11
.Sy \&le .
E 11
Similarly,
codes to move to the right, up, and down
should be given as
D 11
.BR nd ,
.BR up ,
E 11
I 11
.Sy \&nd ,
.Sy \&up ,
E 11
and
D 11
.BR do ,
E 11
I 11
.Sy \&do ,
E 11
respectively.
These
D 11
.I local cursor motions\^
E 11
I 11
.Em local cursor motions
E 11
should not alter the text they pass over;
for example, you would not normally use
D 11
\*(lqnd=\ \*(rq
E 11
I 11
.Dq nd=\ \&
E 11
unless the terminal has the
D 11
.B os
E 11
I 11
.Sy \&os
E 11
capability,
because the space would erase the character moved over.
D 11
.PP
E 11
I 11
.Pp
E 11
E 5
A very important point here is that the local cursor motions encoded
in
D 5
.I termcap
are undefined at the left and top edges of a \s-2CRT\s0 terminal.
The editor will never attempt to backspace around the left edge, nor
will it attempt to go up locally off the top.  The editor assumes that
feeding off the bottom of the screen will cause the screen to scroll up,
and the \fBam\fR capability tells whether the cursor sticks at the right
edge of the screen.  If the terminal has switch selectable automatic margins,
E 5
I 5
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
have undefined behavior at the left and top edges of a
D 11
.SM CRT
E 11
I 11
.Tn CRT
E 11
display.
Programs should never attempt to backspace around the left edge,
unless
D 11
.B bw
E 11
I 11
.Sy \&bw
E 11
is given, and never attempt to go up off the top
using local cursor motions.
D 11
.PP
E 11
I 11
.Pp
E 11
In order to scroll text up,
a program goes to the bottom left corner of the screen and sends the
D 11
.B sf
E 11
I 11
.Sy \&sf
E 11
(index) string.
To scroll text down,
a program goes to the top left corner of the screen and sends the
D 11
.B sr
E 11
I 11
.Sy \&sr
E 11
(reverse index) string.
The strings
D 11
.B sf
E 11
I 11
.Sy \&sf
E 11
and
D 11
.B sr
E 11
I 11
.Sy \&sr
E 11
have undefined behavior
when not on their respective corners of the screen.
Parameterized versions of the scrolling sequences are
D 11
.B SF
E 11
I 11
.Sy \&SF
E 11
and
D 11
.BR SR ,
E 11
I 11
.Sy \&SR ,
E 11
which have the same semantics as
D 11
.B sf
E 11
I 11
.Sy \&sf
E 11
and
D 11
.B sr
E 11
I 11
.Sy \&sr
E 11
except that they take one parameter
and scroll that many lines.
They also have undefined behavior
except at the appropriate corner of the screen.
D 11
.PP
E 11
I 11
.Pp
E 11
The
D 11
.B am
E 11
I 11
.Sy \&am
E 11
capability tells whether the cursor sticks at the right
edge of the screen when text is output there,
but this does not necessarily apply to
D 11
.B nd
E 11
I 11
.Sy \&nd
E 11
from the last column.
Leftward local motion is defined from the left edge only when
D 11
.B bw
E 11
I 11
.Sy \&bw
E 11
is given; then an
D 11
.B le
E 11
I 11
.Sy \&le
E 11
from the left edge will move to the right edge of the previous row.
This is useful for drawing a box around the edge of the screen,
for example.
If the terminal has switch-selectable automatic margins,
E 5
the
D 5
.I termcap
file usually assumes that this is on, i.e. \fBam\fR.
E 5
I 5
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
description usually assumes that this feature is on,
D 11
.IR i.e. ,
.BR am .
E 11
I 11
.Em i.e . ,
.Sy \&am .
E 11
If the terminal has a command
that moves to the first column of the next line,
that command can be given as
D 11
.B nw
E 11
I 11
.Sy \&nw
E 11
(newline).
It is permissible for this to clear the remainder of the current line,
D 11
so if the terminal has no correctly-working \s-2CR\s0 and \s-2LF\s0
E 11
I 11
so if the terminal has no correctly-working
.Tn \&CR
and
.Tn \&LF
E 11
it may still be possible to craft a working
D 11
.B nw
E 11
I 11
.Sy \&nw
E 11
out of one or both of them.
E 5
D 11
.PP
These capabilities suffice to describe hardcopy and \*(lqglass-tty\*(rq terminals.
E 11
I 11
.Pp
These capabilities suffice to describe hardcopy and
.Dq glass-tty
terminals.
E 11
D 5
Thus the model 33 teletype is described as
E 5
I 5
Thus the Teletype model 33 is described as
E 5
D 11
.PP
D 5
.DT
	t3\||\|33\||\|tty33:co#72:os
E 5
I 5
.nf
	T3\||\|tty33\||\|33\||\|tty\||\|Teletype model 33:\e
		:bl=^G:co#72:cr=^M:do=^J:hc:os:
.fi
E 5
.PP
D 5
while the Lear Siegler \s-2ADM\-3\s0 is described as
E 5
I 5
and the Lear Siegler \s-1ADM\s0\-3 is described as
E 5
.PP
D 5
.DT
	cl\||\|adm3|3|lsi adm3:am:bs:cl=^Z:li#24:co#80
E 5
I 5
.nf
	l3\||\|adm3\||\|3\||\|LSI \s-1ADM\s0-3:\e
		:am:bl=^G:cl=^Z:co#80:cr=^M:do=^J:le=^H:li#24:sf=^J:
.fi
.br
.ne 5
E 5
.PP
D 5
.B Cursor addressing
E 5
I 5
.B Parameterized Strings
E 5
.PP
E 11
I 11
.Bd -literal -offset indent
T3\||\|tty33\||\|33\||\|tty\||\|Teletype model 33:\e
	:bl=^G:co#72:cr=^M:do=^J:hc:os:
.Ed
.Pp
and the Lear Siegler
.Tn ADM Ns \-3
is described as
.Bd -literal -offset indent
l3\||\|adm3\||\|3\||\|LSI \s-1ADM\s0-3:\e
:am:bl=^G:cl=^Z:co#80:cr=^M:do=^J:le=^H:li#24:sf=^J:
.Ed
.Ss Parameterized Strings
E 11
D 5
Cursor addressing in the terminal is described by a
\fBcm\fR string capability, with 
D 2
.IR printf (3s)
E 2
I 2
.IR printf (3S)
E 2
like escapes \fB%x\fR in it.
These substitute to encodings of the current line or column position,
E 5
I 5
Cursor addressing and other strings requiring parameters
are described by a
D 11
parameterized string capability, with 
.IR printf\^ (3S)-like
E 11
I 11
parameterized string capability, with
.Xr printf 3 Ns \-like
E 11
escapes
D 11
.B %x
E 11
I 11
.Sy \&%x
E 11
in it,
E 5
while other characters are passed through unchanged.
D 5
If the \fBcm\fR string is thought of as being a function, then its
arguments are the line and then the column to which motion is desired,
and the \fB%\fR encodings have the following meanings:
E 5
I 5
For example, to address the cursor the
D 11
.B cm
E 11
I 11
.Sy \&cm
E 11
capability is given, using two parameters: the row and column to move to.
(Rows and columns are numbered from zero and refer to the physical screen
visible to the user, not to any unseen memory.
If the terminal has memory-relative cursor addressing,
that can be indicated by an analogous
D 11
.B CM
E 11
I 11
.Sy \&CM
E 11
capability.)
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
I 5
The
D 11
.B %
E 11
I 11
.Sy \&%
E 11
encodings have the following meanings:
D 11
.PP
E 5
.DT
.nf
D 5
	%d	as in \fIprintf\fR, 0 origin
	%2	like %2d
	%3	like %3d
	%.	like %c
	%+x	adds \fIx\fR to value, then %.
	%>xy	if value > x adds y, no output.
	%r	reverses order of line and column, no output
	%i	increments line/column (for 1 origin)
	%%	gives a single %
	%n	exclusive or row and column with 0140 (DM2500)
	%B	BCD (16*(x/10)) + (x%10), no output.
	%D	Reverse coding (x-2*(x%16)), no output. (Delta Data).
E 5
I 5
	%%	output `%'
	%d	output value as in \fIprintf\^\fP %d
	%2	output value as in \fIprintf\^\fP %2d
	%3	output value as in \fIprintf\^\fP %3d
	%.	output value as in \fIprintf\^\fP %c
	%+\fIx\fP	add \fIx\^\fP to value, then do %.
	%>\fIxy\fP	if value > \fIx\^\fP then add \fIy\^\fP, no output
	%r	reverse order of two parameters, no output
	%i	increment by one, no output
	%n	exclusive-or all parameters with 0140 (Datamedia 2500)
	%B	BCD (16*(value/10)) + (value%10), no output
	%D	Reverse coding (value \- 2*(value%16)), no output (Delta Data)
E 5
.fi
.PP
E 11
I 11
.Bl -column xxxxx
.It "%%	output `%'"
.It "%d	output value as in"
.Xr printf
%d
.It "%2	output value as in"
.Xr printf
%2d
.It "%3	output value as in"
.Xr printf
%3d
.It "%.	output value as in"
.Xr printf
%c
.It "%+" Ns Em x Ta No add
.Em x
to value, then do %.
.It "%>" Ns Em \&xy Ta No if
value >
.Em x
then add
.Em y ,
no output
.It "%r	reverse order of two parameters, no output"
.It "%i	increment by one, no output"
.It "%n	exclusive-or all parameters with 0140 (Datamedia 2500)"
.It "%B" Ta Tn BCD No "(16*(value/10)) + (value%10), no output"
.It "%D	Reverse coding (value \- 2*(value%16)), no output (Delta Data)."
.El
.Pp
E 11
D 5
Consider the HP2645, which, to get to row 3 and column 12, needs
to be sent \eE&a12c03Y padded for 6 milliseconds.  Note that the order
of the rows and columns is inverted here, and that the row and column
are printed as two digits.  Thus its \fBcm\fR capability is \*(lqcm=6\eE&%r%2c%2Y\*(rq.
The Microterm \s-2ACT-IV\s0 needs the current row and column sent
preceded by a \fB^T\fR, with the row and column simply encoded in binary,
\*(lqcm=^T%.%.\*(rq.  Terminals which use \*(lq%.\*(rq need to be able to
backspace the cursor (\fBbs\fR or \fBbc\fR),
and to move the cursor up one line on the screen (\fBup\fR introduced below).
This is necessary because it is not always safe to transmit \fB\et\fR, \fB\en\fR
\fB^D\fR and \fB\er\fR, as the system may change or discard them.
E 5
I 5
Consider the Hewlett-Packard 2645, which, to get to row 3 and column 12, needs
D 11
to be sent \*(lq\eE&a12c03Y\*(rq padded for 6 milliseconds.
E 11
I 11
to be sent
.Dq \eE&a12c03Y
padded for 6 milliseconds.
E 11
Note that the order
of the row and column coordinates is reversed here
and that the row and column
are sent as two-digit integers.
Thus its
D 11
.B cm
capability is \*(lqcm=6\eE&%r%2c%2Y\*(rq.
E 5
.PP
E 11
I 11
.Sy \&cm
capability is
.Dq Li cm=6\eE&%r%2c%2Y .
.Pp
E 11
D 5
A final example is the \s-2LSI ADM\s0-3a, which uses row and column
offset by a blank character, thus \*(lqcm=\eE=%+ %+ \*(rq.
E 5
I 5
D 8
The Microterm
.SM ACT-IV
needs the current row and column sent
simply encoded in binary
preceded by a
.BR ^T ,
\*(lqcm=^T%.%.\*(rq.
E 8
I 8
The Datamedia 2500 needs the current row and column sent
D 11
encoded in binary using \*(lq%.\*(rq.
E 8
Terminals that use \*(lq%.\*(rq need to be able to
E 11
I 11
encoded in binary using
.Dq \&%. .
Terminals that use
.Dq \&%.
need to be able to
E 11
backspace the cursor
D 11
.RB ( le )
E 11
I 11
.Po Sy \&le Pc
E 11
and to move the cursor up one line on the screen
D 11
.RB ( up ).
E 11
I 11
.Po Sy \&up Pc .
E 11
This is necessary because it is not always safe to transmit
D 11
.BR \en ,
.BR ^D ,
E 11
I 11
.Sy \&\en ,
.Sy \&^D ,
E 11
and
D 11
.BR \er ,
E 11
I 11
.Sy \&\er ,
E 11
as the system may change or discard them.
(Programs using
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
must set terminal modes so that tabs are not expanded, so
D 11
.B \et
E 11
I 11
.Sy \&\et
E 11
is safe to send.
This turns out to be essential for the Ann Arbor 4080.)
E 5
D 11
.PP
D 5
.B Cursor motions
E 5
I 5
A final example is the Lear Siegler \s-1ADM\s0\-3a,
E 11
I 11
.Pp
A final example is the Lear Siegler
.Tn ADM Ns \-3a,
E 11
which offsets row and column
D 11
by a blank character, thus \*(lqcm=\eE=%+ %+ \*(rq.
E 5
.PP
E 11
I 11
by a blank character, thus
.Dq Li cm=\eE=%+ %+\ \& .
.Pp
E 11
D 5
If the terminal can move the cursor one position to the right, leaving
the character at the current position unchanged, then this sequence should
be given as \fBnd\fR (non-destructive space).  If it can move the cursor
up a line
on the screen in the same column, this should be given as \fBup\fR.
If the terminal has no cursor addressing capability, but can home the cursor
(to very upper left corner of screen) then this can be given as
\fBho\fR; similarly a fast way of getting to the lower left hand corner
can be given as \fBll\fR; this may involve going up with \fBup\fR
E 5
I 5
Row or column absolute cursor addressing
can be given as single parameter capabilities
D 11
.B ch
E 11
I 11
.Sy \&ch
E 11
(horizontal position absolute) and
D 11
.B cv
E 11
I 11
.Sy \&cv
E 11
(vertical position absolute).
Sometimes these are shorter than the more general two-parameter sequence
(as with the Hewlett-Packard 2645) and can be used in preference to
D 11
.BR cm .
E 11
I 11
.Sy \&cm .
E 11
If there are parameterized local motions
D 11
.RI ( e.g. ,
E 11
I 11
.Pf ( Em e.g . ,
E 11
move
D 11
.I n\^
E 11
I 11
.Ar n
E 11
positions to the right)
these can be given as
D 11
.BR DO ,
.BR LE ,
.BR RI ,
E 11
I 11
.Sy \&DO ,
.Sy \&LE ,
.Sy \&RI ,
E 11
and
D 11
.B UP
E 11
I 11
.Sy \&UP
E 11
with a single parameter indicating how many positions to move.
These are primarily useful if the terminal does not have
D 11
.BR cm ,
E 11
I 11
.Sy \&cm ,
E 11
such as the Tektronix 4025.
D 11
.br
.ne 5
.PP
.B Cursor Motions
.PP
E 11
I 11
.Ss Cursor Motions
.Pp
E 11
If the terminal has a fast way to home the cursor
(to the very upper left corner of the screen), this can be given as
D 11
.BR ho .
E 11
I 11
.Sy \&ho .
E 11
Similarly, a fast way of getting to the lower left-hand corner
can be given as
D 11
.BR ll ;
E 11
I 11
.Sy \&ll ;
E 11
this may involve going up with
D 11
.B up
E 11
I 11
.Sy \&up
E 11
E 5
from the home position,
D 5
but the editor will never do this itself (unless \fBll\fR does) because it
makes no assumption about the effect of moving up from the home position.
E 5
I 5
but a program should never do this itself (unless
D 11
.B ll
E 11
I 11
.Sy \&ll
E 11
does), because it can
make no assumption about the effect of moving up from the home position.
Note that the home position is the same as
cursor address (0,0): to the top left corner of the screen, not of memory.
D 11
(Therefore, the \*(lq\eEH\*(rq sequence on Hewlett-Packard terminals
E 11
I 11
(Therefore, the
.Dq \eEH
sequence on Hewlett-Packard terminals
E 11
cannot be used for
D 11
.BR ho .)
.br
.ne 5
E 5
.PP
D 5
.B Area clears
E 5
I 5
.B Area Clears
E 5
.PP
E 11
I 11
.Sy \&ho . )
.Ss Area Clears
E 11
If the terminal can clear from the current position to the end of the
D 5
line, leaving the cursor where it is, this should be given as \fBce\fR.
E 5
I 5
line, leaving the cursor where it is, this should be given as
D 11
.BR ce .
E 11
I 11
.Sy \&ce .
E 11
E 5
If the terminal can clear from the current position to the end of the
D 5
display, then this should be given as \fBcd\fR.
The editor only uses
\fBcd\fR from the first column of a line.
E 5
I 5
display, this should be given as
D 11
.BR cd .
.B cd
E 11
I 11
.Sy \&cd .
.Sy \&cd
E 11
must only be invoked from the first column of a line.
(Therefore,
it can be simulated by a request to delete a large number of lines,
if a true
D 11
.B cd
E 11
I 11
.Sy \&cd
E 11
is not available.)
D 11
.br
.ne 5
E 5
.PP
D 5
.B Insert/delete line
E 5
I 5
.B Insert/Delete Line
E 5
.PP
E 11
I 11
.Ss Insert/Delete Line
E 11
D 5
If the terminal can open a new blank line before the line where the cursor
is, this should be given as \fBal\fR; this is done only from the first
position of a line.  The cursor must then appear on the newly blank line.
If the terminal can delete the line which the cursor is on, then this
should be given as \fBdl\fR; this is done only from the first position on
E 5
I 5
If the terminal can open a new blank line
before the line containing the cursor,
this should be given as
D 11
.BR al ;
E 11
I 11
.Sy \&al ;
E 11
this must be invoked only from the first
position of a line.
The cursor must then appear at the left of the newly blank line.
If the terminal can delete the line that the cursor is on, this
should be given as
D 11
.BR dl ;
E 11
I 11
.Sy \&dl ;
E 11
this must only be used from the first position on
E 5
the line to be deleted.
D 5
If the terminal can scroll the screen backwards, then this can be given as
\fBsb\fR, but just \fBal\fR suffices.
If the terminal can retain display memory above then the
\fBda\fR capability should be given; if display memory can be retained
below then \fBdb\fR should be given.  These let the editor understand
that deleting a line on the screen may bring non-blank lines up from below
or that scrolling back with \fBsb\fR may bring down non-blank lines.
E 5
I 5
Versions of
D 11
.B al
E 11
I 11
.Sy \&al
E 11
and
D 11
.B dl
E 11
I 11
.Sy \&dl
E 11
which take a single parameter
and insert or delete that many lines
can be given as
D 11
.B AL
E 11
I 11
.Sy \&AL
E 11
and
D 11
.BR DL .
E 11
I 11
.Sy \&DL .
E 11
If the terminal has a settable scrolling region
(like the VT100),
the command to set this can be described with the
D 11
.B cs
E 11
I 11
.Sy \&cs
E 11
capability,
which takes two parameters: the top and bottom lines of the scrolling region.
The cursor position is, alas, undefined after using this command.
It is possible to get the effect of insert or delete line
using this command \(em the
D 11
.B sc
E 11
I 11
.Sy \&sc
E 11
and
D 11
.B rc
E 11
I 11
.Sy \&rc
E 11
(save and restore cursor) commands are also useful.
Inserting lines at the top or bottom of the screen can also be done using
D 11
.B sr
E 11
I 11
.Sy \&sr
E 11
or
D 11
.B sf
E 11
I 11
.Sy \&sf
E 11
on many terminals without a true insert/delete line,
and is often faster even on terminals with those features.
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
.B Insert/delete character
E 5
I 5
If the terminal has the ability to define a window as part of memory
which all commands affect, it should be given as the parameterized string
D 11
.BR wi .
E 11
I 11
.Sy \&wi .
E 11
The four parameters are the starting and ending lines in memory
and the starting and ending columns in memory, in that order.
(This
D 11
.I terminfo\^
E 11
I 11
.Xr terminfo
E 11
capability is described for completeness.
It is unlikely that any
D 11
.IR termcap\^ -using
E 11
I 11
.Nm termcap Ns \- using
E 11
program will support it.)
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
I 5
If the terminal can retain display memory above the screen, then the
D 11
.B da
E 11
I 11
.Sy \&da
E 11
capability should be given;
if display memory can be retained
below, then
D 11
.B db
E 11
I 11
.Sy \&db
E 11
should be given.
These indicate
that deleting a line or scrolling may bring non-blank lines up from below
or that scrolling back with
D 11
.B sr
E 11
I 11
.Sy \&sr
E 11
may bring down non-blank lines.
D 11
.br
.ne 5
.PP
.B Insert/Delete Character
.PP
E 11
I 11
.Ss Insert/Delete Character
E 11
E 5
There are two basic kinds of intelligent terminals with respect to
D 5
insert/delete character which can be described using
.I termcap.
E 5
I 5
insert/delete character that can be described using
D 11
.IR termcap\^ .
E 11
I 11
.Nm termcap .
E 11
E 5
The most common insert/delete character operations affect only the characters
on the current line and shift characters off the end of the line rigidly.
D 5
Other terminals, such as the Concept 100 and the Perkin Elmer Owl, make
E 5
I 5
Other terminals, such as the Concept\-100 and the Perkin Elmer Owl, make
E 5
a distinction between typed and untyped blanks on the screen, shifting
upon an insert or delete only to an untyped blank on the screen which is
D 5
either eliminated, or expanded to two untyped blanks.  You can find out
which kind of terminal you have by clearing the screen and then typing
text separated by cursor motions.  Type \*(lqabc\ \ \ \ def\*(rq using local
E 5
I 5
either eliminated or expanded to two untyped blanks.
You can determine
the kind of terminal you have by clearing the screen then typing
text separated by cursor motions.
D 11
Type \*(lqabc\ \ \ \ def\*(rq using local
E 5
cursor motions (not spaces) between the \*(lqabc\*(rq and the \*(lqdef\*(rq.
Then position the cursor before the \*(lqabc\*(rq and put the terminal in insert
E 11
I 11
Type
.Dq Li abc\ \ \ \ def
using local
cursor motions (not spaces) between the
.Dq abc
and the
.Dq def .
Then position the cursor before the
.Dq abc
and put the terminal in insert
E 11
D 5
mode.  If typing characters causes the rest of the line to shift
E 5
I 5
mode.
If typing characters causes the rest of the line to shift
E 5
rigidly and characters to fall off the end, then your terminal does
D 5
not distinguish between blanks and untyped positions.  If the \*(lqabc\*(rq
E 5
I 5
not distinguish between blanks and untyped positions.
D 11
If the \*(lqabc\*(rq
E 5
shifts over to the \*(lqdef\*(rq which then move together around the end of the
E 11
I 11
If the
.Dq abc
shifts over to the
.Dq def
which then move together around the end of the
E 11
D 5
current line and onto the next as you insert, you have the second type of
terminal, and should give the capability \fBin\fR, which stands for
\*(lqinsert null\*(rq.  If your terminal does something different and unusual
then you may have to modify the editor to get it to use the insert
mode your terminal defines.  We have seen no terminals which have an insert
mode not not falling into one of these two classes.
E 5
I 5
current line and onto the next as you insert, then you have the second type of
D 11
terminal and should give the capability \fBin\fP, which stands for
\*(lqinsert null\*(rq.
E 11
I 11
terminal and should give the capability
.Sy \&in ,
which stands for
.Dq insert null .
E 11
While these are two logically separate attributes
(one line
D 11
.I vs.
E 11
I 11
.Em \&vs .
E 11
multi-line insert mode,
and special treatment of untyped spaces),
we have seen no terminals whose insert
mode cannot be described with the single attribute.
E 5
D 11
.PP
D 5
The editor can handle both terminals which have an insert mode, and terminals
which send a simple sequence to open a blank position on the current line.
Give as \fBim\fR the sequence to get into insert mode, or give it an
empty value if your terminal uses a sequence to insert a blank position.
Give as \fBei\fR the sequence to leave insert mode (give this, with
an empty value also if you gave \fBim\fR so).
Now give as \fBic\fR any sequence needed to be sent just before sending
the character to be inserted.  Most terminals with a true insert mode
will not give \fBic\fR, terminals which send a sequence to open a screen
position should give it here.  (Insert mode is preferable to the sequence
to open a position on the screen if your terminal has both.)
If post insert padding is needed, give this as a number of milliseconds
in \fBip\fR (a string option).  Any other sequence which may need to be
sent after an insert of a single character may also be given in \fBip\fR.
E 5
I 5
.I Termcap\^
E 11
I 11
.Pp
.Nm Termcap
E 11
can describe both terminals that have an insert mode and terminals
that send a simple sequence to open a blank position on the current line.
Give as
D 11
.B im
E 11
I 11
.Sy \&im
E 11
the sequence to get into insert mode.
Give as
D 11
.B ei
E 11
I 11
.Sy \&ei
E 11
the sequence to leave insert mode.
Now give as
D 11
.B ic
E 11
I 11
.Sy \&ic
E 11
any sequence that needs to be sent just before
each character to be inserted.
Most terminals with a true insert mode
will not give
D 11
.BR ic ;
E 11
I 11
.Sy \&ic ;
E 11
terminals that use a sequence to open a screen
position should give it here.
(If your terminal has both,
insert mode is usually preferable to
D 11
.BR ic .
E 11
I 11
.Sy \&ic .
E 11
Do not give both unless the terminal actually requires both to be used
in combination.)
If post-insert padding is needed, give this as a number of milliseconds
in
D 11
.B ip
E 11
I 11
.Sy \&ip
E 11
(a string option).
Any other sequence that may need to be
sent after insertion of a single character can also be given in
D 11
.BR ip .
E 11
I 11
.Sy \&ip .
E 11
If your terminal needs to be placed into an `insert mode'
and needs a special code preceding each inserted character,
then both
D 11
.BR im / ei
E 11
I 11
.Sy \&im Ns / Sy \&ei
E 11
and
D 11
.B ic
E 11
I 11
.Sy \&ic
E 11
can be given, and both will be used.
The
D 11
.B IC
E 11
I 11
.Sy \&IC
E 11
capability, with one parameter
D 11
.IR n\^ ,
E 11
I 11
.Em n ,
E 11
will repeat the effects of
D 11
.B ic
.I n\^
E 11
I 11
.Sy \&ic
.Em n
E 11
times.
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
It is occasionally necessary to move around while in insert mode
D 5
to delete characters on the same line (e.g. if there is a tab after
the insertion position).  If your terminal allows motion while in
insert mode you can give the capability \fBmi\fR to speed up inserting
in this case.  Omitting \fBmi\fR will affect only speed.   Some terminals
(notably Datamedia's) must not have \fBmi\fR because of the way their
E 5
I 5
to delete characters on the same line
D 11
.RI ( e.g. ,
E 11
I 11
.Pf ( Em e.g . ,
E 11
if there is a tab after
the insertion position).
If your terminal allows motion while in
insert mode, you can give the capability
D 11
.B mi
E 11
I 11
.Sy \&mi
E 11
to speed up inserting
in this case.
Omitting
D 11
.B mi
E 11
I 11
.Sy \&mi
E 11
will affect only speed.
Some terminals
(notably Datamedia's) must not have
D 11
.B mi
E 11
I 11
.Sy \&mi
E 11
because of the way their
E 5
insert mode works.
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
Finally, you can specify delete mode by giving \fBdm\fR and \fBed\fR
to enter and exit delete mode, and \fBdc\fR to delete a single character
while in delete mode.
E 5
I 5
Finally, you can specify
D 11
.B dc
E 11
I 11
.Sy \&dc
E 11
to delete a single character,
D 11
.B DC
E 11
I 11
.Sy \&DC
E 11
with one parameter
D 11
.I n\^
E 11
I 11
.Em n
E 11
to delete
D 11
.I n\^
E 11
I 11
.Em n
E 11
characters,
and delete mode by giving
D 11
.B dm
E 11
I 11
.Sy \&dm
E 11
and
D 11
.B ed
E 11
I 11
.Sy \&ed
E 11
to enter and exit delete mode
(which is any mode the terminal needs to be placed in for
D 11
.B dc
E 11
I 11
.Sy \&dc
E 11
to work).
D 11
.br
.ne 5
E 5
.PP
D 5
.B "Highlighting, underlining, and visible bells"
E 5
I 5
.B Highlighting, Underlining, and Visible Bells
E 5
.PP
E 11
I 11
.Ss Highlighting, Underlining, and Visible  Bells
E 11
D 5
If your terminal has sequences to enter and exit standout mode these
can be given as \fBso\fR and \fBse\fR respectively.
If there are several flavors of standout mode
(such as inverse video, blinking, or underlining \-
half bright is not usually an acceptable \*(lqstandout\*(rq mode
unless the terminal is in inverse video mode constantly)
the preferred mode is inverse video by itself.
E 5
I 5
If your terminal has one or more kinds of display attributes,
these can be represented in a number of different ways.
You should choose one display form as
D 11
.IR "standout mode" ,
E 11
I 11
.Em standout mode ,
E 11
representing a good high-contrast, easy-on-the-eyes format
for highlighting error messages and other attention getters.
(If you have a choice, reverse video plus half-bright is good,
or reverse video alone.)
The sequences to enter and exit standout mode
are given as
D 11
.B so
E 11
I 11
.Sy \&so
E 11
and
D 11
.BR se ,
E 11
I 11
.Sy \&se ,
E 11
respectively.
E 5
If the code to change into or out of standout
D 5
mode leaves one or even two blank spaces on the screen,
E 5
I 5
mode leaves one or even two blank spaces or garbage characters on the screen,
E 5
D 11
as the TVI 912 and Teleray 1061 do,
E 11
I 11
as the
.Tn TVI
912 and Teleray 1061 do,
E 11
D 5
then \fBug\fR should be given to tell how many spaces are left.
E 5
I 5
then
D 11
.B sg
E 11
I 11
.Sy \&sg
E 11
should be given to tell how many characters are left.
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
Codes to begin underlining and end underlining can be given as \fBus\fR
and \fBue\fR respectively.
E 5
I 5
Codes to begin underlining and end underlining can be given as
D 11
.B us
E 11
I 11
.Sy \&us
E 11
and
D 11
.BR ue ,
E 11
I 11
.Sy \&ue ,
E 11
respectively.
Underline mode change garbage is specified by
D 11
.BR ug ,
E 11
I 11
.Sy \&ug ,
E 11
similar to
D 11
.BR sg .
E 11
I 11
.Sy \&sg .
E 11
E 5
If the terminal has a code to underline the current character and move
D 5
the cursor one space to the right, 
E 5
I 5
D 11
the cursor one position to the right, 
E 11
I 11
the cursor one position to the right,
E 11
E 5
such as the Microterm Mime,
D 5
this can be given as \fBuc\fR.
(If the underline code does not move the cursor to the right,
give the code followed by a nondestructive space.)
E 5
I 5
this can be given as
D 11
.BR uc .
E 5
.PP
E 11
I 11
.Sy \&uc .
.Pp
E 11
D 5
Many terminals, such as the HP 2621, automatically leave standout
mode when they move to a new line or the cursor is addressed.
Programs using standout mode should exit standout mode before
moving the cursor or sending a newline.
E 5
I 5
Other capabilities to enter various highlighting modes include
D 11
.B mb
E 11
I 11
.Sy \&mb
E 11
(blinking),
D 11
.B md
E 11
I 11
.Sy \&md
E 11
(bold or extra bright),
D 11
.B mh
E 11
I 11
.Sy \&mh
E 11
(dim or half-bright),
D 11
.B mk
E 11
I 11
.Sy \&mk
E 11
(blanking or invisible text),
D 11
.B mp
E 11
I 11
.Sy \&mp
E 11
(protected),
D 11
.B mr
E 11
I 11
.Sy \&mr
E 11
(reverse video),
D 11
.B me
E 11
I 11
.Sy \&me
E 11
(turn off
D 11
.I all
E 11
I 11
.Em all
E 11
attribute modes),
D 11
.B as
E 11
I 11
.Sy \&as
E 11
(enter alternate character set mode), and
D 11
.B ae
E 11
I 11
.Sy \&ae
E 11
(exit alternate character set mode).
Turning on any of these modes singly may or may not turn off other modes.
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
I 5
If there is a sequence to set arbitrary combinations of mode,
this should be given as
D 11
.B sa
E 11
I 11
.Sy \&sa
E 11
(set attributes), taking 9 parameters.
Each parameter is either 0 or 1,
as the corresponding attributes is on or off.
The 9 parameters are, in order: standout, underline, reverse, blink,
dim, bold, blank, protect, and alternate character set.
Not all modes need be supported by
D 11
.BR sa ,
E 11
I 11
.Sy \&sa ,
E 11
only those for which corresponding attribute commands exist.
(It is unlikely that a
D 11
.IR termcap\^ -using
E 11
I 11
.Nm termcap Ns \-using
E 11
program will support this capability, which is defined for compatibility
with
D 11
.IR terminfo\^ .)
.PP
Terminals with the \*(lqmagic cookie\*(rq glitches
.RB ( sg
E 11
I 11
.Xr terminfo . )
.Pp
Terminals with the
.Dq magic cookie
glitches
.Pf ( Sy \&sg
E 11
and
D 11
.BR ug ),
E 11
I 11
.Sy \&ug ) ,
E 11
rather than maintaining extra attribute bits for each character cell,
D 11
instead deposit special \*(lqcookies\*(rq,
or \*(lqgarbage characters\*(rq,
E 11
I 11
instead deposit special
.Dq cookies ,
or
.Dq garbage characters ,,
E 11
when they receive mode-setting sequences,
which affect the display algorithm.
D 11
.PP
E 11
I 11
.Pp
E 11
Some terminals,
such as the Hewlett-Packard 2621,
automatically leave standout
mode when they move to a new line or when the cursor is addressed.
Programs using standout mode
should exit standout mode on such terminals
before moving the cursor or sending a newline.
On terminals where this is not a problem,
the
D 11
.B ms
E 11
I 11
.Sy \&ms
E 11
capability should be present
to say that this overhead is unnecessary.
D 11
.PP
E 11
I 11
.Pp
E 11
E 5
If the terminal has
D 5
a way of flashing the screen to indicate an error quietly (a bell replacement)
then this can be given as \fBvb\fR; it must not move the cursor.
If the terminal should be placed in a different mode during
open and visual modes of
.I ex,
E 5
I 5
a way of flashing the screen to indicate an error quietly
(a bell replacement),
E 5
this can be given as
D 5
\fBvs\fR and \fBve\fR, sent at the start and end of these modes
respectively.  These can be used to change, e.g., from a underline
to a block cursor and back.
E 5
I 5
D 11
.BR vb ;
E 11
I 11
.Sy \&vb ;
E 11
it must not move the cursor.
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
If the terminal needs to be in a special mode when running
a program that addresses the cursor,
the codes to enter and exit this mode can be given as \fBti\fR and \fBte\fR.
This arises, for example, from terminals like the Concept with more than
one page of memory.
If the terminal has only memory relative cursor addressing and not screen
relative cursor addressing, a one screen-sized window must be fixed into
the terminal for cursor addressing to work properly.
E 5
I 5
If the cursor needs to be made more visible than normal
when it is not on the bottom line
(to change, for example, a non-blinking underline into an easier-to-find
block or blinking underline),
give this sequence as
D 11
.BR vs .
E 11
I 11
.Sy \&vs .
E 11
If there is a way to make the cursor completely invisible, give that as
D 11
.BR vi .
E 11
I 11
.Sy \&vi .
E 11
The capability
D 11
.BR ve ,
E 11
I 11
.Sy \&ve ,
E 11
which undoes the effects of both of these modes,
should also be given.
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
If your terminal correctly generates underlined characters
E 5
I 5
If your terminal correctly displays underlined characters
E 5
(with no special codes needed)
even though it does not overstrike,
D 5
then you should give the capability \fBul\fR.
E 5
I 5
then you should give the capability
D 11
.BR ul .
E 11
I 11
.Sy \&ul .
E 11
E 5
If overstrikes are erasable with a blank,
D 5
then this should be indicated by giving \fBeo\fR.
E 5
I 5
this should be indicated by giving
D 11
.BR eo .
.br
.ne 5
E 5
.PP
.B Keypad
.PP
E 11
I 11
.Sy \&eo .
.Ss Keypad
E 11
If the terminal has a keypad that transmits codes when the keys are pressed,
D 5
this information can be given. Note that it is not possible to handle
terminals where the keypad only works in local (this applies, for example,
to the unshifted HP 2621 keys).
E 5
I 5
this information can be given.
Note that it is not possible to handle
terminals where the keypad only works in local mode
(this applies, for example, to the unshifted Hewlett-Packard 2621 keys).
E 5
If the keypad can be set to transmit or not transmit,
D 5
give these codes as \fBks\fR and \fBke\fR.
E 5
I 5
give these codes as
D 11
.B ks
E 11
I 11
.Sy \&ks
E 11
and
D 11
.BR ke .
E 11
I 11
.Sy \&ke .
E 11
E 5
Otherwise the keypad is assumed to always transmit.
D 5
The codes sent by the left arrow, right arrow, up arrow, down arrow,
and home keys can be given as \fBkl, kr, ku, kd, \fRand\fB kh\fR respectively.
E 5
I 5
The codes sent by the left-arrow, right-arrow, up-arrow, down-arrow,
and home keys can be given as
D 11
.BR kl ,
.BR kr ,
.BR ku ,
.BR kd ,
E 11
I 11
.Sy \&kl ,
.Sy \&kr ,
.Sy \&ku ,
.Sy \&kd ,
E 11
and
D 11
.BR kh ,
E 11
I 11
.Sy \&kh ,
E 11
respectively.
E 5
If there are function keys such as f0, f1, ..., f9, the codes they send
D 5
can be given as \fBk0, k1, ..., k9\fR.
E 5
I 5
can be given as
D 11
.BR k0 ,
.BR k1 , "" ...,
.BR k9 .
E 11
I 11
.Sy \&k0 ,
.Sy \&k1 ,
...,
.Sy \&k9 .
E 11
E 5
If these keys have labels other than the default f0 through f9, the labels
D 5
can be given as \fBl0, l1, ..., l9\fR.
If there are other keys that transmit the same code as the terminal expects
for the corresponding function, such as clear screen, the \fItermcap\fP
2 letter codes can be given in the \fBko\fR capability,
for example, \*(lq:ko=cl,ll,sf,sb:\*(rq, which says that the terminal has
clear, home down, scroll down, and scroll up keys that transmit
the same thing as the cl, ll, sf, and sb entries.
E 5
I 5
can be given as
D 11
.BR l0 ,
.BR l1 , "" ...,
.BR l9 .
E 11
I 11
.Sy \&l0 ,
.Sy \&l1 ,
...,
.Sy \&l9 .
E 11
The codes transmitted by certain other special keys can be given:
D 11
.B kH
E 11
I 11
.Sy \&kH
E 11
(home down),
D 11
.B kb
E 11
I 11
.Sy \&kb
E 11
(backspace),
D 11
.B ka
E 11
I 11
.Sy \&ka
E 11
(clear all tabs),
D 11
.B kt
E 11
I 11
.Sy \&kt
E 11
(clear the tab stop in this column),
D 11
.B kC
E 11
I 11
.Sy \&kC
E 11
(clear screen or erase),
D 11
.B kD
E 11
I 11
.Sy \&kD
E 11
(delete character),
D 11
.B kL
E 11
I 11
.Sy \&kL
E 11
(delete line),
D 11
.B kM
E 11
I 11
.Sy \&kM
E 11
(exit insert mode),
D 11
.B kE
E 11
I 11
.Sy \&kE
E 11
(clear to end of line),
D 11
.B kS
E 11
I 11
.Sy \&kS
E 11
(clear to end of screen),
D 11
.B kI
E 11
I 11
.Sy \&kI
E 11
(insert character or enter insert mode),
D 11
.B kA
E 11
I 11
.Sy \&kA
E 11
(insert line),
D 11
.B kN
E 11
I 11
.Sy \&kN
E 11
(next page),
D 11
.B kP
E 11
I 11
.Sy \&kP
E 11
(previous page),
D 11
.B kF
E 11
I 11
.Sy \&kF
E 11
(scroll forward/down),
D 11
.B kR
E 11
I 11
.Sy \&kR
E 11
(scroll backward/up), and
D 11
.B kT
E 11
I 11
.Sy \&kT
E 11
(set a tab stop in this column).
In addition, if the keypad has a 3 by 3 array of keys
including the four arrow keys, then the other five keys can be given as
D 11
.BR K1 ,
.BR K2 ,
.BR K3 ,
.BR K4 ,
E 11
I 11
.Sy \&K1 ,
.Sy \&K2 ,
.Sy \&K3 ,
.Sy \&K4 ,
E 11
and
D 11
.BR K5 .
E 11
I 11
.Sy \&K5 .
E 11
These keys are useful when the effects of a 3 by 3 directional pad are needed.
The obsolete
D 11
.B ko
capability formerly used to describe \*(lqother\*(rq function keys has been
E 11
I 11
.Sy \&ko
capability formerly used to describe
.Dq other
function keys has been
E 11
completely supplanted by the above capabilities.
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
The
D 11
.B ma
E 11
I 11
.Sy \&ma
E 11
D 5
entry is also used to indicate arrow keys on terminals which have
single character arrow keys.  It is obsolete but still in use in
version 2 of vi, which must be run on some minicomputers due to
E 5
I 5
entry is also used to indicate arrow keys on terminals that have
single-character arrow keys.
It is obsolete but still in use in
version 2 of
D 11
.I vi\^
E 11
I 11
.Sy \&vi
E 11
which must be run on some minicomputers due to
E 5
memory limitations.
This field is redundant with
D 5
.BR "kl, kr, ku, kd, " and " kh" .
E 5
I 5
D 11
.BR kl ,
.BR kr ,
.BR ku ,
.BR kd ,
E 11
I 11
.Sy \&kl ,
.Sy \&kr ,
.Sy \&ku ,
.Sy \&kd ,
E 11
and
D 11
.BR kh .
E 11
I 11
.Sy \&kh .
E 11
E 5
It consists of groups of two characters.
D 5
In each group, the first character is what an arrow key sends, the
second character is the corresponding vi command.
E 5
I 5
In each group, the first character is what an arrow key sends, and the
second character is the corresponding
D 11
.I vi\^
E 11
I 11
.Sy \&vi
E 11
command.
E 5
These commands are
D 11
.B h
E 11
I 11
.Ar h
E 11
for
D 11
.BR kl ,
.B j
E 11
I 11
.Sy \&kl ,
.Ar j
E 11
for
D 11
.BR kd ,
.B k
E 11
I 11
.Sy \&kd ,
.Ar k
E 11
for
D 11
.BR ku ,
.B l
E 11
I 11
.Sy \&ku ,
.Ar l
E 11
for
D 11
.BR kr ,
E 11
I 11
.Sy \&kr ,
E 11
and
D 11
.B H
E 11
I 11
.Ar H
E 11
for
D 11
.BR kh .
D 5
For example, the mime would be
.B ":ma=^Kj^Zk^Xl:"
E 5
I 5
For example, the Mime would have \*(lqma=^Hh^Kj^Zk^Xl\*(rq
E 11
I 11
.Sy \&kh .
For example, the Mime would have
.Dq Li ma=^Hh^Kj^Zk^Xl
E 11
E 5
indicating arrow keys left (^H), down (^K), up (^Z), and right (^X).
D 5
(There is no home key on the mime.)
E 5
I 5
(There is no home key on the Mime.)
D 11
.br
.ne 5
E 5
.PP
I 5
.B Tabs and Initialization
.PP
E 11
I 11
.Ss Tabs and Initialization
E 11
If the terminal needs to be in a special mode when running
a program that uses these capabilities,
the codes to enter and exit this mode can be given as
D 11
.B ti
E 11
I 11
.Sy \&ti
E 11
and
D 11
.BR te .
E 11
I 11
.Sy \&te .
E 11
This arises, for example, from terminals like the Concept with more than
one page of memory.
If the terminal has only memory-relative cursor addressing and not
screen-relative cursor addressing,
a screen-sized window must be fixed into
the display for cursor addressing to work properly.
This is also used for the Tektronix 4025, where
D 11
.B ti
E 11
I 11
.Sy \&ti
E 11
sets the command character to be the one used by
D 11
.IR termcap\^ .
.PP
E 11
I 11
.Nm termcap .
.Pp
E 11
Other capabilities
include
D 11
.BR is ,
E 11
I 11
.Sy \&is ,
E 11
an initialization string for the terminal,
and
D 11
.BR if ,
E 11
I 11
.Sy \&if ,
E 11
the name of a file containing long initialization strings.
These strings are expected to set the terminal into modes
consistent with the rest of the
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
description.
They are normally sent to the terminal by the
D 11
.I tset\^
E 11
I 11
.Xr tset
E 11
program each time the user logs in.
They will be printed in the following order:
D 11
.BR is ;
E 11
I 11
.Sy \&is ;
E 11
setting tabs using
D 11
.B ct
E 11
I 11
.Sy \&ct
E 11
and
D 11
.BR st ;
E 11
I 11
.Sy \&st ;
E 11
and finally
D 11
.BR if .
.RI ( Terminfo\^
E 11
I 11
.Sy \&if .
.Pf ( Xr Terminfo
E 11
uses
D 11
.B i1-i2
E 11
I 11
.Sy \&i\&1-i2
E 11
instead of
D 11
.B is
E 11
I 11
.Sy \&is
E 11
and runs the program
D 11
.B iP
E 11
I 11
.Sy \&iP
E 11
and prints
D 11
.B i3
E 11
I 11
.Sy "\&i\&3"
E 11
after the other initializations.)
A pair of sequences that does a harder reset from a totally unknown state
can be analogously given as
D 11
.B rs
E 11
I 11
.Sy \&rs
E 11
and
D 11
.BR if .
E 11
I 11
.Sy \&if .
E 11
These strings are output by the
D 11
.I reset\^
E 11
I 11
.Xr reset
E 11
program, which is used when the terminal gets into a wedged state.
D 11
.RI ( Terminfo\^
E 11
I 11
.Pf ( Xr Terminfo
E 11
uses
D 11
.B r1-r3
E 11
I 11
.Sy "\&r1-r3"
E 11
instead of
D 11
.BR rs .)
E 11
I 11
.Sy \&rs . )
E 11
Commands are normally placed in
D 11
.B rs
E 11
I 11
.Sy \&rs
E 11
and
D 11
.B rf
E 11
I 11
.Sy \&rf
E 11
only if they produce annoying effects on the screen and are not necessary
when logging in.
For example, the command to set the VT100 into 80-column mode
would normally be part of
D 11
.BR is ,
E 11
I 11
.Sy \&is ,
E 11
but it causes an annoying glitch of the screen and is not normally needed
since the terminal is usually already in 80-column mode.
D 11
.PP
E 11
I 11
.Pp
E 11
If the terminal has hardware tabs,
the command to advance to the next tab stop can be given as
D 11
.B ta
E 11
I 11
.Sy \&ta
E 11
(usually
D 11
.BR ^I ).
A \*(lqbacktab\*(rq command which moves leftward to the previous tab stop
E 11
I 11
.Sy \&^I ) .
A
.Dq backtab
command which moves leftward to the previous tab stop
E 11
can be given as
D 11
.BR bt .
E 11
I 11
.Sy \&bt .
E 11
By convention,
if the terminal driver modes indicate that tab stops are being expanded
by the computer rather than being sent to the terminal,
programs should not use
D 11
.B ta
E 11
I 11
.Sy \&ta
E 11
or
D 11
.B bt
E 11
I 11
.Sy \&bt
E 11
even if they are present,
since the user may not have the tab stops properly set.
If the terminal has hardware tabs that are initially set every
D 11
.I n\^
E 11
I 11
.Ar n
E 11
positions when the terminal is powered up, then the numeric parameter
D 11
.B it
E 11
I 11
.Sy \&it
E 11
is given, showing the number of positions between tab stops.
This is normally used by the
D 11
.I tset\^
E 11
I 11
.Xr tset
E 11
command to determine whether to set the driver mode for hardware tab
expansion, and whether to set the tab stops.
If the terminal has tab stops that can be saved in nonvolatile memory, the
D 11
.I termcap\^
E 11
I 11
.Nm termcap
E 11
description can assume that they are properly set.
D 11
.PP
E 11
I 11
.Pp
E 11
If there are commands to set and clear tab stops, they can be given as
D 11
.B ct
E 11
I 11
.Sy \&ct
E 11
(clear all tab stops) and
D 11
.B st
E 11
I 11
.Sy \&st
E 11
(set a tab stop in the current column of every row).
If a more complex sequence is needed to set the tabs than can be
described by this, the sequence can be placed in
D 11
.B is
E 11
I 11
.Sy \&is
E 11
or
D 11
.BR if .
.br
.ne 5
.PP
.B Delays
.PP
E 11
I 11
.Sy \&if .
.Ss Delays
E 11
Certain capabilities control padding in the terminal driver.
These are primarily needed by hardcopy terminals and are used by the
D 11
.I tset\^
E 11
I 11
.Xr tset
E 11
program to set terminal driver modes appropriately.
Delays embedded in the capabilities
D 11
.BR cr ,
.BR sf ,
.BR le ,
.BR ff ,
E 11
I 11
.Sy \&cr ,
.Sy \&sf ,
.Sy \&le ,
.Sy \&ff ,
E 11
and
D 11
.B ta
E 11
I 11
.Sy \&ta
E 11
will cause the appropriate delay bits to be set in the terminal driver.
If
D 11
.B pb
E 11
I 11
.Sy \&pb
E 11
(padding baud rate) is given, these values can be ignored at baud rates
below the value of
D 11
.BR pb .
For 4.2BSD
.IR tset\^ ,
E 11
I 11
.Sy \&pb .
For
.Bx 4.2
.Xr tset ,
E 11
the delays are given as numeric capabilities
D 11
.BR dC ,
.BR dN ,
.BR dB ,
.BR dF ,
E 11
I 11
.Sy \&dC ,
.Sy \&dN ,
.Sy \&dB ,
.Sy \&dF ,
E 11
and
D 11
.BR dT
E 11
I 11
.Sy \&dT
E 11
instead.
D 11
.br
.ne 5
.PP
E 5
.B Miscellaneous
.PP
D 5
If the terminal requires other than a null (zero) character as a pad,
then this can be given as \fBpc\fR.
E 5
I 5
If the terminal requires other than a \s-2NUL\s0 (zero) character as a pad,
E 11
I 11
.Ss Miscellaneous
If the terminal requires other than a
.Dv NUL
(zero) character as a pad,
E 11
this can be given as
D 11
.BR pc .
E 11
I 11
.Sy \&pc .
E 11
Only the first character of the
D 11
.B pc
E 11
I 11
.Sy \&pc
E 11
string is used.
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
If tabs on the terminal require padding, or if the terminal uses a
character other than \fB^I\fR to tab, then this can be given as \fBta\fR.
E 5
I 5
If the terminal has commands to save and restore the position of the
cursor, give them as
D 11
.B sc
E 11
I 11
.Sy \&sc
E 11
and
D 11
.BR rc .
E 5
.PP
D 5
Hazeltine terminals, which don't allow `~' characters to be printed should
indicate \fBhz\fR.
Datamedia terminals, which echo carriage-return linefeed for carriage return
and then ignore a following linefeed should indicate \fBnc\fR.
Early Concept terminals, which ignore a linefeed immediately after an \fBam\fR
wrap, should indicate \fBxn\fR.
If an erase-eol is required to get rid of standout
(instead of merely writing on top of it),
\fBxs\fP should be given.
E 5
I 5
If the terminal has an extra \*(lqstatus line\*(rq that is not normally used by
E 11
I 11
.Sy \&rc .
.Pp
If the terminal has an extra
.Dq status line
that is not normally used by
E 11
software, this fact can be indicated.
If the status line is viewed as an extra line below the bottom line,
then the capability
D 11
.B hs
E 11
I 11
.Sy \&hs
E 11
should be given.
Special strings to go to a position in the status line and to return
from the status line can be given as
D 11
.B ts
E 11
I 11
.Sy \&ts
E 11
and
D 11
.BR fs .
.RB ( fs
E 11
I 11
.Sy \&fs .
.Pf ( Xr \&fs
E 11
must leave the cursor position in the same place that it was before
D 11
.BR ts .
E 11
I 11
.Sy \&ts .
E 11
If necessary, the
D 11
.B sc
E 11
I 11
.Sy \&sc
E 11
and
D 11
.B rc
E 11
I 11
.Sy \&rc
E 11
strings can be included in
D 11
.B ts
E 11
I 11
.Sy \&ts
E 11
and
D 11
.B fs
E 11
I 11
.Sy \&fs
E 11
to get this effect.)
The capability
D 11
.B ts
E 11
I 11
.Sy \&ts
E 11
takes one parameter, which is the column number of the status line
to which the cursor is to be moved.
If escape sequences and other special commands such as tab work while in
the status line, the flag
D 11
.B es
E 11
I 11
.Sy \&es
E 11
can be given.
A string that turns off the status line (or otherwise erases its contents)
should be given as
D 11
.BR ds .
E 11
I 11
.Sy \&ds .
E 11
The status line is normally assumed to be the same width as the
rest of the screen,
D 11
.IR i.e. ,
.BR co .
E 11
I 11
.Em i.e . ,
.Sy \&co .
E 11
If the status line is a different width (possibly because the terminal
does not allow an entire line to be loaded), then its width in columns
can be indicated with the numeric parameter
D 11
.BR ws .
.PP
E 11
I 11
.Sy \&ws .
.Pp
E 11
If the terminal can move up or down half a line, this can be
indicated with
D 11
.B hu
E 11
I 11
.Sy \&hu
E 11
(half-line up) and
D 11
.B hd
E 11
I 11
.Sy \&hd
E 11
(half-line down).
This is primarily useful for superscripts and subscripts on hardcopy
terminals.
If a hardcopy terminal can eject to the next page (form feed),
give this as
D 11
.B ff
E 11
I 11
.Sy \&ff
E 11
(usually
D 11
.BR ^L ).
.PP
E 11
I 11
.Sy \&^L ) .
.Pp
E 11
If there is a command to repeat a given character a given number of times
(to save time transmitting a large number of identical characters),
this can be indicated with the parameterized string
D 11
.BR rp .
E 11
I 11
.Sy \&rp .
E 11
The first parameter is the character to be repeated and the second is
the number of times to repeat it.
(This is a
D 11
.I terminfo\^
E 11
I 11
.Xr terminfo
E 11
feature that is unlikely to be supported by a program that uses
D 11
.IR termcap\^ .)
.PP
E 11
I 11
.Nm termcap . )
.Pp
E 11
If the terminal has a settable command character, such as the
Tektronix 4025, this can be indicated with
D 11
.BR CC .
E 11
I 11
.Sy \&CC .
E 11
A prototype command character is chosen which is used in all capabilities.
This character is given in the
D 11
.B CC
E 11
I 11
.Sy \&CC
E 11
capability to identify it.
D 11
The following convention is supported on some UNIX systems:
E 11
I 11
The following convention is supported on some
.Ux
systems:
E 11
The environment is to be searched for a
D 11
.B
.SM CC
E 11
I 11
.Ev \&CC
E 11
variable,
and if found,
all occurrences of the prototype character are replaced by the character
in the environment variable.
This use of the
D 11
.B
.SM CC
E 11
I 11
.Ev \&CC
E 11
environment variable
is a very bad idea, as it conflicts with
D 11
.IR make\^ (1).
.PP
E 11
I 11
.Xr make 1 .
.Pp
E 11
Terminal descriptions that do not represent a specific kind of known
terminal, such as
D 11
.IR switch\^ ,
.IR dialup\^ ,
.IR patch\^ ,
E 11
I 11
.Em switch ,
.Em dialup ,
.Em patch ,
E 11
and
D 11
.IR network\^ ,
E 11
I 11
.Xr network ,
E 11
should include the
D 11
.B gn
E 11
I 11
.Sy \&gn
E 11
(generic) capability so that programs can complain that they do not know
how to talk to the terminal.
(This capability does not apply to
D 11
.I virtual\^
E 11
I 11
.Em virtual
E 11
terminal descriptions for which the escape sequences are known.)
D 11
.PP
If the terminal uses xoff/xon (\s-2DC3\s0/\s-2DC1\s0)
E 11
I 11
.Pp
If the terminal uses xoff/xon
.Pq Tn DC3 Ns / Ns Tn DC1
E 11
handshaking for flow control, give
D 11
.BR xo .
E 11
I 11
.Sy \&xo .
E 11
Padding information should still be included so that routines can make
better decisions about costs, but actual pad characters will not be
transmitted.
D 11
.PP
If the terminal has a \*(lqmeta key\*(rq which acts as a shift key, setting the
E 11
I 11
.Pp
If the terminal has a
.Dq meta key
which acts as a shift key, setting the
E 11
8th bit of any character transmitted, then this fact can be indicated with
D 11
.BR km .
E 11
I 11
.Sy \&km .
E 11
Otherwise, software will assume that the 8th bit is parity and it will
usually be cleared.
D 11
If strings exist to turn this \*(lqmeta mode\*(rq on and off, they can be given as
.B mm
E 11
I 11
If strings exist to turn this
.Dq meta mode
on and off, they can be given as
.Sy \&mm
E 11
and
D 11
.BR mo .
.PP
E 11
I 11
.Sy \&mo .
.Pp
E 11
If the terminal has more lines of memory than will fit on the screen at once,
the number of lines of memory can be indicated with
D 11
.BR lm .
E 11
I 11
.Sy \&lm .
E 11
An explicit value of 0 indicates that the number of lines is not fixed,
but that there is still more memory than fits on the screen.
D 11
.PP
If the terminal is one of those supported by the UNIX system virtual
E 11
I 11
.Pp
If the terminal is one of those supported by the
.Ux
system virtual
E 11
terminal protocol, the terminal number can be given as
D 11
.BR vt .
.PP
E 11
I 11
.Sy \&vt .
.Pp
E 11
Media copy strings which control an auxiliary printer
connected to the terminal can be given as
D 11
.BR ps :
E 11
I 11
.Sy \&ps :
E 11
print the contents of the screen;
D 11
.BR pf :
E 11
I 11
.Sy \&pf :
E 11
turn off the printer; and
D 11
.BR po :
E 11
I 11
.Sy \&po :
E 11
turn on the printer.
When the printer is on, all text sent to the terminal will be sent to the
printer.
It is undefined whether the text is also displayed on the terminal screen
when the printer is on.
A variation
D 11
.B pO
E 11
I 11
.Sy \&pO
E 11
takes one parameter and leaves the printer on for as many characters as the
value of the parameter, then turns the printer off.
The parameter should not exceed 255.
All text, including
D 11
.BR pf ,
E 11
I 11
.Sy \&pf ,
E 11
is transparently passed to the printer while
D 11
.B pO
E 11
I 11
.Sy \&pO
E 11
is in effect.
D 11
.PP
E 11
I 11
.Pp
E 11
Strings to program function keys can be given as
D 11
.BR pk ,
.BR pl ,
E 11
I 11
.Sy \&pk ,
.Sy \&pl ,
E 11
and
D 11
.BR px .
E 11
I 11
.Sy \&px .
E 11
Each of these strings takes two parameters: the function key number
to program (from 0 to 9) and the string to program it with.
Function key numbers out of this range may program undefined keys
in a terminal-dependent manner.
The differences among the capabilities are that
D 11
.B pk
E 11
I 11
.Sy \&pk
E 11
causes pressing the given key to be the same as the user typing the given
string;
D 11
.B pl
E 11
I 11
.Sy \&pl
E 11
causes the string to be executed by the terminal in local mode;
and
D 11
.B px
E 11
I 11
.Sy \&px
E 11
causes the string to be transmitted to the computer.
Unfortunately, due to lack of a definition for string parameters in
D 11
.IR termcap\^ ,
E 11
I 11
.Nm termcap ,
E 11
only
D 11
.I terminfo\^
E 11
I 11
.Xr terminfo
E 11
supports these capabilities.
D 11
.br
.ne 5
.PP
.B Glitches and Braindamage
.PP
E 11
I 11
.Ss Glitches and Braindamage
E 11
Hazeltine terminals, which do not allow `~' characters to be displayed,
should indicate
D 11
.BR hz .
.PP
E 11
I 11
.Sy \&hz .
.Pp
E 11
The
D 11
.B nc
E 11
I 11
.Sy \&nc
E 11
capability, now obsolete, formerly indicated Datamedia terminals,
which echo
D 11
.B \er \en
E 11
I 11
.Sy \&\er \en
E 11
for
carriage return then ignore a following linefeed.
D 11
.PP
E 11
I 11
.Pp
E 11
Terminals that ignore a linefeed immediately after an
D 11
.B am
E 11
I 11
.Sy \&am
E 11
wrap, such as the Concept, should indicate
D 11
.BR xn .
.PP
E 11
I 11
.Sy \&xn .
.Pp
E 11
If
D 11
.B ce
E 11
I 11
.Sy \&ce
E 11
is required to get rid of standout
(instead of merely writing normal text on top of it),
D 11
.B xs
E 11
I 11
.Sy \&xs
E 11
should be given.
D 11
.PP
E 11
I 11
.Pp
E 11
E 5
Teleray terminals, where tabs turn all characters moved over to blanks,
D 5
should indicate \fBxt\fR.
Other specific terminal problems may be corrected by adding more
capabilities of the form \fBx\fIx\fR.
E 5
I 5
should indicate
D 11
.B xt
E 11
I 11
.Sy \&xt
E 11
(destructive tabs).
This glitch is also taken to mean that it is not possible
to position the cursor on top of a \*(lqmagic cookie\*(rq, and that
to erase standout mode it is necessary to use delete and insert line.
E 5
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
Other capabilities
include \fBis\fR, an initialization string for the terminal,
and \fBif\fR, the name of a file containing long initialization strings.
These strings are expected to properly clear and then set the tabs
on the terminal, if the terminal has settable tabs.
If both are given, \fBis\fR will be printed before \fBif\fR.
This is useful where \fBif\fR is
.I /usr/lib/tabset/std
but \fBis\fR
clears the tabs first.
E 5
I 5
The Beehive Superbee, which is unable to correctly transmit the
D 11
\s-2ESC\s0 or ^C characters, has
.BR xb ,
indicating that the \*(lqf1\*(rq key is used for \s-2ESC\s0 and \*(lqf2\*(rq for ^C.
(Only certain Superbees have this problem, depending on the ROM.)
E 5
.PP
E 11
I 11
.Dv ESC
or
.Sy \&^C
characters, has
.Sy \&xb ,
indicating that the
.Dq \&f\&1
key is used for
.Dv ESC
and
.Dq \&f\&2
for ^C.
(Only certain Superbees have this problem, depending on the
.Tn ROM . )
.Pp
E 11
I 5
Other specific terminal problems may be corrected by adding more
D 11
capabilities of the form \fBx\fIx\^\fP.
.br
.ne 5
.PP
E 5
.B Similar Terminals
.PP
E 11
I 11
capabilities of the form
.Sy x Em x .
.Ss Similar Terminals
E 11
If there are two very similar terminals,
one can be defined as being just like the other with certain exceptions.
D 5
The string capability \fBtc\fR can be given
E 5
I 5
The string capability
D 11
.B tc
E 11
I 11
.Sy \&tc
E 11
can be given
E 5
with the name of the similar terminal.
D 5
This capability must be \fIlast\fP and the combined length of the two entries
must not exceed 1024. Since
.I termlib
routines search the entry from left to right, and since the tc capability is
replaced by the corresponding entry, the capabilities given at the left
override the ones in the similar terminal.
D 2
A capability can be cancelled with \fBxx@\fR where xx is the capability.
E 2
I 2
A capability can be canceled with \fBxx@\fR where xx is the capability.
E 5
I 5
This capability must be
D 11
.IR last\^ ,
E 11
I 11
.Em last ,
E 11
and the combined length of the entries
must not exceed 1024.
The capabilities given before
D 11
.B tc
E 11
I 11
.Sy \&tc
E 11
override those in the terminal type invoked by
D 11
.BR tc .
E 11
I 11
.Sy \&tc .
E 11
A capability can be canceled by placing
D 11
.B xx@
E 11
I 11
.Sy \&xx@
E 11
to the left of the
D 11
.B tc
E 11
I 11
.Sy \&tc
E 11
invocation, where
D 11
.I xx\^
E 11
I 11
.Sy \&xx
E 11
is the capability.
E 5
E 2
For example, the entry
D 11
.PP
D 5
	hn\||\|2621nl:ks@:ke@:tc=2621:
E 5
I 5
	hn\||\|2621\-nl:ks@:ke@:tc=2621:
E 5
.PP
D 5
defines a 2621nl that does not have the \fBks\fR or \fBke\fR capabilities,
and hence does not turn on the function key labels when in visual mode.
E 5
I 5
defines a \*(lq2621\-nl\*(rq that does not have the
.B ks
E 11
I 11
.Bd -literal -offset indent
hn\||\|2621\-nl:ks@:ke@:tc=2621:
.Ed
.Pp
defines a
.Dq 2621\-nl
that does not have the
.Sy \&ks
E 11
or
D 11
.B ke
E 11
I 11
.Sy \&ke
E 11
capabilities,
hence does not turn on the function key labels when in visual mode.
E 5
This is useful for different modes for a terminal, or for different
user preferences.
D 5
.SH FILES
.DT
/etc/termcap	file containing terminal descriptions
.SH SEE ALSO
D 2
ex(1), curses(3), termcap(3), tset(1), vi(1), ul(1), more(1)
E 2
I 2
ex(1), curses(3X), termcap(3X), tset(1), vi(1), ul(1), more(1)
E 5
E 2
D 11
.SH AUTHOR
William Joy
.br
Mark Horton added underlining and keypad support
D 5
.SH BUGS
.I Ex
E 5
I 5
.SH FILES
.DT
/etc/termcap	file containing terminal descriptions
.SH SEE ALSO
D 7
ex(1), more(1), tset(1), ul(1), vi(1), curses(3X), printf(3S), term(7).
E 7
I 7
ex(1), more(1), tset(1), ul(1), vi(1), curses(3X), printf(3S),
termcap(3X), term(7)
E 7
.SH "CAVEATS AND BUGS"
.B Note:
.I termcap\^
was replaced by
.I terminfo\^
in UNIX System V Release 2.0.
E 11
I 11
.Sh FILES
D 12
.Bl -tag -width /usr/share/misc/termcap -compact
E 12
I 12
.Bl -tag -width /usr/share/misc/termcap.db -compact
E 12
.It Pa /usr/share/misc/termcap
File containing terminal descriptions.
I 12
.It Pa /usr/share/misc/termcap.db
Hash database file containing terminal descriptions (see 
.Xr cap_mkdb 1 ) .
E 12
.El
.Sh SEE ALSO
.Xr \&ex 1 ,
I 12
.Xr cap_mkdb 1 ,
E 12
.Xr more 1 ,
.Xr tset 1 ,
.Xr \&ul 1 ,
.Xr vi 1 ,
.Xr curses 3 ,
.Xr printf 3 ,
.Xr termcap 3 ,
.Xr term 7
.Sh CAVEATS AND BUGS
The
.Em Note :
.Nm termcap
functions
were replaced by
.Xr terminfo
in
.At V
Release 2.0.
E 11
The transition will be relatively painless if capabilities flagged as
D 11
\*(lqobsolete\*(rq are avoided.
I 6
.PP
E 11
I 11
.Dq obsolete
are avoided.
.Pp
E 11
Lines and columns are now stored by the kernel as well as in the termcap
entry.
Most programs now use the kernel information primarily; the information
in this file is used only if the kernel does not have any information.
E 6
D 11
.PP
.I Vi\^
E 11
I 11
.Pp
.Xr \&Vi
E 11
E 5
allows only 256 characters for string capabilities, and the routines
D 11
in 
D 2
.I termcap(3)
E 2
I 2
D 5
.IR termcap (3X)
E 5
I 5
.IR termlib\^ (3)
E 11
I 11
in
.Xr termlib 3
E 11
E 5
E 2
do not check for overflow of this buffer.
The total length of a single entry (excluding only escaped newlines)
may not exceed 1024.
D 11
.PP
E 11
I 11
.Pp
E 11
D 5
The
.BR ma ,
.BR vs ,
and
.B ve
entries are specific to the
.I vi
program.
.PP
E 5
Not all programs support all entries.
I 11
.Sh HISTORY
The
.Nm
file format appeared in
.Bx 3 .
E 11
D 5
There are entries that are not supported by any program.
E 5
E 1
