h40873
s 00001/00001/00165
d D 8.2 94/01/23 23:09:50 mckusick 23 22
c af.o no longer exists
e
s 00000/00000/00166
d D 8.1 93/06/10 21:29:02 bostic 22 21
c 4.4BSD snapshot (revision 8.1)
e
s 00003/00003/00163
d D 7.21 93/02/12 15:41:19 sklower 21 20
c libkern should be $S relative
e
s 00013/00006/00153
d D 7.20 92/12/27 09:18:00 hibler 20 19
c fix up libkern dependencies so we can get a profiling version
e
s 00002/00002/00157
d D 7.19 92/11/04 18:56:07 sklower 19 18
c locate libkern relative to $S instead of ../../
e
s 00002/00002/00157
d D 7.18 92/07/23 18:53:37 bostic 18 17
c add vnode_if.h to depend line, vnode_if.o to object line
e
s 00005/00000/00154
d D 7.17 92/07/23 17:12:56 bostic 17 16
c build vnode_if.c, vnode_if.h from vnode_if.src
e
s 00002/00002/00152
d D 7.16 92/07/19 17:46:36 mckusick 16 15
c add vfs_conf.o to the list of things that depends on the Makefile
e
s 00002/00002/00152
d D 7.15 92/06/21 14:32:49 mckusick 15 14
c include kernel library
e
s 00001/00001/00153
d D 7.14 92/06/05 15:28:37 hibler 14 13
c merge latest Utah hp300 code including 68040 support
e
s 00002/00003/00152
d D 7.13 92/02/24 09:33:55 mckusick 13 12
c update for kernel profiling
e
s 00002/00002/00153
d D 7.12 91/12/19 21:16:24 mckusick 12 11
c add libquad.a for quad support (should probably get a new name)
e
s 00007/00003/00148
d D 7.11 91/12/19 21:15:15 karels 11 10
c cleanups to LD definitions
e
s 00050/00004/00101
d D 7.10 91/06/27 18:37:41 karels 10 9
c van's changes to move compile instructions from config to makefile
e
s 00001/00001/00104
d D 7.9 91/05/08 13:28:44 karels 9 8
c ld has moved
e
s 00007/00011/00098
d D 7.8 91/05/08 11:24:16 karels 8 7
c don't need gcc redefs; should be done with -DNVM; add $PROF for -g;
c pte.h moved; use cpp on locore.s directly so -g stabs have correct line numbers;
c param.c should be depended
e
s 00002/00002/00107
d D 7.7 91/04/01 08:48:35 bostic 7 6
c cleanup up GCC -D stuff
e
s 00001/00001/00108
d D 7.6 91/01/27 22:01:58 mckusick 6 5
c temporarily need to define NVM
e
s 00001/00002/00108
d D 7.5 91/01/07 10:19:21 mckusick 5 4
c locore.s now uses the standard assembler
e
s 00029/00049/00081
d D 7.4 90/12/16 16:35:07 bostic 4 3
c kernel reorg
e
s 00002/00002/00128
d D 7.3 90/11/08 17:52:54 mckusick 3 2
c need to specify output file for compile
e
s 00009/00027/00121
d D 7.2 90/11/01 13:07:37 karels 2 1
c assym.s depends on genassym.c; new make depend, other updates
e
s 00148/00000/00000
d D 7.1 90/05/08 17:20:43 mckusick 1 0
c date and time created 90/05/08 17:20:43 by mckusick
e
u
U
t
T
I 1
D 4
# Copyright (c) 1988 University of Utah.
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# This code is derived from software contributed to Berkeley by
# the Systems Programming Group of the University of Utah Computer
# Science Department.
#
# %sccs.include.redist.sh
#
E 4
#	%W% (Berkeley) %G%
#
D 4
#
E 4
# Makefile for 4.4 BSD
#
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/conf/``machineid''
# after which you should do
#	 config machineid
D 4
# Generic makefile changes should be made in
E 4
I 4
# Machine generic makefile changes should be made in
E 4
#	/sys/conf/Makefile.``machinetype''
D 4
# after which config should be rerun for all machines.
E 4
I 4
# after which config should be rerun for all machines of that type.
E 4
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas
D 2
# -DSWABIPS	compile in code to byte swap ip packets on 3Mb/s Ethernet
E 2
D 10
#
D 8
AS=	as
D 5
OAS=	oas
E 5
D 7
CC=	cc -Dconst=__const__ -Dvolatile=__volatile__ \
D 4
		-Dsigned=__signed__ -Dinline=__inline__ \
		-Uunix -fpcc-struct-return
E 4
I 4
	    -Dsigned=__signed__ -Dinline=__inline__ -Uunix -fpcc-struct-return
E 7
I 7
CC=	cc -Dconst=__const -Dvolatile=__volatile \
	    -Dsigned=__signed -Dinline=__inline -Uunix -fpcc-struct-return
E 8
I 8
AS=	as ${PROF}
CC=	cc ${PROF}
E 10
I 10


# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).
AS=	as ${DEBUG}
CC=	cc ${DEBUG}
E 10
CPP=	cpp
E 8
E 7
E 4
D 9
LD=	/bin/ld
E 9
I 9
LD=	ld
E 9
TOUCH=	touch -f -c
I 10
D 13
GPROF.EX=/usr/src/usr.lib/libc/csu/hp300/gmon.ex
E 13
E 10

I 10
# source tree is located via $S relative to the compilation directory
E 10
D 4
INCLUDES= -I. -I../sys
E 4
I 4
S=	../..
D 10
HP300=	../../hp300
E 10
I 10
HP300=	$S/hp300
E 10

INCLUDES= -I. -I$S -I$S/sys
E 4
D 6
COPTS=	${INCLUDES} ${IDENT} -DKERNEL -Dmc68020 -Dhp300 -DFPCOPROC -DREFBIT
E 6
I 6
D 8
COPTS=	${INCLUDES} ${IDENT} -DNVM -DKERNEL -Dmc68020 -Dhp300 -DFPCOPROC -DREFBIT
E 8
I 8
D 20
COPTS=	${INCLUDES} ${IDENT} -DKERNEL -Dmc68020 -Dhp300 -DFPCOPROC -DREFBIT
E 20
I 20
COPTS=	${INCLUDES} ${IDENT} -DKERNEL -Dmc68020 -Dhp300 -DFPCOPROC
E 20
E 8
E 6
CFLAGS=	-O ${COPTS}

I 10
# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.

NORMAL_C=	${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_C_C=	${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<

DRIVER_C=	${CC} -c ${CFLAGS} ${PROF} $<
DRIVER_C_C=	${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<

PROFILE_C=	${CC} -S -c ${COPTS} $<; \
D 13
		ex - $*.s < ${GPROF.EX}; \
		${AS} -o $@ $*.s; \
E 13
I 13
		sed -e s/_mcount/mcount/ -e s/subrmcount/subr_mcount/ <$*.s | \
		${AS} -o $@; \
E 13
		rm -f $*.s

NORMAL_S=	${CPP} ${COPTS} $< | ${AS} -o $@
NORMAL_S_C=	${CPP} ${COPTS} ${PARAM} $< | ${AS} -o $@

E 10
D 4
AHEADS=

E 4
%OBJS

%CFILES

I 10
# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
D 18
SYSTEM_OBJ=	locore.o ${OBJS} param.o ioconf.o
E 18
I 18
SYSTEM_OBJ=	locore.o ${OBJS} param.o ioconf.o vnode_if.o
E 18
D 20
#SYSTEM_DEP=	Makefile symbols.sort ${SYSTEM_OBJ}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
E 20
I 20
#SYSTEM_DEP=	Makefile symbols.sort ${SYSTEM_OBJ} libkern.a
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} libkern.a
E 20
D 11
SYSTEM_LD_HEAD=	@echo loading $@; rm -f $@
SYSTEM_LD=	@strip=-x; [ X${DEBUG} = X-g ] && strip=-X; \
E 11
I 11
SYSTEM_LD_HEAD=	rm -f $@
D 14
SYSTEM_LD=	@if [ X${DEBUG} = X-g ]; \
E 14
I 14
SYSTEM_LD=	-@if [ X${DEBUG} = X-g ]; \
E 14
		then strip=-X; \
		else strip=-x; \
		fi; \
D 12
		echo ${LD} $$strip -n -o $@ -e start '$${SYSTEM_OBJ}' vers.o; \
E 11
		${LD} $$strip -n -o $@ -e start ${SYSTEM_OBJ} vers.o
E 12
I 12
D 15
		echo ${LD} $$strip -n -o $@ -e start '$${SYSTEM_OBJ}' vers.o libquad.a; \
		${LD} $$strip -n -o $@ -e start ${SYSTEM_OBJ} vers.o libquad.a
E 15
I 15
D 19
		echo ${LD} $$strip -n -o $@ -e start '$${SYSTEM_OBJ}' vers.o ../../libkern/obj/libkern.a; \
		${LD} $$strip -n -o $@ -e start ${SYSTEM_OBJ} vers.o ../../libkern/obj/libkern.a
E 19
I 19
D 20
		echo ${LD} $$strip -n -o $@ -e start '$${SYSTEM_OBJ}' vers.o $S/libkern/obj/libkern.a; \
		${LD} $$strip -n -o $@ -e start ${SYSTEM_OBJ} vers.o $S/libkern/obj/libkern.a
E 20
I 20
		echo ${LD} $$strip -n -o $@ -e start '$${SYSTEM_OBJ}' vers.o libkern.a; \
		${LD} $$strip -n -o $@ -e start ${SYSTEM_OBJ} vers.o libkern.a
E 20
E 19
E 15
E 12
#SYSTEM_LD_TAIL= @echo rearranging symbols;\
#		symorder symbols.sort $@;\
SYSTEM_LD_TAIL=	@size $@; chmod 755 $@; \
		[ X${DEBUG} = X-g ] && { \
		echo cp $@ $@.gdb; rm -f $@.gdb; cp $@ $@.gdb; \
		echo strip -d $@; strip -d $@; } || true

E 10
%LOAD
I 10

I 20
libkern.a:
	-@if [ X${PROF} = X ]; \
D 21
	then ln -s ../../libkern/obj/libkern.a libkern.a; \
	else ln -s ../../libkern/obj/libkern_p.a libkern.a; \
E 21
I 21
	then ln -s $S/libkern/obj/libkern.a libkern.a; \
	else ln -s $S/libkern/obj/libkern_p.a libkern.a; \
E 21
	fi; \
D 21
	echo ln -s ../../libkern/obj/libkern.a libkern.a
E 21
I 21
	echo ln -s $S/libkern/obj/libkern.a libkern.a
E 21

E 20
newvers:
	sh $S/conf/newvers.sh
	${CC} $(CFLAGS) -c vers.c
E 10

clean:
D 11
	rm -f eddep *vmunix tags *.o locore.i [a-z]*.s \
E 11
I 11
	rm -f eddep *vmunix vmunix.gdb tags *.o locore.i [a-z]*.s \
E 11
D 4
		errs linterrs makelinks
E 4
I 4
		Errs errs linterrs makelinks
E 4

D 4
lint: param.c FRC
E 4
I 4
lint: /tmp param.c
E 4
	@lint -hbxn -DGENERIC -Dvolatile= ${COPTS} ${PARAM} -UKGDB \
D 4
	  ../hp300/Locore.c ${CFILES} ../hp300/swapgeneric.c ioconf.c param.c|\
E 4
I 4
	    ${HP300}/hp300/Locore.c ${CFILES} ${HP300}/hp300/swapgeneric.c \
	    ioconf.c param.c| \
E 4
	    grep -v 'struct/union .* never defined' | \
	    grep -v 'possible pointer alignment problem'

D 4
../hp300/symbols.sort: ../hp300/symbols.raw
	grep -v '^#' ../hp300/symbols.raw \
	    | sed 's/^	//' | sort -u > ../hp300/symbols.sort
E 4
I 4
symbols.sort: ${HP300}/hp300/symbols.raw
	grep -v '^#' ${HP300}/hp300/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.sort
E 4

D 4
locore.o: assym.s ${AHEADS} ../hp300/vectors.s ../hp300/locore.s \
    ../hp300/trap.h machine/psl.h machine/pte.h ../hp300/cpu.h
	cat assym.s ../hp300/vectors.s ../hp300/locore.s > locore.c
	${CC} -E -DLOCORE -I../hp300 ${COPTS} locore.c > locore.i
	@echo 'as -o locore.o $${AHEADS} locore.i'
	@${OAS} -o locore.o ${AHEADS} locore.i
E 4
I 4
locore.o: assym.s ${HP300}/hp300/vectors.s ${HP300}/hp300/locore.s 
D 8
locore.o: ${HP300}/include/trap.h ${HP300}/include/psl.h ${HP300}/include/pte.h
E 8
I 8
locore.o: ${HP300}/include/trap.h ${HP300}/include/psl.h ${HP300}/hp300/pte.h
E 8
locore.o: ${HP300}/include/cpu.h
D 8
	cat assym.s ${HP300}/hp300/vectors.s ${HP300}/hp300/locore.s > locore.c
	${CC} -E -DLOCORE ${COPTS} locore.c > locore.i
	@echo 'as -o locore.o locore.i'
D 5
	@${OAS} -o locore.o locore.i
E 5
I 5
	@${AS} -o locore.o locore.i
E 5
E 4
	@rm locore.i
E 8
I 8
	${CPP} -DLOCORE ${COPTS} ${HP300}/hp300/locore.s | ${AS} -o locore.o
E 8

D 4
FRC:

E 4
# the following is necessary because autoconf.o depends on #if GENERIC
autoconf.o: Makefile

# the following are necessary because the files depend on the types of
# hp cpu's included in the system configuration
D 20
clock.o machdep.o autoconf.o conf.o: Makefile
E 20
I 20
machdep.o sys_machdep.o pmap.o pmap_bootstrap.o trap.o dma.o: Makefile
E 20

D 16
# depend on network configuration
af.o uipc_proto.o locore.o: Makefile
E 16
I 16
# depend on network or filesystem configuration
D 23
af.o uipc_proto.o vfs_conf.o locore.o: Makefile
E 23
I 23
uipc_proto.o vfs_conf.o locore.o: Makefile
E 23
E 16

# depend on maxusers
assym.s: Makefile

D 2
assym.s: ../sys/param.h machine/pte.h ../sys/buf.h ../sys/vmparam.h \
    ../sys/vmmeter.h ../sys/dir.h ../sys/cmap.h ../sys/map.h ../sys/syscall.h \
    ../sys/proc.h ../sys/msgbuf.h ../sys/text.h ../sys/user.h ../sys/mbuf.h \
    machine/cpu.h machine/trap.h machine/psl.h machine/reg.h machine/clockreg.h
E 2
I 2
assym.s: genassym
	./genassym >assym.s

genassym:
E 2
D 3
	${CC} ${INCLUDES} ${IDENT} ${PARAM} -Dmc68020 -Dhp300 ../hp300/genassym.c
E 3
I 3
D 4
	${CC} ${INCLUDES} ${IDENT} ${PARAM} -Dmc68020 -Dhp300 -o genassym ../hp300/genassym.c
E 4
I 4
	${CC} ${INCLUDES} ${IDENT} ${PARAM} -Dmc68020 -Dhp300 -o genassym \
	    ${HP300}/hp300/genassym.c
E 4
E 3
D 2
	./a.out >assym.s; rm -f a.out
E 2

D 2
depend:	assym.s param.c
	${CC} -M ${COPTS} ${CFILES} param.c ioconf.c | \
	sed -e ':loop' \
	    -e 's/\.\.\/[^ /]*\/\.\./../' \
	    -e 's/ \.\// /' \
	    -e 't loop' | \
	awk ' { if ($$1 != prev) { print rec; rec = $$0; prev = $$1; } \
		else { if (length(rec $$2) > 78) { print rec; rec = $$0; } \
		       else rec = rec " " $$2 } } \
	      END { print rec } ' > makedep
	echo '/^# DO NOT DELETE THIS LINE/+1,$$d' >eddep
	echo '$$r makedep' >>eddep
	echo 'w' >>eddep
	cp Makefile Makefile.bak
	ex - Makefile < eddep
	rm eddep makedep
E 2
I 2
D 18
depend: assym.s param.c
E 18
I 18
depend: assym.s param.c vnode_if.h
E 18
D 8
	mkdep ${COPTS} ${CFILES} ioconf.c
E 8
I 8
	mkdep ${COPTS} ${CFILES} ioconf.c param.c
E 8
D 3
	mkdep -a -p ${INCLUDES} ${IDENT} ${PARAM} -o genassym ../hp300/genassym.c
E 3
I 3
D 4
	mkdep -a -p ${INCLUDES} ${IDENT} ${PARAM} ../hp300/genassym.c
E 4
I 4
	mkdep -a -p ${INCLUDES} ${IDENT} ${PARAM} ${HP300}/hp300/genassym.c
E 4
E 3
E 2

links:
D 4
	egrep '#if' ${CFILES} | sed -f ../conf/defines | \
E 4
I 4
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
E 4
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink

tags:
D 4
	@echo "see ../kern/Makefile for tags"
E 4
I 4
	@echo "see $S/kern/Makefile for tags"
E 4

D 4
print:
	@pr -f Makefile ../sys/TODO linterrs
D 2
	@/usr/ucb/ctags -x ${CFILES} | pr -f -h XREF
E 2
I 2
	@ctags -x ${CFILES} | pr -f -h XREF
E 2
	@(size vmunix *.o) | pr -f -h sizes
	@ls -ls | pr -f
D 2
	@cd ../h; ls -ls | pr -f ; pr -f *.h
E 2
I 2
	@cd ../sys; ls -ls | pr -f ; pr -f *.h
E 2
	@echo 'once upon a time ...'
	@cd ../hp300; pr -f Locore.c vectors.s locore.s
	@pr -f ${CFILES}

E 4
ioconf.o: ioconf.c
	${CC} -c ${CFLAGS} ioconf.c

D 4
param.c: ../conf/param.c
	-rm -f param.c
	cp ../conf/param.c .
E 4
I 4
param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .
E 4

param.o: param.c Makefile
	${CC} -c ${CFLAGS} ${PARAM} param.c

I 17
vnode_if.c: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	sh $S/kern/vnode_if.sh $S/kern/vnode_if.src
vnode_if.h: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	sh $S/kern/vnode_if.sh $S/kern/vnode_if.src

E 17
%RULES
D 2

# DO NOT DELETE THIS LINE -- make depend uses it

E 2
E 1
