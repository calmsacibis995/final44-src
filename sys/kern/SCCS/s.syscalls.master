h44535
s 00001/00001/00354
d D 8.6 95/03/30 14:09:36 mckusick 59 58
c first argument to mount is now a string pointer
e
s 00317/00238/00038
d D 8.5 95/02/14 10:24:46 cgd 58 57
c new syscalls.master format.
e
s 00001/00001/00275
d D 8.4 94/10/18 15:18:48 mckusick 57 56
c unwhiteout => undelete
e
s 00001/00001/00275
d D 8.3 94/07/12 23:36:11 pendry 56 55
c add unwhiteout system call to delete a whiteout entry
e
s 00004/00004/00272
d D 8.2 94/01/13 17:39:19 bostic 55 54
c the Sparc isn't handling structures passed to the kernel correctly
c change LFS routines that take fsid_t's to take fsid_t *'s.
e
s 00000/00000/00276
d D 8.1 93/06/16 16:32:36 mckusick 54 53
c 4.4BSD snapshot (revision 8.1)
e
s 00002/00002/00274
d D 7.47 93/06/16 16:31:53 mckusick 53 51
c indir => syscall; __indir => __syscall
e
s 00000/00000/00276
d R 8.1 93/06/14 15:28:59 bostic 52 51
c 4.4BSD snapshot (revision 8.1)
e
s 00005/00005/00271
d D 7.46 93/06/14 15:28:51 bostic 51 49
c make function call name match system call name
e
s 00000/00000/00276
d R 8.1 93/06/10 22:01:14 bostic 50 49
c 4.4BSD snapshot (revision 8.1)
e
s 00002/00002/00274
d D 7.45 93/06/02 10:59:27 hibler 49 48
c add mlock/munlock
e
s 00007/00007/00269
d D 7.44 93/05/25 14:38:16 mckusick 48 47
c add pathconf and fpathconf; __lseek, __truncate __{g,s}etlimit become
c the standard entries
e
s 00005/00005/00271
d D 7.43 93/05/12 20:19:55 mckusick 47 46
c update syscalls.master
e
s 00001/00001/00275
d D 7.42 93/05/03 18:15:36 bostic 46 45
c change sysctl to __sysctl
e
s 00006/00006/00270
d D 7.41 93/04/04 13:13:54 mckusick 45 44
c {get,set}host{name,id}, pagesize, and getkerninfo become COMPAT
e
s 00001/00001/00275
d D 7.40 93/01/31 23:09:12 karels 44 43
c add sysctl
e
s 00001/00001/00275
d D 7.39 93/01/03 17:00:55 mckusick 43 42
c getpgrp takes no parameters
e
s 00001/00001/00275
d D 7.38 92/08/26 13:38:56 bostic 42 41
c lfs_markv only takes 4 longs, now
e
s 00002/00002/00274
d D 7.37 92/07/13 11:25:29 mckusick 41 40
c put back a semblance of setreuid and setregid compatibility
e
s 00016/00005/00260
d D 7.36 92/07/09 16:54:43 torek 40 39
c move new lseek, truncate, and ftruncate so they can have correctly aligned
c parameters; add __indir that takes (and returns) a quad to maintain 
c stack alignment
e
s 00002/00002/00263
d D 7.35 92/07/09 14:43:58 torek 39 38
c setreuid and setregid become obsolete
e
s 00005/00005/00260
d D 7.34 92/06/23 15:34:14 mckusick 38 37
c add compat routines for mmap and getdirentries
e
s 00011/00011/00254
d D 7.33 92/05/31 21:40:18 mckusick 37 35
c compat versions of stat/lstat/fstat; new seek, truncate, get/setrlimit
e
s 00008/00008/00257
d R 7.33 92/05/27 20:39:49 mckusick 36 35
c add get/setrlimit; make new entry points __name
e
s 00001/00001/00264
d D 7.32 92/05/14 17:56:36 mckusick 35 34
c add indir as a real system call
e
s 00013/00004/00252
d D 7.31 92/05/13 14:47:26 mckusick 34 33
c new syscalls for 64-bit file sizes, 32-bit uid, gid, and dev's
e
s 00002/00006/00254
d D 7.30 92/04/20 23:29:56 mckusick 33 32
c sigstack becomes COMPAT; sigaltstack becomes real
e
s 00002/00003/00258
d D 7.29 92/01/14 12:09:13 mckusick 32 31
c merge nfssvc and async_daemon into nfssvc
e
s 00007/00000/00254
d D 7.28 91/12/09 15:20:33 mckusick 31 30
c LFS syscalls are conditional on LFS being defined
e
s 00004/00004/00250
d D 7.27 91/12/06 16:10:05 bostic 30 29
c LFS V2; add system calls for cleaner
e
s 00003/00003/00251
d D 7.26 91/03/25 14:29:57 karels 29 28
c remove execv (library didn't use), obsolete vhangup, compat for (stub) oquota
e
s 00001/00001/00253
d D 7.25 91/03/05 10:23:55 bostic 28 27
c exec is compat now, C library does the work
e
s 00001/00001/00253
d D 7.24 91/02/19 14:35:44 bostic 27 26
c setpgrp renamed to setpgid
e
s 00001/00001/00253
d D 7.23 90/06/25 10:12:18 karels 26 25
c setlogin has one parameter only
e
s 00015/00013/00239
d D 7.22 90/06/21 22:34:22 karels 25 24
c deprecate creat, setreuid, setregid; add set{,e}{u,g}id, gete[ug]id,
c getppid; revoke now only one arg (marc)
e
s 00002/00002/00250
d D 7.21 90/05/31 14:58:33 karels 24 23
c remove "o" from SYS_ defn's for break, vadvise (for libc)
e
s 00004/00000/00248
d D 7.20 90/05/15 16:02:22 mckusick 23 22
c add 171 shmsys conditional on SYSVSHM
e
s 00001/00001/00247
d D 7.19 90/05/14 13:47:11 mckusick 22 21
c nfssvc goes from 3 => 5 parameters (for TCP based NFS)
e
s 00001/00001/00247
d D 7.18 90/05/07 19:35:44 mckusick 21 18
c add flags parameter to revoke
e
s 00001/00001/00247
d R 7.19 90/05/07 12:24:04 marc 20 19
c whoops, it's revoke (vgone is internal name)
e
s 00001/00001/00247
d R 7.18 90/05/07 12:19:09 marc 19 18
c add vgone
e
s 00002/00002/00246
d D 7.17 90/04/27 10:01:59 mckusick 18 17
c old setquota becomes quotactl; old quota is a noop to support old logins
e
s 00026/00004/00222
d D 7.16 90/03/08 16:05:39 mckusick 17 16
c delete exportfs system call; fill out vendor reserved system calls
e
s 00001/00001/00225
d D 7.15 90/03/06 21:00:10 mckusick 16 15
c add additional flags parameter to getfsstat
e
s 00001/00001/00225
d D 7.14 90/02/20 16:40:10 marc 15 14
c add getkerninfo
e
s 00001/00001/00225
d D 7.13 90/02/20 10:55:35 mckusick 14 13
c add mkfifo for POSIX
e
s 00001/00001/00225
d D 7.12 90/02/20 10:51:44 marc 13 12
c add kinfo system call
e
s 00001/00001/00225
d D 7.11 89/12/21 10:40:47 mckusick 12 11
c nfssvc now takes three arguments (from Macklem)
e
s 00002/00002/00224
d D 7.10 89/11/20 18:15:39 marc 11 10
c vhangup replaced with "revoke"
e
s 00002/00001/00224
d D 7.9 89/08/30 15:28:18 mckusick 10 9
c add async_daemon for NFS
e
s 00013/00009/00212
d D 7.8 89/08/30 15:26:14 karels 9 8
c new signals
e
s 00002/00002/00219
d D 7.7 89/08/30 15:25:23 karels 8 7
c rename {s,g}etlog{name,in}
e
s 00026/00006/00195
d D 7.6 89/06/27 22:44:52 mckusick 7 6
c add NFS specific calls nfssvc, getfh, and exportfs
e
s 00001/00001/00200
d D 7.5 89/06/06 23:51:22 mckusick 6 5
c add getfsstat
e
s 00003/00003/00198
d D 7.4 89/06/06 18:37:24 mckusick 5 4
c add fchdir, chflags, and fchflags
e
s 00002/00002/00199
d D 7.3 89/05/04 12:40:57 kfall 4 3
c add system calls for get/setlogname
e
s 00010/00002/00191
d D 7.2 89/05/04 12:38:22 mckusick 3 2
c merge in vnodes
e
s 00000/00000/00193
d D 7.1 89/04/08 17:37:24 karels 2 1
c rev 7
e
s 00193/00000/00000
d D 1.1 89/04/08 17:34:28 karels 1 0
c master input for init_sysent.c, etc
e
u
U
t
T
I 1
	%W% (Berkeley) %G%
D 58
; System call name/number master file.
; Processed to created init_sysent.c, syscalls.c and syscall.h.

; Columns: number type nargs name altname/comments
E 58
I 58
; System call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
E 58
;	number	system call number, must be in order
D 58
;	type	one of STD, OBSOL, UNIMPL, COMPAT
;	nargs	number of arguments
;	name	name of syscall routine
;	altname	name of system call if different
;		for UNIMPL/OBSOL, name continues with comments

E 58
I 58
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
E 58
; types:
;	STD	always included
D 58
;	COMPAT	included on COMPAT #ifdef
I 25
;	LIBCOMPAT included on COMPAT #ifdef, and placed in syscall.h
E 25
;	OBSOL	obsolete, not included in system, only specifies name
;	UNIMPL	not implemented, placeholder only

E 58
I 58
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
E 58
; #ifdef's, etc. may be included, and are copied to the output files.
I 58
; #include's are copied to the syscall switch definition file only.
E 58

I 58
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>

E 58
; Reserved/unimplemented system calls in the range 0-150 inclusive
; are reserved for use in future Berkeley releases.
; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

D 35
0	UNIMPL	0 indir or out-of-range
E 35
I 35
D 38
0	STD	8 indir
E 38
I 38
D 53
0	STD	0 nosys indir
E 53
I 53
D 58
0	STD	0 nosys syscall
E 53
E 38
E 35
D 51
1	STD	1 rexit exit
E 51
I 51
1	STD	1 exit
E 51
2	STD	0 fork
3	STD	3 read
4	STD	3 write
5	STD	3 open
6	STD	1 close
7	STD	4 wait4
D 25
8	STD	2 creat
E 25
I 25
8	COMPAT	2 creat
E 25
9	STD	2 link
10	STD	1 unlink
D 28
11	STD	2 execv
E 28
I 28
D 29
11	COMPAT	2 execv
E 29
I 29
11	OBSOL	2 execv
E 29
E 28
12	STD	1 chdir
D 5
13	OBSOL	0 time
E 5
I 5
13	STD	1 fchdir
E 5
14	STD	3 mknod
15	STD	2 chmod
16	STD	3 chown
D 24
17	STD	1 obreak
E 24
I 24
17	STD	1 obreak break
E 24
D 6
18	OBSOL	0 stat
E 6
I 6
D 16
18	STD	2 getfsstat
E 16
I 16
18	STD	3 getfsstat
E 16
E 6
D 47
19	STD	3 lseek
E 47
I 47
19	COMPAT	3 lseek
E 47
20	STD	0 getpid
D 3
21	STD	3 smount mount
22	STD	1 umount
E 3
I 3
21	STD	4 mount
22	STD	2 unmount
E 3
D 25
23	OBSOL	0 setuid
E 25
I 25
23	STD	1 setuid
E 25
24	STD	0 getuid
D 25
25	OBSOL	0 stime
E 25
I 25
25	STD	0 geteuid
E 25
26	STD	4 ptrace
27	STD	3 recvmsg
28	STD	3 sendmsg
29	STD	6 recvfrom
30	STD	3 accept
31	STD	3 getpeername
32	STD	3 getsockname
D 51
33	STD	2 saccess access
E 51
I 51
33	STD	2 access
E 51
D 5
34	OBSOL	0 nice
35	OBSOL	0 ftime
E 5
I 5
34	STD	2 chflags
35	STD	2 fchflags
E 5
36	STD	0 sync
37	STD	2 kill
D 37
38	STD	2 stat
E 37
I 37
38	COMPAT	2 stat
E 37
D 25
39	OBSOL	0 setpgrp
E 25
I 25
39	STD	0 getppid
E 25
D 37
40	STD	2 lstat
E 37
I 37
40	COMPAT	2 lstat
E 37
41	STD	2 dup
42	STD	0 pipe
D 25
43	OBSOL	0 times
E 25
I 25
43	STD	0 getegid
E 25
44	STD	4 profil
E 58
I 58
0	STD		{ int nosys(void); } syscall
1	STD		{ int exit(int rval); }
2	STD		{ int fork(void); }
3	STD		{ int read(int fd, char *buf, u_int nbyte); }
4	STD		{ int write(int fd, char *buf, u_int nbyte); }
5	STD		{ int open(char *path, int flags, int mode); }
6	STD		{ int close(int fd); }
7	STD		{ int wait4(int pid, int *status, int options, \
			    struct rusage *rusage); }
8	COMPAT_43	{ int creat(char *path, int mode); }
9	STD		{ int link(char *path, char *link); }
10	STD		{ int unlink(char *path); }
11	OBSOL		execv
12	STD		{ int chdir(char *path); }
13	STD		{ int fchdir(int fd); }
14	STD		{ int mknod(char *path, int mode, int dev); }
15	STD		{ int chmod(char *path, int mode); }
16	STD		{ int chown(char *path, int uid, int gid); }
17	STD		{ int obreak(char *nsize); } break
18	STD		{ int getfsstat(struct statfs *buf, long bufsize, \
			    int flags); }
19	COMPAT_43	{ long lseek(int fd, long offset, int whence); }
20	STD		{ pid_t getpid(void); }
D 59
21	STD		{ int mount(int type, char *path, int flags, \
E 59
I 59
21	STD		{ int mount(char *type, char *path, int flags, \
E 59
			    caddr_t data); }
22	STD		{ int unmount(char *path, int flags); }
23	STD		{ int setuid(uid_t uid); }
24	STD		{ uid_t getuid(void); }
25	STD		{ uid_t geteuid(void); }
26	STD		{ int ptrace(int req, pid_t pid, caddr_t addr, \
			    int data); }
27	STD		{ int recvmsg(int s, struct msghdr *msg, int flags); }
28	STD		{ int sendmsg(int s, caddr_t msg, int flags); }
29	STD		{ int recvfrom(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t from, int *fromlenaddr); }
30	STD		{ int accept(int s, caddr_t name, int *anamelen); }
31	STD		{ int getpeername(int fdes, caddr_t asa, int *alen); }
32	STD		{ int getsockname(int fdes, caddr_t asa, int *alen); }
33	STD		{ int access(char *path, int flags); }
34	STD		{ int chflags(char *path, int flags); }
35	STD		{ int fchflags(int fd, int flags); }
36	STD		{ int sync(void); }
37	STD		{ int kill(int pid, int signum); }
38	COMPAT_43	{ int stat(char *path, struct ostat *ub); }
39	STD		{ pid_t getppid(void); }
40	COMPAT_43	{ int lstat(char *path, struct ostat *ub); }
41	STD		{ int dup(u_int fd); }
42	STD		{ int pipe(void); }
43	STD		{ gid_t getegid(void); }
44	STD		{ int profil(caddr_t samples, u_int size, \
			    u_int offset, u_int scale); }
E 58
#ifdef KTRACE
D 58
45	STD	4 ktrace
E 58
I 58
45	STD		{ int ktrace(char *fname, int ops, int facs, \
			    int pid); }
E 58
#else
D 25
45	UNIMPL	0 nosys
E 25
I 25
D 58
45	UNIMPL	0 ktrace
E 58
I 58
45	UNIMPL		ktrace
E 58
E 25
#endif
D 9
46	OBSOL	0 setgid
E 9
I 9
D 58
46	STD	3 sigaction
E 9
47	STD	0 getgid
D 9
48	OBSOL	0 sigsys
E 9
I 9
48	STD	2 sigprocmask
E 9
D 8
49	STD	2 getlogname
50	STD	2 setlogname
E 8
I 8
49	STD	2 getlogin
D 26
50	STD	2 setlogin
E 26
I 26
50	STD	1 setlogin
E 26
E 8
D 51
51	STD	1 sysacct acct
E 51
I 51
51	STD	1 acct
E 51
D 9
52	OBSOL	0 set phys addr
53	OBSOL	0 lock in core
E 9
I 9
52	STD	0 sigpending
D 33
#ifdef notyet
53	STD	3 sigaltstack
#else
53	UNIMPL	3 sigaltstack
#endif
E 33
I 33
53	STD	2 sigaltstack
E 33
E 9
54	STD	3 ioctl
55	STD	1 reboot
D 11
56	OBSOL	0 mpxchan
E 11
I 11
D 21
56	STD	1 revoke
E 21
I 21
D 25
56	STD	2 revoke
E 25
I 25
56	STD	1 revoke
E 25
E 21
E 11
57	STD	2 symlink
58	STD	3 readlink
59	STD	3 execve
60	STD	1 umask
61	STD	1 chroot
D 37
62	STD	2 fstat
E 37
I 37
62	COMPAT	2 fstat
E 37
D 13
63	UNIMPL	0 nosys
E 13
I 13
D 15
63	STD	4 getkinfo
E 15
I 15
D 45
63	STD	4 getkerninfo
E 15
E 13
64	STD	0 getpagesize
E 45
I 45
63	COMPAT	4 getkerninfo
64	COMPAT	0 getpagesize
E 45
65	STD	2 msync
66	STD	0 vfork
67	OBSOL	0 vread
68	OBSOL	0 vwrite
69	STD	1 sbrk
70	STD	1 sstk
D 34
71	STD	6 smmap mmap
E 34
I 34
D 38
71	STD	7 smmap mmap
E 38
I 38
D 51
71	COMPAT	7 smmap mmap
E 51
I 51
71	COMPAT	7 mmap
E 51
E 38
E 34
D 24
72	STD	1 ovadvise
E 24
I 24
72	STD	1 ovadvise vadvise
E 24
73	STD	2 munmap
74	STD	3 mprotect
75	STD	3 madvise
D 11
76	STD	1 vhangup
E 11
I 11
D 29
76	COMPAT	0 vhangup
E 29
I 29
76	OBSOL	0 vhangup
E 29
E 11
77	OBSOL	0 vlimit
78	STD	3 mincore
79	STD	2 getgroups
80	STD	2 setgroups
D 43
81	STD	1 getpgrp
E 43
I 43
81	STD	0 getpgrp
E 43
D 27
82	STD	2 setpgrp
E 27
I 27
82	STD	2 setpgid
E 27
83	STD	3 setitimer
84	COMPAT	0 wait
85	STD	1 swapon
86	STD	2 getitimer
D 45
87	STD	2 gethostname
88	STD	2 sethostname
E 45
I 45
87	COMPAT	2 gethostname
88	COMPAT	2 sethostname
E 45
89	STD	0 getdtablesize
90	STD	2 dup2
91	UNIMPL	2 getdopt
92	STD	3 fcntl
93	STD	5 select
94	UNIMPL	2 setdopt
95	STD	1 fsync
96	STD	3 setpriority
97	STD	3 socket
98	STD	3 connect
99	COMPAT	3 accept
100	STD	2 getpriority
101	COMPAT	4 send
102	COMPAT	4 recv
103	STD	1 sigreturn
104	STD	3 bind
105	STD	5 setsockopt
106	STD	2 listen
107	OBSOL	0 vtimes
D 9
108	STD	3 sigvec
109	STD	1 sigblock
110	STD	1 sigsetmask
111	STD	1 sigpause
E 9
I 9
108	COMPAT	3 sigvec
109	COMPAT	1 sigblock
110	COMPAT	1 sigsetmask
111	STD	1 sigsuspend
E 9
D 33
112	STD	2 sigstack
E 33
I 33
112	COMPAT	2 sigstack
E 33
113	COMPAT	3 recvmsg
114	COMPAT	3 sendmsg
E 58
I 58
46	STD		{ int sigaction(int signum, struct sigaction *nsa, \
			    struct sigaction *osa); }
47	STD		{ gid_t getgid(void); }
48	STD		{ int sigprocmask(int how, sigset_t mask); }
49	STD		{ int getlogin(char *namebuf, u_int namelen); }
50	STD		{ int setlogin(char *namebuf); }
51	STD		{ int acct(char *path); }
52	STD		{ int sigpending(void); }
53	STD		{ int sigaltstack(struct sigaltstack *nss, \
			    struct sigaltstack *oss); }
54	STD		{ int ioctl(int fd, u_long com, caddr_t data); }
55	STD		{ int reboot(int opt); }
56	STD		{ int revoke(char *path); }
57	STD		{ int symlink(char *path, char *link); }
58	STD		{ int readlink(char *path, char *buf, int count); }
59	STD		{ int execve(char *path, char **argp, char **envp); }
60	STD		{ int umask(int newmask); }
61	STD		{ int chroot(char *path); }
62	COMPAT_43	{ int fstat(int fd, struct ostat *sb); }
63	COMPAT_43	{ int getkerninfo(int op, char *where, int *size, \
			    int arg); }
64	COMPAT_43	{ int getpagesize(void); }
65	STD		{ int msync(caddr_t addr, int len); }
66	STD		{ int vfork(void); }
67	OBSOL		vread
68	OBSOL		vwrite
69	STD		{ int sbrk(int incr); }
70	STD		{ int sstk(int incr); }
71	COMPAT_43	{ int mmap(caddr_t addr, int len, int prot, \
			    int flags, int fd, long pos); }
72	STD		{ int ovadvise(int anom); } vadvise
73	STD		{ int munmap(caddr_t addr, int len); }
74	STD		{ int mprotect(caddr_t addr, int len, int prot); }
75	STD		{ int madvise(caddr_t addr, int len, int behav); }
76	OBSOL		vhangup
77	OBSOL		vlimit
78	STD		{ int mincore(caddr_t addr, int len, char *vec); }
79	STD		{ int getgroups(u_int gidsetsize, gid_t *gidset); }
80	STD		{ int setgroups(u_int gidsetsize, gid_t *gidset); }
81	STD		{ int getpgrp(void); }
82	STD		{ int setpgid(int pid, int pgid); }
83	STD		{ int setitimer(u_int which, struct itimerval *itv, \
			    struct itimerval *oitv); }
84	COMPAT_43	{ int wait(void); }
85	STD		{ int swapon(char *name); }
86	STD		{ int getitimer(u_int which, struct itimerval *itv); }
87	COMPAT_43	{ int gethostname(char *hostname, u_int len); }
88	COMPAT_43	{ int sethostname(char *hostname, u_int len); }
89	STD		{ int getdtablesize(void); }
90	STD		{ int dup2(u_int from, u_int to); }
91	UNIMPL		getdopt
92	STD		{ int fcntl(int fd, int cmd, void *arg); }
93	STD		{ int select(u_int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, struct timeval *tv); }
94	UNIMPL		setdopt
95	STD		{ int fsync(int fd); }
96	STD		{ int setpriority(int which, int who, int prio); }
97	STD		{ int socket(int domain, int type, int protocol); }
98	STD		{ int connect(int s, caddr_t name, int namelen); }
99	COMPAT_43	{ int accept(int s, caddr_t name, int *anamelen); }
100	STD		{ int getpriority(int which, int who); }
101	COMPAT_43	{ int send(int s, caddr_t buf, int len, int flags); }
102	COMPAT_43	{ int recv(int s, caddr_t buf, int len, int flags); }
103	STD		{ int sigreturn(struct sigcontext *sigcntxp); }
104	STD		{ int bind(int s, caddr_t name, int namelen); }
105	STD		{ int setsockopt(int s, int level, int name, \
			    caddr_t val, int valsize); }
106	STD		{ int listen(int s, int backlog); }
107	OBSOL		vtimes
108	COMPAT_43	{ int sigvec(int signum, struct sigvec *nsv, \
			    struct sigvec *osv); }
109	COMPAT_43	{ int sigblock(int mask); }
110	COMPAT_43	{ int sigsetmask(int mask); }
111	STD		{ int sigsuspend(int mask); }
112	COMPAT_43	{ int sigstack(struct sigstack *nss, \
			    struct sigstack *oss); }
113	COMPAT_43	{ int recvmsg(int s, struct omsghdr *msg, int flags); }
114	COMPAT_43	{ int sendmsg(int s, caddr_t msg, int flags); }
E 58
#ifdef TRACE
D 58
115	STD	2 vtrace
E 58
I 58
115	STD		{ int vtrace(int request, int value); }
E 58
#else
D 58
115	OBSOL	2 vtrace
E 58
I 58
115	OBSOL		vtrace
E 58
#endif
D 58
116	STD	2 gettimeofday
117	STD	2 getrusage
118	STD	5 getsockopt
E 58
I 58
116	STD		{ int gettimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
117	STD		{ int getrusage(int who, struct rusage *rusage); }
118	STD		{ int getsockopt(int s, int level, int name, \
			    caddr_t val, int *avalsize); }
E 58
#ifdef vax
D 58
119	STD	1 resuba
E 58
I 58
119	STD		{ int resuba(int value); }
E 58
#else
D 58
119	UNIMPL	0 nosys
E 58
I 58
119	UNIMPL		resuba
E 58
#endif
D 58
120	STD	3 readv
121	STD	3 writev
122	STD	2 settimeofday
123	STD	3 fchown
124	STD	2 fchmod
125	COMPAT	6 recvfrom
D 25
126	STD	2 setreuid
127	STD	2 setregid
E 25
I 25
D 39
126	LIBCOMPAT	2 setreuid
127	LIBCOMPAT	2 setregid
E 39
I 39
D 41
126	OBSOL	2 setreuid
127	OBSOL	2 setregid
E 41
I 41
126	COMPAT	2 setreuid
127	COMPAT	2 setregid
E 41
E 39
E 25
128	STD	2 rename
D 47
129	STD	2 truncate
130	STD	2 ftruncate
E 47
I 47
129	COMPAT	2 truncate
130	COMPAT	2 ftruncate
E 47
131	STD	2 flock
D 14
132	UNIMPL	0 nosys
E 14
I 14
132	STD	2 mkfifo
E 14
133	STD	6 sendto
134	STD	2 shutdown
135	STD	5 socketpair
136	STD	2 mkdir
137	STD	1 rmdir
138	STD	2 utimes
139	OBSOL	0 4.2 sigreturn
140	STD	2 adjtime
141	COMPAT	3 getpeername
D 45
142	STD	0 gethostid
143	STD	1 sethostid
E 45
I 45
142	COMPAT	0 gethostid
143	COMPAT	1 sethostid
E 45
D 47
144	STD	2 getrlimit
145	STD	2 setrlimit
E 47
I 47
144	COMPAT	2 getrlimit
145	COMPAT	2 setrlimit
E 47
D 9
146	STD	2 killpg
E 9
I 9
146	COMPAT	2 killpg
E 9
147	STD	0 setsid
D 18
148	STD	2 setquota
149	STD	4 qquota quota
E 18
I 18
148	STD	4 quotactl
D 29
149	STD	4 oldquota quota
E 29
I 29
149	COMPAT	4 quota
E 29
E 18
150	COMPAT	3 getsockname
E 58
I 58
120	STD		{ int readv(int fd, struct iovec *iovp, u_int iovcnt); }
121	STD		{ int writev(int fd, struct iovec *iovp, \
			    u_int iovcnt); }
122	STD		{ int settimeofday(struct timeval *tv, \
			    struct timezone *tzp); }
123	STD		{ int fchown(int fd, int uid, int gid); }
124	STD		{ int fchmod(int fd, int mode); }
125	COMPAT_43	{ int recvfrom(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t from, int *fromlenaddr); }
126	COMPAT_43	{ int setreuid(int ruid, int euid); }
127	COMPAT_43	{ int setregid(int rgid, int egid); }
128	STD		{ int rename(char *from, char *to); }
129	COMPAT_43	{ int truncate(char *path, long length); }
130	COMPAT_43	{ int ftruncate(int fd, long length); }
131	STD		{ int flock(int fd, int how); }
132	STD		{ int mkfifo(char *path, int mode); }
133	STD		{ int sendto(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t to, int tolen); }
134	STD		{ int shutdown(int s, int how); }
135	STD		{ int socketpair(int domain, int type, int protocol, \
			    int *rsv); }
136	STD		{ int mkdir(char *path, int mode); }
137	STD		{ int rmdir(char *path); }
138	STD		{ int utimes(char *path, struct timeval *tptr); }
139	OBSOL		4.2 sigreturn
140	STD		{ int adjtime(struct timeval *delta, \
			    struct timeval *olddelta); }
141	COMPAT_43	{ int getpeername(int fdes, caddr_t asa, int *alen); }
142	COMPAT_43	{ int32_t gethostid(void); }
143	COMPAT_43	{ int sethostid(int32_t hostid); }
144	COMPAT_43	{ int getrlimit(u_int which, struct ogetrlimit *rlp); }
145	COMPAT_43	{ int setrlimit(u_int which, struct ogetrlimit *rlp); }
146	COMPAT_43	{ int killpg(int pgid, int signum); }
147	STD		{ int setsid(void); }
148	STD		{ int quotactl(char *path, int cmd, int uid, \
			    caddr_t arg); }
149	COMPAT_43	{ int quota(void); }
150	COMPAT_43	{ int getsockname(int fdec, caddr_t asa, int *alen); }
E 58
I 3
D 4
151	UNIMPL	0 nosys
152	UNIMPL	0 nosys
E 4
I 4
D 7
151	STD	2 getlogname
152	STD	2 setlogname
E 7
I 7

; Syscalls 151-180 inclusive are reserved for vendor-specific
; system calls.  (This includes various calls added for compatibity
; with other Unix variants.)
I 25
; Some of these calls are now supported by BSD...
E 25
D 58
151	UNIMPL	0 nosys
152	UNIMPL	0 nosys
E 7
E 4
153	UNIMPL	0 nosys
154	UNIMPL	0 nosys
E 58
I 58
151	UNIMPL
152	UNIMPL
153	UNIMPL
154	UNIMPL
E 58
I 7
#ifdef NFS
D 12
155	STD	1 nfssvc
E 12
I 12
D 22
155	STD	3 nfssvc
E 22
I 22
D 32
155	STD	5 nfssvc
E 32
I 32
D 58
155	STD	2 nfssvc
E 58
I 58
155	STD		{ int nfssvc(int flag, caddr_t argp); }
E 58
E 32
E 22
E 12
#else
E 7
D 58
155	UNIMPL	0 nosys
E 58
I 58
155	UNIMPL		nfssvc
E 58
I 7
#endif
E 7
D 38
156	STD	4 getdirentries
E 38
I 38
D 58
156	COMPAT	4 getdirentries
E 38
157	STD	2 statfs
158	STD	2 fstatfs
E 3
D 7

; Syscalls 151-180 inclusive are reserved for vendor-specific
; system calls.  (This includes various calls added for compatibity
; with other Unix variants.)
E 7
I 7
159	UNIMPL	0 nosys
I 32
160	UNIMPL	0 nosys
E 58
I 58
156	COMPAT_43	{ int getdirentries(int fd, char *buf, u_int count, \
			    long *basep); }
157	STD		{ int statfs(char *path, struct statfs *buf); }
158	STD		{ int fstatfs(int fd, struct statfs *buf); }
159	UNIMPL
160	UNIMPL
E 58
E 32
D 10
160	UNIMPL	0 nosys
E 10
#ifdef NFS
I 10
D 32
160	STD	0 async_daemon
E 32
E 10
D 58
161	STD	2 getfh
E 58
I 58
161	STD		{ int getfh(char *fname, fhandle_t *fhp); }
E 58
#else
I 10
D 32
160	UNIMPL	0 nosys
E 32
E 10
D 58
161	UNIMPL	0 nosys
E 58
I 58
161	UNIMPL		getfh
E 58
#endif
D 58
162	UNIMPL	0 nosys
163	UNIMPL	0 nosys
164	UNIMPL	0 nosys
165	UNIMPL	0 nosys
D 17
#ifdef NFS
166	STD	3 exportfs
#else
E 17
166	UNIMPL	0 nosys
D 17
#endif
E 17
I 17
167	UNIMPL	0 nosys
168	UNIMPL	0 nosys
169	UNIMPL	0 nosys
170	UNIMPL	0 nosys
I 23
#ifdef SYSVSHM
171	STD	4 shmsys
E 58
I 58
162	UNIMPL		getdomainname
163	UNIMPL		setdomainname
164	UNIMPL
165	UNIMPL
166	UNIMPL
167	UNIMPL
168	UNIMPL
169	UNIMPL		semsys
170	UNIMPL		msgsys
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if defined(SYSVSHM) && !defined(alpha)
171	COMPAT_43	{ int shmsys(int which, int a2, int a3, int a4); }
E 58
#else
E 23
D 58
171	UNIMPL	0 nosys
E 58
I 58
171	UNIMPL		shmsys
E 58
I 23
#endif
E 23
D 58
172	UNIMPL	0 nosys
173	UNIMPL	0 nosys
174	UNIMPL	0 nosys
175	UNIMPL	0 nosys
176	UNIMPL	0 nosys
177	UNIMPL	0 nosys
178	UNIMPL	0 nosys
179	UNIMPL	0 nosys
180	UNIMPL	0 nosys
E 58
I 58
172	UNIMPL
173	UNIMPL
174	UNIMPL
175	UNIMPL
176	UNIMPL
177	UNIMPL
178	UNIMPL
179	UNIMPL
180	UNIMPL
E 58

D 25
; Syscalls above 180 are used by BSD
181	UNIMPL	0 nosys
182	UNIMPL	0 nosys
183	UNIMPL	0 nosys
E 25
I 25
D 58
; Syscalls 180-199 are used by/reserved for BSD
181	STD	1 setgid
182	STD	1 setegid
183	STD	1 seteuid
E 58
I 58
; Syscalls 180-209 are used by/reserved for BSD
181	STD		{ int setgid(gid_t gid); }
182	STD		{ int setegid(gid_t egid); }
183	STD		{ int seteuid(uid_t euid); }
E 58
I 31
#ifdef LFS
E 31
E 25
D 30
184	UNIMPL	0 nosys
185	UNIMPL	0 nosys
186	UNIMPL	0 nosys
187	UNIMPL	0 nosys
E 30
I 30
D 55
184	STD	4 lfs_bmapv
D 42
185	STD	6 lfs_markv
E 42
I 42
185	STD	4 lfs_markv
E 42
186	STD	3 lfs_segclean
187	STD	3 lfs_segwait
E 55
I 55
D 58
184	STD	3 lfs_bmapv
185	STD	3 lfs_markv
186	STD	2 lfs_segclean
187	STD	2 lfs_segwait
E 58
I 58
184	STD		{ int lfs_bmapv(fsid_t *fsidp, \
			    struct block_info *blkiov, int blkcnt); }
185	STD		{ int lfs_markv(fsid_t *fsidp, \
			    struct block_info *blkiov, int blkcnt); }
186	STD		{ int lfs_segclean(fsid_t *fsidp, u_long segment); }
187	STD		{ int lfs_segwait(fsid_t *fsidp, struct timeval *tv); }
E 58
E 55
I 31
#else
D 58
184	UNIMPL	0 nosys
185	UNIMPL	0 nosys
186	UNIMPL	0 nosys
187	UNIMPL	0 nosys
E 58
I 58
184	UNIMPL		lfs_bmapv
185	UNIMPL		lfs_markv
186	UNIMPL		lfs_segclean
187	UNIMPL		lfs_segwait
E 58
#endif
E 31
E 30
D 34
188	UNIMPL	0 nosys
189	UNIMPL	0 nosys
190	UNIMPL	0 nosys
E 34
I 34
D 37
188	STD	2 fqstat
189	STD	2 lqstat
190	STD	2 qstat
191	STD	4 qseek
192	STD	3 qtruncate
193	STD	3 fqtruncate
194	UNIMPL	0 nosys
195	UNIMPL	0 nosys
E 37
I 37
D 58
188	STD	2 stat
189	STD	2 fstat
190	STD	2 lstat
D 40
191	STD	4 __lseek
192	STD	3 __truncate
193	STD	3 __ftruncate
E 40
I 40
D 48
191	UNIMPL	0 nosys
192	UNIMPL	0 nosys
E 48
I 48
191	STD	2 pathconf
192	STD	2 fpathconf
E 48
193	UNIMPL	0 nosys
E 40
D 48
194	STD	2 __getrlimit
195	STD	2 __setrlimit
E 48
I 48
194	STD	2 getrlimit
195	STD	2 setrlimit
E 48
E 37
D 38
196	UNIMPL	0 nosys
197	UNIMPL	0 nosys
E 38
I 38
196	STD	4 getdirentries
D 51
197	STD	8 smmap mmap
E 51
I 51
197	STD	8 mmap
E 51
E 38
D 40
198	UNIMPL	0 nosys
199	UNIMPL	0 nosys
E 40
I 40
D 53
198	STD	0 nosys __indir
E 53
I 53
198	STD	0 nosys __syscall
E 53
D 48
199	STD	5 __lseek
200	STD	4 __truncate
201	STD	4 __ftruncate
E 48
I 48
199	STD	5 lseek
200	STD	4 truncate
201	STD	4 ftruncate
E 48
D 44
202	UNIMPL	0 nosys
E 44
I 44
D 46
202	STD	6 sysctl
E 46
I 46
202	STD	6 __sysctl
E 46
E 44
D 49
203	UNIMPL	0 nosys
204	UNIMPL	0 nosys
E 49
I 49
203	STD	2 mlock
204	STD	2 munlock
E 49
D 56
205	UNIMPL	0 nosys
E 56
I 56
D 57
205	STD	1 unwhiteout
E 57
I 57
205	STD	1 undelete
E 57
E 56
206	UNIMPL	0 nosys
207	UNIMPL	0 nosys
208	UNIMPL	0 nosys
209	UNIMPL	0 nosys
210	UNIMPL	0 nosys
E 58
I 58
188	STD		{ int stat(char *path, struct stat *ub); }
189	STD		{ int fstat(int fd, struct stat *sb); }
190	STD		{ int lstat(char *path, struct stat *ub); }
191	STD		{ int pathconf(char *path, int name); }
192	STD		{ int fpathconf(int fd, int name); }
193	UNIMPL
194	STD		{ int getrlimit(u_int which, struct rlimit *rlp); }
195	STD		{ int setrlimit(u_int which, struct rlimit *rlp); }
196	STD		{ int getdirentries(int fd, char *buf, u_int count, \
			    long *basep); }
197	STD		{ caddr_t mmap(caddr_t addr, size_t len, int prot, \
			    int flags, int fd, long pad, off_t pos); }
198	STD		{ int nosys(void); } __syscall
199	STD		{ off_t lseek(int fd, int pad, off_t offset, \
			    int whence); }
200	STD		{ int truncate(char *path, int pad, off_t length); }
201	STD		{ int ftruncate(int fd, int pad, off_t length); }
202	STD		{ int __sysctl(int *name, u_int namelen, void *old, \
			    size_t *oldlenp, void *new, size_t newlen); }
203	STD		{ int mlock(caddr_t addr, size_t len); }
204	STD		{ int munlock(caddr_t addr, size_t len); }
205	STD		{ int undelete(char *path); }
206	UNIMPL
207	UNIMPL
208	UNIMPL
209	UNIMPL
; Syscalls 210-219 are used by/reserved for vendor-specific system calls
210	UNIMPL
211	UNIMPL
212	UNIMPL
213	UNIMPL
214	UNIMPL
215	UNIMPL
216	UNIMPL
217	UNIMPL
218	UNIMPL
219	UNIMPL
; System calls 220-240 are reserved for use by BSD
220	UNIMPL		semctl
221	UNIMPL		semget
222	UNIMPL		semop
223	UNIMPL		semconfig
224	UNIMPL		msgctl
225	UNIMPL		msgget
226	UNIMPL		msgsnd
227	UNIMPL		msgrcv
#if defined(SYSVSHM) && 0
228	STD		{ int shmat(int shmid, void *shmaddr, int shmflg); }
229	STD		{ int shmctl(int shmid, int cmd, \
			    struct shmid_ds *buf); }
230	STD		{ int shmdt(void *shmaddr); }
231	STD		{ int shmget(key_t key, int size, int shmflg); }
#else
228	UNIMPL		shmat
229	UNIMPL		shmctl
230	UNIMPL		shmdt
231	UNIMPL		shmget
#endif
E 58
E 40
E 34
E 17
E 7
E 1
