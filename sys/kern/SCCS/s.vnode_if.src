h27203
s 00003/00001/00465
d D 8.12 95/05/14 00:11:07 mckusick 18 17
c vop_inactive is called with locked vnode; 
c vop_inactive and vop_reclaim get proc pointer
e
s 00004/00000/00462
d D 8.11 95/04/12 13:32:00 mckusick 17 16
c add flags and proc ptr to vop_lock and vop_unlock operations
e
s 00002/00002/00460
d D 8.10 95/03/30 14:11:03 mckusick 16 15
c readdir now has producer provide cookies rather than the consumer
e
s 00008/00000/00454
d D 8.9 95/02/23 11:23:51 mckusick 15 14
c add vop_revoke operator
e
s 00026/00014/00428
d D 8.8 95/02/14 10:18:46 cgd 14 13
c light clean; spaced vs. tabs.  ioctl takes u_long, pathconf returns register_t
e
s 00010/00000/00432
d D 8.7 94/08/10 23:06:25 mckusick 13 12
c add vop_lease
e
s 00010/00000/00422
d D 8.6 94/07/12 23:36:12 pendry 12 11
c add unwhiteout system call to delete a whiteout entry
e
s 00003/00000/00419
d D 8.5 94/06/04 17:20:47 mckusick 11 10
c add cookies and eofflag to VOP_READDIR
e
s 00149/00000/00270
d D 8.4 94/05/09 13:49:33 pendry 10 9
c include comments about the vnode locking protocol
e
s 00005/00000/00265
d D 8.3 94/02/03 02:57:59 mckusick 9 8
c add definition for VOP_REALLOCBLKS
e
s 00002/00002/00263
d D 8.2 93/09/05 09:39:34 bostic 8 7
c Cleanups for 4.4BSD-Lite
e
s 00002/00002/00263
d D 8.1 93/06/10 22:02:56 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00006/00000/00259
d D 7.6 93/05/25 15:22:49 mckusick 6 5
c add pathconf vnode op
e
s 00001/00000/00258
d D 7.5 92/10/07 16:35:32 margo 5 4
c Add argument to bmap to return number of contiguous blocks.
e
s 00001/00001/00257
d D 7.4 92/07/12 23:41:00 pendry 4 3
c second vnode to lookup is INOUT
e
s 00000/00007/00258
d D 7.3 92/07/12 11:48:16 bostic 3 2
c vget is now in VFS
e
s 00015/00015/00250
d D 7.2 92/07/12 11:29:03 heideman 2 1
c note which operations release their vnodes
e
s 00265/00000/00000
d D 7.1 92/07/03 01:41:04 mckusick 1 0
c date and time created 92/07/03 01:41:04 by mckusick
e
u
U
t
T
I 1
#
D 7
# Copyright (c) 1992 The Regents of the University of California.
# All rights reserved.
E 7
I 7
# Copyright (c) 1992, 1993
#	The Regents of the University of California.  All rights reserved.
E 7
#
# %sccs.include.redist.sh%
#
#	%W% (Berkeley) %G%
#
I 10

#
# Above each of the vop descriptors is a specification of the locking
# protocol used by each vop call.  The first column is the name of
# the variable, the remaining three columns are in, out and error
# respectively.  The "in" column defines the lock state on input,
# the "out" column defines the state on succesful return, and the
# "error" column defines the locking state on error exit.
#
# The locking value can take the following values:
# L: locked.
# U: unlocked/
# -: not applicable.  vnode does not yet (or no longer) exists.
# =: the same on input and output, may be either L or U.
# X: locked if not nil.
#

#
#% lookup	dvp	L ? ?
#% lookup	vpp	- L -
#
# XXX - the lookup locking protocol defies simple description and depends
D 14
#       on the flags and operation fields in the (cnp) structure.  Note
#       especially that *vpp may equal dvp and both may be locked.
E 14
I 14
#	on the flags and operation fields in the (cnp) structure.  Note
#	especially that *vpp may equal dvp and both may be locked.
E 14
#
E 10
vop_lookup {
	IN struct vnode *dvp;
D 4
	OUT struct vnode **vpp;
E 4
I 4
	INOUT struct vnode **vpp;
E 4
	IN struct componentname *cnp;
};

I 10
#
#% create	dvp	L U U
#% create	vpp	- L -
#
E 10
vop_create {
D 2
	IN struct vnode *dvp;
E 2
I 2
	IN WILLRELE struct vnode *dvp;
E 2
	OUT struct vnode **vpp;
	IN struct componentname *cnp;
	IN struct vattr *vap;
};

I 10
#
I 12
#% whiteout	dvp	L L L
#% whiteout	cnp	- - -
#% whiteout	flag	- - -
I 14
#
E 14
vop_whiteout {
	IN WILLRELE struct vnode *dvp;
	IN struct componentname *cnp;
	IN int flags;
};

#
E 12
#% mknod	dvp	L U U
#% mknod	vpp	- X -
#
E 10
vop_mknod {
D 2
	IN struct vnode *dvp;
	OUT struct vnode **vpp;
E 2
I 2
	IN WILLRELE struct vnode *dvp;
	OUT WILLRELE struct vnode **vpp;
E 2
	IN struct componentname *cnp;
	IN struct vattr *vap;
};

I 10
#
D 14
#% open 	vp	L L L
E 14
I 14
#% open		vp	L L L
E 14
#
E 10
vop_open {
	IN struct vnode *vp;
	IN int mode;
	IN struct ucred *cred;
	IN struct proc *p;
};

I 10
#
#% close	vp	U U U
#
E 10
vop_close {
	IN struct vnode *vp;
	IN int fflag;
	IN struct ucred *cred;
	IN struct proc *p;
};

I 10
#
#% access	vp	L L L
#
E 10
vop_access {
	IN struct vnode *vp;
	IN int mode;
	IN struct ucred *cred;
	IN struct proc *p;
};

I 10
#
#% getattr	vp	= = =
#
E 10
vop_getattr {
	IN struct vnode *vp;
	IN struct vattr *vap;
	IN struct ucred *cred;
	IN struct proc *p;
};

I 10
#
#% setattr	vp	L L L
#
E 10
vop_setattr {
	IN struct vnode *vp;
	IN struct vattr *vap;
	IN struct ucred *cred;
	IN struct proc *p;
};

I 10
#
D 14
#% read 	vp	L L L
E 14
I 14
#% read		vp	L L L
E 14
#
E 10
vop_read {
	IN struct vnode *vp;
	INOUT struct uio *uio;
	IN int ioflag;
	IN struct ucred *cred;
};

I 10
#
#% write	vp	L L L
#
E 10
vop_write {
	IN struct vnode *vp;
	INOUT struct uio *uio;
	IN int ioflag;
	IN struct ucred *cred;
};

I 10
#
I 13
#% lease	vp	= = =
#
vop_lease {
	IN struct vnode *vp;
	IN struct proc *p;
	IN struct ucred *cred;
	IN int flag;
};

#
E 13
#% ioctl	vp	U U U
#
E 10
vop_ioctl {
	IN struct vnode *vp;
D 14
	IN int command;
E 14
I 14
	IN u_long command;
E 14
	IN caddr_t data;
	IN int fflag;
	IN struct ucred *cred;
	IN struct proc *p;
};

I 10
#
#% select	vp	U U U
#
E 10
# Needs work?  (fflags)
I 14
#
E 14
vop_select {
	IN struct vnode *vp;
	IN int which;
	IN int fflags;
	IN struct ucred *cred;
	IN struct proc *p;
};

I 14
#
I 15
#% revoke	vp	U U U
#
vop_revoke {
	IN struct vnode *vp;
	IN int flags;
};

#
E 15
E 14
I 10
# XXX - not used
I 14
#
E 14
E 10
vop_mmap {
	IN struct vnode *vp;
	IN int fflags;
	IN struct ucred *cred;
	IN struct proc *p;
};

I 10
#
#% fsync	vp	L L L
#
E 10
vop_fsync {
	IN struct vnode *vp;
	IN struct ucred *cred;
	IN int waitfor;
	IN struct proc *p;
};

I 14
#
E 14
I 10
# XXX - not used
E 10
D 14
# Needs word: Is newoff right?  What's it mean?
E 14
I 14
# Needs work: Is newoff right?  What's it mean?
#
E 14
vop_seek {
	IN struct vnode *vp;
	IN off_t oldoff;
	IN off_t newoff;
	IN struct ucred *cred;
};

I 10
#
#% remove	dvp	L U U
#% remove	vp	L U U
#
E 10
vop_remove {
D 2
	IN struct vnode *dvp;
	IN struct vnode *vp;
E 2
I 2
	IN WILLRELE struct vnode *dvp;
	IN WILLRELE struct vnode *vp;
E 2
	IN struct componentname *cnp;
};

I 10
#
D 14
#% link 	vp	L U U
#% link 	tdvp	U U U
E 14
I 14
#% link		vp	U U U
#% link		tdvp	L U U
E 14
#
E 10
vop_link {
D 2
	IN struct vnode *vp;
E 2
I 2
	IN WILLRELE struct vnode *vp;
E 2
	IN struct vnode *tdvp;
	IN struct componentname *cnp;
};

I 10
#
#% rename	fdvp	U U U
#% rename	fvp	U U U
#% rename	tdvp	L U U
#% rename	tvp	X U U
#
E 10
vop_rename {
D 2
	IN struct vnode *fdvp;
	IN struct vnode *fvp;
E 2
I 2
	IN WILLRELE struct vnode *fdvp;
	IN WILLRELE struct vnode *fvp;
E 2
	IN struct componentname *fcnp;
D 2
	IN struct vnode *tdvp;
	IN struct vnode *tvp;
E 2
I 2
	IN WILLRELE struct vnode *tdvp;
	IN WILLRELE struct vnode *tvp;
E 2
	IN struct componentname *tcnp;
};

I 10
#
#% mkdir	dvp	L U U
#% mkdir	vpp	- L -
#
E 10
vop_mkdir {
D 2
	IN struct vnode *dvp;
E 2
I 2
	IN WILLRELE struct vnode *dvp;
E 2
	OUT struct vnode **vpp;
	IN struct componentname *cnp;
	IN struct vattr *vap;
};

I 10
#
#% rmdir	dvp	L U U
#% rmdir	vp	L U U
#
E 10
vop_rmdir {
D 2
	IN struct vnode *dvp;
	IN struct vnode *vp;
E 2
I 2
	IN WILLRELE struct vnode *dvp;
	IN WILLRELE struct vnode *vp;
E 2
	IN struct componentname *cnp;
};

I 10
#
#% symlink	dvp	L U U
#% symlink	vpp	- U -
I 14
#
E 14
# XXX - note that the return vnode has already been VRELE'ed
D 14
#       by the filesystem layer.  To use it you must use vget,
#       possibly with a further namei.
E 14
I 14
#	by the filesystem layer.  To use it you must use vget,
#	possibly with a further namei.
E 14
#
E 10
vop_symlink {
D 2
	IN struct vnode *dvp;
	OUT struct vnode **vpp;
E 2
I 2
	IN WILLRELE struct vnode *dvp;
	OUT WILLRELE struct vnode **vpp;
E 2
	IN struct componentname *cnp;
	IN struct vattr *vap;
	IN char *target;
};

I 10
#
#% readdir	vp	L L L
#
E 10
vop_readdir {
	IN struct vnode *vp;
	INOUT struct uio *uio;
	IN struct ucred *cred;
I 11
	INOUT int *eofflag;
D 16
	OUT u_long *cookies;
	IN int ncookies;
E 16
I 16
	OUT int *ncookies;
	INOUT u_long **cookies;
E 16
E 11
};

I 10
#
#% readlink	vp	L L L
#
E 10
vop_readlink {
	IN struct vnode *vp;
	INOUT struct uio *uio;
	IN struct ucred *cred;
};

I 10
#
#% abortop	dvp	= = =
#
E 10
vop_abortop {
	IN struct vnode *dvp;
	IN struct componentname *cnp;
};

I 10
#
D 18
#% inactive	vp	U U U
E 18
I 18
#% inactive	vp	L U U
E 18
#
E 10
vop_inactive {
	IN struct vnode *vp;
I 18
	IN struct proc *p;
E 18
};

I 10
#
#% reclaim	vp	U U U
#
E 10
vop_reclaim {
	IN struct vnode *vp;
I 18
	IN struct proc *p;
E 18
};

I 10
#
D 14
#% lock 	vp	U L U
E 14
I 14
#% lock		vp	U L U
E 14
#
E 10
vop_lock {
	IN struct vnode *vp;
I 17
	IN int flags;
	IN struct proc *p;
E 17
};

I 10
#
#% unlock	vp	L U L
#
E 10
vop_unlock {
	IN struct vnode *vp;
I 17
	IN int flags;
	IN struct proc *p;
E 17
};

I 10
#
D 14
#% bmap 	vp	L L L
#% bmap 	vpp	- U -
E 14
I 14
#% bmap		vp	L L L
#% bmap		vpp	- U -
E 14
#
E 10
vop_bmap {
	IN struct vnode *vp;
	IN daddr_t bn;
	OUT struct vnode **vpp;
	IN daddr_t *bnp;
I 5
	OUT int *runp;
E 5
};

I 14
#
# Needs work: no vp?
#
E 14
#vop_strategy {
#	IN struct buf *bp;
#};

I 10
#
#% print	vp	= = =
#
E 10
vop_print {
	IN struct vnode *vp;
};

I 10
#
#% islocked	vp	= = =
#
E 10
vop_islocked {
	IN struct vnode *vp;
};

I 10
#
#% pathconf	vp	L L L
#
E 10
I 6
vop_pathconf {
	IN struct vnode *vp;
	IN int name;
D 14
	OUT int *retval;
E 14
I 14
	OUT register_t *retval;
E 14
};

I 10
#
#% advlock	vp	U U U
#
E 10
E 6
vop_advlock {
	IN struct vnode *vp;
	IN caddr_t id;
	IN int op;
	IN struct flock *fl;
	IN int flags;
};

I 10
#
#% blkatoff	vp	L L L
#
E 10
vop_blkatoff {
	IN struct vnode *vp;
	IN off_t offset;
	OUT char **res;
	OUT struct buf **bpp;
};

I 10
#
#% valloc	pvp	L L L
#
E 10
D 3
# Needs to move to VFS interface?
#vop_vget {
#	IN struct mount *mp;
#	IN ino_t ino;
#	OUT struct vnode **vpp;
#};

E 3
vop_valloc {
	IN struct vnode *pvp;
	IN int mode;
	IN struct ucred *cred;
	OUT struct vnode **vpp;
};

I 10
#
#% reallocblks	vp	L L L
#
E 10
I 9
vop_reallocblks {
	IN struct vnode *vp;
	IN struct cluster_save *buflist;
};

I 10
#
#% vfree	pvp	L L L
#
E 10
E 9
vop_vfree {
	IN struct vnode *pvp;
	IN ino_t ino;
	IN int mode;
};

I 10
#
#% truncate	vp	L L L
#
E 10
vop_truncate {
	IN struct vnode *vp;
	IN off_t length;
	IN int flags;
	IN struct ucred *cred;
	IN struct proc *p;
};

I 10
#
#% update	vp	L L L
#
E 10
vop_update {
	IN struct vnode *vp;
D 8
	IN struct timeval *ta;
	IN struct timeval *tm;
E 8
I 8
	IN struct timeval *access;
	IN struct timeval *modify;
E 8
	IN int waitfor;
};

I 14
#
E 14
# Needs work: no vp?
I 14
#
E 14
#vop_bwrite {
#	IN struct buf *bp;
#};
E 1
