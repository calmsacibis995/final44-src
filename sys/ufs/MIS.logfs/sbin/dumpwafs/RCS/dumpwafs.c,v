head	1.5;
access;
symbols;
locks
	margo:1.5; strict;
comment	@ * @;


1.5
date	94.10.04.17.57.59;	author margo;	state Exp;
branches;
next	1.4;

1.4
date	94.10.04.17.52.55;	author margo;	state Exp;
branches;
next	1.3;

1.3
date	94.09.20.14.47.52;	author margo;	state Exp;
branches;
next	1.2;

1.2
date	94.05.26.14.00.37;	author margo;	state Exp;
branches;
next	1.1;

1.1
date	93.11.18.21.16.32;	author margo;	state Exp;
branches;
next	;


desc
@Original code from Berkeley.
@


1.5
log
@4.4Lite implementation of dumpwafs
@
text
@#ifdef CLFS
/*
 * CLFS
 * $Log$
 */
#endif

/*
 * Copyright (c) 1993, 1994 The President and Fellows of Harvard University
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
static char *rcsid = "$Id";

#ifdef AIX
#include <sys/cdefs.h>
#include <sys/bsd_param.h>
#else
#include <sys/param.h>
#include <sys/ucred.h>
#endif
#include <sys/time.h>
#include <sys/mount.h>

#include <ufs/wafs/wafs.h>
#include <ufs/wafs/wnode.h>

#include <fcntl.h>
#include <fstab.h>
#include <unistd.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "extern.h"

static void dump_records __P((int, struct wafs *, int, int));
static void dump_super __P((struct wafs *, int));
static void dump_thread_info __P((int, struct wafs *, int));
static void print_page_header __P((daddr_t, wafs_page_header_t *));
static int  print_record __P((off_t, char *, wafs_type *));
static void usage __P((void));

int daddr_shift;
char *special;

char *progname = "dumpwafs";

int
main(argc, argv)
	int argc;
	char *argv[];
{
	struct wafs wafs_sb1, wafs_sb2, *wafs_master, *wafsp, *tmp_wp;
	daddr_t sb_addr;
	int do_allsb, do_allrecords, do_liverecords, do_thread;
	int ch, fd;

#ifdef DIAGNOSTIC
	printf("Entering main\n");
#endif

	do_allsb = 0;
	do_allrecords = 0;
	do_liverecords = 0;
	while ((ch = getopt(argc, argv, "afFt")) != EOF)
		switch(ch) {
		case 'a':		/* Dump all superblocks */
			do_allsb = 1;
			break;
		case 'F':		/* Really full dump; display all recs */
			do_allrecords = 1;
			do_liverecords = 1;
			break;
		case 'f':		/* Full dump; display live records */
			do_liverecords = 1;
			break;
		case 't':		/* Print thread table */
			do_thread = 1;
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc != 1)
		usage();

	special = argv[0];
	if ((fd = open(special, O_RDONLY, 0)) < 0)
		fatal("%s: %s", special, strerror(errno));
#ifdef DIAGNOSTIC
	printf("Opening file %s\n", special);
#endif
	/* Read the first superblock */
	get(fd, SBOFF, &wafs_sb1, sizeof(struct wafs));
#ifdef DIAGNOSTIC
	printf("Read superblock\n");
#endif
	daddr_shift = wafs_sb1.wafs_bshift - wafs_sb1.wafs_fsbtodb;

	/*
	 * Compute address of next superblock, verify that the filesyste
	 * is large enough to support multiple superblocks, then read the
	 * alternate superblocks, checking for consistency.
	 */
	wafs_master = &wafs_sb1;
	wafsp = &wafs_sb2;
	for (sb_addr = SBLOCK + SB_INTERVAL_DB(wafs_master);
	    sb_addr < wafs_master->wafs_size << wafs_master->wafs_fsbtodb;
	    sb_addr += SB_INTERVAL_DB(wafs_master)) {
#ifdef DIAGNOSTIC
		printf("Reading superblock at disk address 0x%x\n", sb_addr);
#endif
		get(fd, sb_addr << daddr_shift, wafsp, sizeof(struct wafs));
		dump_super(wafsp, 0);
		if (wafs_master->wafs_time < wafsp->wafs_time) {
			tmp_wp = wafs_master;
			wafs_master = wafsp;
			wafsp = tmp_wp;
		}
		if (!do_allsb)
			break;
	}

	dump_super(wafs_master, 1);

	dump_thread_info(fd, wafs_master, do_thread);
	dump_records(fd, wafs_master, do_liverecords, do_allrecords);
	(void)close(fd);
	exit(0);
}

static void
dump_records(fd, wafsp, doit, doitall)
	int fd;
	struct wafs *wafsp;
	int doit;
	int doitall;
{
	wafs_page_header_t	page_header;
	struct wafs_header	rec_header;
	wafs_type	rectype;
	daddr_t	lbn;
	daddr_t	blocknum;
	caddr_t	page;
	off_t lsn;
	char *rp;
	int nbytes;

	if (!doit)
		return;
#ifdef DIAGNOSTIC
	printf("About to read log records\n");
#endif

	/* Create page buffer. */
	page = (caddr_t)malloc(wafsp->wafs_bsize);
	if (page == NULL) {
		perror("dumpwafs: ");
		return;
	}

	/* 
	 * Read from head, to tail and then on until you
	 * find the last log record (a record followed by
	 * a WAFS_NORECORD).
	 */
	lbn = wafsp->wafs_tail >> wafsp->wafs_bshift;

	do {
		lsn = (off_t) (lbn << wafsp->wafs_bsize);
		blocknum = logical_to_physical(wafsp, lbn);
		get(fd, (blocknum << wafsp->wafs_bshift), page,
		    wafsp->wafs_bsize);
#ifdef DIAGNOSTIC
#ifdef AIX
		printf("Reading logical block %d, physical block 0x%lx, lsn = 0x%x\n", lbn, blocknum, lsn);
#else
		printf("Reading logical block %d, physical block 0x%lx, lsn = 0x%qx\n", lbn, blocknum, lsn);
#endif
#endif
		bcopy(page, &page_header, sizeof(page_header));
		print_page_header(lsn, &page_header);
		rp = page + sizeof(page_header);
		printf("Page pointer = %x\n", rp);
		lsn += sizeof(page_header);
		do {
			nbytes = print_record(lsn, rp, &rectype);
			rp += nbytes;
			lsn += nbytes;
		} while (rectype != WAFS_NORECORD && rp <
		    page + wafsp->wafs_bsize - sizeof(struct wafs_header));

		if (!doitall && lsn >= wafsp->wafs_tail)
			return;
		lbn++;
	} while (rectype != WAFS_NORECORD);
}

static void
dump_super(wafsp, master)
	struct wafs *wafsp;
	int master;
{
	(void)printf("%s Superblock:\n", master ? "Master" : "Alternate");
	(void)printf("%s0x%06X   %s0x%06X   %s  %6d   %s  %6d\n",
		"magic    ", wafsp->wafs_magic,
		"version  ", wafsp->wafs_version,
		"size     ", wafsp->wafs_size,
		"dsize    ", wafsp->wafs_dsize);

	(void)printf("%s  %6d   %s  %6d   %s  %6d   %s  %6d\n",
		"sbsize   ", wafsp->wafs_sbsize,
		"bsize    ", wafsp->wafs_bsize,
		"bmask    ", wafsp->wafs_bmask,
		"bshift   ", wafsp->wafs_bshift);

	(void)printf("%s  %6d   %s  %6d   %s  %6d   %s  %6d\n",
		"minfree  ", wafsp->wafs_minfree,
		"maxthread", wafsp->wafs_maxthreads,
		"tinfopb  ", wafsp->wafs_tinfopb,
		"bfree    ", wafsp->wafs_bfree);

#ifdef AIX
	(void)printf("%s0x%08X %s0x%06X   %s0x%06x   %s0x%06X\n",
#else
	(void)printf("%s%08qx   %s  %6qx   %s  %6qx   %s  %6qx\n",
#endif
		"lsn      ", wafsp->wafs_lsn,
		"check    ", wafsp->wafs_check,
		"head     ", wafsp->wafs_head,
		"tail     ", wafsp->wafs_tail);

	(void)printf("%s0x%06lx   %s  %6d   %s0x%06lx   %s0x%06lx\n",
		"sblkno   ", wafsp->wafs_sblkno,
		"interval ", wafsp->wafs_interval,
		"intshift ", wafsp->wafs_int_shift,
		"sbshift  ", wafsp->wafs_sbshift);

	(void)printf("%s  %6d   %s  %6d   %s%08x   %s0x%08X\n",
		"state    ", wafsp->wafs_state,
		"fsbtodb  ", wafsp->wafs_fsbtodb,
		"id       ", wafsp->wafs_id,
		"cksum    ", wafsp->wafs_cksum);

	(void)printf("%s0x%06X   %s0x%06X   %s0x%06X   %s0x%06X\n",
		"flags    ", wafsp->wafs_flags,
		"fmod     ", wafsp->wafs_fmod,
		"clean    ", wafsp->wafs_clean,
		"ronly    ", wafsp->wafs_ronly);
	(void)printf("%s   %s", "time       ",
	    ctime((time_t *)&(wafsp)->wafs_time));
	(void)printf("%s   %s\n", "read time  ",
	    ctime((time_t *)&(wafsp)->wafs_rtime));
}

static void
dump_thread_info(fd, wafsp, dostuff)
int fd;
struct wafs *wafsp;
int dostuff;
{
	if (!dostuff)
		return;
}

static void
usage()
{
	(void)fprintf(stderr, "usage: dumpwafs [-af] file\n");
	exit(1);
}

static void
print_page_header(lbn, headerp)
	daddr_t lbn;
	wafs_page_header_t *headerp;
{
	printf("Page %d: 0x%X 0x%X\n", lbn, headerp->tv_sec, headerp->tv_usec);
}

static int
print_record(lsn, recp, rectype)
	off_t lsn;
	char *recp;
	wafs_type *rectype;
{
	struct wafs_header hp;
	char *typestr;

	bcopy(recp, (char *)&hp, sizeof(struct wafs_header));
	switch(hp.rectype) {
	case WAFS_NORECORD:   typestr="NO RECORD"; break;
	case WAFS_RECORD:     typestr="RECORD"; break;
	case WAFS_BEGINREC:   typestr="NBEGIN RECORD"; break;
	case WAFS_ENDREC:     typestr="END RECORD"; break;
	case WAFS_CONTINUE:   typestr="CONTINUE"; break;
	case WAFS_COMMIT:     typestr="COMMIT"; break;
	case WAFS_CHECKPOINT: typestr="CHECKPOINT"; break;
	}

#ifdef AIX
	printf("\tLSN:0x%x %s %d\n", lsn, typestr, hp.length);
#else
	printf("\tLSN:0x%qx %s %d\n", lsn, typestr, hp.length);
#endif
	*rectype = hp.rectype;
	return(hp.length + sizeof(struct wafs_header)); 
}
@


1.4
log
@Fix computation of alternate superblocks.
@
text
@d1 9
a9 3
/*-
 * Copyright (c) 1993 Margo Seltzer
 * Copyright (c) 1993 The President and Fellows of Harvard University
d41 1
d43 4
a46 10
#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1991, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
static char sccsid[] = "@@(#)dumpwafs.c	8.1 (Harvard) 6/5/93";
#endif /* not lint */

d49 2
a51 2
#include <sys/time.h>
#include <sys/types.h>
d53 1
a54 1
#include <ufs/wafs/wafs.h>
d58 1
d60 1
a60 1
#include <unistd.h>
a61 1
#include <stdio.h>
d75 2
d120 1
a120 1
		err("%s: %s", special, strerror(errno));
d206 3
d211 1
d241 1
d254 3
d258 1
d270 1
a270 1
	(void)printf("%s  %6d   %s  %6d   %s%08x   %s0x%08x\n",
d276 1
a276 1
	(void)printf("%s0x%06X   %s0x%06X   %s0x%06X   %s%06X\n",
d281 1
a281 1
	(void)printf("%s   %s\n", "time       ",
d332 3
d336 1
@


1.3
log
@Fix %X printf type.
@
text
@d65 1
a65 1
static void dump_super __P((struct wafs *));
d79 1
a79 1
	struct wafs wafs_sb1, wafs_sb2, *wafs_master, *wafsp;
d131 1
a131 1
	 * alternate superblock and check it for consistency.
a132 4
	wafsp = &wafs_sb1;
	sb_addr = (SBOFF + WAFS_SBSIZE) >> wafsp->wafs_bshift +
		(1 << wafsp->wafs_int_shift + wafsp->wafs_sbshift);

d134 4
a137 2

	if (sb_addr < wafsp->wafs_size) {
d139 1
a139 1
		printf("Reading secondary superblock\n");
d141 6
a146 4
		get(fd, sb_addr << daddr_shift, &wafs_sb2, sizeof(struct wafs));
		if (wafs_sb1.wafs_time < wafs_sb2.wafs_time) {
			wafsp = &wafs_sb2;
			wafs_master = &wafs_sb2;
d148 2
d152 1
a152 1
	dump_super(wafs_master);
d224 1
a224 1
dump_super(wafsp)
d226 1
d228 1
a228 1
	(void)printf("Master Superblock:\n");
@


1.2
log
@Working version
@
text
@d255 1
a255 1
	(void)printf("%s  %6d   %s  %6d   %s0x%08X\n",
d258 1
@


1.1
log
@Initial revision
@
text
@d2 2
d43 1
a43 1
static char sccsid[] = "@@(#)dumplfs.c	8.1 (Berkeley) 6/5/93";
d50 1
d52 2
a53 2
#include <ufs/ufs/dinode.h>
#include <ufs/lfs/lfs.h>
d64 6
a69 10
static void	addseg __P((char *));
static void	dump_cleaner_info __P((struct lfs *, void *));
static void	dump_dinode __P((struct dinode *));
static void	dump_ifile __P((int, struct lfs *, int));
static int	dump_ipage_ifile __P((int, IFILE *, int));
static int	dump_ipage_segusage __P((struct lfs *, int, IFILE *, int));
static void	dump_segment __P((int, int, daddr_t, struct lfs *, int));
static int	dump_sum __P((int, struct lfs *, SEGSUM *, int, daddr_t));
static void	dump_super __P((struct lfs *));
static void	usage __P((void));
a70 7
typedef struct seglist SEGLIST;
struct seglist {
        SEGLIST *next;
	int num;
};
SEGLIST	*seglist;

a73 22
/* Segment Usage formats */
#define print_suheader \
	(void)printf("segnum\tflags\tnbytes\tninos\tnsums\tlastmod\n")

#define print_suentry(i, sp) \
	(void)printf("%d\t%c%c%c\t%d\t%d\t%d\t%s", i, \
	    (((sp)->su_flags & SEGUSE_ACTIVE) ? 'A' : ' '), \
	    (((sp)->su_flags & SEGUSE_DIRTY) ? 'D' : 'C'), \
	    (((sp)->su_flags & SEGUSE_SUPERBLOCK) ? 'S' : ' '), \
	    (sp)->su_nbytes, (sp)->su_ninos, (sp)->su_nsums, \
	    ctime((time_t *)&(sp)->su_lastmod))

/* Ifile formats */
#define print_iheader \
	(void)printf("inum\tstatus\tversion\tdaddr\t\tfreeptr\n")
#define print_ientry(i, ip) \
	if (ip->if_daddr == LFS_UNUSED_DADDR) \
		(void)printf("%d\tFREE\t%d\t \t\t%d\n", \
		    i, ip->if_version, ip->if_nextfree); \
	else \
		(void)printf("%d\tINUSE\t%d\t%8X    \n", \
		    i, ip->if_version, ip->if_daddr)
d79 4
a82 3
	struct lfs lfs_sb1, lfs_sb2, *lfs_master;
	daddr_t seg_addr;
	int ch, do_allsb, do_ientries, fd, segnum;
d84 4
d89 3
a91 2
	do_ientries = 0;
	while ((ch = getopt(argc, argv, "ais:")) != EOF)
d96 3
a98 2
		case 'i':		/* Dump ifile entries */
			do_ientries = 1;
d100 2
a101 2
		case 's':		/* Dump out these segments */
			addseg(optarg);
d103 3
d118 3
a120 1

d122 5
a126 2
	get(fd, LFS_LABELPAD, &lfs_sb1, sizeof(struct lfs));
	daddr_shift = lfs_sb1.lfs_bshift - lfs_sb1.lfs_fsbtodb;
d129 3
a131 2
	 * Read the second superblock and figure out which check point is
	 * most up to date.
d133 3
a135 2
	get(fd,
	    lfs_sb1.lfs_sboffs[1] << daddr_shift, &lfs_sb2, sizeof(struct lfs));
d137 1
a137 3
	lfs_master = &lfs_sb1;
	if (lfs_sb1.lfs_tstamp < lfs_sb2.lfs_tstamp)
		lfs_master = &lfs_sb2;
d139 10
a148 2
	(void)printf("Master Superblock:\n");
	dump_super(lfs_master);
d150 1
a150 1
	dump_ifile(fd, lfs_master, do_ientries);
d152 2
a153 14
	if (seglist != NULL)
		for (; seglist != NULL; seglist = seglist->next) {
			seg_addr = lfs_master->lfs_sboffs[0] + seglist->num *
			    (lfs_master->lfs_ssize << lfs_master->lfs_fsbtodb);
			dump_segment(fd,
			    seglist->num, seg_addr, lfs_master, do_allsb);
		}
	else
		for (segnum = 0, seg_addr = lfs_master->lfs_sboffs[0];
		    segnum < lfs_master->lfs_nseg; segnum++, seg_addr +=
		    lfs_master->lfs_ssize << lfs_master->lfs_fsbtodb)
			dump_segment(fd,
			    segnum, seg_addr, lfs_master, do_allsb);

a157 5
/*
 * We are reading all the blocks of an inode and dumping out the ifile table.
 * This code could be tighter, but this is a first pass at getting the stuff
 * printed out rather than making this code incredibly efficient.
 */
d159 1
a159 1
dump_ifile(fd, lfsp, do_ientries)
d161 3
a163 2
	struct lfs *lfsp;
	int do_ientries;
d165 9
a173 4
	IFILE *ipage;
	struct dinode *dip, *dpage;
	daddr_t addr, *addrp, *dindir, *iaddrp, *indir;
	int block_limit, i, inum, j, nblocks, nsupb, psize;
d175 5
a179 2
	psize = lfsp->lfs_bsize;
	addr = lfsp->lfs_idaddr;
d181 5
a185 41
	if (!(dpage = malloc(psize)))
		err("%s", strerror(errno));
	get(fd, addr << daddr_shift, dpage, psize);

	for (dip = dpage + INOPB(lfsp) - 1; dip >= dpage; --dip)
		if (dip->di_inumber == LFS_IFILE_INUM)
			break;

	if (dip < dpage)
		err("unable to locate ifile inode");

	(void)printf("\nIFILE inode\n");
	dump_dinode(dip);

	(void)printf("\nIFILE contents\n");
	nblocks = dip->di_size >> lfsp->lfs_bshift;
	block_limit = MIN(nblocks, NDADDR);

	/* Get the direct block */
	if ((ipage = malloc(psize)) == NULL)
		err("%s", strerror(errno));
	for (inum = 0, addrp = dip->di_db, i = 0; i < block_limit;
	    i++, addrp++) {
		get(fd, *addrp << daddr_shift, ipage, psize);
		if (i < lfsp->lfs_cleansz) {
			dump_cleaner_info(lfsp, ipage);
			print_suheader;
			continue;
		} 

		if (i < (lfsp->lfs_segtabsz + lfsp->lfs_cleansz)) {
			inum = dump_ipage_segusage(lfsp, inum, ipage, 
			    lfsp->lfs_sepb);
			if (!inum)
				if(!do_ientries)
					goto e0;
				else
					print_iheader;
		} else
			inum = dump_ipage_ifile(inum, ipage, lfsp->lfs_ifpb);

d188 6
a193 2
	if (nblocks <= NDADDR)
		goto e0;
d195 19
a213 14
	/* Dump out blocks off of single indirect block */
	if (!(indir = malloc(psize)))
		err("%s", strerror(errno));
	get(fd, dip->di_ib[0] << daddr_shift, indir, psize);
	block_limit = MIN(i + lfsp->lfs_nindir, nblocks);
	for (addrp = indir; i < block_limit; i++, addrp++) {
		if (*addrp == LFS_UNUSED_DADDR)
			break;
		get(fd, *addrp << daddr_shift,ipage, psize);
		if (i < lfsp->lfs_cleansz) {
			dump_cleaner_info(lfsp, ipage);
			continue;
		} else 
			i -= lfsp->lfs_cleansz;
d215 4
a218 51
		if (i < lfsp->lfs_segtabsz) {
			inum = dump_ipage_segusage(lfsp, inum, ipage, 
			    lfsp->lfs_sepb);
			if (!inum)
				if(!do_ientries)
					goto e1;
				else
					print_iheader;
		} else
			inum = dump_ipage_ifile(inum, ipage, lfsp->lfs_ifpb);
	}

	if (nblocks <= lfsp->lfs_nindir * lfsp->lfs_ifpb)
		goto e1;

	/* Get the double indirect block */
	if (!(dindir = malloc(psize)))
		err("%s", strerror(errno));
	get(fd, dip->di_ib[1] << daddr_shift, dindir, psize);
	for (iaddrp = dindir, j = 0; j < lfsp->lfs_nindir; j++, iaddrp++) {
		if (*iaddrp == LFS_UNUSED_DADDR)
			break;
		get(fd, *iaddrp << daddr_shift, indir, psize);
		block_limit = MIN(i + lfsp->lfs_nindir, nblocks);
		for (addrp = indir; i < block_limit; i++, addrp++) {
			if (*addrp == LFS_UNUSED_DADDR)
				break;
			get(fd, *addrp << daddr_shift, ipage, psize);
			if (i < lfsp->lfs_cleansz) {
				dump_cleaner_info(lfsp, ipage);
				continue;
			} else 
				i -= lfsp->lfs_cleansz;

			if (i < lfsp->lfs_segtabsz) {
				inum = dump_ipage_segusage(lfsp,
				    inum, ipage, lfsp->lfs_sepb);
				if (!inum)
					if(!do_ientries)
						goto e2;
					else
						print_iheader;
			} else
				inum = dump_ipage_ifile(inum,
				    ipage, lfsp->lfs_ifpb);
		}
	}
e2:	free(dindir);
e1:	free(indir);
e0:	free(dpage);
	free(ipage);
a220 36
static int
dump_ipage_ifile(i, pp, tot)
	int i;
	IFILE *pp;
	int tot;
{
	IFILE *ip;
	int cnt, max;

	max = i + tot;

	for (ip = pp, cnt = i; cnt < max; cnt++, ip++)
		print_ientry(cnt, ip);
	return (max);
}

static int
dump_ipage_segusage(lfsp, i, pp, tot)
	struct lfs *lfsp;
	int i;
	IFILE *pp;
	int tot;
{
	SEGUSE *sp;
	int cnt, max;

	max = i + tot;
	for (sp = (SEGUSE *)pp, cnt = i;
	     cnt < lfsp->lfs_nseg && cnt < max; cnt++, sp++)
		print_suentry(cnt, sp);
	if (max >= lfsp->lfs_nseg)
		return (0);
	else
		return (max);
}

d222 2
a223 2
dump_dinode(dip)
	struct dinode *dip;
d225 11
a235 1
	int i;
d237 5
a241 21
	(void)printf("%s%d\t%s%d\t%s%d\t%s%d\t%s%d\n",
		"mode  ", dip->di_mode,
		"nlink ", dip->di_nlink,
		"uid   ", dip->di_uid,
		"gid   ", dip->di_gid,
		"size  ", dip->di_size);
	(void)printf("%s%s%s%s%s%s",
		"atime ", ctime(&dip->di_atime.ts_sec),
		"mtime ", ctime(&dip->di_mtime.ts_sec),
		"ctime ", ctime(&dip->di_ctime.ts_sec));
	(void)printf("inum  %d\n", dip->di_inumber);
	(void)printf("Direct Addresses\n");
	for (i = 0; i < NDADDR; i++) {
		(void)printf("\t0x%X", dip->di_db[i]);
		if ((i % 6) == 5)
			(void)printf("\n");
	}
	for (i = 0; i < NIADDR; i++)
		(void)printf("\t0x%X", dip->di_ib[i]);
	(void)printf("\n");
}
d243 5
a247 13
static int
dump_sum(fd, lfsp, sp, segnum, addr)
	struct lfs *lfsp;
	SEGSUM *sp;
	int fd, segnum;
	daddr_t addr;
{
	FINFO *fp;
	long *dp;
	int i, j;
	int ck;
	int numblocks;
	struct dinode *inop;
d249 5
a253 6
	if (sp->ss_sumsum != (ck = cksum(&sp->ss_datasum, 
	    LFS_SUMMARY_SIZE - sizeof(sp->ss_sumsum)))) {
		(void)printf("dumplfs: %s %d address 0x%lx\n",
		    "corrupt summary block; segment", segnum, addr);
		return(0);
	}
d255 4
a258 8
	(void)printf("Segment Summary Info at 0x%lx\n", addr);
	(void)printf("    %s0x%X\t%s%d\t%s%d\n    %s0x%X\t%s0x%X",
		"next     ", sp->ss_next,
		"nfinfo   ", sp->ss_nfinfo,
		"ninos    ", sp->ss_ninos,
		"sumsum   ", sp->ss_sumsum,
		"datasum  ", sp->ss_datasum );
	(void)printf("\tcreate   %s", ctime((time_t *)&sp->ss_create));
d260 9
a268 38
	numblocks = (sp->ss_ninos + INOPB(lfsp) - 1) / INOPB(lfsp);

	/* Dump out inode disk addresses */
	dp = (daddr_t *)sp;
	dp += LFS_SUMMARY_SIZE / sizeof(daddr_t);
	inop = malloc(1 << lfsp->lfs_bshift);
	printf("    Inode addresses:");
	for (dp--, i = 0; i < sp->ss_ninos; dp--) {
		printf("\t0x%X {", *dp);
		get(fd, *dp << (lfsp->lfs_bshift - lfsp->lfs_fsbtodb), inop, 
		    (1 << lfsp->lfs_bshift));
		for (j = 0; i < sp->ss_ninos && j < INOPB(lfsp); j++, i++) {
			if (j > 0) 
				(void)printf(", ");
			(void)printf("%d", inop[j].di_inumber);
		}
		(void)printf("}");
		if (((i/INOPB(lfsp)) % 4) == 3)
			(void)printf("\n");
	}
	free(inop);

	printf("\n");
	for (fp = (FINFO *)(sp + 1), i = 0; i < sp->ss_nfinfo; i++) {
		numblocks += fp->fi_nblocks;
		(void)printf("    FINFO for inode: %d version %d nblocks %d\n",
		    fp->fi_ino, fp->fi_version, fp->fi_nblocks);
		dp = &(fp->fi_blocks[0]);
		for (j = 0; j < fp->fi_nblocks; j++, dp++) {
			(void)printf("\t%d", *dp);
			if ((j % 8) == 7)
				(void)printf("\n");
		}
		if ((j % 8) != 0)
			(void)printf("\n");
		fp = (FINFO *)dp;
	}
	return (numblocks);
d272 4
a275 5
dump_segment(fd, segnum, addr, lfsp, dump_sb)
	int fd, segnum;
	daddr_t addr;
	struct lfs *lfsp;
	int dump_sb;
d277 2
a278 44
	struct lfs lfs_sb, *sbp;
	SEGSUM *sump;
	char sumblock[LFS_SUMMARY_SIZE];
	int did_one, nblocks, sb;
	off_t sum_offset, super_off;

	(void)printf("\nSEGMENT %d (Disk Address 0x%X)\n",
	    addr >> (lfsp->lfs_segshift - daddr_shift), addr);
	sum_offset = (addr << (lfsp->lfs_bshift - lfsp->lfs_fsbtodb));

	sb = 0;
	did_one = 0;
	do {
		get(fd, sum_offset, sumblock, LFS_SUMMARY_SIZE);
		sump = (SEGSUM *)sumblock;
		if (sump->ss_sumsum != cksum (&sump->ss_datasum, 
			LFS_SUMMARY_SIZE - sizeof(sump->ss_sumsum))) {
			sbp = (struct lfs *)sump;
			if (sb = (sbp->lfs_magic == LFS_MAGIC)) {
				super_off = sum_offset;
				sum_offset += LFS_SBPAD;
			} else if (did_one)
				break;
			else {
				printf("Segment at 0x%X corrupt\n", addr);
				break;
			}
		} else {
			nblocks = dump_sum(fd, lfsp, sump, segnum, sum_offset >>
			     (lfsp->lfs_bshift - lfsp->lfs_fsbtodb));
			if (nblocks)
				sum_offset += LFS_SUMMARY_SIZE + 
					(nblocks << lfsp->lfs_bshift);
			else
				sum_offset = 0;
			did_one = 1;
		}
	} while (sum_offset);

	if (dump_sb && sb)  {
		get(fd, super_off, &lfs_sb, sizeof(struct lfs));
		dump_super(&lfs_sb);
	}
	return;
d282 1
a282 2
dump_super(lfsp)
	struct lfs *lfsp;
d284 2
a285 79
	int i;

	(void)printf("%s0x%X\t%s0x%X\t%s%d\t%s%d\n",
		"magic    ", lfsp->lfs_magic,
		"version  ", lfsp->lfs_version,
		"size     ", lfsp->lfs_size,
		"ssize    ", lfsp->lfs_ssize);
	(void)printf("%s%d\t\t%s%d\t%s%d\t%s%d\n",
		"dsize    ", lfsp->lfs_dsize,
		"bsize    ", lfsp->lfs_bsize,
		"fsize    ", lfsp->lfs_fsize,
		"frag     ", lfsp->lfs_frag);

	(void)printf("%s%d\t\t%s%d\t%s%d\t%s%d\n",
		"minfree  ", lfsp->lfs_minfree,
		"inopb    ", lfsp->lfs_inopb,
		"ifpb     ", lfsp->lfs_ifpb,
		"nindir   ", lfsp->lfs_nindir);

	(void)printf("%s%d\t\t%s%d\t%s%d\t%s%d\n",
		"nseg     ", lfsp->lfs_nseg,
		"nspf     ", lfsp->lfs_nspf,
		"cleansz  ", lfsp->lfs_cleansz,
		"segtabsz ", lfsp->lfs_segtabsz);

	(void)printf("%s0x%X\t%s%d\t%s0x%X\t%s%d\n",
		"segmask  ", lfsp->lfs_segmask,
		"segshift ", lfsp->lfs_segshift,
		"bmask    ", lfsp->lfs_bmask,
		"bshift   ", lfsp->lfs_bshift);

	(void)printf("%s0x%X\t\t%s%d\t%s0x%X\t%s%d\n",
		"ffmask   ", lfsp->lfs_ffmask,
		"ffshift  ", lfsp->lfs_ffshift,
		"fbmask   ", lfsp->lfs_fbmask,
		"fbshift  ", lfsp->lfs_fbshift);

	(void)printf("%s%d\t%s%d\t%s0x%X\t%s0x%qx\n",
		"sushift  ", lfsp->lfs_sushift,
		"fsbtodb  ", lfsp->lfs_fsbtodb,
		"cksum    ", lfsp->lfs_cksum,
		"maxfilesize  ", lfsp->lfs_maxfilesize);

	(void)printf("Superblock disk addresses:\t");
	for (i = 0; i < LFS_MAXNUMSB; i++) {
		(void)printf(" 0x%X", lfsp->lfs_sboffs[i]);
		if ( i == (LFS_MAXNUMSB >> 1))
			(void)printf("\n\t\t\t\t");
	}
	(void)printf("\n");

	(void)printf("Checkpoint Info\n");
	(void)printf("%s%d\t%s0x%X\t%s%d\n",
		"free     ", lfsp->lfs_free,
		"idaddr   ", lfsp->lfs_idaddr,
		"ifile    ", lfsp->lfs_ifile);
	(void)printf("%s%d\t%s%d\t%s%d\n",
		"bfree    ", lfsp->lfs_bfree,
		"avail    ", lfsp->lfs_avail,
		"uinodes  ", lfsp->lfs_uinodes);
	(void)printf("%s%d\t%s0x%X\t%s0x%X\n%s0x%X\t%s0x%X\t",
		"nfiles   ", lfsp->lfs_nfiles,
		"lastseg  ", lfsp->lfs_lastseg,
		"nextseg  ", lfsp->lfs_nextseg,
		"curseg   ", lfsp->lfs_curseg,
		"offset   ", lfsp->lfs_offset);
	(void)printf("tstamp   %s", ctime((time_t *)&lfsp->lfs_tstamp));
	(void)printf("\nIn-Memory Information\n");
	(void)printf("%s%d\t%s0x%X\t%s%d%s%d\t%s%d\n",
		"seglock  ", lfsp->lfs_seglock,
		"iocount  ", lfsp->lfs_iocount,
		"writer   ", lfsp->lfs_writer,
		"dirops   ", lfsp->lfs_dirops,
		"doifile  ", lfsp->lfs_doifile);
	(void)printf("%s%d\t%s%d\t%s0x%X\t%s%d\n",
		"nactive  ", lfsp->lfs_nactive,
		"fmod     ", lfsp->lfs_fmod,
		"clean    ", lfsp->lfs_clean,
		"ronly    ", lfsp->lfs_ronly);
d289 3
a291 2
addseg(arg)
	char *arg;
d293 1
a293 7
	SEGLIST *p;

	if ((p = malloc(sizeof(SEGLIST))) == NULL)
		err("%s", strerror(errno));
	p->next = seglist;
	p->num = atoi(arg);
	seglist = p;
d296 5
a300 4
static void
dump_cleaner_info(lfsp, ipage)
	struct lfs *lfsp;
	void *ipage;
d302 2
a303 1
	CLEANERINFO *cip;
d305 10
a314 4
	cip = (CLEANERINFO *)ipage;
	(void)printf("segments clean\t%d\tsegments dirty\t%d\n\n",
	    cip->clean, cip->dirty);
}
d316 3
a318 5
static void
usage()
{
	(void)fprintf(stderr, "usage: dumplfs [-ai] [-s segnum] file\n");
	exit(1);
@
