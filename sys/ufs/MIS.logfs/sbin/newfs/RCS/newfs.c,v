head	1.7;
access;
symbols;
locks
	margo:1.7; strict;
comment	@ * @;


1.7
date	94.12.20.21.02.54;	author margo;	state Exp;
branches;
next	1.6;

1.6
date	94.11.22.15.43.04;	author margo;	state Exp;
branches;
next	1.5;

1.5
date	94.10.04.19.13.32;	author margo;	state Exp;
branches;
next	1.4;

1.4
date	94.06.23.17.41.55;	author margo;	state Exp;
branches;
next	1.3;

1.3
date	94.05.26.19.08.55;	author margo;	state Exp;
branches;
next	1.2;

1.2
date	94.05.26.13.57.41;	author margo;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.21.33.00;	author margo;	state Exp;
branches;
next	;


desc
@Original wafs-only version
@


1.7
log
@Add code to get labels off both devices when created logged ffs.
@
text
@#ifdef CLFS
/* CLFS
 * $Log: newfs.c,v $
 * Revision 1.6  1994/11/22  15:43:04  margo
 * Add AIX ifdefs
 *
 * Revision 1.5  1994/10/04  19:13:32  margo
 * 4.4Lite Version as modified by CLAM/Jack Test.
 *
 * Revision 1.2  1994/09/21  18:33:50  jat
 * Initial working version for WAFS.
 *
 * Revision 1.1  1994/09/16  18:42:06  jat
 * Initial version for WAFS.
 *
 * Revision 1.4  1994/08/05  14:26:16  zarembok
 * Added ODM checks for disks and LVs in use.
 *
 */
#endif
/*
 * Copyright (c) 1994 The President and Fellows of Harvard  University.
 * Copyright (c) 1983, 1989, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

static char *rcsid = "$Id";

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1983, 1989, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

/*
 * newfs: friendly front end to mkfs
 */

#ifdef AIX
#include <sys/devinfo.h>
#include <sys/bsd_param.h>
#else
#include <sys/param.h>
#endif

#include <sys/stat.h>
#include <sys/ioctl.h>
#include <sys/disklabel.h>
#include <sys/file.h>
#include <sys/mount.h>

#include <ufs/ufs/dir.h>
#include <ufs/ffs/fs.h>

#include <ctype.h>
#include <errno.h>
#include <paths.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>

#ifdef AIX
#include <odmi.h>
#include <sys/cfgodm.h>
#endif

#if __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif

#ifndef AIX
#include "mntopts.h"

struct mntopt mopts[] = {
	MOPT_STDOPTS,
	MOPT_ASYNC,
	{ NULL },
};
#endif

#if __STDC__
void	fatal(const char *fmt, ...);
#else
void	fatal();
#endif

#ifndef COMPAT
#define	COMPAT			/* allow non-labeled disks */
#endif

/*
 * The following two constants set the default block and fragment sizes.
 * Both constants must be a power of 2 and meet the following constraints:
 *	MINBSIZE <= DESBLKSIZE <= MAXBSIZE
 *	sectorsize <= DESFRAGSIZE <= DESBLKSIZE
 *	DESBLKSIZE / DESFRAGSIZE <= 8
 */
#define	DFL_FRAGSIZE	1024
#define	DFL_BLKSIZE	8192

/*
 * Cylinder groups may have up to many cylinders. The actual
 * number used depends upon how much information can be stored
 * on a single cylinder. The default is to use 16 cylinders
 * per group.
 */
#define	DESCPG		16	/* desired fs_cpg */

/*
 * ROTDELAY gives the minimum number of milliseconds to initiate
 * another disk transfer on the same cylinder. It is used in
 * determining the rotationally optimal layout for disk blocks
 * within a file; the default of fs_rotdelay is 4ms.
 */
#define ROTDELAY	4

/*
 * MAXBLKPG determines the maximum number of data blocks which are
 * placed in a single cylinder group. The default is one indirect
 * block worth of data blocks.
 */
#define MAXBLKPG(bsize)	((bsize) / sizeof(daddr_t))

/*
 * Each file system has a number of inodes statically allocated.
 * We allocate one inode slot per NFPI fragments, expecting this
 * to be far more than we will ever need.
 */
#define	NFPI		4

/*
 * For each cylinder we keep track of the availability of blocks at different
 * rotational positions, so that we can lay out the data to be picked
 * up with minimum rotational latency.  NRPOS is the default number of
 * rotational positions that we distinguish.  With NRPOS of 8 the resolution
 * of our summary information is 2ms for a typical 3600 rpm drive.
 */
#define	NRPOS		8	/* number distinct rotational positions */


int	mfs;			/* run as the memory based filesystem */
int	Nflag;			/* run without writing file system */
int	Oflag;			/* format as an 4.3BSD file system */
int	fssize;			/* file system size */
int	ntracks;		/* # tracks/cylinder */
int	nsectors;		/* # sectors/track */
int	nphyssectors;		/* # sectors/track including spares */
int	secpercyl;		/* sectors per cylinder */
int	trackspares = -1;	/* spare sectors per track */
int	cylspares = -1;		/* spare sectors per cylinder */
int	sectorsize;		/* bytes/sector */
#ifdef tahoe
int	realsectorsize;		/* bytes/sector in hardware */
#endif
int	rpm;			/* revolutions/minute of drive */
int	interleave;		/* hardware sector interleave */
int	trackskew = -1;		/* sector 0 skew, per track */
int	headswitch;		/* head switch time, usec */
int	trackseek;		/* track-to-track seek, usec */
int	fsize = 0;		/* fragment size */
int	bsize = 0;		/* block size */
int	cpg = DESCPG;		/* cylinders/cylinder group */
int	cpgflg;			/* cylinders/cylinder group flag was given */
int	minfree = MINFREE;	/* free space threshold */
int	opt = DEFAULTOPT;	/* optimization preference (space or time) */
int	density;		/* number of bytes per inode */
int	maxcontig = 0;		/* max contiguous blocks to allocate */
int	rotdelay = ROTDELAY;	/* rotational delay between blocks */
int	maxbpg;			/* maximum blocks per file in a cyl group */
int	nrpos = NRPOS;		/* # of distinguished rotational positions */
int	bbsize = BBSIZE;	/* boot block size */
int	sbsize = SBSIZE;	/* superblock size */
int	mntflags = MNT_ASYNC;	/* flags to be passed to mount */
u_long	memleft;		/* virtual memory available */
caddr_t	membase;		/* start address of memory based filesystem */
#ifdef COMPAT
char	*disktype;
int	unlabeled;
#endif

char	device[MAXPATHLEN];
char	*progname;
char	*special;

int	wafs = 0;		/* wafs only */
int	threads = 0;		/* Number of "inodes" in a WAFS */
int	debug;			/* allow writing to regular file */
char	*logfs = NULL;		/* wafs device */
static struct disklabel *debug_readlabel __P((int));
int	getlabelinfo __P((char *, char *, struct partition **, struct disklabel **));
long	id;			/* unique identifier */

int
main(argc, argv)
	int argc;
	char *argv[];
{
	extern char *optarg;
	extern int optind;
	register int ch;
	struct partition *pp;
	struct disklabel *lp;
	struct partition oldpartition;
	struct stat st;
	struct statfs *mp;
	int fsi, fso, len, n;
	char *cp, *s1, *s2, *opstring, buf[BUFSIZ];
#ifdef AIX
	int	rc;
	void aix_checkifmounted();
#endif

	if (progname = rindex(*argv, '/'))
		++progname;
	else
		progname = *argv;

	if (strstr(progname, "mfs")) {
		mfs = 1;
		Nflag++;
	}

	opstring = mfs ?
	    "NT:a:b:c:d:e:f:i:m:o:s:" :
	    ":DJ:M:NOS:T:Wa:b:c:d:e:f:i:k:l:m:n:o:p:r:s:t:u:x:";
	while ((ch = getopt(argc, argv, opstring)) != EOF)
		switch (ch) {
		case 'D':
			debug = 1;
			break;
		case 'J':
			logfs = optarg;
			break;
		case 'M':	/* Maximum number of threads in a log fs */
			if ((threads = atoi(optarg)) == 0)
				fatal("%s: bad flag value -M %s\n", optarg);
			break;
		case 'N':
			Nflag = 1;
			break;
		case 'O':
			Oflag = 1;
			break;
		case 'S':
			if ((sectorsize = atoi(optarg)) <= 0)
				fatal("%s: bad sector size", optarg);
			break;
#ifdef COMPAT
		case 'T':
			disktype = optarg;
			break;
#endif
		case 'W':	/* Create a wafs */
			wafs = 1;
			break;
		case 'a':
			if ((maxcontig = atoi(optarg)) <= 0)
				fatal("%s: bad maximum contiguous blocks\n",
				    optarg);
			break;
		case 'b':
			if ((bsize = atoi(optarg)) < MINBSIZE)
				fatal("%s: bad block size", optarg);
			break;
		case 'c':
			if ((cpg = atoi(optarg)) <= 0)
				fatal("%s: bad cylinders/group", optarg);
			cpgflg++;
			break;
		case 'd':
			if ((rotdelay = atoi(optarg)) < 0)
				fatal("%s: bad rotational delay\n", optarg);
			break;
		case 'e':
			if ((maxbpg = atoi(optarg)) <= 0)
		fatal("%s: bad blocks per file in a cylinder group\n",
				    optarg);
			break;
		case 'f':
			if ((fsize = atoi(optarg)) <= 0)
				fatal("%s: bad fragment size", optarg);
			break;
		case 'i':
			if ((density = atoi(optarg)) <= 0)
				fatal("%s: bad bytes per inode\n", optarg);
			break;
		case 'k':
			if ((trackskew = atoi(optarg)) < 0)
				fatal("%s: bad track skew", optarg);
			break;
		case 'l':
			if ((interleave = atoi(optarg)) <= 0)
				fatal("%s: bad interleave", optarg);
			break;
		case 'm':
			if ((minfree = atoi(optarg)) < 0 || minfree > 99)
				fatal("%s: bad free space %%\n", optarg);
			break;
		case 'n':
			if ((nrpos = atoi(optarg)) <= 0)
				fatal("%s: bad rotational layout count\n",
				    optarg);
			break;
		case 'o':
#ifndef AIX
			if (mfs)
				getmntopts(optarg, mopts, &mntflags);
			else {
#endif
				if (strcmp(optarg, "space") == 0)
					opt = FS_OPTSPACE;
				else if (strcmp(optarg, "time") == 0)
					opt = FS_OPTTIME;
				else
	fatal("%s: unknown optimization preference: use `space' or `time'.");
#ifndef AIX
			}
#endif
			break;
		case 'p':
			if ((trackspares = atoi(optarg)) < 0)
				fatal("%s: bad spare sectors per track",
				    optarg);
			break;
		case 'r':
			if ((rpm = atoi(optarg)) <= 0)
				fatal("%s: bad revolutions/minute\n", optarg);
			break;
		case 's':
			if ((fssize = atoi(optarg)) <= 0)
				fatal("%s: bad file system size", optarg);
			break;
		case 't':
			if ((ntracks = atoi(optarg)) <= 0)
				fatal("%s: bad total tracks", optarg);
			break;
		case 'u':
			if ((nsectors = atoi(optarg)) <= 0)
				fatal("%s: bad sectors/track", optarg);
			break;
		case 'x':
			if ((cylspares = atoi(optarg)) < 0)
				fatal("%s: bad spare sectors per cylinder",
				    optarg);
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc != 2 && (mfs || argc != 1))
		usage();

	special = argv[0];
	cp = rindex(special, '/');
	if (cp == 0) {
		/*
		 * No path prefix; try /dev/r%s then /dev/%s.
		 */
		(void)sprintf(device, "%sr%s", _PATH_DEV, special);
		if (stat(device, &st) == -1)
			(void)sprintf(device, "%s%s", _PATH_DEV, special);
		special = device;
	}
	if (Nflag) {
		fso = -1;
	} else {
		fso = open(special, (debug ? O_CREAT : 0) | O_WRONLY);
		if (fso < 0)
			fatal("%s: %s", special, strerror(errno));

		/* Bail if target special is mounted */
#ifdef AIX
		(void) aix_checkifmounted(special);
		/* Make sure ODM doesn't think the device is in use */
		rc = aix_check_odm(special);
		if (rc != 0) { exit(-1); }
#else
		n = getmntinfo(&mp, MNT_NOWAIT);
		if (n == 0)
			fatal("%s: getmntinfo: %s", special, strerror(errno));

		len = sizeof(_PATH_DEV) - 1;
		s1 = special;
		if (strncmp(_PATH_DEV, s1, len) == 0)
			s1 += len;

		while (--n >= 0) {
			s2 = mp->f_mntfromname;
			if (strncmp(_PATH_DEV, s2, len) == 0) {
				s2 += len - 1;
				*s2 = 'r';
			}
			if (strcmp(s1, s2) == 0 || strcmp(s1, &s2[1]) == 0)
				fatal("%s is mounted on %s",
				    special, mp->f_mntonname);
			++mp;
		}
#endif
	}
	if (mfs && disktype != NULL) {
		lp = (struct disklabel *)getdiskbyname(disktype);
		if (lp == NULL)
			fatal("%s: unknown disk type", disktype);
		pp = &lp->d_partitions[1];
	} else {
		if (!mfs && disktype == NULL)
			disktype = argv[1];
		fsi = getlabelinfo(special, disktype, &pp, &lp);
	}
	if (wafs) {
		close(fsi);
		exit(mkwafs(fso, lp, pp, minfree, bsize, threads, id));
	}

	if (fssize == 0)
		fssize = pp->p_size;
	if (fssize > pp->p_size && !mfs)
	       fatal("%s: maximum file system size on the `%c' partition is %d",
			argv[0], *cp, pp->p_size);
	if (rpm == 0) {
		rpm = lp->d_rpm;
		if (rpm <= 0)
			rpm = 3600;
	}
	if (ntracks == 0) {
		ntracks = lp->d_ntracks;
		if (ntracks <= 0)
			fatal("%s: no default #tracks", argv[0]);
	}
	if (nsectors == 0) {
		nsectors = lp->d_nsectors;
		if (nsectors <= 0)
			fatal("%s: no default #sectors/track", argv[0]);
	}
	if (sectorsize == 0) {
		sectorsize = lp->d_secsize;
		if (sectorsize <= 0)
			fatal("%s: no default sector size", argv[0]);
	}
	if (trackskew == -1) {
		trackskew = lp->d_trackskew;
		if (trackskew < 0)
			trackskew = 0;
	}
	if (interleave == 0) {
		interleave = lp->d_interleave;
		if (interleave <= 0)
			interleave = 1;
	}
	if (fsize == 0) {
		fsize = pp->p_fsize;
		if (fsize <= 0)
			fsize = MAX(DFL_FRAGSIZE, lp->d_secsize);
	}
	if (bsize == 0) {
		bsize = pp->p_frag * pp->p_fsize;
		if (bsize <= 0)
			bsize = MIN(DFL_BLKSIZE, 8 * fsize);
	}
	/*
	 * Maxcontig sets the default for the maximum number of blocks
	 * that may be allocated sequentially. With filesystem clustering
	 * it is possible to allocate contiguous blocks up to the maximum
	 * transfer size permitted by the controller or buffering.
	 */
	if (maxcontig == 0)
		maxcontig = MAX(1, MIN(MAXPHYS, MAXBSIZE) / bsize - 1);
	if (density == 0)
		density = NFPI * fsize;
	if (minfree < MINFREE && opt != FS_OPTSPACE) {
		fprintf(stderr, "Warning: changing optimization to space ");
		fprintf(stderr, "because minfree is less than %d%%\n", MINFREE);
		opt = FS_OPTSPACE;
	}
	if (trackspares == -1) {
		trackspares = lp->d_sparespertrack;
		if (trackspares < 0)
			trackspares = 0;
	}
	nphyssectors = nsectors + trackspares;
	if (cylspares == -1) {
		cylspares = lp->d_sparespercyl;
		if (cylspares < 0)
			cylspares = 0;
	}
	secpercyl = nsectors * ntracks - cylspares;
	if (secpercyl != lp->d_secpercyl)
		fprintf(stderr, "%s (%d) %s (%lu)\n",
			"Warning: calculated sectors per cylinder", secpercyl,
			"disagrees with disk label", lp->d_secpercyl);
	if (maxbpg == 0)
		maxbpg = MAXBLKPG(bsize);
	headswitch = lp->d_headswitch;
	trackseek = lp->d_trkseek;
#ifdef notdef /* label may be 0 if faked up by kernel */
	bbsize = lp->d_bbsize;
	sbsize = lp->d_sbsize;
#endif
	oldpartition = *pp;
#ifdef tahoe
	realsectorsize = sectorsize;
	if (sectorsize != DEV_BSIZE) {		/* XXX */
		int secperblk = DEV_BSIZE / sectorsize;

		sectorsize = DEV_BSIZE;
		nsectors /= secperblk;
		nphyssectors /= secperblk;
		secpercyl /= secperblk;
		fssize /= secperblk;
		pp->p_size /= secperblk;
	}
#endif
	/*
	 * If there is a log associated with the main file system,
	 * then we have to generate a unique random number that
	 * associates the two.  We write that into the superblocks
	 * of both file systems and check it at mount time and during
	 * recovery.
	 */
	if (logfs) {
		srandom((unsigned)time((time_t *)NULL));
		id = random();
	} else
		id = 0;
	mkfs(pp, special, fsi, fso, id);
#ifdef tahoe
	if (realsectorsize != DEV_BSIZE)
		pp->p_size *= DEV_BSIZE / realsectorsize;
#endif
/*
 *  CANNOT REWRITE LABEL ON SPARC
	if (!Nflag && bcmp(pp, &oldpartition, sizeof(oldpartition)))
		rewritelabel(special, fso, lp);
 */
	if (!Nflag)
		close(fso);
	close(fsi);

	/* Now, if we need a log, let's create that. */
	if (logfs) {
		special = logfs;
		cp = rindex(special, '/');
		if (cp == 0) {
			/*
			 * No path prefix; try /dev/r%s then /dev/%s.
			 */
			(void)sprintf(device, "%sr%s", _PATH_DEV, special);
			if (stat(device, &st) == -1)
				(void)sprintf(device, "%s%s", _PATH_DEV,
				    special);
			special = device;
		}
		fsi = getlabelinfo(special, disktype, &pp, &lp);
		close(fsi);
		fso = open(special, (debug ? O_CREAT : 0) | O_WRONLY);
		if (fso < 0)
			fatal("%s: %s", special, strerror(errno));

		mkwafs(fso, lp, pp, minfree, bsize, threads, id);
	}

	if (mfs) {
		struct mfs_args args;

		sprintf(buf, "mfs:%d", getpid());
		args.fspec = buf;
		args.export.ex_root = -2;
		if (mntflags & MNT_RDONLY)
			args.export.ex_flags = MNT_EXRDONLY;
		else
			args.export.ex_flags = 0;
		args.base = membase;
		args.size = fssize * sectorsize;
		if (mount(MOUNT_MFS, argv[1], mntflags, &args) < 0)
			fatal("%s: %s", argv[1], strerror(errno));
	}

	exit(0);
}


rewritelabel(s, fd, lp)
	char *s;
	int fd;
	register struct disklabel *lp;
{
#ifdef COMPAT
	if (unlabeled)
		return;
#endif
	lp->d_checksum = 0;
	lp->d_checksum = dkcksum(lp);
	if (ioctl(fd, DIOCWDINFO, (char *)lp) < 0) {
		warn("ioctl (WDINFO)");
		fatal("%s: can't rewrite disk label", s);
	}
#if vax
	if (lp->d_type == DTYPE_SMD && lp->d_flags & D_BADSECT) {
		register i;
		int cfd;
		daddr_t alt;
		char specname[64];
		char blk[1024];
		char *cp;

		/*
		 * Make name for 'c' partition.
		 */
		strcpy(specname, s);
		cp = specname + strlen(specname) - 1;
		if (!isdigit(*cp))
			*cp = 'c';
		cfd = open(specname, O_WRONLY);
		if (cfd < 0)
			fatal("%s: %s", specname, strerror(errno));
		bzero(blk, sizeof(blk));
		*(struct disklabel *)(blk + LABELOFFSET) = *lp;
		alt = lp->d_ncylinders * lp->d_secpercyl - lp->d_nsectors;
		for (i = 1; i < 11 && i < lp->d_nsectors; i += 2) {
			if (lseek(cfd, (off_t)(alt + i) * lp->d_secsize,
			    L_SET) == -1)
				fatal("lseek to badsector area: %s",
				    strerror(errno));
			if (write(cfd, blk, lp->d_secsize) < lp->d_secsize)
				warn("alternate label %d write", i/2);
		}
		close(cfd);
	}
#endif
}

usage()
{
	if (mfs) {
		fprintf(stderr,
		    "usage: %s [ -fsoptions ] special-device mount-point\n",
			progname);
	} else
		fprintf(stderr,
		    "usage: %s [ -fsoptions ] special-device%s\n",
		    progname,
#ifdef COMPAT
		    " [device-type]");
#else
		    "");
#endif
	fprintf(stderr, "where fsoptions are:\n");
	fprintf(stderr, "\t-J log_device (logged FFS)\n");
	fprintf(stderr, "\t-M max_threads (in a wafs)\n");
	fprintf(stderr,
	    "\t-N do not create file system, just print out parameters\n");
	fprintf(stderr, "\t-O create a 4.3BSD format filesystem\n");
	fprintf(stderr, "\t-S sector size\n");
#ifdef COMPAT
	fprintf(stderr, "\t-T disktype\n");
#endif
	fprintf(stderr, "\t-W build write-ahead log file system\n");
	fprintf(stderr, "\t-a maximum contiguous blocks\n");
	fprintf(stderr, "\t-b block size\n");
	fprintf(stderr, "\t-c cylinders/group\n");
	fprintf(stderr, "\t-d rotational delay between contiguous blocks\n");
	fprintf(stderr, "\t-e maximum blocks per file in a cylinder group\n");
	fprintf(stderr, "\t-f frag size\n");
	fprintf(stderr, "\t-i number of bytes per inode\n");
	fprintf(stderr, "\t-k sector 0 skew, per track\n");
	fprintf(stderr, "\t-l hardware sector interleave\n");
	fprintf(stderr, "\t-m minimum free space %%\n");
	fprintf(stderr, "\t-n number of distinguished rotational positions\n");
	fprintf(stderr, "\t-o optimization preference (`space' or `time')\n");
	fprintf(stderr, "\t-p spare sectors per track\n");
	fprintf(stderr, "\t-s file system size (sectors)\n");
	fprintf(stderr, "\t-r revolutions/minute\n");
	fprintf(stderr, "\t-t tracks/cylinder\n");
	fprintf(stderr, "\t-u sectors/track\n");
	fprintf(stderr, "\t-x spare sectors per cylinder\n");
	exit(1);
}

static struct disklabel *
debug_readlabel(fd)
	int fd;
{
	static struct disklabel lab;
	int n;

	lab.d_magic = 0x82564557;
	lab.d_type = 0;
	lab.d_subtype = 0;
	lab.d_un.un_b.un_d_boot0 = "Primary Boot";
	bcopy("debug", lab.d_typename, strlen("debug") + 1);
	bcopy("debug", lab.d_packname, strlen("debug") + 1);
	lab.d_secsize = 512; 
	lab.d_nsectors = 36;
	lab.d_ntracks = 9;
	lab.d_ncylinders = 1254;
	lab.d_secpercyl = 324;
	lab.d_secperunit = 0;
	lab.d_sparespertrack = 0;
	lab.d_sparespercyl = 0;
	lab.d_acylinders = 0;
	lab.d_interleave = 0;
	lab.d_trackskew = 0;
	lab.d_cylskew = 0;
	lab.d_headswitch = 0;
	lab.d_trkseek = 0;
	lab.d_flags = 0;
	lab.d_npartitions = 1;
	lab.d_bbsize = 4096;
	lab.d_sbsize = 8192;
	lab.d_partitions[0].p_size = 32768;
	lab.d_partitions[0].p_offset = 8192;
	lab.d_partitions[0].p_fsize = 1024;
	lab.d_partitions[0].p_fstype = 0;
	lab.d_partitions[0].p_frag = 1024;
	return(&lab);
}

/*
 * Opens the file for reading and gets the disklabel and partition information.
 */
int
getlabelinfo(char *dev, char *disktype, struct partition **partp,
    struct disklabel **labelp)
{
	register struct partition *pp;
	register struct disklabel *lp;
	struct disklabel *getdisklabel __P((char *, int));
	struct stat st;
	char *cp;
	int fd;

	fd = open(dev, O_RDONLY);

	if (fd < 0)
		fatal("%s: %s", dev, strerror(errno));
	if (fstat(fd, &st) < 0)
		fatal("%s: %s", special, strerror(errno));
	if ((st.st_mode & S_IFMT) != S_IFCHR && !mfs)
		printf("%s: %s: not a character-special device\n",
		    progname, dev);
#ifndef AIX
	cp = index(dev, '\0') - 1;
	if (cp == 0 || (*cp < 'a' || *cp > 'h') && !isdigit(*cp))
		fatal("%s: can't figure out file system partition", dev);
#endif
	if (debug)
		lp = debug_readlabel(fd);
	else
		lp = getdisklabel(dev, fd);
#ifdef AIX
	cpg = lp->d_ncylinders;
	pp = &lp->d_partitions['c' - 'a']; /* we assume partition c */
#else
	if (isdigit(*cp))
		pp = &lp->d_partitions[0];
	else
		pp = &lp->d_partitions[*cp - 'a'];
#endif
	if (pp->p_size == 0)
		fatal("%s: `%c' partition is unavailable", dev, *cp);
	if (pp->p_fstype == FS_BOOT)
		fatal("%s: `%c' partition overlaps boot program", dev, *cp);

	*partp = pp;
	*labelp = lp;
	return(fd);
}
@


1.6
log
@Add AIX ifdefs
@
text
@d4 3
d222 1
d233 2
a234 3
	register struct partition *pp;
	register struct disklabel *lp;
	struct disklabel *getdisklabel();
d388 1
a388 4
	if (wafs && logfs)
		special = logfs;
	else
		special = argv[0];
a402 1
		fso = open(special, O_WRONLY);
a440 15
		fsi = open(special, O_RDONLY);
		if (fsi < 0)
			fatal("%s: %s", special, strerror(errno));
		if (fstat(fsi, &st) < 0)
			fatal("%s: %s", special, strerror(errno));
		if ((st.st_mode & S_IFMT) != S_IFCHR && !mfs)
			printf("%s: %s: not a character-special device\n",
			    progname, special);
#ifndef AIX
		cp = index(argv[0], '\0') - 1;
		if (cp == 0 || (*cp < 'a' || *cp > 'h') && !isdigit(*cp))
			fatal("%s: can't figure out file system partition",
			    argv[0]);
#endif
#ifdef COMPAT
d443 1
a443 20
#endif
		if (debug)
			lp = debug_readlabel(fsi);
		else
			lp = getdisklabel(special, fsi);
#ifdef AIX
		cpg = lp->d_ncylinders;
		pp = &lp->d_partitions['c' - 'a']; /* we assume partition c */
#else
		if (isdigit(*cp))
			pp = &lp->d_partitions[0];
		else
			pp = &lp->d_partitions[*cp - 'a'];
		if (pp->p_size == 0)
			fatal("%s: `%c' partition is unavailable",
			    argv[0], *cp);
		if (pp->p_fstype == FS_BOOT)
			fatal("%s: `%c' partition overlaps boot program",
			      argv[0], *cp);
#endif
d446 2
a447 2
		mkwafs(fso, lp, pp, minfree, bsize, threads, id);
		exit (0);
d449 1
d565 2
d569 1
d588 2
d751 51
@


1.5
log
@4.4Lite Version as modified by CLAM/Jack Test.
@
text
@d1 1
d4 3
d17 1
a17 2
static char *rcsid = "$Id: newfs.c,v 1.2 1994/09/21 18:33:50 jat Exp $";

d19 1
d52 1
a52 3
#ifndef lint
static char sccsid[] = "@@(#)newfs.c	8.8 (Berkeley) 4/18/94";
#endif /* not lint */
a201 1
#ifndef AIX
a202 1
#endif
a213 1
#ifdef	WAFS
a219 1
#endif
a251 1
#ifdef WAFS
a254 5
#else
	opstring = mfs ?
	    "NT:a:b:c:d:e:f:i:m:o:s:" :
	    "NOS:T:a:b:c:d:e:f:i:k:l:m:n:o:p:r:s:t:u:x:";
#endif
a256 1
#ifdef WAFS
a266 1
#endif
a281 1
#ifdef WAFS
a284 1
#endif
a384 4
	if (wafs != 1)
		fatal("NEWFS CALLED WITHOUT -W!!!\n");

#ifdef WAFS
d388 1
a388 2
#endif
	special = argv[0];
a401 1
#ifdef WAFS
a402 1
#else
a403 1
#endif
a459 1
#ifdef WAFS
d463 1
a463 2
#endif
		lp = getdisklabel(special, fsi);
d465 1
a465 1
	    cpg = lp->d_ncylinders;
a479 1
#ifdef WAFS
a483 1
#endif
a581 1
#ifdef WAFS
a594 3
#else
	mkfs(pp, special, fsi, fso);
#endif
d604 1
a604 1
#ifdef WAFS
d625 1
a625 2
#endif
#ifdef MFS
d641 1
a641 1
#endif
a711 1
#ifdef WAFS
a713 1
#endif
a720 1
#ifdef WAFS
a721 1
#endif
a742 1
#ifdef WAFS
a780 172
#endif

#ifdef AIX
void
aix_checkifmounted(special)
char *	special;
{

#include <sys/mntctl.h>
#include <sys/vmount.h>

		int num_returned;
		int bufsize;
		char *buffer;
		int i;

		bufsize = 8192; /* just a first guess */
		buffer = malloc(bufsize);
		if (buffer == 0) {
				printf("malloc error\n");
				exit(-1);
		}
		num_returned = mntctl(MCTL_QUERY, bufsize, buffer);
		if (num_returned < 0) { 
			fatal("mntctl: %s\n", strerror(errno));
		}
		else if (num_returned == 0) {
			/* need more space */
			int	needed;

			needed = (int)*((int *)buffer);
			buffer = realloc(buffer, needed);
			if (buffer == 0) {
				fatal("realloc: %s\n", strerror(errno));
			}
			num_returned = mntctl(MCTL_QUERY, needed, buffer);
			if (num_returned <= 0) {
				fatal("mntctl: %s\n", strerror(errno));
			}

		}
		
		for (i=0; i<num_returned; i++) {
			/* see if our device is already mounted */
			if (strcmp(special, vmt2dataptr((struct vmount *)buffer,
									VMT_OBJECT)) == 0) {
				fatal("error: %s is mounted on %s\n", special, 
						vmt2dataptr((struct vmount *)buffer, VMT_STUB));
			}
			buffer += ((struct vmount *)buffer)->vmt_length;
		}
}

int
aix_check_odm(special)
char *		special;
{

	char			*devname;
	int 			rc;

	/* strip off the last component of the device pathname */
	if ((devname = strrchr(special, '/')) != NULL) {
		devname++;
	}
	else { devname = special; }
	/* see if ODM has the name as either a physical or logical volume */
	rc = odm_initialize();
	if (rc == -1) {
		fprintf(stderr, "odm_initialize error %d.\n", odmerrno);
	}
	rc = check_physical_disk(devname);
	if (rc != 0) { return(rc); }
	rc = check_logical_volume(devname);
	return(rc);
}

int
check_physical_disk(devname)
char	*devname;
{

	char			crit[MAX_ODMI_CRIT];
	struct CuAt		*cuatp;
	struct listinfo listinfo;

	sprintf(crit, "name=%s and attribute=pvid", devname);
	cuatp = (struct CuAt *)odm_get_list(CuAt_CLASS, crit, &listinfo, 1, 1);
	if (cuatp == -1) {
		fprintf(stderr, "ODM Error %d.\n", odmerrno);
		exit(-1);
	}	
	else if (cuatp == NULL) {
		/* if the name wasn't found, and it starts with "r", try again 
		** without the "r", so that if we are using "rhdisk1" we look up
		** "hdisk1", etc.
		*/
		if (devname[0] == 'r') { 
			devname++;
			sprintf(crit, "name=%s and attribute=pvid", devname);
			cuatp = (struct CuAt *)odm_get_list(CuAt_CLASS, crit, &listinfo, 1, 
						1);
			if (cuatp == -1) {
				fprintf(stderr, "ODM Error %d.\n", odmerrno);
				exit(-1);
			}	
		}
	}
	if (cuatp == NULL) { return(0); }
	else {
		/* The device is in ODM as a physical disk.  See if it is 
		** part of a volume group.
		*/
		sprintf(crit, "attribute=pv and value=%s", cuatp->value);
		cuatp = (struct CuAt *)odm_get_list(CuAt_CLASS, crit, &listinfo, 1, 1);
		if (cuatp == -1) {
			fprintf(stderr, "ODM Error %d.\n", odmerrno);
			exit(-1);
		}
		else if (cuatp == NULL) { return(0); }
		else {
			fprintf(stderr, "Disk %s is used by volume group %s\n", devname, 
								cuatp->name);
			return(1);
		}
	}
}

int
check_logical_volume(devname)
char		*devname;
{
	char			crit[MAX_ODMI_CRIT];
	struct CuAt		*cuatp;
	struct listinfo listinfo;

	sprintf(crit, "name=%s and attribute=lvserial_id", devname);
	cuatp = (struct CuAt *)odm_get_list(CuAt_CLASS, crit, &listinfo, 1, 1);
	if (cuatp == -1) {
		fprintf(stderr, "ODM Error %d.\n", odmerrno);
		exit(-1);
	}	
	else {
		/* The device is a logical volume.  We assume that if there is
		** a "label" or "type" attribute associated with it, it is in
		** use.
		*/
		sprintf(crit, "name=%s", devname);
		cuatp = (struct CuAt *)odm_get_list(CuAt_CLASS, crit, &listinfo, 10,
													1);
		if (cuatp == -1) {
			fprintf(stderr, "ODM Error %d.\n", odmerrno);
			exit(-1);
		}
		else if (cuatp == NULL) { return(0); }
		else {
			int		i;
			for (i=0; i<listinfo.num; i++) {
				if ((strcmp(cuatp[i].attribute, "label") == 0) ||
				   (strcmp(cuatp[i].attribute, "type") == 0)) {
					fprintf(stderr, "Logical Volume %s appears to be in use.\n",
						devname);
					return(1);
				}
			}
			return(0);
		}
	}
}


#endif /* AIX */
@


1.4
log
@Set the file system id.
@
text
@d1 14
d16 1
a16 1
 * Copyright (c) 1983, 1989, 1993
a17 2
 * Copyright (c) 1994
 *	The President and Fellows of Harvard University.  All right reserved.
d49 1
a49 1
static char sccsid[] = "@@(#)newlffs.c	8.1 (Berkeley) 6/5/93";
d54 1
a54 1
"@@(#) Copyright (c) 1983, 1989, 1993\n\
d61 5
a65 1
#include <sys/types.h>
d67 2
d74 1
d78 1
d80 12
a96 7
#include <unistd.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <paths.h>
#include <config.h>
d98 10
d114 1
d116 1
a135 2
#define DEFAULTOPT	FS_OPTTIME

a167 1
int	lfs;			/* Log structured file system */
a168 1
int	wafs;			/* write ahead logging file system */
d200 3
a202 3
int	threads = 0;		/* Number of "inodes" in a WAFS */
int	mntflags;		/* flags to be passed to mount */
int	debug;			/* allow writing to regular file */
a209 2
static struct disklabel *debug_readlabel __P((int));

a211 1
char	*logfs = NULL;
d214 10
a235 3
	long id;
	int fsi, fso, segsize;
	char *cp, *opstring, buf[BUFSIZ];
d237 6
a242 2
	char *s1, *s2;
	int len, n;
d254 9
a262 4
	opstring = "F:B:DJ:LM:NOS:T:Wa:b:c:d:e:f:i:k:l:m:n:o:p:r:s:t:u:x:";
	if (!mfs)
		opstring += 2;		/* -F is mfs only */

d264 2
a265 5
		switch(ch) {
		case 'B':	/* LFS segment size */
			if ((segsize = atoi(optarg)) < LFS_MINSEGSIZE)
				fatal("%s: bad flag value -B %s\n", optarg);	
			break;
a268 4
		case 'F':
			if ((mntflags = atoi(optarg)) == 0)
				fatal("%s: bad mount flags", optarg);
			break;
a271 3
		case 'L':
			lfs = 1;
			break;
d276 1
d278 1
a278 1
			Nflag++;
d281 1
a281 1
			Oflag++;
d292 1
d296 1
d299 1
a299 1
				fatal("%s: bad max contiguous blocks\n",
d317 1
a317 1
				fatal("%s: bad blocks per file in a cyl group\n",
d322 1
a322 1
				fatal("%s: bad frag size", optarg);
d346 14
a359 7
			if (strcmp(optarg, "space") == 0)
				opt = FS_OPTSPACE;
			else if (strcmp(optarg, "time") == 0)
				opt = FS_OPTTIME;
			else
				fatal("%s: bad optimization preference %s",
				    optarg, "(options are `space' or `time')");
d368 1
a368 1
				fatal("%s: bad revs/minute\n", optarg);
d397 8
d419 1
d421 3
d428 6
d454 1
d470 1
d475 1
d480 1
d484 6
a489 2
			lp = getdisklabel(special, fsi);
	
d500 1
d502 6
a507 6
	if (lfs) {
		printf("Need to get lfs code integreated here\n");
		exit(1);
	} else if (wafs)
		exit(make_wafs(fso, lp, pp, minfree, bsize, threads, id));

d560 1
a560 1
		maxcontig = MAX(1, MIN(MAXPHYS, MAXBSIZE) / bsize);
d606 1
d619 4
a622 2

	mkfs(pp, special, id, fsi, fso);
a626 1
/*
a628 1
*/
d632 1
a632 1

d651 1
a651 1
		make_wafs(fso, lp, pp, minfree, bsize, threads, id);
d653 1
d659 6
a664 1
		args.name = buf;
a673 5
#ifdef COMPAT
char lmsg[] = "%s: can't read disk label; disk type must be specified";
#else
char lmsg[] = "%s: can't read disk label";
#endif
a674 26
struct disklabel *
getdisklabel(s, fd)
	char *s;
	int fd;
{
	static struct disklabel lab;

	if (ioctl(fd, DIOCGDINFO, (char *)&lab) < 0) {
#ifdef COMPAT
		if (disktype) {
			struct disklabel *lp, *getdiskbyname();

			unlabeled++;
			lp = getdiskbyname(disktype);
			if (lp == NULL)
				fatal("%s: unknown disk type", disktype);
			return (lp);
		}
#endif
		(void)fprintf(stderr,
		    "%s: ioctl (GDINFO): %s\n", progname, strerror(errno));
		fatal(lmsg, s);
	}
	return (&lab);
}

d687 1
a687 2
		(void)fprintf(stderr,
		    "%s: ioctl (WDINFO): %s\n", progname, strerror(errno));
d718 1
a718 3
				fprintf(stderr,
				    "%s: alternate label %d write: %s\n",
				    progname, i/2, strerror(errno));
d741 1
a741 1
	fprintf(stderr, "\t-B lfs segment size\n");
a742 1
	fprintf(stderr, "\t-L create lfs file system\n");
d744 1
d752 1
d754 1
d776 1
d815 172
@


1.3
log
@Incorporate fixes from newwafs to allow newfs to create lfs, ffs, mfs
or wafs file systems.
@
text
@d551 1
d554 1
@


1.2
log
@Put the original ffs code in so that we can create a both a WAFS and
an FFS from the same executable.
@
text
@d71 1
a98 11
/*
 * MINFREE gives the minimum acceptable percentage of file system
 * blocks which may be free. If the freelist drops below this level
 * only the superuser may continue to allocate blocks. This may
 * be set to 0 if no reserve of free blocks is deemed necessary,
 * however throughput drops by fifty percent if the file system
 * is run at between 95% and 100% full; thus the default value of
 * fs_minfree is 5%. With 5% free space, fragmentation is not a
 * problem, so we choose to optimize for time.
 */
#define MINFREE		5
d177 2
d182 1
d197 2
a198 2
	int fsi, fso;
	char *cp, *special, *opstring, buf[BUFSIZ];
d213 1
a213 1
	opstring = "F:B:DJ:LM:NOS:T:a:b:c:d:e:f:i:k:l:m:n:o:p:r:s:t:u:x:";
d220 1
a220 1
			if ((segsize = atoi(optart)) < LFS_MINSEGSIZE)
d237 1
a237 1
			if ((thread = atoi(optarg)) == 0)
d433 1
a433 1
		exit(make_wafs(fso, lp, pp, minfree, bsize, threads));
d541 2
a542 1
		id = random((unsigned)time((tloc *)NULL));
a676 24
/*VARARGS*/
void
#if __STDC__
fatal(const char *fmt, ...)
#else
fatal(fmt, va_alist)
	char *fmt;
	va_dcl
#endif
{
	va_list ap;

#if __STDC__
	va_start(ap, fmt);
#else
	va_start(ap);
#endif
	fprintf(stderr, "%s: ", progname);
	(void)vfprintf(stderr, fmt, ap);
	va_end(ap);
	putc('\n', stderr);
	exit(1);
}

d693 4
d704 1
d724 39
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*-
 * Copyright (c) 1989, 1992, 1993
d4 2
d37 1
a37 3
static char copyright[] =
"@@(#) Copyright (c) 1989, 1992, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
d41 3
a43 1
static char sccsid[] = "@@(#)newfs.c	8.1 (Berkeley) 6/5/93";
d49 1
a50 1
#include <sys/ucred.h>
a55 1

a56 1
#include <ufs/ufs/dinode.h>
d60 5
a66 1
#include <stdlib.h>
d69 1
a70 2
#include "config.h"
#include "extern.h"
d72 6
d80 64
d145 1
d147 1
d171 1
a171 1
int	maxcontig = MAXCONTIG;	/* max contiguous blocks to allocate */
d177 1
d179 1
a179 1
int	threads = 0;		/* Passed to wafs */
d188 2
a189 1
char	*progname, *special;
a190 6
static struct disklabel *getdisklabel __P((char *, int));
static struct disklabel *debug_readlabel __P((int));
static void rewritelabel __P((char *, int, struct disklabel *));
static void usage __P((void));

int
d195 2
d200 1
d203 6
a208 2
	int debug, wafs, lfs, fsi, fso, segsize;
	char *cp, *opstring;
d220 1
a220 2
	/* -F is mfs only and MUST come first! */
	opstring = "F:B:DLM:NS:T:Wa:b:c:d:e:f:i:k:l:m:n:o:p:r:s:t:u:x:";
d222 1
a222 1
		opstring += 2;
a223 1
	debug = wafs = lfs = segsize = 0;
d227 2
a228 2
			if ((segsize = atoi(optarg)) < LFS_MINSEGSIZE)
				fatal("%s: bad segment size", optarg);
d237 4
a240 1
		case 'L':	/* Create lfs */
d243 3
a245 3
		case 'M':	/* Maximum numbers of threads in a wafs */
			if ((threads = atoi(optarg)) == 0)
				fatal("%s: bad mount flags", optarg);
d250 3
d262 1
a262 1
		case 'W':	/* Create wafs */
d270 2
a271 2
		case 'b':	/* used for LFS */
			if ((bsize = atoi(optarg)) < LFS_MINBLOCKSIZE)
d304 1
a304 1
		case 'm':		/* used for LFS & WAFS */
d331 1
a331 1
		case 's':	/* used for LFS */
a357 4
	/*
	 * If the -N flag isn't specified, open the output file.  If no path
	 * prefix, try /dev/r%s and then /dev/%s.
	 */
d359 5
a363 1
	if (!debug && index(special, '/') == NULL) {
d369 4
a372 3
	if (!Nflag) {
		fso = open(special,
		    (debug ? O_CREAT : 0) | O_WRONLY, DEFFILEMODE);
a374 2
	} else
		fso = -1;
d376 4
a379 6
	/* Open the input file. */
	fsi = open(special, O_RDONLY);
	if (fsi < 0)
		fatal("%s: %s", special, strerror(errno));
	if (fstat(fsi, &st) < 0)
		fatal("%s: %s", special, strerror(errno));
d381 4
a384 6
	if (!debug && !mfs && !S_ISCHR(st.st_mode))
		(void)printf("%s: %s: not a character-special device\n",
		    progname, special);
	cp = index(argv[0], '\0') - 1;
	if (!debug && (cp == 0 || (*cp < 'a' || *cp > 'h') && !isdigit(*cp)))
		fatal("%s: can't figure out file system partition", argv[0]);
d386 30
d417 2
a418 2
	if (!mfs && disktype == NULL)
		disktype = argv[1];
d420 21
a440 4
	if (debug)
		lp = debug_readlabel(fsi);
	else
		lp = getdisklabel(special, fsi);
d442 89
a530 6
	if (isdigit(*cp))
		pp = &lp->d_partitions[0];
	else
		pp = &lp->d_partitions[*cp - 'a'];
	if (pp->p_size == 0)
		fatal("%s: `%c' partition is unavailable", argv[0], *cp);
d532 19
a550 3
	/* If we're making a LFS, we break out here */
	if (wafs)
	    exit(make_wafs(fso, lp, pp, minfree, bsize, threads));
d552 44
d604 1
a604 1
static struct disklabel *
a629 41

static struct disklabel *
debug_readlabel(fd)
	int fd;
{
	static struct disklabel lab;
	int n;

	lab.d_magic = 0x82564557;
	lab.d_type = 0;
	lab.d_subtype = 0;
	lab.d_un.un_b.un_d_boot0 = "Primary Boot";
	bcopy("debug", lab.d_typename, strlen("debug") + 1);
	bcopy("debug", lab.d_packname, strlen("debug") + 1);
	lab.d_secsize = 512; 
	lab.d_nsectors = 36;
	lab.d_ntracks = 9;
	lab.d_ncylinders = 1254;
	lab.d_secpercyl = 324;
	lab.d_secperunit = 0;
	lab.d_sparespertrack = 0;
	lab.d_sparespercyl = 0;
	lab.d_acylinders = 0;
	lab.d_interleave = 0;
	lab.d_trackskew = 0;
	lab.d_cylskew = 0;
	lab.d_headswitch = 0;
	lab.d_trkseek = 0;
	lab.d_flags = 0;
	lab.d_npartitions = 1;
	lab.d_bbsize = 4096;
	lab.d_sbsize = 8192;
	lab.d_partitions[0].p_size = 32768;
	lab.d_partitions[0].p_offset = 8192;
	lab.d_partitions[0].p_fsize = 1024;
	lab.d_partitions[0].p_fstype = 0;
	lab.d_partitions[0].p_frag = 1024;
	return(&lab);
}

static void
d683 1
d685 22
d711 2
a712 1
		    "usage: mfs [ -fsoptions ] special-device mount-point\n");
d715 2
a716 1
		    "usage: newfs [ -fsoptions ] special-device%s\n",
a722 4
	fprintf(stderr, "\t-B LFS segment size\n");
	fprintf(stderr, "\t-D debug\n");
	fprintf(stderr, "\t-F mount flags\n");
	fprintf(stderr, "\t-L create LFS file system\n");
d725 1
d743 1
a744 1
	fprintf(stderr, "\t-s file system size (sectors)\n");
@
