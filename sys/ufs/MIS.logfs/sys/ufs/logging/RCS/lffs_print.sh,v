head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	94.09.01.15.50.37;	author margo;	state Exp;
branches;
next	1.1;

1.1
date	94.08.11.15.42.18;	author margo;	state Exp;
branches;
next	;


desc
@Generate routines to dump out log records.
@


1.2
log
@Add db.h include
@
text
@#!/bin/sh
# This script generates the XXX_PRINT routines in the file
# lffs_print.c, from the lffs.src file.
# We need to create:
# 	A PRINT function for every record type.
#	
PROG=lffs_print.sh
if [ $# -ne 1 ]; then
	echo "Usage: lffs_print.sh <name>.src"
	exit 1
fi

ifile=$1
ofile=`basename $ifile .src`
ofile="$ofile"_print.c
if [ $ifile = $ofile ]; then
	echo "$PROG: Invalid input; source file should not end in .c"
	exit 1
fi

echo "/* DO NOT EDIT THIS FILE */" > $ofile
# Put a header on the output file.
awk  '
BEGIN {
	num_funcs = 0;
	printf("#include <stddef.h>\n");
	printf("#include <db.h>\n");
	printf("#include <sys/types.h>\n");
	printf("#include <sys/param.h>\n");
	printf("#include <sys/signal.h>\n");
	printf("#include <sys/time.h>\n");
	printf("#include <sys/uio.h>\n");
	printf("#include <sys/ioctl.h>\n");
	printf("#include <sys/tty.h>\n");
	printf("#include <sys/systm.h>\n");
	printf("#include <sys/proc.h>\n");
	printf("#include <sys/vnode.h>\n");
	printf("#include <ufs/ufs/quota.h>\n");
	printf("#include <ufs/ufs/inode.h>\n");
	printf("#include \"lffs.h\"\n");
	printf("#include \"lffs_auto.h\"\n\n");
}
/^[ 	]*BEGIN/ {
	if (in_begin) {
		print "Invalid format: missing END statement"
		error++;
	}
	in_begin = 1;
	nvars=0;
	funcs[num_funcs] = $2;
	num_funcs++;
	funcname=$2;
}
/^[ 	]*(ARG|STRING|POINTER)/ {
	# Get relevant descriptions of all parameters
	vars[nvars] = $2;
	formats[nvars] = $NF;
	nvars++;
}
/^[ 	]*END/ {
	if (!in_begin) {
		print "Invalid format: missing BEGIN statement"
		error++;
	} else {
		# Function declaration
		printf("void\n%s_PRINT(%s_args *argp)\n{\n",
		    funcname, funcname);

		# Print field values
		printf("\tprintf(\"%%s: ");
		for (i = 0; i < nvars; i ++) {
			if (i != 0)
				printf(", ");
			printf("%s:", vars[i]);
			if (substr(formats[i], length(formats[i]), 1) == "x")
				printf("0x");
			printf("%%%s", formats[i]);
		}
		printf("\\n\",\n\t    ");
		printf("log_names[argp->type], ");
		for (i = 0; i < nvars; i ++) {
			if (i != 0)
				printf(", ");
			if (((i + 1) % 4) == 0)
				printf("\n\t    ");
			printf("argp->%s", vars[i]);
		}
		printf(");");

		printf("\n}\n");
	}
	in_begin = 0;
}
END {
	if (error || in_begin)
		print "Unsuccessful"
	else {
		# Create the switch routine
		printf("void *\nlffs_print%s\n",
		    "(long type, void *rp)");
		printf("{\n");
		printf("\tswitch(type) {\n");
		for (i = 0; i < num_funcs; i++) {
			printf("\t\tcase REC_%s:\n", funcs[i]);
			printf("\t\t\t%s_PRINT(rp);\n", funcs[i]);
			printf("\t\t\treturn;\n");
		}
		printf("\t}\n}\n");
	}
}
' < $ifile >> $ofile


@


1.1
log
@Initial revision
@
text
@d27 1
@
