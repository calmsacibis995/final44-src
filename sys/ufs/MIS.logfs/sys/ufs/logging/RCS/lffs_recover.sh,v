head     1.2;
access   ;
symbols  ;
locks    ; strict;
comment  @# @;


1.2
date     94.10.11.10.45.00;  author margo;  state Exp;
branches ;
next     1.1;

1.1
date     94.08.11.15.42.18;  author margo;  state Exp;
branches ;
next     ;


desc
@Generate wrappers for recovery functions.
@


1.2
log
@Add Db structure to recovery routines.
@
text
@#!/bin/sh
# This script generates the lffs_apply_record switch routine and
# wrappers for the recovery procedures for each record type.
#	
PROG=lffs_recover.sh
if [ $# -ne 1 ]; then
	echo "Usage: lffs_recover.sh <name>.src"
	exit 1
fi

ifile=$1
ofile=`basename $ifile .src`
ofile="$ofile"_recover.template
if [ $ifile = $ofile ]; then
	echo "$PROG: Invalid input; source file should not end in .c"
	exit 1
fi

echo "/* DO NOT EDIT THIS FILE */" > $ofile
# Put a header on the output file.
awk  '
BEGIN {
	num_funcs = 0;
	printf("#include <stddef.h>\n");
	printf("#include <db.h>\n");
	printf("#include <sys/types.h>\n");
	printf("#include <sys/param.h>\n");
	printf("#include <sys/signal.h>\n");
	printf("#include <sys/time.h>\n");
	printf("#include <sys/uio.h>\n");
	printf("#include <sys/ioctl.h>\n");
	printf("#include <sys/tty.h>\n");
	printf("#include <sys/systm.h>\n");
	printf("#include <sys/proc.h>\n");
	printf("#include <sys/vnode.h>\n");
	printf("#include <sys/queue.h>\n");
	printf("#include <ufs/ufs/quota.h>\n");
	printf("#include <ufs/ufs/inode.h>\n");
	printf("#include \"lffs.h\"\n");
	printf("#include \"lffs_auto.h\"\n\n");
	printf("#include \"lffs_roll.h\"\n\n");
}
/^[ 	]*BEGIN/ {
	if (in_begin) {
		print "Invalid format: missing END statement"
		error++;
	}
	in_begin = 1;
	nvars=0;
	funcs[num_funcs] = $2;
	num_funcs++;
	funcname=$2;
}
/^[ 	]*(ARG|STRING|POINTER)/ {
	# Get relevant descriptions of all parameters
	vars[nvars] = $2;
	formats[nvars] = $NF;
	nvars++;
}
/^[ 	]*END/ {
	if (!in_begin) {
		print "Invalid format: missing BEGIN statement"
		error++;
	} else {
		# Function declaration
		printf("void\n%s_RECOVER(DB *dbp, %s_args *argp)\n{\n",
		    funcname, funcname);
		printf("/* RECOVERY CODE GOES HERE */\n");
		printf("\n}\n");
	}
	in_begin = 0;
}
END {
	if (error || in_begin)
		print "Unsuccessful"
	else {
		# Create the switch routine
		printf("void *\nlffs_apply_record%s\n",
		    "(DB *dbp, long type, void *rp)");
		printf("{\n");
		printf("\tswitch(type) {\n");
		for (i = 0; i < num_funcs; i++) {
			printf("\t\tcase REC_%s:\n", funcs[i]);
			printf("\t\t\t%s_RECOVER(rp);\n", funcs[i]);
			printf("\t\t\treturn;\n");
		}
		printf("\t}\n}\n");
	}
}
' < $ifile >> $ofile


@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
	echo "Usage: lffs_reecover.sh <name>.src"
d13 1
a13 1
ofile="$ofile"_recover.c
d25 1
d36 1
d41 1
d66 1
a66 1
		printf("void\n%s_RECOVER(%s_args *argp)\n{\n",
d79 1
a79 1
		    "(long type, void *rp)");
@
