#!/bin/sh
# This script generates the lffs.h file from the lffs.src file.
# We need to create:
# 	defines for the physical record types (logical types are
#		defined in lffs.h manually)
#	structures for the physical record types
#	function prototypes for the log and read functions
#	
PROG=lffs_h.sh
if [ $# -ne 1 ]; then
	echo "Usage: lffs_h.sh <name>.src"
	exit 1
fi

ifile=$1
ofile=`basename $ifile .src`
ofile="$ofile"_auto.h

if [ $ifile = $ofile ]; then
	echo "$PROG: Invalid input; source file should not end in .h"
	exit 1
fi

echo "/* DO NOT EDIT THIS FILE */" > $ofile
echo "#include <db.h>" >> $ofile
# Put a header on the output file.
awk  '
/^[ 	]*BEGIN/ {
	if (in_begin) {
		print "Invalid format: missing END statement"
		error++;
	}
	in_begin = 1;
	structs++;
	nvars=0;
	funcname=$2;
}
/^[ 	]*(ARG|STRING|POINTER)/ {
	vars[nvars] = $2;
	types[nvars] = $3;
	modes[nvars] = $1;
	for (i = 4; i < NF; i++)
		types[nvars] = sprintf("%s %s", types[nvars], $i);

	nvars++;
}
/^[ 	]*END/ {
	if (!in_begin) {
		print "Invalid format: missing BEGIN statement"
		error++;
	} else {
		# define
		printf("\n#define\tREC_%s\t%d\n", funcname, structs);

		# structure declarations
		printf("typedef struct _%s_args {\n", funcname);
		printf("\tu_long machine;\n\tstruct timeval time;\n");
		for (i = 0; i < nvars; i++)
			printf("\t%s\t%s;\n", types[i], vars[i]);
		printf("} %s_args;\n", funcname);

		# Read function prototype
		printf("%s_args * %s_READ(char *buf);\n\n",
		    funcname, funcname);

		# Log function prototype
		printf("int %s_LOG(struct vnode *vp, struct lwrite_entry *lwp",
		    funcname);
		for (i = 0; i < nvars; i++) {
			printf(", ");
			if ((i % 4) == 0)
				printf("\n\t");
			printf("%s %s", types[i], vars[i]);
		}
		printf(");\n\n");

		# Print function prototype
		printf("void %s_PRINT(%s_args *argp);\n\n",
		    funcname, funcname);

		# Recovery function prototype
		printf("void %s_RECOVER(DB *dbp, %s_args *argp);\n\n",
			funcname, funcname);
	}
	in_begin = 0;
}
END {
	# Write lffs_switch function prototype
	printf("void *\nlffs_switch(char *buf, long type);\n");
	printf("void *\nlffs_print(long type, void *rp);\n");
	printf("void\nlffs_apply_record(DB *dbp, long type, void *rp);\n");
	printf("void *\nlffs_read(int fd, char **bufpp, size_t *len, long *typep);\n");
	if (error || in_begin)
		print "Unsuccessful"
}
' < $ifile >> $ofile


