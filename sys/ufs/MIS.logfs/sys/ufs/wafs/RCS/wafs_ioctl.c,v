head	1.1;
access;
symbols;
locks
	margo:1.1; strict;
comment	@ * @;


1.1
date	94.10.04.16.43.02;	author margo;	state Exp;
branches;
next	;


desc
@Ioctls to handle log writes and write-ahead enforcement.
@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 1994, The President and Fellows of Harvard University
 * Copyright (c) 1982, 1986, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * For version 1, we are going to make all the operations that we do
 * not need ENOTSUP.  For version2, we can decide which ones we ultimately
 * need to support.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/resourcevar.h>
#include <sys/kernel.h>
#include <sys/file.h>
#include <sys/proc.h>
#include <sys/mount.h>
#include <sys/vnode.h>
#include <sys/uio.h>
#include <sys/ioctl.h>

#include <ufs/ufs/quota.h>
#include <ufs/ufs/ufsmount.h>
#include <ufs/wafs/wafs.h>
#include <ufs/wafs/wnode.h>
#include <ufs/wafs/wafs_extern.h>
#include <ufs/logging/lffs.h>

int
wafs_ioctl(ap)
	struct vop_ioctl_args /* {
		struct vnode *a_vp;
		int  a_command;
		caddr_t  a_data;
		int  a_fflag;
		struct ucred *a_cred;
		struct proc *a_p;
	} */ *ap;
{
	struct wnode *wp;
	struct lwrite_entry *lwp;
	int error;
	off_t *offp;

	if (ap->a_command != FIOFSYNC && ap->a_command != FIOLOG)
		return (ENOTTY);

	wp = VTOW(ap->a_vp);
	VOP_LOCK(ap->a_vp);
	error = 0;
	switch(ap->a_command) {
	case FIOFSYNC:
		offp = (off_t *)ap->a_data;
		if (wp->w_lastlsn >= *offp)
			break;
		error = VOP_FSYNC(ap->a_vp, ap->a_cred, 1, ap->a_p);
		if (!error)
			*offp = wp->w_lastlsn;
		break;

	case FIOLOG:
		lwp = (struct lwrite_entry *)ap->a_data;
		lwp->logrec_begin = wp->w_head;
		error = VOP_WRITE(ap->a_vp, lwp->uio, ap->a_fflag | IO_APPEND,
		    ap->a_cred);
		lwp->logrec_end = wp->w_head;
		break;
	}

	VOP_UNLOCK(ap->a_vp);
	return(error);
}
@
