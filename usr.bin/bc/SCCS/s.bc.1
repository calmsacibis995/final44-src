h56434
s 00002/00002/00190
d D 8.1 93/06/29 17:18:06 bostic 13 12
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00005/00006/00187
d D 6.9 93/06/29 17:17:50 mckusick 12 10
c format nits
e
s 00002/00002/00191
d R 8.1 93/06/06 14:24:26 bostic 11 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00051/00048/00142
d D 6.8 91/08/08 17:48:06 cael 10 9
c mdoc version three
e
s 00005/00004/00185
d D 6.7 91/04/17 17:00:39 bostic 9 8
c new copyright; att/bsd/shared
e
s 00028/00023/00161
d D 6.6 90/07/24 22:41:27 cael 8 7
c .Xr botch fix
e
s 00004/00005/00180
d D 6.5 90/06/26 00:58:44 cael 7 6
c converted man page
e
s 00001/00001/00184
d D 6.4 90/06/23 14:53:57 bostic 6 5
c move lib.b to bc.library
e
s 00112/00123/00073
d D 6.3 90/06/11 05:53:23 cael 5 4
c converted man page
e
s 00001/00001/00195
d D 6.2 87/07/28 08:21:06 bostic 4 3
c mention calculator in index
e
s 00001/00001/00195
d D 6.1 85/04/29 17:40:00 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00001/00001/00195
d D 5.1 85/04/29 17:39:47 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00196/00000/00000
d D 4.1 85/04/29 17:39:38 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 5
.\"	%W% (Berkeley) %G%
E 5
I 5
D 7
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 7
I 7
D 9
.\" Copyright (c) 1990 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 9
I 9
D 13
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 13
I 13
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 13
E 9
E 7
E 5
.\"
D 2
.TH BC 1 4/1/81
E 2
I 2
D 3
.TH BC 1 "1 April 1981"
E 3
I 3
D 5
.TH BC 1 "%Q%"
E 3
E 2
.AT 3
.SH NAME
D 4
bc \- arbitrary-precision arithmetic language
E 4
I 4
bc \- arbitrary-precision arithmetic language and calculator
E 4
.SH SYNOPSIS
.B bc
[
.B \-c
] [
.B \-l
] [ file ... ]
.SH DESCRIPTION
.I Bc
E 5
I 5
D 7
.\" %sccs.include.redist.man%
.\"
E 7
D 9
.\"     %W% (Berkeley) %G%
E 9
I 9
.\" %sccs.include.proprietary.roff%
.\"
.\"	%W% (Berkeley) %G%
E 9
.\"
.Dd %Q%
.Dt BC 1
.Os ATT 7th
.Sh NAME
D 10
.Nm bc
E 10
I 10
.Nm \&bc
E 10
.Nd arbitrary-precision arithmetic language and calculator
.Sh SYNOPSIS
D 10
.Nm bc
E 10
I 10
.Nm \&bc
E 10
.Op Fl c
.Op Fl l
.Ar
.Sh DESCRIPTION
D 10
.Nm Bc
E 10
I 10
.Nm \&Bc
E 10
E 5
is an interactive processor for a language which resembles
C but provides unlimited precision arithmetic.
It takes input from any files given, then reads
the standard input.
D 10
The
D 5
.B \-l
E 5
I 5
.Tp Fl l
E 10
I 10
.Pp
Options available:
.Bl -tag -width flag
.It Fl l
E 10
E 5
D 8
argument stands for the name
E 8
I 8
allow specification
E 8
of an arbitrary precision math library.
D 5
The syntax for 
.I bc
E 5
I 5
D 10
.Tp Fl c
.Nm Bc
E 10
I 10
.It Fl c
.Nm \&Bc
E 10
is actually a preprocessor for
D 10
.Ar dc 1 ,
E 10
I 10
.Ar \&dc 1 ,
E 10
which it invokes automatically, unless the
.Fl c
D 12
compile only.
option is present.
In this case the
E 12
I 12
compile only option is present.
Here, the
E 12
D 10
.Ar dc
E 10
I 10
.Ar \&dc
E 10
input is sent to the standard output instead.
D 10
.Tp 
E 10
I 10
.El 
E 10
.Pp
The syntax for
D 10
.Nm bc
E 10
I 10
.Nm \&bc
E 10
E 5
programs is as follows;
L means letter a-z,
E means expression, S means statement.
D 5
.HP 6
E 5
I 5
.Pp
E 5
Comments
D 5
.br
are enclosed in /* and */.
.HP 6
E 5
I 5
D 8
.Dl are enclosed in /* and */.
E 8
I 8
D 10
.Ds I
E 10
I 10
.Bd -unfilled -offset indent -compact
E 10
are enclosed in /* and */.
D 10
.De
E 10
I 10
.Ed
E 10
E 8
.Pp
E 5
Names
D 5
.br
simple variables: L
.br
array elements: L [ E ]
.br
E 5
I 5
D 8
.Dl simple variables: L
.Df I
array elements: L
.Op  E
.De
.Df I
E 8
I 8
D 10
.Ds I
E 10
I 10
.Bd -unfilled -offset indent -compact
E 10
simple variables: L
array elements: L [ E ]
E 8
E 5
The words `ibase', `obase', and `scale'
D 5
.HP 6
E 5
I 5
D 10
.De
E 10
I 10
.Ed
E 10
.Pp
E 5
Other operands
D 5
.br
arbitrarily long numbers with optional sign and decimal point.
.br
( E )
.br
sqrt ( E )
.br
length ( E )	number of significant decimal digits
.br
scale ( E )	number of digits right of decimal point
.br
L ( E , ... , E )
.HP 6
E 5
I 5
D 8
.Dl arbitrarily long numbers with optional sign and decimal point.
.Dl \&( E \&)
.Dl sqrt ( E )
.Dl length ( E )	number of significant decimal digits
.Dl scale ( E )	number of digits right of decimal point
.Dl L ( E , ... , E )
E 8
I 8
D 10
.Ds I
E 10
I 10
.Bd -unfilled -offset indent -compact
E 10
arbitrarily long numbers with optional sign and decimal point.
\&( E \&)
sqrt ( E )
length ( E )	number of significant decimal digits
scale ( E )	number of digits right of decimal point
L ( E , ... , E )
D 10
.De
E 10
I 10
.Ed
E 10
E 8
.Pp
E 5
Operators
D 5
.br
+  \-  *  /  %  ^
(% is remainder; ^ is power)
.br
++   \-\-         (prefix and postfix; apply to names)
.br
==  <=  >=  !=  <  >
.br
=  +=  \-=  *=  /=  %=  ^=
.br
.HP 6
E 5
I 5
D 8
.Dl \&+  \-  *  /  %  ^ (% is remainder; ^ is power)
.Dl \&++   \-\-         (prefix and postfix; apply to names)
.Dl \&==  <=  >=  !=  <  >
.Dl \&=  +=  \-=  *=  /=  %=  ^=
E 8
I 8
D 10
.Ds I
E 10
I 10
.Bd -unfilled -offset indent -compact
E 10
\&+  \-  *  /  %  ^ (% is remainder; ^ is power)
\&++   \-\-         (prefix and postfix; apply to names)
\&==  <=  >=  !=  <  >
\&=  +=  \-=  *=  /=  %=  ^=
D 10
.De
E 10
I 10
.Ed
E 10
E 8
.Pp
E 5
Statements
D 5
.br
E 5
I 5
D 10
.Ds I
E 10
I 10
.Bd -unfilled -offset indent -compact
E 10
E 5
E
D 5
.br
E 5
{ S ; ... ; S }
D 5
.br
E 5
if ( E ) S
D 5
.br
E 5
while ( E ) S
D 5
.br
E 5
for ( E ; E ; E ) S
D 5
.br
E 5
null statement
D 5
.br
E 5
break
D 5
.br
E 5
quit
D 5
.HP 6
E 5
I 5
D 10
.De
E 10
I 10
.Ed
E 10
.Pp
E 5
Function definitions
D 5
.br
E 5
I 5
D 10
.Ds I
E 10
I 10
.Bd -unfilled -offset indent -compact
E 10
E 5
define L ( L ,..., L ) {
D 5
.br
E 5
	auto L, ... , L
D 5
.br
E 5
	S; ... S
D 5
.br
E 5
	return ( E )
D 5
.br
E 5
}
D 5
.HP 6
Functions in 
.B \-l
E 5
I 5
D 10
.De
E 10
I 10
.Ed
E 10
.Pp
Functions in
.Fl l
E 5
math library
D 5
.br
s(x)	sine
.br
c(x)	cosine
.br
e(x)	exponential
.br
l(x)	log
.br
a(x)	arctangent
.br
j(n,x)	Bessel function
.PP
.DT
E 5
I 5
D 8
.Dw ss(x)
E 8
I 8
D 10
.Dw j(n,x)
E 8
.Dp s(x)
E 10
I 10
.Bl -tag -width j(n,x) -offset indent -compact
.It s(x)
E 10
sine
D 10
.Dp c(x)
E 10
I 10
.It c(x)
E 10
cosine
D 10
.Dp e(x)
E 10
I 10
.It e(x)
E 10
exponential
D 10
.Dp l(x)
E 10
I 10
.It l(x)
E 10
log
D 10
.Dp a(x)
E 10
I 10
.It a(x)
E 10
arctangent
D 10
.Dp j(n,x)
E 10
I 10
.It j(n,x)
E 10
Bessel function
D 10
.Dp
E 10
I 10
.El
E 10
.Pp
E 5
All function arguments are passed by value.
D 5
.PP
E 5
I 5
.Pp
E 5
The value of a statement that is an expression is printed
unless the main operator is an assignment.
Either semicolons or newlines may separate statements.
Assignment to
D 5
.I scale
E 5
I 5
.Ar scale
E 5
influences the number of digits to be retained on arithmetic
operations in the manner of
D 5
.IR dc (1).
E 5
I 5
D 10
.Xr dc 1 .
E 10
I 10
.Xr \&dc 1 .
E 10
E 5
Assignments to
D 5
.I ibase
E 5
I 5
.Ar ibase
E 5
or
D 5
.I obase
E 5
I 5
.Ar obase
E 5
set the input and output number radix respectively.
D 5
.PP
E 5
I 5
.Pp
E 5
The same letter may be used as an array, a function,
and a simple variable simultaneously.
All variables are global to the program.
`Auto' variables are pushed down during function calls.
When using arrays as function arguments
D 12
or defining them as automatic variables
E 12
I 12
or defining them as automatic variables,
E 12
empty square brackets must follow the array name.
D 5
.PP
E 5
I 5
.Pp
E 5
For example
D 5
.PP
.nf
E 5
I 5
D 10
.Pp
.Ds I
E 10
I 10
.Bd -literal -offset indent
E 10
E 5
scale = 20
define e(x){
	auto a, b, c, i, s
	a = 1
	b = 1
	s = 1
	for(i=1; 1==1; i++){
		a = a*x
		b = b*i
		c = a/b
		if(c == 0) return(s)
		s = s+c
	}
}
D 5
.PP
E 5
I 5
D 10
.De
E 10
I 10
.Ed
E 10
.Pp
E 5
D 10
.fi
E 10
defines a function to compute an approximate value of
the exponential function and
D 5
.PP
.nf
	for(i=1; i<=10; i++) e(i)
.fi
.PP
E 5
I 5
.Pp
.Dl for(i=1; i<=10; i++) e(i)
.Pp
E 5
prints approximate values of the exponential function of
the first ten integers.
D 5
.PP
.I Bc
is actually a preprocessor for
.IR dc (1),
which it invokes automatically, unless the
.B \-c
(compile only)
option is present.
In this case the
.I dc
input is sent to the standard output instead.
.SH FILES
.ta \w'/usr/lib/lib.b 'u
/usr/lib/lib.b	mathematical library
E 5
I 5
.Sh FILES
D 6
.\" /usr/lib/lib.b	mathematical library
E 6
I 6
D 7
.\" /usr/share/misc/bc.library	mathematical library
E 7
I 7
.\" /usr/lib/lib.b	mathematical library
E 7
E 6
D 8
.Ds L
E 8
D 10
.Dw Dc(1)
I 8
.Di L
E 8
.Dp Pa dc(1)	desk calculator proper
I 8
.Dp
E 10
I 10
.Bl -tag -width xxxxx -compact
.It Xr \&dc 1
D 12
Desk calculator Proper.
E 12
I 12
Desk calculator proper.
E 12
.El
E 10
E 8
.Sh SEE ALSO
D 10
.Xr dc 1
D 8
.L. .L. .Cherry and R. Morris,
E 8
I 8
.br
L. L. Cherry and R. Morris,
E 8
.Em BC \- An arbitrary precision desk-calculator language
E 10
I 10
.Xr \&dc 1
.Rs
.%A L. L. Cherry
.%A R. Morris
.%T "BC \- An arbitrary precision desk-calculator language"
.Re
E 10
.Sh HISTORY
The
D 10
.Nm bc
command appeared in Version 7 AT&T UNIX.
E 10
I 10
.Nm \&bc
command appeared in
.At v6 .
E 10
.Sh BUGS
D 12
No &&, \(or\\(or, or ! operators.
E 12
I 12
No &&, ||, or ! operators.
E 12
E 5
D 10
.br
E 10
I 10
.Pp
E 10
D 5
dc(1)	desk calculator proper
.SH "SEE ALSO"
dc(1)
.br
L. L. Cherry and R. Morris,
.I
BC \- An arbitrary precision desk-calculator language
.SH BUGS
No &&, \(or\|\(or, or ! operators.
.br
.I For
E 5
I 5
D 8
.Li For
E 8
I 8
.Ql For
E 8
E 5
statement must have all three E's.
D 10
.br
E 10
I 10
.Pp
E 10
D 5
.I Quit
E 5
I 5
D 8
.Li Quit
E 8
I 8
.Ql Quit
E 8
E 5
is interpreted when read, not when executed.
E 1
