h06820
s 00002/00002/00276
d D 8.1 93/06/29 17:23:18 bostic 7 6
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00002/00275
d D 5.5 93/06/29 17:23:05 mckusick 6 4
c typesetting nits
e
s 00002/00002/00275
d R 8.1 93/06/06 14:24:44 bostic 5 4
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00014/00000/00263
d D 5.4 91/05/06 12:26:45 bostic 4 3
c add disclaimer as per request by Matt Bishop and Dartmouth College
e
s 00032/00008/00229
d D 5.3 91/04/26 14:34:11 bostic 3 2
c changes from Matt Bishop, mostly cleanups
e
s 00159/00208/00078
d D 5.2 91/04/22 13:13:20 bostic 2 1
c change the copyright/disclaimer to the standard Berkeley one
c delete the -c option; it's the default; discard first argument of err()
c reformat the manual page somewhat to standard Berkeley
c change CNULL to NULL; rename from "des program" to "bdes"
c change key from an argument to -k option (Sun compatibility)
c change -e to -b, -i to -d (Sun compatibility), allow options to override
c minor formatting changes, add usage message
e
s 00286/00000/00000
d D 5.1 91/04/21 18:13:42 bostic 1 0
c date and time created 91/04/21 18:13:42 by bostic
e
u
U
t
T
I 1
D 2
.if n .ds Lq \&"
.if n .ds Rq \&"
.if t .ds Lq \&``
.if t .ds Rq \&''
.ds Ux \\s-2UNIX\\s0
.ds As \\s-2ASCII\\s0
.ds Fp \\s-2FIPS\\s0 \\s-2PUB\\s0
.TH BDES 1 "Dartmouth College"
E 2
I 2
D 7
.\" Copyright (c) 1991 The Regents of the University of California.
.\" All rights reserved.
E 7
I 7
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 7
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Matt Bishop of Dartmouth College.
.\"
.\" %sccs.include.redist.roff%
.\"
.\"	%W% (Berkeley) %G%
.\"
.TH BDES 1 "%Q%"
I 6
.UC 6
E 6
E 2
.SH NAME
bdes \- encrypt/decrypt using the Data Encryption Standard
.SH SYNOPSIS
D 2
.BR bdes " ["
.IR options " ]  ["
.IR password " ]"
E 2
I 2
.nf
.ft B
bdes [ \-abdp ] [ \-F N ] [ \-f N ] [ \-k key ]
.ti +5
[ \-m N ] [ \-o N ] [ \-v vector ]
.ft R
.fi
E 2
.SH DESCRIPTION
.I Bdes
D 2
reads from the standard input and writes
on the standard output.
It implements all DES modes of operation described in \*(Fp 81
including alternative cipher feedback mode and both authentication modes.
All modes but the electronic code book mode require an
initialization vector;
if none is supplied,
the zero vector is used.
To protect the key and initialization vector from being read by
.IR ps (1),
.I bdes
hides its arguments on entry.
E 2
I 2
implements all DES modes of operation described in FIPS PUB 81, 
including alternative cipher feedback mode and both authentication
modes.
.I Bdes
reads from the standard input and writes to the standard output.
By default, the input is encrypted using cipher block chaining mode.
D 6
Using the same key for encryption and decryption preserves plaintext.
E 6
I 6
Using the same key for encryption and decryption preserves plain text.
E 6
.PP
All modes but the electronic code book mode require an initialization
vector; if none is supplied, the zero vector is used.
E 2
If no
.I key
D 2
is given,
one is requested from the controlling terminal if that can be opened,
or from the standard input if not.
E 2
I 2
is specified on the command line, the user is prompted for one (see
.IR getpass (3)
for more details).
E 2
.PP
D 2
The key and initialization vector are taken as sequences of \*(As
characters which are then mapped into their bit representations.
If either begins with `0x' or `0X',
that one is taken as a sequence of hexadecimal digits indicating the
bit pattern;
if either begins with `0b' or `0B',
that one is taken as a sequence of binary digits indicating the bit pattern.
In either case,
only the leading 64 bits of the key or initialization vector
are used,
and if fewer than 64 bits are provided, enough 0 bits are appended
to pad the key to 64 bits.
Note that if the key is not entered on the command line,
it is assumed to be \*(As.
This is due to limits of the password reading function
.IR getpass (3),
which allows at most 8 characters to be entered.
.PP
According to the DES standard,
the low-order bit of each character in the key string is deleted.
Since most \*(As representations set the high-order bit to 0,
simply deleting the low-order bit effectively reduces the size of the
key space from 2\u\s-356\s0\d to 2\u\s-348\s0\d keys.
To prevent this,
the high-order bit must be a function depending
in part upon the low-order bit;
so,
the high-order bit is set to whatever value gives odd parity.
This preserves the key space size.
Note this resetting of the parity bit is
.I not
done if the key is given in binary or hex,
and can be disabled for \*(As keys (see the options, below).
.PP
By default,
the standard input is encrypted using cipher block chaining mode
and is written to the standard output.
Using the same key for encryption and decryption preserves plaintext,
so
.ce
bdes \f2key\fP < plaintext | bdes \-i \f2key\fP
is a very expensive equivalent of
.IR cat (1).
.PP
Options are:
E 2
I 2
The options are as follows:
E 2
.TP
D 2
.B \-a
the key and initialization vector strings are to be taken as \*(As.
suppressing the special interpretation given to leading `0x', `0X',
\&`0b', and `0B' characters.
Note this flag applies to
E 2
I 2
\-a
The key and initialization vector strings are to be taken as ASCII,
suppressing the special interpretation given to leading ``0X'', ``0x'',
``0B'', and ``0b'' characters.
This flag applies to
E 2
.I both
the key and initialization vector.
.TP
D 2
.B \-c
Use cipher block chaining mode.
This is the default.
.TP
.B \-e
E 2
I 2
\-b
E 2
Use electronic code book mode.
.TP
D 2
.BI \-f b
E 2
I 2
\-d
D 3
Invert (decrypt) the input.
E 3
I 3
Decrypt the input.
E 3
.TP
\-F
E 2
Use
D 2
.IR b -bit
cipher feedback mode.
E 2
I 2
.IR N -bit
alternative cipher feedback mode.
E 2
Currently
D 2
.I b
must be a multiple of 8
between 8 and 64 inclusive
(this does not conform to the standard CFB mode specification).
E 2
I 2
.I N
must be a multiple of 7 between 7 and 56 inclusive (this does not conform
to the alternative CFB mode specification).
E 2
.TP
D 2
.BI \-F b
E 2
I 2
\-f
E 2
Use
D 2
.IR b -bit
alternative cipher feedback mode.
E 2
I 2
.IR N -bit
cipher feedback mode.
E 2
Currently
D 2
.I b
must be a multiple of 7
between 7 and 56 inclusive
(this does not conform to the alternative CFB mode specification).
E 2
I 2
.I N
must be a multiple of 8 between 8 and 64 inclusive (this does not conform
to the standard CFB mode specification).
E 2
.TP
D 2
.B \-i
invert (decrypt) the input.
E 2
I 2
\-k
Use
.I key
D 3
as the encryption key.
E 3
I 3
as the cryptographic key.
E 3
E 2
.TP
D 2
.BI \-m b
E 2
I 2
\-m
E 2
Compute a message authentication code (MAC) of
D 2
.I b
E 2
I 2
.I N
E 2
bits on the input.
D 2
.I b
must be between 1 and 64 inclusive;
if
.I b
is not a multiple of 8,
enough 0 bits will be added to pad the MAC length
E 2
I 2
The value of
.I N
must be between 1 and 64 inclusive; if
.I N
is not a multiple of 8, enough 0 bits will be added to pad the MAC length
E 2
to the nearest multiple of 8.
Only the MAC is output.
D 2
MACs are only available in cipher block chaining mode
or in cipher feedback mode.
E 2
I 2
MACs are only available in cipher block chaining mode or in cipher feedback
mode.
E 2
.TP
D 2
.BI \-o b
E 2
I 2
\-o
E 2
Use
D 2
.IR b -bit
E 2
I 2
.IR N -bit
E 2
output feedback mode.
Currently
D 2
.I b
must be a multiple of 8
between 8 and 64 inclusive
(this does not conform to the OFB mode specification).
E 2
I 2
.I N
must be a multiple of 8 between 8 and 64 inclusive (this does not conform
to the OFB mode specification).
E 2
.TP
D 2
.B \-p
E 2
I 2
\-p
E 2
Disable the resetting of the parity bit.
D 2
This flag forces the parity bit of the key to be used as typed,
rather than making each character be of odd parity.
It is used only if the key is given in \*(As.
E 2
I 2
This flag forces the parity bit of the key to be used as typed, rather than
making each character be of odd parity.
It is used only if the key is given in ASCII.
E 2
.TP
D 2
.BI \-v v
E 2
I 2
\-v
E 2
Set the initialization vector to
D 2
.IR v ;
E 2
I 2
.IR vector ;
E 2
the vector is interpreted in the same way as the key.
The vector is ignored in electronic codebook mode.
.PP
D 2
The DES is considered a very strong cryptosystem,
and other than table lookup attacks,
key search attacks,
and Hellman's time-memory tradeoff
(all of which are very expensive and time-consuming),
no cryptanalytic methods for breaking the
DES are known in the open literature.
No doubt the choice of keys and key security
are the most vulnerable aspect of
E 2
I 2
D 3
The key and initialization vector are taken as sequences of \*(As
E 3
I 3
The key and initialization vector are taken as sequences of ASCII
E 3
characters which are then mapped into their bit representations.
If either begins with ``0X'' or ``0x'',
that one is taken as a sequence of hexadecimal digits indicating the
bit pattern;
if either begins with ``0B'' or ``0b'',
that one is taken as a sequence of binary digits indicating the bit pattern.
In either case,
only the leading 64 bits of the key or initialization vector
are used,
and if fewer than 64 bits are provided, enough 0 bits are appended
to pad the key to 64 bits.
.PP
According to the DES standard, the low-order bit of each character in the
key string is deleted.
Since most ASCII representations set the high-order bit to 0, simply
deleting the low-order bit effectively reduces the size of the key space
from 2\u\s-356\s0\d to 2\u\s-348\s0\d keys.
To prevent this, the high-order bit must be a function depending in part
upon the low-order bit; so, the high-order bit is set to whatever value
gives odd parity.
This preserves the key space size.
Note this resetting of the parity bit is
.I not
done if the key is given in binary or hex, and can be disabled for ASCII
keys as well.
.PP
The DES is considered a very strong cryptosystem, and other than table lookup
attacks, key search attacks, and Hellman's time-memory tradeoff (all of which
are very expensive and time-consuming), no cryptanalytic methods for breaking
the DES are known in the open literature.
No doubt the choice of keys and key security are the most vulnerable aspect
of
E 2
.IR bdes .
.SH IMPLEMENTATION NOTES
For implementors wishing to write software compatible with this program,
the following notes are provided.
D 2
This software is completely compatible with the implementation
of the data encryption standard distributed by Sun Microsystems, Inc.
E 2
I 2
This software is believed to be compatible with the implementation of the
data encryption standard distributed by Sun Microsystems, Inc.
E 2
.PP
D 2
In the ECB and CBC modes,
plaintext is encrypted in units of 64 bits (8 bytes, also called a block).
E 2
I 2
In the ECB and CBC modes, plaintext is encrypted in units of 64 bits (8 bytes,
also called a block).
E 2
To ensure that the plaintext file is encrypted correctly,
.I bdes
D 2
will (internally) append from 1 to 8 bytes,
the last byte containing an integer stating how many bytes of that final block
are from the plaintext file,
and encrypt the resulting block.
Hence,
when decrypting,
the last block may contain from 0 to 7 characters present in the plaintext file,
and the last byte tells how many.
Note that if during decryption the last byte of the file does not contain
an integer between 0 and 7,
either the file has been corrupted or an incorrect key has been given.
A similar mechanism is used for the OFB and CFB modes,
except that those simply require the length of the input to be a multiple
of the mode size,
and the final byte contains an integer between 0 and one less than the
number of bytes being used as the mode.
(This was another reason that the mode size must be a multiple of 8
for those modes.)
E 2
I 2
will (internally) append from 1 to 8 bytes, the last byte containing an
integer stating how many bytes of that final block are from the plaintext
file, and encrypt the resulting block.
Hence, when decrypting, the last block may contain from 0 to 7 characters
present in the plaintext file, and the last byte tells how many.
Note that if during decryption the last byte of the file does not contain an
integer between 0 and 7, either the file has been corrupted or an incorrect
key has been given.
A similar mechanism is used for the OFB and CFB modes, except that those
simply require the length of the input to be a multiple of the mode size,
and the final byte contains an integer between 0 and one less than the number
of bytes being used as the mode.
(This was another reason that the mode size must be a multiple of 8 for those
modes.)
E 2
.PP
D 2
Unlike Sun's implementation,
unused bytes of that last block are not filled with random data,
but instead contain what was in those byte positions in the preceding block.
This is quicker and more portable,
and does not weaken the encryption significantly
(and even then, only in a few cases).
E 2
I 2
Unlike Sun's implementation, unused bytes of that last block are not filled
with random data, but instead contain what was in those byte positions in
the preceding block.
This is quicker and more portable, and does not weaken the encryption
D 3
significantly (and even then, only in a few cases).
E 3
I 3
significantly.
E 3
E 2
.PP
D 2
If the key is entered in \*(As,
the parity bits of the key characters are set so that each key character is
of odd parity.
Unlike Sun's implementation,
it is possible to enter binary or hexadecimal keys on the command line,
and if this is done,
the parity bits are
E 2
I 2
If the key is entered in ASCII, the parity bits of the key characters are set
so that each key character is of odd parity.
Unlike Sun's implementation, it is possible to enter binary or hexadecimal
keys on the command line, and if this is done, the parity bits are
E 2
.I not
reset.
This allows testing using arbitrary bit patterns as keys.
.PP
D 2
The Sun implementation
always uses an initialization vector of 0
(that is,
all zeroes).
E 2
I 2
The Sun implementation always uses an initialization vector of 0
(that is, all zeroes).
E 2
By default,
.I bdes
D 2
does too,
but this may be changed from the command line.
.SH FILES
/dev/tty	controlling terminal for typed key
E 2
I 2
does too, but this may be changed from the command line.
E 2
.SH SEE ALSO
D 2
.br
crypt(1), crypt(3)
.br
E 2
I 2
crypt(1), crypt(3), getpass(3)
.sp
E 2
.IR "Data Encryption Standard" ,
Federal Information Processing Standard #46,
National Bureau of Standards,
U.S. Department of Commerce,
Washington DC
(Jan. 1977)
D 2
.br
E 2
I 2
.sp
E 2
.IR "DES Modes of Operation" ,
Federal Information Processing Standard #81,
National Bureau of Standards,
U.S. Department of Commerce
Washington DC
(Dec. 1980)
D 2
.br
E 2
I 2
.sp
E 2
Dorothy Denning,
.IR "Cryptography and Data Security" ,
Addison-Wesley Publishing Co.,
Reading, MA
\(co1982.
D 2
.br
E 2
I 2
.sp
E 2
Matt Bishop,
D 2
\*(LqImplementation Notes on\
.IR bdes (1)\*(Rq
E 2
I 2
D 6
.IR "Implementation Notes on bdes(1)"
E 6
I 6
.IR "Implementation Notes on bdes(1)" ,
E 6
E 2
Technical Report PCS-TR-91-158,
Department of Mathematics and Computer Science,
Dartmouth College,
Hanover, NH  03755
D 3
(Feb. 1991).
E 3
I 3
(Apr. 1991).
I 4
.SH DISCLAIMER
.nf
THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
.fi
E 4
E 3
.SH BUGS
D 2
.PP
E 2
There is a controversy raging over whether the DES will still be secure
D 2
in a few years. The advent of special-purpose hardware could reduce
the cost of any of the methods of attack named above
so that they are no longer computationally infeasible.
E 2
I 2
in a few years.
The advent of special-purpose hardware could reduce the cost of any of the
methods of attack named above so that they are no longer computationally
infeasible.
E 2
.PP
D 2
As the key or key schedule is kept in memory
throughout the run of this program,
the encryption can be compromised if memory is readable.
.PP
There is no warranty of merchantability nor any warranty
of fitness for a particular purpose nor any other warranty,
either express or implied, as to the accuracy of the
enclosed materials or as to their suitability for any
particular purpose.  Accordingly, the user assumes full
responsibility for their use. Further,
the author assumes no obligation
to furnish any assistance of any kind whatsoever, or to
furnish any additional information or documentation.
.SH AUTHOR
Matt Bishop,
Department of Mathematics and Computer Science,
Bradley Hall,
Dartmouth College,
Hanover, NH  03755
.sp
Electronic mail addresses:
.br
Internet: Matt.Bishop@dartmouth.edu
.br
UUCP: decvax!dartvax!Matt.Bishop
E 2
I 2
As the key or key schedule is stored in memory, the encryption can be
compromised if memory is readable.
D 3
.SH BUGS
Programs which display programs' arguments may compromise the key and
initialization vector, if they are specified on the command line.
E 3
I 3
Additionally, programs which display programs' arguments may compromise the
key and initialization vector, if they are specified on the command line.
E 3
To avoid this
.I bdes
overwrites its arguments, however, the obvious race cannot currently be
avoided.
I 3
.PP
Certain specific keys should be avoided because they introduce potential
weaknesses; these keys, called the
.I weak
and
.I semiweak
keys, are (in hex notation, where p is either 0 or 1, and P is either
e or f):
.sp
.nf
.in +10n
.ta \w'0x0p0p0p0p0p0p0p0p\0\0\0'u+5n
0x0p0p0p0p0p0p0p0p	0x0p1P0p1P0p0P0p0P
0x0pep0pep0pfp0pfp	0x0pfP0pfP0pfP0pfP
0x1P0p1P0p0P0p0P0p	0x1P1P1P1P0P0P0P0P
0x1Pep1Pep0Pfp0Pfp	0x1PfP1PfP0PfP0PfP
0xep0pep0pfp0pfp0p	0xep1Pep1pfp0Pfp0P
0xepepepepepepepep	0xepfPepfPfpfPfpfP
0xfP0pfP0pfP0pfP0p	0xfP1PfP1PfP0PfP0P
0xfPepfPepfPepfPep	0xfPfPfPfPfPfPfPfP
.fi
.in -10n
.sp
This is inherent in the DES algorithm (see Moore and Simmons,
\*(LqCycle structure of the DES with weak and semi-weak keys,\*(Rq
.I "Advances in Cryptology \- Crypto '86 Proceedings" ,
Springer-Verlag New York, \(co1987, pp. 9-32.)
E 3
E 2
E 1
