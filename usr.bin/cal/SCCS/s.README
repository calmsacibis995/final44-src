h21383
s 00011/00024/00031
d D 5.2 91/04/19 18:58:47 bostic 2 1
c no longer exactly compatible with old cal, minor rewording
e
s 00055/00000/00000
d D 5.1 89/09/28 14:14:06 bostic 1 0
c date and time created 89/09/28 14:14:06 by bostic
e
u
U
t
T
I 1
D 2
Program Design

This program exactly duplicates the operation of the original unix "cal"
program.  It was designed with that intent, so no "improvements" were made
to either the command line syntax or to the error reporting.  The main
goal was to allow replacement of the existing binary with a freely
redistibutable version without breaking any existing applications that
might be built on top of the original.

The date routines were written from scratch, basically from first
E 2
I 2
The cal(1) date routines were written from scratch, basically from first
E 2
principles.  The algorithm for calculating the day of week from any
D 2
gregorian date was "reverse engineered". This was necessary as most of
E 2
I 2
Gregorian date was "reverse engineered".  This was necessary as most of
E 2
the documented algorithms have to do with date calculations for other
calendars (e.g. julian) and are only accurate when converted to gregorian
within a narrow range of dates.

D 2
I take 1 jan 1 to be a Saturday because that's what cal says and I couldn't
change that even if I was dumb enough to try. From this we can easily
calculate the day of week for any date. The algorithm for a zero based
day of week:
E 2
I 2
1 Jan 1 is a Saturday because that's what cal says and I couldn't change
that even if I was dumb enough to try.  From this we can easily calculate
the day of week for any date.  The algorithm for a zero based day of week:
E 2

	calculate the number of days in all prior years (year-1)*365
	add the number of leap years (days?) since year 1 
		(not including this year as that is covered later)
	add the day number within the year
		this compensates for the non-inclusive leap year
		calculation
	if the day in question occurs before the gregorian reformation
		(3 sep 1752 for our purposes), then simply return 
		(value so far - 1 + SATURDAY's value of 6) modulo 7.
	if the day in question occurs during the reformation (3 sep 1752
		to 13 sep 1752 inclusive) return THURSDAY. This is my
		idea of what happened then. It does not matter much as
		this program never tries to find day of week for any day
		that is not the first of a month.
	otherwise, after the reformation, use the same formula as the
		days before with the additional step of subtracting the
		number of days (11) that were adjusted out of the calendar
		just before taking the modulo.

It must be noted that the number of leap years calculation is sensitive
D 2
to the date for which the leap year is being calculated. A year that occurs
E 2
I 2
to the date for which the leap year is being calculated.  A year that occurs
E 2
before the reformation is determined to be a leap year if its modulo of
D 2
4 equals zero. But after the reformation, a year is only a leap year if
its modulo of 4 equals zero and its modulo of 100 does not. Of course,
there is an exception for these century years. If the modulo of 400 equals
zero, then the year is a leap year anyway. This is, in fact, what the
E 2
I 2
4 equals zero.  But after the reformation, a year is only a leap year if
its modulo of 4 equals zero and its modulo of 100 does not.  Of course,
there is an exception for these century years.  If the modulo of 400 equals
zero, then the year is a leap year anyway.  This is, in fact, what the
E 2
gregorian reformation was all about (a bit of error in the old algorithm
that caused the calendar to be inaccurate.)

Once we have the day in year for the first of the month in question, the
D 2
rest is trivial. Running diff on any output of this program and the
equivalent output from the original cal reports no difference.  This was
confirmed by a script that ran them for all possible inputs (and took
approximately 36 hours to complete on a sun-3.)
E 2
I 2
rest is trivial.
E 2
E 1
