h02473
s 00013/00001/00137
d D 8.2 95/04/28 16:40:23 bostic 11 10
c add a sum(1), which matches the historic BSD algorithm
e
s 00002/00002/00136
d D 8.1 93/06/29 18:40:36 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00006/00006/00132
d D 5.8 93/06/29 18:40:24 mckusick 9 7
c typesetting nits
e
s 00002/00002/00136
d R 8.1 93/06/06 14:27:04 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00003/00135
d D 5.7 93/03/23 18:57:32 cael 7 6
c update .Os and history from .Ud to .Bx 4.4
e
s 00020/00014/00118
d D 5.6 91/11/27 12:58:16 bostic 6 5
c POSIX 1003.2, D11.2 modified the CRC!  Bring up to date.
e
s 00003/00000/00129
d D 5.5 91/06/27 17:15:14 bostic 5 4
c add POSIX/IEEE contribution notice
e
s 00001/00001/00128
d D 5.4 91/06/20 12:02:26 bostic 4 3
c fix OR'ing of flags
e
s 00090/00067/00039
d D 5.3 91/05/06 03:08:40 cael 3 2
c mdoc version three
e
s 00043/00009/00063
d D 5.2 91/04/04 12:25:20 bostic 2 1
c add System V and BSD historic algorithms
e
s 00072/00000/00000
d D 5.1 91/03/08 17:57:00 bostic 1 0
c date and time created 91/03/08 17:57:00 by bostic
e
u
U
t
T
I 1
D 3
.\" Copyright (c) 1991 The Regents of the University of California.
E 3
I 3
D 10
.\" Copyright (c) 1991, 1991 The Regents of the University of California.
E 3
.\" All rights reserved.
E 10
I 10
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 10
.\"
I 5
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
E 5
D 3
.\" %sccs.include.redist.man%
E 3
I 3
.\" %sccs.include.redist.roff%
E 3
.\"
.\"	%W% (Berkeley) %G%
.\"
D 3
.TH CKSUM 1 "%Q%"
.UC 7
.SH NAME
cksum \- display file checksums and block counts
.SH SYNOPSIS
.ft B
.nf
D 2
cksum [file ...]
E 2
I 2
cksum [\-o [1 | 2]] [file ...]
E 2
.fi
.ft R
.SH DESCRIPTION
E 3
I 3
.Dd %Q%
.Dt CKSUM 1
D 7
.Os
E 7
I 7
.Os BSD 4.4
E 7
.Sh NAME
.Nm cksum
.Nd display file checksums and block counts
.Sh SYNOPSIS
.Nm cksum
D 4
.Op Fl o Op Ar \&1 | Ar \&2
E 4
I 4
.Op Fl o Op \&1 \&| \&2
E 4
.Op Ar file ...
I 11
.Nm sum
.Op Ar file ...
E 11
.Sh DESCRIPTION
E 3
The
D 3
.I cksum
E 3
I 3
.Nm cksum
E 3
D 2
utility calculates and writes to standard output a total number of bytes,
a checksum CRC and the file name for each input file (or the standard input
by default).
E 2
I 2
D 9
utility writes to standard output three whitespace separated fields for each
D 6
input file (or the standard input by default).
E 6
I 6
input file.
E 9
I 9
utility writes to the standard output three whitespace separated
fields for each input file.
E 9
E 6
D 3
These fields are a checksum CRC, the total number of bytes in the file and
E 3
I 3
These fields are a checksum
.Tn CRC ,
D 6
the total number of bytes in the file and
E 3
the file name.
E 6
I 6
the total number of octets in the file and the file name.
If no file name is specified, the standard input is used and no file name
is written.
E 6
E 2
D 3
.PP
E 3
I 3
.Pp
I 11
The
.Nm sum
utility is identical to the
.Nm cksum
utility, except that it defaults to using historic algorithm 1, as
described below.
It is provided for compatibility only.
.Pp
E 11
E 3
D 2
The CRC used is based on the polynomial used for CRC error checking in
the networking standard ISO 8802-3: 1989.
E 2
I 2
The options are as follows:
D 3
.TP
\-o
E 3
I 3
.Bl -tag -width indent
.It Fl o
E 3
Use historic algorithms instead of the (superior) default one.
D 3
.IP
Algorithm 1 is the algorithm used by historic BSD systems as the 
.IR sum (1)
algorithm and by historic System V systems as the
.I sum
algorithm when using the \-r option.
E 3
I 3
.Pp
Algorithm 1 is the algorithm used by historic
.Bx
systems as the 
.Xr sum 1
algorithm and by historic
.At V
systems as the
.Xr sum
algorithm when using the
.Fl r
option.
E 3
This is a 16-bit checksum, with a right rotation before each addition;
overflow is discarded.
D 3
.IP
Algorithm 2 is the algorithm used by historic System V systems as the
E 3
I 3
.Pp
Algorithm 2 is the algorithm used by historic
.At V
systems as the
E 3
default
D 3
.I sum
E 3
I 3
.Xr sum
E 3
algorithm.
This is a 32-bit checksum, and is defined as follows:
D 3
.IP
.in +5
.nf
E 3
I 3
.Bd -unfilled -offset indent
E 3
s = sum of all bytes;
r = s % 2^16 + (s % 2^32) / 2^16;
cksum = (r % 2^16) + r / 2^16;
D 3
.fi
.in -5
.IP
E 3
I 3
.Ed
.Pp
E 3
D 9
Both algorithm 1 and 2 write to standard output the same fields as
E 9
I 9
Both algorithm 1 and 2 write to the standard output the same fields as
E 9
the default algorithm except that the size of the file in bytes is
replaced with the size of the file in blocks.
For historic reasons, the block size is 1024 for algorithm 1 and 512
for algorithm 2.
Partial blocks are rounded up.
D 3
.PP
The default CRC used is based on the polynomial used for CRC error checking
in the networking standard ISO 8802-3: 1989.
E 2
The CRC checksum encoding is defined by the generating polynomial:
.sp
.RS
E 3
I 3
.El
.Pp
The default
.Tn CRC
used is based on the polynomial used for
.Tn CRC
error checking
in the networking standard
.St -iso8802-3
The
.Tn CRC
checksum encoding is defined by the generating polynomial:
.Pp
.Bd -unfilled -offset indent
E 3
D 2
G(x) =
E 2
I 2
G(x) = x^32 + x^26 + x^23 + x^22 + x^16 + x^12 +
E 2
D 3
.RS
D 2
x^32 + x^26 + x^23 + x^22 + x^16 + x^12 +
E 2
x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1
.RE
.RE
.PP
Mathematically, the CRC value corresponding to a given file is defined by
E 3
I 3
     x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1
.Ed
.Pp
Mathematically, the
.Tn CRC
value corresponding to a given file is defined by
E 3
the following procedure:
D 3
.RS
.PP
E 3
I 3
.Bd -filled -offset indent
E 3
The
D 3
.I n
E 3
I 3
.Ar n
E 3
D 6
bits of the file are considered to be the coefficients of a mod 2
E 6
I 6
bits to be evaluated are considered to be the coefficients of a mod 2
E 6
polynomial M(x) of degree
D 3
.IR n -1.
.PP
E 3
I 3
.Ar n Ns \-1 .
I 6
These
.Ar n
bits are the bits from the file, with the most significant bit being the most
significant bit of the first octet of the file and the last bit being the least
significant bit of the last octet, padded with zero bits (if necessary) to
achieve an integral number of octets, followed by one or more octets
representing the length of the file as a binary value, least significant octet
first.
The smallest number of octets capable of representing this integer are used.
E 6
.Pp
E 3
M(x) is multiplied by x^32 (i.e., shifted left 32 bits) and divided by
G(x) using mod 2 division, producing a remainder R(x) of degree <= 31.
D 6
During the division, each time the intermediate remainder is zero, it
D 3
is changed to the next value from a predefined sequence of 32-bit
integers before completing the division.
E 3
I 3
is changed to the next value from a predefined sequence of
32-bit integers before completing the division.
E 3
This sequence is long and complex -- see the source code for more
information.
E 6
D 3
.PP
E 3
I 3
.Pp
E 3
The coefficients of R(x) are considered to be a 32-bit sequence.
I 6
.Pp
The bit sequence is complemented and the result is the CRC.
E 6
D 3
.RE
.PP
E 3
I 3
.Ed
.Pp
E 3
D 6
The calculation used is identical to that given in pseudo-code in
D 2
the ACM article listed below.
E 2
I 2
D 3
the ACM article referenced below.
E 2
.PP
E 3
I 3
the
.Tn ACM
article referenced below.
.Pp
E 6
E 3
The
D 3
.I cksum
E 3
I 3
.Nm cksum
E 3
D 11
utility exits 0 on success, and >0 if an error occurs.
E 11
I 11
and
.Nm sum
utilities exit 0 on success, and >0 if an error occurs.
E 11
D 3
.SH SEE ALSO
.IR "Computation of Cyclic Redundancy Checks Via Table Lookup" ,
Dilip V. Sarwate, Communications of the ACM, August 1988.
.SH STANDARDS
.I Cksum
is expected to conform to IEEE Std 1003.2 (``POSIX'').
.SH HISTORY
.I Cksum
first appeared in 4.4BSD.
E 3
I 3
.Sh SEE ALSO
I 6
The default calculation is identical to that given in pseudo-code
in the following
.Tn ACM
article.
E 6
.Rs
.%T "Computation of Cyclic Redundancy Checks Via Table Lookup"
.%A Dilip V. Sarwate
.%J "Communications of the \\*(tNACM\\*(sP"
.%D "August 1988"
.Re
.Sh STANDARDS
D 9
.Nm Cksum
is expected to conform to
.St -p1003.2 .
E 9
I 9
The
.Nm cksum
utility is expected to be POSIX 1003.2 compatible.
E 9
.Sh HISTORY
The
.Nm cksum
D 7
utility is
.Ud .
E 7
I 7
utility appears in
.Bx 4.4 .
E 7
E 3
E 1
