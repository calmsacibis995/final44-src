h58376
s 00002/00002/00276
d D 8.1 93/06/06 14:37:39 bostic 11 10
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00038/00035/00240
d D 6.7 91/07/24 22:37:27 cael 10 9
c mdoc version three
e
s 00002/00000/00273
d D 6.6 91/03/14 00:11:11 cael 9 7
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00001/00000/00273
d R 6.6 91/03/13 20:30:09 cael 8 7
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00007/00006/00266
d D 6.5 90/07/24 22:44:30 cael 7 6
c .Xr botch fix
e
s 00151/00187/00121
d D 6.4 90/06/24 19:02:16 cael 6 5
c converted man page
e
s 00014/00003/00294
d D 6.3 88/10/19 09:03:07 bostic 5 4
c add Berkeley specific copyright
e
s 00003/00002/00294
d D 6.2 86/05/05 15:28:49 mckusick 4 3
c also supports DEC Modula-2
e
s 00001/00001/00295
d D 6.1 85/04/29 14:23:14 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00009/00008/00287
d D 5.1 85/04/29 14:22:58 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00295/00000/00000
d D 4.1 85/04/29 14:22:43 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 1
D 5
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 5
I 5
D 6
.\" Copyright (c) 1980 The Regents of the University of California.
E 6
I 6
D 11
.\" Copyright (c) 1980, 1990 The Regents of the University of California.
E 6
.\" All rights reserved.
E 11
I 11
.\" Copyright (c) 1980, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 11
.\"
D 6
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 6
I 6
D 10
.\" %sccs.include.redist.man%
E 10
I 10
.\" %sccs.include.redist.roff%
E 10
E 6
E 5
.\"
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
D 10
.\"     %W% (Berkeley) %G%
E 10
I 10
.\"	%W% (Berkeley) %G%
E 10
E 6
.\"
I 9
D 10
.Vx
.Vx
E 10
E 9
D 2
.TH ERROR 1
E 2
I 2
D 3
.TH ERROR 1 "18 January 1983"
E 3
I 3
D 6
.TH ERROR 1 "%Q%"
E 3
E 2
.UC 4
.SH NAME
error \- analyze and disperse compiler error messages
.SH SYNOPSIS
.B error
[
.B \-n
] [
.B \-s
] [
.B \-q
] [
.B \-v
] [
.B \-t
suffixlist
] [
.B \-I
ignorefile
] [ name ]
.SH DESCRIPTION
.I Error
E 6
I 6
.Dd %Q%
.Dt ERROR 1
.Os BSD 4
.Sh NAME
.Nm error
.Nd analyze and disperse compiler error messages
.Sh SYNOPSIS
.Nm error
.Op Fl n
.Op Fl s
.Op Fl q
.Op Fl v
.Op Fl t Ar suffixlist
.Op Fl I Ar ignorefile
.Op name
.Sh DESCRIPTION
.Nm Error
E 6
analyzes and optionally disperses the diagnostic error messages
produced by a number of compilers and language processors to the source
file and line where the errors occurred.  It can replace the painful,
traditional methods of scribbling abbreviations of errors on paper, and
permits error messages and source code to be viewed simultaneously
without machinations of multiple windows in a screen editor.
D 6
.PP
.I Error
E 6
I 6
.Pp
Options are:
I 7
D 10
.Tw Ds
E 7
.Tp Fl n
E 10
I 10
.Bl -tag -width Ds
.It Fl n
E 10
Do
.Em not
touch any files; all error messages are sent to the
standard output.
D 10
.Tp Fl q
E 10
I 10
.It Fl q
E 10
The user is
.Ar queried
whether s/he wants to touch the file.
A ``y'' or ``n'' to the question is necessary to continue.
Absence of the
.Fl q
option implies that all referenced files
(except those referring to discarded error messages)
are to be touched.
D 10
.Tp Fl v
E 10
I 10
.It Fl v
E 10
After all files have been touched,
overlay the visual editor
D 7
.Xr vi
E 7
I 7
D 10
.Xr vi 1
E 10
I 10
.Xr \&vi 1
E 10
E 7
with it set up to edit all files touched,
and positioned in the first touched file at the first error.
If
D 7
.Xr vi
E 7
I 7
D 10
.Xr vi 1
E 10
I 10
.Xr \&vi 1
E 10
E 7
can't be found, try
D 7
.Xr ex
E 7
I 7
D 10
.Xr ex 1
E 10
I 10
.Xr \&ex 1
E 10
E 7
or
D 7
.Xr ed
E 7
I 7
D 10
.Xr ed 1
E 10
I 10
.Xr \&ed 1
E 10
E 7
from standard places.
D 10
.Tp Fl t
E 10
I 10
.It Fl t
E 10
Take the following argument as a suffix list.
Files whose suffixes do not appear in the suffix list are not touched.
The suffix list is dot separated, and ``*'' wildcards work.
Thus the suffix list:
.Pp
.Dl ".c.y.foo*.h"
.Pp
allows
.Nm error
to touch files ending with ``.c'', ``.y'', ``.foo*'' and ``.y''.
D 10
.Tp Fl s
E 10
I 10
.It Fl s
E 10
Print out
.Em statistics
regarding the error categorization.
Not too useful.
D 10
.Tp
E 10
I 10
.El
E 10
.Pp
.Nm Error
E 6
looks at the error messages,
D 6
either from the specified file \fIname\fR
E 6
I 6
either from the specified file
.Ar name
E 6
or from the standard input,
and attempts to determine which
language processor produced each error message,
determines the source file and line number to which the error message refers,
determines if the error message is to be ignored or not,
and inserts the (possibly slightly modified) error message into
D 2
the source file as a comment on the line preceeding to which the
E 2
I 2
the source file as a comment on the line preceding to which the
E 2
line the error message refers.
Error messages which can't be categorized by language processor
or content are not inserted into any file,
but are sent to the standard output.
D 6
.I Error
E 6
I 6
.Nm Error
E 6
touches source files only after all input has been read.
D 6
By specifying the
.B \-q
query option,
the user is asked to confirm any potentially
dangerous (such as touching a file) or verbose action.
Otherwise
.I error
proceeds on its merry business.
If the
.B \-t
touch option and associated suffix list is given, 
.I error
will restrict itself to touch only those files with suffices
in the suffix list.
Error also can be asked (by specifying
.B \-v)
to invoke
.IR vi (1)
on the files in which error messages were inserted; this obviates
the need to remember the names of the files with errors.
.PP
.I Error
E 6
I 6
.Pp
.Nm Error
E 6
is intended to be run
with its standard input
connected via a pipe to the error message source.
Some language processors put error messages on their standard error file;
others put their messages on the standard output.
Hence, both error sources should be piped together into
D 6
.I error.
For example, when using the \fIcsh\fP syntax,
.IP
make \-s lint |\|& error \-q \-v
.LP
E 6
I 6
.Nm error .
For example, when using the
.Xr csh 1
syntax,
.Pp
D 7
.Dl make \-s lint \& error \-q \-v
E 7
I 7
.Dl make \-s lint \&| error \-q \-v
E 7
.Pp
E 6
will analyze all the error messages produced
by whatever programs
D 6
.I make
E 6
I 6
.Xr make 1
E 6
runs when making lint.
D 6
.PP
.I Error
E 6
I 6
.Pp
.Nm Error
E 6
knows about the error messages produced by:
D 6
.I make,
.I cc,
.I cpp,
.I ccom,
.I as,
.I ld,
.I lint,
.I pi,
D 4
.I pc
E 4
I 4
.I pc,
.I f77,
E 6
I 6
.Xr make 1 ,
D 10
.Xr cc 1 ,
E 10
I 10
.Xr \&cc 1 ,
E 10
.Xr cpp 1 ,
.Xr ccom 1 ,
D 10
.Xr as 1 ,
.Xr ld 1 ,
E 10
I 10
.Xr \&as 1 ,
.Xr \&ld 1 ,
E 10
.Xr lint 1 ,
D 10
.Xr pi 1 ,
.Xr pc 1 ,
E 10
I 10
.Xr \&pi 1 ,
.Xr \&pc 1 ,
E 10
.Xr f77 1 ,
E 6
E 4
and
D 4
.I f77.
E 4
I 4
D 6
.I DEC Western Research Modula-2.
E 4
.I Error
E 6
I 6
.Em DEC Western Research Modula\-2 .
.Nm Error
E 6
knows a standard format for error messages produced by
the language processors,
so is sensitive to changes in these formats.
D 6
For all languages except 
.I Pascal,
E 6
I 6
For all languages except
.Em Pascal ,
E 6
error messages are restricted to be on one line.
Some error messages refer to more than one line in more than
one files;
D 6
.I error
E 6
I 6
.Nm error
E 6
will duplicate the error message and insert it at
all of the places referenced.
D 6
.PP
.I Error
E 6
I 6
.Pp
.Nm Error
E 6
will do one of six things with error messages.
D 6
.TP 10
.I synchronize
E 6
I 6
D 10
.Tp Em synchronize
E 10
I 10
.Bl -tag -width Em synchronize
.It Em synchronize
E 10
E 6
Some language processors produce short errors describing
which file it is processing.
D 6
.I Error 
E 6
I 6
.Nm Error
E 6
uses these to determine the file name for languages that
don't include the file name in each error message.
These synchronization messages are consumed entirely by
D 6
.I error.
.TP 10
.I discard
E 6
I 6
.Nm error .
D 10
.Tp Em discard
E 10
I 10
.It Em discard
E 10
E 6
Error messages from
D 6
.I lint
E 6
I 6
.Xr lint 1
E 6
that refer to one of the two
D 6
.I lint
E 6
I 6
.Xr lint 1
E 6
libraries,
D 6
.I /usr/lib/llib-lc
E 6
I 6
.Pa /usr/libdata/lint/llib-lc
E 6
and
D 6
.I /usr/lib/llib-port
E 6
I 6
.Pa /usr/libdata/lint/llib-port
E 6
are discarded,
to prevent accidently touching these libraries.
Again, these error messages are consumed entirely by
D 6
.I error.
.TP 10
.I nullify
E 6
I 6
.Nm error .
D 10
.Tp Em nullify
E 10
I 10
.It Em nullify
E 10
E 6
Error messages from
D 6
.I lint
E 6
I 6
.Xr lint 1
E 6
can be nullified if they refer to a specific function,
which is known to generate diagnostics which are not interesting.
Nullified error messages are not inserted into the source file,
but are written to the standard output.
The names of functions to ignore are taken from
either the file named
D 6
.I .errorrc
in the users's home directory, 
E 6
I 6
.Pa .errorrc
in the users's home directory,
E 6
or from the file named by the
D 6
.B \-I
E 6
I 6
.Fl I
E 6
option.
If the file does not exist,
no error messages are nullified.
If the file does exist, there must be one function
name per line.
D 6
.TP 10
.I not file specific
E 6
I 6
D 10
.Tp Em not file specific
E 10
I 10
.It Em not file specific
E 10
E 6
Error messages that can't be intuited are grouped together,
and written to the standard output before any files are touched.
They will not be inserted into any source file.
D 6
.TP 10
.I file specific
E 6
I 6
D 10
.Tp Em file specific
E 10
I 10
.It Em file specific
E 10
E 6
Error message that refer to a specific file,
but to no specific line,
are written to the standard output when
that file is touched.
D 6
.TP 10
.I true errors
E 6
I 6
D 10
.Tp Em true errors
E 10
I 10
.It Em true errors
E 10
E 6
Error messages that can be intuited are candidates for
insertion into the file to which they refer.
D 6
.PP
E 6
I 6
D 10
.Tp
E 10
I 10
.El
E 10
.Pp
E 6
Only true error messages are candidates for inserting into
the file they refer to.
Other error messages are consumed entirely by
D 6
.I error
E 6
I 6
.Nm error
E 6
or are written to the standard output.
D 6
.I Error
E 6
I 6
.Nm Error
E 6
inserts the error messages into the source file on the line
D 2
preceeding the line the language processor found in error.
E 2
I 2
preceding the line the language processor found in error.
E 2
Each error message is turned into a one line comment for the
language,
and is internally flagged
with the string ``###'' at
the beginning of the error,
and ``%%%'' at the end of the error.
This makes pattern searching for errors easier with an editor,
and allows the messages to be easily removed.
In addition, each error message contains the source line number
for the line the message refers to.
A reasonably formatted source program can be recompiled
with the error messages still in it,
without having the error messages themselves cause future errors.
For poorly formatted source programs in free format languages,
such as C or Pascal,
it is possible to insert a comment into another comment,
which can wreak havoc with a future compilation.
D 2
To avoid this, format the source program so there are no
language statements on the same line as the end of a comment.
E 2
I 2
To avoid this, programs with comments and source
on the same line should be formatted
so that language statements appear before comments.
E 2
D 6
.PP
Options available with
.I error
are:
.TP 5
.B \-n
Do
.I not
touch any files; all error messages are sent to the
standard output.
.TP 5
.B \-q
The user is
.I queried
whether s/he wants to touch the file.
A ``y'' or ``n'' to the question is necessary to continue.
Absence of the
.B \-q
option implies that all referenced files
D 2
(except those refering to discarded error messages)
E 2
I 2
(except those referring to discarded error messages)
E 2
are to be touched.
.TP 5
.B \-v
After all files have been touched,
overlay the visual editor
.I vi
with it set up to edit all files touched,
and positioned in the first touched file at the first error.
If
.I vi 
can't be found, try
.I ex
or
.I ed
from standard places.
.TP 5
.B \-t
Take the following argument as a suffix list.
D 2
Files whose suffices do not appear in the suffix list are not touched.
The suffix list is dot seperated, and ``*'' wildcards work.
E 2
I 2
Files whose suffixes do not appear in the suffix list are not touched.
The suffix list is dot separated, and ``*'' wildcards work.
E 2
Thus the suffix list:
.IP
\&     ".c.y.foo*.h"
.IP
allows
.I error
to touch files ending with ``.c'', ``.y'', ``.foo*'' and ``.y''.
.TP 5
.B \-s
Print out 
.I statistics
regarding the error categorization.
Not too useful.
.PP
.I Error
E 6
I 6
.Pp
.Nm Error
E 6
catches interrupt and terminate signals,
and if in the insertion phase,
will orderly terminate what it is doing.
D 6
.SH AUTHOR
E 6
I 6
.Sh FILES
D 10
.Dw ~/.errorrc
.Di L
D 7
.Dp ~/.errorrc
E 7
I 7
.Dp Pa ~/.errorrc
E 10
I 10
.Bl -tag -width ~/.errorrc -compact
.It Pa ~/.errorrc
E 10
E 7
function names to ignore for
.Xr lint 1
error messages
D 10
.Dp Pa /dev/tty
E 10
I 10
.It Pa /dev/tty
E 10
user's teletype
D 10
.Dp
E 10
I 10
.El
E 10
.Sh HISTORY
D 10
.Nm Error
appeared in 4.0 BSD.
E 10
I 10
The
.Nm error
command
appeared in
.Bx 4.0 .
E 10
.Sh AUTHOR
E 6
Robert Henry
D 6
.SH FILES
.ta 2i
~/.errorrc	function names to ignore for \fIlint\fP error messages
.br
/dev/tty	user's teletype
.SH BUGS
.PP
E 6
I 6
.Sh BUGS
.Pp
E 6
Opens the teletype directly to do user querying.
D 6
.PP
E 6
I 6
.Pp
E 6
Source files with links make a new copy of the file with
only one link to it.
D 6
.PP
E 6
I 6
.Pp
E 6
Changing a language processor's format of error messages
D 6
may cause 
.I error
E 6
I 6
may cause
.Nm error
E 6
to not understand the error message.
D 6
.PP
.I Error,
E 6
I 6
.Pp
.Nm Error ,
E 6
since it is purely mechanical,
will not filter out subsequent errors caused by `floodgating'
initiated by one syntactically trivial error.
Humans are still much better at discarding these related errors.
D 6
.PP
E 6
I 6
.Pp
E 6
Pascal error messages belong after the lines affected
D 6
(error puts them before).  The alignment of the `\||\|' marking
E 6
I 6
(error puts them before).  The alignment of the `\\' marking
E 6
the point of error is also disturbed by
D 6
.I error.
.PP
.I Error
E 6
I 6
.Nm error .
.Pp
.Nm Error
E 6
D 10
was designed for work on CRT's at reasonably high speed.
E 10
I 10
was designed for work on
.Tn CRT Ns 's
at reasonably high speed.
E 10
It is less pleasant on slow speed terminals, and has never been
used on hardcopy terminals.
E 1
