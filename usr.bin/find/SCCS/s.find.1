h60992
s 00008/00003/00427
d D 8.7 95/05/09 16:20:36 mckusick 43 42
c clarification of -fstype
e
s 00001/00001/00429
d D 8.6 95/03/25 04:27:19 pendry 42 41
c minor formatting fix
e
s 00005/00003/00425
d D 8.5 94/08/05 16:26:26 mckusick 41 40
c POSIX behavior for -print being added (from cgd)
e
s 00033/00026/00395
d D 8.4 94/04/01 07:33:17 bostic 40 39
c POSIX 1003.2B/D9 symbolic links
e
s 00001/00001/00420
d D 8.3 94/01/23 18:19:42 mckusick 39 38
c last vestage of MOUNT_PC
e
s 00001/00001/00420
d D 8.2 93/12/30 16:37:31 mckusick 38 37
c change from Bostic for POSIX
e
s 00002/00002/00419
d D 8.1 93/06/06 14:38:42 bostic 37 36
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/00419
d D 6.33 92/07/27 13:45:58 bostic 36 35
c on second thought, make it symlink(7)
e
s 00001/00001/00420
d D 6.32 92/07/27 13:40:05 bostic 35 34
c add symlin(1)
e
s 00015/00009/00406
d D 6.31 92/06/01 12:21:56 elan 34 33
c Added -Hh documentation.
e
s 00001/00002/00414
d D 6.30 92/02/27 11:01:09 bostic 33 32
c update the 'see also' list to be a little more reasonable
e
s 00001/00002/00415
d D 6.29 91/07/29 23:05:30 cael 32 31
c fix request
e
s 00084/00138/00333
d D 6.28 91/07/24 23:02:09 cael 31 30
c mdoc version three
e
s 00020/00005/00451
d D 6.27 91/07/19 15:05:10 bostic 30 29
c add -path, -fstype rdonly; document values for PLAN->flags
e
s 00003/00000/00453
d D 6.26 91/06/27 17:17:53 bostic 29 28
c add POSIX/IEEE contribution notice
e
s 00006/00006/00447
d D 6.25 91/06/16 12:06:56 bostic 28 27
c and -> -and, or -> -or to match original syntax
e
s 00006/00025/00447
d D 6.24 91/05/24 15:36:38 bostic 27 26
c change find to do an fchdir on exec/ok; this means that the -r
c option can go away and everybody gets the speedup
e
s 00065/00084/00407
d D 6.23 91/05/24 15:17:06 bostic 26 25
c return to the original find syntax (newsyntax.c -> main.c, delete
c oldsyntax.c; create extern.h for ANSI prototypes; create true error routine;
c make NEW macro a real routine
e
s 00009/00004/00482
d D 6.22 91/05/23 19:01:51 bostic 25 24
c follow symbolic links if they are specified as command line args
e
s 00005/00002/00481
d D 6.21 91/04/27 14:14:21 bostic 24 23
c list -r and -X as POSIX extensions
e
s 00014/00001/00469
d D 6.20 91/04/27 13:37:37 bostic 23 22
c add -X flag to make the world safe for xargs
e
s 00003/00001/00467
d D 6.19 91/03/14 00:17:02 cael 22 20
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00001/00000/00468
d R 6.19 91/03/13 20:33:01 cael 21 20
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00005/00000/00463
d D 6.18 91/03/09 13:32:38 bostic 20 19
c document that prune doesn't work if doing depth-first
e
s 00009/00000/00454
d D 6.17 90/11/21 11:55:25 bostic 19 18
c document that {} behavior has changed
e
s 00024/00003/00430
d D 6.16 90/10/22 09:52:22 bostic 18 17
c add -r option, allowing -exec/-ok to do relative traversal
e
s 00008/00004/00425
d D 6.15 90/07/24 22:45:06 cael 17 16
c .Xr botch fix
e
s 00001/00001/00428
d D 6.14 90/06/26 00:59:31 cael 16 15
c converted man page
e
s 00228/00191/00201
d D 6.13 90/06/11 05:56:05 cael 15 14
c converted man page
e
s 00026/00022/00366
d D 6.12 90/05/25 14:05:40 bostic 14 13
c minor rewording, don't talk about primaries/operands until defined
e
s 00006/00001/00382
d D 6.11 90/05/20 13:17:05 bostic 13 12
c add fstype local
e
s 00138/00102/00245
d D 6.10 90/05/12 15:29:33 bostic 12 11
c new syntax
e
s 00002/00001/00345
d D 6.9 90/04/19 16:07:16 bostic 11 10
c add strmode(3) to the SEE ALSO list
e
s 00006/00000/00340
d D 6.8 90/04/16 18:50:24 bostic 10 9
c make it clear that args are separated on the command line
e
s 00300/00196/00040
d D 6.7 90/04/16 17:22:17 bostic 9 8
c new version derived from Cimarron Taylor's
e
s 00001/00001/00235
d D 6.6 90/03/06 11:18:16 bostic 8 7
c forgot to add list to SEE ALSO
e
s 00003/00038/00233
d D 6.5 90/03/06 11:06:51 bostic 7 6
c pull out fast database code, rename as list
e
s 00005/00000/00266
d D 6.4 88/07/21 18:32:28 marc 6 5
c add -follow option
e
s 00051/00023/00215
d D 6.3 86/05/11 06:05:12 lepreau 5 4
c rework fast find doc; mention -newer bug; add -cpio doc; copyright; formatting
e
s 00040/00000/00198
d D 6.2 85/06/07 00:40:38 serge 4 3
c added -nouser, -nogroup, -ls, and -xdev
e
s 00034/00008/00164
d D 6.1 85/04/29 17:46:49 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00005/00005/00167
d D 5.1 85/04/29 17:46:38 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00172/00000/00000
d D 4.1 85/04/29 17:46:30 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 5
D 9
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 9
I 9
D 37
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 37
I 37
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 37
E 9
.\"
I 29
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
E 29
I 9
D 31
.\" %sccs.include.redist.man%
E 31
I 31
.\" %sccs.include.redist.roff%
E 31
.\"
E 9
E 5
I 1
D 15
.\"	%W% (Berkeley) %G%
E 15
I 15
D 31
.\"     %W% (Berkeley) %G%
E 31
I 31
.\"	%W% (Berkeley) %G%
E 31
E 15
.\"
I 22
D 31
.Vx
E 31
D 26
.Vx
E 26
E 22
D 2
.TH FIND 1 
E 2
I 2
D 3
.TH FIND 1  "18 January 1983"
E 3
I 3
D 15
.TH FIND 1 "%Q%"
E 3
E 2
.AT 3
.SH NAME
D 9
find \- find files
E 9
I 9
find \- walk a file hierarchy
E 9
.SH SYNOPSIS
D 9
.B find
D 5
pathname-list  expression
E 5
I 5
pathname-list expression
E 9
I 9
.ft B
D 12
find path ... expression
E 12
I 12
D 14
find [ \-dsx ] [ \-f path ] [ path ] expression
E 14
I 14
find [ \-dsx ] [ path ] expression
.br
find [ \-dsx ] [ \-f path ] expression
E 14
E 12
.ft R
E 9
E 5
I 3
D 7
.br 
.B find
D 5
name
E 5
I 5
pattern
E 7
E 5
E 3
.SH DESCRIPTION
D 5
.I Find
E 5
I 5
D 7
In the first form above,
.I find
E 7
I 7
.I Find
E 15
I 15
.Dd %Q%
.Dt FIND 1
D 16
.Os ATT 7th
E 16
I 16
D 22
.Os BSD 4.4
E 22
I 22
.Os
E 22
E 16
.Sh NAME
.Nm find
.Nd walk a file hierarchy
.Sh SYNOPSIS
.Nm find
D 18
.Op Fl dsx
E 18
I 18
D 23
.Op Fl drsx
E 23
I 23
D 27
.Op Fl drsXx
E 27
I 27
D 34
.Op Fl dsXx
E 34
I 34
D 40
.Op Fl HdhXx
E 40
I 40
.Op Fl H | Fl L | Fl P
.Op Fl Xdx
E 40
E 34
E 27
E 23
E 18
D 25
.Op Ar path
E 25
I 25
D 26
.Op Ar file
E 25
.Ar expression
.Nm find
D 18
.Op Fl dsx
E 18
I 18
D 25
.Op Fl drsx
E 18
.Op Fl f Ar path
E 25
I 25
.Op Fl drsXx
E 26
.Op Fl f Ar file
I 26
.Op Ar file ...
E 26
E 25
.Ar expression
.Sh DESCRIPTION
.Nm Find
E 15
E 7
E 5
D 9
recursively descends
the directory hierarchy for
each pathname in the
.I pathname-list
(i.e., one or more pathnames)
seeking files that match a boolean
.I expression
written in the primaries given below.
In the descriptions, the argument
.I n
is used as a decimal integer
where
.I +n
means more than
.I n,
.I \-n
means less than
.I n
and
.I n
means exactly
.IR n .
E 9
I 9
recursively descends the directory tree for each
D 15
.I path
E 15
I 15
D 25
.Ar path
E 25
I 25
.Ar file
E 25
E 15
D 12
listed, evaluating an ``expression'' composed of the ``primaries''
listed below (each of which is a separate argument to
.IR find )
in terms of each file in the tree.
E 12
I 12
D 14
listed, evaluating an ``expression'' (composed of the ``primaries''
and ``operands'' listed below) in terms of each file in the tree.
E 14
I 14
listed, evaluating an
D 15
.I expression
E 15
I 15
.Ar expression
E 15
(composed of the ``primaries'' and ``operands'' listed below) in terms
of each file in the tree.
I 25
.Pp
D 34
If
.Ar file
is a symbolic link referencing an existing file, the directory tree
referenced by the link is descended instead of the link itself.
E 25
E 14
E 12
E 9
I 3
D 15
.PP
E 15
I 15
.Pp
E 34
E 15
I 12
The options are as follows:
D 15
.TP
.B \-d
E 15
I 15
.Pp
D 31
.Tw Ds
.Tp Fl d
E 31
I 31
.Bl -tag -width Ds
I 34
.It Fl H
The
.Fl H
option causes the file information and file type (see
D 40
.Xr stat  2  ) ,
returned for each symbolic link encountered on the command line to be 
E 40
I 40
.Xr stat 2)
returned for each symbolic link specified on the command line to be 
E 40
those of the file referenced by the link, not the link itself.
If the referenced file does not exist, the file information and type will
be for the link itself.  File information of all symbolic links not on 
the command line is that of the link itself.
I 40
.It Fl L
The
.Fl L
option causes the file information and file type (see
.Xr stat 2)
returned for each symbolic link to be those of the file referenced by the
link, not the link itself.
If the referenced file does not exist, the file information and type will
be for the link itself.
.It Fl P
The
.Fl P
option causes the file information and file type (see
.Xr stat 2)
returned for each symbolic link to be those of the link itself.
.It Fl X
The
.Fl X
option is a modification to permit
.Nm
to be safely used in conjunction with
.Xr xargs 1 .
If a file name contains any of the delimiting characters used by
.Xr xargs ,
a diagnostic message is displayed on standard error, and the file
is skipped.
The delimiting characters include single (`` ' '') and double (`` " '')
quotes, backslash (``\e''), space, tab and newline characters.
E 40
E 34
.It Fl d
E 31
E 15
The
D 15
.B \-d
E 15
I 15
.Fl d
E 15
D 18
option causes find to perform a depth\-first traversal, i.e. directories
E 18
I 18
option causes
.Nm find
to perform a depth\-first traversal, i.e. directories
E 18
are visited in post\-order and all entries in a directory will be acted
on before the directory itself.
By default,
D 15
.I find
E 15
I 15
.Nm find
E 15
visits directories in pre\-order, i.e. before their contents.
Note, the default is
D 15
.I not
E 15
I 15
.Ar not
E 15
a breadth\-first traversal.
D 15
.TP
.B \-f
E 15
I 15
D 31
.Tp Fl f
E 31
I 31
.It Fl f
E 31
E 15
The
D 15
.B \-f
E 15
I 15
.Fl f
E 15
option specifies a file hierarchy for
D 15
.I find
E 15
I 15
.Nm find
E 15
to traverse.
D 26
If no
D 15
.B \-f
E 15
I 15
.Fl f
E 15
option is specified, the first operand after the options is
D 14
expected to be the file to be traversed.
E 14
I 14
expected to be the file hierarchy to be traversed.
E 26
I 26
File hierarchies may also be specified as the operands immediately
following the options.
E 26
I 18
D 27
.Tp Fl r
The
.Fl r
option permits
.Nm find
to execute the utility specified for the
.Ic exec
and
.Ic ok
primaries from other than the directory where
.Nm find
was executed.
.Nm Find
may then change directories during the file hierarchy walk, meaning
that
.Nm find
can traverse hierarchies with path names longer than those directly
resolvable by the kernel.
This usually results in a performance improvement as well.
E 27
E 18
E 14
D 15
.TP
.B \-s
E 15
I 15
D 31
.Tp Fl s
E 31
I 31
D 34
.It Fl s
E 34
I 34
D 40
.It Fl h
E 34
E 31
E 15
The
D 15
.B \-s
E 15
I 15
D 34
.Fl s
E 34
I 34
.Fl h
E 34
E 15
option causes the file information and file type (see
D 15
.IR stat (2)),
E 15
I 15
.Xr stat  2  ) ,
E 15
returned for each symbolic link to be those of the file referenced by the
link, not the link itself.
If the referenced file does not exist, the file information and type will
be for the link itself.
I 23
D 31
.Tp Fl X
E 31
I 31
.It Fl X
E 31
The
.Fl X
option is a modification to permit
.Nm
to be safely used in conjunction with
.Xr xargs 1 .
If a file name contains any of the delimiting characters used by
.Xr xargs ,
a diagnostic message is displayed on standard error, and the file
is skipped.
The delimiting characters include single (`` ' '') and double (`` " '')
quotes, backslash (``\e''), space, tab and newline characters.
E 40
E 23
D 15
.TP
.B \-x
E 15
I 15
D 31
.Tp Fl x
E 31
I 31
.It Fl x
E 31
E 15
The
D 15
.B \-x
E 15
I 15
.Fl x
E 15
D 14
option causes
E 14
I 14
option prevents
E 14
D 15
.I find
E 15
I 15
.Nm find
E 15
D 14
to not descend into directories that have a different device number
than the file the descent began from.
.PP
Operands and primaries must each be a separate argument to
.IR find .
Primaries which themselves take arguments expect each argument
to be a separate argument to
.IR find .
.PP
E 12
D 5
The second simplified form will list all files on the system
whose pathname contains
.I name.
This is similar to
.sp
.ti
find / -mtime +0 -name "*<name>*" -print
.sp
but much faster.
As with
.B -name
below, shell syntax may be used for
.I name.
E 5
I 5
D 7
The second form rapidly searches a database for all pathnames
which match
.IR pattern .
Usually the database is recomputed
weekly and contains the pathnames
of all files which are publicly accessible.
If escaped, normal shell
\*(lqglobbing\*(rq characters (`*', `?', `[', and ']')
may be used in
.IR pattern ,
but the matching differs in that no characters
.RI ( e.g. " `/')"
have to be matched explicitly.
As a special case, a simple
.I pattern
containing no globbing characters
is matched as though it were
.IR *pattern* ;
if any globbing character appears
there are no implicit globbing characters.
E 7
E 5
E 3
D 9
.TP 10n
.BR \-name " filename"
True if the
.I filename
argument matches the current file name.
Normal
D 5
Shell
E 5
I 5
shell
E 5
argument syntax may be used if escaped (watch out for
`[', `?' and `*').
E 9
I 9
All primaries which take a numeric argument allow the number to be
preceded by a plus sign (``+'') or a minus sign (``\-'').
A preceding plus sign means ``more than
.BR n '',
a preceding minus sign means ``less than
.BR n ''
and neither means ``exactly
.BR n ''.
E 14
I 14
from descending into directories that have a device number different
than that of the file from which the descent began.
E 14
D 15
.SH PRIMARIES
E 9
.TP
D 9
.BR \-perm " onum"
True if the file permission flags
exactly
match the
octal number
.I onum
(see
.IR  chmod (1)).
E 9
I 9
D 12
.B \-atime n
E 12
I 12
.B atime n
E 15
I 15
D 31
.Tp
E 31
I 31
.El
E 31
.Sh PRIMARIES
D 31
.Tw Ds
D 26
.Tp Cx Ic atime
E 26
I 26
.Tp Cx Ic -atime
E 26
.Cx \&\ \&
.Ar n
.Cx
E 31
I 31
.Bl -tag -width Ds
.It Ic -atime Ar n 
E 31
E 15
E 12
True if the difference between the file last access time and the time
D 15
.I find
E 15
I 15
.Nm find
E 15
was started, rounded up to the next full 24\-hour period, is
D 15
.B n
E 15
I 15
.Ar n
E 15
24\-hour periods.
D 15
.TP
D 12
.B \-ctime n
E 12
I 12
.B ctime n
E 15
I 15
D 26
.Tp Cx Ic ctime
E 26
I 26
D 31
.Tp Cx Ic -ctime
E 26
.Cx \&\ \&
.Ar n
.Cx
E 31
I 31
.It Ic -ctime Ar n 
E 31
E 15
E 12
True if the difference between the time of last change of file status
information and the time
D 15
.I find
E 15
I 15
.Nm find
E 15
was started, rounded up to the next full 24\-hour period, is
D 15
.B n
E 15
I 15
.Ar n
E 15
24\-hour periods.
D 15
.TP
D 12
.B \-depth
This primary always evaluates to true.
It causes find to perform a depth\-first traversal, i.e. directories are
visited in post\-order and all entries in a directory will be acted on
before the directory itself.
By default,
.I find
visits directories in pre\-order, i.e. before their contents.
Note, the default is not a breadth-first traversal.
.TP
.B \-exec  utility  [argument ...]  ;
E 12
I 12
.B exec  utility  [argument ...]  ;
E 15
I 15
D 26
.Tp Cx Ic exec
E 26
I 26
D 31
.Tp Cx Ic -exec
E 26
.Cx \&\ \&
.Ar utility
.Cx \&\ \&
.Op argument ... ;
.Cx
E 31
I 31
.It Ic -exec Ar utility Op argument ... ; 
E 31
E 15
E 12
True if the program named
D 15
.B utility
E 15
I 15
.Ar utility
E 15
returns a zero value as its exit status.
Optional arguments may be passed to the utility.
The expression must be terminated by a semicolon (``;'').
D 12
If the string ``{}'' appears anywhere in the utility name or the arguments
it is replaced by the pathname of the current file.
E 12
I 12
If the string ``{}'' appears anywhere in the utility name or the
arguments it is replaced by the pathname of the current file.
E 12
D 27
Utility will be executed in the directory from which
E 27
I 27
.Ar Utility
will be executed from the directory from which
E 27
D 15
.I find
E 15
I 15
.Nm find
E 15
was executed.
I 10
D 12
Note, the
.IR utility ,
optional
.I arguments
and terminating semicolon must each be a separate argument to
.IR find .
E 12
E 10
D 15
.TP
D 12
.B \-follow
This primary always evaluates to true.
It causes the file information and file type (see
.IR stat (2)),
returned for each symbolic link to be those of the file referenced by the
link, not the link itself.
If the referenced file does not exist, the file information and type will
be for the link itself.
.TP
.B \-fstype type
E 12
I 12
.B fstype type
E 15
I 15
D 26
.Tp Cx Ic fstype
E 26
I 26
D 31
.Tp Cx Ic -fstype
E 26
.Cx \&\ \&
.Ar type
.Cx
E 31
I 31
.It Ic -fstype Ar type 
E 31
E 15
E 12
True if the file is contained in a file system of type
D 15
.BR type.
E 15
I 15
.Ar type .
E 15
D 13
Currently supported types are ``mfs'', ``nfs'', ``pc'' and ``ufs''.
E 13
I 13
D 30
Currently supported types are ``local'', ``mfs'', ``nfs'', ``pc'' and
``ufs''.
The type ``local'' is not a specific file system type, but matches
any file system physically mounted on the system where the
E 30
I 30
D 39
Currently supported types are ``local'', ``mfs'', ``nfs'', ``pc'',
E 39
I 39
D 43
Currently supported types are ``local'', ``mfs'', ``nfs'', ``msdos'',
E 39
``rdonly'' and ``ufs''.
The types ``local'' and ``rdonly'' are not specific file system types.
E 43
I 43
The
.Xr sysctl 8
command can be used to find out the types of filesystems
that are available on the system:
.Bd -literal -offset indent
sysctl vfs
.Ed
In addition, there are two pseudo-types, ``local'' and ``rdonly''.
E 43
The former matches any file system physically mounted on the system where
the
E 30
D 15
.I find
E 15
I 15
.Nm find
E 15
D 30
is being executed.
E 30
I 30
is being executed and the latter matches any file system which is
mounted read-only.
E 30
E 13
D 15
.TP
D 12
.B \-group gname
E 12
I 12
.B group gname
E 15
I 15
D 26
.Tp Cx Ic group
E 26
I 26
D 31
.Tp Cx Ic -group
E 26
.Cx \&\ \&
.Ar gname
.Cx
E 31
I 31
.It Ic -group Ar gname 
E 31
E 15
E 12
True if the file belongs to the group
D 15
.BR gname .
E 15
I 15
.Ar gname  .
E 15
E 9
If
D 9
.I onum
is prefixed by a minus sign,
more flag bits (017777, see
.IR   stat (2))
become significant and
the flags are compared:
.IR (flags&onum)==onum .
E 9
I 9
D 15
.B gname
E 15
I 15
.Ar gname
E 15
is numeric and there is no such group name, then
D 15
.B gname
E 15
I 15
.Ar gname
E 15
is treated as a group id.
E 9
D 15
.TP
D 9
.BR \-type " c"
True if the type of the file
is
.I c,
where
.I c
is
D 2
.B "b, c, d"
E 2
I 2
D 3
.B "b, c, d, f"
E 3
I 3
.B "b, c, d, f, l"
E 3
E 2
or
D 2
.B f
E 2
I 2
D 3
.B l
E 3
I 3
.B s
E 3
E 2
for
block special file, character special file,
D 2
directory or plain file.
E 2
I 2
D 3
directory, plain file, or symbolic link.
E 3
I 3
directory, plain file, symbolic link, or socket.
E 9
I 9
D 12
.B \-inum n
E 12
I 12
.B inum n
E 15
I 15
D 26
.Tp Cx Ic inum
E 26
I 26
D 31
.Tp Cx Ic -inum
E 26
.Cx \&\ \&
.Ar n
.Cx
E 31
I 31
.It Ic -inum Ar n 
E 31
E 15
E 12
True if the file has inode number
D 15
.BR n .
E 9
E 3
E 2
.TP
D 9
.BR \-links " n"
E 9
I 9
D 12
.B \-links  n
E 12
I 12
.B links  n
E 15
I 15
.Ar n  .
D 26
.Tp Cx Ic links
E 26
I 26
D 31
.Tp Cx Ic -links
E 26
.Cx \&\ \&
.Ar n
.Cx
E 31
I 31
.It Ic -links Ar n 
E 31
E 15
E 12
E 9
True if the file has
D 9
.I n
E 9
I 9
D 15
.B n
E 15
I 15
.Ar n
E 15
E 9
links.
D 15
.TP
D 9
.BR \-user " uname"
True if the file belongs to the user
.I uname
(login name or numeric user ID).
E 9
I 9
D 12
.B \-ls
E 12
I 12
.B ls
E 15
I 15
D 26
.Tp Ic ls
E 26
I 26
D 31
.Tp Ic -ls
E 31
I 31
.It Ic -ls
E 31
E 26
E 15
E 12
This primary always evaluates to true.
The following information for the current file is written to standard output:
its inode number, size in 512\-byte blocks, file permissions, number of hard
links, owner, group, size in bytes, last modification time, and pathname.
If the file is a block or character special file, the major and minor numbers
will be displayed instead of the size in bytes.
If the file is a symbolic link, the pathname of the linked\-to file will be
displayed preceded by ``\->''.
The format is identical to that produced by ``ls \-dgils''.
E 9
D 15
.TP
I 4
D 9
.B \-nouser
True if the file belongs to a user
.I not
in the /etc/passwd database.
E 9
I 9
D 12
.B \-mtime n
E 12
I 12
.B mtime n
E 15
I 15
D 26
.Tp Cx Ic mtime
E 26
I 26
D 31
.Tp Cx Ic -mtime
E 26
.Cx \&\ \&
.Ar n
.Cx
E 31
I 31
.It Ic -mtime Ar n 
E 31
E 15
E 12
True if the difference between the file last modification time and the time
D 15
.I find
E 15
I 15
.Nm find
E 15
was started, rounded up to the next full 24\-hour period, is
D 15
.B n
E 15
I 15
.Ar n
E 15
24\-hour periods.
E 9
D 15
.TP
E 4
D 9
.BR \-group " gname"
True if the file belongs to group
.I gname
(group name or numeric group ID).
E 9
I 9
D 12
.B \-ok  utility  [argument ...]  ;
E 12
I 12
.B ok  utility  [argument ...]  ;
E 15
I 15
D 17
.Tp Cx Ic ok
E 17
I 17
D 26
.Tp Cx Ic \&ok
E 26
I 26
D 31
.Tp Cx Ic \&-ok
E 26
E 17
.Cx \&\ \&
.Ar utility
I 17
.Ws
E 17
.Op argument ... ;
I 17
.Cx
E 31
I 31
D 32
.Tp.Ws
 Ic \&-ok Ar utility Ns Op argument ... ; 
E 32
I 32
D 42
.It Ic \&-ok Ar utility Ns Op argument ... ; 
E 42
I 42
.It Ic \&-ok Ar utility Op argument ... ; 
E 42
E 32
E 31
E 17
E 15
E 12
The
D 12
.B \-ok
E 12
I 12
D 15
.B ok
E 15
I 15
D 17
.Ic ok
E 17
I 17
D 26
.Ic \&ok
E 26
I 26
.Ic \&-ok
E 26
E 17
E 15
E 12
primary is identical to the
D 12
.B \-exec
E 12
I 12
D 15
.B exec
E 15
I 15
D 26
.Ic exec
E 26
I 26
.Ic -exec
E 26
E 15
E 12
primary with the exception that
D 15
.I find
E 15
I 15
.Nm find
E 15
requests user affirmation for the execution of the utility by printing
a message to the terminal and reading a response.
If the response is other than ``y'' the command is not executed and the
value of the
D 12
.B \-ok
E 12
I 12
D 15
.B ok
E 15
I 15
D 17
.Ar ok
E 17
I 17
.Ar \&ok
E 17
E 15
E 12
expression is false.
E 9
D 15
.TP
I 9
D 12
.B \-name pattern
E 12
I 12
.B name pattern
E 15
I 15
D 26
.Tp Cx Ic name
E 26
I 26
D 31
.Tp Cx Ic -name
E 26
.Cx \&\ \&
.Ar pattern
.Cx
E 31
I 31
.It Ic -name Ar pattern 
E 31
E 15
E 12
True if the last component of the pathname being examined matches
D 15
.BR pattern .
E 15
I 15
.Ar pattern  .
E 15
Special shell pattern matching characters (``['', ``]'', ``*'', and ``?'')
may be used as part of
D 15
.BR pattern .
E 15
I 15
.Ar pattern  .
E 15
D 12
These characters may be escaped with a backslash (``\e'').
E 12
I 12
These characters may be matched explicitly by escaping them with a
backslash (``\e'').
E 12
D 15
.TP
D 12
.B \-newer file
E 12
I 12
.B newer file
E 15
I 15
D 26
.Tp Cx Ic newer
E 26
I 26
D 31
.Tp Cx Ic -newer
E 26
.Cx \&\ \&
.Ar file
.Cx
E 31
I 31
.It Ic -newer Ar file 
E 31
E 15
E 12
True if the current file has a more recent last modification time than
D 15
.BR file .
.TP
D 12
.B \-nouser
E 12
I 12
.B nouser
E 15
I 15
.Ar file  .
D 26
.Tp Ic nouser
E 26
I 26
D 31
.Tp Ic -nouser
E 31
I 31
.It Ic -nouser
E 31
E 26
E 15
E 12
True if the file belongs to an unknown user.
D 15
.TP
E 9
I 4
D 12
.B \-nogroup
E 12
I 12
.B nogroup
E 15
I 15
D 26
.Tp Ic nogroup
E 26
I 26
D 31
.Tp Ic -nogroup
E 31
I 31
.It Ic -nogroup
E 31
E 26
E 15
E 12
D 9
True if the file belongs to a group
.I not
in the /etc/group database.
E 9
I 9
True if the file belongs to an unknown group.
I 30
D 31
.Tp Cx Ic -path
.Cx \&\ \&
.Ar pattern
.Cx
E 31
I 31
.It Ic -path Ar pattern 
E 31
True if the pathname being examined matches
.Ar pattern  .
Special shell pattern matching characters (``['', ``]'', ``*'', and ``?'')
may be used as part of
.Ar pattern  .
These characters may be matched explicitly by escaping them with a
backslash (``\e'').
Slashes (``/'') are treated as normal characters and do not have to be
matched explicitly.
E 30
E 9
D 15
.TP
E 4
D 9
.BR \-size " n"
True if the file is
.I n
blocks long (512 bytes per block).
E 9
I 9
D 12
.B \-perm [\-]mode
E 12
I 12
.B perm [\-]mode
E 15
I 15
D 26
.Tp Cx Ic perm
E 26
I 26
D 31
.Tp Cx Ic -perm
E 26
.Cx \&\ \&
.Op Fl
.Ar mode
.Cx
E 31
I 31
.It Ic -perm Op Fl Ns Ar mode 
E 31
E 15
E 12
The
D 15
.B mode
E 15
I 15
.Ar mode
E 15
may be either symbolic (see
D 15
.IR chmod (1))
E 15
I 15
.Xr chmod  1  )
E 15
or an octal number.
If the mode is symbolic, a starting value of zero is assumed and the
mode sets or clears permissions without regard to the process' file mode
creation mask.
D 26
If the mode is octal, only bits 07777 of the file's mode bits participate
E 26
I 26
D 31
If the mode is octal, only bits 07777 (S_ISUID | S_ISGID | S_ISTXT |
S_IRWXU | S_IRWXG | S_IRWXO) of the file's mode bits participate
E 31
I 31
If the mode is octal, only bits 07777
.Pf ( Dv S_ISUID
|
.Dv S_ISGID
|
.Dv S_ISTXT
|
.Dv S_IRWXU
|
.Dv S_IRWXG
|
.Dv S_IRWXO )
of the file's mode bits participate
E 31
E 26
in the comparison.
If the mode is preceded by a dash (``\-''), this primary evaluates to true
if at least all of the bits in the mode are set in the file's mode bits.
If the mode is not preceded by a dash, this primary evaluates to true if
the bits in the mode exactly match the file's mode bits.
Note, the first character of a symbolic mode may not be a dash (``\-'').
E 9
D 15
.TP
D 9
.BR \-inum " n"
True if the file has inode number
.I n.
E 9
I 9
D 12
.B \-print
E 12
I 12
.B print
E 15
I 15
D 26
.Tp Ic print
E 26
I 26
D 31
.Tp Ic -print
E 31
I 31
.It Ic -print
E 31
E 26
E 15
E 12
This primary always evaluates to true.
It prints the pathname of the current file to standard output.
D 41
The expression is appended to the user specified expression if neither
E 41
I 41
If none of
E 41
D 12
.BR \-exec ,
.BR \-ls ,
E 12
I 12
D 15
.BR exec ,
.BR ls ,
E 15
I 15
D 26
.Ic exec  ,
.Ic ls ,
E 26
I 26
.Ic -exec ,
D 41
.Ic -ls
E 41
I 41
.Ic -ls ,
E 41
E 26
E 15
E 12
or
D 12
.B \-ok
E 12
I 12
D 15
.B ok
E 15
I 15
D 17
.Ic ok
E 17
I 17
D 26
.Ic \&ok
E 26
I 26
.Ic \&-ok
E 26
E 17
E 15
E 12
D 41
is specified.
E 41
I 41
is specified, the given expression shall be effectively replaced by
.Cm \&( Ns Ar given\& expression Ns Cm \&) 
.Ic -print .
E 41
E 9
D 15
.TP
D 9
.BR \-atime " n"
True if the file has been accessed in
.I n
days.
E 9
I 9
D 12
.B \-prune
E 12
I 12
.B prune
E 15
I 15
D 26
.Tp Ic prune
E 26
I 26
D 31
.Tp Ic -prune
E 31
I 31
.It Ic -prune
E 31
E 26
E 15
E 12
This primary always evaluates to true.
It causes
D 15
.I find
E 15
I 15
.Nm find
E 15
to not descend into the current file.
I 20
Note, the
D 26
.Ic prune
E 26
I 26
.Ic -prune
E 26
primary has no effect if the
D 26
.Op \-d
E 26
I 26
.Fl d
E 26
option was specified.
E 20
E 9
D 15
.TP
D 9
.BR \-mtime " n"
True if the file has been modified in
E 9
I 9
D 12
.B \-size n[c]
E 12
I 12
.B size n[c]
E 15
I 15
D 26
.Tp Cx Ic size
E 26
I 26
D 31
.Tp Cx Ic -size
E 26
.Cx \&\ \&
.Ar n
.Op Cm c
.Cx
E 31
I 31
.It Ic -size Ar n Ns Op Cm c 
E 31
E 15
E 12
True if the file's size, rounded up, in 512\-byte blocks is
D 15
.BR n .
If 
.B n
E 15
I 15
.Ar n  .
If
.Ar n
E 15
is followed by a ``c'', then the primary is true if the
D 15
file's size is 
E 9
.I n
E 15
I 15
file's size is
.Ar n
E 15
D 9
days.
E 9
I 9
bytes.
E 9
D 15
.TP
D 9
.BR \-exec " command"
True if the executed command returns
a zero value as exit status.
The end of the command must be punctuated by an escaped
semicolon.
A command argument `{}' is replaced by the
current pathname.
E 9
I 9
D 12
.B \-type t
E 12
I 12
.B type t
E 15
I 15
D 26
.Tp Cx Ic type
E 26
I 26
D 31
.Tp Cx Ic -type
E 26
.Cx \&\ \&
.Ar t
.Cx
E 31
I 31
.It Ic -type Ar t 
E 31
E 15
E 12
True if the file is of the specified type.
Possible file types are as follows:
D 15
.RS
E 9
.TP
D 9
.BR \-ok " command"
Like
.B \-exec
except that the generated command is written on
the standard output, then the standard input is read
and the command executed only upon response
.BR y .
E 9
I 9
.B b
E 15
I 15
.Pp
I 17
D 31
.Df I
E 17
.Tw Ds
.Tp Cm b
E 31
I 31
.Bl -tag -width flag -offset indent -compact
.It Cm b
E 31
E 15
block special
D 15
.br
.ns
E 9
.TP
D 9
.B  \-print
Always true;
causes the current pathname to be printed.
E 9
I 9
.B c
E 15
I 15
D 31
.Tp Cm c
E 31
I 31
.It Cm c
E 31
E 15
character special
D 15
.br
.ns
E 9
.TP
I 4
D 9
.B  \-ls
Always true;
causes current pathname to be printed together
with its associated statistics.
These include (respectively) inode number,
size in kilobytes (1024 bytes),
protection mode,
number of hard links,
user,
group,
size in bytes,
and modification time.
If the file is a special file
the size field will instead contain the major and minor
device numbers.
If the file is a symbolic link the
pathname of the linked-to file is printed preceded by ``->''.
The format is identical to that of ``ls -gilds''
(note however that formatting is done internally,
without executing the ls program).
E 9
I 9
.B d
E 15
I 15
D 31
.Tp Cm d
E 31
I 31
.It Cm d
E 31
E 15
directory
D 15
.br
.ns
E 9
.TP
E 4
D 9
.BR \-newer " file"
True if
the current file has been modified more recently than the argument
.I file.
E 9
I 9
.B f
E 15
I 15
D 31
.Tp Cm f
E 31
I 31
.It Cm f
E 31
E 15
regular file
D 15
.br
.ns
E 9
I 4
.TP
I 5
D 9
.BR \-cpio " file"
Write the current file on the argument
.I file
in
.I cpio
format.
E 9
I 9
.B l
E 15
I 15
D 31
.Tp Cm l
E 31
I 31
.It Cm l
E 31
E 15
symbolic link
D 15
.br
.ns
E 9
.TP
I 9
.B p
E 15
I 15
D 31
.Tp Cm p
E 31
I 31
.It Cm p
E 31
E 15
FIFO
D 15
.br
.ns
.TP
.B s
E 15
I 15
D 31
.Tp Cm s
E 31
I 31
.It Cm s
E 31
E 15
socket
D 15
.RE
.TP
D 12
.B \-user uname
E 12
I 12
.B user uname
E 15
I 15
D 31
.Tp
I 17
.De
E 31
I 31
.El
E 31
E 17
.Pp
D 26
.Tp Cx Ic user
E 26
I 26
D 31
.Tp Cx Ic -user
E 26
.Cx \&\ \&
.Ar uname
.Cx
E 31
I 31
.It Ic -user Ar uname 
E 31
E 15
E 12
True if the file belongs to the user
D 15
.BR uname .
E 15
I 15
.Ar uname  .
E 15
If
D 15
.B uname
E 15
I 15
.Ar uname
E 15
is numeric and there is no such user name, then
D 15
.B uname
E 15
I 15
.Ar uname
E 15
is treated as a user id.
I 14
D 15
.PP
E 15
I 15
D 31
.Tp
E 31
I 31
.El
E 31
.Pp
E 15
All primaries which take a numeric argument allow the number to be
preceded by a plus sign (``+'') or a minus sign (``\-'').
D 26
A preceding plus sign means ``more than
D 15
.BR n '',
E 15
I 15
.Ar n  ' ' ,
E 15
a preceding minus sign means ``less than
D 15
.BR n ''
E 15
I 15
.Ar n  ' '
E 15
and neither means ``exactly
D 15
.BR n ''.
E 14
D 12
.TP
E 9
E 5
.B \-xdev
D 9
Always true;
causes find
.I not
to traverse down into a file system different
from the one on which current
.I argument
pathname resides.
E 9
I 9
This primary always evaluates to true.
It causes
.I find
to not descend into directories that have a different device number
than the file the descent began from.
E 12
.SH OPERATORS
E 15
I 15
.Ar n  ' ' .
E 26
I 26
A preceding plus sign means ``more than n'', a preceding minus sign means
``less than n'' and neither means ``exactly n'' .
E 26
.Sh OPERATORS
E 15
The primaries may be combined using the following operators.
The operators are listed in order of decreasing precedence.
E 9
I 6
D 15
.TP
D 9
.B \-follow
Always true;
causes find to traverse symbolic links to directories.
Normally find does not traverse symbolic links.
E 6
E 4
.PP
The primaries may be combined using the following operators
(in order of decreasing precedence):
.TP 4
1)
A parenthesized group of primaries and operators
(parentheses are special to the Shell and must be escaped).
.TP 4
2)
The negation of a primary
(`!' is the unary
.I not
operator).
.TP 4
3)
Concatenation of primaries
(the
.I and
operation
is implied by the juxtaposition of two primaries).
.TP 4
4)
Alternation of primaries
.RB "(`" \-o "' is the"
.I or
operator).
E 9
I 9
.B "( expression )"
E 15
I 15
D 31
.Di L
.Dp Cx Ic \&(
.Ar expression
.Cx \&)
.Cx
E 31
I 31
.Bl -tag -width (expression) 
.It Cm \&( Ns Ar expression Ns Cm \&) 
E 31
E 15
This evaluates to true if the parenthesized expression evaluates to
true.
D 15
.TP
.B "! expression"
E 15
I 15
.Pp
D 31
.Dp Cx Ic \&!
.Cx \&\ \&
.Ar expression
.Cx
E 15
This is the unary NOT operator.
E 31
I 31
.It Cm \&! Ns Ar expression 
This is the unary
.Tn NOT
operator.
E 31
It evaluates to true if the expression is false.
D 15
.TP
D 12
.B "expression \-a expression"
E 12
I 12
.B "expression and expression"
E 12
.br
.ns
.TP
.B "expression expression"
E 15
I 15
.Pp
D 31
.Dp Cx Ar expression
.Cx \&\ \&
D 28
.Ic and
E 28
I 28
.Ic -and
E 28
.Cx \&\ \&
.Ar expression
.Cx
.Dp Cx Ar expression expression
.Cx
E 31
I 31
.It Ar expression Cm -and Ar expression 
.It Ar expression expression 
E 31
E 15
The
D 12
.B \-a
E 12
I 12
D 15
.B and
E 15
I 15
D 28
.Ic and
E 28
I 28
D 31
.Ic -and
E 28
E 15
E 12
operator is the logical AND operator.
E 31
I 31
.Cm -and
operator is the logical
.Tn AND
operator.
E 31
As it is implied by the juxtaposition of two expressions it does not
have to be specified.
The expression evaluates to true if both expressions are true.
The second expression is not evaluated if the first expression is false.
D 15
.TP
D 12
.B "expression \-o expression"
E 12
I 12
.B "expression or expression"
E 15
I 15
.Pp
D 31
.Dp Cx Ar expression
.Cx \&\ \&
D 28
.Ic or
E 28
I 28
.Ic -or
E 28
.Cx \&\ \&
.Ar expression
.Cx
E 31
I 31
.It Ar expression Cm -or Ar expression 
E 31
E 15
E 12
The
D 12
.B \-o
E 12
I 12
D 15
.B or
E 15
I 15
D 28
.Ic or
E 28
I 28
D 31
.Ic -or
E 28
E 15
E 12
operator is the logical OR operator.
E 31
I 31
.Cm -or
operator is the logical
.Tn OR
operator.
E 31
The expression evaluates to true if either the first or the second expression
is true.
The second expression is not evaluated if the first expression is true.
I 14
D 15
.PP
E 15
I 15
D 31
.Dp
E 31
I 31
.El
E 31
.Pp
E 15
All operands and primaries must be separate arguments to
D 15
.IR find .
E 15
I 15
.Nm find  .
E 15
Primaries which themselves take arguments expect each argument
to be a separate argument to
D 15
.IR find .
E 14
E 9
D 3
.SH EXAMPLE
E 3
I 3
.SH EXAMPLES
D 7
.PP
D 5
To typeset all variants of manual pages for 'ls':
E 5
I 5
To find all accessible files whose pathname contains `find':
.IP
find find
.PP
E 7
D 9
To typeset all variants of manual pages for `ls':
E 5
.IP 
vtroff -man `find '*man*/ls.?'`
E 9
.PP
E 15
I 15
.Nm find  .
.Sh EXAMPLES
.Pp
E 15
E 3
D 9
To remove all files named
`a.out' or `*.o' that have not been accessed for a week:
.IP "" .2i
D 3
find / \\( \-name a.out \-o \-name '*.o' \\)
\-atime +7 \-exec rm {} \\;
E 3
I 3
D 5
find / \\( \-name a.out \-o \-name '*.o' \\) \-atime +7 \-exec rm {} \\;
E 5
I 5
find / \e( \-name a.out \-o \-name '*.o' \e) \-atime +7 \-exec rm {} \e\;
E 5
E 3
.SH FILES
I 5
.nf
D 7
.ta \w'/usr/lib/find/find.codes     'u
E 7
I 7
.ta \w'/etc/passwd     'u
E 7
E 5
/etc/passwd
D 5
.br
E 5
/etc/group
I 3
D 5
.br
/usr/lib/find/find.codes	coded filenames
E 5
I 5
D 7
/usr/lib/find/find.codes	coded pathnames database
E 7
.fi
E 9
I 9
The following examples are shown as given to the shell:
D 15
.TP
D 12
find  /  \e!  \-name  "*.c"  \-print
E 12
I 12
find  /  \e!  name  "*.c"  print
E 15
I 15
D 31
.Tw findx
D 26
.Tp Li find  /  \e!  name  "*.c"  print
E 26
I 26
.Tp Li find  /  \e!  -name  "*.c"  -print
E 31
I 31
.Bl -tag -width findx
.It Li "find  /  \e!  -name  \*q*.c\*q  -print"
E 31
E 26
E 15
E 12
Print out a list of all the files whose names do not end in ``.c''.
D 15
.TP
D 12
find  /  \-newer  ttt  \-user  wnj  \-print
E 12
I 12
find  /  newer  ttt  user  wnj  print
E 15
I 15
D 26
.Tp Li find  /  newer  ttt  user  wnj  print
E 26
I 26
D 31
.Tp Li find  /  -newer  ttt  -user  wnj  -print
E 31
I 31
.It Li "find  /  -newer  ttt  -user  wnj  -print"
E 31
E 26
E 15
E 12
Print out a list of all the files owned by user ``wnj'' that are newer
than the file ``ttt''.
D 15
.TP
D 12
find  /  \e!  \e(  \-newer  ttt  \-user  wnj  \e)  \-print
E 12
I 12
find  /  \e!  \e(  newer  ttt  user  wnj  \e)  print
E 15
I 15
D 26
.Tp Li find  /  \e!  \e(  newer  ttt  user  wnj  \e)  print
E 26
I 26
D 31
.Tp Li find  /  \e!  \e(  -newer  ttt  -user  wnj  \e)  -print
E 31
I 31
.It Li "find  /  \e!  \e(  -newer  ttt  -user  wnj  \e)  -print"
E 31
E 26
E 15
E 12
Print out a list of all the files which are not both newer than ``ttt''
and owned by ``wnj''.
D 15
.TP
D 12
find  /  \e(  \-newer  ttt  \-o  \-user wnj  \e)  \-print
E 12
I 12
find  /  \e(  newer  ttt  or  user wnj  \e)  print
E 15
I 15
D 26
.Tp Li find  /  \e(  newer  ttt  or  user wnj  \e)  print
E 26
I 26
D 28
.Tp Li "find  /  \e(  -newer  ttt  or  -user wnj  \e)  -print"
E 28
I 28
D 31
.Tp Li "find  /  \e(  -newer  ttt  -or  -user wnj  \e)  -print"
E 31
I 31
.It Li "find  /  \e(  -newer  ttt  -or  -user wnj  \e)  -print"
E 31
E 28
E 26
E 15
E 12
Print out a list of all the files that are either owned by ``wnj'' or
that are newer than ``ttt''.
E 9
E 5
E 3
D 15
.SH "SEE ALSO"
D 2
sh(1), test(1), filsys(5)
E 2
I 2
D 8
sh(1), test(1), fs(5)
E 8
I 8
D 9
list(1), sh(1), test(1), fs(5)
E 9
I 9
D 11
chmod(1), sh(1), test(1), stat(2), umask(2), getpwent(3), getgrent(3)
E 11
I 11
chmod(1), sh(1), test(1), stat(2), umask(2),
getpwent(3), getgrent(3), strmode(3)
E 11
.SH STANDARDS
E 15
I 15
D 31
.Tp
E 31
I 31
.El
E 31
.Sh SEE ALSO
.Xr chmod 1 ,
D 33
.Xr sh 1 ,
E 33
I 33
.Xr locate 1 ,
E 33
D 35
.Xr test 1 ,
E 35
I 35
D 36
.Xr symlink 1 ,
E 36
E 35
.Xr stat 2 ,
I 36
.Xr fts 3 ,
E 36
D 33
.Xr umask 2 ,
E 33
D 40
.Xr getpwent 3 ,
E 40
.Xr getgrent 3 ,
I 40
.Xr getpwent 3 ,
E 40
D 34
.Xr strmode 3
E 34
I 34
.Xr strmode 3 ,
D 36
.Xr fts 3
E 36
I 36
.Xr symlink 7
E 36
E 34
.Sh STANDARDS
E 15
The
D 15
.I find
E 15
I 15
.Nm find
E 15
D 12
utility is expected to be POSIX 1003.2 compatible.
The primaries
.B \-follow
.B \-inum
E 12
I 12
D 26
utility syntax is a replacement for the syntax specified by the POSIX
E 26
I 26
D 31
utility syntax is a superset of the syntax specified by the POSIX
E 26
1003.2 standard.
E 31
I 31
utility syntax is a superset of the syntax specified by the
.St -p1003.2
standard.
E 31
D 26
The standard syntax is also supported; see the COMPATIBILITY section
below for details.
E 26
D 15
.PP
E 15
I 15
.Pp
E 15
The
D 15
.B \-s
E 15
I 15
D 24
.Fl s
E 15
option as well as the primaries
E 24
I 24
D 27
.Fl r ,
E 27
D 26
.Fl s ,
E 26
I 26
.Fl s
E 26
and
.Fl X
D 26
options as well as the primaries
E 24
D 15
.B inum
E 15
I 15
.Ic inum
E 26
I 26
D 27
options, as well as the primaries
E 27
I 27
options and the
E 27
.Ic -inum
E 26
E 15
E 12
and
D 12
.BR \-ls
are Berkeley extensions.
E 9
E 8
I 3
D 7
.br
Relevant paper in February, 1983 issue of
.I ;login:.
E 7
E 3
E 2
.SH BUGS
D 3
The syntax is painful.
E 3
I 3
D 5
The syntax (except for the second form), is painful.
E 5
I 5
D 7
The first form's syntax is painful, and
the second form's exact semantics is confusing and
can vary from site to site.
E 7
I 7
D 9
The syntax is painful.
E 9
I 9
The primaries
.BR \-depth ,
.BR \-follow ,
E 12
I 12
D 15
.BR ls
E 15
I 15
D 26
.Ic ls
E 26
I 26
D 27
.Ic -ls ,
E 26
E 15
are extensions to the POSIX standard.
E 27
I 27
.Ic -ls
D 31
primaries are extensions to the POSIX standard.
E 31
I 31
primaries are extensions to
.St -p1003.2 .
E 31
E 27
D 15
.SH COMPATIBILITY
E 15
I 15
D 26
.Sh COMPATIBILITY
E 15
The traditional, and standardized, syntax for
D 15
.I find
E 15
I 15
.Nm find
E 15
is as follows.
All of the primaries are preceded by a dash (``\-''), i.e. the
primary ``group'' is specified as ``\-group''.
The
D 15
.BR \-d ,
.BR \-s ,
E 15
I 15
.Fl d  ,
.Fl s ,
E 26
I 26
.Pp
Historically, the
.Fl d ,
D 38
.Fl s
E 38
I 38
.Fl h
E 38
E 26
E 15
E 12
and
D 12
.B \-xdev
are really global variables that take effect before the traversal begins,
possibly leading to unexpected results.
An example would be the expression ``\-print \-o \-depth''.
As \-print always evaluates to true, the standard order of evaluation
would imply that \-depth would never be evaluated.
These primaries actually behave as multi-letter options which are
evaluated and replaced with the moral equivalent of \-true when
E 12
I 12
D 15
.BR \-x
E 15
I 15
.Fl x
E 15
D 26
options are implemented using the primaries ``\-depth'', ``\-follow'',
E 26
I 26
options were implemented using the primaries ``\-depth'', ``\-follow'',
E 26
and ``\-xdev''.
D 26
These primaries always evaluate to true.
The operator ``or'' is implemented as ``\-o'', and the operator
``and'' is implemented as ``\-a''.
The set of file trees to be traversed are specified as the first operands
to
D 15
.IR find .
E 15
I 15
.Nm find  .
E 15
The first operand beginning with a dash (``\-''), exclamation point (``!'')
or left parenthesis (``('') is assumed to be the beginning of the expression
and the end of the files to be traversed.
D 15
.PP
E 15
I 15
.Pp
E 15
The
E 12
D 15
.I find
E 15
I 15
.Nm find
E 15
D 12
begins execution.
E 12
I 12
syntax was changed for two reasons.
The first is that the ``\-depth'', ``\-follow'' and ``\-xdev'' primaries
are really global variables that take effect before the traversal begins.
This causes some legal expressions to have unexpected results.
E 26
I 26
These primaries always evaluated to true.
As they were really global variables that took effect before the traversal
began, some legal expressions could have unexpected results.
E 26
An example is the expression ``\-print \-o \-depth''.
As \-print always evaluates to true, the standard order of evaluation
implies that \-depth would never be evaluated.
This is not the case.
E 12
E 9
E 7
D 15
.PP
E 15
I 15
.Pp
E 15
D 9
More than one `-newer' option does not work properly.
E 9
I 9
D 12
Any command line argument beginning with a dash (``\-''), exclamation point
(``!'') or left parenthesis (``('') is assumed to be part of an expression.
The first such argument is used to delimit the end of the file names and
the beginning of the expression.
Traversing file trees with names beginning with one of these characters
is tough.
.PP
Several special characters used by
E 12
I 12
D 26
The second reason is that traversing file trees with names beginning with
a dash, exclamation point or left parenthesis was impossible.
E 26
I 26
D 28
The operator ``or'' was implemented as ``\-o'', and the operator ``and''
E 28
I 28
The operator ``-or'' was implemented as ``\-o'', and the operator ``-and''
E 28
was implemented as ``\-a''.
E 26
I 19
.Pp
D 26
Historic implementations of the 
E 26
I 26
Historic implementations of the
E 26
.Ic exec
and
.Ic ok
primaries did not replace the string ``{}'' in the utility name or the
D 26
utility arguments unless it appeared without any other characters.
E 26
I 26
utility arguments if it had preceding or following non-whitespace characters.
E 26
This version replaces it no matter where in the utility name or arguments
it appears.
E 19
D 15
.SH BUGS
E 15
I 15
.Sh BUGS
E 15
The special characters used by
E 12
D 15
.I find
E 15
I 15
.Nm find
E 15
D 12
are also special characters to the shell programs.
E 12
I 12
are also special characters to many shell programs.
E 12
In particular, the characters ``*'', ``['', ``]'', ``?'', ``('', ``)'',
``!'', ``\e'' and ``;'' may have to be escaped from the shell.
I 26
.Pp
As there is no delimiter separating options and file names or file
names and the
.Ar expression ,
it is difficult to specify files named ``-xdev'' or ``!''.
These problems are handled by the
.Fl f
option and the
.Xr getopt 3
``--'' construct.
E 26
E 9
E 5
E 3
E 1
