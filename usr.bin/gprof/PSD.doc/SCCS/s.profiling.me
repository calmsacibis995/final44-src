h36690
s 00002/00002/00087
d D 8.1 93/06/08 18:28:00 bostic 8 7
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00007/00001/00082
d D 5.1 91/04/16 17:51:47 bostic 7 6
c new copyright; att/bsd/shared
e
s 00003/00003/00080
d D 1.6 82/03/14 23:11:12 peter 6 5
c reword to get around `gprof' at the beginning of a sentence.
e
s 00007/00005/00076
d D 1.5 82/03/14 22:16:37 peter 5 4
c sunday night sue.
e
s 00008/00008/00073
d D 1.4 82/03/13 15:37:25 peter 4 3
c diction.
e
s 00004/00004/00077
d D 1.3 82/03/12 13:57:29 peter 3 2
c sue polish.
e
s 00003/00003/00078
d D 1.2 82/03/11 21:44:27 peter 2 1
c polle changes.
e
s 00081/00000/00000
d D 1.1 82/03/11 21:13:45 peter 1 0
c date and time created 82/03/11 21:13:45 by peter
e
u
U
t
T
I 1
D 7
\"	%W% %G%
E 7
I 7
D 8
.\" Copyright (c) 1982 The Regents of the University of California.
.\" All rights reserved.
E 8
I 8
.\" Copyright (c) 1982, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 8
.\"
.\" %sccs.include.redist.man%
.\"
.\"	%W% (Berkeley) %G%
.\"
E 7
.sh 1 "Types of Profiling"
.pp
D 4
There are a number of different uses for program profiles,
E 4
I 4
There are several different uses for program profiles,
E 4
and each may require different information from the profiles,
or different presentation of the information.
We distinguish two broad categories of profiles:
those that present counts of statement or routine invocations,
and those that display timing information about statements
or routines.
Counts are typically presented in tabular form,
often in parallel with a listing of the source code.
D 3
Timing information may be similarly presented,
or may be further processed to attribute the time of each
statement to its enclosing statement or routine.
E 3
I 3
D 5
Timing information may be similarly presented;
E 5
I 5
Timing information could be similarly presented;
E 5
but more than one measure of time might be associated with each
statement or routine.
E 3
D 5
Thus each profiled segment would display two times:
E 5
I 5
For example,
in the framework used by \fBgprof\fP
each profiled segment would display two times:
E 5
one for the time used by the segment itself, and another for the
time inherited from code segments it invokes.
.pp
D 4
Execution counts are used in a number of different contexts.
E 4
I 4
Execution counts are used in many different contexts.
E 4
The exact number of times a routine or statement is activated
can be used to determine if an algorithm is performing as 
expected.
D 2
Inspection of such counters may reveal algorithms whose
E 2
I 2
D 4
Cursory inspection of such counters may reveal algorithms whose
E 4
I 4
Cursory inspection of such counters may show algorithms whose
E 4
E 2
complexity is unsuited to the task at hand.
D 2
Careful interpretation of counters can often reveal
E 2
I 2
Careful interpretation of counters can often suggest
E 2
improvements to acceptable algorithms.
Precise examination can uncover subtle errors in an
algorithm.
D 4
At this level, profiling counters are quite similar to
E 4
I 4
At this level, profiling counters are similar to
E 4
debugging statements whose purpose is to show the number of times
a piece of code is executed.
Another view of such counters is as boolean values.
One may be interested that a portion of code has executed at
D 5
all; for exhaustive testing, or to check that one implementation
E 5
I 5
all, for exhaustive testing, or to check that one implementation
E 5
of an abstraction completely replaces a previous one.
.pp
Execution counts are not necessarily proportional to the amount
of time required to execute the routine or statement.
Further, the execution time of a routine will not be the same for
all calls on the routine.
D 4
In addition, the criteria for establishing actual execution time
E 4
I 4
D 5
In addition, the criteria for establishing execution time
E 5
I 5
The criteria for establishing execution time
E 5
E 4
must be decided.
If a routine implements an abstraction by invoking other abstractions,
the time spent in the routine will not accurately reflect the
time required by the abstraction it implements.
D 4
Similarly, if an abstraction is implemented by a number of
E 4
I 4
Similarly, if an abstraction is implemented by several
E 4
D 2
routines the time required by the abstraction will be diffused
E 2
I 2
routines the time required by the abstraction will be distributed
E 2
across those routines.
.pp
D 4
Given the execution time for individual routines,
E 4
I 4
Given the execution time of individual routines,
E 4
\fBgprof\fP accounts to each routine the time spent
D 4
on behalf of it by the routines it invokes.
E 4
I 4
for it by the routines it invokes.
E 4
D 5
This is done by assembling a \fIcall graph\fP with nodes that
E 5
I 5
This accounting is done by assembling a \fIcall graph\fP with nodes that
E 5
are the routines of the program and directed arcs that represent
calls from call sites to routines.
We distinguish among three different call graphs for a program.
The \fIcomplete call graph\fP incorporates all routines and all
potential arcs,
including arcs that represent calls to functional parameters
D 3
or variables.
E 3
I 3
or functional variables.
E 3
This graph contains the other two graphs as subgraphs.
The \fIstatic call graph\fP includes all routines and all possible arcs
that are not calls to functional parameters or variables.
The \fIdynamic call graph\fP includes only those routines and
arcs traversed by the profiled execution of the program.
This graph need not include all routines, nor need it include all
potential arcs between the routines it covers.
It may, however, include arcs to functional parameters or
variables that the static call graph may omit.
The static call graph can be determined from the (static) program text.
The dynamic call graph is determined only by profiling an
execution of the program.
The complete call graph for a monolithic program could be determined
by data flow analysis techniques.
The complete call graph for programs that change
during execution, by modifying themselves or dynamically loading
or overlaying code, may never be determinable.
D 6
\fBGprof\fP uses both the static call graph and the dynamic call
graph for a profiled program, but does not search for the complete
call graph.
E 6
I 6
Both the static call graph and the dynamic call graph are used
by \fBgprof\fP, but it does not search for the complete call
graph.
E 6
E 1
