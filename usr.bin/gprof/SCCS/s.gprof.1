h43212
s 00002/00002/00253
d D 8.1 93/06/06 14:46:13 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00008/00000/00247
d D 6.9 92/03/03 00:03:20 mckusick 11 10
c add -C option to break cycles
e
s 00062/00069/00185
d D 6.8 91/07/24 22:27:10 cael 10 9
c mdoc version three
e
s 00002/00000/00252
d D 6.7 91/03/14 00:12:06 cael 9 7
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00001/00000/00252
d R 6.7 91/03/13 20:30:33 cael 8 7
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00000/00000/00252
d D 6.6 90/07/24 22:45:47 cael 7 6
c .Xr botch fix
e
s 00140/00118/00112
d D 6.5 90/06/24 19:04:37 cael 6 5
c converted man page
e
s 00006/00001/00224
d D 6.4 90/01/29 18:05:19 mckusick 5 4
c add reference to SP&E paper
e
s 00030/00025/00195
d D 6.3 87/09/30 08:52:11 mckusick 4 3
c update to reflect current order of listing
e
s 00013/00000/00207
d D 6.2 87/04/27 17:41:29 mckusick 3 2
c add description of -k flag
e
s 00001/00002/00206
d D 6.1 85/04/29 21:22:36 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00208/00000/00000
d D 5.1 85/04/29 21:21:54 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 1
D 6
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 6
I 6
D 12
.\" Copyright (c) 1983, 1990 The Regents of the University of California.
.\" All rights reserved.
E 12
I 12
.\" Copyright (c) 1983, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 12
E 6
.\"
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
D 10
.\" %sccs.include.redist.man%
E 10
I 10
.\" %sccs.include.redist.roff%
E 10
E 6
.\"
D 2
\"	@(#)gprof.1	1.9 (Berkeley) 10/12/82
.TH GPROF 1 "18 January 1983"
E 2
I 2
D 6
.TH GPROF 1 "%Q%"
E 2
.UC 5
.SH NAME
gprof \- display call graph profile data
.SH SYNOPSIS
.B gprof
[ options ] [ a.out [ gmon.out ... ] ]
.SH DESCRIPTION
.I gprof
E 6
I 6
D 10
.\"     %W% (Berkeley) %G%
E 10
I 10
.\"	%W% (Berkeley) %G%
E 10
.\"
I 9
D 10
.Vx
.Vx
E 10
E 9
.Dd %Q%
.Dt GPROF 1
.Os BSD 4.2
.Sh NAME
.Nm gprof
.Nd display call graph profile data
.Sh SYNOPSIS
.Nm gprof
.Op options
.Op Ar a.out Op Ar gmon.out ...
.Sh DESCRIPTION
D 10
.Nm gprof
E 10
I 10
.Nm Gprof
E 10
E 6
produces an execution profile of C, Pascal, or Fortran77 programs.
The effect of called routines is incorporated in the profile of each caller.
The profile data is taken from the call graph profile file
D 6
.RI ( gmon.out
E 6
I 6
D 10
.Pf \&( Pa gmon.out
E 10
I 10
.Pf ( Pa gmon.out
E 10
E 6
default) which is created by programs
D 4
which are compiled with the 
E 4
I 4
D 6
that are compiled with the 
E 4
.B \-pg
option of 
.IR cc ,
.IR pc ,
E 6
I 6
that are compiled with the
.Fl pg
option of
.Xr cc 1 ,
.Xr pc 1 ,
E 6
and
D 6
.IR f77 .
E 6
I 6
.Xr f77 1 .
E 6
D 4
That option also links in versions of the library routines 
which are compiled for profiling.
The symbol table in the
named object file
E 4
I 4
The
D 6
.B \-pg
option also links in versions of the library routines 
E 6
I 6
.Fl pg
option also links in versions of the library routines
E 6
that are compiled for profiling.
D 6
The symbol table in the named object file
E 4
.RI ( a.out
default)
D 4
is read and correlated with the
call graph profile file.
E 4
I 4
is read and correlated with the call graph profile file.
E 6
I 6
.Nm Gprof
reads the given object file (the default is
.Pa a.out)
and establishes the relation between it's symbol table
and the call graph profile from
.Pa gmon.out .
E 6
E 4
If more than one profile file is specified,
the
D 6
.I gprof
E 6
I 6
.Nm gprof
E 6
output shows the sum of the profile information in the given profile files.
D 6
.PP
D 4
First, a flat profile is given,
similar to that provided by
.IR prof (1).
This listing gives the total execution times
and call counts for each of the functions
in the program, sorted by decreasing time.
.PP
E 4
I 4
.I Gprof
E 6
I 6
.Pp
.Nm Gprof
E 6
calculates the amount of time spent in each routine.
E 4
Next, these times are propagated along the edges of the call graph.
D 6
Cycles are discovered, and calls into a cycle are made to share the time 
E 6
I 6
Cycles are discovered, and calls into a cycle are made to share the time
E 6
of the cycle.
D 4
A second listing shows the functions
E 4
I 4
The first listing shows the functions
E 4
sorted according to the time they represent
including the time of their call graph descendents.
Below each function entry is shown its (direct) call graph children,
and how their times are propagated to this function.
A similar display above the function shows how this function's time and the
time of its descendents is propagated to its (direct) call graph parents.
D 6
.PP
E 6
I 6
.Pp
E 6
Cycles are also shown, with an entry for the cycle as a whole and
a listing of the members of the cycle and their contributions to the
time and call counts of the cycle.
D 6
.PP
E 6
I 6
.Pp
E 6
I 4
Second, a flat profile is given,
similar to that provided by
D 6
.IR prof (1).
E 6
I 6
.Xr prof  1  .
E 6
This listing gives the total execution times, the call counts,
D 6
the number of milliseconds per call in the routine itself, and
the number of milliseconds per call in the routine itself including
E 6
I 6
the time in milleseconds the call spent in the routine itself, and
the time in milleseconds the call spent in the routine itself including
E 6
its descendents.
D 6
.PP
E 6
I 6
.Pp
E 6
Finally, an index of the function names is provided.
D 6
.PP
E 6
I 6
.Pp
E 6
E 4
The following options are available:
D 6
.TP
.B \-a
E 6
I 6
D 10
.Tw Fl
.Tp Fl a
E 6
suppresses the printing of statically declared functions.
E 10
I 10
.Bl -tag -width Fl
.It Fl a
Suppresses the printing of statically declared functions.
E 10
If this option is given, all relevant information about the static function
D 6
.RI ( e.g.,
time samples, calls to other functions, calls from other functions)
E 6
I 6
(e.g., time samples, calls to other functions, calls from other functions)
E 6
belongs to the function loaded just before the static function in the
D 6
.I a.out
E 6
I 6
.Pa a.out
E 6
file.
D 6
.TP
.B \-b
E 6
I 6
D 10
.Tp Fl b
E 6
D 4
supresses the printing of a description of each field in the profile.
E 4
I 4
suppresses the printing of a description of each field in the profile.
E 4
D 6
.TP
.B \-c
E 6
I 6
.Tp Fl c
E 6
the static call graph of the program is discovered by a heuristic
E 10
I 10
.It Fl b
Suppresses the printing of a description of each field in the profile.
.It Fl c
The static call graph of the program is discovered by a heuristic
E 10
D 4
which examines the text space of the object file.
Static-only parents or children are indicated
E 4
I 4
that examines the text space of the object file.
Static-only parents or children are shown
E 4
with call counts of 0.
I 11
.It Fl C Ar count
Find a minimal set of arcs that can be broken to eliminate all cycles with
.Ar count
or more members.
Caution: the algorithm used to break cycles is exponential,
so using this option may cause 
.Nm gprof
to run for a very long time.
E 11
D 6
.TP
.BI \-e " name"
E 6
I 6
D 10
.Tc Fl e
.Ws
E 10
I 10
.It Fl e Ar name 
Suppresses the printing of the graph profile entry for routine
E 10
.Ar name
D 10
.Cx
E 6
suppresses the printing of the graph profile entry for routine
D 6
.I name
E 6
I 6
.Ar name
E 10
E 6
and all its descendants
(unless they have other ancestors that aren't suppressed).
More than one
D 6
.B \-e
E 6
I 6
.Fl e
E 6
option may be given.
Only one
D 6
.I name
E 6
I 6
.Ar name
E 6
may be given with each
D 6
.B \-e
E 6
I 6
.Fl e
E 6
option.
D 6
.TP
.BI \-E " name"
E 6
I 6
D 10
.Tc Fl E
.Ws
E 10
I 10
.It Fl E Ar name 
Suppresses the printing of the graph profile entry for routine
E 10
.Ar name
D 10
.Cx
E 6
suppresses the printing of the graph profile entry for routine
D 6
.I name
(and its descendants) as 
.BR \-e ,
E 6
I 6
.Ar name
E 10
(and its descendants) as
.Fl e  ,
E 6
above, and also excludes the time spent in
D 6
.I name
E 6
I 6
.Ar name
E 6
(and its descendants) from the total and percentage time computations.
(For example,
D 6
.B \-E
.I mcount
.B \-E
.I mcleanup
E 6
I 6
.Fl E
.Ar mcount
.Fl E
.Ar mcleanup
E 6
is the default.)
D 6
.TP
.BI \-f " name"
E 6
I 6
D 10
.Tc Fl f
.Ws
E 10
I 10
.It Fl f Ar name 
Prints the graph profile entry of only the specified routine
E 10
.Ar name
D 10
.Cx
E 6
prints the graph profile entry of only the specified routine
D 6
.I name
E 6
I 6
.Ar name
E 10
E 6
and its descendants.
More than one
D 6
.B \-f
E 6
I 6
.Fl f
E 6
option may be given.
Only one
D 6
.I name
E 6
I 6
.Ar name
E 6
may be given with each
D 6
.B \-f
E 6
I 6
.Fl f
E 6
option.
D 6
.TP
.BI \-F " name"
E 6
I 6
D 10
.Tc Fl F
.Ws
E 10
I 10
.It Fl F Ar name 
Prints the graph profile entry of only the routine
E 10
.Ar name
D 10
.Cx
E 6
prints the graph profile entry of only the routine
D 6
.I name
and its descendants (as 
.BR \-f,
E 6
I 6
.Ar name
E 10
and its descendants (as
.Fl f ,
E 6
above) and also uses only the times of the printed routines
in total time and percentage computations.
More than one
D 6
.B \-F
E 6
I 6
.Fl F
E 6
option may be given.
Only one
D 6
.I name
E 6
I 6
.Ar name
E 6
may be given with each
D 6
.B \-F
E 6
I 6
.Fl F
E 6
option.
The
D 6
.B \-F
E 6
I 6
.Fl F
E 6
option
overrides
the
D 6
.B \-E
E 6
I 6
.Fl E
E 6
option.
D 6
.TP
I 3
.BI \-k " fromname toname"
E 6
I 6
D 10
.Tc Fl k
.Ws
E 10
I 10
.It Fl k Ar fromname Ar toname 
Will delete any arcs from routine
E 10
.Ar fromname
D 10
.Ws
.Ar toname
.Cx
E 6
will delete any arcs from routine
D 6
.I fromname
E 6
I 6
.Ar fromname
E 10
E 6
to routine
D 6
.IR toname .
E 6
I 6
D 10
.Ar toname  .
E 10
I 10
.Ar toname .
E 10
E 6
This can be used to break undesired cycles.
More than one
D 6
.B \-k
E 6
I 6
.Fl k
E 6
option may be given.
Only one pair of routine names may be given with each
D 6
.B \-k
E 6
I 6
.Fl k
E 6
option.
D 6
.TP
E 3
.B \-s
E 6
I 6
D 10
.Tp Fl s
E 6
a profile file
E 10
I 10
.It Fl s
A profile file
E 10
D 6
.I gmon.sum
E 6
I 6
.Pa gmon.sum
E 6
D 4
is produced which represents
E 4
I 4
is produced that represents
E 4
the sum of the profile information in all the specified profile files.
D 4
This summary profile file may be given to subsequent
E 4
I 4
This summary profile file may be given to later
E 4
executions of gprof (probably also with a
D 6
.BR \-s )
E 6
I 6
D 10
.Fl s  )
E 10
I 10
.Fl s )
E 10
E 6
to accumulate profile data across several runs of an
D 6
.I a.out
E 6
I 6
.Pa a.out
E 6
file.
D 6
.TP
.B \-z
E 6
I 6
D 10
.Tp Fl z
E 6
D 4
displays routines which have zero usage (as indicated by call counts
E 4
I 4
displays routines that have zero usage (as shown by call counts
E 10
I 10
.It Fl z
Displays routines that have zero usage (as shown by call counts
E 10
E 4
and accumulated time).
D 4
This is useful in conjunction with the 
E 4
I 4
D 6
This is useful with the 
E 4
.B \-c
E 6
I 6
This is useful with the
.Fl c
E 6
option for discovering which routines were never called.
D 6
.SH FILES
.ta 1.5i
.I a.out	
E 6
I 6
D 10
.Tp
E 10
I 10
.El
E 10
.Sh FILES
D 10
.Dw gmon.sum
.Di L
.Dp Pa a.out
E 6
the namelist and text space.
D 6
.br
.I gmon.out	
E 6
I 6
.Dp Pa gmon.out
E 6
dynamic call graph and profile.
D 6
.br
.I gmon.sum	
E 6
I 6
.Dp Pa gmon.sum
E 6
summarized dynamic call graph and profile.
D 6
.SH "SEE ALSO"
monitor(3), profil(2), cc(1), prof(1)
E 6
I 6
.Dp
E 10
I 10
.Bl -tag -width gmon.sum -compact
.It Pa a.out
The namelist and text space.
.It Pa gmon.out
Dynamic call graph and profile.
.It Pa gmon.sum
Summarized dynamic call graph and profile.
.El
E 10
.Sh SEE ALSO
.Xr monitor 3 ,
.Xr profil 2 ,
.Xr cc 1 ,
.Xr prof 1
E 6
D 10
.br
I 5
D 6
``An Execution Profiler for Modular Programs'', by
E 6
I 6
.Em An Execution Profiler for Modular Programs ,
by
E 6
S. Graham, P. Kessler, M. McKusick;
D 6
\fISoftware - Practice and Experience, Vol 13\fP,
pp 671-685, 1983.
E 6
I 6
Software  - Practice and Experience,
Vol. 13, pp. 671-685, 1983.
E 6
.br
E 5
D 6
``gprof: A Call Graph Execution Profiler'', by
D 5
Graham, S.L., Kessler, P.B., McKusick, M.K.;
E 5
I 5
S. Graham, P. Kessler, M. McKusick;
E 5
.IR "Proceedings of the SIGPLAN '82 Symposium on Compiler Construction" ,
SIGPLAN Notices, Vol. 17, No. 6, pp. 120-126, June 1982.
.SH BUGS
Beware of quantization errors.
E 6
I 6
.Em gprof: A Call Graph Execution Profiler ,
by S. Graham, P. Kessler, M. McKusick;
Proceedings of the SIGPLAN '82 Symposium on Compiler Construction,
SIGPLAN Notices, Vol. 17, No  6, pp. 120-126, June 1982.
E 10
I 10
.Rs
.%T "An Execution Profiler for Modular Programs"
.%A S. Graham
.%A P. Kessler
.%A M. McKusick
.%J "Software - Practice and Experience"
.%V 13
.%P pp. 671-685
.%D 1983
.Re
.Rs
.%T "gprof: A Call Graph Execution Profiler"
.%A S. Graham
.%A P. Kessler
.%A M. McKusick
.%J "Proceedings of the SIGPLAN '82 Symposium on Compiler Construction, SIGPLAN Notices"
.%V 17
.%N 6
.%P pp. 120-126
.%D June 1982
.Re
E 10
.Sh HISTORY
D 10
.Nm Gprof
appeared in 4.2 BSD.
E 10
I 10
The
.Nm gprof
profiler
appeared in
.Bx 4.2 .
E 10
.Sh BUGS
E 6
The granularity of the sampling is shown, but remains
statistical at best.
We assume that the time for each execution of a function
can be expressed by the total time for the function divided
by the number of times the function is called.
D 4
Thus the time propagated along the call graph arcs to parents of that
function is directly proportional to the number of times that
E 4
I 4
Thus the time propagated along the call graph arcs to the function's
parents is directly proportional to the number of times that
E 4
arc is traversed.
D 6
.PP
D 4
Parents which are not themselves profiled will have the time of 
E 4
I 4
Parents that are not themselves profiled will have the time of 
E 6
I 6
.Pp
Parents that are not themselves profiled will have the time of
E 6
E 4
their profiled children propagated to them, but they will appear
to be spontaneously invoked in the call graph listing, and will
not have their time propagated further.
Similarly, signal catchers, even though profiled, will appear
to be spontaneous (although for more obscure reasons).
Any profiled children of signal catchers should have their times
D 6
propagated properly, unless the signal catcher was invoked during 
E 6
I 6
propagated properly, unless the signal catcher was invoked during
E 6
the execution of the profiling routine, in which case all is lost.
D 6
.PP
The profiled program must call 
.IR exit (2)
E 6
I 6
.Pp
The profiled program must call
.Xr exit  2
E 6
or return normally for the profiling information to be saved
D 6
in the gmon.out file.
E 6
I 6
in the
.Pa gmon.out
file.
E 6
E 1
