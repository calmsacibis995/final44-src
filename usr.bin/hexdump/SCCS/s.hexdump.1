h35102
s 00001/00001/00297
d D 8.2 94/04/18 07:24:16 bostic 17 16
c typo
e
s 00002/00002/00296
d D 8.1 93/06/06 14:49:54 bostic 16 15
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00003/00003/00295
d D 5.14 92/07/14 14:30:32 bostic 15 14
c fix for quads; prototype and cleanup in general
e
s 00000/00006/00298
d D 5.13 91/12/30 18:03:46 bostic 14 13
c hexdump no longer specified by POSIX 1003.2
e
s 00068/00085/00236
d D 5.12 91/07/27 16:30:57 cael 13 12
c mdoc version three
e
s 00003/00001/00318
d D 5.11 91/03/14 00:18:57 cael 12 10
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00001/00000/00319
d R 5.11 91/03/13 20:33:52 cael 11 10
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00074/00039/00245
d D 5.10 90/07/24 22:46:09 cael 10 9
c .Xr botch fix
e
s 00102/00105/00182
d D 5.9 90/06/30 01:30:38 cael 9 8
c converted man page
e
s 00001/00018/00286
d D 5.8 90/06/26 00:59:54 cael 8 7
c converted man page
e
s 00112/00108/00192
d D 5.7 90/06/24 19:05:23 cael 7 6
c converted man page
e
s 00013/00028/00285
d D 5.6 90/05/08 10:37:59 bostic 6 5
c simplify, don't bother giving specifications of all options
e
s 00031/00029/00282
d D 5.5 90/05/08 09:17:47 bostic 5 4
c simplify some of the options, don't use tbl for formatting
e
s 00015/00011/00296
d D 5.4 90/05/01 10:28:39 bostic 4 3
c add -x flag to specify hex output (default)
e
s 00003/00003/00304
d D 5.3 89/08/30 11:11:55 bostic 3 2
c _c should zero-pad the hexnumbers, which should be octal.
e
s 00000/00002/00307
d D 5.2 89/08/29 22:18:20 bostic 2 1
c trimming trailing blanks is too hard; the last revision handles most of the
c cases -- the one I quit on is where you have:
c 	"%06.6_ao "  12/1 "%3o "
c 	"\t\t" "%_p"
c 	"\n"
c You'd have to read-ahead and figure out what's going to be printed from
c future format strings to know if the current line should be blank padded.
e
s 00309/00000/00000
d D 5.1 89/08/29 18:36:18 bostic 1 0
c date and time created 89/08/29 18:36:18 by bostic
e
u
U
t
T
I 7
D 8
.\" Copyright (c) 1990 The Regents of the University of California.
E 8
I 8
D 16
.\" Copyright (c) 1989, 1990 The Regents of the University of California.
E 8
.\" All rights reserved.
E 16
I 16
.\" Copyright (c) 1989, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 16
.\"
D 13
.\" %sccs.include.redist.man%
E 13
I 13
.\" %sccs.include.redist.roff%
E 13
.\"
D 13
.\"     %W% (Berkeley) %G%
E 13
I 13
.\"	%W% (Berkeley) %G%
E 13
.\"
I 12
D 13
.Vx
.Vx
E 13
E 12
.Dd %Q%
E 7
I 1
D 8
.\" Copyright (c) 1989 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
.\"	@(#)hex.1	5.6 (Berkeley) 5/8/90
E 7
.\"
E 8
D 7
.TH HEXDUMP 1 "%Q%"
.UC 7
.SH NAME
hexdump - ascii, decimal, hexadecimal, octal dump
.SH SYNOPSIS
hexdump
.ft B
[
D 4
.I -bcdov
E 4
I 4
.I -bcdovx
E 4
.ft B
] [
.I -e format_string
.ft B
] [
.I -f format_file
.ft B
] [
.I -n length
.ft B
] [
.I -s skip
.ft B
] [
.I file ...
.ft B
]
.ft R
.SH DESCRIPTION
E 7
I 7
.Dt HEXDUMP 1
D 12
.Os BSD 4.4
E 12
I 12
.Os
E 12
.Sh NAME
.Nm hexdump
.Nd ascii, decimal, hexadecimal, octal dump
.Sh SYNOPSIS
D 9
.Ar hexdump
E 9
I 9
.Nm hexdump
E 9
.Op Fl bcdovx
D 9
.Op Fl e format_string
.Op Fl f format_file
.Op Fl n length
.Op Fl s skip
.Op
.Ar file  . . .
E 9
I 9
.Op Fl e Ar format_string
.Op Fl f Ar format_file
.Op Fl n Ar length
I 13
.Bk -words
E 13
.Op Fl s Ar skip
I 13
.Ek
E 13
.Ar file  ...
E 9
.Sh DESCRIPTION
E 7
D 9
The hexdump utility is a filter that displays the specified files, or
E 9
I 9
The hexdump utility is a filter which displays the specified files, or
E 9
the standard input, if no files are specified, in a user specified
format.
D 7
.PP
E 7
I 7
.Pp
E 7
The options are as follows:
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
-b
I 5
One-byte octal display.
D 7
.sp
E 7
I 7
.Pp
E 9
I 9
D 13
.Tw Fl
.Tp Fl b
E 13
I 13
.Bl -tag -width Fl
.It Fl b
E 13
.Em One-byte octal display .
E 9
E 7
E 5
Display the input offset in hexadecimal, followed by sixteen
space-separated, three column, zero-filled, bytes of input data,
in octal, per line.
D 6
It is equivalent to specifying the following format strings:
.ti +5
"%07.7_Ax\en"
.ti +5
"%07.7_ax  " 16/1 "%03o " "\en"
E 6
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
-c
I 5
One-byte character display.
D 7
.sp
E 7
I 7
.Pp
E 9
I 9
D 13
.Tp Fl c
E 13
I 13
.It Fl c
E 13
.Em One-byte character display .
E 9
E 7
E 5
Display the input offset in hexadecimal, followed by sixteen
space-separated, three column, space-filled, characters of input
data per line.
D 6
It is equivalent to specifying the following format strings:
.ti +5
"%07.7_Ax\en"
.ti +5
"%07.7_ax  " 16/1 "%3_c " "\en"
E 6
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
-d
E 9
I 9
D 13
.Tp Fl d
E 13
I 13
.It Fl d
E 13
E 9
I 5
D 10
Two-byte decimal display.
E 10
I 10
.Em Two-byte decimal display.
E 10
D 7
.sp
E 7
I 7
D 9
.Pp
E 9
E 7
E 5
Display the input offset in hexadecimal, followed by eight
space-separated, five column, zero-filled, two-byte units
of input data, in unsigned decimal, per line.
D 6
It is equivalent to specifying the following format strings:
.ti +5
"%07.7_Ax\en"
.ti +5
"%07.7_ax  " 8/2 "%05u " "\en"
E 6
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
-e
E 9
I 9
D 13
.Tc Fl e
.Ws
.Ar format_string
.Cx
E 13
I 13
.It Fl e Ar format_string 
E 13
E 9
Specify a format string to be used for displaying data.
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
-f
E 9
I 9
D 13
.Tc Fl f
.Ws
.Ar format_file
.Cx
E 13
I 13
.It Fl f Ar format_file 
E 13
E 9
Specify a file that contains one or more newline separated format strings.
Empty lines and lines whose first non-blank character is a hash mark
D 10
(#) are ignored.
E 10
I 10
D 13
.Pf \&( Cm \&# )
E 13
I 13
.Pf ( Cm \&# )
E 13
are ignored.
E 10
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
-n
E 9
I 9
D 13
.Tc Fl n
.Ws
.Ar length
.Cx
E 13
I 13
.It Fl n Ar length 
E 13
E 9
Interpret only
D 7
.I length
E 7
I 7
.Ar length
E 7
bytes of input.
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
-o
E 9
I 9
D 13
.Tp Fl o
E 13
I 13
.It Fl o
E 13
E 9
I 5
D 10
Two-byte octal display.
E 10
I 10
.Em Two-byte octal display.
E 10
D 7
.sp
E 7
I 7
D 9
.Pp
E 9
E 7
E 5
Display the input offset in hexadecimal, followed by eight
space-separated, six column, zero-filled, two byte quantities of
input data, in octal, per line.
D 6
It is equivalent to specifying the following format strings:
.ti +5
"%07.7_Ax\en"
.ti +5
"%07.7_ax  " 8/2 "%06o " "\en"
E 6
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
-s
E 9
I 9
D 13
.Tc Fl s
.Ws
.Ar offset
.Cx
E 13
I 13
.It Fl s Ar offset 
E 13
E 9
Skip
D 7
.I offset
E 7
I 7
.Ar offset
E 7
bytes from the beginning of the input.
By default,
D 7
.I offset
E 7
I 7
.Ar offset
E 7
is interpreted as a decimal number.
D 10
With a leading ``0x'' or ``0X'',
E 10
I 10
With a leading
.Cm 0x
or
.Cm 0X ,
E 10
D 7
.I offset
E 7
I 7
.Ar offset
E 7
is interpreted as a hexadecimal number,
D 10
otherwise, with a leading ``0'',
E 10
I 10
otherwise, with a leading
.Cm 0 ,
E 10
D 7
.I offset
E 7
I 7
.Ar offset
E 7
is interpreted as an octal number.
D 10
Appending the character ``b'', ``k'', or ``m'' to
E 10
I 10
Appending the character
.Cm b ,
.Cm k ,
or
.Cm m
to
E 10
D 7
.I offset
E 7
I 7
.Ar offset
E 7
D 10
causes it to be interpreted as a multiple of 512, 1024, or 1048576,
E 10
I 10
causes it to be interpreted as a multiple of
.Li 512 ,
.Li 1024 ,
or
.Li 1048576 ,
E 10
respectively.
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
-v
E 9
I 9
D 13
.Tp Fl v
E 13
I 13
.It Fl v
E 13
E 9
The
D 7
.I -v
E 7
I 7
.Fl v
E 7
option causes hexdump to display all input data.
Without the
D 7
.I -v
E 7
I 7
.Fl v
E 7
option, any number of groups of output lines, which would be
identical to the immediately preceding group of output lines (except
for the input offsets), are replaced with a line comprised of a
single asterisk.
I 4
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
-x
E 9
I 9
D 13
.Tp Fl x
E 13
I 13
.It Fl x
E 13
E 9
I 5
D 10
Two-byte hexadecimal display.
E 10
I 10
.Em Two-byte hexadecimal display.
E 10
D 7
.sp
E 7
I 7
D 9
.Pp
E 9
E 7
E 5
Display the input offset in hexadecimal, followed by eight, space
separated, four column, zero-filled, two-byte quantities of input
data, in hexadecimal, per line.
I 9
D 13
.Tp
E 13
I 13
.El
E 13
E 9
D 6
It is equivalent to specifying the following format strings:
.ti +5
"%07.7_Ax\en"
.ti +5
"%07.7_ax  " 8/2 "%04x " "\en"
E 6
E 4
D 7
.PP
E 7
I 7
.Pp
E 7
For each input file,
D 7
.I hexdump
E 7
I 7
.Nm hexdump
E 7
sequentially copies the input to standard output, transforming the
data according to the format strings specified by the
D 7
.I -e
E 7
I 7
.Fl e
E 7
and
D 7
.I -f
E 7
I 7
.Fl f
E 7
options, in the order that they were specified.
D 7
.PP
E 7
I 7
D 9
.Pp
E 9
I 9
.Ss Formats
E 9
E 7
A format string contains any number of format units, separated by
whitespace.
A format unit contains up to three items: an iteration count, a byte
count, and a format.
D 7
.PP
E 7
I 7
.Pp
E 7
The iteration count is an optional positive integer, which defaults to
one.
Each format is applied iteration count times.
D 7
.PP
E 7
I 7
.Pp
E 7
The byte count is an optional positive integer.
If specified it defines the number of bytes to be interpreted by
each iteration of the format.
D 7
.PP
E 7
I 7
.Pp
E 7
If an iteration count and/or a byte count is specified, a single slash
must be placed after the iteration count and/or before the byte count
to disambiguate them.
Any whitespace before or after the slash is ignored.
D 7
.PP
E 7
I 7
.Pp
E 7
The format is required and must be surrounded by double quote
(" ") marks.
D 10
It is interpreted as a fprintf-style format string, with the
E 10
I 10
It is interpreted as a fprintf-style format string (see
.Xr fprintf 3 ) ,
with the
E 10
following exceptions:
D 7
.TP
.B \(bu
E 7
I 7
D 9
.Tp
.Ar \ (bu
E 7
An asterisk (*) may not be used as a field width or precision.
D 7
.TP
.B \(bu
E 7
I 7
.Tp
.Ar \ (bu
E 7
A byte count or field precision is required for each ``s'' conversion
character.
D 7
.TP
.B \(bu
E 7
I 7
.Tp
.Ar \ (bu
E 9
I 9
D 10
.Ds I
.Tw Ds
.Tp \&Unsupported \&fprintf \&Conversion \&Characters:
E 10
I 10
D 13
.Df I
.Bu
E 13
I 13
.Bl -bullet -offset indent
.It
E 13
An asterisk (*) may not be used as a field width or precision.
D 13
.Bu
E 13
I 13
.It
E 13
A byte count or field precision
.Em is
required for each ``s'' conversion
character (unlike the
.Xr fprintf 3
default which prints the entire string if the precision is unspecified).
D 13
.Bu
E 13
I 13
.It
E 13
E 10
E 9
E 7
D 5
The conversion characters ``h'', ``l'', ``n'', and ``p'' are not
E 5
I 5
D 15
The conversion characters ``h'', ``n'', and ``p'' are not
E 5
supported.
E 15
I 15
The conversion characters ``h'', ``l'', ``n'', ``p'' and ``q'' are
not supported.
E 15
I 9
D 10
.Tp Supported Escape Sequences:
E 10
I 10
D 13
.Bu
E 13
I 13
.It
E 13
E 10
The single character escape sequences
described in the C standard are supported:
D 13
.Ds I
.Cw <alert_character>
.Cl NUL	\e0
.Cl <alert character>	\ea
.Cl <backspace>	\eb
.Cl <form-feed>	\ef
.Cl <newline>	\en
.Cl <carriage return>	\er
.Cl <tab>	\et
.Cl <vertical tab>	\ev
.Cw
.De
D 10
.Tp Taboo:
An asterisk (*) may not be used as a field width or precision.
.Tp ``\&%s'' Anomaly:
A byte count or field precision
.Em is
required for each ``s'' conversion
character (unlike the
.Xr fprintf 3
default which prints the entire string if the precision is unspecified).
E 10
E 9
D 7
.TP
.B \(bu
E 7
I 7
.Tp
D 9
.Ar \ (bu
E 7
The single character escape sequences (\ea, \eb, \ef, \en, \er,
\et, and \ev) described in the C standard are supported.
E 9
I 9
.De
E 13
I 13
.Bd -ragged -offset indent -compact
.Bl -column <alert_character>
.It NUL	\e0
.It <alert character>	\ea
.It <backspace>	\eb
.It <form-feed>	\ef
.It <newline>	\en
.It <carriage return>	\er
.It <tab>	\et
.It <vertical tab>	\ev
.El
.Ed
.El
E 13
E 9
D 7
.PP
E 7
I 7
.Pp
E 7
Hexdump also supports the the following additional conversion strings:
D 7
.PP
.TP
_a[dox]
E 7
I 7
D 9
.Pp
.Tp
_a
E 9
I 9
D 13
.Tw Fl
.Tc Cm \&_a
E 9
D 10
.Op dox
E 10
I 10
.Op Cm dox
E 10
I 9
.Cx
E 13
I 13
.Bl -tag -width Fl
.It Cm \&_a Ns Op Cm dox 
E 13
E 9
E 7
Display the input offset, cumulative across input files, of the
next byte to be displayed.
D 10
The appended characters ``d'', ``o'', and ``x'' specify the display base
E 10
I 10
The appended characters
.Cm d ,
.Cm o ,
and
.Cm x
specify the display base
E 10
as decimal, octal or hexadecimal respectively.
D 7
.TP
_A[dox]
E 7
I 7
D 9
.Tp
_A
E 9
I 9
D 13
.Tc Cm \&_A
E 9
D 10
.Op dox
E 10
I 10
.Op Cm dox
E 10
I 9
.Cx
E 13
I 13
.It Cm \&_A Ns Op Cm dox 
E 13
E 9
E 7
D 10
Identical to the _a conversion string except that it is only performed
E 10
I 10
Identical to the
.Cm \&_a
conversion string except that it is only performed
E 10
once, when all of the input data has been processed.
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
_c
E 9
I 9
D 13
.Tp Cm \&_c
E 13
I 13
.It Cm \&_c
E 13
E 9
Output characters in the default character set.
D 3
Nonprinting characters are displayed in hexadecimal, except for those
representable by standard escape notation, which are displayed
as follows:
E 3
I 3
Nonprinting characters are displayed in three character, zero-padded
D 10
octal, except for those representable by standard escape notation,
D 9
which are displayed as the following two character strings:
E 3
.in +5
.TS
l l.
NUL	\e0
<alert character>	\ea
<backspace>	\eb
<form-feed>	\ef
<newline>	\en
<carriage return>	\er
<tab>	\et
<vertical tab>	\ev
.TE
D 7
.TP
E 7
I 7
.Tp
E 7
_p
E 9
I 9
which are displayed as the following two character strings.
E 10
I 10
octal, except for those representable by standard escape notation
(see above),
which are displayed as two character strings.
E 10
D 13
.Tp Cm _p
E 13
I 13
.It Cm _p
E 13
E 9
Output characters in the default character set.
D 10
Nonprinting characters are displayed as a single ``.''.
E 10
I 10
Nonprinting characters are displayed as a single
.Dq Cm \&. .
E 10
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
_u
E 9
I 9
D 13
.Tp Cm _u
E 13
I 13
.It Cm _u
E 13
E 9
Output US ASCII characters, with the exception that control characters are
displayed using the following, lower-case, names.
Characters greater than 0xff, hexadecimal, are displayed as hexadecimal
strings.
D 5
.in +5
.TS
l l l l l l.
00 nul	001 soh	002 stx	003 etx	004 eot	005 enq
06 ack	007 bel	008 bs	009 ht	00A lf	00B vt
0C ff	00D cr	00E so	00F si	010 dle	011 dc1
12 dc2	013 dc3	014 dc4	015 nak	016 syn	017 etb
18 can	019 em	01A sub	01B esc	01C fs	01D gs
01E rs	01F us	0FF del
.TE
E 5
I 5
D 7
.sp
.RS
E 7
I 7
D 9
.Pp
E 9
I 9
D 13
.Cw \&000_nul \&001_soh \&002_stx \&003_etx \&004_eot
.Cl \&000\ nul\t001\ soh\t002\ stx\t003\ etx\t004\ eot\t005\ enq
.Cl \&006\ ack\t007\ bel\t008\ bs\t009\ ht\t00A\ lf\t00B\ vt
.Cl \&00C\ ff\t00D\ cr\t00E\ so\t00F\ si\t010\ dle\t011\ dc1
.Cl \&012\ dc2\t013\ dc3\t014\ dc4\t015\ nak\t016\ syn\t017\ etb
.Cl \&018\ can\t019\ em\t01A\ sub\t01B\ esc\t01C\ fs\t01D\ gs
.Cl \&01E\ rs\t01F\ us\t0FF\ del
.Cw
E 9
.Tp
E 13
I 13
.Bl -column \&000_nu \&001_so \&002_st \&003_et \&004_eo
.It \&000\ nul\t001\ soh\t002\ stx\t003\ etx\t004\ eot\t005\ enq
.It \&006\ ack\t007\ bel\t008\ bs\t009\ ht\t00A\ lf\t00B\ vt
.It \&00C\ ff\t00D\ cr\t00E\ so\t00F\ si\t010\ dle\t011\ dc1
.It \&012\ dc2\t013\ dc3\t014\ dc4\t015\ nak\t016\ syn\t017\ etb
.It \&018\ can\t019\ em\t01A\ sub\t01B\ esc\t01C\ fs\t01D\ gs
.It \&01E\ rs\t01F\ us\t0FF\ del
.El
.El
E 13
E 7
D 9
000 nul  001 soh  002 stx  003 etx  004 eot  005 enq
006 ack  007 bel  008  bs  009  ht  00A  lf  00B  vt
00C  ff  00D  cr  00E  so  00F  si  010 dle  011 dc1
012 dc2  013 dc3  014 dc4  015 nak  016 syn  017 etb
018 can  019  em  01A sub  01B esc  01C  fs  01D  gs
01E rs   01F  us  0FF del
D 7
.RE
E 5
.PP
E 7
I 7
.Tp Pp
E 9
I 9
.Pp
E 9
E 7
D 5
The default and supported byte counts are as follows:
.in +5
.TS
l l l.
Conversion type	Default (bytes)	Other Supported (bytes)
_
%_c	1
%_p	1
%_u	1
%c	1
%d  (%i)	4	1, 2
%o	4	1, 2
%u	4	1, 2
%x  (%X)	4	1, 2
%e  (%E)	8	4
%f	8	4
%g  (%G)	8	4
.TE
E 5
I 5
The default and supported byte counts for the conversion characters
are as follows:
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
"%_c, %_p, %_u, %c"
E 9
I 9
D 10
.Tw Fl
E 10
I 10
D 13
.Df I
.Tw  %c,_%c,_%c,_%c,_%c,_%c
E 10
.Tp Li \&%_c , %_p , %_u , \&%c
E 13
I 13
.Bl -tag -width  "Xc,_Xc,_Xc,_Xc,_Xc,_Xc" -offset indent
.It Li \&%_c , \&%_p , \&%_u , \&%c
E 13
E 9
One byte counts only.
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
"%d, %i, %o, %u, %X, %x"
E 9
I 9
D 13
.Tc Li \&%d , \&%i , \&%o ,
D 10
.Ws
.Li \&%u , \&%X , \&%x
E 10
I 10
.Li \&\ %u , \&%X , \&%x
E 10
.Cx
E 13
I 13
.It Xo
.Li \&%d , \&%i , \&%o ,
.Li \&%u , \&%X , \&%x 
.Xc
E 13
E 9
D 15
Four byte default, one and two byte counts supported.
E 15
I 15
Four byte default, one, two and four byte counts supported.
E 15
D 7
.TP
E 7
I 7
D 9
.Tp
E 7
"%E, %e, %f, %G, %g"
E 9
I 9
D 13
.Tc Li \&%E , \&%e , \&%f ,
D 10
.Ws
.Li \&%G , \&%g
E 10
I 10
.Li \&\ %G , \&%g
E 10
.Cx
E 13
I 13
.It Xo
.Li \&%E , \&%e , \&%f ,
.Li \&%G , \&%g 
.Xc
E 13
E 9
Eight byte default, four byte counts supported.
I 9
D 13
.Tp
I 10
.De
E 13
I 13
.El
E 13
E 10
E 9
E 5
D 7
.PP
E 7
I 7
.Pp
E 7
The amount of data interpreted by each format string is the sum of the
data required by each format unit, which is the iteration count times the
byte count, or the iteration count times the number of bytes required by
the format if the byte count is not specified.
D 7
.PP
E 7
I 7
.Pp
E 7
The input is manipulated in ``blocks'', where a block is defined as the
largest amount of data specified by any format string.
Format strings interpreting less than an input block's worth of data,
whose last format unit both interprets some number of bytes and does
D 17
not have a specified iteration count, have the the interation count
E 17
I 17
not have a specified iteration count, have the iteration count
E 17
incremented until the entire input block has been processed or there
is not enough data remaining in the block to satisfy the format string.
D 7
.PP
E 7
I 7
.Pp
E 7
If, either as a result of user specification or hexdump modifying
the iteration count as described above, an iteration count is
greater than one, no trailing whitespace characters are output
during the last iteration.
D 7
.PP
E 7
I 7
.Pp
E 7
It is an error to specify a byte count as well as multiple conversion
characters or strings unless all but one of the conversion characters
D 10
or strings is ``_a'' or ``_A''.
E 10
I 10
or strings is
.Cm \&_a
or
.Cm \&_A .
E 10
D 7
.PP
E 7
I 7
.Pp
E 7
If, as a result of the specification of the
D 7
.I -n
E 7
I 7
.Fl n
E 7
option or end-of-file being reached, input data only partially
satisfies a format string, the input block is zero-padded sufficiently
to display all available data (i.e. any format units overlapping the
end of data will display some number of the zero bytes).
D 7
.PP
E 7
I 7
.Pp
E 7
Further output by such format strings is replaced by an equivalent
number of spaces.
An equivalent number of spaces is defined as the number of spaces
D 10
output by an ``s'' conversion character with the same field width
E 10
I 10
output by an
.Cm s
conversion character with the same field width
E 10
and precision as the original conversion character or conversion
D 10
string but with any ``+'', `` '', or ``#'' conversion flag characters
E 10
I 10
string but with any
.Dq Li \&+ ,
.Dq \&\ \& ,
.Dq Li \&#
conversion flag characters
E 10
removed, and referencing a NULL string.
D 2
Trailng spaces and tabs (possibly interspersed with newlines) are
not output; the interspersed newlines are.
E 2
D 7
.PP
E 7
I 7
.Pp
E 7
If no format strings are specified, the default display is equivalent
D 4
to specifying the following format strings:
.ti +5
"%07.7_Ax\en"
.ti +5
"%07.7_ax  " 8/2 "%04x " "\en"
.sp
This displays the input offset in hexadecimal, followed by eight, space
separated, four column, zero-filled, two-byte quantities of input
data, in hexadecimal, per line.
E 4
I 4
to specifying the
D 7
.I -x
E 7
I 7
.Fl x
E 7
option.
E 4
D 7
.PP
.I Hexdump
E 7
I 7
.Pp
D 10
.Nm Hexdump
E 10
I 10
.Nm hexdump
E 10
E 7
exits 0 on success and >0 if an error occurred.
D 7
.SH EXAMPLES
E 7
I 7
.Sh EXAMPLES
E 7
Display the input in perusal format:
D 7
.sp
D 6
.ti +5
E 6
I 6
.RS
E 6
D 4
"%06.6_ao "  12/1 "%3o "
E 4
I 4
"%06.6_ao "  12/1 "%3_u "
E 7
I 7
D 13
.Pp
D 9
.Tp
"%06.6_ao
.Ar 12/1 "%3_u "
E 7
E 4
D 6
.ti +5
E 6
I 6
.br
E 9
I 9
.Ds I
E 13
I 13
.Bd -literal -offset indent
E 13
"%06.6_ao "  12/1 "%3_u "
E 9
E 6
"\et\et" "%_p "
D 6
.ti +5
E 6
I 6
D 9
.br
E 9
E 6
"\en"
I 6
D 7
.RE
.PP
E 7
I 7
D 9
.Tp Pp
E 9
I 9
D 13
.De
E 13
I 13
.Ed
E 13
.Pp
E 9
E 7
Implement the \-x option:
D 7
.sp
.RS
E 7
I 7
D 13
.Pp
D 9
.Tp
E 9
I 9
.Ds I
E 13
I 13
.Bd -literal -offset indent
E 13
E 9
E 7
"%07.7_Ax\en"
D 9
.br
D 7
"%07.7_ax  " 8/2 "%04x " "\en"
.RE

E 7
I 7
"%07.7_ax
.Ar 8/2 "%04x
.Ar "\en"
.Tp
-PTXX FROM- 4.3
-ENV USAGE-
-MANPAGE HISTORY-
/usr/src/usr.bin/hexdump/odsyntax.c:	while ((ch = getopt(argc, argv, "aBbcDdeFfHhIiLlOoPpswvXx")) != EOF)
/usr/src/usr.bin/hexdump/hexsyntax.c:	while ((ch = getopt(argc, argv, "bcde:f:n:os:vx")) != EOF)
/usr/src/usr.bin/hexdump/odsyntax.c:	while ((ch = getopt(argc, argv, "aBbcDdeFfHhIiLlOoPpswvXx")) != EOF)
/usr/src/usr.bin/hexdump/hexsyntax.c:	while ((ch = getopt(argc, argv, "bcde:f:n:os:vx")) != EOF)
E 9
I 9
"%07.7_ax  " 8/2 "%04x " "\en"
D 13
.De
E 13
I 13
.Ed
E 13
I 10
.Sh SEE ALSO
.Xr adb 1
E 10
D 14
.Sh STANDARDS
The
D 10
.Nm Hexdump
E 10
I 10
.Nm hexdump
E 10
D 13
utility is expected to be POSIX 1003.2 compatible.
E 13
I 13
utility is expected to be
.St -p1003.2
compatible.
E 14
E 13
E 9
E 7
E 6
E 1
