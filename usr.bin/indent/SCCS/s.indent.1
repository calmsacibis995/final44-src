h32971
s 00002/00002/00424
d D 8.1 93/07/01 14:03:30 bostic 16 15
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00008/00008/00418
d D 6.12 93/07/01 14:02:12 mckusick 15 13
c typesetting nits
e
s 00002/00002/00424
d R 8.1 93/06/06 14:51:49 bostic 14 13
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00000/00425
d D 6.11 91/07/24 22:16:45 cael 13 12
c forgot .Os
e
s 00117/00196/00308
d D 6.10 91/07/24 22:14:40 cael 12 11
c version three mdoc
e
s 00002/00000/00502
d D 6.9 91/03/14 00:12:18 cael 11 9
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00001/00000/00502
d R 6.9 91/03/13 20:30:39 cael 10 9
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00002/00002/00500
d D 6.8 90/07/24 22:46:21 cael 9 8
c .Xr botch fix
e
s 00377/00288/00125
d D 6.7 90/06/11 05:56:26 cael 8 7
c converted man page
e
s 00050/00045/00363
d D 6.6 89/03/05 14:36:59 bostic 7 6
c cleanup from David MacKenzie (mackenzi@thor.stolaf.edu)
e
s 00081/00091/00328
d D 6.5 88/09/15 12:18:53 bostic 6 5
c new version from James Gosling <jag@Sun.COM>
e
s 00016/00009/00403
d D 6.4 85/09/10 14:30:28 mckusick 5 4
c further update by Chris Torek
e
s 00060/00051/00352
d D 6.3 85/09/08 15:43:56 mckusick 4 3
c update on Sun stuff by Chris Torek
e
s 00352/00200/00051
d D 6.2 85/08/28 13:52:06 mckusick 3 2
c kernel normal form (from sun!shannon)
e
s 00001/00001/00250
d D 6.1 85/04/29 21:10:22 mckusick 2 1
c 4.3BSD beta release manual page
e
s 00251/00000/00000
d D 5.1 85/04/29 21:10:07 mckusick 1 0
c manual page first distributed with 4.2BSD
e
u
U
t
T
I 8
D 16
.\" Copyright (c) 1980, 1990 The Regents of the University of California.
E 8
I 1
D 6
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
E 6
I 6
.\" Copyright (c) 1985 Sun Microsystems, Inc.
E 16
I 16
.\" Copyright (c) 1980, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 16
D 8
.\" Copyright (c) 1980 The Regents of the University of California.
E 8
.\" Copyright (c) 1976 Board of Trustees of the University of Illinois.
.\" All rights reserved.
.\"
D 8
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley, the University of Illinois,
.\" Urbana, and Sun Microsystems, Inc.  The name of either University
.\" or Sun Microsystems may not be used to endorse or promote products
.\" derived from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\" 
E 6
.\"	%W% (Berkeley) %G%
E 8
I 8
D 12
.\" %sccs.include.redist.man%
E 12
I 12
.\" %sccs.include.redist.roff%
E 12
E 8
.\"
D 2
.TH INDENT 1 "22 December 1977"
E 2
I 2
D 6
.TH INDENT 1 "%Q%"
E 2
.UC 5
E 6
I 6
D 8

.TH INDENT 1 "%Q%
E 6
.SH NAME
indent \- indent and format C program source
.SH SYNOPSIS
D 3
.B indent
.I input
[
.I output
] [
.I flags
]
E 3
I 3
.in +\w'\fBindent \fR'u
.ti -\w'\fBindent \fR'u
\fBindent \fR [ \fIinput-file\fR [ \fIoutput-file\fR ] ]
[\ \fB\-bad\fR\ |\ \fB\-nbad\fR\ ]
[\ \fB\-bap\fR\ |\ \fB\-nbap\fR\ ]
[\ \fB\-bbb\fR\ |\ \fB\-nbbb\fR\ ]
[\ \fB\-bc\fR\ |\ \fB\-nbc\fR\ ]
D 5
[\ \fB\-bl\fR\ ]
[\ \fB\-br\fR\ ]
E 5
I 5
D 6
[\ \fB\-bl\fR\ |\ \fB\-br\fR\ ]
E 6
I 6
[\ \fB\-bl\fR\ ]
[\ \fB\-br\fR\ ]
E 6
E 5
[\ \fB\-c\fIn\fR\ ]
[\ \fB\-cd\fIn\fR\ ]
[\ \fB\-cdb\fR\ |\ \fB\-ncdb\fR\ ]
[\ \fB\-ce\fR\ |\ \fB\-nce\fR\ ]
[\ \fB\-ci\fIn\fR\ ]
[\ \fB\-cli\fIn\fR\ ]
[\ \fB\-d\fIn\fR\ ]
[\ \fB\-di\fIn\fR\ ]
I 5
D 6
[\ \fB\-dj\fR\ |\ \fB\-ndj\fR\ ]
[\ \fB\-ei\fR\ |\ \fB\-nei\fR\ ]
E 6
E 5
[\ \fB\-fc1\fR\ |\ \fB\-nfc1\fR\ ]
[\ \fB\-i\fIn\fR\ ]
[\ \fB\-ip\fR\ |\ \fB\-nip\fR\ ]
[\ \fB\-l\fIn\fR\ ]
[\ \fB\-lc\fIn\fR\ ]
[\ \fB\-lp\fR\ |\ \fB\-nlp\fR\ ]
D 5
[\ \fB\-pcs\fR\ |\ \fB\-npcs\fR\ ]
E 5
D 6
[\ \fB\-npro\fR\ ]
E 6
I 5
D 7
[\ \fB\-pcs\fR\ |\ \fB\-npcs\fR\ ]
E 7
D 6
[\ \fB\-ps\fR\ |\ \fB\-nps\fR\ ]
E 6
I 6
[\ \fB\-npro\fR\ ]
I 7
[\ \fB\-pcs\fR\ |\ \fB\-npcs\fR\ ]
E 7
E 6
E 5
[\ \fB\-psl\fR\ |\ \fB\-npsl\fR\ ]
[\ \fB\-sc\fR\ |\ \fB\-nsc\fR\ ]
[\ \fB\-sob\fR\ |\ \fB\-nsob\fR\ ]
[\ \fB\-st\fR\ ]
[\ \fB\-troff\fR\ ]
[\ \fB\-v\fR\ |\ \fB\-nv\fR\ ]
E 3
.SH DESCRIPTION
I 3
D 6
.IX  indent  ""  "\fLindent\fP \(em format C source"
.IX  "programming tools"  "indent"  ""  "\fLindent\fP \(em format C source"
.IX  "languages"  "indent"  ""  "\fLindent\fP \(em format C source"
.IX  "C programming language"  "indent"  ""  "\fLindent\fP \(em format C source"
.IX  "pretty printer"  "indent"  ""  "\fLindent\fP \(em format C source"
.IX  "format C programs" "" "format C programs \(em \fLindent\fP"
.IX  "code formatter"  "indent"  ""  "\fLindent\fP \(em format C source"
.IX  "cb"  "indent"  "\fLcb\fP"  "try \fLindent\fP \(em format C source"
E 6
E 3
.I Indent
D 3
is intended primarily as a C program formatter.
Specifically,
.I indent
will:
.IP \(bu
indent code lines
.IP \(bu
align comments
.IP \(bu
insert spaces around operators where necessary
.IP \(bu
break up declaration lists as in ``int a,b,c;''.
.PP
.I Indent
will not break up long statements to make them fit within the
maximum line length, but it will flag lines that are too long.  Lines
will be broken so that each statement starts a new line, and braces
will appear alone on a line.  (See the \-br option to inhibit this.)
Also, an attempt is made to line up identifiers in declarations.
.PP
The 
.I flags
which can be specified follow. They
may appear before or after the file names.
If the
.I output
file is omitted, the formatted file will be written
back into
.I input
and a ``backup'' copy of
.I input
will be written in the current directory.
E 3
I 3
is a \fBC\fR program formatter.  It reformats the \fBC\fR program in the
\fIinput-file\fR according to the switches.  The switches which can be
E 8
I 8
D 12
.\"     %W% (Berkeley) %G%
E 12
I 12
.\"	%W% (Berkeley) %G%
E 12
.\"
I 11
D 12
.Vx
.Vx
E 12
E 11
.Dd %Q%
.Dt INDENT 1
I 13
.Os BSD 4.2
E 13
.Sh NAME
.Nm indent
.Nd indent and format C program source
.Sh SYNOPSIS
.Nm indent
.Op Ar input-file Op Ar output-file
D 12
.Cx \&[
.Fl bad
.Cx \&\ |\ \&
.Fl nbad
.Cx \&]
.Cx
.Cx \&[
.Fl bap
.Cx \&\ |\ \&
.Fl nbap
.Cx \&]
.Cx
.Cx \&[
.Fl bbb
.Cx \&\ |\ \&
.Fl nbbb
.Cx \&]
.Cx
.Cx \&[
.Fl bc
.Cx \&\ |\ \&
.Fl nbc
.Cx \&]
.Cx
.Op Fl bl
.Op Fl br
.Oo
.Op Fl c Ar n
.Op Fl cd Ar n
.Oo
.Cx \&[
.Fl cdb
.Cx \&\ |\ \&
.Fl ncdb
.Cx \&]
.Cx
.Cx \&[
.Fl ce
.Cx \&\ |\ \&
.Fl nce
.Cx \&]
.Cx
.Oo
.Op Fl ci Ar n
.Op Fl cli Ar n
.Op Fl d Ar n
.Op Fl di Ar n
.Oo
.Cx \&[
.Fl fc1
.Cx \&\ |\ \&
.Fl nfc1
.Cx \&]
.Cx
.Oo
.Op Fl i Ar n
.Oo
.Cx \&[
.Fl ip
.Cx \&\ |\ \&
.Fl nip
.Cx \&]
.Cx
.Oo
.Op Fl l Ar n
.Op Fl lc Ar n
.Oo
.Cx \&[
.Fl lp
.Cx \&\ |\ \&
.Fl nlp
.Cx \&]
.Cx
E 12
I 12
.Op Fl bad | Fl nbad
.Op Fl bap | Fl nbap
.Bk -words
.Op Fl bbb | Fl nbbb
.Ek
.Op Fl \&bc | Fl nbc
.Op Fl \&bl
.Op Fl \&br
.Op Fl c Ns Ar n
.Op Fl \&cd Ns Ar n
.Bk -words
.Op Fl cdb | Fl ncdb
.Ek
.Op Fl \&ce | Fl nce
.Op Fl \&ci Ns Ar n
.Op Fl cli Ns Ar n
.Op Fl d Ns Ar n
.Op Fl \&di Ns Ar n
.Bk -words
.Op Fl fc1 | Fl nfc1
.Ek
.Op Fl i Ns Ar n
.Op Fl \&ip | Fl nip
.Op Fl l Ns Ar n
.Op Fl \&lc Ns Ar n
.Op Fl \&lp | Fl nlp
E 12
.Op Fl npro
D 12
.Cx \&[
.Fl pcs
.Cx \&\ |\ \&
.Fl npcs
.Cx \&]
.Cx
.Cx \&[
.Fl psl
.Cx \&\ |\ \&
.Fl npsl
.Cx \&]
.Cx
.Cx \&[
.Fl sc
.Cx \&\ |\ \&
.Fl nsc
.Cx \&]
.Cx
.Cx \&[
.Fl sob
.Cx \&\ |\ \&
.Fl nsob
.Cx \&]
.Cx
.Op Fl st
E 12
I 12
.Op Fl pcs | Fl npcs
.Op Fl psl | Fl npsl
.Op Fl \&sc | Fl nsc
.Bk -words
.Op Fl sob | Fl nsob
.Ek
.Op Fl \&st
E 12
.Op Fl troff
D 12
.Cx \&[
.Fl v
.Cx \&\ |\ \&
.Fl nv
.Cx \&]
.Cx
E 12
I 12
.Op Fl v | Fl \&nv
E 12
.Sh DESCRIPTION
.Nm Indent
is a
.Ar C
program formatter.  It reformats the
.Ar C
program in the
.Ar input-file
according to the switches.  The switches which can be
E 8
specified are described below. They may appear before or after the file
names.
D 8
.LP
\fBNOTE\fP: If you only specify an \fIinput-file\fR, the formatting is
E 8
I 8
.Pp
.Sy NOTE  :
If you only specify an
.Ar input-file  ,
the formatting is
E 8
done `in-place', that is, the formatted file is written back into
D 8
.I input-file
E 8
I 8
.Ar input-file
E 8
and a backup copy of
D 8
.I input-file
E 8
I 8
.Ar input-file
E 8
is written in the current directory.  If
D 8
.I input-file
is named `/blah/blah/file', the backup file is named
.RI file .BAK.
.LP
E 8
I 8
.Ar input-file
is named
.Sq Pa /blah/blah/file ,
the backup file is named
.Pa file.BAK .
.Pp
E 8
E 3
If
D 3
.I input
is named ``/blah/blah/file'',
the backup file will be
named ``.Bfile''.
If
.I output
E 3
I 3
D 8
.I output-file
E 8
I 8
.Ar output-file
E 8
E 3
is specified,
D 8
.I indent
E 8
I 8
.Nm indent
E 8
checks to make sure it is different from
D 3
.IR input .
.PP
The following flags may be used to control the formatting
style imposed by
E 3
I 3
D 8
.IR input-file .
.SH OPTIONS
.LP
E 8
I 8
.Ar input-file  .
.Pp
E 8
The options listed below control the formatting style imposed by
E 3
D 8
.IR indent .
D 3
.TP 10
.BI \-l nnn
Maximum length of an output line.  The default is 75.
.TP 10
.BI \-c nnn
The column in which comments will start.  The default is 33.
.TP 10
.BI \-cd nnn
The column in which comments on declarations will start.  The default
is for these comments to start in the same column as other comments.
.TP 10
.BI \-i nnn
The number of spaces for one indentation level.  The default is 4.
.TP 10
.BR \-dj , \-ndj
.B \-dj
will cause declarations to be left justified. 
.B \-ndj
will cause
them to be indented the same as code.  The default is
.BR \-ndj .
.TP 10
.BR \-v , \-nv
.B \-v turns on ``verbose'' mode,
.B \-nv
turns it off.  When in verbose mode,
.I indent
will report when it 
splits one line of input into two or more lines of output,
and it will give some size statistics at completion. 
The default is
.BR \-nv .
.TP 10
E 3
I 3
.TP 15
D 5
.BR \-bap , \-nbap
If
.B \-bap
is specified, a blank line is forced after every procedure body.  Default:
.B \-nbap.
.TP 15
E 5
D 6
.BR \-bad , \-nbad
If
.B \-bad
is specified, a blank line is forced after every block of
declarations.  Default:  
D 4
.B \-nbad.
E 4
I 4
.BR \-nbad .
E 4
.TP 15
E 6
I 5
D 7
.BR \-bap , \-nbap
If
.B \-bap
is specified, a blank line is forced after every procedure body.  Default:
.B \-nbap.
.TP 15
E 7
I 6
.BR \-bad , \-nbad
E 8
I 8
.Nm indent  .
D 12
.Tw Op
.Tp Fl bad , nbad
E 12
I 12
.Bl -tag -width Op
.It Fl bad , nbad
E 12
E 8
If
D 8
.B \-bad
E 8
I 8
.Fl bad
E 8
is specified, a blank line is forced after every block of
D 8
declarations.  Default:  
D 7
.B \-nbad.
E 7
I 7
.BR \-nbad .
E 7
.TP 15
I 7
.BR \-bap , \-nbap
E 8
I 8
declarations.  Default:
.Fl nbad  .
D 12
.Tp Fl bap , nbap
E 12
I 12
.It Fl bap , nbap
E 12
E 8
If
D 8
.B \-bap
E 8
I 8
.Fl bap
E 8
is specified, a blank line is forced after every procedure body.  Default:
D 8
.B \-nbap.
.TP 15
E 7
E 6
E 5
.BR \-bbb , \-nbbb
E 8
I 8
.Fl nbap .
D 12
.Tp Fl bbb , nbbb
E 12
I 12
.It Fl bbb , nbbb
E 12
E 8
If
D 8
.B \-bbb
E 8
I 8
.Fl bbb
E 8
is specified, a blank line is forced before every block comment.  Default:
D 8
.B \-nbbb.
.TP 15
E 3
.BR \-bc , \-nbc
E 8
I 8
.Fl nbbb .
D 12
.Tp Fl bc , nbc
E 12
I 12
.It Fl \&bc , nbc
E 12
E 8
If
D 8
.B \-bc
D 3
is specified, then a newline will be forced after each
comma in a declaration. 
E 3
I 3
is specified, then a newline is forced after each comma in a declaration. 
E 3
.B \-nbc
E 8
I 8
D 12
.Fl bc
E 12
I 12
.Fl \&bc
E 12
is specified, then a newline is forced after each comma in a declaration.
.Fl nbc
E 8
D 3
will turn off this option.  The default is
E 3
I 3
turns off this option.  The default is
E 3
D 4
.BR \-bc .
E 4
I 4
D 6
.BR \-nbc .
E 6
I 6
D 8
.BR \-bc .
E 6
E 4
D 3
.TP 10
.BI \-d nnn
This option controls the placement of comments
which are not to the right of code.
Specifying
.B \-d2
means that such comments will be placed two
indentation levels to the left of code.
The default
.B \-d0
lines up these comments with the code.
See the section on comment indentation below.
.TP 10
E 3
I 3
.TP 15
E 3
.BR \-br , \-bl
E 8
I 8
D 12
.Fl bc  .
.Tp Fl br , bl
E 12
I 12
.Fl \&bc  .
.It Fl \&br , \&bl
E 12
E 8
Specifying
D 8
.B \-bl
E 8
I 8
D 12
.Fl bl
E 12
I 12
.Fl \&bl
E 12
E 8
D 3
will cause
complex statements to be lined up like this:
E 3
I 3
lines up compound statements like this:
E 3
.ne 4
D 8
.nf
I 3
.ft L
E 3
    if (...)
    {
        code
    }
I 3
.ft R
E 3
.fi
E 8
I 8
D 12
.Ds I
E 12
I 12
.Bd -literal -offset indent
E 12
if (...)
{
  code
}
D 12
.De
E 12
I 12
.Ed
.Pp
E 12
E 8
Specifying
D 8
.B \-br
E 8
I 8
D 12
.Fl br
E 12
I 12
.Fl \&br
E 12
E 8
D 3
(the default) will make them look like this:
E 3
I 3
(the default) makes them look like this:
E 3
.ne 3
D 8
.nf
I 3
.ft L
E 3
    if (...) {
        code
    }
I 3
.ft R
E 3
.fi
D 3
.PP
You may set up your own ``profile'' of defaults to
.I indent
by creating the file ``.indent.pro'' in your login directory
and including whatever switches you like.
If
.I indent
is run and a profile file exists, then it is read
to set up the program's defaults.
Switches on the command line, though,
will always override profile switches.
The profile
file must be a single line of not more than 127 characters.
The switches should be separated on the line by spaces or tabs.
.PP
.B Multi-line expressions
.PP
.I Indent
will not break up complicated expressions that extend over multiple
lines, but it will usually correctly indent such expressions which have
already been broken up.  Such an expression might end up looking like this:
.ne 10
.in +4
E 3
I 3
.LP
.TP 15
.BI \-c n
The column in which comments on code start.  The default is 33.  
.TP 15
.BI \-cd n
E 8
I 8
D 12
.Ds I
E 12
I 12
.Bd -literal -offset indent
E 12
if (...) {
  code
}
D 12
.De
E 12
I 12
.Ed
E 12
.Pp
D 12
.Tp Fl c n
E 12
I 12
.It Fl c n
E 12
The column in which comments on code start.  The default is 33.
D 12
.Tp Fl cd n
E 12
I 12
.It Fl cd n
E 12
E 8
The column in which comments on declarations start.  The default
is for these comments to start in the same column as those on code.
D 8
.TP 15
.BI \-cdb , \-ncdb
E 8
I 8
D 12
.Tp Fl cdb , ncdb
E 12
I 12
.It Fl cdb , ncdb
E 12
E 8
Enables (disables) the placement of comment delimiters on blank lines.  With
this option enabled, comments look like this:
E 3
D 8
.nf
D 3
x =
        (
            (Arbitrary parenthesized expression)
            +
            (
                (Parenthesized expression)
                *
                (Parenthesized expression)
            )
        );

E 3
I 3
.ft L
E 8
I 8
D 12
.Ds I
E 12
I 12
.Bd -literal -offset indent
E 12
E 8
.ne 3
	/*
D 8
	 * this is a comment
	 */
.ft R
E 3
.fi
E 8
I 8
	* this is a comment
	*/
D 12
.De
E 12
I 12
.Ed
.Pp
E 12
E 8
D 3
.PP
E 3
I 3
Rather than like this:
D 8
.nf
.ft L
E 8
I 8
D 12
.Ds I
E 12
I 12
.Bd -literal -offset indent
E 12
E 8
	/* this is a comment */
D 8
.ft R
.fi
E 8
I 8
D 12
.De
E 12
I 12
.Ed
.Pp
E 12
E 8
D 4
This only affects block comments, not comments to the right of code. The default is
.B \-cdb .
E 4
I 4
D 6
This only affects block comments, not comments to the right of
code. The default is
.BR \-cdb .
E 6
I 6
D 7
This only affects block comments, not comments to the right of code. The default is
.B \-cdb .
E 7
I 7
This only affects block comments, not comments to the right of
code.  The default is
D 8
.BR \-cdb .
E 7
E 6
E 4
.TP 15
.BI \-ce , \-nce
E 8
I 8
.Fl cdb  .
D 12
.Tp Fl ce , nce
E 12
I 12
.It Fl ce , nce
E 12
E 8
D 4
Enables (disables) forcing `else's to cuddle up to the immediatly preceeding
E 4
I 4
D 6
Enables (disables) forcing `else's to cuddle up to the immediately preceding
E 6
I 6
D 7
Enables (disables) forcing `else's to cuddle up to the immediatly preceeding
E 7
I 7
Enables (disables) forcing `else's to cuddle up to the immediately preceding
E 7
E 6
E 4
`}'.  The default is
D 4
.B \-ce .
E 4
I 4
D 6
.BR \-ce .
E 6
I 6
D 7
.B \-ce .
E 7
I 7
D 8
.BR \-ce .
E 7
E 6
E 4
.TP 15
.BI \-ci n
Sets the continuation indent to be \fIn\fR.  Continuation
E 8
I 8
D 12
.Fl ce  .
.Tp Cx Fl ci
.Ar n
.Cx
E 12
I 12
.Fl \&ce  .
.It Fl \&ci Ns Ar n 
E 12
Sets the continuation indent to be
.Ar n  .
Continuation
E 8
lines will be indented that far from the beginning of the first line of the
statement.  Parenthesized expressions have extra indentation added to
D 8
indicate the nesting, unless \fB\-lp\fR is in effect.
\fB\-ci\fR defaults to the same value as \fB\-i\fR.
.TP 15
.BI \-cli n
E 8
I 8
indicate the nesting, unless
D 12
.Fl lp
E 12
I 12
.Fl \&lp
E 12
is in effect.
D 12
.Fl ci
E 12
I 12
.Fl \&ci
E 12
defaults to the same value as
.Fl i  .
D 12
.Tp Cx Fl cli
.Ar n
.Cx
E 12
I 12
.It Fl cli Ns Ar n 
E 12
E 8
Causes case labels to be indented
D 8
.I n
tab stops to the right of the containing \fBswitch\fR statement.
D 4
\fB-cli0.5\fR causes case labels to be indented half a tab stop.  The
E 4
I 4
D 6
\fB\-cli0.5\fR causes case labels to be indented half a tab stop.  The
E 6
I 6
D 7
\fB-cli0.5\fR causes case labels to be indented half a tab stop.  The
E 7
I 7
\fB\-cli0.5\fR causes case labels to be indented half a tab stop.  The
E 8
I 8
.Ar n
tab stops to the right of the containing
.Ic switch
statement.
.Fl cli0 .5
causes case labels to be indented half a tab stop.  The
E 8
E 7
E 6
E 4
default is
D 4
.B \-cli0 .
E 4
I 4
D 6
.BR \-cli0 .
(This is the only option that takes a fractional argument.)
E 6
I 6
D 7
.B \-cli0 .
E 7
I 7
D 8
.BR \-cli0 .
E 7
E 6
E 4
.TP 15
.BI \-d n
E 8
I 8
.Fl cli0  .
D 12
.Tp Cx Fl d
.Ar n
.Cx
E 12
I 12
.It Fl d Ns Ar n 
E 12
E 8
Controls the placement of comments which are not to the
D 4
right of code.  The default
E 4
I 4
D 6
right of code.  Specifying
E 6
I 6
right of code.  The default
E 6
E 4
D 8
.B \-d1
E 8
I 8
D 12
.Fl d1
E 12
I 12
.Fl \&d\&1
E 12
E 8
means that such comments are placed one indentation level to the
D 4
left of code.  Specifying
E 4
I 4
D 6
left of code.  The default
E 6
I 6
left of code.  Specifying
E 6
E 4
D 8
.B \-d0
E 8
I 8
D 12
.Fl d0
E 12
I 12
.Fl \&d\&0
E 12
E 8
lines up these comments with the code.  See the section on comment
indentation below.
D 8
.TP 15
.BI \-di n
E 8
I 8
D 12
.Tp Cx Fl di
.Ar n
.Cx
E 12
I 12
.It Fl \&di Ns Ar n 
E 12
E 8
Specifies the indentation, in character positions, from a declaration keyword
to the following identifier.  The default is
D 4
.B \-di16 .
.if 0 \{.TP 15
E 4
I 4
D 6
.BR \-di16 .
.TP 15
E 6
I 6
D 7
.B \-di16 .
E 7
I 7
D 8
.BR \-di16 .
E 7
.if 0 \{.TP 15
E 6
E 4
.BR \-dj , \-ndj
.B \-dj
E 8
I 8
.Fl di16  .
D 12
.Tp Fl dj , ndj
.Fl dj
E 12
I 12
.It Fl dj , ndj
.Fl \&dj
E 12
E 8
left justifies declarations.
D 8
.B \-ndj
E 8
I 8
.Fl ndj
E 8
indents declarations the same as code.  The default is
D 8
.BR \-ndj .
.TP 15
.BI \-ei , \-nei
E 8
I 8
.Fl ndj  .
D 12
.Tp Fl ei , nei
E 12
I 12
.It Fl \&ei , nei
E 12
E 8
Enables (disables) special
D 8
.B else-if
D 4
processing.  If it's enabled,
E 4
I 4
D 6
processing.  If enabled,
E 6
I 6
processing.  If it's enabled,
E 6
E 4
.BR if "s"
following
.BR else "s"
E 8
I 8
.Ic else-if
processing.  If it's enabled, an
.Ic if
following an
.Ic else
E 8
D 4
will have the same indendation as the preceeding
E 4
I 4
D 6
will have the same indentation as the preceding
E 6
I 6
D 7
will have the same indendation as the preceeding
E 7
I 7
will have the same indentation as the preceding
E 7
E 6
E 4
D 8
.B if
D 4
statement.\}
E 4
I 4
D 6
statement.  The default is
.BR \-ei .
E 6
I 6
statement.\}
E 6
E 4
.TP 15
.BI \-fc1 , \-nfc1
E 8
I 8
D 12
.Ic if
E 12
I 12
.Ic \&if
E 12
statement.
D 12
.Tp Fl fc1 , nfc1
E 12
I 12
.It Fl fc1 , nfc1
E 12
E 8
Enables (disables) the formatting of comments that start in column 1.
Often, comments whose leading `/' is in column 1 have been carefully
D 8
hand formatted by the programmer.  In such cases, \fB\-nfc1\fR should be
used.  The default is \fB\-fc1\fR.
.TP 15
.BI \-i n
E 8
I 8
hand formatted by the programmer.  In such cases,
.Fl nfc1
should be
used.  The default is
.Fl fc1  .
D 12
.Tp Cx Fl i
.Ar n
.Cx
E 12
I 12
.It Fl i Ns Ar n 
E 12
E 8
D 4
The number of spaces for one indentation level.  The default is 4.
E 4
I 4
D 6
The number of spaces for one indentation level.  The default is 8.
E 6
I 6
The number of spaces for one indentation level.  The default is 4.
E 6
E 4
D 8
.TP 15
.BI \-ip , \-nip
E 8
I 8
D 12
.Tp Fl ip , nip
E 12
I 12
.It Fl \&ip , nip
E 12
E 8
Enables (disables) the indentation of parameter declarations from the left
margin.  The default is
D 4
.B \-ip .
E 4
I 4
D 6
.BR \-ip .
E 6
I 6
D 7
.B \-ip .
E 7
I 7
D 8
.BR \-ip .
E 7
E 6
E 4
.TP 15
.BI \-l n
E 8
I 8
D 12
.Fl ip  .
.Tp Cx Fl l
.Ar n
.Cx
E 12
I 12
.Fl \&ip  .
.It Fl l Ns Ar n 
E 12
E 8
D 4
Maximum length of an output line.  The default is 75.
E 4
I 4
D 6
Maximum length of an output line.  The default is 78.
E 6
I 6
Maximum length of an output line.  The default is 75.
E 6
E 4
D 8
.TP 15
I 6
D 7
.B \-npro
Causes the profile files, `./.indent.pro' and `~/.indent.pro', to be ignored.
.TP 15
E 7
E 6
D 4
.B \-npro
Causes the profile files, `./.indent.pro' and `~/.indent.pro', to be ignored.
.TP 15
E 4
.BI \-lp , \-nlp
E 8
I 8
D 12
.Tp Fl lp , nlp
E 12
I 12
.It Fl \&lp , nlp
E 12
E 8
Lines up code surrounded by parenthesis in continuation lines.  If a line
has a left paren which is not closed on that line, then continuation lines
will be lined up to start at the character position just after the left
D 4
paren.  For example, here is how a piece of continued code looks with -nlp
in effect:
E 4
I 4
D 6
paren.  For example, here is how a piece of continued code looks with
\fB\-nlp\fR in effect:
E 6
I 6
D 7
paren.  For example, here is how a piece of continued code looks with -nlp
in effect:
E 7
I 7
paren.  For example, here is how a piece of continued code looks with
D 8
\fB\-nlp\fR in effect:
E 8
I 8
.Fl nlp
in effect:
E 8
E 7
E 6
E 4
.ne 2
D 8
.nf
.ft L
    p1 = first_procedure(second_procedure(p2, p3),
        third_procedure(p4, p5));
.ft R
.fi
E 8
I 8
D 12
.Ds I
E 12
I 12
.Bd -literal -offset indent
E 12
D 15
.Li p1 = first_procedure(second_procedure(p2, p3),
.Li \ \ third_procedure(p4,p5));
E 15
I 15
p1 = first_procedure(second_procedure(p2, p3),
\ \ third_procedure(p4,p5));
E 15
D 12
.De
E 12
I 12
.Ed
.Pp
E 12
E 8
.ne 5
D 4
With \fB-lp\fR in effect (the default) the code looks somewhat clearer:
E 4
I 4
D 6
With \fB\-lp\fR in effect (the default) the code looks somewhat clearer:
E 6
I 6
D 7
With \fB-lp\fR in effect (the default) the code looks somewhat clearer:
E 7
I 7
D 8
With \fB\-lp\fR in effect (the default) the code looks somewhat clearer:
E 7
E 6
E 4
.nf
.ft L
I 7
.ta \w'    p1 = first_procedure('u
E 7
I 4
D 6
.ta \w'    p1 = first_procedure('u
E 6
E 4
    p1 = first_procedure(second_procedure(p2, p3),
D 4
                         third_procedure(p4, p5));
E 4
I 4
D 6
	third_procedure(p4, p5));
E 6
I 6
D 7
                         third_procedure(p4, p5));
E 7
I 7
	third_procedure(p4, p5));
E 7
E 6
E 4
.ft R
.fi
E 8
I 8
With
.Fl lp
in effect (the default) the code looks somewhat clearer:
D 12
.Ds I
E 12
I 12
.Bd -literal -offset indent
E 12
D 15
.Li p1\ =\ first_procedure(second_procedure(p2,\ p3),
.Li \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ third_procedure(p4,p5));
E 15
I 15
p1\ =\ first_procedure(second_procedure(p2,\ p3),
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ third_procedure(p4,p5));
E 15
D 12
.De
E 12
I 12
.Ed
.Pp
E 12
E 8
.ne 5
D 4
Inserting a couple more newlines we get:
E 4
I 4
D 6
Inserting two more newlines we get:
E 6
I 6
D 7
Inserting a couple more newlines we get:
E 7
I 7
Inserting two more newlines we get:
E 7
E 6
E 4
D 8
.nf
.ft L
I 7
.ta \w'    p1 = first_procedure('u +\w'second_procedure('u
E 7
I 4
D 6
.ta \w'    p1 = first_procedure('u +\w'second_procedure('u
E 6
E 4
    p1 = first_procedure(second_procedure(p2,
D 4
                                          p3),
                         third_procedure(p4,
                                         p5));
E 4
I 4
D 6
		p3),
.ta \w'    p1 = first_procedure('u +\w'third_procedure('u
	third_procedure(p4,
		p5));
E 6
I 6
D 7
                                          p3),
                         third_procedure(p4,
                                         p5));
E 7
I 7
		p3),
.ta \w'    p1 = first_procedure('u +\w'third_procedure('u
	third_procedure(p4,
		p5));
E 7
E 6
E 4
.ft R
.fi
.TP 15
D 4
.B \-pcs , \-npcs
If true (\fB-pcs\fR) all procedure calls will have a space inserted between
the name and the '('.  The default is 
.B \-npcs
E 4
I 4
D 6
.B \-npro
Causes the profile files, `./.indent.pro' and `~/.indent.pro', to be ignored.
E 6
I 6
D 7
.B \-pcs , \-npcs
If true (\fB-pcs\fR) all procedure calls will have a space inserted between
the name and the '('.  The default is 
.B \-npcs
E 7
I 7
.B \-npro
Causes the profile files, `./.indent.pro' and `~/.indent.pro', to be ignored.
E 7
E 6
E 4
.TP 15
D 4
.B \-psl , \-npsl
If true (\fB-psl\fR) the names of procedures being defined are placed in
E 4
I 4
D 6
.BR \-pcs , \-npcs
If true (\fB\-pcs\fR) all procedure calls will have a space inserted between
the name and the `('.  The default is 
.BR \-npcs .
I 5
.TP 15
.BR \-ps , \-nps
If true (\fB\-ps\fR) the pointer following operator `\->' will be
surrounded by spaces on either side.  The default is
.BR \-nps .
E 5
.TP 15
.BR \-psl , \-npsl
If true (\fB\-psl\fR) the names of procedures being defined are placed in
E 6
I 6
D 7
.B \-psl , \-npsl
If true (\fB-psl\fR) the names of procedures being defined are placed in
E 7
I 7
.BR \-pcs , \-npcs
If true (\fB\-pcs\fR) all procedure calls will have a space inserted between
the name and the `('.  The default is 
.BR \-npcs .
.TP 15
.BR \-psl , \-npsl
If true (\fB\-psl\fR) the names of procedures being defined are placed in
E 8
I 8
D 12
.Ds I
E 12
I 12
.Bd -literal -offset indent
E 12
D 15
.Li p1\ =\ first_procedure(second_procedure(p2,
.Li \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p3),
.Li \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ third_procedure(p4
.Li \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p5));
E 15
I 15
p1\ =\ first_procedure(second_procedure(p2,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p3),
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ third_procedure(p4
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p5));
E 15
D 12
.De
.Pp
.Tp Fl npro
E 12
I 12
.Ed
.It Fl npro
E 12
Causes the profile files,
.Sq Pa ./.indent.pro
and
.Sq Pa ~/.indent.pro ,
to be ignored.
D 12
.Tp Fl pcs , npcs
E 12
I 12
.It Fl pcs , npcs
E 12
If true
.Pq Fl pcs
all procedure calls will have a space inserted between
the name and the `('.  The default is
.Fl npcs  .
D 12
.Tp Fl psl , npsl
E 12
I 12
.It Fl psl , npsl
E 12
If true
.Pq Fl psl
the names of procedures being defined are placed in
E 8
E 7
E 6
E 4
column 1 \- their types, if any, will be left on the previous lines.  The
D 8
default is 
D 4
.B -psl
E 4
I 4
D 6
.BR \-psl .
E 6
I 6
D 7
.B -psl
E 7
I 7
.BR \-psl .
E 7
E 6
E 4
.TP 15
D 4
.BI \-sc , \-nsc
E 4
I 4
D 6
.BR \-sc , \-nsc
E 6
I 6
D 7
.BI \-sc , \-nsc
E 7
I 7
.BR \-sc , \-nsc
E 8
I 8
default is
.Fl psl  .
D 12
.Tp Fl sc , nsc
E 12
I 12
.It Fl \&sc , nsc
E 12
E 8
E 7
E 6
E 4
Enables (disables) the placement of asterisks (`*'s) at the left edge of all
D 4
comments.
E 4
I 4
D 6
comments.  The default is
.BR \-sc .
E 6
I 6
comments.
E 6
E 4
D 8
.TP 15
.BR \-sob , \-nsob
E 8
I 8
D 12
.Tp Fl sob , nsob
E 12
I 12
.It Fl sob , nsob
E 12
E 8
If
D 8
.B \-sob
E 8
I 8
.Fl sob
E 8
is specified, indent will swallow optional blank lines.  You can use this to
get rid of blank lines after declarations.  Default:
D 4
.B \-nsob
E 4
I 4
D 6
.BR \-nsob .
E 6
I 6
D 7
.B \-nsob
E 7
I 7
D 8
.BR \-nsob .
E 7
E 6
E 4
.TP 15
.B \-st
E 8
I 8
.Fl nsob  .
D 12
.Tp Fl st
E 12
I 12
.It Fl \&st
E 12
E 8
Causes
D 8
.B indent
E 8
I 8
.Nm indent
E 8
to take its input from stdin, and put its output to stdout.
D 8
.TP 15
.BI \-T typename
E 8
I 8
D 12
.Tp Cx Fl T
.Ar typename
.Cx
E 12
I 12
.It Fl T Ns Ar typename 
E 12
E 8
Adds
D 8
.I typename
E 8
I 8
.Ar typename
E 8
to the list of type keywords.  Names accumulate:
D 8
.B \-T
E 8
I 8
.Fl T
E 8
can be specified more than once.  You need to specify all the typenames that
D 8
appear in your program that are defined by \fBtypedef\fRs \- nothing will be
E 8
I 8
appear in your program that are defined by
.Ic typedef
\- nothing will be
E 8
harmed if you miss a few, but the program won't be formatted as nicely as
it should.  This sounds like a painful thing to have to do, but it's really
D 8
a symptom of a problem in C: \fBtypedef\fR causes a syntactic change in the
D 4
laguage and \fIindent\fR can't find all \fBtypedef\fRs.
E 4
I 4
D 6
language and \fIindent\fR can't find all \fBtypedef\fRs.
E 6
I 6
D 7
laguage and \fIindent\fR can't find all \fBtypedef\fRs.
E 7
I 7
language and \fIindent\fR can't find all \fBtypedef\fRs.
E 7
E 6
E 4
.TP 15
.B \-troff
E 8
I 8
a symptom of a problem in C:
.Ic typedef
causes a syntactic change in the
language and
.Nm indent
can't find all
instances of
.Ic typedef .
D 12
.Tp Fl troff
E 12
I 12
.It Fl troff
E 12
E 8
Causes
D 8
.B indent
E 8
I 8
.Nm indent
E 8
D 12
to format the program for processing by troff.  It will produce a fancy
E 12
I 12
to format the program for processing by
.Xr troff 1 .
It will produce a fancy
E 12
listing in much the same spirit as
D 4
.BR vgrind.
E 4
I 4
D 6
.BR vgrind .
E 6
I 6
D 7
.BR vgrind.
E 7
I 7
D 8
.BR vgrind .
E 8
I 8
.Xr vgrind 1 .
E 8
E 7
E 6
E 4
If the output file is not specified, the default is standard output,
rather than formatting in place.
D 8
.TP 15
.BR \-v , \-nv
.B \-v
E 8
I 8
D 12
.Tp Fl v , nv
E 12
I 12
.It Fl v , \&nv
E 12
.Fl v
E 8
D 4
turns on `verbose' mode,
E 4
I 4
D 6
turns on `verbose' mode;
E 6
I 6
D 7
turns on `verbose' mode,
E 7
I 7
turns on `verbose' mode;
E 7
E 6
E 4
D 8
.B \-nv
E 8
I 8
D 12
.Fl nv
E 12
I 12
.Fl \&nv
E 12
E 8
turns it off.  When in verbose mode,
D 8
.I indent
E 8
I 8
.Nm indent
E 8
reports when it splits one line of input into two or more lines of output,
and gives some size statistics at completion. The default is
D 8
.BR \-nv .
.SH "FURTHER DESCRIPTION"
.LP
E 8
I 8
D 12
.Fl nv  .
.Tp
E 12
I 12
.Fl \&nv  .
.El
E 12
.Pp
E 8
You may set up your own `profile' of defaults to
D 8
.I indent
E 8
I 8
.Nm indent
E 8
by creating a file called
D 8
.BI . indent . pro
E 8
I 8
.Pa .indent.pro
E 8
D 4
in either your login directory or the current directory and including
whatever switches you like.  A `.indent.pro' in the current directory takes
precedence over the one in your login directory.  If
E 4
I 4
D 6
in either your login directory and/or the current directory and including
whatever switches you like.  Switches in `.indent.pro' in the current
directory override those in your login directory (with the exception of
.B -T
type definitions, which just accumulate).  If
E 6
I 6
D 7
in either your login directory or the current directory and including
E 7
I 7
in your login directory and/or the current directory and including
E 7
whatever switches you like.  A `.indent.pro' in the current directory takes
precedence over the one in your login directory.  If
E 6
E 4
D 8
.I indent
E 8
I 8
.Nm indent
E 8
is run and a profile file exists, then it is read to set up the program's
D 4
defaults.  Switches on the command line, though, always override profile
switches.  The switches should be separated by spaces, tabs or newlines.
E 4
I 4
D 6
defaults.  The switches should be separated by spaces, tabs or newlines.
Switches on the command line, however, override profile switches.
E 6
I 6
defaults.  Switches on the command line, though, always override profile
switches.  The switches should be separated by spaces, tabs or newlines.
E 6
E 4
D 8
.LP
E 3
.B Comments
D 3
.PP
E 3
I 3
.LP
.IR "`Box' comments" .
E 3
.I Indent
E 8
I 8
.Pp
.Ss Comments
.Sq Em Box
.Em comments .
.Nm Indent
E 8
D 3
recognizes four kinds of comments. 
They are: straight text, ``box'' comments,
UNIX-style comments,
and comments that should be passed through unchanged. 
The action taken with these
various types are as follows:
.PP
.I ``Box'' comments.\ \  
E 3
I 3
assumes that any comment with a dash or star immediately after the start of
comment (that is, `/*\-' or `/**') is a comment surrounded by a box of stars.
Each line of such a comment is left unchanged, except that its indentation
may be adjusted to account for the change in indentation of the first line
of the comment.
D 8
.LP
.IR "Straight text" .
E 8
I 8
.Pp
.Em Straight text .
E 8
All other comments are treated as straight text.
E 3
D 8
.I Indent
E 8
I 8
.Nm Indent
E 8
D 3
assumes that any comment with a dash
immediately after the start of comment (i.e. ``/*\-'')
is a comment surrounded by a box of stars.  Each line
of such a comment will be left unchanged,
except that the first non-blank
character of each successive line will be lined up with the beginning
slash of the first line.  Box comments will be indented (see below).
.PP
.I ``Unix-style'' comments.\ \ 
This is the type of section header which is used 
extensively in the UNIX system source.  If the start
of comment (``/*'') appears on a
line by itself, indent assumes that it is a
UNIX-style comment.  These will be
treated similarly to box comments, except
the first non-blank character on each
line will be lined up with the `*' of the ``/*''.
.PP
.I Unchanged comments.\ \ 
Any comment which starts in column 1 will be left completely
unchanged.  This is intended primarily for documentation header pages.
The check for unchanged comments is made before
the check for UNIX-style comments.
.PP
.I Straight text.\ \ 
All other comments are treated as straight text. 
.I Indent
will fit
as many words (separated by blanks, tabs, or newlines) on a line as possible.
Straight text comments will be indented.
.PP
E 3
I 3
fits as many words (separated by blanks, tabs, or newlines) on a
line as possible.  Blank lines break paragraphs.
D 8
.LP
E 3
.B Comment indentation
D 3
.PP
Box, UNIX-style, and straight text comments may be indented.
If a comment is on a line
with code it will be started in the ``comment
column'', which is set by the
.B \-cnnn
command line parameter.
Otherwise, the
comment will be started at 
.I nnn
indentation levels less than where code is
currently being placed, where
.I nnn
E 3
I 3
.LP
E 8
I 8
.Pp
.Ss Comment indentation
E 8
If a comment is on a line with code it is started in the `comment column',
which is set by the
D 8
.BI \-c n
E 8
I 8
D 12
.Cx Fl c
.Ar n
.Cx
E 12
I 12
.Fl c Ns Ns Ar n 
E 12
E 8
command line parameter.  Otherwise, the comment is started at
D 8
.I n
E 8
I 8
.Ar n
E 8
indentation levels less than where code is currently being placed, where
D 8
.I n
E 8
I 8
.Ar n
E 8
E 3
is specified by the
D 3
.B \-dnnn
command line parameter.  (Indented
comments will never be placed in column 1.)
If the code on a line extends past the comment column,
the comment will be moved to the next line.
.SH DIAGNOSTICS
Diagnostic error messages, mostly to
tell that a text line has been broken
or is too long for the output line.
E 3
I 3
D 8
.BI \-d n
E 8
I 8
D 12
.Cx Fl d
.Ar n
.Cx
E 12
I 12
.Fl d Ns Ns Ar n 
E 12
E 8
command line parameter.  If the code on a line extends past the comment
column, the comment starts further to the right, and the right margin may be
automatically extended in extreme cases.
D 8
.LP
.B Preprocessor lines
.LP
In general, \fIindent\fR leaves preprocessor lines alone.  The only
E 8
I 8
.Pp
.Ss Preprocessor lines
In general,
.Nm indent
leaves preprocessor lines alone.  The only
E 8
D 4
reformmatting that it will do is to straighten up trailing comments.  It
leaves imbedded comments alone.  Conditional compilation
E 4
I 4
D 6
reformatting that it will do is to straighten up trailing comments.  It
leaves embedded comments alone.  Conditional compilation
E 6
I 6
D 7
reformmatting that it will do is to straighten up trailing comments.  It
leaves imbedded comments alone.  Conditional compilation
E 7
I 7
reformatting that it will do is to straighten up trailing comments.  It
leaves embedded comments alone.  Conditional compilation
E 7
E 6
E 4
D 8
(\fB#ifdef...#endif\fR) is recognized and \fIindent\fR attempts to correctly
E 8
I 8
.Pq Ic #ifdef...#endif
is recognized and
.Nm indent
attempts to correctly
E 8
D 4
compensate for the syntactic peculiarites introduced.
E 4
I 4
D 6
compensate for the syntactic peculiarities introduced.
E 6
I 6
D 7
compensate for the syntactic peculiarites introduced.
E 7
I 7
compensate for the syntactic peculiarities introduced.
E 7
E 6
E 4
D 8
.LP
.B C syntax
.LP
\fIIndent\fR understands a substantial amount about the syntax of C, but it
E 8
I 8
.Pp
.Ss C syntax
.Nm Indent
understands a substantial amount about the syntax of C, but it
E 8
has a `forgiving' parser.  It attempts to cope with the usual sorts of
incomplete and misformed syntax.  In particular, the use of macros like:
I 12
.Pp
E 12
D 8
.nf
.ft L
        #define forever for(;;)
.ft R
.fi
E 8
I 8
.Dl #define forever for(;;)
I 12
.Pp
E 12
E 8
is handled properly.
E 3
D 8
.SH FILES
.DT
D 3
\&.indent.pro	profile file
E 3
I 3
.br
\&./.indent.pro	profile file
.br
I 7
~/.indent.pro	profile file
E 7
D 6
~/.indent.pro	profile file
E 6
E 3
.SH BUGS
D 3
Does not know how to format ``long'' declarations.
E 3
I 3
.I Indent
has even more switches than \fIls\fR.
D 4

E 4
I 4
D 6
.sp
E 6
I 6
D 7

E 7
I 7
.sp
E 8
I 8
.Sh ENVIRONMENT
.Nm Indent
uses the
.Ev HOME
environment variable.
.Sh FILES
D 12
.Dw \&./.indent.pro
.Di L
D 9
.Dp \&./.indent.pro
E 9
I 9
.Dp Pa \&./.indent.pro
E 12
I 12
.Bl -tag -width "./.indent.pro" -compact
.It Pa ./.indent.pro
E 12
E 9
profile file
D 9
.Dp ~/.indent.pro
E 9
I 9
D 12
.Dp Pa ~/.indent.pro
E 12
I 12
.It Pa ~/.indent.pro
E 12
E 9
profile file
D 12
.Dp
E 12
I 12
.El
E 12
.Sh HISTORY
D 12
.Nm Indent
appeared in 4.2 BSD.
E 12
I 12
The
.Nm indent
command appeared in
.Bx 4.2 .
E 12
.Sh BUGS
.Nm Indent
has even more switches than
.Xr ls 1 .
.Pp
E 8
E 7
E 6
E 4
.ne 5
A common mistake that often causes grief is typing:
I 12
.Pp
E 12
D 8
.nf
.ft L
    indent *.c
.ft R
.fi
to the shell in an attempt to indent all the \fBC\fR programs in a directory.
E 8
I 8
.Dl indent *.c
I 12
.Pp
E 12
to the shell in an attempt to indent all the
.Nm C
programs in a directory.
E 8
This is probably a bug, not a feature.
E 3
E 1
