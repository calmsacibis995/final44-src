h53768
s 00006/00000/00858
d D 8.8 95/06/13 15:40:31 christos 17 16
c - posix compliance: Don't create .[A-Z]* targets 
c - support for .PHONY targets
e
s 00002/00001/00856
d D 8.7 95/04/29 13:10:22 christos 16 15
c small typo fix from Chris Torek
e
s 00005/00006/00852
d D 8.6 95/04/28 17:08:16 christos 15 14
c Updated to the latest version from the NetBSD source
e
s 00002/00001/00856
d D 8.5 95/03/14 17:44:18 mckusick 14 13
c missing .Ar (from cael)
e
s 00005/00003/00852
d D 8.4 94/03/19 15:54:45 christos 13 12
c fix spelling errors and typos; add OBJDIR
e
s 00014/00003/00841
d D 8.3 94/03/19 10:53:14 bostic 12 11
c The SYSV ${VAR:src=dst} was broken; try:
c SRC=foo.c bar.c
c all:
c 	echo ${SRC:%.c=%.o}
c From: Christos Zoulas <christos@deshaw.com>
e
s 00004/00004/00840
d D 8.2 93/12/30 15:38:58 mckusick 11 10
c copyediting for Usenix manuals
e
s 00002/00002/00842
d D 8.1 93/06/06 15:16:07 bostic 10 9
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00039/00016/00805
d D 5.8 93/05/24 14:45:47 bostic 9 8
c update, bug fix, ANSI C, lint from Christos Zoulas
c see SCCS/README.christos for details
e
s 00428/00318/00393
d D 5.7 91/07/24 16:01:37 cael 8 7
c version three mdoc
e
s 00003/00001/00708
d D 5.6 91/03/14 00:22:10 cael 7 5
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00001/00000/00709
d R 5.6 91/03/13 20:35:20 cael 6 5
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00017/00016/00692
d D 5.5 91/01/11 14:15:58 bostic 5 4
c describe how .depend works
e
s 00004/00001/00704
d D 5.4 90/09/24 13:09:17 bostic 4 3
c put -e option back in, minor typo in the -D option
e
s 00018/00015/00687
d D 5.3 90/07/24 22:48:26 cael 3 2
c .Xr botch fix
e
s 00356/00315/00346
d D 5.2 90/06/11 05:57:00 cael 2 1
c converted man page
e
s 00661/00000/00000
d D 5.1 90/05/03 11:12:04 bostic 1 0
c date and time created 90/05/03 11:12:04 by bostic
e
u
U
t
T
I 1
D 10
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
E 10
I 10
.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 10
.\"
D 2
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 2
I 2
D 8
.\" %sccs.include.redist.man%
E 8
I 8
.\" %sccs.include.redist.roff%
E 8
E 2
.\"
D 2
.\"	%W% (Berkeley) %G%
E 2
I 2
D 8
.\"     %W% (Berkeley) %G%
E 8
I 8
.\"	%W% (Berkeley) %G%
E 8
E 2
.\"
I 7
D 8
.Vx
.Vx
E 8
E 7
D 2
.TH MAKE 1 "%Q%"
.UC 7
.SH NAME
make \- maintain program dependencies
.SH SYNOPSIS
.ft B
make [-eiknqrstv] [-D variable] [-d flags] [-f makefile ] [-I directory]
[-j max_jobs] [variable=value] [target ...]
.ft R
.SH DESCRIPTION
.I Make
E 2
I 2
.Dd %Q%
.Dt MAKE 1
D 7
.Os BSD 4.4
E 7
I 7
.Os
E 7
.Sh NAME
.Nm make
.Nd maintain program dependencies
.Sh SYNOPSIS
.Nm make
.Op Fl eiknqrstv
.Op Fl D Ar variable
.Op Fl d Ar flags
.Op Fl f Ar makefile
.Op Fl I Ar directory
I 8
.Bk -words
E 8
.Op Fl j Ar max_jobs
I 8
.Ek
E 8
.Op Ar variable=value
.Op Ar target ...
.Sh DESCRIPTION
.Nm Make
E 2
is a program designed to simplify the maintenance of other programs.
D 5
Its input is a ``makefile'' which specifies files that programs and
other files are dependent upon.
E 5
I 5
Its input is a list of specifications as to the files upon which programs
and other files depend.
D 8
If the file ``makefile'' exists, it is read for this list of specifications.
If it does not exist, the file ``Makefile'' is read.
If the file ``.depend'' exists, it is read (see
E 8
I 8
If the file
.Ql Pa makefile
exists, it is read for this list of specifications.
If it does not exist, the file
.Ql Pa Makefile
is read.
If the file
.Ql Pa .depend
exists, it is read (see
E 8
.Xr mkdep 1) .
E 5
D 2
.PP
E 2
I 2
.Pp
E 2
This manual page is intended as a reference document only.
For a more thorough description of
D 2
.I make
E 2
I 2
.Nm make
E 2
and makefiles, please refer to
D 2
.IR "Make -- A Tutorial" .
.PP
E 2
I 2
D 8
.Em Make \-\- A Tutorial .
E 8
I 8
.%T "Make \- A Tutorial" .
E 8
.Pp
E 2
The options are as follows:
D 2
.TP
\-D variable
E 2
I 2
D 8
.Tw Ds
D 4
.Tp Cx Fl
E 4
I 4
.Tp Cx Fl D
E 4
.Ar variable
.Cx
E 2
Define
D 2
.I variable
E 2
I 2
.Ar variable
E 8
I 8
.Bl -tag -width Ds
.It Fl D Ar variable
D 14
Define Ar variable
E 14
I 14
D 15
Define
.Ar variable
E 15
I 15
D 16
Define Ar variable
E 16
I 16
Define
.Ar variable
E 16
E 15
E 14
E 8
E 2
to be 1, in the global context.
D 2
.TP
\-d flags
E 2
I 2
D 8
.Tp Cx Fl d
.Ar flags
.Cx
E 8
I 8
.It Fl d Ar flags
E 8
E 2
Turn on debugging, and specify which portions of
D 2
.I make
E 2
I 2
.Nm make
E 2
are to print debugging information.
D 2
.I Flags
E 2
I 2
.Ar Flags
E 2
is one or more of the following:
D 2
.RS
.TP
A
E 2
I 2
D 8
.Tw Ds
.Tp Ic A
E 2
Print all possible debugging information; equivalent to specifying
all of the debugging flags.
D 2
.TP
a
E 2
I 2
.Tp Ic a
E 8
I 8
.Bl -tag -width Ds
.It Ar A
Print all possible debugging information;
equivalent to specifying all of the debugging flags.
.It Ar a
E 8
E 2
Print debugging information about archive searching and caching.
D 2
.TP
c
E 2
I 2
D 8
.Tp Ic c
E 8
I 8
.It Ar c
E 8
E 2
Print debugging information about conditional evaluation.
D 2
.TP
d
E 2
I 2
D 8
.Tp Ic d
E 8
I 8
.It Ar d
E 8
E 2
Print debugging information about directory searching and caching.
D 2
.TP
g1
E 2
I 2
D 8
.Tp Ic g1
E 8
I 8
.It Ar "g1"
E 8
E 2
Print the input graph before making anything.
D 2
.TP
g2
E 2
I 2
D 8
.Tp Ic g2
E 8
I 8
.It Ar "g2"
E 8
E 2
Print the input graph after making everything, or before exiting
on error.
D 2
.TP
j
E 2
I 2
D 8
.Tp Ic j
E 8
I 8
.It Ar j
E 8
E 2
Print debugging information about running multiple shells.
D 2
.TP
m
E 2
I 2
D 8
.Tp Ic m
E 8
I 8
.It Ar m
E 8
E 2
Print debugging information about making targets, including modification
dates.
D 2
.TP
s
E 2
I 2
D 8
.Tp Ic s
E 8
I 8
.It Ar s
E 8
E 2
Print debugging information about suffix-transformation rules.
D 2
.TP
t
E 2
I 2
D 8
.Tp Ic t
E 8
I 8
.It Ar t
E 8
E 2
Print debugging information about target list maintenance.
D 2
.TP
v
E 2
I 2
D 8
.Tp Ic v
E 8
I 8
.It Ar v
E 8
E 2
Print debugging information about variable assignment.
D 2
.RE
.TP
\-f makefile
E 2
I 2
D 8
.Tp
I 4
.Tp Fl e
E 8
I 8
.El
.It Fl e
E 8
Specify that environmental variables override macro assignments within
makefiles.
E 4
D 8
.Tp Cx Fl f
.Ar makefile
.Cx
E 2
D 5
Specify a makefile to read.
If no makefile is specified, the files ``makefile'' and ``Makefile''
are searched for, in that order.
E 5
I 5
Specify a makefile to read instead of the default ``makefile'' and ``Makefile''.
E 8
I 8
.It Fl f Ar makefile
Specify a makefile to read instead of the default
.Ql Pa makefile
and
.Ql Pa Makefile .
E 8
E 5
If
D 2
.I makefile
E 2
I 2
.Ar makefile
E 2
D 8
is ``\-'', standard input is read.
E 8
I 8
is
.Ql Fl ,
standard input is read.
E 8
Multiple makefile's may be specified, and are read in the order specified.
D 2
.TP
\-I directory
E 2
I 2
D 8
.Tp Cx Fl I
.Ar directory
.Cx
E 8
I 8
.It Fl I Ar directory
E 8
E 2
Specify a directory in which to search for makefiles and included makefiles.
The system makefile directory is automatically included as part of this
list.
D 2
.TP
\-i
E 2
I 2
D 8
.Tp Fl i
E 8
I 8
.It Fl i
E 8
E 2
Ignore non-zero exit of shell commands in the makefile.
D 8
Equivalent to specifying ``\-'' before each command line in the makefile.
D 2
.TP
\-j max_jobs
E 2
I 2
.Tp Cx Fl j 
.Ar max_jobs
.Cx
E 8
I 8
Equivalent to specifying
.Ql Fl
before each command line in the makefile.
.It Fl j Ar max_jobs
E 8
E 2
Specify the maximum number of jobs that
D 2
.I make
E 2
I 2
.Nm make
E 2
may have running at any one time.
D 2
.TP
\-k
E 2
I 2
D 8
.Tp Fl k
E 8
I 8
.It Fl k
E 8
E 2
Continue processing after errors are encountered, but only on those targets
that do not depend on the target whose creation caused the error.
D 2
.TP
\-n
E 2
I 2
D 8
.Tp Fl n
E 8
I 8
.It Fl n
E 8
E 2
Display the commands that would have been executed, but do not actually
execute them.
D 2
.TP
\-q
E 2
I 2
D 8
.Tp Fl q
E 8
I 8
.It Fl q
E 8
E 2
Do not execute any commands, but exit 0 if the specified targets are
up-to-date and 1, otherwise.
D 2
.TP
\-r
E 2
I 2
D 8
.Tp Fl r
E 8
I 8
.It Fl r
E 8
E 2
Do not use the built-in rules specified in the system makefile.
D 2
.TP
\-s
E 2
I 2
D 8
.Tp Fl s
E 8
I 8
.It Fl s
E 8
E 2
Do not echo any commands as they are executed.
D 8
Equivalent to specifying ``@'' before each command line in the makefile.
D 2
.TP
\-t
E 2
I 2
.Tp Fl t
E 8
I 8
Equivalent to specifying
.Ql Ic @
before each command line in the makefile.
.It Fl t
E 8
E 2
Rather than re-building a target as specified in the makefile, create it
or update its modification time to make it appear up-to-date.
D 2
.TP
variable=value
E 2
I 2
D 8
.Tp Ar variable=value
E 8
I 8
.It Ar variable=value
E 8
E 2
Set the value of the variable
D 2
.I variable
E 2
I 2
.Ar variable
E 2
to
D 2
.IR value .
.PP
E 2
I 2
D 8
.Ar value  .
.Tp
E 8
I 8
.Ar value .
.El
E 8
.Pp
E 2
D 9
There are six different types of lines in a makefile: file dependency
E 9
I 9
There are seven different types of lines in a makefile: file dependency
E 9
specifications, shell commands, variable assignments, include statements,
D 9
conditional directives, and comments.
E 9
I 9
conditional directives, for loops, and comments.
E 9
D 2
.PP
E 2
I 2
.Pp
E 2
In general, lines may be continued from one line to the next by ending
D 8
them with a backslash (``\e'').
E 8
I 8
them with a backslash
.Pq Ql \e .
E 8
The trailing newline character and initial whitespace on the following
line are compressed into a single space.
D 2
.SH "FILE DEPENDENCY SPECIFICATIONS"
E 2
I 2
.Sh FILE DEPENDENCY SPECIFICATIONS
E 2
Dependency lines consist of one or more targets, an operator, and zero
or more sources.
This creates a relationship where the targets ``depend'' on the sources
and are usually created from them.
The exact relationship between the target and the source is determined
by the operator that separates them.
The three operators are as follows:
I 3
D 8
.Tw Ds
E 3
D 2
.TP
:
E 2
I 2
.Tp Ic \&:
E 8
I 8
.Bl -tag -width flag
.It Ic \&:
E 8
E 2
A target is considered out-of-date if its modification time is less than
those of any of its sources.
Sources for a target accumulate over dependency lines when this operator
is used.
The target is removed if
D 2
.I make
E 2
I 2
.Nm make
E 2
is interrupted.
D 2
.TP
!
E 2
I 2
D 8
.Tp Ic \&!
E 8
I 8
.It Ic \&!
E 8
E 2
Targets are always re-created, but not until all sources have been
examined and re-created as necessary.
Sources for a target accumulate over dependency lines when this operator
is used.
The target is removed if
D 2
.I make
E 2
I 2
.Nm make
E 2
is interrupted.
D 2
.TP
::
E 2
I 2
D 8
.Tp Ic \&::
E 8
I 8
.It Ic \&::
E 8
E 2
If no sources are specified, the target is always re-created.
Otherwise, a target is considered out-of-date if any of its sources has
been modified more recently than the target.
Sources for a target do not accumulate over dependency lines when this
operator is used.
The target will not be removed if
D 2
.I make
E 2
I 2
.Nm make
E 2
is interrupted.
D 2
.PP
E 2
I 2
D 8
.Tp
E 8
I 8
.El
E 8
.Pp
E 2
D 8
Targets and sources may contain the shell wildcard values ``?'', ``*'',
D 2
``[]'' and ``{}''.
The values ``?'', ``*'' and ``[]'' may only be used as part of the final
E 2
I 2
.Dq Op
and ``{}''.
The values ``?'', ``*'' and
.Dq Op
E 8
I 8
Targets and sources may contain the shell wildcard values
.Ql ? ,
.Ql * ,
.Ql []
and
.Ql {} .
The values
.Ql ? ,
.Ql *
and
.Ql []
E 8
may only be used as part of the final
E 2
component of the target or source, and must be used to describe existing
files.
D 8
The value ``{}'' need not necessarily be used to describe existing files.
E 8
I 8
The value
.Ql {}
need not necessarily be used to describe existing files.
E 8
Expansion is in directory order, not alphabetically as done in the shell.
D 2
.SH "SHELL COMMANDS"
E 2
I 2
.Sh SHELL COMMANDS
E 2
Each target may have associated with it a series of shell commands, normally
used to create the target.
Each of the commands in this script
D 2
.B must
E 2
I 2
.Em must
E 2
be preceded by a tab.
While any target may appear on a dependency line, only one of these
D 8
dependencies may be followed by a creation script, unless the ``::''
E 8
I 8
dependencies may be followed by a creation script, unless the
.Ql Ic ::
E 8
operator is used.
D 2
.PP
E 2
I 2
.Pp
E 2
D 8
If the first or first two characters of the command line are ``@'' and/or
``\-'', the command is treated specially.
A ``@'' causes the command not to be echoed before it is executed.
A ``\-'' causes any non-zero exit status of the command line to be ignored.
E 8
I 8
If the first or first two characters of the command line are
.Ql Ic @
and/or
.Ql Ic \- ,
the command is treated specially.
A
.Ql Ic @
causes the command not to be echoed before it is executed.
A
.Ql Ic \-
causes any non-zero exit status of the command line to be ignored.
E 8
D 2
.SH "VARIABLE ASSIGNMENTS"
E 2
I 2
.Sh VARIABLE ASSIGNMENTS
E 2
Variables in make are much like variables in the shell, and, by tradition,
consist of all upper-case letters.
The five operators that can be used to assign values to variables are as
follows:
I 3
D 8
.Tw Ds
E 3
D 2
.TP
=
E 2
I 2
.Tp Ic \&=
E 8
I 8
.Bl -tag -width Ds
.It Ic \&=
E 8
E 2
Assign the value to the variable.
Any previous value is overridden.
D 2
.TP
+=
E 2
I 2
D 8
.Tp Ic \&+=
E 8
I 8
.It Ic \&+=
E 8
E 2
Append the value to the current value of the variable.
D 2
.TP
?=
E 2
I 2
D 8
.Tp Ic \&?=
E 8
I 8
.It Ic \&?=
E 8
E 2
Assign the value to the variable if it is not already defined.
D 2
.TP
:=
E 2
I 2
D 8
.Tp Ic \&:=
E 8
I 8
.It Ic \&:=
E 8
E 2
Assign with expansion, i.e. expand the value before assigning it
to the variable.
Normally, expansion is not done until the variable is referenced.
D 2
.TP
!=
E 2
I 2
D 8
.Tp Ic \&!=
E 8
I 8
.It Ic \&!=
E 8
E 2
Expand the value and pass it to the shell for execution and assign
the result to the variable.
Any newlines in the result are replaced with spaces.
D 2
.PP
E 2
I 2
D 8
.Tp
E 8
I 8
.El
E 8
.Pp
E 2
Any white-space before the assigned
D 2
.I value
E 2
I 2
.Ar value
E 2
is removed; if the value is being appended, a single space is inserted
between the previous contents of the variable and the appended value.
D 2
.PP
E 2
I 2
.Pp
E 2
Variables are expanded by surrounding the variable name with either
D 8
curly braces (``{}'') or parenthesis (``()'') and preceding it with
a dollar sign (``$'').
E 8
I 8
curly braces
.Pq Ql {}
D 15
or parenthesis
E 15
I 15
or parentheses
E 15
.Pq Ql ()
and preceding it with
a dollar sign
.Pq Ql \&$ .
E 8
If the variable name contains only a single letter, the surrounding
D 15
braces or parenthesis are not required.
E 15
I 15
braces or parentheses are not required.
E 15
This shorter form is not recommended.
D 2
.PP
E 2
I 2
.Pp
E 2
Variable substitution occurs at two distinct times, depending on where
the variable is being used.
Variables in dependency lines are expanded as the line is read.
Variables in shell commands are expanded when the shell command is
executed.
D 2
.PP
E 2
I 2
.Pp
E 2
The four different classes of variables (in order of increasing precedence)
are:
D 2
.TP
environmental variables
E 2
I 2
D 8
.Tw Ds
.Tp environment variables
E 8
I 8
.Bl -tag -width Ds
.It Environment variables
E 8
E 2
Variables defined as part of
D 2
.IR make 's
E 2
I 2
D 8
.Cx Nm make
.Cx \'s
.Cx
E 8
I 8
.Nm make Ns 's
E 8
E 2
environment.
D 2
.TP
global variables
E 2
I 2
D 8
.Tp global variables
E 8
I 8
.It Global variables
E 8
E 2
Variables defined in the makefile or in included makefiles.
D 2
.TP
command line variables
E 2
I 2
D 8
.Tp command line variables
E 8
I 8
.It Command line variables
E 8
E 2
Variables defined as part of the command line.
D 2
.TP
local variables
E 2
I 2
D 8
.Tp local variables
E 8
I 8
.It Local variables
E 8
E 2
Variables that are defined specific to a certain target.
The seven local variables are as follows:
D 2
.RS
.TP
\&.ALLSRC
E 2
I 2
D 8
.Tw Ds
.Tp Va \&.ALLSRC
E 2
The list of all sources for this target; also known as ``>''.
D 2
.TP
\&.ARCHIVE
E 2
I 2
.Tp Va \&.ARCHIVE
E 8
I 8
.Bl -tag -width ".ARCHIVE"
.It Va .ALLSRC
The list of all sources for this target; also known as
.Ql Va \&> .
.It Va .ARCHIVE
E 8
E 2
The name of the archive file.
D 2
.TP
\&.IMPSRC
E 2
I 2
D 8
.Tp Va \&.IMPSRC
E 8
I 8
.It Va .IMPSRC
E 8
E 2
The name/path of the source from which the target is to be transformed
D 8
(the ``implied'' source); also known as ``<''.
D 2
.TP
\&.MEMBER
E 2
I 2
.Tp Va \&.MEMBER
E 8
I 8
(the ``implied'' source); also known as
.Ql Va \&< .
.It Va .MEMBER
E 8
E 2
The name of the archive member.
D 2
.TP
\&.OODATE
E 2
I 2
D 8
.Tp Va \&.OODATE
E 8
I 8
.It Va .OODATE
E 8
E 2
The list of sources for this target that were deemed out-of-date; also
D 8
known as ``?''.
D 2
.TP
\&.PREFIX
E 2
I 2
.Tp Va \&.PREFIX
E 8
I 8
known as
.Ql Va \&? .
.It Va .PREFIX
E 8
E 2
The file prefix of the file, containing only the file portion, no suffix
D 8
or preceding directory components; also known as ``*'.
D 2
.TP
\&.TARGET
E 2
I 2
.Tp Va \&.TARGET
E 2
The name of the target; also known as ``@''.
D 2
.RE
.PP
E 2
I 2
.Tp
E 8
I 8
or preceding directory components; also known as
.Ql Va * .
.It Va .TARGET
The name of the target; also known as
.Ql Va @ .
.El
E 8
.Pp
E 2
D 8
The shorter forms ``@'', ``?'', ``>'' and ``*'' are permitted for backward
E 8
I 8
The shorter forms
.Ql Va @ ,
.Ql Va ? ,
.Ql Va \&>
and
.Ql Va *
are permitted for backward
E 8
compatibility with historical makefiles and are not recommended.
D 8
The six variables ``@F'', ``@D'', ``<F'', ``<D'', ``*F'' and ``*D'' are
permitted for compatibility with System V makefiles and are not recommended.
E 8
I 8
The six variables
.Ql Va "@F" ,
.Ql Va "@D" ,
.Ql Va "<F" ,
.Ql Va "<D" ,
.Ql Va "*F"
and
.Ql Va "*D"
are
permitted for compatibility with
.At V
makefiles and are not recommended.
E 8
D 2
.PP
E 2
I 2
.Pp
E 2
Four of the local variables may be used in sources on dependency lines
because they expand to the proper value for each target on the line.
D 8
These variables are ``.TARGET'', ``.PREFIX'', ``.ARCHIVE'', and ``.MEMBER''.
E 8
I 8
These variables are
.Ql Va .TARGET ,
.Ql Va .PREFIX ,
.Ql Va .ARCHIVE ,
and
.Ql Va .MEMBER .
E 8
D 2
.PP
E 2
I 2
.Pp
E 2
In addition,
D 2
.I make
E 2
I 2
.Nm make
E 2
sets or knows about the following variables:
D 2
.TP
$
E 2
I 2
D 8
.Tw MAKEFLAGS
.Tp Va \&$
E 2
A single dollar sign (``$''), i.e. ``$$'' expands to a single dollar
E 8
I 8
.Bl -tag -width MAKEFLAGS
.It Va \&$
A single dollar sign
.Ql \&$ ,
i.e.
.Ql \&$$
expands to a single dollar
E 8
sign.
D 2
.TP
\&.MAKE
E 2
I 2
D 8
.Tp Va \&.MAKE
E 8
I 8
.It Va .MAKE
E 8
E 2
The name that
D 2
.I make
was executed with (argv[0]).
.TP
\&.CURDIR
E 2
I 2
.Nm make
was executed with
D 8
.Pq Cx Va argv
.Op 0
.Cx
.Tp Va \&.CURDIR
E 8
I 8
.Pq Va argv Op 0
.It Va .CURDIR
E 8
E 2
A path to the directory where
D 2
.I make
E 2
I 2
.Nm make
E 2
was executed.
I 13
.It Va .OBJDIR
A path to the directory where the targets are built.
E 13
D 2
.TP
MAKEFLAGS
The environmental variable ``MAKEFLAGS'' may contain anything that
E 2
I 2
D 8
.Tp Va MAKEFLAGS
The environment variable ``MAKEFLAGS'' may contain anything that
E 8
I 8
.It Ev MAKEFLAGS
The environment variable
.Ql Ev MAKEFLAGS
may contain anything that
E 8
E 2
may be specified on
D 2
.IR make 's
E 2
I 2
D 8
.Cx Nm make
.Cx \'s
.Cx
E 8
I 8
.Nm make Ns 's
E 8
E 2
command line.
Anything specified on
D 2
.IR make 's
E 2
I 2
D 8
.Cx Nm make
.Cx \'s
.Cx
E 2
command line is appended to the ``MAKEFLAGS'' variable which is then
E 8
I 8
.Nm make Ns 's
command line is appended to the
.Ql Ev MAKEFLAGS
variable which is then
E 8
entered into the environment for all programs which
D 2
.I make
E 2
I 2
.Nm make
E 2
executes.
D 2
.PP
E 2
I 2
D 8
.Tp
E 8
I 8
.El
E 8
.Pp
E 2
Variable expansion may be modified to select or modify each word of the
variable (where a ``word'' is white-space delimited sequence of characters).
The general format of a variable expansion is as follows:
D 2
.RS

${variable[:modifier[:...]])

.RE
E 2
I 2
.Pp
.Dl {variable[:modifier[:...]]}
.Pp
E 2
Each modifier begins with a colon and one of the following
special characters.
D 8
The colon may be escaped with a backslash (``\e'').
D 2
.TP
E
E 2
I 2
.Tp Cm E\&
E 8
I 8
The colon may be escaped with a backslash
.Pq Ql \e .
.Bl -tag -width Cm E\&
.It Cm E
E 8
E 2
Replaces each word in the variable with its suffix.
D 2
.TP
H
E 2
I 2
D 8
.Tp Cm \&H
E 8
I 8
.It Cm H
E 8
E 2
Replaces each word in the variable with everything but the last component.
D 2
.TP
Mpattern
E 2
I 2
D 8
.Tp Cx Ic M
.Ar pattern
.Cx
E 8
I 8
.It Cm M Ns Ar pattern
E 8
E 2
Select only those words that match the rest of the modifier.
D 2
The standard shell wildcard characters (``*'', ``?'', and ``[]'') may
E 2
I 2
D 8
The standard shell wildcard characters (``*'', ``?'', and
.Dq Op )
E 8
I 8
The standard shell wildcard characters
.Pf ( Ql * ,
.Ql ? ,
and
.Ql Op )
E 8
may
E 2
be used.
D 8
The wildcard characters may be escaped with a backslash (``\e'').
D 2
.TP
Npattern
E 2
I 2
.Tp Cx Ic N
.Ar pattern
.Cx
E 2
This is identical to ``M'', but selects all words which do not match
E 8
I 8
The wildcard characters may be escaped with a backslash
.Pq Ql \e .
.It Cm N Ns Ar pattern
This is identical to
.Ql Cm M ,
but selects all words which do not match
E 8
the rest of the modifier.
D 2
.TP
R
E 2
I 2
D 8
.Tp Cm R
E 8
I 8
.It Cm R
E 8
E 2
Replaces each word in the variable with everything but its suffix.
D 2
.TP
S/old_pattern/new_pattern/[g]
E 2
I 2
D 8
.Tp Cx Cm S
.Cx \&/
.Ar old_pattern
.Cx \&/
.Ar new_pattern
.Cx \&/
.Op Cm g
.Cx
E 8
I 8
.Sm off
.It Cm S No \&/ Ar old_pattern Xo
.No \&/ Ar new_pattern
.No \&/ Op Cm g
.Xc
.Sm on
E 8
E 2
Modify the first occurrence of
D 2
.I old_pattern
E 2
I 2
D 3
.Ar old _pattern
E 3
I 3
.Ar old_pattern
E 3
E 2
in each word to be replaced with
D 2
.IR new_pattern .
E 2
I 2
D 3
.Ar new _pattern  .
E 3
I 3
D 8
.Ar new_pattern  .
E 3
E 2
If a ``g'' is appended to the last slash of the pattern, all occurrences
E 8
I 8
.Ar new_pattern .
If a
.Ql g
is appended to the last slash of the pattern, all occurrences
E 8
in each word are replaced.
D 2
.RS
E 2
If
D 2
.I old_pattern
E 2
I 2
D 3
.Ar old _pattern
E 3
I 3
.Ar old_pattern
E 3
E 2
D 8
begins with a carat (``^''),
E 8
I 8
begins with a carat
.Pq Ql ^ ,
E 8
D 2
.I old_pattern
E 2
I 2
D 3
.Ar old _pattern
E 3
I 3
.Ar old_pattern
E 3
E 2
is anchored at the beginning of each word.
If
D 2
.I old_pattern
E 2
I 2
D 3
.Ar old _pattern
E 3
I 3
.Ar old_pattern
E 3
E 2
D 8
ends with a dollar sign (``$''), it is anchored at the end of each word.
E 8
I 8
ends with a dollar sign
.Pq Ql \&$ ,
it is anchored at the end of each word.
E 8
Inside
D 2
.IR new_string ,
E 2
I 2
D 3
.Ar new _string  ,
E 3
I 3
D 8
.Ar new_string  ,
E 3
E 2
an ampersand (``&'') is replaced by
E 8
I 8
.Ar new_string ,
an ampersand
.Pq Ql &
is replaced by
E 8
D 2
.IR old_pattern.
E 2
I 2
D 3
.Ar old _pattern .
E 3
I 3
.Ar old_pattern .
E 3
E 2
Any character may be used as a delimiter for the parts of the modifier
string.
The anchoring, ampersand and delimiter characters may be escaped with a
D 8
backslash (``\e'').
E 8
I 8
backslash
.Pq Ql \e .
E 8
D 2
.sp
E 2
I 2
.Pp
E 2
Variable expansion occurs in the normal fashion inside both
D 2
.I old_string
E 2
I 2
D 3
.Ar old _string
E 3
I 3
.Ar old_string
E 3
E 2
and
D 2
.I new_string
E 2
I 2
D 3
.Ar new _string
E 3
I 3
.Ar new_string
E 3
E 2
with the single exception that a backslash is used to prevent the expansion
D 8
of a dollar sign (``$''), not a preceding dollar sign as is usual.
D 2
.RE
.TP
T
E 2
I 2
.Tp Cm T
E 8
I 8
of a dollar sign
.Pq Ql \&$
not a preceding dollar sign as is usual.
.It Cm T
E 8
E 2
Replaces each word in the variable with its last component.
D 2
.TP
old_string=new_string
E 2
I 2
D 8
.Tp Ar old_string=new_string
E 2
This is the System V style variable substitution.
E 8
I 8
.It Ar old_string=new_string
This is the
.At V
style variable substitution.
E 8
It must be the last modifier specified.
D 2
.I Old_string
E 2
I 2
D 3
.Ar Old _string
E 3
I 3
D 12
.Ar Old_string
E 3
E 2
is anchored at the end of each word, so only suffixes or entire
words may be replaced.
E 12
I 12
If 
.Ar old_string
or
.Ar new_string
do not contain the pattern matching character
.Ar %
then it is assumed that they are 
anchored at the end of each word, so only suffixes or entire
words may be replaced. Otherwise 
.Ar %
is the substring of 
.Ar old_string 
to be replaced in
.Ar new_string
E 12
D 2
.SH "INCLUDE STATEMENTS AND CONDITIONALS"
E 2
I 2
D 8
.Tp
E 8
I 8
.El
E 8
D 9
.Sh INCLUDE STATEMENTS AND CONDITIONALS
E 2
Makefile inclusion and conditional structures reminiscent of the C
programming language are provided in
E 9
I 9
.Sh INCLUDE STATEMENTS, CONDITIONALS AND FOR LOOPS
Makefile inclusion, conditional structures and for loops  reminiscent 
of the C programming language are provided in
E 9
D 2
.IR make .
E 2
I 2
D 8
.Nm make  .
E 8
I 8
.Nm make .
E 8
E 2
All such structures are identified by a line beginning with a single
D 8
dot (``.'') character.
Files are included with either ``.include <file>'' or ``.include "file"''.
E 8
I 8
dot
.Pq Ql \&.
character.
Files are included with either
.Ql .include <file>
or
.Ql .include \*qfile\*q .
E 8
Variables between the angle brackets or double quotes are expanded
to form the file name.
If angle brackets are used, the included makefile is expected to be in
the system makefile directory.
If double quotes are used, the including makefile's directory and any
D 3
directories specified using the -I option are searched before the system
E 3
I 3
directories specified using the
.Fl I
option are searched before the system
E 3
makefile directory.
D 2
.PP
E 2
I 2
.Pp
E 2
Conditional expressions are also preceded by a single dot as the first
D 13
chraracter of a line.
E 13
I 13
character of a line.
E 13
The possible conditionals are as follows:
D 2
.TP
\&.undef variable
E 2
I 2
D 8
.Tw Ds
.Tp Cx Ic \&.undef
.Cx \&\ \&
.Ar variable
.Cx
E 8
I 8
.Bl -tag -width Ds
.It Ic .undef Ar variable
E 8
E 2
Un-define the specified global variable.
Only global variables may be un-defined.
D 2
.TP
\&.if [!] expression [ operator expression ... ]
E 2
I 2
D 8
.Tp Cx Ic \&.if
.Cx \&\ \&
.Op \&!
.Cx \&\ \&
.Ar expression
.Cx \&\ \&
E 8
I 8
.It Xo
.Ic \&.if
.Oo \&! Oc Ns Ar expression
E 8
.Op Ar operator expression ...
D 8
.Cx
E 8
I 8
.Xc
E 8
E 2
Test the value of an expression.
D 2
.TP
\&.ifdef [!] variable [ operator variable ... ]
E 2
I 2
D 8
.Tp Cx Ic \&.ifdef
.Cx \&\ \&
.Op \&!
.Ar variable
.Cx \&\ \&
.Op Ar  operator variable ...
.Cx
E 8
I 8
.It Xo
.Ic .ifdef
.Oo \&! Oc Ns Ar variable
.Op Ar operator variable ...
.Xc
E 8
E 2
D 11
Test the value of an variable.
E 11
I 11
Test the value of a variable.
E 11
D 2
.TP
\&.ifndef [!] variable [ operator variable ... ]
E 2
I 2
D 8
.Tp Cx Ic \&.ifndef
.Cx \&\ \&
.Op \&!
.Cx \&\ \&
.Ar variable
.Cx \&\ \&
E 8
I 8
.It Xo
.Ic .ifndef
.Oo \&! Oc Ns Ar variable
E 8
.Op Ar operator variable ...
D 8
.Cx
E 8
I 8
.Xc
E 8
E 2
D 11
Test the value of an variable.
E 11
I 11
Test the value of a variable.
E 11
D 2
.TP
\&.ifmake [!] target [ operator target ... ]
E 2
I 2
D 8
.Tp Cx Ic \&.ifmake
.Cx \&\ \&
.Op \&!
.Cx \&\ \&
.Ar target
.Cx \&\ \&
E 8
I 8
.It Xo
.Ic .ifmake
.Oo \&! Oc Ns Ar target
E 8
.Op Ar operator target ...
D 8
.Cx
E 8
I 8
.Xc
E 8
E 2
D 15
Test the the target being built.
E 15
I 15
Test the target being built.
E 15
D 2
.TP
\&.ifnmake [!] target [ operator target ... ]
E 2
I 2
D 8
.Tp Cx Ic \&.ifnmake
.Cx \&\ \&
.Op \&!
.Ar target
.Cx \&\ \&
E 8
I 8
.It Xo
.Ic .ifnmake
.Oo \&! Oc Ar target
E 8
.Op Ar operator target ...
D 8
.Cx
E 8
I 8
.Xc
E 8
E 2
Test the target being built.
D 2
.TP
\&.else
E 2
I 2
D 8
.Tp Ic \&.else
E 8
I 8
.It Ic .else
E 8
E 2
Reverse the sense of the last conditional.
D 2
.TP
\&.elif [!] expression [ operator expression ...]
E 2
I 2
D 8
.Tp Cx Ic \&.elif
.Cx \&\ \&
.Op \&!
.Cx \&\ \&
.Ar expression
.Cx \&\ \&
E 8
I 8
.It Xo
.Ic .elif
.Oo \&! Oc Ar expression
E 8
.Op Ar operator expression ...
D 8
.Cx
E 2
A combination of ``.else'' followed by ``.if''.
D 2
.TP
\&.elifdef [!] variable [ operator variable ...]
E 2
I 2
.Tp Cx Ic \&.elifdef
.Cx \&\ \&
.Op \&!
.Cx \&\ \&
.Ar variable
.Cx \&\ \&
E 8
I 8
.Xc
A combination of
.Ql Ic .else
followed by
.Ql Ic .if .
.It Xo
.Ic .elifdef
.Oo \&! Oc Ns Ar variable
E 8
.Op Ar operator variable ...
D 8
.Cx
E 2
A combination of ``.else'' followed by ``.ifdef''.
D 2
.TP
\&.elifndef [!] variable [ operator variable ...]
E 2
I 2
.Tp Cx Ic \&.elifndef
.Cx \&\ \&
.Op \&!
.Cx \&\ \&
.Ar variable
.Cx \&\ \&
E 8
I 8
.Xc
A combination of
.Ql Ic .else
followed by
.Ql Ic .ifdef .
.It Xo
.Ic .elifndef
.Oo \&! Oc Ns Ar variable
E 8
.Op Ar operator variable ...
D 8
.Cx
E 2
A combination of ``.else'' followed by ``.ifndef''.
D 2
.TP
\&.elifmake [!] target [ operator target ...]
E 2
I 2
.Tp Cx Ic \&.elifmake
.Cx \&\ \&
.Op \&!
.Cx \&\ \&
.Ar target
.Cx \&\ \&
E 8
I 8
.Xc
A combination of
.Ql Ic .else
followed by
.Ql Ic .ifndef .
.It Xo
.Ic .elifmake
.Oo \&! Oc Ns Ar target
E 8
.Op Ar operator target ...
D 8
.Cx
E 2
A combination of ``.else'' followed by ``.ifmake''.
D 2
.TP
\&.elifnmake [!] target [ operator target ...]
E 2
I 2
.Tp Cx Ic \&.elifnmake
.Cx \&\ \&
.Op \&!
.Cx \&\ \&
.Ar target
.Cx \&\ \&
E 8
I 8
.Xc
A combination of
.Ql Ic .else
followed by
.Ql Ic .ifmake .
.It Xo
.Ic .elifnmake
.Oo \&! Oc Ns Ar target
E 8
.Op Ar operator target ...
D 8
.Cx
E 2
A combination of ``.else'' followed by ``.ifnmake''.
D 2
.TP
\&.endif
E 2
I 2
.Tp Ic \&.endif
E 8
I 8
.Xc
A combination of
.Ql Ic .else
followed by
.Ql Ic .ifnmake .
.It Ic .endif
E 8
E 2
End the body of the conditional.
D 2
.PP
E 2
I 2
D 8
.Tp
E 8
I 8
.El
E 8
.Pp
E 2
The
D 2
.I operator
E 2
I 2
.Ar operator
E 2
may be any one of the following:
D 2
.TP
||
E 2
I 2
D 8
.Tp Cm \&|\&|
E 8
I 8
.Bl -tag -width "Cm XX"
.It Cm \&|\&|
E 8
E 2
logical OR
D 2
.TP
&&
Logical AND; of higher precedence than ``||''.
.PP
E 2
I 2
D 8
.Tp Cm \&&&
Logical AND; of higher precedence than ``''.
.Tp
E 8
I 8
.It Cm \&&&
Logical
.Tn AND ;
of higher precedence than
.Dq .
.El
E 8
.Pp
E 2
As in C,
D 2
.I make
E 2
I 2
.Nm make
E 2
will only evaluate a conditional as far as is necessary to determine
its value.
D 11
Parenthesis may be used to change the order of evaluation.
E 11
I 11
D 15
Parentheses may be used to change the order of evaluation.
E 15
I 15
Parenthesis may be used to change the order of evaluation.
E 15
E 11
D 8
The boolean operator ``!'' may be used to logically negate an entire
E 8
I 8
The boolean operator
.Ql Ic \&!
may be used to logically negate an entire
E 8
conditional.
D 8
It is of higher precendence than ``&&''.
E 8
I 8
D 13
It is of higher precendence than
E 13
I 13
It is of higher precedence than
E 13
.Ql Ic \&&& .
E 8
D 2
.PP
E 2
I 2
.Pp
E 2
The value of
D 2
.I expression
E 2
I 2
.Ar expression
E 2
may be any of the following:
D 2
.TP
defined
E 2
I 2
D 8
.Tp Ic defined
E 8
I 8
.Bl -tag -width Ic defined
.It Ic defined
E 8
E 2
Takes a variable name as an argument and evaluates to true if the variable
has been defined.
D 2
.TP
make
E 2
I 2
D 8
.Tp Ic make
E 8
I 8
.It Ic make
E 8
E 2
Takes a target name as an argument and evaluates to true if the target
was specified as part of
D 2
.IR make 's
E 2
I 2
D 8
.Cx Nm make
.Cx \'s
.Cx
E 8
I 8
.Nm make Ns 's
E 8
E 2
command line or was declared the default target (either implicitly or
D 8
explicitly, see .MAIN) before the line containing the conditional.
D 2
.TP
empty
E 2
I 2
.Tp Ic empty
E 8
I 8
explicitly, see
.Va .MAIN )
before the line containing the conditional.
.It Ic empty
E 8
E 2
D 11
Takes a variable, with possible modifiers, and evalutes to true if
E 11
I 11
Takes a variable, with possible modifiers, and evaluates to true if
E 11
the expansion of the variable would result in an empty string.
D 2
.TP
exists
E 2
I 2
D 8
.Tp Ic exists
E 8
I 8
.It Ic exists
E 8
E 2
Takes a file name as an argument and evaluates to true if the file exists.
D 8
The file is searched for on the system search path (see .PATH).
D 2
.TP
target
E 2
I 2
.Tp Ic target
E 8
I 8
The file is searched for on the system search path (see
.Va .PATH ) .
.It Ic target
E 8
E 2
Takes a target name as an argument and evaluates to true if the target
has been defined.
D 2
.PP
.I Expression
E 2
I 2
D 8
.Tp
E 8
I 8
.El
E 8
.Pp
.Ar Expression
E 2
D 9
may also be an arithmetic or string comparison, with the left-hand side
being a variable expansion.
The standard C relational operators are all supported, and the usual
number/base conversion is performed.
Note, octal numbers are not supported.
D 8
If the righthand value of a ``=='' or ``!='' operator begins with a
quotation mark (``"'') a string comparison is done between the expanded
E 8
I 8
If the righthand value of a
E 9
I 9
may also be an arithmetic or string comparison.  Variable expansion is
performed on both sides of the comparison, after which the integral
values are compared.  A value is interpreted as hexadecimal if it is
preceded by 0x, otherwise it is decimal; octal numbers are not supported.
The standard C relational operators are all supported.  If after
variable expansion, either the left or right hand side of a
E 9
.Ql Ic ==
or
.Ql Ic "!="
D 9
operator begins with a
quotation mark
.Pq Ql \*q
a string comparison is done between the expanded
E 8
variable and the text between the quotation marks.
E 9
I 9
operator is not an integral value, then
string comparison is performed between the expanded
variables.
E 9
If no relational operator is given, it is assumed that the expanded
variable is being compared against 0.
D 2
.PP
E 2
I 2
.Pp
E 2
When
D 2
.I make
E 2
I 2
.Nm make
E 2
is evaluating one of these conditional expression, and it encounters
a word it doesn't recognize, either the ``make'' or ``defined''
expression is applied to it, depending on the form of the conditional.
D 8
If the form is ``.ifdef'' or ``.ifndef'', the ``defined'' expression
E 8
I 8
If the form is
.Ql Ic .ifdef
or
.Ql Ic .ifndef ,
the ``defined'' expression
E 8
is applied.
D 8
Similarly, if the form is ``.ifmake'' or ``.ifnmake'', the ``make''
E 8
I 8
Similarly, if the form is
.Ql Ic .ifmake
or
.Ql Ic .ifnmake , the ``make''
E 8
expression is applied.
D 2
.PP
E 2
I 2
.Pp
E 2
If the conditional evaluates to true the parsing of the makefile continues
as before.
If it evaluates to false, the following lines are skipped.
D 8
In both cases this continues until a ``.else'' or ``.endif'' is found.
E 8
I 8
In both cases this continues until a
.Ql Ic .else
or
.Ql Ic .endif
is found.
I 9
.Pp 
For loops are typically used to apply a set of rules to a list of files.
The syntax of a for loop is:
.Bl -tag -width Ds
.It Xo
.Ic \&.for
.Ar variable 
.Ic in 
.Ar expression
.Xc
.It Xo
<make-rules>
.Xc
.It Xo
.Ic \&.endfor
.Xc
.El
After the for
.Ic expression 
is evaluated, it is split into words. The 
iteration
.Ic variable
is successively set to each word, and substituted in the 
.Ic make-rules 
inside the body of the for loop.
E 9
E 8
D 2
.SH COMMENTS
E 2
I 2
.Sh COMMENTS
E 2
D 8
Comments begin with a hash (``#'') character, anywhere but in a shell
E 8
I 8
Comments begin with a hash
.Pq Ql \&#
character, anywhere but in a shell
E 8
command line, and continue to the end of the line.
D 2
.SH "SPECIAL SOURCES"
.TP
\&.IGNORE
E 2
I 2
.Sh SPECIAL SOURCES
D 8
.Tp Ic \&.IGNORE
E 8
I 8
.Bl -tag -width Ic .IGNORE
.It Ic .IGNORE
E 8
E 2
Ignore any errors from the commands associated with this target, exactly
D 8
as if they all were preceded by a dash (``\-'').
D 2
.TP
\&.MAKE
E 2
I 2
.Tp Ic \&.MAKE
E 2
Execute the commands associated with this target even if the -n or -t
E 8
I 8
as if they all were preceded by a dash
.Pq Ql \- .
.It Ic .MAKE
Execute the commands associated with this target even if the
.Fl n
or
.Fl t
E 8
options were specified.
Normally used to mark recursive
D 2
.IR make 's.
.TP
\&.NOTMAIN
E 2
I 2
D 8
.Cx Nm make
.Cx \'s .
.Cx
.Tp Ic \&.NOTMAIN
E 8
I 8
.Nm make Ns 's .
.It Ic .NOTMAIN
E 8
E 2
Normally
D 2
.I make
E 2
I 2
.Nm make
E 2
selects the first target it encounters as the default target to be built
if no target was specified.
This source prevents this target from being selected.
D 2
.TP
\&.OPTIONAL
E 2
I 2
D 8
.Tp Ic \&.OPTIONAL
E 8
I 8
.It Ic .OPTIONAL
E 8
E 2
If a target is marked with this attribute and
D 2
.I make
E 2
I 2
.Nm make
E 2
can't figure out how to create it, it will ignore this fact and assume
the file isn't needed or already exists.
I 17
.It Ic .PHONY
If this special target is present in a Makefile, all sources for the
target will considered to be `phony' targets. I.e. they don't refer
to real files, and they will always be considered out-of-date. This
is useful in case one wants to create a target called `install', in
a directory where a file `install' already exists.
E 17
D 2
.TP
\&.PRECIOUS
E 2
I 2
D 8
.Tp Ic \&.PRECIOUS
E 8
I 8
.It Ic .PRECIOUS
E 8
E 2
When
D 2
.I make
E 2
I 2
.Nm make
E 2
is interrupted, it removes any partially made targets.
This source prevents the target from being removed.
D 2
.TP
\&.SILENT
E 2
I 2
D 8
.Tp Ic \&.SILENT
E 8
I 8
.It Ic .SILENT
E 8
E 2
Do not echo any of the commands associated with this target, exactly
D 8
as if they all were preceded by an at sign (``@'').
D 2
.TP
\&.USE
E 2
I 2
.Tp Ic \&.USE
E 8
I 8
as if they all were preceded by an at sign
.Pq Ql @ .
.It Ic .USE
E 8
E 2
Turn the target into
D 2
.IR make 's
E 2
I 2
D 8
.Cx Nm make
.Cx \'s .
.Cx
E 8
I 8
.Nm make Ns 's .
E 8
E 2
version of a macro.
When the target is used as a source for another target, the other target
D 8
acquires the commands, sources, and attributes (except for .USE) of the
E 8
I 8
acquires the commands, sources, and attributes (except for
.Ic .USE )
of the
E 8
source.
D 8
If the target already has commands, the .USE target's commands are appended
E 8
I 8
If the target already has commands, the
.Ic .USE
target's commands are appended
E 8
to them.
D 2
.SH "SPECIAL TARGETS"
E 2
I 2
D 8
.Tp
E 8
I 8
.El
E 8
.Sh "SPECIAL TARGETS"
E 2
Special targets may not be included with other targets, i.e. they must be
the only target specified.
D 2
.TP
\&.BEGIN
E 2
I 2
D 8
.Tp Ic \&.BEGIN
E 8
I 8
.Bl -tag -width Ic .BEGIN
.It Ic .BEGIN
E 8
E 2
Any command lines attached to this target are executed before anything
else is done.
D 2
.TP
\&.DEFAULT
E 2
I 2
D 8
.Tp Ic \&.DEFAULT
E 2
This is sort of a .USE rule for any target (that was used only as a
E 8
I 8
.It Ic .DEFAULT
This is sort of a
.Ic .USE
rule for any target (that was used only as a
E 8
source) that
D 2
.I make
E 2
I 2
.Nm make
E 2
can't figure out any other way to create.
Only the shell script is used.
D 8
The .IMPSRC variable of a target that inherits .DEFAULT's commands is set
E 8
I 8
The
.Ic .IMPSRC
variable of a target that inherits
.Ic .DEFAULT Ns 's
commands is set
E 8
to the target's own name.
D 2
.TP
\&.END
E 2
I 2
D 8
.Tp Ic \&.END
E 8
I 8
.It Ic .END
E 8
E 2
Any command lines attached to this target are executed after everything
else is done.
D 2
.TP
\&.IGNORE
E 2
I 2
D 8
.Tp Ic \&.IGNORE
E 2
Mark each of the sources with the .IGNORE attribute.
If no sources are specified, this is the equivalent of specifying the -i
E 8
I 8
.It Ic .IGNORE
Mark each of the sources with the
.Ic .IGNORE
attribute.
If no sources are specified, this is the equivalent of specifying the
.Fl i
E 8
option.
D 2
.TP
\&.INTERRUPT
E 2
I 2
D 8
.Tp Ic \&.INTERRUPT
E 8
I 8
.It Ic .INTERRUPT
E 8
E 2
If
D 2
.I make
E 2
I 2
.Nm make
E 2
is interrupted, the commands for this target will be executed.
D 2
.TP
\&.MAIN
E 2
I 2
D 8
.Tp Ic \&.MAIN
E 8
I 8
.It Ic .MAIN
E 8
E 2
If no target is specified when
D 2
.I make
E 2
I 2
.Nm make
E 2
is invoked, this target will be built.
D 2
.TP
\&.MAKEFLAGS
E 2
I 2
D 8
.Tp Ic \&.MAKEFLAGS
E 8
I 8
.It Ic .MAKEFLAGS
E 8
E 2
This target provides a way to specify flags for
D 2
.I make
E 2
I 2
.Nm make
E 2
when the makefile is used.
D 8
The flags are as if typed to the shell, though the -f option will have
E 8
I 8
The flags are as if typed to the shell, though the
.Fl f
option will have
E 8
no effect.
D 2
.TP
\&.PATH
E 2
I 2
D 8
.Tp Ic \&.PATH
E 8
I 8
.It Ic .PATH
E 8
E 2
The sources are directories which are to be searched for files not
found in the current directory.
If no sources are specified, any previously specified directories are
deleted.
D 2
.TP
\&.PRECIOUS
E 2
I 2
D 8
.Tp Ic \&.PRECIOUS
E 2
Apply the .PRECIOUS attribute to any specified sources.
If no sources are specified, the .PRECIOUS attribute is applied to every
E 8
I 8
.It Ic .PRECIOUS
Apply the
.Ic .PRECIOUS
attribute to any specified sources.
If no sources are specified, the
.Ic .PRECIOUS
attribute is applied to every
E 8
target in the file.
D 2
.TP
\&.SILENT
E 2
I 2
D 8
.Tp Ic \&.SILENT
E 2
Apply the .SILENT attribute to any specified sources.
If no sources are specified, the .SILENT attribute is applied to every
E 8
I 8
.It Ic .SILENT
Apply the
.Ic .SILENT
attribute to any specified sources.
If no sources are specified, the
.Ic .SILENT
attribute is applied to every
E 8
command in the file.
D 2
.TP
\&.SUFFIXES
E 2
I 2
D 8
.Tp Ic \&.SUFFIXES
E 8
I 8
.It Ic .SUFFIXES
E 8
E 2
Each source specifies a suffix to
D 2
.IR make .
E 2
I 2
D 8
.Nm make  .
E 8
I 8
.Nm make .
E 8
E 2
D 13
If no sources are specified, any previous specifies suffices are deleted.
E 13
I 13
If no sources are specified, any previous specified suffices are deleted.
E 13
D 2
.SH FILES
.ta \w'/usr/share/mk\ \ \ 'u
/usr/share/mk	system makefile directory
.br
sys.mk	include system makefile
.br
bsd.mk	BSD source tree template
.br
subdir.mk	BSD source tree subdirectory template
.SH SEE ALSO
.SH DIAGNOSTICS
.SH BUGS
E 2
I 2
.Sh ENVIRONMENT
D 3
.Nm make
can utilize the
E 3
I 3
.Nm Make
utilizes the following environment variables, if they exist:
E 3
.Ev MAKE ,
.Ev MAKEFLAGS
and
D 3
.Ev MAKEOBJDIR
environment variables.
E 3
I 3
.Ev MAKEOBJDIR .
E 3
.Sh FILES
D 8
.Dw /usr/share/mk
.Di L
D 5
.Dp Pa /usr/share/mk
E 5
I 5
.Dp /usr/share/mk
E 5
system makefile directory
D 5
.Dp Pa sys.mk
include system makefile
.Dp Pa bsd.mk
BSD source tree template
.Dp Pa subdir.mk
BSD source tree subdirectory template
E 5
I 5
.Dp .depend
E 8
I 8
.Bl -tag -width /usr/share/mk -compact
.It .depend
E 8
list of dependencies
D 8
.Dp Makefile
E 8
I 8
.It Makefile
E 8
list of dependencies
D 8
.Dp makefile
E 8
I 8
.It makefile
E 8
list of dependencies
D 8
.Dp sys.mk
E 8
I 8
.It sys.mk
E 8
system makefile
E 5
D 8
.Dp
E 8
I 8
.It /usr/share/mk
system makefile directory
.El
E 8
.Sh SEE ALSO
I 5
.Xr mkdep 1
E 5
.Sh HISTORY
I 8
A
E 8
.Nm Make
D 8
appeared in Version 7 AT&T UNIX.
E 8
I 8
command appeared in
.At v7 .
E 8
D 5
The
.Nm make
this man page describes is derived from code contributed by Adam
de Boor.
E 5
E 2
E 1
