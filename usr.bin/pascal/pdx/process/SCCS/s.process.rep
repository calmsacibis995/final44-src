h51097
s 00002/00002/00081
d D 8.1 93/06/06 15:43:08 bostic 9 8
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00005/00004/00078
d D 5.5 91/04/16 15:17:40 bostic 8 7
c new copyright; att/bsd/shared
e
s 00008/00008/00074
d D 5.4 88/01/03 00:34:46 bostic 7 6
c neither K&R or ANSI C allow untyped function declarations
e
s 00016/00001/00066
d D 5.3 87/04/07 15:55:19 mckusick 6 5
c port to tahoe by Nir peleg of CCI
e
s 00002/00004/00065
d D 5.2 85/06/07 20:39:23 mckusick 5 4
c fix copyright
e
s 00008/00003/00061
d D 5.1 85/06/07 20:14:13 mckusick 4 3
c Add copyright
e
s 00006/00001/00058
d D 1.3 83/02/08 18:06:03 linton 3 2
c modifications for running on a sun
e
s 00001/00001/00058
d D 1.2 82/01/18 21:59:27 linton 2 1
c sccsid
e
s 00059/00000/00000
d D 1.1 82/01/18 19:20:48 linton 1 0
c date and time created 82/01/18 19:20:48 by linton
e
u
U
t
T
I 4
D 8
/*
 * Copyright (c) 1982 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
E 8
I 8
/*-
D 9
 * Copyright (c) 1982 The Regents of the University of California.
 * All rights reserved.
E 9
I 9
 * Copyright (c) 1982, 1993
 *	The Regents of the University of California.  All rights reserved.
E 9
 *
 * %sccs.include.redist.c%
E 8
I 5
 *
 *	%W% (Berkeley) %G%
E 5
 */
E 4
I 3
D 5

E 3
I 1
D 4
/* Copyright (c) 1982 Regents of the University of California */

D 2
static char sccsid[] = "%Z%%M% %I% %G%";
E 2
I 2
D 3
/* static char sccsid[] = "%Z%%M% %I% %G%"; */
E 3
I 3
/* static char sccsid[] = "@(#)process.rep 1.2 1/18/82"; */
E 4
I 4
#ifndef lint
static char sccsid[] = "%W% (Berkeley) %G%";
#endif not lint
E 5
E 4
E 3
E 2

/*
 * This file defines the representation of a process.
 * It is MACHINE DEPENDENT.
 */

#define STOPPED 0177
#define FINISHED 0

I 3
#ifdef vax
E 3
#define NREG 12			/* maximum number of saved registers */
I 3
D 6
#else
E 6
I 6
#endif
#ifdef tahoe
#define	NREG 13
#endif
#ifdef mc68000
E 6
#define NREG 14			/* maximum number of saved registers */
#endif
E 3
#define CSIZE 101		/* size of instruction cache */

/*
 * Cache-ing of instruction segment is done to reduce the number
 * of calls to ptrace.
 */

typedef struct {
	WORD addr;
	WORD val;
} CACHEWORD;

/*
 * This structure holds the information we need from the user structure.
 */

struct process {
	int pid;		/* process being traced */
	WORD reg[NREG];		/* process's registers */
I 6
#ifdef tahoe
	WORD fp, sp, pc;	/* special registers */
#else
E 6
	WORD ap, fp, sp, pc;	/* special registers */
I 6
#endif
E 6
	WORD oreg[NREG];	/* registers when process last stopped */
	WORD oap, ofp, osp, opc;/* special registers when process stopped */
	int status;		/* either STOPPED or FINISHED */
	int signo;		/* signal that stopped process */
	int exitval;		/* return value from exit() */
	long sigset;		/* bit array of traced signals */
	CACHEWORD word[CSIZE];	/* text segment cache */
};

/*
 * Process manipulation routines local to this module.
 */

D 7
pstart();			/* start up a process */
pcont();			/* continue execution */
pstep();			/* single step */
pio();				/* process memory move */
psigtrace();			/* catch/don't catch a signal */
unsetsigtraces();		/* don't catch any signals */
E 7
I 7
int pstart();			/* start up a process */
int pcont();			/* continue execution */
int pstep();			/* single step */
int pio();			/* process memory move */
int psigtrace();		/* catch/don't catch a signal */
int unsetsigtraces();		/* don't catch any signals */
E 7

/*
 * These definitions are for the arguments to "pio".
 */

typedef enum { PREAD, PWRITE } PIO_OP;
typedef enum { TEXTSEG, DATASEG } PIO_SEG;
I 6

/* macros for things that used to be functions */

#define	iread(buf, addr, nbytes)	dread(buf, addr+ENDOFF, nbytes)
#define	iwrite(buf, addr, nbytes)	dwrite(buf, addr+ENDOFF, nbytes)
D 7
#define dread(buf, addr, nbytes)	drdwr(PREAD, buf, addr, nbytes)
#define dwrite(buf, addr, nbytes)	drdwr(PWRITE, buf, addr, nbytes)
E 7
I 7
#define	dread(buf, addr, nbytes)	drdwr(PREAD, buf, addr, nbytes)
#define	dwrite(buf, addr, nbytes)	drdwr(PWRITE, buf, addr, nbytes)
E 7
E 6
E 1
