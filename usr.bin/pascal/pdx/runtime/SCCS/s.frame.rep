h48617
s 00002/00002/00037
d D 8.1 93/06/06 15:44:37 bostic 6 5
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00005/00004/00034
d D 5.3 91/04/16 15:15:32 bostic 5 4
c new copyright; att/bsd/shared
e
s 00002/00004/00036
d D 5.2 85/06/07 20:37:56 mckusick 4 3
c fix copyright
e
s 00008/00002/00032
d D 5.1 85/06/07 20:14:57 mckusick 3 2
c Add copyright
e
s 00001/00001/00033
d D 1.2 82/01/18 22:03:31 linton 2 1
c sccsid
e
s 00034/00000/00000
d D 1.1 82/01/18 19:21:06 linton 1 0
c date and time created 82/01/18 19:21:06 by linton
e
u
U
t
T
I 1
D 3
/* Copyright (c) 1982 Regents of the University of California */
E 3
I 3
D 5
/*
 * Copyright (c) 1982 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
E 5
I 5
/*-
D 6
 * Copyright (c) 1980 The Regents of the University of California.
 * All rights reserved.
E 6
I 6
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
E 6
 *
 * %sccs.include.redist.c%
E 5
I 4
 *
 *	%W% (Berkeley) %G%
E 4
 */
E 3
D 4

D 2
static char sccsid[] = "%Z%%M% %I% %G%";
E 2
I 2
D 3
/* static char sccsid[] = "%Z%%M% %I% %G%"; */
E 3
I 3
#ifndef lint
static char sccsid[] = "%W% (Berkeley) %G%";
#endif not lint
E 4
E 3
E 2

/*
 * Definitions for accessing stack frames.
 */

#define MAINBLK		1

/*
 * Structure of an activation record's block mark.  See the
 * PX implementation notes for more details.
 */

struct frame {
	ADDRESS stackref;	/* for px self-checking */
	ADDRESS file;		/* current file information */
	ADDRESS blockp;		/* pointer to current block name */
	ADDRESS *save_loc;	/* saved local variable pointer */
	ADDRESS *save_disp;	/* saved dp contents */
	ADDRESS *save_dp;	/* saved dp */
	ADDRESS save_pc;	/* saved location counter */
	int save_lino;		/* saved source line number (never used) */
};

FRAME *curframe();		/* get the currently active frame */
FRAME *nextframe();		/* go up the stack */
FRAME *findframe();		/* find the frame for a given function */
ADDRESS entry();		/* get the entry address for a frame */
ADDRESS *dispval();		/* display associated with a given block */
ADDRESS *curdp();		/* return current display pointer */
ADDRESS *contents();		/* return the contents of display pointer */
ADDRESS stkaddr();		/* stack address associated with a frame */
E 1
