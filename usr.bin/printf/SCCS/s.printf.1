h46293
s 00002/00002/00244
d D 8.1 93/06/06 15:58:13 bostic 13 12
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00066/00064/00180
d D 5.11 91/07/24 22:44:21 cael 12 11
c mdoc version three
e
s 00003/00001/00241
d D 5.10 91/06/27 17:22:36 bostic 11 10
c add POSIX/IEEE contribution notice
e
s 00002/00000/00240
d D 5.9 91/03/14 00:25:14 cael 10 8
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00001/00000/00240
d R 5.9 91/03/13 20:36:46 cael 9 8
c add .Vx so tmac.andoc will call tmac.mdoc-old
e
s 00008/00010/00232
d D 5.8 90/07/24 22:50:14 cael 8 7
c .Xr botch fix
e
s 00142/00139/00100
d D 5.7 90/06/11 05:59:09 cael 7 6
c converted man page
e
s 00003/00003/00236
d D 5.6 90/04/18 09:53:19 bostic 6 5
c evaluate numerical arguments as C constants, i.e. 010 == 8, 0x10 == 16
e
s 00002/00005/00235
d D 5.5 89/02/16 16:50:55 bostic 5 4
c exit 0 on success, 1 on failure
e
s 00003/00000/00237
d D 5.4 89/02/13 21:22:17 bostic 4 3
c document possible loss of precision; no hexadecimal constants
e
s 00003/00005/00234
d D 5.3 89/02/12 20:03:13 bostic 3 2
c add %i
e
s 00004/00001/00235
d D 5.2 89/02/12 19:53:10 bostic 2 1
c add \\'
e
s 00236/00000/00000
d D 5.1 89/02/12 19:35:22 bostic 1 0
c date and time created 89/02/12 19:35:22 by bostic
e
u
U
t
T
I 1
D 7
.\" Copyright (c) 1989 The Regents of the University of California.
E 7
I 7
D 13
.\" Copyright (c) 1989, 1990 The Regents of the University of California.
E 7
.\" All rights reserved.
E 13
I 13
.\" Copyright (c) 1989, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 13
.\"
I 11
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
E 11
D 7
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 7
I 7
D 12
.\" %sccs.include.redist.man%
E 12
I 12
.\" %sccs.include.redist.roff%
E 12
E 7
.\"
D 7
.\"	%W% (Berkeley) %G%
E 7
I 7
D 12
.\"     %W% (Berkeley) %G%
E 12
I 12
.\"	%W% (Berkeley) %G%
E 12
E 7
.\"
I 10
D 11
.Vx
E 11
D 12
.Vx
E 12
E 10
D 7
.TH PRINTF 1 "%Q%
E 7
I 7
.Dd %Q%
.Dt PRINTF 1
E 7
D 12
.AT 1
E 12
I 12
.Os
E 12
D 7
.SH NAME
printf \- formatted output
.SH SYNOPSIS
.PP
.B printf format [ arguments ... ]
.SH DESCRIPTION
.I Printf
E 7
I 7
.Sh NAME
.Nm printf
.Nd formatted output
.Sh SYNOPSIS
D 12
.Pp
E 12
.Nm printf format
D 12
.Op  arguments  ...
E 12
I 12
.Op arguments  ...
E 12
.Sh DESCRIPTION
.Nm Printf
E 7
formats and prints its arguments, after the first, under control
of the
D 7
.IR format .
E 7
I 7
.Ar format  .
E 7
The
D 7
.I format
E 7
I 7
.Ar format
E 7
is a character string which contains three types of objects: plain characters,
which are simply copied to standard output, character escape sequences which
are converted and copied to the standard output, and format specifications,
each of which causes printing of the next successive
D 7
.IR argument .
.PP
E 7
I 7
.Ar argument  .
.Pp
E 7
The
D 7
.I arguments
E 7
I 7
.Ar arguments
E 7
after the first are treated as strings if the corresponding format is
either
D 7
.I c
E 7
I 7
.Cm c
E 7
or
D 7
.IR s ;
E 7
I 7
D 12
.Cm s  ;
E 12
I 12
.Cm s ;
E 12
E 7
otherwise it is evaluated as a C constant, with the following extensions:
D 6
.in +0.5i
E 6
I 6
D 7
.sp
.RS
E 7
I 7
.Pp
D 12
.Df I
E 12
I 12
.Bl -bullet -offset indent -compact
.It
E 12
E 7
E 6
A leading plus or minus sign is allowed.
I 7
D 12
.br
E 12
I 12
.It
E 12
E 7
D 6
.br
E 6
If the leading character is a single or double quote, or not a digit,
plus, or minus sign, the value is the ASCII code of the next character.
D 6
.in -0.5i
E 6
I 6
D 7
.RE
E 6
.PP
E 7
I 7
D 12
.De
E 12
I 12
.El
E 12
.Pp
E 7
The format string is reused as often as necessary to satisfy the
D 7
.IR arguments .
E 7
I 7
.Ar arguments  .
E 7
Any extra format specifications are evaluated with zero or the null
string.
D 7
.PP
E 7
I 7
.Pp
E 7
Character escape sequences are in backslash notation as defined in the
D 12
draft proposed ANSI C Standard X3J11.  The characters and their meanings
E 12
I 12
draft proposed
.Tn ANSI C
Standard
.Tn X3J11 .
The characters and their meanings
E 12
are as follows:
D 7
.TP
.B \ea
E 7
I 7
D 12
.Tw Ds
.Tp Cm \ea
E 12
I 12
.Bl -tag -width Ds -offset indent
.It Cm \ea
E 12
E 7
D 2
Write the ASCII ``bel'' character.
E 2
I 2
Write a <bell> character.
E 2
D 7
.TP
.B \eb
E 7
I 7
D 12
.Tp Cm \eb
E 12
I 12
.It Cm \eb
E 12
E 7
Write a <backspace> character.
D 7
.TP
.B \ef
E 7
I 7
D 12
.Tp Cm \ef
E 12
I 12
.It Cm \ef
E 12
E 7
Write a <form-feed> character.
D 7
.TP
.B \en
E 7
I 7
D 12
.Tp Cm \en
E 12
I 12
.It Cm \en
E 12
E 7
Write a <new-line> character.
D 7
.TP
.B \er
E 7
I 7
D 12
.Tp Cm \er
E 12
I 12
.It Cm \er
E 12
E 7
Write a <carriage return> character.
D 7
.TP
.B \et
E 7
I 7
D 12
.Tp Cm \et
E 12
I 12
.It Cm \et
E 12
E 7
Write a <tab> character.
D 7
.TP
.B \ev
E 7
I 7
D 12
.Tp Cm \ev
E 12
I 12
.It Cm \ev
E 12
E 7
Write a <vertical tab> character.
I 2
D 7
.TP
.B \e'
E 7
I 7
D 12
.Tp Cm \e\'
E 12
I 12
.It Cm \e\'
E 12
E 7
Write a <single quote> character.
E 2
D 7
.TP
.B \e\e
E 7
I 7
D 12
.Tp Cm \e\e
E 12
I 12
.It Cm \e\e
E 12
E 7
Write a backslash character.
D 7
.TP
.B \enum
E 7
I 7
D 12
.Tp Cx Cm \e
.Ar num
.Cx
E 7
D 8
Write an 8-bit character whose numeric value is the 1-, 2-, or 3-digit
E 8
I 8
Write an 8-bit character whose ASCII value is the 1-, 2-, or 3-digit
E 12
I 12
.It Cm \e Ns Ar num 
Write an 8-bit character whose
.Tn ASCII
value is the 1-, 2-, or 3-digit
E 12
E 8
octal number
D 7
.IR num .
.PP
E 7
I 7
D 12
.Ar num  .
.Tp
E 12
I 12
.Ar num .
.El
E 12
.Pp
E 7
Each format specification is introduced by the percent character
(``%'').
D 12
The remainder of the format specification includes, in the
following order:
D 7
.TP
.B \(bu
E 7
I 7
.Pp
E 7
Zero or more of the following flags:
D 7
.RS
.TP
.B \(bu
a `#' character
E 7
I 7
.Pp
.Ds I
.Tw Ds
.Tp Cm #
E 12
I 12
The remainder of the format specification includes,
in the following order:
.Bl -tag -width Ds
.It "Zero or more of the following flags:"
.Bl -tag -width Ds
.It Cm #
E 12
A `#' character
E 7
specifying that the value should be printed in an ``alternate form''.
D 7
For 
.BR c ,
.BR d ,
E 7
I 7
For
.Cm c  ,
.Cm d ,
E 7
and
D 7
.BR s ,
E 7
I 7
.Cm s  ,
E 7
formats, this option has no effect.  For the
D 7
.B o
E 7
I 7
.Cm o
E 7
formats the precision of the number is increased to force the first
character of the output string to a zero.  For the
D 7
.BR x ( X )
E 7
I 7
.Cm x
.Pq Cm X
E 7
format, a non-zero result has the string
D 7
.BR 0x ( 0X )
prepended to it.  For 
.BR e ,
.BR E ,
.BR f ,
.BR g ,
E 7
I 7
.Li 0x
.Pq Li 0X
prepended to it.  For
.Cm e  ,
.Cm E ,
.Cm f  ,
.Cm g ,
E 7
and
D 7
.BR G ,
E 7
I 7
.Cm G  ,
E 7
formats, the result will always contain a decimal point, even if no
digits follow the point (normally, a decimal point only appears in the
results of those formats if a digit follows the decimal point).  For
D 7
.B g
E 7
I 7
.Cm g
E 7
and
D 7
.B G
E 7
I 7
.Cm G
E 7
formats, trailing zeros are not removed from the result as they
would otherwise be;
D 7
.TP
.B \(bu
a minus sign `\-' which specifies
.I "left adjustment"
E 7
I 7
D 12
.Tp Cm \&\-
E 12
I 12
.It Cm \&\-
E 12
A minus sign `\-' which specifies
.Em left adjustment
E 7
of the output in the indicated field;
D 7
.TP
.B \(bu
a `+' character specifying that there should always be
E 7
I 7
D 12
.Tp Cm \&+
E 12
I 12
.It Cm \&+
E 12
A `+' character specifying that there should always be
E 7
a sign placed before the number when using signed formats.
D 7
.TP
.B \(bu
a space specifying that a blank should be left before a positive number
E 7
I 7
D 12
.Tp Sq \&\ \&
E 12
I 12
.It Sq \&\ \&
E 12
A space specifying that a blank should be left before a positive number
E 7
for a signed format.  A `+' overrides a space if both are used;
D 7
.TP
.B \(bu
a zero `0' character indicating that zero-padding should be used
E 7
I 7
D 12
.Tp Cm \&0
E 12
I 12
.It Cm \&0
E 12
A zero `0' character indicating that zero-padding should be used
E 7
rather than blank-padding.  A `\-' overrides a `0' if both are used;
D 7
.RE
.TP
.B \(bu
an optional digit string specifying a
.I "field width;"
E 7
I 7
D 12
.Tp
.De
.Pp 
.Tw Ds
.Tp Field Width:
E 12
I 12
.El
.It "Field Width:"
E 12
An optional digit string specifying a
.Em field width ;
E 7
if the output string has fewer characters than the field width it will
be blank-padded on the left (or right, if the left-adjustment indicator
has been given) to make up the field width (note that a leading zero
is a flag, but an embedded zero is part of a field width);
D 7
.TP
.B \(bu
an optional period, followed by an optional digit string giving a
.I precision
E 7
I 7
D 12
.Tp Precision:
E 12
I 12
.It Precision:
E 12
An optional period,
.Sq Cm \&.\& ,
followed by an optional digit string giving a
.Em precision
E 7
which specifies the number of digits to appear after the decimal point,
D 7
for e- and f-formats, or the maximum number of characters to be printed
E 7
I 7
for
.Cm e
and 
.Cm f
formats, or the maximum number of characters to be printed
E 7
from a string; if the digit string is missing, the precision is treated
as zero;
D 7
.TP
.B \(bu
a character which indicates the type of format to use.
.PP
A field width or precision may be `*' instead of a digit string.
E 7
I 7
D 12
.Tp Format:
E 12
I 12
.It Format:
E 12
A character which indicates the type of format to use (one of
.Cm diouxXfwEgGcs ) .
D 12
.Tp
E 12
I 12
.El
E 12
.Pp
A field width or precision may be
.Sq Cm \&*
instead of a digit string.
E 7
In this case an
D 7
.I argument
E 7
I 7
.Ar argument
E 7
supplies the field width or precision.
D 7
.PP
E 7
I 7
.Pp
E 7
The format characters and their meanings are:
D 7
.TP
D 3
.B doux
E 3
I 3
.B diouXx
E 7
I 7
D 12
.Tw Fl
.Tp Cm diouXx
E 12
I 12
.Bl -tag -width Fl
.It Cm diouXx
E 12
E 7
E 3
The
D 7
.I argument
E 7
I 7
.Ar argument
E 7
D 3
is printed as a signed decimal, unsigned decimal, unsigned octal, or
unsigned hexadecimal notation respectively.  A ``X'' may be used as a
format character as well; it is identical to ``x'' except that the
alternate form has ``X'' prepended instead of ``x''.
E 3
I 3
is printed as a signed decimal (d or i), unsigned decimal, unsigned octal,
or unsigned hexadecimal (X or x), respectively.
E 3
D 7
.TP
.B f
E 7
I 7
D 12
.Tp Cm f
E 12
I 12
.It Cm f
E 12
E 7
The
D 7
.I argument
is printed in the style `[\fB\-\fR]ddd.ddd' where the number of d's
E 7
I 7
.Ar argument
is printed in the style `[\-]ddd.ddd' where the number of d's
E 7
after the decimal point is equal to the precision specification for
the argument.
D 8
If the precision is missing, 6 digits are printed after the decimal point;
if the precision is explicitly 0, no digits and no decimal point are printed.
E 8
I 8
If the precision is missing, 6 digits are given; if the precision
is explicitly 0, no digits and no decimal point are printed.
E 8
D 7
.TP
.B eE
E 7
I 7
D 12
.Tp Cm eE
E 12
I 12
.It Cm eE
E 12
E 7
The
D 7
.I argument
is printed in the style `[\fB\-\fR]d\fB.\fRddd\fBe\fR\(+-dd' where there
E 7
I 7
.Ar argument
is printed in the style
D 12
.Cx `[-]d.ddd
E 12
.Cm e
D 12
.Cx \(+-dd\'
.Cx
E 12
I 12
.`[-]d.ddd Ns \(+-dd\' 
E 12
where there
E 7
is one digit before the decimal point and the number after is equal to
the precision specification for the argument; when the precision is
D 8
missing, 6 digits are printed after the decimal point.
E 8
I 8
missing, 6 digits are produced.
E 8
An upper-case E is used for an `E' format.
D 7
.TP
.B gG
E 7
I 7
D 12
.Tp Cm gG
E 12
I 12
.It Cm gG
E 12
E 7
The
D 7
.I argument
E 7
I 7
.Ar argument
E 7
is printed in style
D 7
.B f
E 7
I 7
.Cm f
E 7
or in style
D 7
.B e
.RB ( E )
E 7
I 7
.Cm e
.Pq Cm E
E 7
whichever gives full precision in minimum space.
D 7
.TP
.B c
E 7
I 7
D 12
.Tp Cm c
E 12
I 12
.It Cm c
E 12
E 7
The first character of
D 7
.I argument
E 7
I 7
.Ar argument
E 7
is printed.
D 7
.TP
.B s
E 7
I 7
D 12
.Tp Cm s
E 12
I 12
.It Cm s
E 12
E 7
Characters from the string
D 7
.I argument
E 7
I 7
.Ar argument
E 7
are printed until the end is reached or until the number of characters
indicated by the precision specification is reached; however if the
precision is 0 or missing, all characters in the string are printed.
D 7
.TP
.B %
E 7
I 7
D 12
.Tp Cm \&%
E 12
I 12
.It Cm \&%
E 12
E 7
Print a `%'; no argument is used.
D 7
.PP
E 7
I 7
D 12
.Tp
E 12
I 12
.El
E 12
.Pp
E 7
In no case does a non-existent or small field width cause truncation of
a field; padding takes place only if the specified field width exceeds
the actual width.
D 5
.SH DIAGNOSTICS
None.
E 5
D 7
.SH "RETURN VALUE"
D 5
.IR Printf 's
exit value is the number of characters printed.  If an error occurs,
printf exits with a -1.
E 5
I 5
.IR Printf
E 7
I 7
D 12
.Sh RETURN VALUE
E 12
I 12
.Sh RETURN VALUES
E 12
.Nm Printf
E 7
exits 0 on success, 1 on failure.
E 5
D 7
.SH "SEE ALSO"
printf(3)
I 4
.SH BUGS
E 7
I 7
.Sh SEE ALSO
.Xr printf 3
.Sh HISTORY
D 8
.Nm printf
as a command is new to 4.4 BSD.  It is modeled
after the
.Xr printf 3
function which appeared in
Version 6 AT&T UNIX.
E 8
I 8
D 12
.Nm Printf
as a command, appears in 4.3+Reno BSD.  It is modeled
E 12
I 12
The
.Nm printf
command appeared in
.Bx 4.3 Reno .
It is modeled
E 12
after the standard library function,
.Xr printf 3 .
E 8
.Sh BUGS
E 7
D 12
Since the number is translated from ASCII to floating-point, and
E 12
I 12
Since the floating point numbers are translated from
.Tn ASCII
to floating-point and
E 12
then back again, floating-point precision may be lost.
D 7
.PP
E 7
I 7
.Pp
E 7
D 12
ANSI hexadecimal character constants were deliberately not provided.
E 12
I 12
.Tn ANSI
hexadecimal character constants were deliberately not provided.
E 12
E 4
E 1
