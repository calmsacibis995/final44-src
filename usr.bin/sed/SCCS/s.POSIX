h57148
s 00000/00000/00198
d D 8.1 93/06/06 16:13:28 bostic 12 11
c 4.4BSD snapshot (revision 8.1)
e
s 00001/00005/00197
d D 5.11 93/03/07 14:44:36 bostic 11 10
c POSIX specifies non-overlapping, always; see description of maximal
c substrings of regular expressions in 2.8.2
e
s 00001/00004/00201
d D 5.10 93/03/07 14:25:39 bostic 10 9
c Since 'q' "branches to the end of the script", the general wording
c covers this one.
e
s 00016/00007/00189
d D 5.9 92/08/28 16:21:58 bostic 9 8
c talk about initial text stripping
e
s 00006/00032/00190
d D 5.8 92/08/28 15:35:20 bostic 8 7
c fix wording on #12, description of 'c' command with unmatched second
c address; from Doug McIlroy
e
s 00032/00008/00190
d D 5.7 92/08/27 17:42:47 bostic 7 6
c wordsmithing
e
s 00014/00007/00184
d D 5.6 92/08/26 15:29:11 bostic 6 5
c minor wordsmithing, typos
e
s 00019/00000/00171
d D 5.5 92/08/24 20:47:37 bostic 5 4
c add discussion of empty RE's
e
s 00044/00089/00127
d D 5.4 92/08/24 14:22:31 bostic 4 3
c new draft, from Diomidis
e
s 00152/00211/00064
d D 5.3 92/08/24 11:40:26 bostic 3 2
c new draft
e
s 00199/00102/00076
d D 5.2 92/08/24 10:43:54 bostic 2 1
c draft 2, sent to Diomidis
e
s 00178/00000/00000
d D 5.1 92/08/20 11:12:03 bostic 1 0
c date and time created 92/08/20 11:12:03 by bostic
e
u
U
t
T
I 1
#	%W% (Berkeley) %G%

D 2
	Comments on the IEEE P1003.2 Draft 11.2 September 1991
E 2
I 2
D 3
		Comments on the IEEE P1003.2 Draft 12
E 3
I 3
Comments on the IEEE P1003.2 Draft 12
     Part 2: Shell and Utilities
  Section 4.55: sed - Stream editor
E 3
E 2

D 2
		   Part 2: Shell and Utilities
		Section 4.55: sed - Stream editor
E 2
I 2
D 3
		     Part 2: Shell and Utilities
		  Section 4.55: sed - Stream editor
E 3
I 3
Diomidis Spinellis <dds@doc.ic.ac.uk>
Keith Bostic <bostic@cs.berkeley.edu>
E 3
E 2

I 2
D 3
		 Diomidis Spinellis <dds@doc.ic.ac.uk>
E 3
I 3
In the following paragraphs, "wrong" usually means "inconsistent with
historic practice", as most of the following comments refer to
undocumented inconsistencies between the historical versions of sed and
the POSIX 1003.2 standard.  All the comments are notes taken while
implementing a POSIX-compatible version of sed, and should not be
interpreted as official opinions or criticism towards the POSIX committee.
All uses of "POSIX" refer to section 4.55, Draft 12 of POSIX 1003.2.
E 3

E 2
D 3
In the following paragraphs, `wrong' means `inconsistent with historic
practice'.  Many of the comments refer to undocumented inconsistencies
between the historical versions of sed and the POSIX standard.  All the
comments are notes taken while implementing a POSIX-compatible version
of sed, and should not be interpreted as official opinions or criticism
D 2
towards the POSIX committee.  Many are insignificant, pedantic and even
E 2
I 2
towards the POSIX committee.  Some are insignificant, pedantic and even
E 2
wrong.
E 3
I 3
D 9
 1.	Historic implementations of sed strip the text arguments of the
	a, c and i commands of their initial blanks, i.e.
E 9
I 9
 1.	32V and BSD derived implementations of sed strip the text
	arguments of the a, c and i commands of their initial blanks,
	i.e.
E 9
E 3
D 2
		Diomidis Spinellis <dds@doc.ic.ac.uk>
E 2

D 2
[Some are significant and right, too.  -- Keith Bostic]
E 2
I 2
D 3
 1.	For the text argument of the a command it is not specified if
	lines are stripped of their initial blanks or not.  Historical
	practice, followed in this implementation, is to strip the
	blanks, i.e.:
E 2

E 3
D 2
1. For the text argument of the a command it is not specified if lines are
   stripped from their initial blanks or not.  There are some hints in D2
   11335-11337 and in D2 11512-11514, but nothing concrete.  Historical
   practice is to strip the blanks, i.e.:

E 2
	#!/bin/sed -f
	a\
		foo\
I 9
		\  indent\
E 9
		bar

D 2
   produces:
E 2
I 2
	produces:
E 2

	foo
I 9
	  indent
E 9
	bar

D 2
2. In the s command we assume that the w file is the last flag.  This is
   historical practice, but not specified in the standard.
E 2
I 2
D 3
 2.	Historical versions of sed required that the w flag must be the
	last flag to an s command as it takes an additional argument.
	This is not specified in the standard.
E 3
I 3
D 9
	POSIX does not specify this behavior.  This implementation follows
E 9
I 9
	POSIX does not specify this behavior as the System V versions of
	sed do not do this stripping.  The argument against stripping is
	that it is difficult to write sed scripts that have leading blanks
	if they are stripped.  The argument for stripping is that it is
	difficult to write readable sed scripts unless indentation is allowed
	and ignored, and leading whitespace is obtainable by entering a
	backslash in front of it.  This implementation follows the BSD
E 9
	historic practice.
E 3
E 2

D 2
3. In the s command the standard does not specify that a space must follow
   w.  Also the standard does not specify that any number of spaces after
   the w command are allowed and removed.
E 2
I 2
D 3
 3.	Historical versions of sed required that whitespace follow a w
	flag to an s command.  This is not specified in the standard.
	This implementation permits whitespace but does not require
	it.
E 3
I 3
D 4
 2.	Historic implementations ignore comments in the text of the i
	and a commands.  This implementation follows historic practice.
E 3
E 2

D 2
4. The specification of the a command is wrong.  With the current
   specification both of these scripts should produce the same output:
E 2
I 2
D 3
 4.	Historical versions of sed permitted any number of whitespace
	characters to follow the w command.  This is not specified in
	the standard.  This implementation permits whitespace but does
	not require it.
E 3
I 3
TK	I can't duplicate this -- the BSD version of sed doesn't, i.e.
TK		i\
TK		foo\
TK	#comment\
TK		bar
TK	prints
TK
TK		foo
TK		#comment
TK		bar
E 3
E 2

I 2
D 3
 5.	The specification of the a command is wrong.  With the current
	specification both of these scripts should produce the same
	output:
E 3
I 3
 3.	Historical versions of sed required that the w flag be the last
E 4
I 4
 2.	Historical versions of sed required that the w flag be the last
E 4
	flag to an s command as it takes an additional argument.  This
	is obvious, but not specified in POSIX.
E 3

E 2
D 3
	#!/bin/sed -f
	d
	a\
	hello
E 3
I 3
D 4
 4.	Historical versions of sed required that whitespace follow a w
E 4
I 4
 3.	Historical versions of sed required that whitespace follow a w
E 4
	flag to an s command.  This is not specified in POSIX.  This
	implementation permits whitespace but does not require it.
E 3

D 3
	#!/bin/sed -f
	a\
	hello
	d
E 3
I 3
D 4
 5.	Historical versions of sed permitted any number of whitespace
E 4
I 4
 4.	Historical versions of sed permitted any number of whitespace
E 4
	characters to follow the w command.  This is not specified in
	POSIX.  This implementation permits whitespace but does not
	require it.
E 3

D 2
5. The specification of the c command in conjunction with the specification
   of the default operation (D2 11293-11299) is wrong.  The default operation
   specifies that a newline is printed after the pattern space.  This is not
   the case when the pattern space has been deleted by a c command.
E 2
I 2
D 3
TK -- Diomidis, the current implementation looks wrong on this case.
E 3
I 3
D 4
 6.	The rule for the l command differs from historic practice.  Table
E 4
I 4
 5.	The rule for the l command differs from historic practice.  Table
E 4
	2-15 includes the various ANSI C escape sequences, including \\
	for backslash.  Some historical versions of sed displayed two
D 4
	digit octal numbers, too, not three as specified by POSIX.  The
	POSIX specification is a cleanup, and this implementation follows
	it.
E 4
I 4
	digit octal numbers, too, not three as specified by POSIX.  POSIX
	is a cleanup, and is followed by this implementation.
E 4
E 3
E 2

D 2
6. The rule for the l command differs from historic practice.  Table 2-15
   includes the various escape sequences including \\.  Is this meant by
   the standard?  Furthermore some versions of sed print two digit octal
   numbers.  Why does the standard require a three digit octal number?
   Normally the pattern space does not end with a newline.  Will an implict
   \n be printed?  Finaly the standard does not specify that a newline must
   follow the '$' sign (it seems logical to me).
E 2
I 2
D 3
 6.	The specification of the c command in conjunction with the
	specification of the default operation (D2 11293-11299) is
	wrong.  The default operation specifies that a newline is
	printed after the pattern space.  This is not the case when
	the pattern space has been deleted by a c command.
E 2

D 2
7. The specification for ! does not specify that for a single command the
   command must not contain an address specification whereas the command
   list can contain address specifications.
E 2
I 2
TK Diomidis, the spec seems right to me -- the language in 11293
TK talks about copying the pattern space to stdout -- if the pattern space
TK is deleted, it can't be copied.
E 2

D 2
8. The standard does not specify what happens with consequitive ! commands
   (e.g. /foo/!!!p)  Current implementations allow any number of !'s without
   changing behaviour.  It seems logical that each one should reverse the
   default behaviour.
E 2
I 2
 7.	The rule for the l command differs from historic practice.
	Table 2-15 includes the various ANSI C escape sequences,
	including \\ for backslash.  Some historical versions of
	sed displayed two digit octal numbers.  The POSIX
	specification is a cleanup, and this implementation follows
	to it.
E 2

D 2
9. The ; command separator is not allowed for the commands a c i w r : b t
   # and at the end of a w flag in the s command.
E 2
I 2
 8.	The specification for ! does not specify that for a single
E 3
I 3
D 4
 7.	The specification for ! does not specify that for a single
E 4
I 4
 6.	The POSIX specification for ! does not specify that for a single
E 4
E 3
	command the command must not contain an address specification
D 4
	whereas the command list can contain address specifications.
E 4
I 4
	whereas the command list can contain address specifications.  The
	specification for ! implies that "3!/hello/p" works, and it never
D 6
	has, historically.  (Note, "3!{ /hello/p }" does work.)
E 6
I 6
	has, historically.  Note,
E 6
E 4
E 2

I 6
		3!{
			/hello/p
		}

	does work.

E 6
D 2
10. The standard does not specify that if an end of file occurs on the
    execution of the n command the program terminates (e.g.
E 2
I 2
D 3
TK I think this is wrong: the script:
E 3
I 3
D 4
TK	I think this is wrong: the script:
E 3
TK
TK	3!p
TK
D 3
TK works fine.  Am I misunderstanding your point?
E 3
I 3
TK	works fine.  Am I misunderstanding your point?
DDS	Yes.  By the definition of command by POSIX 3!/hello/p should work
DDS	just as 3!{/hello/p} does.  The current implementation follows
DDS	historic practice and does not implement it.
TK	I *still* don't understand.... Would you please try to explain
TK	it one more time?  Thanks...
E 3
E 2

I 2
D 3
 9.	The standard does not specify what happens with consecutive
	! commands (e.g. /foo/!!!p).  Historic implementations
	allow any number of !'s without changing behaviour.  (It
	seems logical that each one should reverse the default
	behaviour.)  This implementation follows historic practice.
E 3
I 3
 8.	POSIX does not specify what happens with consecutive ! commands
E 4
I 4
 7.	POSIX does not specify what happens with consecutive ! commands
E 4
	(e.g. /foo/!!!p).  Historic implementations allow any number of
	!'s without changing the behaviour.  (It seems logical that each
	one might reverse the behaviour.)  This implementation follows
	historic practice.
E 3

D 3
10.	Historic versions of sed permitted commands to be separated
	by semi-colons, e.g. 'sed -ne '1p;2p;3q' prints the first
E 3
I 3
D 4
 9.	Historic versions of sed permitted commands to be separated
E 4
I 4
 8.	Historic versions of sed permitted commands to be separated
E 4
	by semi-colons, e.g. 'sed -ne '1p;2p;3q' printed the first
E 3
	three lines of a file.  This is not specified by POSIX.
	Note, the ; command separator is not allowed for the commands
	a, c, i, w, r, :, b, t, # and at the end of a w flag in the s
D 3
	command.  This implementation follows historic practice.
E 3
I 3
	command.  This implementation follows historic practice and
	implements the ; separator.
E 3

D 3
11.	The standard does not specify that if EOF is reached during
	the execution of the n command the program terminates (e.g.
E 3
I 3
D 4
10.	Historic versions of sed terminated the script if EOF was reached
E 4
I 4
 9.	Historic versions of sed terminated the script if EOF was reached
E 4
	during the execution of the 'n' command, i.e.:
E 3

E 2
	sed -e '
	n
	i\
	hello
	' </dev/null

D 2
    will not produce any output.
E 2
I 2
D 3
	will not produce any output.  This implementation follows
	historic practice.
E 3
I 3
	did not produce any output.  POSIX does not specify this behavior.
	This implementation follows historic practice.
E 3
E 2

D 2
11. The standard does not specify that the q command causes all lines that
    have been appended to be output and that the pattern space is printed
    before exiting.
E 2
I 2
D 3
12.	The standard does not specify that the q command causes all
	lines that have been appended to be output and that the pattern
	space is printed before exiting.  This implementation follows
	historic practice.
E 3
I 3
D 4
11.	POSIX does not specify that the q command causes all lines that
E 4
I 4
D 10
10.	POSIX does not specify that the q command causes all lines that
E 4
	have been appended to be output and that the pattern space is
	printed before exiting.  This implementation follows historic
	practice.
E 10
I 10
10.	Deleted.
E 10
E 3
E 2

D 2
12. Historic implementations ignore comments in the text of the i and a
    commands.
E 2
I 2
D 3
13.	Historic implementations ignore comments in the text of the i
	and a commands.  This implementation follows historic practice.
E 3
I 3
D 4
12.	Historical implementations do not output the change text of a c
E 4
I 4
11.	Historical implementations do not output the change text of a c
E 4
D 6
	command in the case of an address range whose second line number
	is greater than the first (e.g. 3,1).  POSIX requires that the
E 6
I 6
	command in the case of an address range whose first line number
	is greater than the second (e.g. 3,1).  POSIX requires that the
E 6
	text be output.  Since the historic behavior doesn't seem to have
	any particular purpose, this implementation follows the POSIX
	behavior.
E 3
E 2

D 2
13. The historic implementation does not consider the last line of a file
    to match $ if a null file follows:
E 2
I 2
D 3
14.	Historic implementations do not consider the last line of a
	file to match $ if an empty file follows, e.g.
E 3
I 3
D 4
13.	POSIX does not specify whether address ranges are checked and
E 4
I 4
12.	POSIX does not specify whether address ranges are checked and
E 4
	reset if a command is not executed due to a jump.  The following
D 7
	program, with the input "one\ntwo\nthree\nfour\nfive" can behave
	in different ways depending on whether the the /one/,/three/c
	command is triggered at the third line.
E 7
I 7
	program will behave in different ways depending on whether the
	'c' command is triggered at the third line, i.e. will the text
D 8
	be output even though that command is never logically encountered
	in the script by line 3.
E 8
I 8
	be output even though line 3 of the input will never logically
	encounter that command.
E 8
E 7
E 3
E 2

D 3
	sed -n -e '$p' /usr/dict/words /dev/null
E 3
I 3
	2,4b
D 7
	/one,/three/c\
		append some text
E 7
I 7
	1,3c\
		text
E 7
E 3

D 2
    will not print anything.
E 2
I 2
D 3
	will not print anything.  This is not mentioned in the POSIX
	specification and is almost certainly a bug.  This implementation
	follows the POSIX specification.
E 3
I 3
D 8
	Historic implementations of sed, for the above example, would
D 7
	output the text after the "branch" no longer applied, but would
	then quit without further processing.  This implementation has
	the more intuitive behavior of never outputting the text at all.
E 7
I 7
	never output the test.  There was a bug, however, that if the
	"1,3" was replaced by a RE address they would output the text
	after the branch no longer applied, but would then quit without
	further processing.  For example:

	2,4b
	/one/,/three/c\
		text

	with the input:

		one
		two
		three
		four
		five
		six

	would output:

		two
		three
		four
		text

	This implementation never outputs the text, for either example.
E 7
	This is based on the belief that it would be reasonable to want
	to output some text if the pattern /one/,/three/ occurs but only
	if it occurs outside of the range of lines 2 to 4.
E 8
I 8
	Historic implementations, and this implementation, do not output
	the text in the above example.  The general rule, therefore,
	is that a range whose second address is never matched extends to
	the end of the input.
E 8
E 3
E 2

D 2
14. Historical implementations do not output the change text of a c command
    in the case of an address range whose second line number is greater than
    the first (e.g. 3,1).  The standard seems to imply otherwise.
E 2
I 2
D 3
TK	Diomidis, I think we need to fix this, can you do it?
DDS	We follow POSIX.  You don't mean to do it buggy?
TK	I see... (I didn't understand that problem until now.)  I think
TK	that we *should* print out the last line of the dictionary, in
TK	the above example, but I can see how it would be hard.  What do
TK	you think?
E 3
I 3
D 4
14.	Historical implementations allow an output suppressing #n at the
E 4
I 4
13.	Historical implementations allow an output suppressing #n at the
E 4
	beginning of -e arguments as well as in a script file.  POSIX
	does not specify this.  This implementation follows historical
	practice.
E 3
E 2

D 2
15. Historical implementations output the c text on EVERY line not included
    in the two address range in the case of a negation '!'.
E 2
I 2
D 3
15.	Historical implementations do not output the change text
	of a c command in the case of an address range whose second
	line number is greater than the first (e.g. 3,1).  The POSIX
	standard requires that the text be output.  Since the historic
	behavior doesn't seem to have any particular purpose, this
	implementation follows the POSIX behavior.
E 3
I 3
D 4
15.	POSIX does not specify whether more than one numeric flag is
	allowed on the s command.  Historic practice is to specify only
	a single flag.
E 3
E 2

D 2
16. The standard does not specify that the p flag at the s command will
    write the pattern space plus a newline on the standard output
E 2
I 2
D 3
16.	Historical implementations output the c text on EVERY line not
	included in the two address range in the case of a negation '!'.
E 2

D 2
17. The standard does not specify whether address ranges are checked and
    reset if a command is not executed due to a jump.  The following
    program can behave in two different ways depending on whether the range
    operator is reset at line 6 or not.  This is important in the case of
    pattern matches.
E 2
I 2
TK	Diomidis, this seems reasonable, I don't see where the standard
TK	conflicts with this.
E 2

I 2
17.	The standard does not specify that the p flag at the s command will
	write the pattern space plus a newline on the standard output

TK	I think this is covered by the general language aruond 11293
TK	that says that the pattern space is always followed by a newline
TK	when output.

18.	The standard does not specify whether address ranges are
	checked and reset if a command is not executed due to a
	jump.  The following program can behave in two different
	ways depending on whether the range operator is reset at
	line 6 or not.  This is important in the case of pattern
	matches.

E 2
	sed -n -e '
	4,8b
	s/^/XXX/p
	1,6 {
		p
	}'

D 2
18. Historical implementations allow an output suppressing #n at the
    beginning of -e arguments as well.
E 2
I 2
TK	I don't understand this -- can you explain further?
DDS	The 1,6 operator will not be executed on line 6 (due to the 4,8b
DDS	line) and thus it will not clear.  In this case you can check for
DDS	line > 6 in apply, but what if the 1,6 was /BEGIN/,/END/
TK	OK, I understand, now.  Well, I think I do, anyhow.  It seems to
TK	me that applies() will never see the 1,6 line under any circumstances
TK	(even if it was /BEGIN/,/END/ because for lines 4 through 8.
TK	A nastier example, as you point out, is:
TK		2,4b
TK		/one/,/three/c\
TK			append some text
TK
TK	The BSD sed appends the text after the "branch" no longer applies,
TK	i.e. with the input: one\ntwo\nthree\nfour\nfive\nsix it displays
TK	two\nthree\nfour\nappend some text BUT THEN IT STOPS!
TK	Our sed, of course, simply never outputs "append some text".  It
TK	seems to me that our current approach is "right", because it would
TK	be possible to have:
TK		1,4b
TK		/one/,/five/c\
TK			message
TK
TK	where you only want to see "message" if the patterns "one" ... "five"
TK	occur, but not in lines 1 to 4.  What do you think?
E 2

D 2
19. POSIX does not specify whether more than one numeric flag is
    allowed on the s command
E 2
I 2
18.	Historical implementations allow an output suppressing #n at the
	beginning of -e arguments as well.  This implementation follows
	historical practice.
E 2

D 2
20. Existing versions of sed have the undocumented feature of allowing
    a semicolon to delimit commands.  It is not specified in the standard.
E 2
I 2
19.	POSIX does not specify whether more than one numeric flag is
	allowed on the s command
E 2

E 3
D 2
21. The standard does not specify whether a script is mandatory.  The
    sed implementations I tested behave differently with ls | sed (no
    output) and ls | sed - e'' (behaves like cat).
E 2
I 2
TK	What's historic practice?  Currently we don't report an error or
D 3
	do all of the flags.
E 3
I 3
TK	do all of the flags.
DDS	Historic practice is a single flag.  We follow it.  POSIX
DDS	should be more precise.
TK	It actually seems reasonable to do multiple flags, i.e. display
TK	two or more of the matched patterns.  Since it's unambiguous (only
TK	1-9 are allowed, so /19 *has* to be 1 and 9, not nineteen, we can't
TK	break any existing scripts.
E 3
E 2

D 2
22. The requirement to open all wfiles from the beginning makes sed behave
    nonintuitively when the w commands are preceded by addresses or are
    within conditional blocks.
E 2
I 2
D 3
20.	The standard does not specify whether a script is mandatory.
	Historic sed implementations behave differently with ls | sed
	(no output) and ls | sed - e'' (behaves like cat).
E 3
I 3
16.	POSIX does not explicitly specify how sed behaves if no script is
E 4
I 4
14.	POSIX does not explicitly specify how sed behaves if no script is
E 4
	specified.  Since the sed Synopsis permits this form of the command,
	and the language in the Description section states that the input
	is output, it seems reasonable that it behave like the cat(1)
	command.  Historic sed implementations behave differently for "ls |
D 4
	sed" (no output) and "ls | sed -e#" (like cat).  This implementation
	behaves like cat in both cases.
E 4
I 4
	sed", where they produce no output, and "ls | sed -e#", where they
	behave like cat.  This implementation behaves like cat in both cases.
E 4
E 3
E 2

D 2
23. The rule specified in lines 11412-11413 of the standard does not
    seem consistent with existing practice.  The sed implementations I
    tested copied the rfile on standard output every time the r command was
    executed and not before reading a line of input.  The wording should be
    changed to be consistent with the 'a' command i.e.
E 2
I 2
D 3
TK	I don't understand what 'sed - e' does (it should be illegal,
TK	right?)  It seems to me that a script should be mandatory,
TK	and sed should fail with an error if not given one.
E 3
I 3
D 4
17.	The POSIX requirement to open all wfiles from the beginning makes
E 4
I 4
D 9
15.	The POSIX requirement to open all wfiles from the beginning makes
E 9
I 9
15.	The POSIX requirement to open all w files at the beginning makes
E 9
E 4
	sed behave nonintuitively when the w commands are preceded by
	addresses or are within conditional blocks.  This implementation
	follows historic practice and POSIX, by default, and provides the
D 4
	-a option for more reasonable behavior.
E 4
I 4
	-a option which opens the files only when they are needed.
E 4
E 3
E 2

D 2
24. The standard does not specify how excape sequences other than \n
    and \D (where D is the delimiter character) are to be treated.   A
    strict interpretation would be that they should be treated literaly.
    In the sed implementations I have tried the \ is simply ingored.
E 2
I 2
D 3
21.	The requirement to open all wfiles from the beginning makes sed
	behave nonintuitively when the w commands are preceded by addresses
	or are within conditional blocks.  This implementation follows
	historic practice, by default, and provides a flag for more
	reasonable behavior.
E 3
I 3
D 4
18.	POSIX does not specify how escape sequences other than \n and \D
E 4
I 4
16.	POSIX does not specify how escape sequences other than \n and \D
E 4
	(where D is the delimiter character) are to be treated.  This is
D 4
	reasonable, however, it doesn't state that the backslash is to be
	discarded from the output regardless.  A strict reading of POSIX
	would be that "echo xyz | sed s/./\a" would display "\ayz".  As
	historic sed implementations always discarded the backslash, this
	implementation does as well.
E 4
I 4
	reasonable, however, it also doesn't state that the backslash is
	to be discarded from the output regardless.  A strict reading of
	POSIX would be that "echo xyz | sed s/./\a" would display "\ayz".
	As historic sed implementations always discarded the backslash,
	this implementation does as well.
E 4
E 3
E 2

D 2
25. The standard specifies in line 11304 that an address can be empty.
    This is wrong since it implied that constructs like ,d or 1,d or ,5d
    are allowed.  The sed implementation I tested do not allow them.
E 2
I 2
D 3
TK	I'll put it on my TODO list... ;-}
E 3
I 3
D 4
19.	POSIX specifies that an address can be "empty".  This implies that
	constructs like ,d or 1,d and ,5d are allowed.  This is not true
	for historic implementations of sed.  This implementation follows
	historic practice.
E 4
I 4
17.	POSIX specifies that an address can be "empty".  This implies
	that constructs like ",d" or "1,d" and ",5d" are allowed.  This
	is not true for historic implementations or this implementation
	of sed.
E 4
E 3
E 2

D 2
26. The b t and : commands ignore leading white space, but not trailing
    white space.  This is not specified in the standard.
E 2
I 2
D 3
22.	The rule specified in lines 11412-11413 of the standard does
	not seem consistent with existing practice.  Historic sed
	implementations I tested copied the rfile on standard output
	every time the r command was executed and not before reading
	a line of input.  The wording should be changed to be
	consistent with the 'a' command i.e.
E 3
I 3
D 4
20.	The b t and : commands are documented in POSIX to ignore leading
E 4
I 4
18.	The b t and : commands are documented in POSIX to ignore leading
E 4
	white space, but no mention is made of trailing white space.
	Historic implementations of sed assigned different locations to
	the labels "x" and "x ".  This is not useful, and leads to subtle
D 4
	programming errors.  This implementation ignores trailing whitespace.
E 4
I 4
	programming errors, but it is historic practice and changing it
D 6
	could theoretically break working scripts.
E 6
I 6
	could theoretically break working scripts.  This implementation
	follows historic practice.
E 6
E 4
E 3
E 2

D 2
27. Although the standard specifies that reading from files that do not
    exist from within the script must not terminate the script; it does not
    specify what happens if a write command fails.
E 2
I 2
D 3
TK	Something got dropped, here... Can you explain furtehr what
TK	historic versoins did, what they should do, what we do?
E 2

D 2
28. In the sed implementation I tested the \n construct for newlines
    works on both strings of a y command.  This is not specified in the
    standard.
E 2
I 2
23.	The standard does not specify how excape sequences other
	than \n and \D (where D is the delimiter character) are to
	be treated.   A strict interpretation would be that they
	should be treated literaly.  In the sed implementations I
	have tried the \ is simply ingored.
E 2

D 2
29. The standard does not specify if the "nth occurrence" of a regular
    expression in a substitute command is an overlapping or a
    non-overlappoin one.  I.e.  what is the result of s/a*/A/2 on the
    pattern "aaaaa aaaaa".  (It crashes the implementation of sed I
    tested.)
E 2
I 2
TK	I don't understand what you're saying, here.  Can you explain?
E 2

D 2
30. Existing implementations of sed ignore the regular expression
    delimiter characters within character classes.  This is not specified
    in the standard.
E 2
I 2
24.	The standard specifies that an address can be "empty".  This
	implies that constructs like ,d or 1,d and ,5d are allowed.
	This is not true for historic implementations of sed.  This
	implementation follows historic practice.

25.	The b t and : commands ignore leading white space, but not
	trailing white space.  This is not specified in the standard.

E 3
D 4
TK	I think that line 11347 points out the the synopsis shows
TK	which are valid.
I 3
DDS	I am talking about _trailing_ white space.  In our implementation
DDS	and historic implementation the label can contain _significant_
DDS	white space at its end.  This is obscure and not explained in
DDS	POSIX.
TK	I think we should delete trailing white space for the above
TK	reason.
E 3

D 3
	Although the standard specifies that reading from files that
	do not exist from within the script must not terminate the
	script, it does not specify what happens if a write command
	fails.  Historic practice is to fail immediately if the file
	cannot be open or written.  This implementation follows that
	practice.
E 3
I 3
21.	Although POSIX specifies that reading from files that do not exist
E 4
I 4
19.	Although POSIX specifies that reading from files that do not exist
E 4
	from within the script must not terminate the script, it does not
	specify what happens if a write command fails.  Historic practice
D 4
	is to fail immediately if the file cannot be open or written.  This
	implementation follows historic practice.
E 4
I 4
	is to fail immediately if the file cannot be opened or written.
	This implementation follows historic practice.
E 4
E 3

D 3
26.	Historic practice is that the \n construct can be used for
	either string1 or string2 of the y command.  This is not
	specified by the standard.  This implementation follows
	historic practice.
E 3
I 3
D 4
22.	Historic practice is that the \n construct can be used for either
E 4
I 4
20.	Historic practice is that the \n construct can be used for either
E 4
	string1 or string2 of the y command.  This is not specified by
	POSIX.  This implementation follows historic practice.
E 3

D 3
29.	The standard does not specify if the "nth occurrence" of a
	regular expression in a substitute command is an overlapping
	or a non-overlapping one, e.g. what is the result of s/a*/A/2
	on the pattern "aaaaa aaaaa".  Historical practice is to drop
	core or do non-overlapping expressions.  This implementation
	follows historic practice.
E 3
I 3
D 4
23.	POSIX does not specify if the "Nth occurrence" of an RE in a
E 4
I 4
D 11
21.	POSIX does not specify if the "Nth occurrence" of an RE in a
E 4
	substitute command is an overlapping or a non-overlapping one,
	i.e. what is the result of s/a*/A/2 on the pattern "aaaaa aaaaa".
	Historical practice is to drop core or only do non-overlapping
D 4
	expressions.  This implementation follows historic practice.
E 4
I 4
D 6
	RE's.  This implementation only does on-overlapping RE's.
E 6
I 6
	RE's.  This implementation only does non-overlapping RE's.
E 11
I 11
21.	Deleted.
E 11
E 6
E 4
E 3

D 3
30.	Historic implementations of sed ignore the regular expression
E 3
I 3
D 4
24.	Historic implementations of sed ignore the regular expression
E 3
	delimiter characters within character classes.  This is not
D 3
	specified in the standard.  This implementation follows historic
	practice.
E 3
I 3
	specified in POSIX.  This implementation follows historic practice.
E 4
I 4
22.	Historic implementations of sed ignore the RE delimiter characters
	within character classes.  This is not specified in POSIX.  This
	implementation follows historic practice.
I 5

23.	Historic implementations handle empty RE's in a special way: the
	empty RE is interpreted as if it were the last RE encountered,
	whether in an address or elsewhere.  POSIX does not document this
	behavior.  For example the command:

		sed -e /abc/s//XXX/

	substitutes XXX for the pattern abc.  The semantics of "the last
	RE" can be defined in two different ways:

	1. The last RE encountered when compiling (lexical/static scope).
	2. The last RE encountered while running (dynamic scope).

	While many historical implementations fail on programs depending
	on scope differences, the SunOS version exhibited dynamic scope
D 9
	behaviour.  This implementation also uses does dynamic scoping, as
D 6
	this seems the natural way to interact with an editor, and in order
	to remain consistent with historical practice.
E 6
I 6
	this seems the most useful and in order to remain consistent with
	historical practice.
E 9
I 9
	behaviour.  This implementation does dynamic scoping, as this seems
	the most useful and in order to remain consistent with historical
	practice.
E 9
E 6
E 5
E 4
E 3
E 2
E 1
