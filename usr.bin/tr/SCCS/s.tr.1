h42888
s 00002/00002/00264
d D 8.1 93/06/06 16:38:14 bostic 12 11
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/00265
d D 6.9 91/10/27 11:32:44 bostic 11 10
c fix the example
e
s 00022/00025/00244
d D 6.8 91/10/27 10:38:22 bostic 10 9
c various bug fixes, don't restrict class usage at all on the grounds
c that you can't get it right.  Hal Jesperson agrees that this is correct,
c it's not clear from the POSIX draft.
e
s 00206/00132/00063
d D 6.7 91/10/24 17:49:18 bostic 9 8
c POSIX 1003.2/D11.2 version
e
s 00002/00002/00193
d D 6.6 91/07/30 18:34:18 cael 8 7
c formalize HISTORY
e
s 00003/00000/00192
d D 6.5 91/06/27 17:25:43 bostic 7 6
c add POSIX/IEEE contribution notice
e
s 00188/00065/00004
d D 6.4 91/04/23 16:26:43 cael 6 5
c mdoc version three/bsd copyright
e
s 00005/00000/00064
d D 6.3 91/04/18 18:28:23 bostic 5 4
c new copyright; att/bsd/shared
e
s 00004/00010/00060
d D 6.2 88/09/03 15:45:40 bostic 4 3
c handles NULs now
e
s 00001/00001/00069
d D 6.1 85/04/29 18:04:34 mckusick 3 2
c 4.3BSD beta release manual page
e
s 00001/00001/00069
d D 5.1 85/04/29 18:04:21 mckusick 2 1
c manual page distributed with 4.2BSD
e
s 00070/00000/00000
d D 4.1 85/04/29 18:04:08 mckusick 1 0
c manual page distributed with 4.1BSD
e
u
U
t
T
I 5
D 6
.\" Copyright (c) 1988 The Regents of the University of California.
E 6
I 6
D 12
.\" Copyright (c) 1991 Regents of the University of California.
E 6
.\" All rights reserved.
E 12
I 12
.\" Copyright (c) 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 12
.\"
I 7
.\" This code is derived from software contributed to Berkeley by
.\" the Institute of Electrical and Electronics Engineers, Inc.
.\"
E 7
D 6
.\" %sccs.include.proprietary.roff%
E 6
I 6
.\" %sccs.include.redist.man%
E 6
.\"
E 5
I 1
D 6
.\"	%W% (Berkeley) %G%
E 6
I 6
.\"     %W% (Berkeley) %G%
E 6
.\"
D 2
.TH TR 1 
E 2
I 2
D 3
.TH TR 1  "18 January 1983"
E 3
I 3
D 6
.TH TR 1 "%Q%"
E 3
E 2
.AT 3
.SH NAME
tr \- translate characters
.SH SYNOPSIS
.B tr
[
.B \-cds
] [ string1 [ string2 ] ]
.SH DESCRIPTION
.I Tr
copies the standard input to the standard output with 
substitution or deletion of selected characters.
Input characters found in 
.I string1
are mapped into the corresponding characters of
.IR string2 .
When 
.I string2
is short it is padded to the length of 
.I string1
by duplicating its last character.
Any combination of the options
.B \-cds
may be used:
.B \-c
complements the set of characters in
.I string1
with respect to the universe of characters
D 4
whose ASCII codes are 01 through 0377 octal;
E 4
I 4
whose ASCII codes are 0 through 0377 octal;
E 4
.B \-d
deletes all input characters in
.I string1;
.B \-s
squeezes all strings of repeated output characters that are
in 
.I string2
to single characters.
.PP
In either string the notation
.IB a \- b
means a range of characters from
.I a
to
.I b
in increasing ASCII order.
The character
`\e' followed by 1, 2 or 3 octal digits stands for the
character whose ASCII code is given by those digits.
A `\e' followed by any other character stands
for that character.
.PP
The following example creates a list of all
D 4
the words in `file1' one per line in `file2',
where a word is taken to be a maximal string of alphabetics.
E 4
I 4
the words in `file1', each on a separate line, in `file2',
where a word is taken to be a string of alphabetics.
E 4
The second string is quoted
to protect `\e' from the Shell.
012 is the ASCII code for newline.
.IP
tr \-cs A\-Za\-z \'\e012\' <file1 >file2
.SH "SEE ALSO"
D 4
ed(1), ascii(7), expand(1)
.SH BUGS
Won't handle ASCII NUL in
.I string1
or
.I string2;
always deletes NUL from input.
E 4
I 4
ed(1), expand(1), ascii(7)
E 6
I 6
.Dd %Q%
.Dt TR 1
.Os
.Sh NAME
.Nm tr
.Nd translate characters
.Sh SYNOPSIS
.Nm tr
I 9
.Op Fl cs
.Ar string1 string2
.Nm tr
E 9
.Op Fl c
D 9
.Op Fl d | Fl s
E 9
I 9
.Fl d
.Ar string1
.Nm tr
.Op Fl c
.Fl s
.Ar string1
.Nm tr
.Op Fl c
.Fl ds
E 9
.Ar string1 string2
.Sh DESCRIPTION
D 9
The tr utility copies the standard input to the standard
output with substitution or deletion of selected characters.
The options specified and the
.Ar string1
and
.Ar string2
operands
control translations that occur while copying characters.
E 9
I 9
The
.Nm tr
utility copies the standard input to the standard output with substitution
or deletion of selected characters.
E 9
.Pp
The following options are available:
.Bl -tag -width Ds
.It Fl c
D 9
Complements the set of characters in string1 with
respect to the universe of characters whose
.Tn ISO
646
[4] codes are 00 through 0377 octal.
E 9
I 9
Complements the set of characters in
.Ar string1 ,
that is ``-c ab'' includes every character except for ``a'' and ``b''.
E 9
.It Fl d
D 9
Deletes all input characters in
.Ar string1 .
E 9
I 9
The
.Fl d
option causes characters to be deleted from the input.
E 9
.It Fl s
D 9
Squeezes all output strings of one or more
instances of a single character in
.Ar string2
to a
single instance of that character.
Input characters found
in
E 9
I 9
The
.Fl s
option squeezes multiple occurrences of the characters listed in the last
operand (either
E 9
.Ar string1
D 9
are mapped into the corresponding characters
of
.Ar string2 .
When
E 9
I 9
or
.Ar string2 )
in the input into a single instance of the character.
This occurs after all deletion and translation is completed.
.El
.Pp
In the first synopsis form, the characters in
.Ar string1
are translated into the characters in
E 9
.Ar string2
D 9
is shorter than
.Ar string1 , string2
is extended to the length of
E 9
I 9
where the first character in
E 9
.Ar string1
D 9
by duplicating the last character of
.Ar string2 .
E 9
I 9
is translated into the first character in
.Ar string2
and so on.
E 9
If
I 9
.Ar string1
is longer than
.Ar string2 ,
the last character found in
E 9
.Ar string2
D 9
is explicitly a string of zero
length,
.Ar string2
is padded with
.Tn NUL
characters.
.El
E 9
I 9
is duplicated until
.Ar string1
is exhausted.
D 10
If the
.Fl c
option is specified only a single character may be listed in
.Ar string2 ,
although multiple instances of the character may be listed.
E 10
E 9
.Pp
D 9
The following operands are available:
.Bl -tag -width stringx
.It Ar string1
.It Ar string2
Translation character strings.
.El
E 9
I 9
In the second synopsis form, the characters in
.Ar string1
are deleted from the input.
E 9
.Pp
I 9
In the third synopsis form, the characters in
.Ar string1
are compressed as described for the
.Fl s
option.
E 9
.Pp
D 9
If
the
.Fl c
option is given in conjunction with the
.Fl d
option, then only those characters found in
E 9
I 9
In the fourth synopsis form, the characters in
E 9
.Ar string1
D 9
is copied to the standard output.
E 9
I 9
are deleted from the input, and the characters in
.Ar string2
are compressed as described for the
.Fl s
option.
E 9
.Pp
The following conventions can be used in
.Ar string1
D 9
or
E 9
I 9
and
E 9
.Ar string2
D 9
or both to specify characters, character ranges, character
classes, or collating elements:
E 9
I 9
to specify sets of characters:
E 9
D 10
.Bl -tag -width [[:equiv:]]
E 10
I 10
.Bl -tag -width [:equiv:]
E 10
.It character
D 9
Represents that character.
E 9
I 9
Any character not described by one of the following conventions
represents itself.
E 9
.It \eoctal
D 9
A backslash followed by 1, 2, or 3 octal
digits represents a character with that
encoded value.
If a \eoctal sequence is
followed by digits, the backslash and up to
three digits are interpreted to prepare a
character; subsequent digits are interpreted
as individual characters.
E 9
I 9
A backslash followed by 1, 2 or 3 octal digits represents a character
with that encoded value.
To follow an octal sequence with a digit as a character, left zero-pad
the octal sequence to the full 3 octal digits.
E 9
.It \echaracter
D 9
A backslash followed by any character except
an octal digit represents that character.
.It [c-c]
Represents the range of ordered elements
between the range endpoints, inclusive.
.\" ; as
.\" defined by the current setting of the
.\" setlocale() category
.\" .Em LC_COLLATE .
.\" The collating
.\" elements are ordered in ascending collating
.\" sequence, and the first endpoint shall precede
.\" the second in the collating sequence.
E 9
I 9
A backslash followed by certain special characters maps to special
values.
.sp
.Bl -column
.It \ea	<alert character>
.It \eb	<backspace>
.It \ef	<form-feed>
.It \en	<newline>
.It \er	<carriage return>
.It \et	<tab>
.It \ev	<vertical tab>
.El
.sp
A backslash followed by any other character maps to that character.
.It c-c
Represents the range of characters between the range endpoints, inclusively.
E 9
D 10
.It [[:class:]]
E 10
I 10
.It [:class:]
E 10
D 9
Represents all characters belonging to the
defined character class.
.\" as defined by the
.\" current setting of the setlocale() category
.\" .Ev LC_CTYPE .
Allowable names for class are:
.Bl -column alpha upper lower digit xdigit -offset indent
alpha  upper  lower  digit  xdigit  alnum
space  punct  print  graph  cntrl
E 9
I 9
Represents all characters belonging to the defined character class.
Class names are:
.sp
.Bl -column
.It alnum	<alphanumeric characters>
.It alpha	<alphabetic characters>
.It cntrl	<control characters>
.It digit	<numeric characters>
.It graph	<graphic characters>
.It lower	<lower-case alphabetic characters>
.It print	<printable characters>
.It punct	<punctuation characters>
.It space	<space characters>
.It upper	<upper-case characters>
.It xdigit	<hexadecimal characters>
E 9
.El
.Pp
D 9
The characters placed in ascending order.
.\" .Em LC_COLLATE .
.\" (Characters not defined in the
.\" current collating sequence are ordered
.\" according to the collation sequence's rules
.\" for ordering of undefined characters.)
E 9
I 9
D 10
All classes may be used in
.Ar string1 ,
and in
.Ar string2
when both the
.Fl d
and
.Fl s
options are specified.
Otherwise, only the classes ``upper'' and ``lower'' may be used in
.Ar string2
and then only when the corresponding class (``upper'' for ``lower''
and vice-versa) is specified in the same relative position in
.Ar string1 .
.Pp
E 10
I 10
\." All classes may be used in
\." .Ar string1 ,
\." and in
\." .Ar string2
\." when both the
\." .Fl d
\." and
\." .Fl s
\." options are specified.
\." Otherwise, only the classes ``upper'' and ``lower'' may be used in
\." .Ar string2
\." and then only when the corresponding class (``upper'' for ``lower''
\." and vice-versa) is specified in the same relative position in
\." .Ar string1 .
\." .Pp
E 10
With the exception of the ``upper'' and ``lower'' classes, characters
in the classes are in unspecified order.
In the ``upper'' and ``lower'' classes, characters are entered in
ascending order.
.Pp
For specific information as to which ASCII characters are included
in these classes, see
.Xr ctype 3
and related manual pages.
E 9
D 10
.It [[=equiv=]]
E 10
I 10
.It [=equiv=]
E 10
D 9
Represents all characters or collating (sorting)
elements belonging to the same equivalence class
as equiv.
.\" 
.\" 
.\" .Em LC_COLLATE .
E 9
I 9
Represents all characters or collating (sorting) elements belonging to
the same equivalence class as
.Ar equiv .
E 9
If
D 9
there is a secondary ordering within the
equivalence class, the characters are ordered
in ascending sequence.
Otherwise, they are
ordered after their encoded values. 
.It [[.cs.]]
Represents a collating symbol.
Multicharacter
collating symbols shall be represented as
collating symbols to distinguish them from a
string of the same characters.
.It [x*n]
Represents n repeated occurrences of the
character or collating symbol x.
E 9
I 9
there is a secondary ordering within the equivalence class, the characters
are ordered in ascending sequence.
Otherwise, they are ordered after their encoded values. 
I 10
An example of an equivalence class might be ``c'' and ``ch'' in Spanish;
English has no equivalence classes.
E 10
.It [#*n]
Represents
.Ar n
repeated occurrences of the character represented by
.Ar # .
E 9
This
expression is only valid when it occurs in
.Ar string2 .
D 9
If n is omitted or is zero, it is
be interpreted as large enough to extend the
.Ar string2 Ns -based
sequence to the length of the
.Ar string1 Ns -based
sequence.
If n has a leading
zero, it shall be interpreted as an octal
value.
Otherwise, it shall be interpreted as
a decimal value.
E 9
I 9
If
.Ar n
is omitted or is zero, it is be interpreted as large enough to extend
.Ar string2
sequence to the length of
.Ar string1 .
If
.Ar n
has a leading zero, it is interpreted as an octal value, otherwise,
it's interpreted as a decimal value.
E 9
.El
.Pp
D 9
Characters belonging to an equivalence class occupy the same
position in the sequence, ordered after secondary ordering.
E 9
I 9
The
.Nm tr
utility exits 0 on success, and >0 if an error occurs.
.Sh EXAMPLES
The following examples are shown as given to the shell:
.sp
Create a list of the words in file1, one per line, where a word is taken to
be a maximal string of letters.
.sp
.D1 Li "tr -cs \*q[:alpha:]\*q \*q\en\*q < file1"
.sp
Translate the contents of file1 to upper-case.
.sp
.D1 Li "tr \*q[:lower:]\*q \*q[:upper:]\*q < file1"
.sp
Strip out non-printable characters from file1.
.sp
D 11
.D1 Li "tr -d \*q[:print:]\*q < file1"
E 11
I 11
.D1 Li "tr -cd \*q[:print:]\*q < file1"
E 11
.Sh COMPATIBILITY
System V has historically implemented character ranges using the syntax
``[c-c]'' instead of the ``c-c'' used by historic BSD implementations and
standardized by POSIX.
System V shell scripts should work under this implementation as long as
the range is intended to map in another range, i.e. the command
``tr [a-z] [A-Z]'' will work as it will map the ``['' character in
.Ar string1
to the ``['' character in
.Ar string2.
However, if the shell script is deleting or squeezing characters as in
the command ``tr -d [a-z]'', the characters ``['' and ``]'' will be 
included in the deletion or compression list which would not have happened
under an historic System V implementation.
Additionally, any scripts that depended on the sequence ``a-z'' to
represent the three characters ``a'', ``-'' and ``z'' will have to be
rewritten as ``a\e-z''.
E 9
.Pp
The
.Nm tr
D 9
utility exits with one of the following values:
.Bl -tag -width Ds
.It 0
All input was processed successfully.
.It 1
An error occurred.
.El
E 9
I 9
utility has historically not permitted the manipulation of NUL bytes in
its input and, additionally, stripped NUL's from its input stream.
This implementation has removed this behavior as a bug.
.Pp
The
.Nm tr
D 10
utility has historically been extremely forgiving of syntax errors.
For example, the
E 10
I 10
utility has historically been extremely forgiving of syntax errors,
for example, the
E 10
.Fl c
and
.Fl s
options were ignored unless two strings were specified.
This implementation will not permit illegal syntax.
E 9
.Sh STANDARDS
The
.Nm tr
utility is expected to be
D 8
.Tn POSIX
1003.2 compatible.
E 8
I 8
.St -p1003.2
compatible.
I 9
It should be noted that the feature wherein the last character of
.Ar string2
is duplicated if
.Ar string2
has less characters than
.Ar string1
is permitted by POSIX but is not required.
Shell scripts attempting to be portable to other POSIX systems should use
the ``[#*]'' convention instead of relying on this behavior.
E 9
E 8
E 6
E 4
E 1
