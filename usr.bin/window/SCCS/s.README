h55935
s 00000/00000/00173
d D 8.1 93/06/06 22:26:27 bostic 17 16
c 4.4BSD snapshot (revision 8.1)
e
s 00002/00002/00171
d D 3.15 93/06/06 22:26:24 bostic 16 15
c add 1993 to copyright notice
e
s 00007/00002/00166
d D 3.14 92/11/10 11:49:00 edward 15 14
c document tty options
e
s 00006/00013/00162
d D 3.13 90/06/06 21:43:09 bostic 14 13
c fix contrib notice (Edward Wang)
e
s 00005/00005/00170
d D 3.12 88/11/23 04:22:24 edward 13 12
c use the ENDIAN definitions instead of machine type
e
s 00010/00005/00165
d D 3.11 88/07/09 10:40:39 bostic 12 11
c install approved copyright notice
e
s 00005/00005/00165
d D 3.10 88/03/19 01:34:08 edward 11 10
c added #if defined(MIPSEL) to ww.h
e
s 00011/00005/00159
d D 3.9 88/02/21 13:36:29 bostic 10 9
c written by Edward Wang; attach Berkeley specific copyright
e
s 00047/00021/00117
d D 3.8 87/10/06 00:36:49 edward 9 8
c made up to date
e
s 00014/00002/00124
d D 3.7 86/08/04 15:17:12 edward 8 7
c updated for 4.3
e
s 00006/00000/00120
d D 3.6 85/04/24 16:18:51 edward 7 6
c copyright messages
e
s 00001/00001/00119
d D 3.5 84/05/23 01:59:42 edward 6 5
c new sccs id
e
s 00045/00043/00075
d D 3.4 84/05/23 01:24:12 edward 5 3
c O_SUN changed to mc68000, plus some fixups
e
s 00002/00001/00117
d R 3.4 84/05/16 03:58:10 edward 4 3
c O_SUN changed to m68000 which is predefined in cpp
e
s 00003/00007/00115
d D 3.3 84/04/16 20:29:03 edward 3 2
c 4.1a, 4.1c compatibility removed, local.h added
e
s 00111/00007/00011
d D 3.2 84/04/05 01:00:33 edward 2 1
c some comments about the internals added
e
s 00018/00000/00000
d D 3.1 83/11/18 13:22:22 edward 1 0
c date and time created 83/11/18 13:22:22 by edward
e
u
U
t
T
I 1
D 6
%W% %E%
E 6
I 6
D 10
%W% %G%
E 6

E 10
I 7
D 14
/*
D 10
 * Copyright (c) 1983 Regents of the University of California,
 * All rights reserved.  Redistribution permitted subject to
 * the terms of the Berkeley Software License Agreement.
E 10
I 10
 * Copyright (c) 1983 Regents of the University of California.
E 14
I 14
/*-
D 16
 * Copyright (c) 1990 The Regents of the University of California.
E 14
 * All rights reserved.
E 16
I 16
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
E 16
 *
D 14
 * Redistribution and use in source and binary forms are permitted
D 12
 * provided that this notice is preserved and that due credit is given
 * to the University of California at Berkeley. The name of the University
 * may not be used to endorse or promote products derived from this
 * software without specific prior written permission. This software
 * is provided ``as is'' without express or implied warranty.
E 12
I 12
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 14
I 14
 * This code is derived from software contributed to Berkeley by
 *  Edward Wang at The University of California, Berkeley.
 *
 * %sccs.include.redist.c%
E 14
E 12
 *
 *	%W% (Berkeley) %G%
E 10
 */

E 7
D 2
options:
E 2
I 2
Compilation notes:
E 2

I 2
D 3
     The flags:
E 3
I 3
D 15
     There is only one compiler option:
E 15
I 15
     Compiler options:
E 15
E 3

E 2
D 5
	O_SUN		use 68000 byte ordering
E 5
I 5
D 9
	mc68000		use 68000 byte ordering
E 9
I 9
D 11
	vax		use Vax byte ordering (found in ww.h)
E 9
			It should already be defined in the preprocessor.
I 9
			It turns out that all of the other machines that
			I know are running window (68000, CCI, MIPS) are
			big endians, so the single "#ifdef vax" suffices.
E 11
I 11
D 13
	vax		use Vax byte order (found in ww.h)
			Actually MIPSEL is also little-endian.
			Anyway, they should already be defined in the
			preprocessor.
			If neither is defined, big-endian is assumed.
E 13
I 13
	BYTE_ORDER (used only in ww.h)
		It should already be defined in machine/endian.h.
		The code knows about BIG_ENDIAN, LITTLE_ENDIAN, and PDP_ENDIAN.
		It only cares about byte order in words, so PDP_ENDIAN
		is the same as LITTLE_ENDIAN.
I 15
	OLD_TTY
		If you don't have Posix termios, then define this.
	VMIN_BUG
		Even if you have Posix termios, define this if the MIN and TIME
		feature in noncanonical mode doesn't work correctly.
E 15
E 13
E 11
E 9
E 5
D 3
	O_4_1C		4.1c
	O_4_1A		4.1a
E 3

I 9
     Ok, there's another one, STR_DEBUG.  It turns on consistency checks
     in the string allocator.  It's been left on since performace doesn't
     seem to suffer.  There's an abort() somewhere when an inconsistency
     is found.  It hasn't happened in years.

E 9
D 2
	4.2bsd on a vax needs no flags.
E 2
I 2
D 3
     4.2bsd on a vax needs no flags.  Some systems will need the jobs library.
4.1a does not support the 't' command.
E 3
I 3
     The file local.h contains locally tunable constants.
E 3
E 2

D 2
	Some systems will need the jobs library.
E 2
I 2
D 9
     The makefile should be updated with mkmf.  The only library it needs
D 8
is termcap (and jobs for 4.1).
E 8
I 8
is termcap.
E 9
I 9
     The makefile used to be updated with mkmf; it has been changed
at various times to use cpp -M and, currently, mkdep.  The only library
it needs is termcap.
E 9
E 8
E 2

D 2
	4.1a does not support the 't' command.
E 2
I 2
D 3
     Do not profile on 4.1.  A bug in the system causes profiling
to stay on after an exec.
E 3
I 3
D 8
     Window only runs on 4.2 machines.
E 8
I 8
D 15
     Window, as is, only runs on 4.3 machines.
E 15
I 15
     Window, as is, only runs on 4.3 (or later) machines.
E 15

     On 4.2 machines, at least these modifications must be done:

	delete uses of window size ioctls: TIOCGWINSZ, TIOCSWINSZ,
		struct winsize
	add to ww.h
		typedef int fd_set;
		#define FD_ZERO(s) (*(s) = 0)
		#define FD_SET(b, s) (*(s) |= 1 << (b))
		#define FD_ISSET(b, s) (*(s) & 1 << (b))
	add to ww.h
		#define sigmask(s) (1 << (s) - 1)
E 8
E 3
E 2

D 2
The makefile can be updated with mkmf.
E 2

D 2
Do not profile on 4.1.  A bug in the system causes profiling
to stay on after an exec.
E 2
I 2
A few notes about the internals:

     The window package.  Windows are opened by calling wwopen().
Wwwrite() is the primitive for writing to windows.  Wwputc(), wwputs(),
and wwprintf() are also supported.  Some of the outputs to windows are
delayed.  Wwupdate() updates the terminal to match the internal screen
buffer.  Wwspawn() spawns a child process on the other end of a window,
D 9
with it's environment tailored to the window.  Visible windows are
E 9
I 9
with its environment tailored to the window.  Visible windows are
E 9
doubly linked in the order of their overlap.  Wwadd() inserts a window
D 5
into the list.  Wwdelete() deletes it.  Windows not in the list are not
visible, though wwwrite() still works.
E 5
I 5
into the list at a given place.  Wwdelete() deletes it.  Windows not in
D 9
the list are not visible, though wwwrite() still works.
E 9
I 9
the list are not visible, though wwwrite() still works.  Window was
written before the days of X and Sunview, so some of the terminology
is not standard.
E 9
E 5

     Most functions return -1 on error.  Wwopen() returns the null
D 5
pointer.  An error number is saved in wwerrno.  Wwerror() returns
an error message based on wwerrno suitable for printing.
E 5
I 5
pointer.  An error number is saved in wwerrno.  Wwerror() returns an
error string based on wwerrno suitable for printing.
E 5

     The terminal drivers perform all output to the physical terminal,
including special functions like character and line insertion and
deletion.  The window package keeps a list of known terminals.  At
initialization time, the terminal type is matched against the list to
find the right terminal driver to use.  The last driver, the generic
driver, matches all terminals and uses the termcap database.  The
interface between the window package the terminal driver is the `tt'
structure.  It contains pointers to functions to perform special
functions and terminal output, as well as flags about the
D 9
characteristics of the terminal.
E 9
I 9
characteristics of the terminal.  Most of these ideas are borrowed
from the Maryland window package, which in turn is based on Goslin's
Emacs.
E 9

D 5
     The IO system is semi-synchronous.  Terminal input is signal driven,
and everything else is done synchronously with a single select().
E 5
I 5
     The IO system is semi-synchronous.  Terminal input is signal
driven, and everything else is done synchronously with a single
D 9
select().
E 9
I 9
select().  It is roughly event-driven, though not in a clean way.
E 9
E 5

D 5
     Normally, in both conversation mode and command mode, window sleeps in
a select() in wwiomux() waiting for data from the pseudo-terminals.  At the
same time, terminal input causes SIGIO which is caught by wwrint().  The
select() returns when at least one of the pseudo-terminals becomes ready
for reading.  
E 5
I 5
     Normally, in both conversation mode and command mode, window
sleeps in a select() in wwiomux() waiting for data from the
pseudo-terminals.  At the same time, terminal input causes SIGIO which
is caught by wwrint().  The select() returns when at least one of the
pseudo-terminals becomes ready for reading.
E 5

D 5
     Wwrint() is the interrupt handler for tty input.  It reads input into
a linear buffer accessed through four pointers:
E 5
I 5
     Wwrint() is the interrupt handler for tty input.  It reads input
into a linear buffer accessed through four pointers:
E 5

	+-------+--------------+----------------+
	| empty |    data      |   empty	|
	+-------+--------------+----------------+
	^	^		^		 ^
	|	|		|		 |
       wwib    wwibp	       wwibq		wwibe

D 5
Wwrint() appends characters at the end and increments wwibq (*wwibq++ = c),
and characters are taken from the buffer at wwibp using the wwgetc() and
wwpeekc() macros.  As is the convention in C, wwibq and wwibe point to
one position beyond the end.  In addition, wwrint() will do a
longjmp(wwjmpbuf) if wwsetjmp is true.  This is used by wwiomux() to
interrupt the select() which would otherwise resume after the
E 5
I 5
D 9
Wwrint() appends characters at the end and increments wwibq (*wwibq++ =
c), and characters are taken from the buffer at wwibp using the
wwgetc() and wwpeekc() macros.  As is the convention in C, wwibq and
wwibe point to one position beyond the end.  In addition, wwrint() will
do a longjmp(wwjmpbuf) if wwsetjmp is true.  This is used by wwiomux()
to interrupt the select() which would otherwise resume after the
E 5
interrupt.  The macro wwinterrupt() returns true if the input buffer is
non-empty.  Wwupdate(), wwwrite(), and wwiomux() check this condition
and will return at the first convenient opportunity when it becomes
true.  In the case of wwwrite(), the flag ww_nointr in the window
structure overrides this.  This feature allows the user to interrupt
D 5
lengthy outputs safely.  The structure of the input is carefully
designed to avoid race conditions without blocking interrupts.
E 5
I 5
lengthy outputs safely.  The structure of the input buffer is designed
to avoid race conditions without blocking interrupts.
E 9
I 9
Wwrint() appends characters at the end and increments wwibq (*wwibq++
= c), and characters are taken off the buffer at wwibp using the
wwgetc() and wwpeekc() macros.  As is the convention in C, wwibq
and wwibe point to one position beyond the end.  In addition,
wwrint() will do a longjmp(wwjmpbuf) if wwsetjmp is true.  This is
used by wwiomux() to interrupt the select() which would otherwise
resume after the interrupt.  (Actually, I hear this is not true,
but the longjmp feature is used to avoid a race condition as well.
Anyway, it means I didn't have to depend on a feature in a
daily-changing kernel, but that's another story.) The macro
wwinterrupt() returns true if the input buffer is non-empty.
Wwupdate(), wwwrite(), and wwiomux() check this condition and will
return at the first convenient opportunity when it becomes true.
In the case of wwwrite(), the flag ww_nointr in the window structure
overrides this.  This feature allows the user to interrupt lengthy
outputs safely.  The structure of the input buffer is designed to
avoid race conditions without blocking interrupts.
E 9
E 5

D 9
     Wwiomux() copies pseudo-terminal outputs into their corresponding
E 9
I 9
     Actually, wwsetjmp and wwinterrupt() are part of a software
interrupt scheme used by the two interrupt catchers wwrint() and
wwchild().  Asserting the interrupt lets the synchronous parts of
the program know that there's an interesting asynchronous condition
(i.e., got a keyboard character, or a child process died) that they
might want to process before anything else.  The synchronous routines
can check for this condition with wwinterrupt() or by arranging
that a longjmp() be done.

     Wwiomux() copies pseudo-terminal output into their corresponding
E 9
windows.  Without anything to do, it blocks in a select(), waiting for
read ready on pseudo-terminals.  Reads are done into per-window buffers
in the window structures.  When there is at least one buffer non-empty,
wwiomux() finds the top most of these windows and writes it using
D 5
wwwrite().  Then the process is repeated.  The select() blocks only when
all of the windows' buffers are empty.  The non-blocking select() is
done only to pick up any output that may have come in during the wwwrite(),
which may take a long time.  A wwupdate() is done prior to calling
a blocking select().  This is the only time the screen is guaranteed to
be completely up to date.  The pseudo-terminals run in packet mode to
control output flushing and stopping.  Wwiomux() loops until
wwinterrupt() becomes true.
E 5
I 5
wwwrite().  Then the process is repeated.  A non-blocking select() is
done after a wwwrite() to pick up any output that may have come in
during the write, which may take a long time.  Specifically, we use
this to stop output or flush buffer when a pseudo-terminal tells us to
(we use pty packet mode).  The select() blocks only when all of the
windows' buffers are empty.  A wwupdate() is done prior to this, which
is the only time the screen is guaranteed to be completely up to date.
Wwiomux() loops until wwinterrupt() becomes true.
E 5

D 5
     The top level routine for all this is mloop().  In conversation mode,
it simply calls wwiomux(), which only returns when input is available.
The input buffer is then written to the pseudo-terminal of the current
window.  If the escape character is found in the input, command mode
is entered.  Otherwise, the process is repeated.  In command mode,
control is transferred to docmd() which returns only when conversation
mode is reentered.  Docmd() and other command processing routines
typically wait for input in a loop:
E 5
I 5
     The top level routine for all this is mloop().  In conversation
mode, it simply calls wwiomux(), which only returns when input is
available.  The input buffer is then written to the pseudo-terminal of
the current window.  If the escape character is found in the input,
command mode is entered.  Otherwise, the process is repeated.  In
command mode, control is transferred to docmd() which returns only when
conversation mode is reentered.  Docmd() and other command processing
routines typically wait for input in a loop:
E 5

D 5
	while (peekc() < 0)
E 5
I 5
	while (wwpeekc() < 0)
E 5
		wwiomux();

D 5
When the loop terminates, getc() is used to read the input buffer.
E 5
I 5
When the loop terminates, wwgetc() is used to read the input buffer.
E 5

     Output to the physical terminal is handled by the lowest level
routines of the window package, in the files ttoutput.c and tt.h.  The
D 5
standard IO package is not used, for better control over buffering and
to use non-blocking reads in wwrint().  The buffer size is set to
E 5
I 5
standard IO package is not used, to get better control over buffering
and to use non-blocking reads in wwrint().  The buffer size is set to
E 5
approximately one second of output time, based on the baudrate.

     The result of all this complexity is faster response time,
especially in output stopping and flushing.  Wwwrite() checks
wwinterrupt() after every line.  It also calls wwupdate() for each line
it writes.  The output buffer is limited to one second of output time.
Thus, there is usually only a delay of one to two lines plus one second
after a ^C or ^S.  Also, commands that produce lengthy output can be
aborted without actually showing all of it on the terminal.  (Try the
D 5
'h' command followed by escape immediately.)
E 5
I 5
'?' command followed by escape immediately.)
E 5
E 2
E 1
