h48163
s 00002/00002/01450
d D 8.2 93/11/27 11:09:16 eric 36 35
c don't use \(dg -- it apparently indicates that the author is deceased
e
s 00002/00002/01450
d D 8.1 93/06/08 14:12:30 bostic 35 34
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00002/00002/01450
d D 6.6 93/06/05 16:35:45 bostic 34 33
c new doc.mk; document numbering changes for 4.4BSD
e
s 00001/00012/01451
d D 6.5 91/04/17 12:07:19 bostic 33 32
c new copyright; att/bsd/shared
e
s 00004/00004/01459
d D 6.4 90/04/23 15:17:38 eric 32 31
c change my affiliation
e
s 00013/00005/01450
d D 6.3 89/01/23 09:43:05 bostic 31 30
c add Berkeley specific copyright notice
e
s 00002/00002/01453
d D 6.2 86/05/30 09:33:17 kjd 30 29
c Document distributed with 4.3bsd
e
s 00039/00002/01416
d D 6.1 86/04/20 13:19:56 eric 29 28
c insert pic picture
e
s 00011/00000/01407
d D 4.2 85/06/07 21:21:21 miriam 28 27
m 
c Add copyright
e
s 00000/00000/01407
d D 4.1 83/07/25 19:05:45 eric 27 26
m 
c 4.2 release version
e
s 00013/00007/01394
d D 3.26 83/03/14 10:25:11 eric 26 25
m 
c add references
e
s 00002/00002/01399
d D 3.25 83/01/22 16:53:48 eric 25 24
m 
c cleanup for UNICOM -- mostly typesetting stuff and details; single
c space it in troff
e
s 00052/00066/01349
d D 3.24 82/12/06 18:40:49 eric 24 23
m 030
m 058
m 068
m random
c readthrough, major restructuring of op.me, some reality therapy
e
s 00122/00099/01293
d D 3.23 82/11/14 19:16:03 eric 23 22
m 
c mods suggested by Marv Solomon -- still some refs to be added though
e
s 00101/00094/01291
d D 3.22 82/11/03 08:30:16 eric 22 21
m 028
c minor changes before printing for uwisc
e
s 00076/00080/01309
d D 3.21 82/11/02 15:32:40 eric 21 20
m 028
c edits on the plane on the way to Wisconsin.....
e
s 00369/01948/01020
d D 3.20 82/11/02 13:55:09 eric 20 19
m 028
c split documentation into two
e
s 00000/00012/02968
d D 3.19 82/06/07 07:06:28 eric 19 18
c strip out xlate stuff -- this belongs at a different level
e
s 00012/00000/02968
d D 3.18 82/05/15 12:29:48 eric 18 17
c add the 'R' flag to mailers, saying to rewrite the recipient addresses
c to be relative to the recipient.  This makes reply code easy, but
c confuses user mail programs that are expecting to have to rewrite
c recipient addresses.  In general, the receiving host must be "smart"
c for this to work.
e
s 00018/00006/02950
d D 3.17 82/02/27 11:50:04 eric 17 16
c change sense of -o flag, tell about daemon mode, etc.
e
s 00047/00008/02909
d D 3.16 82/02/20 19:16:34 eric 16 15
c make rewriting of addresses in headers really work.  This adds the $q
c macro.  The rewriting of the From: address is still ad hoc and should
c be integrated into this format.
c Note:  old .cf files will not work with this version.
e
s 00015/00009/02902
d D 3.15 82/02/04 20:26:34 eric 15 14
c random cleanup; add -p flag
e
s 00077/00025/02834
d D 3.14 82/01/23 14:15:49 eric 14 13
c modifications suggested by mark horton.  this version will probably
c go to usenix...
e
s 00145/00084/02714
d D 3.13 81/12/28 09:53:32 eric 13 12
c bring the documentation up to date.
e
s 00032/00032/02766
d D 3.12 81/10/23 16:37:24 eric 12 11
c change rules from $+h form to $2 form.
e
s 00025/00001/02773
d D 3.11 81/10/02 23:37:53 eric 11 10
c add blurb about ruleset two
e
s 00155/00109/02619
d D 3.10 81/10/01 18:38:43 eric 10 9
c integrate mike stonebraker suggestions
e
s 00090/00000/02638
d D 3.9 81/09/30 10:57:25 eric 9 8
c add bullshit introduction
e
s 00062/00032/02576
d D 3.8 81/09/09 10:23:01 eric 8 7
c add KAS suggestions (second round); add comments about some
c new features
e
s 00006/00000/02602
d D 3.7 81/09/07 10:23:11 eric 7 6
c add NOTUNIX compile flag to turn off UNIX "From " line processing
e
s 00009/00005/02593
d D 3.6 81/09/06 19:46:34 eric 6 5
c 
e
s 00029/00024/02569
d D 3.5 81/09/03 15:31:49 eric 5 4
c clean up references
e
s 00291/00141/02302
d D 3.4 81/08/31 13:41:22 eric 4 3
c 
e
s 00856/00226/01587
d D 3.3 81/08/29 18:58:24 eric 3 2
c major revisions (MKM + personal)
e
s 00214/00074/01599
d D 3.2 81/08/27 12:31:16 eric 2 1
c KAS comments, another edit, etc.
e
s 01673/00000/00000
d D 3.1 81/08/24 18:06:30 eric 1 0
c date and time created 81/08/24 18:06:30 by eric
e
u
U
f b 
f i 
t
T
I 28
D 33
.\"
E 33
D 31
.\" Sendmail
E 31
.\" Copyright (c) 1983 Eric P. Allman
D 31
.\" Berkeley, California
E 31
I 31
D 35
.\" Copyright (c) 1988 The Regents of the University of California.
.\" All rights reserved.
E 35
I 35
.\" Copyright (c) 1988, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 35
E 31
.\"
D 31
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 31
I 31
D 33
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 33
I 33
.\" %sccs.include.redist.roff%
E 33
E 31
.\"
.\"	%W% (Berkeley) %G%
.\"
E 28
I 1
D 3
.nr DR 1
I 2
.nr si 4n
E 3
I 3
D 29
.nr DR 1	\" this is a draft copy
E 29
I 29
.\"	pic -Pxx intro.me | ditroff -me -Pxx
I 30
D 34
.eh 'SMM:16-%''SENDMAIL \*- An Internetwork Mail Router'
.oh 'SENDMAIL \*- An Internetwork Mail Router''SMM:16-%'
E 34
I 34
.eh 'SMM:9-%''SENDMAIL \*- An Internetwork Mail Router'
.oh 'SENDMAIL \*- An Internetwork Mail Router''SMM:9-%'
E 34
E 30
E 29
.nr si 3n
E 3
E 2
D 30
.he 'SENDMAIL''%'
D 15
.if \n(DR .fo 'For Your Eyes Only'\*-DRAFT\*-'\*(td'
E 15
I 15
D 21
.if \n(DR .fo '\*-DRAFT\*-'\*(td'\*-DRAFT\*-'
E 21
I 21
D 29
.fo 'Version %I%'DRAFT'Last Mod %G%'
E 29
I 29
.fo 'Version %I%''Last Mod %G%'
E 30
E 29
E 21
E 15
D 25
.ls 2
E 25
I 25
.if n .ls 2
E 25
.+c
.(l C
D 4
.sz 12
E 4
I 4
.sz 14
E 4
D 20
SENDMAIL \*- An Internet Mail Router
E 20
I 20
SENDMAIL \*- An Internetwork Mail Router
E 20
.sz
.sp
D 13
Eric Allman
E 13
I 13
D 36
Eric Allman\(dg
E 36
I 36
Eric Allman*
E 36
E 13
I 4
.sp 0.5
E 4
.i
D 21
Project INGRES
Electronics Research Lab
University of California
Berkeley, California  94720
E 21
I 21
D 32
Britton-Lee, Inc.
1919 Addison Street, Suite 105.
Berkeley, California 94704.
E 32
I 32
University of California, Berkeley
Mammoth Project
E 32
E 21
.)l
I 20
.sp
.(l F
.ce
ABSTRACT
D 21

E 21
I 21
.sp \n(psu
E 21
Routing mail through a heterogenous internet presents many new
problems.  Among the worst of these is that of address mapping.
D 23
Historically, this has been handled on an ad hoc basis.  However,
E 23
I 23
Historically, this has been handled on an
.i "ad hoc"
basis.  However,
E 23
this approach has become unmanageable as internets grow.
D 21

E 21
I 21
.sp \n(psu
E 21
Sendmail acts a unified "post office" to which all mail can be
submitted.  Address interpretation is controlled by a production
system, which can parse both domain-based addressing and old-style
D 21
ad hoc addresses.  Mail is then dispatched to an outgoing mailer.
This system can expand trivially.  The production system is powerful
E 21
I 21
D 23
ad hoc addresses.
E 23
I 23
.i "ad hoc"
addresses.
E 23
The production system is powerful
E 21
enough to rewrite addresses in the message header to conform to the
standards of a number of common target networks, including old
(NCP/RFC733) Arpanet, new (TCP/RFC822) Arpanet, UUCP, and Phonenet.
D 21
Sendmail is not intended to perform user interface functions or
final delivery.  Sendmail also implements an SMTP server, message
E 21
I 21
Sendmail also implements an SMTP server, message
E 21
queueing, and aliasing.
D 21

This is approach is unique in that it allows external compatibility
with the old practices, and tries to make the mail system conform to
the user instead of the other way around.  Although sendmail is not
intended to circumvent new standards, it is intended to make the
transition less painful.  Sendmail does require certain base-level
standards on target mailers such as the basic semantics of certain
headers and the surface syntax of messages.  New mailers can be added
trivially; for example, a Purduenet channel was brought up in twenty
minutes.
E 21
.)l
E 20
I 4
.sp 2
E 4
.(f
D 21
This is
.if \n(DR draft
version %I%,
last modified on %G%.
.if \n(DR Please do not distribute this version without permission
.if \n(DR of the author.
E 21
I 21
D 36
\(dgA considerable part of this work
E 36
I 36
*A considerable part of this work
E 36
was done while under the employ
of the INGRES Project
D 32
at the University of California at Berkeley.
E 32
I 32
at the University of California at Berkeley
and at Britton Lee.
E 32
E 21
.)f
I 13
D 21
.(f
\(dgAuthor's current address:
Britton-Lee, Inc.
1919 Addison Street, Suite 105.
Berkeley, California 94704.
.)f
E 21
E 13
D 4
.sp 2
E 4
.pp
.i Sendmail
D 4
implements a general internetwork mail routing facility.
Features include aliasing and forwarding,
E 4
I 4
implements a general internetwork mail routing facility,
featuring aliasing and forwarding,
E 4
automatic routing to network gateways,
and flexible configuration.
.pp
I 9
D 20
In the early days of computer networking,
the problems of identification and communication
were quite simple by today's standards.
Each node on the network
would have an address,
and resources could be identified
E 20
I 20
In a simple network,
each node has an address,
and resources can be identified
E 20
with a host-resource pair;
in particular,
D 20
the mail system could refer to users
E 20
I 20
the mail system can refer to users
E 20
using a host-username pair.
D 20
Host names and numbers had to be administered by a central authority,
but usernames could be assigned locally to each host.
One early example is the ARPANET.
However, access to the ARPANET is limited,
and the connection cost is high.
Many alternative networks appeared,
such as the Berkeley Network,
the UUCP network,
and the CHAOS network.
Each network defined its own standards
for resource identification.
E 20
I 20
Host names and numbers have to be administered by a central authority,
but usernames can be assigned locally to each host.
E 20
.pp
D 20
As networks grew,
they eventually touched.
Certain special cases could be handled trivially
E 20
I 20
In an internet,
D 21
management is distributed.
E 21
I 21
multiple networks with different characterstics
and managements
D 22
must communicate
E 22
I 22
must communicate.
E 22
E 21
In particular,
the syntax and semantics of resource identification change.
Certain special cases can be handled trivially
E 20
D 23
by ad hoc techniques,
E 23
I 23
by
.i "ad hoc"
techniques,
E 23
D 20
as when one computer hung off another by a link,
or by providing network names that appeared local to hosts
E 20
I 20
such as
providing network names that appear local to hosts
E 20
on other networks,
D 21
as with the Ethernet at Xerox PARC.
E 21
I 21
D 26
as with the Ethernet at Xerox PARC [ref?].
E 26
I 26
as with the Ethernet at Xerox PARC.
E 26
E 21
D 20
The internet was born.
.pp
Internet topology became more complex with time.
Two networks might touch
in more than one place,
and the rapid expansion of networks
created a serious database update problem.
Since all the address syntaxes were created arbitrarily,
considerable confusion reigned.
Some networks required point-to-point routing,
E 20
I 20
However,  the general case is extremely complex.
For example,
some networks require point-to-point routing,
E 20
which simplifies the database update problem
since only adjacent hosts must be entered
into the system tables,
D 20
while others used end-to-end routing.
Some networks used a left-associative syntax
and others used a right-associative syntax:
ambiguity raised its ugly head.
E 20
I 20
while others use end-to-end addressing.
Some networks use a left-associative syntax
and others use a right-associative syntax,
D 21
causing ambiguity in addresses.
E 21
I 21
causing ambiguity in mixed addresses.
E 21
E 20
.pp
D 20
Internet proposals came to the rescue.
Basically, these proposed expanding the address pairs
E 20
I 20
D 21
A new set of internet standards seek to eliminate these problems.
E 21
I 21
Internet standards seek to eliminate these problems.
E 21
Initially, these proposed expanding the address pairs
E 20
to address triples,
D 20
comprised of network-host-resource.
Network numbers would be universally agreed upon,
and hosts could be assigned in the old way
E 20
I 20
consisting of
{network, host, resource}
triples.
D 21
Network numbers can be universally agreed upon,
E 21
I 21
Network numbers must be universally agreed upon,
E 21
and hosts can be assigned locally
E 20
on each network.
D 20
But these proposals all tended to be far-reaching
and fundamentally incompatible with the old networks.
Protocols and proposals met to do battle.
And there was the issue of assigning network numbers:
there had to be a central clearing house,
and any networks that might ever touch
had to be given their very own number.
Naturally, not everyone who thought they deserved a number
got one.
E 20
I 20
D 23
The user level presentation was quickly expanded
E 23
I 23
The user-level presentation was quickly expanded
E 23
to address domains,
comprised of a local resource identification
and a hierarchical domain specification
with a common static root.
The domain technique
separates the issue of physical versus logical addressing.
For example,
an address of the form
.q "eric@a.cc.berkeley.arpa"
describes only the logical
D 21
organization of the address space,
whereas the physical structure is implied.
E 21
I 21
organization of the address space.
E 21
E 20
.pp
D 20
Which brings us to today.
Although it will be nice when everyone everywhere
has a unique network number,
it cannot be expected very soon.
The old, stupid networks take time to die,
and bureaucratic inertia is still the rule.
.pp
E 20
.i Sendmail
is intended to help bridge the gap
D 23
between the totally ad hoc world
E 23
I 23
between the totally
.i "ad hoc"
world
E 23
of networks that know nothing of each other
and the clean, tightly-coupled world
of unique network numbers.
D 20
It uses old arbitrary address syntaxes
and resolves ambiguities using heuristics
specified by the system administrator
who creates the configuration file.
E 20
I 20
It can accept old arbitrary address syntaxes,
resolving ambiguities using heuristics
specified by the system administrator,
as well as domain-based addressing.
E 20
It helps guide the conversion of message formats
between disparate networks.
In short,
.i sendmail
D 20
is glue that holds the world together
until the new world is ready to be inhabited.
I 15
However, it is not unreasonable to expect
escrow to take several years to close on this
new world.
E 20
I 20
is designed to assist a graceful transition
to consistent internetwork addressing schemes.
E 20
E 15
.sp
.pp
E 9
Section 1 discusses the design goals for
.i sendmail .
Section 2 gives an overview of the basic functions of the system.
In section 3,
details of usage are discussed.
D 20
A detailed description of the configuration file
is given in section 4,
including a walkthrough of a specific configuration file.
Section 5 compares
E 20
I 20
Section 4 compares
E 20
.i sendmail
to other internet mail routers,
and an evaluation of
.i sendmail
D 20
is given in section 6,
E 20
I 20
is given in section 5,
E 20
including future plans.
.sh 1 "DESIGN GOALS"
.pp
D 20
.i Sendmail
D 15
was an outgrowth of
E 15
I 15
is an outgrowth of
E 15
.i delivermail,
a previous incarnation of a UNIX internetwork mail router.
.i Delivermail
was written relatively quickly.
D 13
The first version only knew about taking apart addresses
for explicit forwarding
and limited aliasing;
automatic forwarding and other features
E 13
I 13
The first version could only parse addresses based on single
characters embedded in the address,
required explicit
description of gateways,
and had only limited aliasing;
automatic forwarding of messages to another gateway and other features
E 13
came later.
.pp
E 20
Design goals for
D 20
.i delivermail
included:
E 20
I 20
.i sendmail
include:
E 20
.np
D 23
Compatibility with the existing mail system,
E 23
I 23
Compatibility with the existing mail programs,
E 23
including Bell version 6 mail,
D 4
Bell version 7 mail,
Berkeley mail,
E 4
I 4
Bell version 7 mail
D 26
[UNIX80],
E 26
I 26
[UNIX83],
E 26
Berkeley
.i Mail
D 8
[Schoens79],
E 8
I 8
[Shoens79],
E 8
E 4
D 2
BerkNet mail,
and hopefully UUCP mail.
ARPANET mail was also required,
E 2
I 2
BerkNet mail
D 3
[BerkNet],
.(d
[BerkNet]
.)d
E 3
I 3
D 5
[Schmidt99],
E 5
I 5
[Schmidt79],
E 5
E 3
and hopefully UUCP mail
D 3
[UUCP].
.(d
[UUCP]
.)d
E 3
I 3
[Nowitz78a, Nowitz78b].
E 3
ARPANET mail
D 3
[ARPANET]
.(d
[ARPANET]
.)d
E 3
I 3
[Crocker77a, Postel77]
E 3
D 10
was also required,
E 2
and the difference in format
D 2
drove the decision to put all such formatting
E 2
I 2
influenced the decision to put all such formatting
E 2
into the low-level mailer.
E 10
I 10
was also required.
E 10
.np
D 14
Because of time constraints,
D 10
utilize as much existing software as possible.
The changes to the existing software were minimal:
Berkeley mail,
BerkNet,
UUCP, and the ARPANET FTP server
D 4
had to be modified to call
E 4
I 4
were modified to call
E 4
.i delivermail
as their server instead of
/bin/mail
(or in the case of the ARPANET,
I 2
instead of
E 2
writing the mail into a file
which has no meaning to standard UNIX mailers).
The only major modifications
were to /bin/mail,
which was maintained both as a user interface sender
and as a
.i delivermail
mailer.
As a sender,
it calls
.i delivermail .
.i Delivermail
calls it in turn to do local delivery,
so a
.b \-d
flag was added to avoid loops.
E 10
.np
E 14
D 10
Reliability was considered essential
E 10
I 10
Reliability, in the sense of guaranteeing
that every message is correctly delivered
or at least brought to the attention of a human
for correct disposal;
no message should ever be completely lost.
D 23
This was considered essential
E 23
I 23
This goal was considered essential
E 23
E 10
because of the emphasis on mail in our environment.
D 23
This turned out to be one of the hardest goals to satisfy,
E 23
I 23
It has turned out to be one of the hardest goals to satisfy,
E 23
especially in the face of the many anomalous message formats
produced by various ARPANET sites.
For example,
D 10
MIT and CMU allow mail from people who are not logged in
(and which have meaningless from addresses),
E 10
I 10
D 23
certain sites generate incorrect from addresses
E 10
which caused error message loops.
E 23
I 23
certain sites generate improperly formated addresses,
occasionally
causing error-message loops.
E 23
D 2
WHARTON changes our host name from
.q Berkeley
to
.q Berkel-
which creates interesting problems under certain circumstances \*-
not to mention rendering any
.q reply
feature unworkable.
CMU puts blanks in names,
E 2
I 2
D 10
CMU also puts blanks in names,
E 2
which created amazing problems,
since many UNIX mail programs assume that an address
E 10
I 10
Some hosts use blanks in names,
D 23
which created problems with
E 23
I 23
causing problems with
E 23
UNIX mail programs that assume that an address
E 10
is one word.
D 20
And at least one person lists his address as
.q "From: the TTY of ..." ,
giving a
.q Sender:
field with his real address.
E 20
I 20
The semantics of some fields
are interpreted slightly differently
by different sites.
E 20
In summary,
D 23
the obscure aspects of the ARPANET mail protocol
E 23
I 23
the obscure features of the ARPANET mail protocol
E 23
D 2
really are used,
E 2
I 2
D 4
really are used and
E 4
I 4
really
.i are
used and
E 4
E 2
are difficult to support,
but must be supported.
I 2
D 23
But even obeying the standard is insufficient.
E 23
I 23
D 24
Even obeying the standard is insufficient.
E 23
For example,
D 20
WHARTON changes our host name from
E 20
I 20
Wharton changed our host name from
E 20
.q BERKELEY
to
.q BERKEL- ,
which confused error processing.
D 20
Degenerate cases such as this
E 20
I 20
Cases such as this
E 20
must be handled gracefully.
E 24
E 2
D 20
.pp
D 10
There were certain non-goals in
.i delivermail
also.
Many of these resulted from the expectation that
E 10
I 10
There were certain other non-goals in
.i delivermail .
These resulted from the expectation that
E 10
it would only be used at Berkeley,
and probably only at a few sites at Berkeley.
E 20
.np
D 20
It was fair game to compile configuration information
into the code,
D 10
even to assume that they were running BerkNet.
E 10
I 10
even to assume that every host was running BerkNet.
E 10
.np
D 10
The problem of multiple connections to a single network
E 10
I 10
The problem of multiple gateways to a single network
E 10
was not foreseen.
For example,
D 10
on a host with no UUCP connection,
all UUCP mail was sent to a single host.
E 10
I 10
all UUCP mail was sent to a single gateway host.
E 10
In fact,
D 10
Berkeley is running UUCP on at least three hosts.
E 10
I 10
Berkeley has at least three UUCP gateway hosts.
E 10
.np
D 10
No attempt was made to reduce the volume of mail across a network link.
E 10
I 10
No attempt was made to reduce the volume of mail across a network link
by sending only one copy of a message
to multiple recipients on the same host.
E 10
Besides the difficulty of doing this,
we failed to appreciate how much volume there would be.
I 13
For example,
one of our gateways processed a message approximately
every twenty seconds
during peak hours, many of which were duplicates.
E 13
I 4
.np
E 20
Existing software to do actual delivery
should be used whenever possible.
D 23
This resulted as much from political and practical considerations
E 23
I 23
This goal derives as much from political and practical considerations
E 23
as technical.
E 4
D 20
.pp
I 10
This resulted in an architecture illustrated in figure 1.
.(z
.hl
.ie t \
.	sp 18
.el \{\
.(c
+---------+   +---------+   +---------+
| sender1 |   | sender2 |   | sender3 |
+---------+   +---------+   +---------+
     |  	   |             |
     +----------+  +  +----------+
		|  |  |
		v  v  v
            +-------------+
            | delivermail |
            +-------------+
		|  |  |
     +----------+  +  +----------+
     |  	   |             |
     v             v             v
+---------+   +---------+   +---------+
| mailer1 |   | mailer2 |   | mailer3 |
+---------+   +---------+   +---------+
.)c
.\}

.ce
Figure 1 \*- Delivermail System Structure.
.hl
.)z
The user interacts with a mail generating and sending program.
When the mail is created,
D 15
generator calls
E 15
I 15
the generator calls
E 15
.i delivermail ,
which routes the message to the correct mailer(s).
Since some of the senders may be network servers
and some of the mailers may be network users,
.i delivermail
D 15
is referred to as an
.q "internet mailer" .
E 15
I 15
may be used as an internet mail gateway.
E 15
.pp
E 10
.i Sendmail
maintained the goals of
.i delivermail.
Time was less of a constraint,
D 2
but not reimplementing the wheel
(or other mailers)
had proven to be a wise move in many ways.
E 2
I 2
but not reimplementing basic mailers
has proven to be a wise move in many ways.
E 2
For example,
many internet mailers deliver local mail directly.
This is more efficient,
but builds in the design decisions
of the local mailer,
and makes it difficult to concentrate
on the
.q "real problems"
(such as locking).
Other design goals were:
E 20
.np
D 21
.i Sendmail
D 20
should operate in more complex environments,
E 20
I 20
should allow fairly complex environments,
E 21
I 21
Easy expansion to
fairly complex environments,
E 21
E 20
including multiple
D 2
(but not equivalent)
connections to a single network.
This required that the contents of a host field
E 2
I 2
connections to a single network type
D 4
(such as with multiple UUCP or Ether nets),
E 4
I 4
(such as with multiple UUCP or Ether nets
D 6
[Ether99]),
E 6
I 6
D 21
[Metcalfe76]),
E 6
E 4
D 10
requiring that the contents of a host field
E 2
be considered,
D 2
as well as just the syntax of an address.
E 2
I 2
as well as just the syntax of an address,
E 10
I 10
requiring that the contents of an address
be considered
as well as the syntax,
E 21
I 21
[Metcalfe76]).
D 23
This requires consideration of the contents of an address
as well as the syntax
E 21
E 10
in order to determine the gateway to use.
E 23
I 23
This goal requires consideration of the contents of an address
as well as its syntax
in order to determine which gateway to use.
E 23
E 2
D 10
This results both from a desire to simplify use by other sites,
and to anticipate the environment Berkeley is moving towards.
E 10
I 10
For example,
D 20
the ARPANET is bringing up a new protocol
called TCP to replace the old NCP protocol.
E 20
I 20
the ARPANET is bringing up the
TCP protocol to replace the old NCP protocol.
E 20
No host at Berkeley runs both TCP and NCP,
so it is necessary to look at the ARPANET host name
to determine whether to route mail to an NCP gateway
or a TCP gateway.
E 10
.np
Configuration should not be compiled into the code.
D 23
A single binary should be able to run as is at any site
(modulo such basic changes as the CPU type or the operating system).
E 23
I 23
A single compiled program should be able to run as is at any site
(barring such basic changes as the CPU type or the operating system).
E 23
D 2
We have found this apparently unimportant goal
E 2
I 2
We have found this seemingly unimportant goal
E 2
to be critical in real life.
I 2
Besides the simple problems that occur when any program gets recompiled
in a different environment,
many sites like to
.q fiddle
with anything that they will be recompiling anyway.
E 2
.np
D 20
.i Delivermail
D 4
only knows about one alias file.
E 4
I 4
only knows about one alias file
and per-user forwarding is unsupported.
E 4
D 10
Berkeley is a sufficiently open environment
that this can be writable by everyone,
E 10
I 10
Berkeley is a sufficiently relaxed environment
that the system alias file can be writable by everyone,
E 10
but other environments are not so lax.
Thus,
.i sendmail
E 20
I 20
.i Sendmail
E 20
must be able to let various groups maintain their own mailing lists,
D 10
and individuals their own forwarding,
E 10
I 10
and let individuals specify their own forwarding,
E 10
D 23
without writing the system alias file.
E 23
I 23
without modifying the system alias file.
E 23
.np
D 10
Customized incoming mailers should be supported.
E 10
I 10
D 23
Each user should be able to specify the mailer to execute
to process mail being delivered for them.
E 10
I 2
This allows users who are using specialized mailers
that want to use a different format to build their environment
E 23
I 23
Each user should be able to specify which mailer to execute
to process mail being delivered for him.
This feature allows users who are using specialized mailers
that use a different format to build their environment
E 23
without changing the system,
D 23
and allows specialized functions
E 23
I 23
and facilitates specialized functions
E 23
(such as returning an
.q "I am on vacation"
message).
E 2
.np
Network traffic should be minimized
by batching addresses to a single host where possible,
D 23
without assistance by the user.
E 23
I 23
without assistance from the user.
E 23
I 20
.pp
D 23
This resulted in an architecture illustrated in figure 1.
E 23
I 23
These goals motivated the architecture illustrated in figure 1.
E 23
.(z
.hl
.ie t \
I 29
\{\
.ie !"\*(.T"" \
\{\
.PS
boxht = 0.5i
boxwid = 1.0i

	down
S:	[
		right
	S1:	box "sender1"
		move
		box "sender2"
		move
	S3:	box "sender3"
	]
	arrow
SM:	box "sendmail" wid 2i ht boxht
	arrow
M:	[
		right
	M1:	box "mailer1"
		move
		box "mailer2"
		move
	M3:	box "mailer3"
	]

	arrow from S.S1.s to 1/2 between SM.nw and SM.n
	arrow from S.S3.s to 1/2 between SM.n and SM.ne

	arrow from 1/2 between SM.sw and SM.s to M.M1.n
	arrow from 1/2 between SM.s and SM.se to M.M3.n
.PE
.\}
.el \
E 29
.	sp 18
I 29
.\}
E 29
.el \{\
.(c
+---------+   +---------+   +---------+
| sender1 |   | sender2 |   | sender3 |
+---------+   +---------+   +---------+
     |  	   |             |
     +----------+  +  +----------+
		|  |  |
		v  v  v
            +-------------+
            |   sendmail  |
            +-------------+
		|  |  |
     +----------+  +  +----------+
     |  	   |             |
     v             v             v
+---------+   +---------+   +---------+
| mailer1 |   | mailer2 |   | mailer3 |
+---------+   +---------+   +---------+
.)c
.\}

.ce
Figure 1 \*- Sendmail System Structure.
.hl
.)z
The user interacts with a mail generating and sending program.
When the mail is created,
the generator calls
.i sendmail ,
which routes the message to the correct mailer(s).
Since some of the senders may be network servers
and some of the mailers may be network clients,
.i sendmail
may be used as an internet mail gateway.
E 20
.sh 1 "OVERVIEW"
.sh 2 "System Organization"
.pp
.i Sendmail
neither interfaces with the user
nor does actual mail delivery.
Rather,
it collects a message
D 2
generated by a user interface program (UIP),
does editing as required by the internet environment,
E 2
I 2
generated by a user interface program (UIP)
D 3
[MPM],
.(d
[MPM]
.)d
E 3
I 3
such as Berkeley
D 4
.i Mail
[Schoens79],
E 4
I 4
.i Mail ,
E 4
MS
[Crocker77b],
or MH
D 4
[MH99]
E 3
does editing as required by the destination network,
E 4
I 4
D 8
[MH99],
E 8
I 8
[Borden79],
E 8
edits the message as required by the destination network,
E 4
E 2
and calls appropriate mailers
D 10
to do mail delivery or queueing for network transmission
(the exception is when mailing to a file).
E 10
I 10
to do mail delivery or queueing for network transmission\**.
.(f
\**except when mailing to a file,
when
.i sendmail
does the delivery directly.
.)f
E 10
This discipline allows the insertion of new mailers
at minimum cost.
D 4
In this sense it is like the Message Processing Module (MPM)
E 4
I 4
In this sense 
.i sendmail
resembles the Message Processing Module (MPM)
E 4
D 3
of [1].
.(d
[1] Postel -- internet message structure
.)d
E 3
I 3
of [Postel79b].
I 20
.sh 2 "Interfaces to the Outside World"
.pp
There are three ways
.i sendmail
can communicate with the outside world,
both in receiving and in sending mail.
These are using the conventional UNIX
argument vector/return status,
speaking SMTP over a pair of UNIX pipes,
and speaking SMTP over an interprocess(or) channel.
.sh 3 "Argument vector/exit status"
.pp
This technique is the standard UNIX method
for communicating with the process.
D 23
All recipients are sent in the argument vector,
and the message is sent on the standard input.
E 23
I 23
A list of recipients is sent in the argument vector,
and the message body is sent on the standard input.
E 23
Anything that the mailer prints
D 22
is simply connected and sent back to the user
E 22
I 22
D 23
is simply collected and sent back to the user
E 23
I 23
is simply collected and sent back to the sender
E 23
E 22
if there were any problems.
The exit status from the mailer is collected
after the message is sent,
and a diagnostic is printed if appropriate.
.sh 3 "SMTP over pipes"
.pp
The SMTP protocol
[Postel82]
can be used to run an interactive lock-step interface
with the mailer.
A subprocess is still created,
D 22
but no recipients are passed to the mailer.
E 22
I 22
D 23
but no recipients are passed to the mailer
E 23
I 23
but no recipient addresses are passed to the mailer
E 23
via the argument list.
E 22
Instead, they are passed one at a time
in commands sent to the processes standard input.
Anything appearing on the standard output
must be a reply code
in a special format.
.sh 3 "SMTP over an IPC connection"
.pp
D 23
This technique is almost like the previous technique,
E 23
I 23
This technique is similar to the previous technique,
E 23
except that it uses a 4.2bsd IPC channel
D 26
[ref?].
E 26
I 26
[UNIX83].
E 26
This method is exceptionally flexible
in that the mailer need not reside
on the same machine.
D 23
This is normally used to connect to a sendmail process
E 23
I 23
It is normally used to connect to a sendmail process
E 23
on another machine.
E 20
E 3
D 10
See Figure 1.
.(z
I 2
.hl
I 3
.ie t \
D 4
.	.sp 18
E 4
I 4
.	sp 18
E 4
.el \{\
E 3
E 2
.(c
	       +-------+
	       | user  |
	       +-------+
		   |
	        +-----+
	        | UIP |
	        +-----+
		   |
             +-----------+
             | sendmail  |
             +-----------+
		|  |  |
     +----------+  +  +----------+
     |  	   |             |
+---------+   +---------+   +---------+
D 2
| mailer  |   | mailer  |   | mailer  |
E 2
I 2
| mailer1 |   | mailer2 |   | mailer3 |
E 2
+---------+   +---------+   +---------+
.)c
I 3
.\}
E 3

.ce
Figure 1 \*- System Structure.
I 2
.hl
E 2
.)z
E 10
.sh 2 "Operational Description"
I 10
.pp
D 21
When an agent wants to send a message,
E 21
I 21
D 23
When a client wants to send a message,
E 23
I 23
When a sender wants to send a message,
E 23
E 21
D 20
it does a normal program call to
.i sendmail .
The arguments it passes include flags giving options
and a list of addresses of intended recipients.
It then writes the message to be sent to the standard input
of
.i sendmail .
E 20
I 20
it issues a request to
.i sendmail
using one of the three methods described above.
E 20
.i Sendmail
D 20
delivers the message if possible,
saving a copy of it if there were errors,
and returns an exit status code
telling what (if anything) went wrong.
.pp
The message should have a header at the beginning.
The header is formatted as a series of lines
of the form
.(b
field-name: field-value
.)b
Field-value can be split across lines by starting the following
lines with a space or a tab.
The header is separated from the body of the message
by a blank line.
No formatting requirements are imposed on the message
except that they must be lines of text
(i.e., binary data is not allowed).
E 20
I 20
operates in two distinct phases.
In the first phase,
it collects and stores the message.
In the second phase,
message delivery occurs.
D 23
If there were errors during processing,
E 23
I 23
If there were errors during processing
during the second phase,
E 23
.i sendmail
creates and returns a new message describing the error
and/or returns an status code
telling what went wrong.
E 20
E 10
.sh 3 "Argument processing and address parsing"
.pp
D 13
The arguments are first scanned,
E 13
I 13
D 20
The arguments to
E 20
I 20
If
E 20
.i sendmail
I 20
is called using one of the two subprocess techniques,
the arguments
E 20
D 22
are first scanned,
E 22
I 22
are first scanned
E 22
E 13
D 4
and flag arguments are processed.
The remaining arguments are addresses.
They are parsed in turn,
E 4
I 4
D 23
and flag arguments processed.
E 23
I 23
and option specifications are processed.
E 23
D 20
The remaining arguments are
parsed in turn as addresses,
E 20
I 20
Recipient addresses are then collected,
either from the command line
or from the SMTP
RCPT command,
E 20
E 4
and a list of recipients is created.
D 4
Aliasing is done at this step.
As much validity checking of the addresses as possible
is done at this step.
Syntax is checked, and local addresses can be verified,
E 4
I 4
D 23
Aliases are expanded at this step.
E 23
I 23
Aliases are expanded at this step,
including mailing lists.
E 23
D 13
As much validation of the addresses as possible
E 13
I 13
As much validation as possible of the addresses
E 13
is done at this step:
syntax is checked, and local addresses are verified,
E 4
but detailed checking of host names and addresses
D 4
is not checked until later.
Forwarding is also done
E 4
I 4
is deferred until delivery.
Forwarding is also performed
E 4
as the local addresses are verified.
.pp
D 4
As each address is parsed,
it is appended to the recipient list.
E 4
I 4
.i Sendmail
appends each address
to the recipient list after parsing.
E 4
When a name is aliased or forwarded,
D 4
the old name is not removed from the list,
but a flag is set in the address header
E 4
I 4
the old name is retained in the list,
D 20
and a flag is set in the address header
E 4
that tells the delivery phase
E 20
I 20
and a flag is set that tells the delivery phase
E 20
D 4
to not actually deliver the message to this recipient.
E 4
I 4
to ignore this recipient.
E 4
D 23
This list is kept without duplicates,
E 23
I 23
This list is kept free from duplicates,
E 23
preventing alias loops
D 23
and eliminating people receiving two copies of a message,
D 4
as might happen if a person were in two groups.
E 4
I 4
as might occur if a person were in two groups.
E 23
I 23
and duplicate messages deliverd to the same recipient,
as might occur if a person is in two groups.
E 23
E 4
D 2
.pp
The recipient list is kept partitioned by mailer;
this simplifies the task of sending one copy of a message
across network links.
E 2
.sh 3 "Message collection"
.pp
D 4
The message is then collected from the standard input.
Parsing of the message header is done at this point.
E 4
I 4
.i Sendmail
D 20
then collects the message from the standard input.
The message header is parsed at this point.
E 4
The header is stored in memory,
E 20
I 20
then collects the message.
The message should have a header at the beginning.
No formatting requirements are imposed on the message
except that they must be lines of text
(i.e., binary data is not allowed).
The header is parsed and stored in memory,
E 20
and the body of the message is saved
D 2
in a temp file.
E 2
I 2
in a temporary file.
E 2
.pp
D 10
Collection occurs even if no addresses were valid
E 10
I 10
D 23
The message is still collected even if no addresses were valid
E 10
to simplify program interface.
E 23
I 23
To simplify the program interface,
the message is collected even if no addresses were valid.
E 23
The message will be returned with an error.
.sh 3 "Message delivery"
.pp
D 2
For each mailer known to the system,
the part of the recipient list for this mailer is scanned.
For each unique host,
E 2
I 2
D 4
For each unique mailer and host,
E 2
a call is made to the mailer.
E 4
I 4
D 23
For each unique mailer and host in the send list,
E 23
I 23
For each unique mailer and host in the recipient list,
E 23
.i sendmail
calls the appropriate mailer.
E 4
D 10
Each call contains the users on that host.
Mailers that only accept one recipient at a time
E 10
I 10
Each mailer invocation sends to all users receiving the message on one host.
D 23
Mailers that only accept one user at a time
E 23
I 23
Mailers that only accept one recipient at a time
E 23
E 10
are handled properly.
.pp
D 4
.i Sendmail
D 2
then forks a process for each mailer
E 2
I 2
forks a process for each mailer
E 2
with a non-empty send list.
The message is then sent to the mailer
E 4
I 4
The message is sent to the mailer
E 4
D 20
(which must read its standard input)
E 20
I 20
using one of the same three interfaces
used to submit a message to sendmail.
D 23
Each instantiation of the message is
E 23
I 23
Each copy of the message is
E 23
E 20
prepended by a customized header.
D 4
The exit code is caught and checked,
E 4
I 4
D 10
The mailer exit code is caught and checked,
E 10
I 10
D 20
The mailer exit status code is caught and checked,
E 20
I 20
The mailer status code is caught and checked,
E 20
E 10
E 4
and a suitable error message given as appropriate.
The exit code must conform to a system standard
D 23
or a meaningless message
E 23
I 23
or a generic message
E 23
(\c
.q "Service unavailable" )
is given.
I 13
.sh 3 "Queueing for retransmission"
.pp
D 20
If the mailer returned an error status that
E 20
I 20
If the mailer returned an status that
E 20
indicated that it might be able to handle the mail later,
.i sendmail
will queue the mail and try again later.
E 13
D 10
.pp
D 4
Delivery to files is handled directly.
E 4
I 4
Delivery to files executes directly.
E 10
E 4
.sh 3 "Return to sender"
.pp
D 23
If errors occurred during processing,
E 23
I 23
If errors occur during processing,
E 23
D 4
the message is returned to the sender for retransmission.
E 4
I 4
.i sendmail
returns the message to the sender for retransmission.
E 4
The letter can be mailed back
or written in the file
.q dead.letter
D 2
in the sender's home directory.
E 2
I 2
in the sender's home directory\**.
.(f
\**Obviously, if the site giving the error is not the originating
site, the only reasonable option is to mail back to the sender.
Also, there are many more error disposition options,
but they only effect the error message \*- the
.q "return to sender"
function is always handled in one of these two ways.
.)f
I 21
.sh 2 "Message Header Editing"
.pp
Certain editing of the message header
occurs automatically.
Header lines can be inserted
under control of the configuration file.
Some lines can be merged;
for example,
a
.q From:
line and a
.q Full-name:
line can be merged under certain circumstances.
E 21
E 2
.sh 2 "Configuration File"
.pp
Almost all configuration information is read at runtime
D 4
from an ASCII file.
Information encoded in this file includes
E 4
I 4
from an ASCII file,
encoding
E 4
D 10
macro definitions,
header declarations,
mailer definitions,
and address rewriting rules.
E 10
I 10
macro definitions
(defining the value of macros used internally),
header declarations
(telling sendmail the format of header lines that it will process specially,
i.e., lines that it will add or reformat),
mailer definitions
(giving information such as the location and characteristics
of each mailer),
and address rewriting rules
(a limited production system to rewrite addresses
D 21
which is used to effectively parse the addresses).
E 21
I 21
which is used to parse and rewrite the addresses).
I 24
.pp
To improve performance when reading the configuration file,
a memory image can be provided.
This provides a
.q compiled
form of the configuration file.
E 24
E 21
E 10
D 22
.sh 3 Macros
.pp
Macros can be used in three ways.
Certain macros transmit
unstructured textual information
into the mail system,
such as the name
.i sendmail
will use to identify itself in error messages.
Other macros transmit information from
.i sendmail
to the configuration file
for use in creating other fields
(such as argument vectors to mailers);
D 4
examples of these are the name of the sender and the host and user
E 4
I 4
e.g., the name of the sender,
and the host and user
E 4
of the recipient.
Other macros are unused internally,
and can be used as shorthand in the configuration file.
.sh 3 "Header declarations"
.pp
D 4
Header declarations declare to
E 4
I 4
Header declarations inform
E 4
.i sendmail
D 4
the set of known header lines.
E 4
I 4
of the format of known header lines.
E 4
Knowledge of a few header lines
is built into
.i sendmail ,
such as the
.q From:
and
.q Date:
lines.
.pp
D 4
Most headers declared in the configuration file
E 4
I 4
Most configured headers
E 4
will be automatically inserted
in the outgoing message
if they don't exist in the incoming message.
Certain headers are suppressed by some mailers.
.sh 3 "Mailer declarations"
.pp
Mailer declarations tell
.i sendmail
of the various mailers available to it.
D 4
The definition includes the internal name of the mailer,
E 4
I 4
The definition specifies the internal name of the mailer,
E 4
the pathname of the program to call,
some flags associated with the mailer,
and an argument vector to be used on the call;
this vector is macro expanded before use.
.sh 3 "Address rewriting rules"
.pp
The heart of address parsing in
.i sendmail
D 8
is the rewriting rules.
E 8
I 8
is a set of rewriting rules.
E 8
D 2
These are an ordered list of pattern-replacement rules.
E 2
I 2
These are an ordered list of pattern-replacement rules,
D 10
somewhat like a production system,
except that order is critical.
E 2
Each address is applied successively to these rules
I 2
being rewritten into a different (textual) form
E 2
until it resolves into a canonical address
E 10
I 10
(somewhat like a production system,
except that order is critical),
which are applied to each address.
The address is rewritten textually until it is either rewritten
into a special canonical form
E 10
(i.e.,
D 10
a [mailer, host, user]
3-tuple),
E 10
I 10
a (mailer, host, user)
3-tuple,
D 20
such as (arpanet, usc-isif, postel)
E 20
I 20
such as {arpanet, usc-isif, postel}
E 20
representing the address
.q "postel@usc-isif" ),
E 10
or it falls off the end.
When a pattern matches,
the rule is reapplied until it fails.
I 20
D 21
.sh 3 "Option setting"
E 21
.pp
The configuration file also supports the editing of addresses
into different formats.
For example,
an address of the form:
.(b
ucsfcgl!tef
.)b
might be mapped into:
.(b
tef@ucsfcgl.UUCP
.)b
to conform to the domain syntax.
Translations can also be done in the other direction.
E 20
D 21
.sh 2 "Message Header Editing"
E 21
I 21
.sh 3 "Option setting"
E 21
.pp
D 21
Certain editing of the message header
occurs automatically.
Header lines can be inserted
under control of the configuration file.
Some lines can be merged;
for example,
a
.q From:
line and a
.q Full-name:
line can be merged under certain circumstances.
E 21
I 21
There are a number of options that can be set
from the configuration file.
These include the pathnames of various support files,
timeouts,
default modes,
etc.
E 22
E 21
D 2
.sh 1 USAGE
E 2
I 2
.sh 1 "USAGE AND IMPLEMENTATION"
E 2
.sh 2 "Arguments"
.pp
D 3
Arguments must be presented with flags before addresses.
The flags are:
.nr ii 1i
.ip "\-f addr"
The mail is from
.i addr .
This flag is ignored unless the real user
is root,
network,
or uucp,
or if
.i addr
contains an exclamation point
(because of certain restrictions in UUCP).
.ip "\-r addr"
An obsolete form of
.b \-f .
.ip "\-h cnt"
Sets the
.q "hop count"
to
.i cnt .
This represents the number of times this message has been processed
by
.i sendmail
(to the extent that it is supported by the underlying networks).
.i Cnt
is incremented during processing,
and if it reaches
MAXHOP
(currently 30)
.i sendmail
throws away the message with an error.
.ip "\-F\&name"
Sets the full name of this user to
.i name .
.ip \-e\&p
Print error messages (default).
.ip \-e\&q
Throw away error messages.
The only response is the exit status.
.ip \-e\&m
Mail back errors.
.ip \-e\&w
.q Write
back errors \*- or mail them if the user is not logged in.
.ip \-e\&e
Do special error processing for BerkNet.
This involves mailing back the errors
but always returning a zero exit status.
.ip \-n
Don't do aliasing or forwarding.
.ip \-m
Include me in alias expansions.
Normally
.i sendmail
suppresses the sender
if in a group being sent to.
.ip \-i
Don't take a dot to end a message.
.ip \-t
Read the header for
.q To: ,
.q Cc: ,
and
.q Bcc:
lines, and send to everyone listed in those lists.
The
.q Bcc:
line will be deleted before sending.
I 2
Any addresses in the argument vector will be deleted
from the send list.
E 2
.ip \-a\&m
Do special processing for the
ARPANET.
This includes taking the
.q "From:"
person from the header,
printing
ARPANET
style messages
D 2
(preceded by three digits),
E 2
I 2
(preceded by three digit reply codes for compatibility with
the FTP protocol
[FTP1, FTP2]),
.(d
[FTP1] -- ftp protocol
.)d
.(d
[FTP2] -- revised FTP reply codes
.)d
E 2
and ending lines with <CRLF>.
.ip \-a\&f
Same as
.b \-a\&m ,
D 2
except print out message numbers appropriate for the MLFL command.
E 2
I 2
except print out message numbers appropriate for the MLFL command
[MLFL].
.(d
[MLFL] -- RFC733
.)d
E 2
.ip \-s
Save UNIX-style
.q From
lines at the beginning of headers.
Normally they are assumed redundant
and discarded.
.ip \-v
Give a blow-by-blow description of function.
This gives information of interest to the user
rather than for the
.i sendmail
maintainer;
for example,
aliases are printed as expanded
and mailer functions are printed as they run.
.ip \-C\&file
Use a different configuration file.
.ip \-A\&file
Use a different alias file.
.ip \-I
Initialize the DBM version
of the alias file.
If
.b \-I
is given,
no delivery is attempted.
.ip \-V
Verify the addresses only.
Only partial verification is done:
syntax is checked, and local names are verified,
but no checking normally done by the mailer is attempted.
.ip \-d\&level
Set debugging level.
.ip \-D\&x\&val
Define macro
.i x
to have value
.i val .
.nr ii 5n
.pp
E 3
I 3
Arguments may be flags and addresses.
D 20
The flag arguments are described in Appendix A.
E 20
I 20
Flags set various processing options.
E 20
E 3
Following flag arguments,
D 13
address arguments may be given.
E 13
I 13
address arguments may be given,
unless we are running in SMTP mode.
E 13
D 20
These follow the syntax in RFC733
D 3
[7]
.(d
[7] RFC733
.)d
E 3
I 3
[Crocker77a]
E 20
I 20
D 23
These follow the syntax in RFC822
E 23
I 23
Addresses follow the syntax in RFC822
E 23
[Crocker82]
E 20
E 3
for ARPANET
address formats.
In brief, the format is:
.np
Anything in parentheses is thrown away
(as a comment).
.np
D 10
Anything in angle brackets (\ <>\ ) is preferred
E 10
I 10
Anything in angle brackets (\c
D 25
.q "<>" )
E 25
I 25
.q "<\|>" )
E 25
is preferred
E 10
over anything else.
I 10
D 23
This implements the ARPANET standard that addresses of the form
E 23
I 23
This rule implements the ARPANET standard that addresses of the form
E 23
.(b
D 20
username <machine-address>
E 20
I 20
user name <machine-address>
E 20
.)b
will send to the electronic
.q machine-address
rather than the human
D 20
.q username.
E 20
I 20
.q "user name."
E 20
E 10
.np
Double quotes
(\ "\ )
quote phrases;
backslashes quote characters.
D 13
Backslashes are more powerful \*- for example,
E 13
I 13
Backslashes are more powerful
in that they will cause otherwise equivalent phrases
to compare differently \*- for example,
E 13
.i user
and
.i
"user"
.r
are equivalent,
but
.i \euser
is different from either of them.
D 2
.np
The word
.q at
is converted to
.q @ .
E 2
.pp
D 4
All other processing is controlled by the rewriting rules
E 4
I 4
D 14
The rewriting rules control remaining parsing
E 4
(disclaimer: some special processing is done
D 4
after rewriting local names).
E 4
I 4
after rewriting local names; see below).
E 14
I 14
D 21
The rewriting rules control remaining parsing.
(Disclaimer: some special processing is done
after rewriting local names; see below.)
E 21
E 14
E 4
Parentheses, angle brackets, and double quotes
must be properly balanced and nested.
I 21
The rewriting rules control remaining parsing\**.
.(f
D 23
\**Disclaimer: some special processing is done
E 23
I 23
\**Disclaimer: Some special processing is done
E 23
after rewriting local names; see below.
.)f
E 21
I 13
D 20
.sh 2 "Simple Mail Transfer Protocol"
.pp
The Simple Mail Transfer Protocol
(SMTP)
[Postel81]
can be used on input by specifying the
.b \-as
flag.
This will cause
.i sendmail
to use a verbose protocol on its standard input and output
which is useful over certain types of networks.
If SMTP is used,
no addresses are passed on the command line;
these are sent over the standard input instead.
E 20
E 13
I 3
.sh 2 "Mail to Files and Programs"
.pp
D 4
It is not always the case that a message recipient
should be a user.
Files and programs should be valid message recipients.
Files are needed as archival storage of messages,
E 4
I 4
Files and programs are legitimate message recipients.
Files provide archival storage of messages,
E 4
useful for project administration and history.
Programs are useful as recipients in a variety of situations,
for example,
D 23
as a public repository of systems messages
E 23
I 23
to maintain a public repository of systems messages
E 23
(such as the Berkeley
.i msgs
program,
or the MARS system
[Sattley78]).
.pp
D 4
Any address that passes through the initial parsing algorithm
E 4
I 4
Any address passing through the initial parsing algorithm
E 4
as a local address
D 4
(i.e, does not appear to be a valid address for another mailer)
E 4
I 4
(i.e, not appearing to be a valid address for another mailer)
E 4
is scanned for two special cases.
D 4
If the first character is a vertical bar (\c
E 4
I 4
If prefixed by a vertical bar (\c
E 4
.q \^|\^ )
the rest of the address is processed as a shell command.
D 14
If the user name contains slash marks (\c
E 14
I 14
If the user name begins with a slash mark (\c
E 14
.q /\^ )
the name is used as a file name,
instead of a login name.
I 8
.pp
Files that have setuid or setgid bits set
but no execute bits set
have those bits honored if
.i sendmail
is running as root.
E 8
E 3
.sh 2 "Aliasing, Forwarding, Inclusion"
.pp
.i Sendmail
D 4
supports three methods for implicitly rerouting mail.
E 4
I 4
reroutes mail three ways.
E 4
Aliasing applies system wide.
Forwarding allows each user to reroute incoming mail
destined for that account.
Inclusion directs
.i sendmail
to read a file for a list of addresses,
D 4
and would normal be used
E 4
I 4
and is normally used
E 4
in conjunction with aliasing.
.sh 3 "Aliasing"
.pp
D 4
Aliasing uses a system-wide file
mapping names to address lists.
E 4
I 4
Aliasing maps names to address lists using a system-wide file.
E 4
D 23
This file is inverted to speed access.
E 23
I 23
This file is indexed to speed access.
E 23
D 4
Only names that appear to be local
E 4
I 4
Only names that parse as local
E 4
are allowed as aliases;
D 23
this guarantees a unique key.
E 23
I 23
this guarantees a unique key
(since there are no nicknames for the local host).
E 23
D 13
.pp
The inverted form of the file
must be recreated when the text copy is changed.
D 8
The
.b \-I
option to
E 8
I 8
Under certain circumstances,
E 8
.i sendmail
D 2
rebuilds the database.
E 2
I 2
D 8
rebuilds the database\**.
.(f
\**This could be done automatically if
.i sendmail
could be guaranteed to be running as the owner of the
alias file.
In some environments this is not the case.
.)f
E 8
I 8
will do this automatically;
an option can force rebuilding.
E 13
E 8
E 2
.sh 3 "Forwarding"
.pp
After aliasing,
D 4
users that are found to be local and valid
E 4
I 4
D 23
users that are local and valid
E 23
I 23
recipients that are local and valid
E 23
E 4
are checked for the existence of a
.q .forward
file in their home directory.
If it exists,
the message is
.i not
sent to that user,
but rather to the list of users in that file.
D 23
The expectation is that this will normally
be one user only,
and the use will be for network mail forwarding.
E 23
I 23
Often
this list will contain only one address,
and the feature will be used for network mail forwarding.
E 23
.pp
Forwarding also permits a user to specify a private incoming mailer.
For example,
forwarding to:
.(b
"\^|\|/usr/local/newmail myname"
.)b
will use a different incoming mailer.
.sh 3 "Inclusion"
.pp
D 20
Inclusion is specified in ARPANET syntax:
E 20
I 20
Inclusion is specified in RFC 733 [Crocker77a] syntax:
E 20
.(b
:Include: pathname
.)b
An address of this form reads the file specified by
.i pathname
and sends to all users listed in that file.
.pp
The intent is
.i not
to support direct use of this feature,
but rather to use this as a subset of aliasing.
For example,
an alias of the form:
.(b
project: :include:/usr/project/userlist
.)b
is a method of letting a project maintain a mailing list
without interaction with the system administration,
even if the alias file is protected.
.pp
D 24
It is not necessary to rebuild the alias database
E 24
I 24
It is not necessary to rebuild the index on the alias database
E 24
when a :include: list is changed.
I 20
.sh 2 "Message Collection"
.pp
D 23
Once all recipients are collected and verified,
E 23
I 23
Once all recipient addresses are parsed and verified,
E 23
D 21
the message is collected either from the input.
E 21
I 21
the message is collected.
E 21
The message comes in two parts:
a message header and a message body,
separated by a blank line.
.pp
The header is formatted as a series of lines
of the form
.(b
D 23
field-name: field-value
E 23
I 23
	field-name: field-value
E 23
.)b
Field-value can be split across lines by starting the following
lines with a space or a tab.
D 23
A number of header fields have special internal meaning,
E 23
I 23
Some header fields have special internal meaning,
E 23
and have appropriate special processing.
Other headers are simply passed through.
Some header fields may be added automatically,
such as time stamps.
.pp
The body is a series of text lines.
It is completely uninterpreted and untouched,
except that lines beginning with a dot
have the dot doubled
when transmitted over an SMTP channel.
D 21
This extra dot is stripped at the other end.
E 21
I 21
This extra dot is stripped by the receiver.
E 21
E 20
I 8
.sh 2 "Message Delivery"
.pp
D 20
Internally,
the recipient list is stored as one list per mailer.
Each mailer list can be scanned trivially
and mail to each host picked out to implement message batching.
E 20
I 20
The send queue is ordered by receiving host
before transmission
to implement message batching.
E 20
D 23
Each address is marked as it is sent,
so rescanning the list is safe;
this makes sending to mailers that can only accept one user easy.
E 23
I 23
Each address is marked as it is sent
so rescanning the list is safe.
E 23
An argument list is built as the scan proceeds.
Mail to files is detected during the scan of the send list.
I 20
The interface to the mailer
is performed using one of the techniques
D 21
described in the following section.
E 21
I 21
described in section 2.2.
E 21
E 20
.pp
D 20
When an argument vector is built,
E 20
I 20
D 23
After the interface is created,
E 23
I 23
After a connection is established,
E 23
E 20
.i sendmail
D 20
creates a pipe and subprocess for the mailer.
The parent calls an
.q "editing function"
which makes the per-mailer changes to the header
and sends the result to the mailer;
a different editing function is used for sending error messages
which prepends the error information.
.pp
The exit status from the mailer is collected
after the message is sent,
and a diagnostic is printed if appropriate.
E 20
I 20
makes the per-mailer changes to the header
and sends the result to the mailer.
E 20
If any mail is rejected by the mailer,
a flag is set to invoke the return-to-sender function
after all delivery completes.
E 8
D 20
.sh 2 "Exit Status"
.pp
D 14
An exit status is returned that corresponds to the system standard
used by the other mailers.
E 14
I 14
.i Sendmail
defines a set of standard exit status codes
that should be returned by mailers.
These are in turn returned by
.i sendmail .
E 20
E 14
I 13
.sh 2 "Queued Messages"
.pp
D 23
If the mailer gave a
E 23
I 23
If the mailer returns a
E 23
.q "temporary failure"
exit status,
the message is queued.
A control file is used to describe the recipients to be sent to
and various other parameters.
E 13
I 2
D 20
.sh 2 "Interaction With Other Mailers"
E 20
I 20
This control file is formatted as a series of lines,
each describing a sender,
a recipient,
the time of submission,
or some other salient parameter of the message.
The header of the message is stored
in the control file,
so that the associated data file in the queue
is just the temporary file that was originally collected.
D 24
.sh 2 "Examples of Interactions With Other Mailers"
E 20
.pp
Two examples of how network-specific work is passed to other programs
are the incoming UUCP mailer
(\c
.i rmail )
and the outgoing ARPANET mailer.
.sh 3 "Incoming UUCP mail"
.pp
Mail coming in from the UUCP network
is not guaranteed to have a normal header line,
D 4
nor will at argument be passed telling who it is from\**.
E 4
I 4
nor will an argument be passed telling who it is from\**.
E 4
.(f
D 23
\**As a result of this,
E 23
I 23
\**As a result,
E 23
it is impossible to verify UUCP sender addresses.
.)f
Fortuitously,
UUCP mail calls the program
.i rmail
rather than
.i mail
or
.i sendmail .
The
.i rmail
D 23
program has been modified here to do the special-purpose parsing
E 23
I 23
program has been modified to do the special-purpose parsing
E 23
necessary to decode UUCP headers
and turn them into a normal UUCP address;
this address is then passed to
D 8
.i sendmail
via a
.b \-f
flag.
E 8
I 8
.i sendmail .
E 8
.sh 3 "Outgoing ARPANET mail"
.pp
The ARPANET imposes many standards that
.i sendmail
does not care to enforce.
For example,
an arpanet sitename must be on
.i every
address,
not just the
.q "From:"
address.
Certain UNIX sites like to use
.q %
as an alternative to
.q @ ,
which must be translated.
D 3
The outgoing ARPANET mailer makes these tranformations
E 3
I 3
The outgoing ARPANET mailer makes these transformations
E 3
before passing the message to the network.
E 24
E 2
D 20
.sh 1 CONFIGURATION
E 20
I 20
.sh 2 "Configuration"
E 20
.pp
D 20
Configuration is controlled primarily by the file
D 3
/usr/lib/sendmail.cf.
E 3
I 3
.i /usr/lib/sendmail.cf .
E 20
I 20
Configuration is controlled primarily by a configuration file
read at startup.
E 20
E 3
.i Sendmail
should not need to be recomplied except
.np
To change operating systems
(V6, V7/32V, 4BSD).
.np
D 10
To remove or insert the DBM library.
E 10
I 10
To remove or insert the DBM
(UNIX database)
library.
E 10
.np
To change ARPANET reply codes.
.np
D 23
To add headers requiring special processing.
E 23
I 23
To add headers fields requiring special processing.
E 23
.lp
D 10
Adding mailers or changing parsing or routing information
E 10
I 10
Adding mailers or changing parsing
(i.e., rewriting)
or routing information
E 10
does not require recompilation.
.pp
If the mail is being sent by a local user,
and the file
.q .mailcf
exists in the sender's home directory,
that file is read as a configuration file
after the system configuration file.
D 23
The primary use of this is to add header lines.
E 23
I 23
The primary use of this feature is to add header lines.
E 23
I 22
.pp
The configuration file encodes macro definitions,
header definitions,
mailer definitions,
rewriting rules,
and options.
.sh 3 Macros
.pp
Macros can be used in three ways.
Certain macros transmit
unstructured textual information
into the mail system,
such as the name
.i sendmail
will use to identify itself in error messages.
Other macros transmit information from
.i sendmail
to the configuration file
for use in creating other fields
(such as argument vectors to mailers);
e.g., the name of the sender,
and the host and user
of the recipient.
Other macros are unused internally,
and can be used as shorthand in the configuration file.
.sh 3 "Header declarations"
.pp
Header declarations inform
.i sendmail
of the format of known header lines.
Knowledge of a few header lines
is built into
.i sendmail ,
such as the
.q From:
and
.q Date:
lines.
.pp
Most configured headers
will be automatically inserted
in the outgoing message
if they don't exist in the incoming message.
Certain headers are suppressed by some mailers.
.sh 3 "Mailer declarations"
.pp
Mailer declarations tell
.i sendmail
of the various mailers available to it.
The definition specifies the internal name of the mailer,
the pathname of the program to call,
some flags associated with the mailer,
and an argument vector to be used on the call;
D 23
this vector is macro expanded before use.
E 23
I 23
this vector is macro-expanded before use.
E 23
.sh 3 "Address rewriting rules"
.pp
The heart of address parsing in
.i sendmail
is a set of rewriting rules.
These are an ordered list of pattern-replacement rules,
(somewhat like a production system,
except that order is critical),
which are applied to each address.
The address is rewritten textually until it is either rewritten
into a special canonical form
(i.e.,
a (mailer, host, user)
3-tuple,
such as {arpanet, usc-isif, postel}
representing the address
.q "postel@usc-isif" ),
or it falls off the end.
When a pattern matches,
the rule is reapplied until it fails.
.pp
The configuration file also supports the editing of addresses
into different formats.
For example,
an address of the form:
.(b
ucsfcgl!tef
.)b
might be mapped into:
.(b
tef@ucsfcgl.UUCP
.)b
to conform to the domain syntax.
Translations can also be done in the other direction.
.sh 3 "Option setting"
.pp
D 23
There are a number of options that can be set
E 23
I 23
There are several options that can be set
E 23
from the configuration file.
These include the pathnames of various support files,
timeouts,
default modes,
etc.
E 22
I 14
D 20
This could also be used to adjust the full name by
defining the
.b x
macro; e.g.,
.(b
DxEric Allman in Outer Space
.)b
E 14
.sh 2 "Configuration File Description"
.pp
The configuration file is formatted
as a series of text lines,
each beginning with a character describing its semantics.
Blank lines and lines beginning with a sharp sign
(#)
are ignored.
I 2
Other lines are:
.(b
I 3
.ta 3n
E 3
D	define macro
H	define header
M	define mailer
S	use rewriting set
C	define word class
I 13
F	define word class from file
E 13
R	specify rewriting rule
.)b
E 2
.pp
See figure 2 for an example configuration file.
I 13
Please note that this is intended as an example only.
E 13
.(z
I 2
.hl
D 3
.sp
E 3
.sz -2
I 3
.re
E 3
E 2
D 14
##########################################
# sendmail configuration file
D 13
#	@(#)sendmail.cf	3.6	8/17/81
E 13
##########################################
E 14
I 14
##### sendmail configuration file
E 14
D 4

E 4
I 4
.sp \n(psu
E 4
### local hosts on various nets
DABerkeley
DBIngVAX
DUucbvax
D 4

E 4
I 4
.sp \n(psu
E 4
### special macros
# my name
D\&n\&MAILER-DAEMON
# UNIX header format
D\&l\&From $g  $d
# delimiter (operator) characters
D 2
D\&o\&.:%@!^
E 2
I 2
D\&o\&.:@!^
I 16
# address writing style
D\&q\&$g$?x ($x)$.
E 16
E 2
D 4

E 4
I 4
.sp \n(psu
E 4
### format of headers:
H\&Date: $a
H\&From: $g$?x ($x)$.
H\&Full-Name: $x
H\&Message-Id: <$t.$p.$B@$A>
H\&Posted-Date: $a
D 4

E 4
I 4
.sp \n(psu
E 4
### name classifications
# arpanet hostnames
C\&A\&ucb berkeley
# list of local host names
C\&B\&j IngVax
# berknet hosts on the arpanet
C\&C\&i ingres ing70
# uucp hostnames
C\&U\&ucbvax ernie
D 4

E 4
I 4
.sp \n(psu
E 4
I 3
.ta \w'M\&local  'u +\w'/usr/net/bin/sendberkmail  'u +\w'rlsAmn  'u +\w'$f@$A  'u
E 3
###  mailers
D 16
# local mail -- must be zero
E 16
D 3
M\&local	/bin/mail		rlsAmn	$f	...local\&mail -d $u
E 3
I 3
M\&local	/bin/mail	rlsAmn	$f	...local\&mail -d $u
E 3
D 16
# program mail -- must be one
E 16
D 3
M\&prog	/bin/csh		lA	$f	...prog\&mail -fc $u
E 3
I 3
M\&prog	/bin/csh	lA	$f	...prog\&mail -fc $u
E 3
D 16
# berkeley net mail
E 16
D 3
M\&berk	/usr/net/bin/sendberkmail fxs	$B:$f	...berk\&mail -m $h -h $c -t $u
E 3
I 3
M\&berk	/usr/net/bin/sendberkmail	fxs	$B:$f	...berk\&mail -m $h -h $c -t $u
E 3
D 16
# arpanet mail
E 16
M\&arpa	/usr/lib/mailers/arpa	sAu	$f@$A	...arpa\&mail $f $h $u
D 16
# uucp mail
E 16
D 3
M\&uucp	/usr/bin/uux		rsDxm	$U!$f	...uucp\&mail - $h!rmail ($u)
E 3
I 3
D 14
M\&uucp	/usr/bin/uux	rsDxm	$U!$f	...uucp\&mail - $h!rmail ($u)
E 14
I 14
M\&uucp	/usr/bin/uux	rsDxmU	$U!$f	...uucp\&mail - $h!rmail ($u)
I 16
D 19
M\&xlate	/	A	$f	/
E 19
E 16
E 14
E 3
D 4

E 4
I 4
.sp \n(psu
E 4
### rewriting rules
D 3
R\&$-h.$+u	$+h:$+u			change "." to ":"
R\&$=C:$+u@$-h	$+u@$+h			delete ing70: on arpanet addresses
R\&$+u@$=A	ing70:$+u		delete local arpa hosts
E 3
I 3
.ta \w'R\&CSVAX:$-h!$+u  'u +\w'$#berk$@ing70$:$+u@$+h  'u
D 12
R\&$-h.$+u	$+h:$+u	change "." to ":"
R\&$=C:$+u@$-h	$+u@$+h	delete ing70: on arpanet addresses
R\&$+u@$=A	ing70:$+u	delete local arpa hosts
E 3
R\&$+u@$-h	$#berk$@ing70$:$+u@$+h	send arpa mail to ing70
D 3
R\&$+h^$+u	$+h!$+u			change "^" to "!"
R\&$-x!$=U!$+y	csvax:$+y		delete uucp loops through csvax
R\&$-h!$+u	csvax:$+h!$+u		send uucp mail to csvax
R\&$-x:$-h:$+u	$+h:$+u			delete multiple berk hosts
R\&$=B:$+u	$+u			delete local berk hosts
E 3
I 3
R\&$+h^$+u	$+h!$+u	change "^" to "!"
R\&$-x!$=U!$+y	csvax:$+y	delete uucp loops through csvax
R\&$-h!$+u	csvax:$+h!$+u	send uucp mail to csvax
R\&$-x:$-h:$+u	$+h:$+u	delete multiple berk hosts
R\&$=B:$+u	$+u	delete local berk hosts
E 3
R\&$-h:$+u	$#berk$@$+h$:$+u	resolve berk mail
D 3
R\&$+u		$#local$:$+u		resolve local mail
E 3
I 3
R\&$+u	$#local$:$+u	resolve local mail
E 12
I 12
R\&$-.$+	$1:$2	change "." to ":"
R\&$=C:$+@$-	$2@$3	delete ing70: on arpanet addresses
R\&$+@$=A	ing70:$1	delete local arpa hosts
R\&$+@$-	$#berk$@ing70$:$1@$2	send arpa mail to ing70
R\&$+^$+	$1!$2	change "^" to "!"
R\&$-!$=U!$+	csvax:$3	delete uucp loops through csvax
R\&$-!$+	csvax:$1!$2	send uucp mail to csvax
R\&$-:$-:$+	$2:$3	delete multiple berk hosts
R\&$=B:$+	$2	delete local berk hosts
R\&$-:$+	$#berk$@$1$:$2	resolve berk mail
R\&$+	$#local$:$1	resolve local mail
E 12
E 3
D 4

E 4
I 4
.sp \n(psu
E 4
### rewriting rules for from host
S\&1
D 3
R\&ing70:$+u@$-h	$+u@$+h			arpanet mail is automatic
R\&CSVAX:$-h!$+u	$+h!$+u			uucp mail is automatic


E 3
I 3
D 12
R\&ing70:$+u@$-h	$+u@$+h	arpanet mail is automatic
R\&CSVAX:$-h!$+u	$+h!$+u	uucp mail is automatic
E 12
I 12
R\&ing70:$+@$-	$1@$2	arpanet mail is automatic
R\&CSVAX:$-!$+	$1!$2	uucp mail is automatic
E 12
I 11
.sp \n(psu
### rewriting rules for translated sender
S\&2
D 12
R\&$-x:$-h:$+u	$+h:$+u	delete multiple berknet hosts
E 12
I 12
R\&$-x:$-:$+	$2:$3	delete multiple berknet hosts
E 12
E 11
.sz
D 4
.sp 2
E 4
I 4
.sp
E 4
E 3
.ce
Figure 2.  Sample configuration file.
I 2
D 4
.sp
E 4
.hl
E 2
.)z
.sh 3 "D \*- define macro"
I 4
.(b
.b D \c
.i x\|val
.)b
E 4
.pp
D 4
This line defines a macro.
Macros have single character names.
They can be interpolated using the escape
.b $\c
E 4
I 4
This line defines a macro
with the single character name
.i x
and value
.i val .
Macros can be interpolated using the escape
.b $ \c
E 4
.i x ,
where
.i x
is the macro name.
By convention,
all upper-case letters are unused by
.i sendmail
and may be used freely by the user;
all other names are reserved for use by sendmail.
Certain macros
.i must
be defined,
and are used internally.
These are:
.(b
I 3
.ta 4n
E 3
$l	UNIX-style \*(lqFrom\*(rq line.
$n	My address in error messages.
$o	\*(lqOperators\*(rq in addresses.
I 16
$q	How to write addresses in headers.
E 16
.)b
The
.b $l
macro is expanded when
.i sendmail
wants to insert a UNIX-style
.q From
line on messages.
This typically expands to something like:
.(b
D 4
From joe  Wed Aug 12 09:15:13 1981
E 4
I 4
From sally  Wed Aug 12 09:15:13 1981
E 4
.)b
The
.b $n
macro is used as the name of this process
when error messages are being mailed back.
Typically,
it is wise to include an alias
so that mail to this address will be sent to root.
The
.b $o
macro defines the characters
that will separate words when addresses are being broken up.
Each of these becomes a word by itself when scanned.
Blanks and tabs are built-in separators
but are ignored,
i.e., are not turned into words.
For example, the input:
.(b
D 4
Ing70:ZRM @ MIT-MC SRI-KL
E 4
I 4
Ing70:  ZRM  @  MIT-MC  SRI-KL
E 4
.)b
Is broken up into the six words:
.(b
Ing70, :, ZRM, @, MIT-MC, SRI-KL
.)b
assuming that colon and at-sign are operators
(but hyphen is not).
I 16
The
.b $q
macro gives the format for addresses
as they should appear in headers.
This will normally be something like:
.(b
$g$?x ($x)$.
.)b
Which will give the translated from address
followed by the full name if known.
E 16
.pp
A number of macros are defined by
.i sendmail
for use as primitives.
These are:
.(l
I 3
D 4
.ta 4n
E 3
$a	The date in ARPANET format.
E 4
I 4
.ta 5n
$a	The \*(lqDate:\*(rq line date in ARPANET format.
$b	The current date in ARPANET format.
E 4
$c	The hop count.
$d	The date in UNIX (ctime) format.
$f	The sender's (from) address.
$g	The sender's address translated by the mailer.
$h	The host of the recipient.
$p	The process id of sendmail in decimal.
$t	The time in seconds in decimal.
$u	The user part of the recipient.
$v	The version number of sendmail.
$x	The full name of the sender.
$y	The id of the sender's terminal.
$z	The home directory of the recipient.
.)l
.pp
I 4
There are three types of dates that can be used.
E 4
The
D 4
.b $p
E 4
I 4
.b $a
E 4
and
D 4
.b $t
macros are used to create unique strings.
E 4
I 4
.b $b
macros are in ARPANET format;
.b $a
is a copy of the time extracted from the
.q Date:
field of the incoming message
(if there was one),
and
.b $b
is the current date and time \*- used for postmarks.
If no
.q Date:
is found in the message,
they are the same.
E 4
The
I 4
.b $d
macro has the date in UNIX
.i ctime
format;
this is extracted from the message if possible
and is otherwise the current date.
.pp
The
E 4
.b $f
macro is the id of the sender
as originally determined;
when mailing to a specific person,
the
.b $g
macro is the address of the sender
with respect to the receiver.
For example,
if I send to
.q csvax:samwise
the
.b $f
and
.b $g
macros are:
.(b
I 3
.ta 4n
E 3
$f	eric
$g	IngVAX:eric
.)b
This only applies to the first step in the link.
For example,
sending to Ing70:drb@bbn-unix,
we have
.b $f
and
.b $g
as above for the transfer to Ing70, but:
.(b
$f	IngVAX:eric
$g	IngVAX:eric@Berkeley
.)b
D 2
For transfer to the ARPANET.
E 2
I 2
D 14
for transfer to the ARPANET.
E 14
I 14
for transfer to the ARPANET\**.
.(f
\**When this is actually sent to the ARPANET,
this will appear as
IngVAX.eric@Berkeley.
The translation of the colon to a period is performed
by the mailer that queues ARPANET mail.
.)f
E 14
I 4
.pp
The
.b $x
macro is set to the full name of the sender.
This can be determined in several ways.
D 8
If a
.b \-F
flag is given to
.i sendmail ,
this value is taken as the full name.
E 8
I 8
It can be passed as a flag to
.i sendmail .
E 8
The
.q Full-Name:
line in the header is the second option,
and the comment portion of the
.q From:
line is the third.
If all of these fail,
and if the message is being originated locally,
the full name is looked up in the
.i passwd
file.
.pp
E 4
E 2
When sending, the
.b $u ,
.b $h ,
and
.b $z
macros get set to the user, host, and home directory
(respectively)
of the receiver.
The host is only set if the user is not local,
and the home directory is only set if the user is local.
.pp
I 4
The
.b $p
and
.b $t
macros are used to create unique strings.
The
.b $y
macro is set to the id of the terminal of the sender
(if known);
some systems like to put this in the
.q From
line.
The
.b $v
macro is set to the version number of
.i sendmail ,
and can be used in postmarks
to help debugging.
.pp
E 4
A primitive conditional is available during macro expansion.
The construct:
.(b
$?x text1 $: text2 $.
.)b
tests if macro
D 4
.b $\c
E 4
I 4
.b $ \c
E 4
.i x
is defined.
If it is,
text1 is interpolated;
otherwise,
text2 is interpolated.
.sh 3 "H \*- define header"
I 4
.(b
.b H \c
.i "Field-Name" \c
.b ":" " \c
.i "field value"
.)b
E 4
.pp
D 4
The remainder of the
E 4
I 4
The
E 4
.b H
line looks like a regular header line,
except that the field value is macro expanded
before use.
All headers mentioned in this way
are automatically inserted
into every message
except for headers mentioned in the compile-time
configuration file
.i conf.c .
These headers are
Date,
From,
Full-Name,
Message-Id,
and
Received-Date.
To get these fields the appropriate flag
must be specified
for the receiving mailer.
.pp
Since the file
.q ".mailcf"
in the sender's home directory is read and processed,
it is possible to add customized header lines.
For example,
the .mailcf consisting of:
.(b
D 2
H\&Phone: (415) 642-7520
E 2
I 2
D 5
H\&Phone: (415) 888-9990
E 5
I 5
H\&Phone: (415) 888-7770
E 5
E 2
.)b
will add that line to every outgoing message.
.sh 3 "M \*- define mailer"
I 4
.(b F
.b M \c
.i mailer-name
.i pathname
.i flags
.i from-macro
.i "argument list"
.)b
E 4
.pp
This line is structured into fields
separated by white space (spaces or tabs).
The fields are:
.np
The internal name of the mailer,
referred to in the rewriting rules.
.np
The pathname of the program to execute for this mailer.
.np
The flags for this mailer,
described below.
.np
The macro string to become the
.b $g
macro (translated sender)
for this mailer.
.np
The argument vector passed to the mailer
(macro expanded).
.pp
The flags are a series of characters:
.ls 1
.ip f
The mailer wants a
.b \-f
.i from
flag,
but only if this is a network forward operation
(i.e.,
the mailer will give an error
if the executing user does not have special permissions).
.ip r
Same as
.b f ,
but sends a
.b \-r
flag.
.ip q
Don't print errors \*- the mailer will do it for us.
.ip S
Don't reset your userid before calling the mailer.
This would be used in a secure environment where
.i sendmail
ran as a special user.
This could be used to prevent
(or at least complicate)
forged addresses.
I 2
D 3
This option is supressed in
E 3
I 3
This option is suppressed in
E 3
.q unsafe
configuration files
(i.e., user-supplied, either on a
D 8
.b \-C
E 8
I 8
command line
E 8
option, or in the
.i \&.mailcf
file in the home directory).
E 2
.ip n
This mailer does not want a UNIX-style
.q From
line on the message.
.ip l
This mailer is local,
so no host will be specified.
I 4
Also,
the mailer wants special local processing
(such as a
.q Received-Date:
field).
E 4
.ip s
Strip quote characters off of addresses
before calling the mailer.
.ip m
This mailer can send to multiple users
(on the same host)
in one call.
.ip F
This mailer wants a
.q From:
header line.
.ip D
This mailer wants a
.q Date:
header line.
.ip M
This mailer wants a
.q Message-Id:
header line.
.ip x
This mailer wants a
.q Full-Name:
header line.
.ip u
Upper case should be preserved in user names.
.ip h
Upper case should be preserved in host names.
I 16
.ip e
This mailer is expensive,
and it may be desirable to limit usage.
I 18
.ip R
The recipient addresses should be rewritten to be relative to the
receiver, rather than relative to the sender.
This is always done with sender addresses,
but should only be done on recipients
if the host you are sending to knows that it is being done.
Setting this flag makes it easy to do a
.q reply
command in a user mail program
(since all that must be done is send to all addresses in the message header),
but user mail programs that try to rewrite the addresses
will be completely confused.
E 18
E 16
.ip A
This mailer wants an ARPANET standard header
(equivalent to the
.b F
and
.b D
flags).
I 14
.ip U
This mailer is a UUCP mailer that wants leading from lines
of the form:
.(b
From sender <date> remote from sysname
.)b
instead of the more reasonable:
.(b
From sysname!sender <date>
.)b
A compilation flag must be on to include this code.
E 14
.ls
I 14
.lp
There should always be at least one flag,
since every message should include either a
.b x
or a
.b F
flag.
E 14
.sh 3 "S \*- use rewriting set"
I 4
.(b
.b S \c
.i N
.)b
E 4
.pp
D 11
There are two sets of rewriting rules.
E 11
I 11
There are three sets of rewriting rules.
E 11
Set zero is used to rewrite recipient addresses.
Set one is used to rewrite sender addresses.
I 11
Set two is applied after evaluating the
.q $g
macro,
i.e., after determining the from address for a particular mailer.
.pp
E 11
Set one can be used to eliminate implicit links.
For example,
if there exists a site on on the BerkNet called
.q Ing70
which is an ARPANET gateway,
and we are on a site called
.q IngVAX ,
ARPANET mail coming into
.q Ing70
for someone on
.q IngVAX
will read:
.(b
From: Ing70:auser@ahost
.)b
Rewriting set one can rewrite this as:
.(b
From: auser@ahost
.)b
since
.q Ing70
will be implied.
I 11
.pp
Set two is used to eliminate anomalies resulting from
forwarding.
For example,
a message received at Ing70 from mckusick on the CSVAX will
appear as:
.(b
From CSVAX:mckusick
.)b
If this is then forwarded to IngVAX,
sendmail on Ing70 will rewrite the from address as:
.(b
From Ing70:CSVAX:mckusick
.)b
The extra host reference can be eliminated by ruleset two on Ing70.
E 11
.pp
When you change to a new set,
the previous content of that set is cleared.
.sh 3 "R \*- rewriting rule"
I 4
.(b F
.b R \c
.i pattern
.i replacement
.i comments
.)b
E 4
.pp
D 4
The heart of parsing is the rewriting rules.
The process is essentially textual.
E 4
I 4
The rewriting rules drive the address parser.
The rewriting process is essentially textual.
E 4
First,
the address to be rewritten is broken up into words.
Words are defined as strings of non-special characters
separated by white space or single special characters
as defined by the
.b $o
macro.
Then,
the words are rewritten using simple pattern matching.
Words in the pattern match themselves
unless they begin with dollar sign.
The dollar escapes have the following meanings\**:
.(f
\**These dollar escapes have nothing to do with macro expansion.
.)f
.(b
I 3
D 4
.ta 4n
E 4
I 4
.ta 6n
E 4
E 3
D 12
$-x	Match a single word (and call it x).
$+x	Match one or more words (and call them x).
E 12
I 12
$-	Match a single word.
$+	Match one or more words.
E 12
$=c	Match any word in class c (see below).
.)b
The case of letters is ignored in pattern matching
(including class comparisons).
.pp
When a pattern (also called a left hand side or LHS)
matches,
the input is rewritten as defined by the right hand side (RHS).
Acceptable escapes in the RHS are:
.(b
I 3
.ta \w'$#mailer  'u
E 3
D 12
$+x	Replace from corresponding match in LHS.
E 12
I 12
D 13
$+	Replace from corresponding match in LHS.
E 13
I 13
$n	Replace from corresponding match in LHS.
E 13
E 12
D 2
$#word	Canonical mailer name.
$@word	Canonical host name.
$:word	Canonical user name.
E 2
I 2
$#mailer	Canonical mailer name.
$@host	Canonical host name.
$:user	Canonical user name.
E 2
.)b
I 2
D 12
The replacement from the LHS to the RHS does not use macros,
and there are no name conflicts.
E 12
I 12
The substitution from LHS to RHS is done by the index
of indefinite matches on the LHS.
E 12
E 2
D 4
Patterns are reexecuted until it either resolves to
a canonical name
E 4
I 4
D 8
Patterns are reexecuted until it fails.
E 8
I 8
Each pattern reexecutes until it fails.
E 8
As soon as the input resolves to a canonical name
E 4
(i.e.,
D 4
.q "$#mailer$@host$:user" )
or fails.
As soon as the input resolves to a canonical name,
matching ends;
E 4
I 4
.q "$#mailer$@host$:user" ),
rewriting ends;
E 4
otherwise,
the next pattern is tried.
The
.q "$@host"
part is not needed
if the mailer does not require a host.
The special mailer
.q error
causes the user part to be printed as an error.
.sh 3 "C \*- define word class"
I 4
.(b F
.b C \c
.i c\|word\&1
.i word\&2 ...
.)b
E 4
.pp
There are twenty six word classes,
represented as
.q A
through
.q Z .
For example:
.(b
CVcsvax ingvax esvax
.)b
defines the words
.q csvax ,
.q ingvax ,
and
.q esvax
to all be in class
.q V ,
so that
.q $=V
on the LHS of a rewriting rule
will match any of these words.
I 13
.sh 3 "F \*- define word class from file"
.(b
.b F \c
.i c\&filename
.i format
.)b
.pp
This works analogously
to the
.b C
line except that it reads the contents of the class
from the given
.i filename .
If given,
the specified
.i format
is used as a
scanf(3)
string which should produce a single string.
E 13
.sh 2 "A Detailed Example"
.pp
We will now follow the configuration file
in figure 2
through in detail.
I 14
This example is from a version of the configuration file
for the IngVAX machine at Berkeley.
IngVAX had no interesting network connections.
Ing70 had an ARPANET connection,
and CSVAX had a UUCP connection.
All of these machines were tied together via BerkNet.
E 14
.sh 3 "Macro definitions"
.(b
DABerkeley
DBIngVAX
DUucbvax
DnMAILER-DAEMON
DlFrom $g  $d
D 2
Do.:%@!^
E 2
I 2
Do.:@!^
I 16
Dq$g$?x ($x)$.
E 16
E 2
.)b
The first three macros are for convenience only,
and are used to define the local host names
on the ARPANET, BerkNet, and the UUCP net
respectively.
.pp
Macro
.b n
D 4
defines the name of this entity
E 4
I 4
defines the name of
.i sendmail
E 4
when error messages are sent.
Macro
.b l
defines what the first line
of a message in UNIX format looks like,
in this case the version 7 standard of:
.(b
From sender-name  time-of-submission
.)b
The
.b o
macro
tells what characters will be distinct from names
when scanning addresses.
In this case,
dot and colon will be used
to distinguish BerkNet addresses,
at sign for ARPANET addresses,
and exclamation point and caret for UUCP addresses.
.sh 3 "Header definitions"
.(b
H\&Date: $a
H\&From: $g$?x ($x)$.
H\&Full-Name: $x
H\&Message-Id: <$t.$p.$B@$A>
H\&Posted-Date: $a
.)b
These define the headers
that may be added to a message.
The
.q Date:
is just the ARPANET idea of the date.
The
.q From:
line is the translated version of the sender,
followed by the sender's full name if known.
The
I 4
.q Full-Name:
field is used to transmit the sender's full name
when a
.q From:
line is not being sent;
these will normally be mutually exclusive.
The
E 4
.q Message-Id:
field has the time and process id's concatenated
with the BerkNet and ARPANET addresses
to make a unique string.
Finally, the
.q Posted-Date:
is the date in ARPANET format;
it differs from
.q Date:
D 2
in that it is always output as soon as the message is submitted,
E 2
I 2
in that it is always output as soon as the message enters
.i sendmail 's
domain,
E 2
and hence indicates the time that the message first enters
D 2
the mail delivery system [4].
E 2
I 2
the mail delivery system
D 3
[NBS].
E 2
.(d
D 2
[4] NBS standard
E 2
I 2
[NBS] NBS standard
E 2
.)d
E 3
I 3
D 4
[NBS80].
E 4
I 4
[Postel79b, NBS80].
E 4
E 3
.sh 3 "Name classifications"
.(b
C\&A\&ucb berkeley
C\&B\&j IngVax
C\&C\&i ingres ing70
C\&U\&ucbvax ernie
.)b
These commands put the words
.q ucb
and
.q berkeley
into class
.q A ,
the valid names of this site on the ARPANET.
Words
.q j
and
.q ingvax
are in class
.q B ,
the local names on BerkNet.
Class
.q C ,
the names of the site which has the ARPANET link,
has the words
.q i ,
.q ingres ,
and
.q ing70 .
Finally,
.q ucbvax
and
.q ernie
are the UUCP names of our UUCP gateway,
and are in class
.q U .
.pp
The classes will be used in the patterns of the rewriting rules
as described below.
.sh 3 "Mailer definitions"
.(b
D 3
M\&local	/bin/mail		rlsAmn	$f	...localmail -d $u
M\&prog	/bin/csh		lA	$f	...progmail -fc $u
M\&berk	/usr/net/bin/sendberkmail fxs	$B:$f	...berkmail -m $h -h $c -t $u
E 3
I 3
D 14
.sz -2
E 14
I 14
.if n .in 0
.if t .sz -2
E 14
.ta \w'M\&local  'u +\w'/usr/net/bin/sendberkmail  'u +\w'rlsAmn  'u +\w'$f@$A  'u
M\&local	/bin/mail	rlsAmn	$f	...localmail -d $u
M\&prog	/bin/csh	lA	$f	...progmail -fc $u
M\&berk	/usr/net/bin/sendberkmail	fxs	$B:$f	...berkmail -m $h -h $c -t $u
E 3
M\&arpa	/usr/lib/mailers/arpa	sAu	$f@$A	...arpamail $f $h $u
D 3
M\&uucp	/usr/bin/uux		rsDxm	$U!$f	...uucpmail - $h!rmail ($u)
E 3
I 3
D 14
M\&uucp	/usr/bin/uux	rsDxm	$U!$f	...uucpmail - $h!rmail ($u)
.sz
E 14
I 14
M\&uucp	/usr/bin/uux	rsDxmU	$U!$f	...uucpmail - $h!rmail ($u)
I 16
D 19
M\&xlate	/	A	$f	/
E 19
E 16
.if n .in
.if t .sz
E 14
E 3
.)b
D 16
Five mailers are known in the configuration file.
E 16
I 16
Six mailers are known in the configuration file.
E 16
D 13
The first two
E 13
I 13
There
E 13
.i must
D 2
be declared as
.b local
and
.b prog
E 2
I 2
D 13
be for local and program mail,
E 2
and must come as the first and second mailers respectively.
E 13
I 13
be entries for local and program mail.
E 13
.pp
Local mail is sent using
/bin/mail.
It takes a
.b \-r
flag,
is local,
quote characters are stripped before sending,
takes ARPANET standard headers,
can deliver to multiple recipients at once,
and does not want a UNIX-style
.q From
line since it will add one itself.
D 14
The translated from address is the same as the raw from address,
E 14
I 14
The translated
.q from
address is the same as the raw
.q from
address,
E 14
since no network hops are made.
The argument vector has a program name,
a
.b \-d
flag (\c
.q "really deliver" ,
which must be added to /bin/mail),
and the list of recipients \*- one recipient per argument.
.pp
Mail piped through programs
is interpreted by /bin/csh.
D 4
It does not take a
E 4
I 4
Unlike local mail,
it does not take a
E 4
.b \-r
flag,
quotes should be left,
it can only deal with one user,
and it does want a UNIX-style
.q From
line,
but is still local and still wants an ARPANET style header.
.pp
BerkNet mail is processed by
/usr/net/bin/sendberkmail.
It takes a
.b \-f
flag,
wants a
.q Full-Name:
header line,
and wants quotes stripped.
The
.q Full-Name:
is used here because if it were given as a comment
in a
.q From:
D 4
line it might be discarded by later instantiations of
.i sendmail .
E 4
I 4
line the machine address of the sender
would not be modified by later instantiations of
.i delivermail \**.
.(f
\**\c
.i Delivermail
did no header editing,
so
.q From:
lines were always passed untouched.
When the gateways are converted to
.i sendmail
this can be changed.
.)f
E 4
The from address as seen by the receiver is
.q IngVAX:sender ,
and it takes a flag-oriented
rather than a positional
command list.
.pp
The ARPANET wants quotes stripped,
ARPANET standard headers,
and wants the user name left with case intact.
It takes a positional command list.
.pp
UUCP mail calls
.i uux
with a
.b \-r
flag,
quotes stripped,
a
.q Date:
line,
a
.q Full-Name:
line,
and with multiple users listed.
I 14
Since UUCP is a relic of the (not so) distant past,
it requires ugly header lines.
E 14
I 13
D 19
.pp
I 16
The final entry is a dummy entry to declare the pseudo-mailer
.i xlate .
When this mailer is found
it causes a table lookup to be done in the alias file
using the host name as a key.
A
.q %s
in the value part is replaced by the user name.
The entire parsing mechanism is restarted when this is encountered.
E 19
.pp
E 16
If
.q $u
were to be missing from the argument vector for a mailer,
that mailer would be accessed using the SMTP [Postel81]
protocol.
E 13
.sh 3 "Rewriting rules for recipient addresses"
.(b
D 2
R\&$-h.$+u	$+h:$+u			change "." to ":"
R\&$=C:$+u@$-h	$+u@$+h			delete ing70: on arpanet addresses
R\&$+u@$=A	ing70:$+u		delete local arpa hosts
R\&$+u@$-h	$#berk$@ing70$:$+u@$+h	send arpa mail to ing70
R\&$+h^$+u	$+h!$+u			change "^" to "!"
R\&$-x!$=U!$+y	csvax:$+y		delete uucp loops through csvax
R\&$-h!$+u	csvax:$+h!$+u		send uucp mail to csvax
R\&$-x:$-h:$+u	$+h:$+u			delete multiple berk hosts
R\&$=B:$+u	$+u			delete local berk hosts
R\&$-h:$+u	$#berk$@$+h$:$+u	resolve berk mail
R\&$+u		$#local$:$+u		resolve local mail
E 2
I 2
D 3
[1]	R\&$-h.$+u	$+h:$+u			change "." to ":"
[2]	R\&$=C:$+u@$-h	$+u@$+h			delete ing70: on arpanet addresses
[3]	R\&$+u@$=A	ing70:$+u		delete local arpa hosts
E 3
I 3
.sz -2
D 5
.ta \w'[99]  'u +\w'R\&CSVAX:$-h!$+u  'u +\w'$#berk$@ing70$:$+u@$+h  'u
E 5
I 5
.ta \w'[88]  'u +\w'R\&CSVAX:$-h!$+u  'u +\w'$#berk$@ing70$:$+u@$+h  'u
E 5
D 12
[1]	R\&$-h.$+u	$+h:$+u	change "." to ":"
[2]	R\&$=C:$+u@$-h	$+u@$+h	delete ing70: on arpanet addresses
[3]	R\&$+u@$=A	ing70:$+u	delete local arpa hosts
E 3
[4]	R\&$+u@$-h	$#berk$@ing70$:$+u@$+h	send arpa mail to ing70
D 3
[5]	R\&$+h^$+u	$+h!$+u			change "^" to "!"
[6]	R\&$-x!$=U!$+y	csvax:$+y		delete uucp loops through csvax
[7]	R\&$-h!$+u	csvax:$+h!$+u		send uucp mail to csvax
[8]	R\&$-x:$-h:$+u	$+h:$+u			delete multiple berk hosts
[9]	R\&$=B:$+u	$+u			delete local berk hosts
E 3
I 3
[5]	R\&$+h^$+u	$+h!$+u	change "^" to "!"
[6]	R\&$-x!$=U!$+y	csvax:$+y	delete uucp loops through csvax
[7]	R\&$-h!$+u	csvax:$+h!$+u	send uucp mail to csvax
[8]	R\&$-x:$-h:$+u	$+h:$+u	delete multiple berk hosts
[9]	R\&$=B:$+u	$+u	delete local berk hosts
E 3
[10]	R\&$-h:$+u	$#berk$@$+h$:$+u	resolve berk mail
D 3
[11]	R\&$+u		$#local$:$+u		resolve local mail
E 3
I 3
[11]	R\&$+u	$#local$:$+u	resolve local mail
E 12
I 12
[1]	R\&$-.$+	$1:$2	change "." to ":"
[2]	R\&$=C:$+@$-	$2@$3	delete ing70: on arpanet addresses
[3]	R\&$+@$=A	ing70:$1	delete local arpa hosts
[4]	R\&$+@$-	$#berk$@ing70$:$1@$2	send arpa mail to ing70
[5]	R\&$+^$+	$1!$2	change "^" to "!"
[6]	R\&$-!$=U!$+	csvax:$3	delete uucp loops through csvax
[7]	R\&$-!$+	csvax:$1!$2	send uucp mail to csvax
[8]	R\&$-:$-:$+	$2:$3	delete multiple berk hosts
[9]	R\&$=B:$+	$2	delete local berk hosts
[10]	R\&$-:$+	$#berk$@$1$:$2	resolve berk mail
[11]	R\&$+	$#local$:$1	resolve local mail
E 12
.sz
E 3
E 2
.)b
D 4
Dots in addresses are translated to colons
in the first rule.
E 4
I 4
The first rule translates dots to colons.
E 4
Redundant explicit routing to the ARPANET is deleted
in the second rule.
Hops out over the ARPANET
back to us are deleted in the third rule \*-
D 4
note that the host that we would have come in on
E 4
I 4
note that the BerkNet host that we would have come in on
E 4
is inserted.
Real ARPANET mail is resolved immediately with no further ado \*-
it is sent out over the BerkNet to the ing70,
and further rewriting stops immediately.
.pp
Carets are changed to exclamation points
for UUCP addresses in the fifth rule.
The sixth rule deletes loops out into UUCP land
and back to us \*- noting that we will be left on CSVAX.
D 14
Multiple BerkNet hosts are deleted in rule seven \*-
E 14
I 14
The seventh rule does forwarding of UUCP mail to the CSVAX.
Multiple BerkNet hosts are deleted in rule eight \*-
E 14
this can occur internally quite easily
as a side effect of a rewriting rule.
D 14
Rule eight deletes local BerkNet hosts.
The last two rules resolve BerkNet and local mail.
E 14
I 14
Rule nine deletes local BerkNet hosts.
The last two rules resolve BerkNet and local mail
by turning them into the canonical form:
.(b
$#\fInet\fP$@\fIhost\fP$:\fIuser\fP
.)b
E 14
.pp
D 3
Consider the following examples:
E 3
I 3
Consider the following examples.
The numbers to the left are the rule that is being applied
to make the transformation.
E 3
.(b
I 3
.re
E 3
	esvax.asa
[1]	esvax:asa
[10]	$#berk$@esvax$:asa
.)b
.(b
	research^vax135^dmr
[5]	research!vax135^dmr
[5]	research!vax135!dmr
[7]	$#berk$@csvax$:research!vax135!dmr
.)b
.(b
	research!ucbvax!j:eric
[6]	csvax:j:eric
[8]	j:eric
[9]	eric
[11]	$#local$:eric
.)b
.(b
	ing70:wnj@Berkeley
[2]	wnj@Berkeley
[3]	ing70:wnj
[10]	$#berk$@ing70$:wnj
.)b
.sh 3 "Rewriting rules for sender addresses"
.(b
I 3
.sz -2
.ta \w'R\&CSVAX:$-h!$+u  'u +\w'$+u@$+h  'u
E 3
S\&1
D 3
R\&ing70:$+u@$-h	$+u@$+h			arpanet mail is automatic
R\&CSVAX:$-h!$+u	$+h!$+u			uucp mail is automatic
E 3
I 3
D 12
R\&ing70:$+u@$-h	$+u@$+h	arpanet mail is automatic
R\&CSVAX:$-h!$+u	$+h!$+u	uucp mail is automatic
E 12
I 12
R\&ing70:$+@$-	$1@$2	arpanet mail is automatic
R\&CSVAX:$-!$+	$1!$2	uucp mail is automatic
E 12
.sz
E 3
.)b
The
.b S
line starts putting the rules into set one.
These rules strip off the
.q ing70:
from incoming ARPANET mail
and the
.q CSVAX:
off of incoming UUCP mail.
I 2
.pp
The name classes could be used here,
but using literal strings is safe
because they will always be program-generated.
E 20
E 2
.sh 1 "COMPARISON WITH OTHER MAILERS"
.sh 2 "Delivermail"
.pp
.i Sendmail
is an outgrowth of
.i delivermail .
The primary differences are:
.np
Configuration information is not compiled in.
D 23
This simplifies many of the problems
E 23
I 23
This change simplifies many of the problems
E 23
of moving to other machines.
It also allows easy debugging of new mailers.
.np
Address parsing is more flexible.
For example,
.i delivermail
only supported one gateway to any network,
whereas
.i sendmail
can be sensitive to host names
and reroute to different gateways.
.np
Forwarding and
:include:
D 4
support eliminate the requirement that the system alias file
E 4
I 4
features eliminate the requirement that the system alias file
E 4
be writable by any user
(or that an update program be written,
or that the system administration make all changes).
.np
.i Sendmail
supports message batching across networks
when a message is being sent to multiple recipients.
I 24
.np
A mail queue is provided in
.i sendmail.
Mail that cannot be delivered immediately
but can potentially be delivered later
is stored in this queue for a later retry.
The queue also provides a buffer against system crashes;
after the message has been collected
it may be reliably redelivered
even if the system crashes during the initial delivery.
.np
.i Sendmail
uses the networking support provided by 4.2BSD
to provide a direct interface networks such as the ARPANET
and/or Ethernet
using SMTP (the Simple Mail Transfer Protocol)
over a TCP/IP connection.
E 24
.sh 2 "MMDF"
.pp
D 3
MMDF [ref]
E 3
I 3
MMDF
[Crocker79]
E 3
D 13
spans a much wider problem set than
E 13
I 13
spans a wider problem set than
E 13
.i sendmail .
For example,
I 15
the domain of
E 15
MMDF includes a
.q "phone network"
mailer, whereas
.i sendmail
calls on preexisting mailers in most cases.
D 13
.i Sendmail
is approximately equivalent to the
SUBMIT and DELIVER phases of MMDF.
Because of this difference in design goals,
some of the important features of MMDF
(queueing, retransmission, and two-phase timeout)
are unimplemented by
E 13
I 13
D 15
MMDF
did not try to fit into the constraints of existing mailers,
and thus avoids some of the problems of
E 13
.i sendmail .
E 15
.pp
MMDF and
.i sendmail
both support aliasing,
customized mailers,
message batching,
D 13
and automatic forwarding to gateways.
E 13
I 13
automatic forwarding to gateways,
queueing,
and retransmission.
I 15
MMDF supports two-stage timeout,
which
.i sendmail
D 24
does not currently support.
E 24
I 24
does not support.
E 24
I 20
.pp
The configuration for MMDF
D 24
is completely compiled into the code\**.
E 24
I 24
is compiled into the code\**.
E 24
.(f
\**Dynamic configuration tables are currently being considered
for MMDF;
D 23
this would allow the installer to select either compiled
E 23
I 23
allowing the installer to select either compiled
E 23
or dynamic tables.
.)f
I 21
.pp
E 21
Since MMDF does not consider backwards compatibility
as a design goal,
D 24
the address parsing is much less flexible.
E 24
I 24
the address parsing is simpler but much less flexible.
E 24
D 21
It is slightly harder to integrate a new mailer
(\c
.q channel,
in MMDF parlance)
into MMDF,
both systems are designed to accept this,
and the difference does not seem to be significant.
E 21
.pp
I 21
D 24
It is slightly harder to integrate a new channel\**
E 24
I 24
It is somewhat harder to integrate a new channel\**
E 24
.(f
\**The MMDF equivalent of a
.i sendmail
.q mailer.
.)f
into MMDF.
In particular,
MMDF must know the location and format
of host tables for all channels,
and the channel must speak a special protocol.
I 24
This allows MMDF to do additional verification
(such as verifying host names)
at submission time.
E 24
.pp
E 21
MMDF strictly separates the submission and delivery phases.
Although
.i sendmail
has the concept of each of these stages,
they are integrated into one program,
whereas in MMDF they are split into two programs.
E 20
E 15
E 13
.sh 2 "Message Processing Module"
.pp
The Message Processing Module (MPM)
D 3
discussed by Postel [ref]
E 3
I 3
discussed by Postel [Postel79b]
E 3
matches
.i sendmail
closely in terms of its basic architecture.
However,
like MMDF,
the MPM includes the network interface software
as part of its domain.
.pp
MPM also postulates a duplex channel to the receiver,
D 23
as does MMDF.
This allows simpler handling of errors
E 23
I 23
as does MMDF,
thus allowing simpler handling of errors
E 23
by the mailer
D 23
than possible in
.i sendmail ;
when a message queued by
E 23
I 23
than is possible in
.i sendmail .
When a message queued by
E 23
.i sendmail
is sent,
any errors must be returned to the sender
by the mailer itself.
Both MPM and MMDF mailers
can return an immediate error response,
and a single error processor can create an appropriate response.
.pp
D 23
MPM prefers passing the message as a structured message,
E 23
I 23
MPM prefers passing the message as a structured object,
E 23
D 24
with type-length-value tuples.
E 24
I 24
with type-length-value tuples\**.
.(f
\**This is similar to the NBS standard.
.)f
E 24
D 23
This implies a much higher degree of cooperation
between mailers than required by
E 23
I 23
Such a convention requires a much higher degree of cooperation
between mailers than is required by
E 23
.i sendmail .
MPM also assumes a universally agreed upon internet name space
D 23
(with each address a net-host-user tuple),
E 23
I 23
(with each address in the form of a net-host-user tuple),
E 23
which
.i sendmail
does not.
.sh 1 "EVALUATIONS AND FUTURE PLANS"
.pp
.i Sendmail
is designed to work in a nonhomogeneous environment.
D 24
Every attempt is made to avoid imposing any constraints
E 24
I 24
Every attempt is made to avoid imposing unnecessary constraints
E 24
on the underlying mailers.
This goal has driven much of the design.
One of the major problems
has been the lack of a uniform address space,
D 3
as postulated in [IP]
.(d
[IP] -- internet protocol
.)d
and [PostelIMS].
.(d
[PostelIMS] -- Internet Message Structure
.)d
E 3
I 3
as postulated in [Postel79a]
and [Postel79b].
E 3
.pp
D 23
A nonuniform address space implies that path will be specified
E 23
I 23
A nonuniform address space implies that a path will be specified
E 23
in all addresses,
either explicitly (as part of the address)
or implicitly
(as with implied forwarding to gateways).
D 23
This has the unpleasant effect of making replying to messages
E 23
I 23
This restriction has the unpleasant effect of making replying to messages
E 23
exceedingly difficult,
since there is no one
.q address
for any person,
but only a way to get there from wherever you are.
.pp
Interfacing to mail programs
that were not initially intended to be applied
in an internet environment
has been amazingly successful,
and has reduced the job to a manageable task.
.pp
D 13
However,
many of these mailers implement their own queueing and retransmission.
In networks that support store-and-forward file transfer,
such as BerkNet and UUCP,
this feature must be supplied already.
However,
networks that transfer in real time,
such as the ARPANET or an Ether-based network
D 3
[ref],
E 3
I 3
D 6
[Ether99],
E 6
I 6
[Metcalfe76],
E 6
E 3
generally do not provide these features.
Also,
networks which provide these generally do not understand
timeouts or returning the text of the message on error,
both highly desirable features\**.
.(f
\**We have implemented an ARPANET mailer which
returns the message on error and does one-stage timeout
(returning the message after three days).
.)f
Such queueing, retransmission, and two-phase timeout
may be integrated into
.i sendmail
if it seems desirable.
.pp
E 13
.i Sendmail
has knowledge of a few difficult environments
built in.
D 20
It generates ARPANET FTP compatible error messages
E 20
I 20
It generates ARPANET FTP/SMTP compatible error messages
E 20
(prepended with three-digit numbers
D 3
[FTP1, FTP2])
.(d
[FTP1] -- FTP description
.)d
.(d
[FTP2] -- revised FTP codes
.)d
E 3
I 3
D 5
[Neigus78, FTP2])
E 5
I 5
D 20
[Neigus73, Postel74])
E 20
I 20
[Neigus73, Postel74, Postel82])
E 20
E 5
E 3
as necessary,
optionally generates UNIX-style
.q From
lines on the front of messages for some mailers,
and knows how to parse the same lines on input.
D 2
Although it still adds and understands ARPANET-style
E 2
I 2
D 23
This can be inconvenient to sites which have abandoned UNIX mail,
although
.i sendmail
still adds and understands ARPANET-style
E 2
.q From:
D 2
lines,
this can be inconvenient to sites which have abandoned UNIX mail.
E 2
I 2
lines.
E 23
E 2
Also,
error handling has an option customized for BerkNet.
.pp
D 20
One surprisingly major annoyance in most internet mailers
(such as MMDF)
is that the location and format of local mail is built in\**.
.(f
\**For example,
MMDF puts local mail in the file
.q .mail
\*- useful if you are running version 6.
.)f
.i Sendmail
eliminates all knowledge of location
and can function successfully with different formats.
E 20
I 20
The decision to avoid doing any type of delivery where possible
(even, or perhaps especially, local delivery)
has turned out to be a good idea.
Even with local delivery,
there are issues of the location of the mailbox,
the format of the mailbox,
the locking protocol used,
etc.,
that are best decided by other programs.
One surprisingly major annoyance in many internet mailers
is that the location and format of local mail is built in.
The feeling seems to be that local mail is so common
that it should be efficient.
D 21
This does not match our experience.
On the contrary,
E 21
I 21
D 23
This does not match our experience;
E 23
I 23
This feeling is not born out by
our experience;
E 23
on the contrary,
E 21
the location and format of mailboxes seems to vary widely
from system to system.
E 20
.pp
The ability to automatically generate a response to incoming mail
(by forwarding mail to a program)
seems useful
(\c
.q "I am on vacation until late August...." )
but can create problems
such as forwarding loops
(two people on vacation whose programs send notes back and forth,
for instance)
if these programs are not well written.
I 2
D 23
A program should be written to do standard tasks correctly,
but this does not solve the general case.
E 23
I 23
A program could be written to do standard tasks correctly,
but this would solve the general case.
.pp
E 23
E 2
It might be desirable to implement some form of load limiting.
D 2
I am unaware of any mail system that addresses this problem.
E 2
I 2
I am unaware of any mail system that addresses this problem,
nor am I aware of any reasonable solution at this time.
E 2
.pp
D 20
.i Sendmail
should be modified to run as a daemon,
reading an MPX file
(or other IPC scheme)
to receive mail and process it.
This would reduce the cost of sending mail to writing the message
into a known file.
.i Sendmail
would be modified to have a very different argument structure.
It already has an option to read the recipients
from the message header.
A more palatable technique for giving error messages
would also have to be devised.
.pp
E 20
The configuration file is currently practically inscrutable;
considerable convenience could be realized
with a higher-level format.
D 20
For example, a description might read:
.(b
I 3
.re
E 3
(MACRO name value)
(HEADER name value
	(OPTION option) ...
	(NEEDS option) ... )
(MAILER name path xlatstring
	(OPTION option) ...
	(ARGV arg ... ))
(CLASS name word ...)
(REWRITE setname
	(RULE lhs rhs) ... )
.)b
E 20
.pp
I 3
It seems clear that common protocols will be changing soon
to accommodate changing requirements and environments.
These changes will include modifications to the message header
D 21
[NBS80]
E 21
I 21
(e.g., [NBS80])
E 21
or to the body of the message itself
(such as for multimedia messages
[Postel80]).
D 20
Other changes will include changes to communication protocols
which may effect
.i sendmail ;
for example, the changes implied by the new Mail Transfer Protocol
[Sluizer81].
These changes should be relatively trivial to integrate
E 20
I 20
Experience indicates that
these changes should be relatively trivial to integrate
E 20
into the existing system.
.pp
E 3
D 20
Many other nice features could be implemented.
For example,
if we were sure that the alias file were writable by the effective user
(i.e., if
.i sendmail
were to run setuid)
then the inverted form could be rebuilt automatically when the
text copy was changed.
However, this appears to be little more than frosting.
D 3
.sp 2i
.pd
E 3
I 3
D 8
must be properly balanced and nested.
E 8
.pp
Some proposals call for a single address syntax,
such that the host name uniquely determines the network.
There are a number of evident problems with this.
In a large internet,
the database update problem becomes considerable,
especially under multiple managements;
this can be solved by a daemon that updates the tables
dynamically,
but it is not clear what the problems are here.
More to the point,
this requires a unique namespace among all networks.
In our current configuration
we have been unable to even find out the names of all the hosts
on the UUCP network;
to hope that on an internet with fifty or more networks
would have no name conflicts is beyond the scope of
.i sendmail .
Despite the difficulties, however,
this is probably a better long-term solution to the problem
of internet addressing.
The ambiguities implied by addresses combining
left-associative and right-associative addresses
are impossible to solve without parentheses;
acceptable for mathematical equations,
but absurd for network addresses.
.pp
A related problem occurs with the user namespace.
E 20
In tightly coupled environments,
D 20
it would be nice to have automatic forwarding between machines
on the basis of the user name alone,
without cumbersome aliases.
E 20
I 20
D 24
it would be nice to have a name server integrated into the mail system.
E 24
I 24
it would be nice to have a name server
such as Grapvine
[Birrell82]
integrated into the mail system.
E 24
D 21
This would allow a domain such as
E 21
I 21
This would allow a site such as
E 21
.q Berkeley
D 21
to appear as a homogenous host,
E 21
I 21
to appear as a single host,
E 21
rather than as a collection of hosts,
and would allow people to move transparently among machines
without having to change their addresses.
E 20
D 23
This would require an automatically updated database
E 23
I 23
Such a facility
would require an automatically updated database
E 23
and some method of resolving conflicts.
D 23
Ideally this would be effective even with multiple managements.
E 23
I 23
Ideally this would be effective even without
all hosts being under
a single management.
E 23
D 20
A student at Berkeley,
D 8
Allan Biocca,
E 8
I 8
Alan Biocca,
E 8
is working on a facility which may provide the necessary functionality.
D 4
.uh "ACKNOWLEDGEMENTS"
E 4
.pp
I 4
In the long run,
a system that understands canonical internet addresses
(net, host, user)
implemented in a world that understands these addresses
would be an incredible win.
.i Sendmail
seems to be a useful tool to pull together
the haphazard environment that exists today,
until the better tools permeate the internetwork world.
E 20
I 20
However,
D 23
it is not clear whether this should be integrated into the
aliasing feature
E 23
I 23
it is not clear whether this feature
should be integrated into the
aliasing facility
E 23
or should be considered a
.q "value added"
feature outside
.i sendmail
itself.
I 23
.pp
As a more interesting case,
the CSNET name server
D 26
[ref?]
E 26
I 26
[Solomon81]
E 26
provides an facility that goes beyond a single
tightly-coupled environment.
Such a facility would normally exist outside of
.i sendmail
however.
E 23
E 20
.sh 0 "ACKNOWLEDGEMENTS"
.pp
E 4
D 8
Thanks are due to Kurt Schoens for his continual cheerful
E 8
I 8
Thanks are due to Kurt Shoens for his continual cheerful
E 8
assistance and good advice,
Bill Joy for pointing me in the correct direction
(over and over),
and Mark Horton for more advice,
prodding,
and many of the good ideas.
Kurt and Eric Schmidt are to be credited
for using
.i delivermail
as a server for their programs
(\c
.i Mail
and BerkNet respectively)
before any sane person should have,
and making the necessary modifications
promptly and happily.
Eric gave me considerable advice about the perils
of network software which saved me an unknown
amount of work and grief.
Mark did the original implementation of the DBM version
of aliasing, installed the VFORK code,
wrote the current version of
.i rmail ,
and was the person who really convinced me
to put the work into
.i delivermail
to turn it into
.i sendmail .
Kurt deserves accolades for using
.i sendmail
when I was myself afraid to take the risk;
how a person can continue to be so enthusiastic
in the face of so much bitter reality is beyond me.
.pp
D 5
Kurt, Bill, and Kirk McKusick
E 5
I 5
D 23
Kurt and Kirk McKusick
E 5
read early copies of this paper,
E 23
I 23
Kurt,
Mark,
Kirk McKusick,
Marvin Solomon,
and many others have reviewed this paper,
E 23
giving considerable useful advice.
.pp
D 20
Special thanks are reserved for Mike Stonebraker,
who knowingly allowed me to put so much work into this
E 20
I 20
D 21
Special thanks are reserved for Mike Stonebraker and Bob Epstein,
E 21
I 21
Special thanks are reserved for Mike Stonebraker at Berkeley
and Bob Epstein at Britton-Lee,
E 21
who both knowingly allowed me to put so much work into this
I 23
project
E 23
E 20
when there were so many other things I really should
have been working on.
.+c
.ce
REFERENCES
.nr ii 1.5i
I 24
.ip [Birrell82]
Birrell, A. D.,
Levin, R.,
Needham, R. M.,
and
Schroeder, M. D.,
.q "Grapevine: An Exercise in Distributed Computing."
In
.ul
Comm. A.C.M. 25,
4,
April 82.
E 24
I 13
.ip [Borden79]
Borden, S.,
Gaines, R. S.,
and
Shapiro, N. Z.,
.ul
The MH Message Handling System: Users' Manual.
R-2367-PAF.
Rand Corporation.
October 1979.
E 13
.ip [Crocker77a]
Crocker, D. H.,
Vittal, J. J.,
Pogran, K. T.,
and
Henderson, D. A. Jr.,
.ul
D 4
Standard for the Format of ARPA Network Text Messages,
E 4
I 4
Standard for the Format of ARPA Network Text Messages.
E 4
RFC 733,
NIC 41952.
In [Feinler78].
November 1977.
.ip [Crocker77b]
Crocker, D. H.,
.ul
D 4
Framework and Functions of the MS Personal Message System,
E 4
I 4
Framework and Functions of the MS Personal Message System.
E 4
R-2134-ARPA,
Rand Corporation,
Santa Monica, California.
1977.
.ip [Crocker79]
Crocker, D. H.,
Szurkowski, E. S.,
and
Farber, D. J.,
.ul
D 4
An Internetwork Memo Distribution Facility \*- MMDF,
E 4
I 4
An Internetwork Memo Distribution Facility \*- MMDF.
E 4
6th Data Communication Symposium,
Asilomar.
November 1979.
I 20
.ip [Crocker82]
Crocker, D. H.,
.ul
Standard for the Format of Arpa Internet Text Messages.
RFC 822.
Network Information Center,
SRI International,
Menlo Park, California.
August 1982.
E 20
D 6
.ip [Ether99]
E 6
I 6
.ip [Metcalfe76]
Metcalfe, R.,
and
E 6
Boggs, D.,
D 6
and who???
E 6
I 6
.q "Ethernet: Distributed Packet Switching for Local Computer Networks" ,
E 6
.ul
D 6
Ethernet....
E 6
I 6
Communications of the ACM 19,
7.
July 1976.
E 6
.ip [Feinler78]
Feinler, E.,
and
Postel, J.
(eds.),
.ul
D 4
ARPANET Protocol Handbook,
E 4
I 4
ARPANET Protocol Handbook.
E 4
NIC 7104,
Network Information Center,
SRI International,
Menlo Park, California.
1978.
D 5
.ip [FTP2]
Revised FTP Reply Codes.
I 4
RFC xxxx.
In [Feinler78].
E 5
E 4
D 8
.ip [MH99]
MH.
E 8
I 8
D 13
.ip [Borden79]
Borden, S.,
Gaines, R. S.,
and
Shapiro, N. Z.,
.ul
The MH Message Handling System: Users' Manual.
R-2367-PAF.
Rand Corporation.
October 1979.
E 13
E 8
.ip [NBS80]
National Bureau of Standards,
.ul
D 4
Specification of a Draft Message Format Standard,
Report No. ICST/CBOS 80-2,
E 4
I 4
Specification of a Draft Message Format Standard.
Report No. ICST/CBOS 80-2.
E 4
October 1980.
D 5
.ip [Neigus78]
E 5
I 5
.ip [Neigus73]
E 5
Neigus, N.,
.ul
D 4
File Transfer Protocol for the ARPA Network,
RFC xxxx,
in [Feinler78].
E 4
I 4
File Transfer Protocol for the ARPA Network.
D 5
RFC xxxx.
E 5
I 5
RFC 542, NIC 17759.
E 5
In [Feinler78].
E 4
D 5
1978.
E 5
I 5
August, 1973.
E 5
.ip [Nowitz78a]
Nowitz, D. A.,
and
Lesk, M. E.,
.ul
D 4
A Dial-Up Network of UNIX Systems,
E 4
I 4
A Dial-Up Network of UNIX Systems.
E 4
Bell Laboratories.
D 4
August, 1978.
E 4
In
UNIX Programmer's Manual, Seventh Edition,
Volume 2.
I 4
August, 1978.
E 4
.ip [Nowitz78b]
Nowitz, D. A.,
.ul
D 4
Uucp Implementation Description,
E 4
I 4
Uucp Implementation Description.
E 4
Bell Laboratories.
D 4
October, 1978.
E 4
In
UNIX Programmer's Manual, Seventh Edition,
Volume 2.
I 4
October, 1978.
I 5
.ip [Postel74]
Postel, J.,
and
Neigus, N.,
Revised FTP Reply Codes.
RFC 640, NIC 30843.
In [Feinler78].
June, 1974.
E 5
E 4
.ip [Postel77]
Postel, J.,
.ul
D 4
Mail Protocol,
E 4
I 4
Mail Protocol.
E 4
NIC 29588.
In [Feinler78].
November 1977.
.ip [Postel79a]
Postel, J.,
.ul
D 4
Internet Message Protocol,
E 4
I 4
Internet Message Protocol.
E 4
RFC 753,
IEN 85.
Network Information Center,
SRI International,
Menlo Park, California.
March 1979.
.ip [Postel79b]
Postel, J. B.,
.ul
D 4
An Internetwork Message Structure,
E 4
I 4
An Internetwork Message Structure.
D 5
IEN xxxx.
Network Information Center,
SRI International,
Menlo Park, California.
E 4
1979.
E 5
I 5
In
.ul
Proceedings of the Sixth Data Communications Symposium,
IEEE.
New York.
November 1979.
E 5
.ip [Postel80]
Postel, J. B.,
.ul
A Structured Format for Transmission of Multi-Media Documents.
D 4
RFC 767,
E 4
I 4
RFC 767.
E 4
Network Information Center,
SRI International,
Menlo Park, California.
August 1980.
I 13
D 20
.ip [Postel81]
E 20
I 20
.ip [Postel82]
E 20
Postel, J. B.,
.ul
Simple Mail Transfer Protocol.
D 20
RFC788.
E 20
I 20
RFC821
(obsoleting RFC788).
E 20
Network Information Center,
SRI International,
Menlo Park, California.
D 20
November 1981.
E 20
I 20
August 1982.
E 20
E 13
D 5
.ip [Schmidt99]
E 5
I 5
.ip [Schmidt79]
E 5
Schmidt, E.,
.ul
D 5
The Berkeley Network.
E 5
I 5
An Introduction to the Berkeley Network.
E 5
University of California, Berkeley California.
D 5
1999.
E 5
I 5
1979.
E 5
D 8
.ip [Schoens79]
D 4
University of California, Berkeley California.
1999.
E 4
Schoens, K.,
E 8
I 8
.ip [Shoens79]
Shoens, K.,
E 8
.ul
D 4
Mail Reference Manual,
UNIX Programmer's Manual,
E 4
I 4
Mail Reference Manual.
University of California, Berkeley.
In UNIX Programmer's Manual,
E 4
Seventh Edition,
Volume 2C.
D 4
University of California, Berkeley.
E 4
December 1979.
.ip [Sluizer81]
Sluizer, S.,
and
Postel, J. B.,
.ul
D 4
Mail Transfer Protocol,
RFC 780,
E 4
I 4
Mail Transfer Protocol.
RFC 780.
E 4
Network Information Center,
SRI International,
Menlo Park, California.
May 1981.
I 26
.ip [Solomon81]
Solomon, M., Landweber, L., and Neuhengen, D.,
.q "The Design of the CSNET Name Server."
CS-DN-2,
University of Wisconsin, Madison.
November 1981.
E 26
I 20
.ip [Su82]
Su, Zaw-Sing,
and
Postel, Jon,
.ul
The Domain Naming Convention for Internet User Applications.
RFC819.
Network Information Center,
SRI International,
Menlo Park, California.
August 1982.
E 20
D 26
.ip [UNIX80]
E 26
I 26
.ip [UNIX83]
E 26
.ul
The UNIX Programmer's Manual, Seventh Edition,
Virtual VAX-11 Version,
Volume 1.
Bell Laboratories,
modified by the University of California,
D 26
Berkeley California.
November 1980.
E 26
I 26
Berkeley, California.
March, 1983.
E 26
D 20
.++ A
.+c "SENDMAIL USAGE"
.pp
Arguments must be presented with flags before addresses.
The flags are:
.nr ii 1i
.ip "\-f addr"
D 4
The mail is from
E 4
I 4
The sender's machine address is
E 4
.i addr .
This flag is ignored unless the real user
is root,
network,
or uucp,
or if
.i addr
contains an exclamation point
(because of certain restrictions in UUCP).
.ip "\-r addr"
An obsolete form of
.b \-f .
.ip "\-h cnt"
Sets the
.q "hop count"
to
.i cnt .
This represents the number of times this message has been processed
by
.i sendmail
(to the extent that it is supported by the underlying networks).
.i Cnt
is incremented during processing,
and if it reaches
MAXHOP
(currently 30)
.i sendmail
throws away the message with an error.
.ip "\-F\&name"
Sets the full name of this user to
.i name .
.ip \-e\&p
Print error messages (default).
.ip \-e\&q
Throw away error messages.
The only response is the exit status.
.ip \-e\&m
Mail back errors.
.ip \-e\&w
.q Write
back errors \*- or mail them if the user is not logged in.
.ip \-e\&e
Do special error processing for BerkNet.
This involves mailing back the errors
but always returning a zero exit status.
.ip \-n
Don't do aliasing or forwarding.
.ip \-m
Include me in alias expansions.
Normally
.i sendmail
suppresses the sender
if in a group being sent to.
I 16
.ip \-o
D 17
Assume that header lines containing recepient names in the message
will have addresses separated by spaces
rather than by commas.
E 17
I 17
Assume that the headers are already in new format,
i.e.,
there are commas between names and spaces are to be preserved.
If this flag is not given,
an adaptive algorithm is used:
if any recipient address contains a comma, parenthesis,
or angle bracket,
it will be assumed that commas already exist.
This flag is required in certain rare cases.
E 17
Headers are always output with commas between the names.
E 16
.ip \-i
Don't take a dot to end a message.
.ip \-t
Read the header for
.q To: ,
.q Cc: ,
and
.q Bcc:
lines, and send to everyone listed in those lists.
The
.q Bcc:
line will be deleted before sending.
Any addresses in the argument vector will be deleted
from the send list.
D 13
.ip \-a\&m
E 13
I 13
.ip \-a
E 13
Do special processing for the
ARPANET.
D 4
This includes taking the
E 4
I 4
This includes reading the
E 4
.q "From:"
D 4
person from the header,
E 4
I 4
line from the header to find the sender,
E 4
printing
ARPANET
style messages
(preceded by three digit reply codes for compatibility with
the FTP protocol
D 5
[Neigus78, FTP2, Postel77]),
E 5
I 5
[Neigus73, Postel74, Postel77]),
E 5
D 4
and ending lines with <CRLF>.
E 4
I 4
and ending lines of error messages with <CRLF>.
E 4
D 13
.ip \-a\&f
Same as
.b \-a\&m ,
except print out message numbers appropriate for the MLFL command
[Postel77].
E 13
I 13
D 16
.ip \-a\&p
E 16
I 16
.ip \-a\&s
E 16
Take input over an SMTP connection on standard input and output.
This does everything the \-a flag does also.
E 13
.ip \-s
Save UNIX-style
.q From
lines at the beginning of headers.
Normally they are assumed redundant
and discarded.
.ip \-v
Give a blow-by-blow description of function.
This gives information of interest to the user
rather than for the
.i sendmail
maintainer;
for example,
aliases are printed as expanded
and mailer functions are printed as they run.
I 16
.ip \-c
If this mailer is marked as being expensive,
don't connect immediately.
This requires that queueing be compiled in,
since it will depend on a sender process to
actually send the mail.
E 16
I 13
D 17
.ip \-q
E 17
I 17
.ip \-q\&time
E 17
Try to execute the queued up mail.
I 17
If the time is given,
a sendmail will run through the queue at the specified interval
to deliver queued mail;
otherwise, it only runs once.
E 17
I 15
.ip \-p
Verify as much about the addresses and message as possible
and then politely run in background.
E 15
.ip \-D
Run as a daemon.
D 17
This automatically runs SMTP.
This is not completely supported yet.
E 17
I 17
This should always be used with the
.b \-as
flag,
as it runs on the SMTP port.
E 17
.ip \-T\&time
Set timeout interval for mail that cannot be sent.
.ip \-Q\&dir
Select directory in which mail will be queued.
Typically for debugging only.
E 13
.ip \-C\&file
Use a different configuration file.
.ip \-A\&file
Use a different alias file.
.ip \-I
Initialize the DBM version
of the alias file.
If
.b \-I
is given,
no delivery is attempted.
I 8
The DBM version will be rebuilt automatically if the DBM files
are mode 666,
or if they are owned by the effective userid.
E 8
.ip \-V
Verify the addresses only.
Only partial verification is done:
syntax is checked, and local names are verified,
but no checking normally done by the mailer is attempted.
.ip \-d\&level
Set debugging level.
D 13
.ip \-D\&x\&val
E 13
I 13
.ip \-M\&x\&val
E 13
Define macro
.i x
to have value
.i val .
.nr ii 5n
.+c "OTHER CONFIGURATION"
.pp
There are some configuration changes that can be made by
recompiling
.i sendmail .
Some of these are changes to compilation flags:
.nr ii 1i
.ip V6
If set,
this will compile a version 6 system,
with 8-bit user id's,
single character tty id's,
etc.
If not set,
a version 7 system is assumed.
.ip DBM
If set,
the
.q DBM
package in UNIX is used
(see DBM(3X) in [UNIX80]).
If not set,
a much less efficient algorithm for processing aliases is used.
.ip VFORK
Set if your system has the experimental
.i vfork
system call.
See vfork(2) in [UNIX80].
If not set,
the regular
.i fork
system call is used.
This option improves performance.
.ip DEBUG
If set, debugging information is compiled in.
To actually get the debugging output,
the
.b \-d
flag must be used.
.ip LOG
If set,
the
.i syslog
D 14
routine in use at some Berkeley sites is used.
This logs an informational log record
E 14
I 14
routine in use at some sites is used.
This makes an informational log record
E 14
for each message processed,
D 4
and logs a higher-priority log record
E 4
I 4
D 14
and logs a higher priority log record
E 14
I 14
and makes a higher priority log record
E 14
E 4
for internal system errors.
D 13
.ip NEWFTP
If set, the ARPANET reply codes for
D 4
.q "Revised New FTP" are used
E 4
I 4
.q "Revised New FTP"
are used
E 4
D 5
[FTP2].
E 5
I 5
[Postel74].
E 5
If not set,
reply codes for the old, unrevised
.q "New FTP"
are used
D 5
[Neigus78].
E 5
I 5
[Neigus73].
E 5
If you want to use reply codes for the Mail Transfer Protocol
[Sluizer81]
you may find it necessary to make some code modifications.
E 13
I 13
.ip QUEUE
This flag should be set to compile in the queueing code.
If this is not set,
mailers must accept the mail immediately
or it will be returned to the sender.
.ip SMTP
If set,
the code to handle user and server SMTP will be compiled in.
This is only necessary if your machine has some mailer
that speaks SMTP.
.ip UGLYUUCP
If you have a UUCP host adjacent to you which is not running
a reasonable version of
.i rmail ,
you will have to set this flag to include the
.q "remote from sysname"
info on the from line.
Otherwise, UUCP gets confused about where the mail came from.
E 13
.ip PARANOID
There are places where
.i sendmail
may opt for a more secure,
but probably less convenient environment.
For example,
if this flag is set
it is not possible to specify a program as an address directly;
this can only be done with an alias.
I 7
.ip NOTUNIX
If you are using a non-UNIX mail format,
you can set this flag to turn off special processing
of UNIX-style
.q "From "
lines.
E 7
.nr ii 5n
.pp
D 14
If you want to enable special processing of other headers,
you will have to add them to the
E 14
I 14
Not all header semantics are defined in the configuration file.
Header lines that should only be included by certain mailers
(as well as other more obscure semantics)
must be specified in the
E 14
.i HdrInfo
table in
.i conf.c .
This table contains the header name
(which should be in all lower case),
a set of header control flags (described below),
and a set of mailer flags,
used by some of the header flags.
The header flags are:
D 4
.nr ip 1.2i
E 4
I 4
.nr ii \w'H_ACHECK  'u
E 4
.ip H_CHECK
Check the flags for the receiving mailer
against the third field in the
.i HdrInfo
entry.
If the mailer has any of those bits set,
send this field;
otherwise, do not send this field to that mailer.
If the field was in the message originally, however,
it will always be sent
(i.e., this only applies to headers being added by
.i sendmail ).
.ip H_ACHECK
Same as H_CHECK,
except that it even applies to headers that were in the
original message.
That is,
if this bit is set and the mailer does not have flag bits set
that intersect with the third field in this
.i HdrInfo
entry,
the header line is
.i always
deleted.
.ip H_EOH
If this header field is set,
treat it like a blank line,
i.e.,
it will signal the end of the header
and the beginning of the message text.
.ip H_FORCE
Add this header entry
even if one existed in the message before.
If a header entry does not have this bit set,
.i sendmail
will not add another header line if a header line
of this name already existed.
This would normally be used to stamp the message
by everyone who handled it.
D 16
.ip H_ADDR
E 16
I 16
.ip H_RCPT
E 16
If set,
this field contains recipient addresses.
This is used by the
.b \-t
flag to determine who to send to
when it is collecting recipients from the message.
I 16
.ip H_ADDR
This flag indicates that this field
contains addresses that should be rewritten
to include commas, etc.
E 16
.nr ii 5n
.lp
Let's look at a sample
.i HdrInfo
specification:
.(b
.sz -2
D 4
.ta 4n +\w'"original-from",  'u +\w'H_ADDR|H_ACHECK,  'u
E 4
I 4
.ta 4n +\w'"received-from",  'u +\w'H_ADDR|H_ACHECK,  'u
E 4
struct hdrinfo	HdrInfo[] =
{
	"date",	H_CHECK,	M_NEEDDATE,
	"from",	H_CHECK,	M_NEEDFROM,
	"original-from",	H_ACHECK,	0,
	"sender",	0,	0,
	"full-name",	H_ACHECK,	M_FULLNAME,
	"to",	H_ADDR,	0,
	"cc",	H_ADDR,	0,
	"bcc",	H_ADDR|H_ACHECK,	0,
	"message-id",	H_CHECK,	M_MSGID,
	"message",	H_EOH,	0,
	"text",	H_EOH,	0,
	"received-date",	H_CHECK,	M_LOCAL,
	"received-from",	H_CHECK,	M_LOCAL,
	"via",	H_FORCE,	0,
	NULL,	0,	0,
};
.sz
.)b
This specification says that the
.q Date: ,
.q From: ,
.q Message-Id: ,
.q Received-Date: ,
and
.q Received-From:
must be requested by the mailer to be inserted.
However,
if they were in the message as received by
.i sendmail
they will be propagated.
The
.q Full-Name:
field, on the other hand,
will be deleted even if it was specified before,
unless the mailer wants it.
The
.q Original-From:
and
.q Bcc:
fields will be deleted unconditionally
D 4
(since it is never possible for a mailers flags
E 4
I 4
(since it is never possible for a mailer's flags
E 4
to intersect with zero).
The
.q Original-From:
is in fact used internally,
and will be reinserted by ad hoc code,
but only if it differs from the
.q From:
line that would otherwise be inserted.
.q To: ,
.q Cc: ,
and
.q Bcc:
all specify recipient addresses.
The
.q Message:
and
.q Text:
fields will terminate the header;
these are specified in new protocols
[NBS80]
or used by random dissenters around the network world.
The
.q Via:
field will always be added,
and can be used to trace messages.
The
.q Sender:
field is used internally,
although no cliched special processing occurs.
.pp
There are a number of important points here.
First,
header fields are not added automatically just because they are in the
.i HdrInfo
structure;
D 4
they must be specified in the configuration file.
E 4
I 4
they must be specified in the configuration file
in order to be added to the message.
E 4
Any header fields mentioned in the configuration file but not
mentioned in the
.i HdrInfo
structure have default processing performed;
that is,
they are added unless they were in the message already.
Second,
the
.i HdrInfo
structure only specifies cliched processing;
certain headers are processed specially by ad hoc code
regardless of the status specified in
.i HdrInfo .
For example,
the
.q Sender:
and
.q From:
fields are always scanned on ARPANET mail
to determine the sender;
this is used to perform the
.q "return to sender"
function.
The
.q "From:"
and
.q "Full-Name:"
fields are used to determine the full name of the sender
if possible;
this is stored in the macro
.b $x
and used in a number of ways.
Although the
.q "Original-From:"
field is specified to be deleted in
.i HdrInfo ,
it is added automatically if the
.q From:
field that would be generated internally
differs from the
.q From:
field that was specified in the message;
in this case,
the original
.q From:
field is renamed
.q Original-From: .
.pp
The file
.i conf.c
also contains the specification of ARPANET reply codes.
There are six classifications these fall into:
.(b
.sz -2
D 5
.ta \w'char  'u +\w'Arpa_Usrerr[] =  'u +\w'"999";  'u
E 5
I 5
.ta \w'char  'u +\w'Arpa_Usrerr[] =  'u +\w'"888";  'u
E 5
char	Arpa_Info[] =	"050";	/* arbitrary info */
char	Arpa_Enter[] =	"350";	/* start mail input */
char	Arpa_Mmsg[] =	"256";	/* mail successful (MAIL cmd) */
char	Arpa_Fmsg[] =	"250";	/* mail successful (MLFL cmd) */
char	Arpa_Syserr[] =	"455";	/* some (transient) system error */
char	Arpa_Usrerr[] =	"450";	/* some (fatal) user error */
.sz
.)b
The class
.i Arpa_Info
is for any information that is not required by the protocol,
such as forwarding information.
.i Arpa_Enter
is output when
.i sendmail
wants to start receiving the mail.
.i Arpa_Mmsg
and
.i Arpa_Fmsg
are given if the mail is successfully delivered;
D 4
the selection of message number depends on the command given
E 4
I 4
the selection of message number depends on the FTP command given
E 4
(which is communicated via the
.b \-a
flag).
.i Arpa_Syserr
is printed by the
.i syserr
routine;
typically, this occurs when something has gone wrong at the
receiving site,
with the assumption that it is a transient condition.
Finally,
.i Arpa_Usrerr
is the result of a user error
and is generated by the
.i usrerr
routine;
these are generated when the user has specified something wrong,
and hence the error is permanent,
i.e.,
it will not work simply by resubmitting the request.
.pp
If it is necessary to restrict mail through a gateway,
the
.i checkcompat
routine can be modified.
This routine is called for every recipient address.
It can return
.b TRUE
to indicate that the address is acceptable
and mail processing will continue,
or it can return
.b FALSE
to reject the recipient.
If it returns false,
it is up to
.i checkcompat
to print an error message
(using
.i usrerr )
saying why the message is rejected.
For example,
.i checkcompat
could read:
.(b
.re
.sz -2
bool
checkcompat(to)
	register ADDRESS *to;
{
	if (MsgSize > 50000 && to->q_mailer != MN_LOCAL)
	{
		usrerr("Message too large for non-local delivery");
		return (FALSE);
	}
	return (TRUE);
}
.sz
.)b
This would reject messages greater than 50000 bytes
unless they were local.
The actual use of this routine is highly dependent on the
implementation,
and use should be limited.
E 20
E 3
E 1
