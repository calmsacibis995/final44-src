h37868
s 00007/00001/07499
d D 8.58 95/06/21 08:49:46 eric 170 169
c fix bug in MAXRWSETS description
e
s 00018/00000/07482
d D 8.57 95/06/10 18:22:46 eric 169 168
c add DontExpandCnames option -- IETF seems to be moving in this direction
e
s 00015/00003/07467
d D 8.56 95/05/27 17:39:11 eric 168 167
c add MaxQueueRunSize parameter
e
s 00006/00006/07464
d D 8.55 95/05/24 15:52:53 eric 167 166
c different approach to NIS rebuilding
e
s 00012/00015/07458
d D 8.54 95/05/23 12:17:27 eric 166 165
c drop BrokenSmtpPeers; clarify Apparently-To:
e
s 00014/00009/07459
d D 8.53 95/05/19 07:07:28 eric 165 164
c standards for long macro and class names -- first char l.c. for internal
e
s 00019/00017/07449
d D 8.52 95/04/23 08:22:23 eric 164 163
c trim out a bunch of MIME modes
e
s 00004/00002/07462
d D 8.51 95/04/22 11:58:28 eric 163 162
c improve documentation of F=7 mailer flag
e
s 00082/00044/07382
d D 8.50 95/04/21 10:24:47 eric 162 161
c update copyright; document ColonOKInAddr and HasWildcardMX
e
s 00002/00001/07424
d D 8.49 95/04/20 08:39:49 eric 161 160
c add Nice=N mailer option
e
s 00018/00014/07407
d D 8.48 95/04/19 11:10:41 eric 160 159
c editorial changes; update some RFC numbers to be current
e
s 00015/00015/07406
d D 8.47 95/03/31 15:07:55 eric 159 158
c clean up MTS type
e
s 00006/00006/07415
d D 8.46 95/03/22 10:37:42 eric 158 157
c spelling fixes
e
s 01386/01662/06035
d D 8.45 95/03/21 19:35:12 eric 157 156
c many changes for 8.7 -- not yet proofread
e
s 00022/00000/07675
d D 8.44 95/02/24 10:35:06 eric 156 155
c add NoRecipientAction option
e
s 01880/01331/05795
d D 8.43 95/02/20 12:00:01 eric 155 154
c first cut at documenting 8.7 -- much more needed
e
s 00179/00098/06947
d D 8.42 94/08/09 09:03:59 eric 154 153
c document long option names
e
s 00106/00055/06939
d D 8.41 94/08/07 13:40:18 eric 153 152
c document U= mailer field
e
s 00030/00000/06964
d D 8.40 94/07/23 10:46:21 eric 152 151
c Option 8
e
s 00136/00066/06828
d D 8.39 94/07/16 08:45:32 eric 151 150
c updates for 8.7, esp. split out mailer flags
e
s 00004/00005/06890
d D 8.38 94/05/18 10:27:06 eric 150 149
c fix a lie about log levels; clarify [hostname] usage
e
s 00002/00002/06893
d D 8.37 94/05/11 11:43:09 eric 149 148
c Figure 2 should be Figure 1
e
s 00008/00004/06887
d D 8.36 94/04/14 10:40:40 eric 148 147
c document noreceipts privacy flag
e
s 00001/00001/06890
d D 8.35 94/03/21 23:33:55 eric 147 146
c E option is not safe after all
e
s 00001/00001/06890
d D 8.34 94/03/03 08:09:36 eric 146 145
c fix documentation of F=7 flag
e
s 00026/00014/06865
d D 8.33 94/01/26 17:40:04 eric 145 144
c clarify $#local $: @ username syntax; miscellaneous cleanup
e
s 00020/00010/06859
d D 8.32 94/01/12 06:51:49 eric 144 143
c add warning about upper case letters in NIS keys
e
s 00003/00003/06866
d D 8.31 94/01/04 07:51:11 eric 143 142
c typos
e
s 00001/00001/06868
d D 8.30 93/12/26 07:53:30 eric 142 141
c minor typo
e
s 00012/00006/06857
d D 8.29 93/12/12 06:51:06 eric 141 140
c document $=m
e
s 00034/00017/06829
d D 8.28 93/12/01 14:38:17 eric 140 139
c notes on logging; note SIGUSR1 signal to give state dump
e
s 00084/00045/06762
d D 8.27 93/12/01 11:37:11 eric 139 138
c miscellaneous cleanup; document ``/vendor'' on V line
e
s 00006/00000/06801
d D 8.26 93/10/14 10:19:38 eric 138 137
c do better page alignment for double-sided output
e
s 00025/00013/06776
d D 8.25 93/09/30 07:42:05 eric 137 136
x 129
c restore Return-Receipt-To: documentation
e
s 00007/00004/06773
d D 8.24 93/09/29 11:15:14 eric 136 134
c doc bug -- delivery mode "b" causes VRFY and RCPT to defer expansion
e
s 00006/00003/06774
d R 8.24 93/09/29 08:43:05 eric 135 134
c delivery mode "b" also avoids initial expansion
e
s 00004/00002/06773
d D 8.23 93/09/27 14:16:11 eric 134 133
c improper section cross reference
e
s 00002/00002/06773
d D 8.22 93/09/22 09:06:07 eric 133 132
c fix documentation of makemap -f flag
e
s 00003/00003/06772
d D 8.21 93/09/21 07:21:24 eric 132 131
c accuracy and troff fixes
e
s 00001/00001/06774
d D 8.20 93/09/19 17:41:11 eric 131 130
c change trademark attribution
e
s 00032/00000/06743
d D 8.19 93/09/03 07:56:47 eric 130 129
c description of how to create userdb maps
e
s 00009/00018/06734
d D 8.18 93/08/30 16:09:24 eric 129 128
c delete Return-Receipt-To: -- it was disabled in the code long ago
e
s 00006/00001/06746
d D 8.17 93/08/27 07:21:12 eric 128 127
c add LA_SHORT
e
s 00019/00002/06728
d D 8.16 93/08/26 11:19:53 eric 127 126
c clarifications and corrections
e
s 00004/00000/06726
d D 8.15 93/08/26 07:49:20 eric 126 125
c flesh out acknowledgements
e
s 00032/00006/06694
d D 8.14 93/08/26 07:34:25 eric 125 124
c cleanup and clarification
e
s 00009/00000/06691
d D 8.13 93/08/24 21:07:13 eric 124 123
c document split envelope/header mailer-specific rewriting
e
s 00000/00004/06691
d D 8.12 93/08/23 10:22:56 eric 123 122
c drop MAXIPADDR
e
s 00029/00015/06666
d D 8.11 93/08/22 16:57:50 eric 122 121
c add restrictqrun privacy flag
e
s 00067/00139/06614
d D 8.10 93/08/20 13:49:55 eric 121 120
c eliminate frozen config files
e
s 00008/00004/06745
d D 8.9 93/08/17 13:27:32 eric 120 119
c document ident timeout
e
s 00291/00183/06458
d D 8.8 93/08/15 09:29:19 eric 119 118
c V5 config files; cleanup of $w/$j/$m
e
s 00024/00016/06617
d D 8.7 93/08/08 16:01:53 eric 118 117
c mostly factual corrections and clarifications; options u and g
c can take symbolic names
e
s 00169/00103/06464
d D 8.6 93/07/22 11:43:29 eric 117 116
c fonts; clarify that sendmail uses gethostbyname
e
s 00003/00002/06564
d D 8.5 93/07/22 09:47:28 eric 116 115
c mention that $# can be called in subroutines of ruleset zero
e
s 00013/00011/06553
d D 8.4 93/07/20 14:46:27 eric 115 114
c fix some pathname inconsistencies
e
s 00029/00006/06535
d D 8.3 93/07/18 11:17:43 eric 114 113
c document option `w'; fix Pell's name; fix page numbering
e
s 00090/00030/06451
d D 8.2 93/07/11 14:02:08 eric 113 112
c add -X command line flag and -O map flag
e
s 00000/00000/06481
d D 8.1 93/07/11 13:52:52 bostic 112 111
c 4.4BSD snapshot (revision 8.1)
e
s 00194/00023/06287
d D 6.56 93/07/11 13:50:16 eric 111 109
c add things to CHANGES; change some 4.3 references to 4.4
e
s 00002/00002/06308
d R 8.1 93/07/02 15:25:15 bostic 110 109
c 4.4BSD snapshot (revision 8.1); add 1993 to copyright
e
s 00001/00001/06309
d D 6.55 93/07/02 09:06:01 eric 109 108
c another 6 => 8 change
e
s 00007/00007/06303
d D 6.54 93/07/02 07:54:34 mckusick 108 106
c change version references from 6 to 8
e
s 00002/00002/06308
d R 8.1 93/06/08 14:10:17 bostic 107 106
c 
e
s 00001/00001/06309
d D 6.53 93/06/07 11:21:55 eric 106 105
c "For Sendmail Version 8.1"
e
s 00002/00002/06308
d D 6.52 93/06/05 16:34:52 bostic 105 104
c new doc.mk; document numbering changes for 4.4BSD
e
s 00018/00004/06292
d D 6.51 93/06/05 08:05:25 eric 104 103
c add 'l' option to enable Errors-To: header
e
s 00001/00001/06295
d D 6.50 93/06/01 21:05:24 eric 103 102
c fix troff botch
e
s 00001/00001/06295
d D 6.49 93/05/31 18:20:44 eric 102 101
c fix Privacy Flags example (Ob => Op)
e
s 00117/00065/06179
d D 6.48 93/05/31 13:52:53 eric 101 100
c clarification of some points and correction of typos
e
s 00007/00008/06237
d D 6.47 93/05/22 10:17:45 eric 100 99
c update for 6.60
e
s 00002/00002/06243
d D 6.46 93/05/11 08:37:32 eric 99 98
c *file* mailer flags changed
e
s 00001/00000/06244
d D 6.45 93/05/07 08:56:57 eric 98 97
c add ListenQueueLength daemon option keyword
e
s 00182/00093/06062
d D 6.44 93/05/06 14:06:15 eric 97 96
c document O8 => O7 change, j (MIME Encapsulation) option, expanded A option
e
s 00055/00028/06100
d D 6.43 93/04/29 20:34:25 eric 96 95
c document b and g mailer flags
e
s 00045/00024/06083
d D 6.42 93/04/29 19:47:14 eric 95 94
c 6.55 features; list of contributors
e
s 00011/00000/06096
d D 6.41 93/04/15 18:11:20 eric 94 93
c B line in qf file
e
s 00007/00001/06089
d D 6.40 93/04/14 14:43:32 eric 93 92
c add fifth parameter to *_map_lookup
e
s 00076/00028/06014
d D 6.39 93/04/14 09:19:49 eric 92 91
c document multiple hostnames on IPC $@ clause and IDENTPROTO
c compile flag
e
s 00001/00001/06041
d D 6.38 93/04/12 15:09:18 eric 91 90
c fix documentation of -f in map specifications
e
s 00009/00005/06033
d D 6.37 93/04/10 16:44:27 eric 90 89
c clarify what IDENT does -- and does not -- do
e
s 00088/00039/05950
d D 6.36 93/04/10 09:54:11 eric 89 88
c document IDENT, including limitations
e
s 00065/00036/05924
d D 6.35 93/04/10 09:36:14 eric 88 87
c document $&x
e
s 00048/00025/05912
d D 6.34 93/04/04 15:43:27 eric 87 86
c document $_ and Directory=
e
s 00045/00023/05892
d D 6.33 93/03/29 17:26:56 eric 86 85
c add O and V options
e
s 00014/00008/05901
d D 6.32 93/03/26 08:22:41 eric 85 84
c $~ reverts to only matching one wor
e
s 00011/00000/05898
d D 6.31 93/03/25 14:39:34 eric 84 83
c add multi-word classes to the V6 CHANGES section
e
s 00009/00010/05889
d D 6.30 93/03/25 14:26:48 eric 83 82
c classes can be multiple words
e
s 00043/00001/05856
d D 6.29 93/03/25 14:21:49 eric 82 81
c dequote map class
e
s 00011/00004/05846
d D 6.28 93/03/23 16:24:05 eric 81 80
c use NETINET instead of DAEMON to compile in internet support
e
s 00010/00001/05840
d D 6.27 93/03/19 13:20:50 eric 80 79
c document F line in qf file
e
s 00046/00025/05795
d D 6.26 93/03/19 13:18:30 eric 79 78
c document enhanced T option
e
s 00009/00006/05811
d D 6.25 93/03/18 19:46:44 eric 78 77
c document new longer queue ids
e
s 00013/00018/05804
d D 6.24 93/03/16 12:28:46 eric 77 76
c delete $<
e
s 00022/00012/05800
d D 6.23 93/03/08 18:55:03 eric 76 75
c clarify use of $@ in local address resolution
e
s 00050/00026/05762
d D 6.22 93/03/05 07:26:26 eric 75 74
c miscellaneous updates
e
s 00196/00161/05592
d D 6.21 93/03/02 13:42:11 eric 74 73
c add documentation of EHLO and [host] and general MX background;
c should add info regarding SMTP
e
s 00045/00014/05708
d D 6.20 93/02/28 19:58:38 eric 73 72
c document modifiers on -q flag
e
s 00037/00020/05685
d D 6.19 93/02/28 08:45:30 eric 72 71
c add restrictmailq flag
e
s 00042/00023/05663
d D 6.18 93/02/24 09:19:24 eric 71 70
c add $@ on LHS; change "Release" to "Version" in several places
e
s 00065/00106/05621
d D 6.17 93/02/24 05:42:54 eric 70 69
c delete T line; delete Arpa_*err configuration; propagate list
c owner information into envelope sender address
e
s 00146/00065/05581
d D 6.16 93/02/21 14:37:57 eric 69 68
c read-over pass
e
s 00220/00125/05426
d D 6.15 93/02/21 12:51:56 eric 68 67
c document V4 config, generalized read timeout option, and MAXIPADDR
e
s 00171/00077/05380
d D 6.14 93/02/20 15:05:59 eric 67 66
c document privacy and min-free options, HASSTATFS, and split
c VRFY/EXPN processing
e
s 00020/00003/05437
d D 6.13 93/02/19 17:29:48 eric 66 65
c document HASUNAME and HASINITGROUPS
e
s 00084/00034/05356
d D 6.12 93/02/19 16:36:08 eric 65 64
c add "c" mailer flag; add acknowledgements; miscellaneous cleanup
e
s 00061/00037/05329
d D 6.11 93/02/16 18:30:51 eric 64 63
c clean up log levels; allow IDA-style split header/envelope rewriting
e
s 00063/00059/05303
d D 6.10 93/02/14 15:08:44 eric 63 62
c some clarification; delete w option
e
s 00002/00001/05360
d D 6.9 93/01/23 08:17:09 eric 62 61
c make wording regarding lockf() more polite
e
s 00018/00016/05343
d D 6.8 93/01/21 15:19:56 eric 61 60
c fix/clarify some points
e
s 00001/00000/05358
d D 6.7 93/01/20 13:18:10 eric 60 59
c *really* define $k
e
s 00013/00007/05345
d D 6.6 93/01/20 13:12:19 eric 59 58
c document $k and $=k
e
s 00019/00016/05333
d D 6.5 93/01/18 14:41:05 eric 58 57
c use full domain names as appropriate; clarify some sections
e
s 00042/00016/05307
d D 6.4 93/01/10 13:23:15 eric 57 56
c changes in checkcompat; document MX piggybacking
e
s 00137/00031/05186
d D 6.3 93/01/09 14:46:08 eric 56 55
c tuning of queueing functions as recommended by John Gardiner Myers
c <jgm+@CMU.EDU>; return mail headers (no body) on messages with negative
c precedence
e
s 00021/00000/05196
d D 6.2 93/01/02 14:22:23 eric 55 54
c add new builtin mailers (*file* and *include*)
e
s 00000/00000/05196
d D 6.1 92/12/21 16:07:01 eric 54 53
c Release 6
e
s 00884/00840/04312
d D 5.25 92/12/21 16:06:27 eric 53 52
c more reorg -- don't put everything in the appendix
e
s 00026/00007/05126
d D 5.24 92/12/18 13:14:50 eric 52 51
c describe NIS class maps
e
s 00041/00002/05092
d D 5.23 92/12/18 09:49:15 eric 51 50
c document change in I option
e
s 01510/01310/03584
d D 5.22 92/12/16 17:12:11 eric 50 49
c updates for pre-6.1
e
s 00071/00000/04823
d D 5.21 92/11/16 08:48:34 eric 49 48
c add descriptions of built-in key maps
e
s 00178/00116/04645
d D 5.20 92/07/20 10:19:33 eric 48 47
c more cleanup for alpha release; still needs more, I'm afraid
e
s 01345/00739/03416
d D 5.19 92/07/20 09:52:57 eric 47 46
c a variety of changes for 4.4bsd alpha
e
s 00107/00000/04048
d D 5.18 91/12/21 10:04:52 eric 46 45
c include some documentation of udb
e
s 00177/00094/03871
d D 5.17 91/12/14 13:26:25 eric 45 44
c comments about the latest round of hacking
e
s 00014/00009/03951
d D 5.16 91/10/03 14:48:09 eric 44 43
c adjustments for compatibility with Sun sendmail
e
s 00012/00012/03948
d D 5.15 91/10/02 13:38:43 eric 43 42
c reverse sense of 'w' option; delete obsolete discussion of
c NO_WILDCARD_MX compilation option.
e
s 00045/00000/03915
d D 5.14 91/07/25 11:10:01 eric 42 41
c document w (wildcard MX) and k (checkpoint interval) options
e
s 00013/00024/03902
d D 5.13 91/04/17 11:39:16 bostic 41 40
c new copyright; att/bsd/shared
e
s 00003/00002/03923
d D 5.12 90/04/23 15:15:28 eric 40 39
c change my affiliation
e
s 00024/00014/03901
d D 5.11 89/01/23 09:46:53 bostic 39 38
c add Berkeley specific copyright
e
s 00223/00348/03692
d D 5.10 89/01/03 21:21:43 phil 38 37
c Changes for 5.61 release.
e
s 00024/00000/04016
d D 5.9 88/09/21 00:16:20 eric 37 36
c document I option to force name server use
e
s 00020/00018/03996
d D 5.8 86/05/09 15:35:30 eric 36 35
c minor editorial cruft
e
s 00127/00068/03887
d D 5.7 86/05/09 15:06:38 eric 35 34
c describe lan{root,leaf} configurations
e
s 00122/00090/03833
d D 5.6 86/05/02 20:03:43 bloom 34 32
c minor rework for rearrangement of dirs and better description of local 
c configuration
e
s 00122/00090/03833
d R 5.6 86/05/02 19:48:58 bloom 33 32
c some rewriting to reflect nameserver and reorganiztaion of directories
e
s 00034/00003/03889
d D 5.5 86/04/04 18:47:14 eric 32 31
c include pic version of diagram
e
s 00017/00013/03875
d D 5.4 86/01/07 16:22:01 eric 31 30
m 
c document E field in qf file, NDBM flag; misc. cleanup
e
s 00109/00117/03779
d D 5.3 85/12/26 16:35:59 eric 30 29
m 
c suggestions from Miriam Amos and general cleanup
e
s 00151/00027/03745
d D 5.2 85/09/21 16:21:36 eric 29 28
m 
c describe new options dealing with queue priority parameters
e
s 00019/00000/03753
d D 5.1 85/09/20 09:06:52 eric 28 27
m 
c updates for version including SMI changes
e
s 00093/00021/03660
d D 4.4 84/12/08 12:59:11 eric 27 26
m 
c Option 'a' now takes an argument, add B, x, and X options; add
c E mailer flag; add $[ and $]; a few editorial changes
e
s 00015/00000/03666
d D 4.3 84/03/11 14:52:18 eric 26 25
m 
c document `N' (home network) option -- defaults to "ARPA"
e
s 00061/00074/03605
d D 4.2 83/07/28 10:53:31 eric 25 24
m 
c Updates to delete "DRAFT" etc. and make more accurate for 4.2
e
s 00000/00000/03679
d D 4.1 83/07/25 19:05:02 eric 24 23
m 
c 4.2 release version
e
s 00000/00011/03679
d D 3.19 83/07/13 10:02:24 eric 23 22
m 
c delete "N" option (max simultaneous SMTP connections)
e
s 00004/00000/03686
d D 3.18 83/02/26 11:52:24 eric 22 21
m 193
c Document logging of queueid <=> message-id correspondence on log level 9
e
s 00008/00000/03678
d D 3.17 83/02/03 10:34:36 eric 21 20
m 160
c Add the $e macro
e
s 00025/00004/03653
d D 3.16 83/02/03 08:14:16 eric 20 19
m 162
m 165
m 168
c Tell about extended classes and the $w flag; tell about extended mailer
c flags; add the Maxsize field to the mailer descriptor
e
s 00128/00083/03529
d D 3.15 83/01/22 16:54:26 eric 19 18
m 
c cleanup for UNICOM -- mostly typesetting stuff and details; single
c space it in troff
e
s 00005/00000/03607
d D 3.14 83/01/17 21:50:59 eric 18 17
m 158
c document the $w macro as the name of this host
e
s 00011/00000/03596
d D 3.13 83/01/16 17:25:32 eric 17 16
m 153
c document the "N" option to set the maximum number of simultaneous SMTP
c connections that can be open at any given time.
e
s 00037/00033/03559
d D 3.12 83/01/16 13:34:11 eric 16 15
m 152
c document new mailer definition format
e
s 00051/00004/03541
d D 3.11 83/01/10 09:45:48 eric 15 14
m 
c talk about the root makefile; mention superuser needs during install
e
s 00015/00000/03530
d D 3.10 83/01/06 18:22:47 eric 14 13
m 
c document "error" mailer
e
s 00027/00009/03503
d D 3.9 83/01/06 16:49:22 eric 13 12
m 
c Add/change mailer flags: R = CRLF mapping, p = reverse-path in
c MAIL command, L = line length limits, X = hidden dot; also, "M" line in
c qf file is now a message for the mailq command.
e
s 00011/00014/03501
d D 3.8 82/12/29 10:22:15 eric 12 11
m 031
c make info about prototype files reflect the truth
e
s 00015/00001/03500
d D 3.7 82/12/15 11:18:20 eric 11 10
m 
c remove some macros so that the index can print
e
s 00041/00002/03460
d D 3.6 82/12/14 17:08:55 eric 10 9
m 105
c Add the -bp flag (mailq command)
e
s 00003/00001/03459
d D 3.5 82/12/09 11:24:18 eric 9 8
m 095
c add $~x syntax to match any word not in a class
e
s 00505/00408/02955
d D 3.4 82/12/06 18:41:45 eric 8 7
m 030
m 058
m 068
m random
c readthrough, major restructuring of op.me, some reality therapy
e
s 00047/00045/03316
d D 3.3 82/11/17 09:25:36 eric 7 6
m 060
c split operation mode (-bx) and delivery mode (option "d")
e
s 00295/00107/03066
d D 3.2 82/11/14 18:33:20 eric 6 5
m 
c basic cleanup, etc.
e
s 00177/00059/02996
d D 3.1 82/11/13 19:40:47 eric 5 4
m 021,066,069,070
c drop VFORK compilation flag; add D option; change -I to -bi and -Z
c to -bz; describe conf.h configuration et al; improve documentation
c of other configuration options.
e
s 00044/00008/03011
d D 1.4 82/11/05 16:55:41 eric 4 3
m 062
c add the -Z flag and the "xf" file; old "xf" file is now the "nf" file.
e
s 00020/00038/02999
d D 1.3 82/11/04 13:25:05 eric 3 2
m 037
c put header conditionals into the .cf file
e
s 00451/00135/02586
d D 1.2 82/11/02 15:30:48 eric 2 1
c edits on plane on the way to Wisconsin.....
e
s 02721/00000/00000
d D 1.1 82/10/24 17:27:27 eric 1 0
c date and time created 82/10/24 17:27:27 by eric
e
u
U
f b 
f i 
t
T
I 39
D 41
.\"
E 41
E 39
I 34
D 162
.\" Copyright (c) 1983 Eric P. Allman
E 162
I 162
.\" Copyright (c) 1983, 1995 Eric P. Allman
E 162
D 39
.\" Berkeley, California
E 39
I 39
D 41
.\" Copyright (c) 1988 The Regents of the University of California.
E 41
I 41
D 111
.\" Copyright (c) 1983 The Regents of the University of California.
E 41
.\" All rights reserved.
E 111
I 111
.\" Copyright (c) 1983, 1993
.\"	The Regents of the University of California.  All rights reserved.
E 111
E 39
.\"
D 39
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
E 39
I 39
D 41
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
E 41
I 41
.\" %sccs.include.redist.roff%
E 41
E 39
.\"
.\"	%W% (Berkeley) %G%
.\"
E 34
I 1
D 19
.ls 2
E 19
I 19
D 30
.if n .ls 2
E 30
I 30
D 47
.\" eqn % | troff -me
.\"if n .ls 2
E 30
E 19
D 34
.he 'Sendmail Installation and Operation Guide''%'
D 25
.fo 'Version %I%'DRAFT'Last Mod %G%'
E 25
I 25
.fo 'Version %I%''Last Mod %G%'
E 34
I 34
.\".he 'Sendmail Installation and Operation Guide''%'
.\".fo 'Version %I%''Last Mod %G%'
E 47
I 47
.\" eqn op.me | pic | troff -me
E 47
D 105
.eh 'SMM:07-%''Sendmail Installation and Operation Guide'
.oh 'Sendmail Installation and Operation Guide''SMM:07-%'
E 105
I 105
.eh 'SMM:08-%''Sendmail Installation and Operation Guide'
.oh 'Sendmail Installation and Operation Guide''SMM:08-%'
E 105
I 47
.\" SD is lib if sendmail is installed in /usr/lib, sbin if in /usr/sbin
.ds SD sbin
I 115
.\" SB is bin if newaliases/mailq are installed in /usr/bin, ucb if in /usr/ucb
.ds SB bin
E 115
E 47
E 34
E 25
.nr si 3n
.de $0
.(x
D 6
.ti (\\$3u-1u)*3n
E 6
I 6
D 8
.in (\\$3u-1u)*3n
E 8
I 8
.in \\$3u*3n
.ti -3n
E 8
E 6
\\$2.  \\$1
.)x
..
I 6
.de $C
.(x
.in 0
\\$1 \\$2.  \\$3
.)x
..
I 114
.sc
E 114
E 6
.+c
.(l C
I 19
.sz 16
.b SENDMAIL
E 19
.sz 12
D 19
.b
SENDMAIL
INSTALLATION AND OPERATION GUIDE
E 19
I 19
.sp
.b "INSTALLATION AND OPERATION GUIDE"
.sz 10
.sp
E 19
.r
D 19
.sz
E 19
Eric Allman
D 40
Britton-Lee, Inc.
E 40
I 40
University of California, Berkeley
Mammoth Project
I 47
eric@CS.Berkeley.EDU
E 47
E 40
I 6
.sp
Version %I%
I 38
.sp
D 47
For Sendmail Version 5.61
E 47
I 47
D 50
For Sendmail Version 5.111
E 50
I 50
D 53
For Sendmail Version 5.133
E 53
I 53
D 56
For Sendmail Version 6.1
E 56
I 56
D 57
For Sendmail Version 6.6
E 57
I 57
D 59
For Sendmail Version 6.7
E 59
I 59
D 64
For Sendmail Version 6.11
E 64
I 64
D 66
For Sendmail Version 6.23
E 66
I 66
D 67
For Sendmail Version 6.24
E 67
I 67
D 68
For Sendmail Version 6.25
E 68
I 68
D 70
For Sendmail Version 6.26
E 70
I 70
D 74
For Sendmail Version 6.27
E 74
I 74
D 76
For Sendmail Version 6.32
E 76
I 76
D 77
For Sendmail Version 6.36
E 77
I 77
D 78
For Sendmail Version 6.37
E 78
I 78
D 80
For Sendmail Version 6.40
E 80
I 80
D 81
For Sendmail Version 6.42
E 81
I 81
D 82
For Sendmail Version 6.43
E 82
I 82
D 83
For Sendmail Version 6.44
E 83
I 83
D 85
For Sendmail Version 6.45
E 85
I 85
D 86
For Sendmail Version 6.46
E 86
I 86
D 87
For Sendmail Version 6.47
E 87
I 87
D 88
For Sendmail Version 6.51
E 88
I 88
D 92
For Sendmail Version 6.52
E 92
I 92
D 95
For Sendmail Version 6.53
E 95
I 95
D 96
For Sendmail Version 6.55
E 96
I 96
D 97
For Sendmail Version 6.56
E 97
I 97
D 100
For Sendmail Version 6.57
E 100
I 100
D 101
For Sendmail Version 6.60
E 101
I 101
D 104
For Sendmail Version 6.62
E 104
I 104
D 106
For Sendmail Version 6.64
E 106
I 106
D 113
For Sendmail Version 8.1
E 113
I 113
D 114
For Sendmail Version 8.2
E 114
I 114
D 118
For Sendmail Version 8.4
E 118
I 118
D 151
For Sendmail Version 8.6
E 151
I 151
For Sendmail Version 8.7
E 151
E 118
E 114
E 113
E 106
E 104
E 101
E 100
E 97
E 96
E 95
E 92
E 88
E 87
E 86
E 85
E 83
E 82
E 81
E 80
E 78
E 77
E 76
E 74
E 70
E 68
E 67
E 66
E 64
E 59
E 57
E 56
E 53
E 50
E 47
E 38
E 6
.)l
D 19
.sp 3
E 19
I 19
D 25
.sp
.(l F
.b NOTE:
.i
This is a working paper, not a specification.
Details of operation of
.r sendmail
may change as necessary
before final release.
.)l
E 25
.sp 2
E 19
.pp
.i Sendmail
D 6
implements a general purpose internetwork mail routing facility.
E 6
I 6
implements a general purpose internetwork mail routing facility
D 155
under the UNIX*
.(f
D 131
*UNIX is a trademark of Bell Laboratories.
E 131
I 131
*UNIX is a trademark of Unix Systems Laboratories.
E 131
.)f
E 155
I 155
under the UNIX\(rg
E 155
operating system.
E 6
It is not tied to any one transport protocol \*-
its function may be likened to a crossbar switch,
relaying messages from one domain into another.
In the process,
it can do a limited amount of message header editing
to put the message into a format that is appropriate
for the receiving domain.
All of this is done under the control of a configuration file.
.pp
Due to the requirements of flexibility
for
.i sendmail ,
the configuration file can seem somewhat unapproachable.
However, there are only a few basic configurations
for most sites,
for which standard configuration files have been supplied.
Most other configurations
can be built by adjusting an existing configuration files
incrementally.
.pp
I 47
.i Sendmail
D 50
is based on the RFC822 Internet Protocol;
most of the RFC1123 modifications are also incorporated.
Differences are described herein.
E 50
I 50
is based on
RFC822 (Internet Mail Format Protocol),
RFC821 (Simple Mail Transport Protocol),
I 74
RFC1123 (Internet Host Requirements),
E 74
and
D 74
RFC1123 (Internet Host Requirements).
E 74
I 74
D 160
RFC1425 (SMTP Service Extensions).
E 160
I 160
RFC1651 (SMTP Service Extensions).
E 160
E 74
However, since
.i sendmail
is designed to work in a wider world,
in many cases it can be configured to exceed these protocols.
These cases are described herein.
E 50
.pp
E 47
Although
.i sendmail
is intended to run
without the need for monitoring,
it has a number of features
that may be used to monitor or adjust the operation
under unusual circumstances.
These features are described.
.pp
Section one describes how to do a basic
.i sendmail
installation.
Section two
D 6
describes the day-to-day information you should know
E 6
I 6
explains the day-to-day information you should know
E 6
to maintain your mail system.
If you have a relatively normal site,
these two sections should contain sufficient information
for you to install
.i sendmail
and keep it happy.
Section three
I 8
describes some parameters that may be safely tweaked.
Section four
has information regarding the command line arguments.
Section five
E 8
contains the nitty-gritty information about the configuration
file.
This section is for masochists
and people who must write their own configuration file.
I 47
Section six
I 134
describes configuration that can be done at compile time.
Section seven
E 134
gives a brief description of differences
in this version of
.i sendmail .
E 47
D 8
Section four
D 6
gives you some parameters that may be safely tweaked.
E 6
I 6
describes some parameters that may be safely tweaked.
E 6
Section five
has information regarding the command line arguments.
E 8
The appendixes give a brief
but detailed explanation of a number of features
not described in the rest of the paper.
I 155
.pp
.b WARNING:
Several major changes were introduced in version 8.7.
You should not attempt to use this document
for prior versions of
.i sendmail .
E 155
I 58
D 114
.bp 5
E 114
I 114
.bp 7
E 114
E 58
I 19
D 47
.pp
The references in this paper are actually found
in the companion paper
.ul
Sendmail \- An Internetwork Mail Router.
This other paper should be read before this manual
to gain a basic understanding
of how the pieces fit together.
I 34
.pn 4
.bp
E 47
E 34
E 19
.sh 1 "BASIC INSTALLATION"
.pp
I 47
D 111
.i
This section is a very rough rewrite;
please don't assume that it is already completely correct.
However,
please send me suggestions so that later versions of this document
can be more accurate.
.pp
E 111
E 47
D 117
There are two basic steps to installing sendmail.
E 117
I 117
There are two basic steps to installing
.i sendmail .
E 117
The hard part is to build the configuration table.
D 117
This is a file that sendmail reads when it starts up
E 117
I 117
This is a file that
.i sendmail
reads when it starts up
E 117
that describes the mailers it knows about,
how to parse addresses,
how to rewrite the message header,
and the settings of various options.
Although the configuration table is quite complex,
a configuration can usually be built
by adjusting an existing off-the-shelf configuration.
The second part is actually doing the installation,
i.e., creating the necessary files, etc.
.pp
D 117
The remainder of this section will describe the installation of sendmail
E 117
I 117
The remainder of this section will describe the installation of
.i sendmail
E 117
assuming you can use one of the existing configurations
and that the standard installation parameters are acceptable.
I 8
All pathnames and examples
are given from the root of the
.i sendmail
D 36
subtree.
E 36
I 36
subtree,
normally
D 47
.i /usr/src/usr.lib/sendmail
E 47
I 47
.i /usr/src/usr.\*(SD/sendmail
E 47
D 111
on 4.3BSD.
E 111
I 111
on 4.4BSD.
E 111
E 36
E 8
D 47
.sh 2 "Off-The-Shelf Configurations"
E 47
.pp
D 38
The configuration files
D 34
are all in the subdirectory
.i cf
E 34
I 34
are all in the subdirectories
.i cf.named
and
.i cf.hosttable
E 38
I 38
D 47
Configuration files currently in use at Berkeley are in
the directory
.i cf
E 38
E 34
of the sendmail directory.
I 38
This directory contains three subdirectories:
.i cf ,
.i m4 ,
and
.i sitedep .
E 38
I 34
The directory
D 38
.i cf.named
contains configuration files that have been tailored for the name server
.i named \|(8).
These are the configuration files currently being used at Berkeley.
The configuration files in
.i cf.hosttable
are some typical ones and the old Berkeley versions from before the name server
was being used.
You should create a symbolic link from
.i cf
to the directory that you are going to use.
I 36
For example,
to use the name server:
.(b
ln \-s cf.named cf
.)b
E 36
E 34
D 12
They are in
E 12
I 12
The ones used at Berkeley are in
E 12
D 19
.i m4 (1)
E 19
I 19
.i m4 \|(1)
E 19
format;
files with names ending
.q .m4
are
.i m4
include files,
while files with names ending
D 8
.q .cf.m4
E 8
I 8
.q .mc
E 8
are the master files.
Files with names ending
E 38
I 38
.i cf/m4
contains site-independent
.i m4 (1)
include files that have information common to all configuration files,
while
.i cf/sitedep
contains
.i m4 (1)
include files that have site-specific information in them.
These files are used by the master configuration (``.mc'')
in
.i cf/cf
and produce standard configuration files (with
E 38
.q .cf
D 38
are the
.i m4
processed versions of the corresponding
D 8
.q .cf.m4
E 8
I 8
.q .mc
E 8
file.
E 38
I 38
suffix) when run through
.i m4 (1).
E 47
I 47
If you are loading this off the tape,
D 142
continue with the next session.
E 142
I 142
continue with the next section.
E 142
If you have a running binary already on your system,
you should probably skip to section 1.2.
.sh 2 "Compiling Sendmail"
E 47
E 38
.pp
D 35
Two off the shelf configuration files are supplied
E 35
I 35
D 47
Three off the shelf configurations are supplied
E 35
to handle the basic cases:
D 8
.i arpa.cf.m4
E 8
I 8
D 12
.i cf/arpa.mc
E 8
for Arpanet sites
E 12
I 12
D 34
.i cf/arpaproto.cf
for Arpanet (TCP) sites
E 34
I 34
D 35
.i cf.hosttable/arpaproto.cf
for Arpanet (TCP) sites not running the name server
E 34
E 12
and
D 8
.i uucp.cf.m4
E 8
I 8
D 12
.i cf/uucp.mc
E 12
I 12
D 34
.i cf/uucpproto.cf
E 34
I 34
.i cf.hosttable/uucpproto.cf
E 34
E 12
E 8
for UUCP sites.
I 12
These are
.i not
in
E 35
I 35
.np
D 38
Arpanet (TCP) sites not running the name server
E 38
I 38
Internet sites running the nameserver
(or using host tables wherein the fully-qualfied domain
name of each host is listed first)
E 38
can use
D 38
.i cf.hosttable/arpaproto.cf .
E 38
I 38
.i cf/tcpproto.cf .
E 38
For simple sites,
you should be able to use this file without modification.
This file is not in
E 35
.i m4
format.
I 35
.np
D 38
UUCP sites can use
.i cf.hosttable/uucpproto.cf .
If your UUCP node name is not the same as your
system name
(as printed by the
.i hostname (1)
command)
you may have to modify the
.b U
macro.
E 38
I 38
UUCP only sites can use
.i cf/uucpproto.cf .
E 38
This file is not in
.i m4
format.
.np
A group of machines at a single site
D 38
connected by an ethernet
E 38
I 38
connected by an ethernet (or other networking
that supports TCP/IP)
E 38
with (only) one host connected to the outside world
via UUCP
is represented by two configuration files:
D 38
.i cf.hosttable/lanroot.mc
E 38
I 38
.i cf/tcpuucpproto.cf
E 38
should be installed on the host with outside connections
and
D 38
.i cf.hosttable/lanleaf.mc
E 38
I 38
.i cf/tcpproto.cf
E 38
should be installed on all other hosts.
D 38
These will require slightly more configuration.
First, in both files the
.b D
macro and
.b D
class must be adjusted to indicate your local domain.
For example,
if your company is known as
.q Muse
you will want to change both of those accordingly.
(As distributed, they are called XXX.)
Second,
in
.i lanleaf.mc
you will have to change the
.b R
macro to the name of the root host,
that is,
the host that runs
.i lanroot.mc .
For example,
they might appear as:
.(b
DDMuse
CDLOCAL Muse
.sp \n(psu
DRErato
.)b
Internally, the root host will be known as
.q Erato.Muse
and other hosts will be known as
.q Thalia.Muse ,
.q Clio.Muse ,
etc.
E 38
.pp
E 35
E 12
D 25
There are two parameters you will have to adjust
in each of these files.
The line beginning
.q DH
D 6
defines the standard name of your host.
E 6
I 6
defines the canonical name of your host.
E 6
The line beginning
.q CH
defines the names that your host might be known by;
it should include the name listed in the
.q DH
D 6
line.
E 6
I 6
line
and any aliases that your host goes by.
E 6
For example, a configuration might include the lines:
E 25
I 25
D 38
The file you need should be copied to a file with the same name
as your system,
e.g.,
E 25
.(b
D 25
DHucsfcgl
CHucsfcgl cgl
E 25
I 25
cp uucpproto.cf ucsfcgl.cf
E 25
.)b
D 25
This would indicate that the
.q standard
name for the host is
.q ucsfcgl
D 6
and that it might be known by the names
E 6
I 6
and that it is known by the names
E 6
.q ucsfcgl
D 6
or
E 6
I 6
and
E 6
.q cgl.
.pp
The changed file should be renamed;
in the above example,
the file might be renamed
D 8
.i ucsfcgl.cf.m4.
E 8
I 8
D 12
.i ucsfcgl.mc.
E 8
To create the actual configuration file,
type the command:
.(b
D 8
m4 ucsfcgl.cf.m4 > ucsfcgl.cf
E 8
I 8
cd cf
m4 ucsfcgl.mc > ucsfcgl.cf
E 8
.)b
using whatever name is appropriate for your site.
The file
.q ucsfcgl.cf
E 12
I 12
.i ucsfcgl.cf.
E 25
This file
E 12
is now ready for installation as
E 38
I 38
Some configuration will be needed in each of the
above cases.
Just be sure to correctly fill in the 
.q blanks
as shown in the instructions in the configuration file.
Then install the file as
E 38
D 6
.i /usr/lib/sendmail.cf.
E 6
I 6
D 15
.i /usr/lib/sendmail.cf :
E 15
I 15
D 45
.i /usr/lib/sendmail.cf .
E 45
I 45
.i /var/sendmail.cf .
E 45
I 38
.pp
If you are running a larger or more complex site, it
is to your advantage to read the
.q README
file in the
.i cf
E 47
I 47
D 117
All sendmail source is in the
E 117
I 117
All
.i sendmail
source is in the
E 117
.i src
E 47
subdirectory.
D 47
This file explains how to use
.i m4 (1)
to automatically create configuration files for
non-standard situations.
E 38
.sh 2 "Installation Using the Makefile"
E 47
I 47
If you are running on a 4.4BSD system,
compile by typing
.q make .
On other systems, you may have to make some other adjustments.
D 155
.sh 3 "Old versions of make"
E 47
.pp
D 47
A makefile exists in the root of the
E 47
I 47
If you are not running the new version of
.b make
you will probably have to use
E 155
I 155
On most systems,
you can do the appropriate compilation by typing
E 155
.(b
D 48
make -f Makefile.dist
E 48
I 48
D 155
make \-f Makefile.dist
E 155
I 155
sh makesendmail
E 155
E 48
.)b
D 155
This file does not assume several new syntaxes,
including the
.q +=
syntax in macro definition
and the
.q ".include"
syntax.
.sh 3 "Compilation flags"
E 155
I 155
This will leave the binary in an appropriately named subdirectory.
It works for multiple object versions
compiled out of the same directory.
D 157
.sh 3 "Tweaking the makefile"
E 157
I 157
.sh 3 "Tweaking the Makefile"
E 157
E 155
.pp
.i Sendmail
D 69
supports three different formats
E 69
I 69
supports two different formats
E 69
D 155
for the
E 155
I 155
for the local (on disk) version of databases,
notably the
E 155
.i aliases
database.
D 155
These formats are:
E 155
I 155
At least one of these should be defined if at all possible.
E 155
I 48
.nr ii 1i
E 48
D 69
.ip DBM
The old, tried and somewhat-true
.i dbm
library from V7.
Try to avoid this.
E 69
.ip NDBM
D 69
A newer version of the above.
E 69
I 69
The ``new DBM'' format,
available on nearly all systems around today.
E 69
This was the preferred format prior to 4.4BSD.
It allows such complex things as multiple databases
and closing a currently open database.
.ip NEWDB
The new database package from Berkeley.
If you have this, use it.
It allows
long records,
multiple open databases,
real in-memory caching,
and so forth.
You can define this in conjunction with one of the other two;
if you do,
old databases are read,
but when a new database is created it will be in NEWDB format.
As a nasty hack,
D 97
if you have both NEWDB and one of the DB formats defined,
I 69
and you also define YPCOMPAT,
E 97
I 97
D 125
if you have NEWDB, NDBM, and YPCOMPAT defined,
E 125
I 125
if you have NEWDB, NDBM, and NIS defined,
E 125
E 97
E 69
D 167
and if the file
.i /var/yp/Makefile
exists and is readable,
E 167
I 167
and if the alias file name includes the substring
.q /yp/ ,
E 167
E 47
.i sendmail
D 47
directory that will do all of these steps
D 34
for a 4.2bsd system.
E 34
I 34
for a 4.3BSD system.
E 34
It may have to be slightly tailored
for use on other systems.
E 47
I 47
will create both new and old versions of the alias file
during a
.i newalias
command.
This is required because the Sun NIS/YP system
reads the DBM version of the alias file.
It's ugly as sin,
but it works.
.lp
D 69
If none of these are defined,
E 69
I 69
If neither of these are defined,
E 69
.i sendmail
reads the alias file into memory on every invocation.
This can be slow and should be avoided.
E 47
D 155
.pp
D 34
Before using this makefile,
you should already have created your configuration file
E 34
I 34
D 47
Before using this makefile, you should create a symbolic link from
.i cf
to the directory containing your configuration files.
You should also have created your configuration file
E 34
and left it in the file
.q cf/\fIsystem\fP.cf
where
.i system
is the name of your system
(i.e., what is returned by
D 19
.i hostname (1)).
E 19
I 19
.i hostname \|(1)).
E 19
If you do not have
.i hostname
you can use the declaration
.q HOST=\fIsystem\fP
on the
D 19
.i make (1)
E 19
I 19
.i make \|(1)
E 19
command line.
I 25
You should also examine the file
.i md/config.m4
and change the
.i m4
macros there to reflect any libraries and compilation flags
you may need.
E 47
I 47
System V based systems can define
SYSTEM5
to make several small adjustments.
This changes the handling of timezones
and uses the much less efficient
.i lockf
call in preference to
.i flock .
These can be specified separately using the compilation flags
SYS5TZ
and
LOCKF
respectively.
I 53
.pp
If you don't have the
.i unsetenv
routine in your system library, define the UNSETENV compilation flag.
.pp
You may also have to define the compilation variable LA_TYPE
to describe how your load average is computed.
D 69
This is described in detail in section 6.1.
E 69
I 69
This and other flags are detailed in section 6.1.
E 155
I 155
There are also several methods for remote database access:
.ip NIS
Sun's Network Information Services (formerly YP).
.ip NISPLUS
Sun's NIS+ services.
.ip NETINFO
NeXT's NetInfo service.
.ip HESIOD
Hesiod service (from Athena).
.lp
Other compilation flags are set in conf.h
and should be predefined for you
unless you are porting to a new environment.
E 155
E 69
E 53
D 50
This flag also
defines
.q index
to mean
.q strchr
and
.q rindex
to mean
.q strrchr .
E 50
.sh 3 "Compilation and installation"
E 47
E 25
.pp
D 47
The basic installation procedure is to type:
E 47
I 47
After making the local system configuration described above,
You should be able to compile and install the system.
D 155
Compilation can be performed using
.q make\**
.(f
\**where you may have to replace
.q make
with
.q "make \-f Makefile.dist"
as appropriate.
.)f
in the
.b sendmail/src
directory.
E 155
I 155
The script
.q makesendmail
is the best approach on most systems:
.(b
sh makesendmail
.)b
This will use
.i uname (1)
to select the correct Makefile for your environment.
.pp
E 155
You may be able to install using
E 47
E 15
.(b
D 15
cp ucsfcgl.cf /usr/lib/sendmail.cf
E 15
I 15
D 47
make
E 47
D 155
make install
E 155
I 155
sh makesendmail install
E 155
I 34
D 47
make installcf
E 47
E 34
E 15
.)b
E 6
D 15
.sh 2 "System Changes"
E 15
I 15
D 47
in the root directory of the
.i sendmail
distribution.
This will make all binaries
and install them in the standard places.
D 34
The second
E 34
I 34
The second and third
E 34
.i make
D 34
command must be executed as the superuser (root).
E 34
I 34
commands must be executed as the superuser (root).
E 34
.sh 2 "Installation by Hand"
E 47
I 47
This should install the binary in
/usr/\*(SD
and create links from
D 115
/usr/bin/newaliases
E 115
I 115
/usr/\*(SB/newaliases
E 115
and
D 115
/usr/bin/mailq
E 115
I 115
/usr/\*(SB/mailq
E 115
to
/usr/\*(SD/sendmail.
D 111
On BSD4.4 systems it will also format and install man pages.
E 111
I 111
On 4.4BSD systems it will also format and install man pages.
E 111
.sh 2 "Configuration Files"
E 47
E 15
.pp
D 47
Along with building a configuration file,
D 6
you will have to install the sendmail startup into your system.
E 6
I 6
D 15
you will have to install the sendmail startup into your UNIX system.
E 15
I 15
you will have to install the
E 47
I 47
.i Sendmail
cannot operate without a configuration file.
D 155
The configuration defines the mail systems understood at this site,
E 155
I 155
The configuration defines the mail delivery mechanisms understood at this site,
E 155
how to access them,
how to forward email to remote mail systems,
and a number of tuning parameters.
This configuration file is detailed
in the later portion of this document.
.pp
The
E 47
.i sendmail
D 47
startup into your UNIX system.
E 15
D 8
If youa re doing this installation
E 8
I 8
If you are doing this installation
E 8
in conjunction with a regular Berkeley UNIX install,
these steps will already be complete.
I 15
Many of these steps will have to be executed as the superuser (root).
E 15
I 8
D 38
.sh 3 "lib/libsys.a"
.pp
The library in lib/libsys.a
contains some routines that should in some sense
be part of the system library.
These are the system logging routines
and the new directory access routines
(if required).
D 34
If you are not running the new 4.2bsd directory code
E 34
I 34
If you are not running the 4.3BSD directory code
E 34
and do not have the compatibility routines installed in your system library,
D 30
you should execute the commands:
E 30
I 30
you should execute the command:
E 30
.(b
D 30
cd lib
make ndir
E 30
I 30
(cd lib; make ndir)
E 30
.)b
D 34
This will compile and install the 4.2 compatibility routines
E 34
I 34
This will compile and install the 4.3 compatibility routines
E 34
in the library.
You should then type:
.(b
D 30
cd lib      # if required
make
E 30
I 30
(cd lib; make)
E 30
.)b
This will recompile and fill the library.
E 38
E 8
.sh 3 "/usr/lib/sendmail"
E 47
I 47
configuration can be daunting at first.
The world is complex,
and the mail configuration reflects that.
The distribution includes an m4-based configuration package
that hides a lot of the complexity.
E 47
.pp
D 47
The binary for sendmail is located in /usr/lib.
D 38
There is a version available in the source directory
that is probably inadequate for your system.
You should plan on recompiling and installing the entire system:
E 38
I 38
If it becomes necessary to recompile and reinstall the
entire system, the following sequence will do it:
E 38
.(b
cd src
D 19
rm -f *.o
E 19
I 19
D 34
rm \-f *.o
E 34
I 34
make clean
E 34
E 19
D 38
make
cp sendmail /usr/lib
I 30
chgrp kmem /usr/lib/sendmail
E 38
I 38
make install
E 38
E 30
I 15
.)b
E 47
I 47
These configuration files are simpler than old versions
largely because the world has become simpler;
in particular,
text-based host files are officially eliminated,
obviating the need to
.q hide
hosts behind a registered internet gateway.
.pp
These files also assume that most of your neighbors
use domain-based UUCP addressing;
that is,
instead of naming hosts as
.q host!user
they will use
.q host.domain!user .
The configuration files can be customized to work around this,
but it is more complex.
.pp
D 159
I haven't tested these yet on an isolated LAN environment
with a single UUCP connection to the outside world.
If you are in such an environment,
please send comments to
D 117
sendmail@okeeffe.CS.Berkeley.EDU.
E 117
I 117
sendmail@CS.Berkeley.EDU.
E 117
.pp
E 159
Our configuration files are processed by
.i m4
to facilitate local customization;
the directory
.i cf
of the
D 117
sendmail
E 117
I 117
.i sendmail
E 117
distribution directory
contains the source files.
This directory contains several subdirectories:
.nr ii 1i
.ip cf
Both site-dependent and site-independent descriptions of hosts.
These can be literal host names
(e.g.,
.q ucbvax.mc )
when the hosts are gateways
or more general descriptions
(such as
.q "tcpproto.mc"
as a general description of an SMTP-connected host
or
.q "uucpproto.mc"
as a general description of a UUCP-connected host).
Files ending
.b \&.mc
(``Master Configuration'')
are the input descriptions;
the output is in the corresponding
.b \&.cf
file.
The general structure of these files is described below.
.ip domain
Site-dependent subdomain descriptions.
These are tied to the way your organization wants to do addressing.
For example,
.b domain/cs.exposed.m4
is our description for hosts in the CS.Berkeley.EDU subdomain
that want their individual hostname to be externally visible;
.b domain/cs.hidden.m4
is the same except that the hostname is hidden
(everything looks like it comes from CS.Berkeley.EDU).
These are referenced using the
.sm DOMAIN
.b m4
macro in the
.b \&.mc
file.
.ip feature
Definitions of specific features that some particular host in your site
might want.
These are referenced using the
.sm FEATURE
.b m4
macro.
I 48
D 63
Example features are
no_wildcard_MX
(which improves performance if you don't have a wildcard MX record
matching your domain)
and
E 63
I 63
An example feature is
E 63
use_cw_file
D 117
(which tells sendmail to read an /etc/sendmail.cw file on startup
E 117
I 117
(which tells
.i sendmail
to read an /etc/sendmail.cw file on startup
E 117
to find the set of local names).
E 48
.ip hack
Local hacks, referenced using the
.sm HACK
.b m4
macro.
Try to avoid these.
The point of having them here is to make it clear that they smell.
.ip m4
Site-independent
.i m4 (1)
include files that have information common to all configuration files.
This can be thought of as a
.q #include
directory.
.ip mailer
Definitions of mailers,
referenced using the
.sm MAILER
.b m4
macro.
I 48
D 160
Defined mailer types in this distribution are
E 160
I 160
The mailer types that are known in this distribution are
E 160
I 74
fax,
E 74
local,
smtp,
D 74
and uucp.
E 74
I 74
uucp,
and usenet.
I 160
For example, to include support for the UUCP-based mailers,
use
.q MAILER(uucp) .
E 160
E 74
E 48
.ip ostype
Definitions describing various operating system environments
(such as the location of support files).
These are referenced using the
.sm OSTYPE
.b m4
macro.
.ip sh
Shell files used by the
.b m4
build process.
You shouldn't have to mess with these.
.ip siteconfig
Local site configuration information,
such as UUCP connectivity.
I 48
They normally contain lists of site information, for example:
.(b
SITE(contessa)
SITE(hoptoad)
SITE(nkainc)
SITE(well)
.)b
They are referenced using the SITECONFIG macro:
.(b
SITECONFIG(site.config.file, name_of_site, X)
.)b
where
.i X
is the macro/class name to use.
It can be U
(indicating locally connected hosts)
or one of W, X, or Y
for up to three remote UUCP hubs.
E 48
.pp
If you are in a new domain
(e.g., a company),
you will probably want to create a
cf/domain
file for your domain.
This consists primarily of relay definitions:
for example, Berkeley's domain definition
defines relays for
BitNET,
CSNET,
and UUCP.
Of these,
only the UUCP relay is particularly specific
to Berkeley.
All of these are internet-style domain names.
Please check to make certain they are reasonable for your domain.
.pp
Subdomains at Berkeley are also represented in the
cf/domain
directory.
For example,
the domain
cs-exposed
is the Computer Science subdomain with the local hostname shown
to other users;
cs-hidden
makes users appear to be from the CS.Berkeley.EDU subdomain
(with no local host information included).
You will probably have to update this directory
to be appropriate for your domain.
I 48
.pp
You will have to use or create
.b \&.mc
files in the
.i cf/cf
subdirectory for your hosts.
This is detailed in the
cf/README
file.
E 48
.sh 2 "Details of Installation Files"
.pp
This subsection describes the files that
comprise the
D 117
sendmail
E 117
I 117
.i sendmail
E 117
installation.
.sh 3 "/usr/\*(SD/sendmail"
.pp
D 117
The binary for sendmail is located in /usr/\*(SD\**.
E 117
I 117
The binary for
.i sendmail
is located in /usr/\*(SD\**.
E 117
.(f
\**This is usually
/usr/sbin
on 4.4BSD and newer systems;
many systems install it in
/usr/lib.
I understand it is in /usr/ucblib
on System V Release 4.
.)f
I 48
It should be setuid root.
For security reasons,
/, /usr, and /usr/\*(SD
should be owned by root, mode 755\**.
.(f
\**Some vendors ship them owned by bin;
this creates a security hole that is not actually related to
.i sendmail .
Other important directories that should have restrictive ownerships
and permissions are
/bin, /usr/bin, /etc, /usr/etc, /lib, and /usr/lib.
.)f
E 48
E 47
D 45
.sh 3 "/usr/lib/sendmail.cf"
E 45
I 45
.sh 3 "/etc/sendmail.cf"
E 45
.pp
D 47
The configuration file
that you created earlier
D 45
should be installed in /usr/lib/sendmail.cf:
E 45
I 45
should be installed in /etc/sendmail.cf:
E 45
.(b
D 45
cp cf/\fIsystem\fP.cf /usr/lib/sendmail.cf
E 45
I 45
cp cf/\fIsystem\fP.cf /etc/sendmail.cf
E 45
E 15
.)b
E 47
I 47
D 117
This is the configuration file for sendmail.
E 117
I 117
This is the configuration file for
D 155
.i sendmail .
E 117
D 121
This and the frozen configuration file
D 117
are the only two non-library file names compiled into sendmail\**.
E 117
I 117
are the only two non-library file names compiled into
E 121
I 121
This is the only non-library file name compiled into
E 155
E 121
.i sendmail \**.
E 117
.(f
I 155
\**Actually, the pathname varies depending on the operating system;
/etc is the preferred directory.
Some older systems install it in
.b /usr/lib/sendmail.cf ,
and I've also seen it in
.b /usr/ucblib
and
.b /etc/mail .
If you want to move this file,
change
.i src/conf.h .
.)f
This and /etc/sendmail.pid
are the only non-library file names compiled into
.i sendmail \**.
.(f
E 155
\**The system libraries can reference other files;
in particular, system library subroutines that
D 117
sendmail
E 117
I 117
.i sendmail
E 117
calls probably reference
.i /etc/passwd
and
.i /etc/resolv.conf .
.)f
D 155
Some older systems install it in
.b /usr/lib/sendmail.cf .
E 155
.pp
D 155
If you want to move this file,
change
.i src/pathnames.h .
.pp
E 155
The configuration file is normally created
using the distribution files described above.
If you have a particularly unusual system configuration
you may need to create a special version.
The format of this file is detailed in later sections
of this document.
E 47
I 8
D 115
.sh 3 "/usr/ucb/newaliases"
E 115
I 115
.sh 3 "/usr/\*(SB/newaliases"
E 115
.pp
D 139
If you are running delivermail,
it is critical that the
E 139
I 139
The
E 139
.i newaliases
D 139
command be replaced.
This can just be a link to
E 139
I 139
command should just be a link to
E 139
.i sendmail :
.(b
D 19
rm -f /usr/ucb/newaliases
E 19
I 19
D 115
rm \-f /usr/ucb/newaliases
E 19
D 47
ln /usr/lib/sendmail /usr/ucb/newaliases
E 47
I 47
ln /usr/\*(SD/sendmail /usr/ucb/newaliases
E 115
I 115
rm \-f /usr/\*(SB/newaliases
D 139
ln /usr/\*(SD/sendmail /usr/\*(SB/newaliases
E 139
I 139
ln \-s /usr/\*(SD/sendmail /usr/\*(SB/newaliases
E 139
E 115
E 47
.)b
I 47
This can be installed in whatever search path you prefer
for your system.
E 47
E 8
D 27
.sh 3 "/usr/lib/sendmail.cf"
.pp
The configuration file must be installed in /usr/lib.
This is described above.
E 27
E 6
D 45
.sh 3 "/usr/spool/mqueue"
E 45
I 45
.sh 3 "/var/spool/mqueue"
E 45
.pp
The directory
D 45
.i /usr/spool/mqueue
E 45
I 45
.i /var/spool/mqueue
E 45
should be created to hold the mail queue.
D 38
This directory should be mode 777
unless
.i sendmail
is run setuid,
when
.i mqueue
should be owned by the sendmail owner
and mode 755.
E 38
I 38
D 48
This directory should be mode 755
E 48
I 48
This directory should be mode 700
E 48
and owned by root.
I 47
.pp
The actual path of this directory
is defined in the
.b Q
option of the
.i sendmail.cf
file.
E 47
E 38
I 6
D 45
.sh 3 "/usr/lib/aliases*"
E 45
I 45
.sh 3 "/etc/aliases*"
E 45
.pp
D 47
The system aliases are held in three files.
The file
D 45
.q /usr/lib/aliases
E 45
I 45
.q /etc/aliases
E 45
is the master copy.
E 47
I 47
The system aliases are held in
.q /etc/aliases .
E 47
A sample is given in
.q lib/aliases
which includes some aliases which
.i must
be defined:
.(b
D 45
cp lib/aliases /usr/lib/aliases
E 45
I 45
cp lib/aliases /etc/aliases
I 47
.i "edit /etc/aliases"
E 47
E 45
.)b
You should extend this file with any aliases that are apropos to your system.
.pp
Normally
.i sendmail
looks at a version of these files maintained by the
D 19
.i dbm (3)
E 19
I 19
.i dbm \|(3)
I 50
or
.i db \|(3)
E 50
E 19
routines.
D 50
These are stored in
E 50
I 50
These are stored either in
E 50
D 45
.q /usr/lib/aliases.dir
E 45
I 45
.q /etc/aliases.dir
E 45
and
D 45
.q /usr/lib/aliases.pag.
E 45
I 45
D 47
.q /etc/aliases.pag.
E 47
I 47
.q /etc/aliases.pag
D 50
(unless you are using the new Berkeley database routines,
in which case they are stored in the single file
.q /etc/aliases.db ).
E 50
I 50
or
.q /etc/aliases.db
depending on which database package you are using.
E 50
E 47
E 45
These can initially be created as empty files,
but they will have to be initialized promptly.
D 38
These should be mode 666 if you are running a reasonably relaxed system:
E 38
I 38
These should be mode 644:
E 38
.(b
D 45
cp /dev/null /usr/lib/aliases.dir
cp /dev/null /usr/lib/aliases.pag
D 38
chmod 666 /usr/lib/aliases.*
E 38
I 38
chmod 644 /usr/lib/aliases.*
E 45
I 45
cp /dev/null /etc/aliases.dir
cp /dev/null /etc/aliases.pag
chmod 644 /etc/aliases.*
E 45
E 38
D 10
/usr/lib/sendmail -bi
E 10
I 10
D 19
/usr/lib/sendmail \-bi
E 19
I 19
newaliases
E 19
E 10
.)b
I 50
The
.i db
routines preset the mode reasonably,
so this step can be skipped.
E 50
I 47
The actual path of this file
is defined in the
.b A
option of the
.i sendmail.cf
file.
E 47
D 45
.sh 3 "/usr/lib/sendmail.fc"
E 45
I 45
D 121
.sh 3 "/etc/sendmail.fc"
E 45
.pp
If you intend to install the frozen version of the configuration file
(for quick startup)
D 45
you should create the file /usr/lib/sendmail.fc
E 45
I 45
you should create the file /etc/sendmail.fc
E 45
and initialize it.
This step may be safely skipped.
.(b
D 45
cp /dev/null /usr/lib/sendmail.fc
D 10
/usr/lib/sendmail -bz
E 10
I 10
/usr/lib/sendmail \-bz
E 45
I 45
cp /dev/null /etc/sendmail.fc
D 48
/etc/sendmail \-bz
E 48
I 48
chmod 644 /etc/sendmail.fc
/usr/\*(SD/sendmail \-bz
E 48
E 45
E 10
.)b
I 50
In general, freeze files are not worth doing
unless your disks are much faster than your CPU;
this is seldom true any more.
I 101
.pp
If your
.i sendmail
was not compiled with
.sm FROZENCONFIG
defined, the
.b \-bz
flag will be ignored.
E 121
E 101
E 50
E 6
.sh 3 "/etc/rc"
.pp
D 117
It will be necessary to start up the sendmail daemon when your system reboots.
E 117
I 117
It will be necessary to start up the
.i sendmail
daemon when your system reboots.
E 117
This daemon performs two functions:
it listens on the SMTP socket for connections
(to receive mail from a remote system)
and it processes the queue periodically
to insure that mail gets delivered when hosts come up.
.pp
Add the following lines to
D 6
.i /etc/rc
E 6
I 6
.q /etc/rc
E 6
(or
D 6
.i /etc/rc.local
E 6
I 6
.q /etc/rc.local
E 6
as appropriate)
in the area where it is starting up the daemons:
.(b
D 47
if [ \-f /usr/lib/sendmail ]; then
E 47
I 47
D 48
if [ \-f /usr/\*(SD/sendmail -a -f /etc/sendmail.cf ]; then
E 48
I 48
if [ \-f /usr/\*(SD/sendmail \-a \-f /etc/sendmail.cf ]; then
E 48
E 47
D 25
	(cd /usr/spool/mqueue; rm \-f lf*)
	/usr/lib/sendmail \-bd \-q10m &
E 25
I 25
D 45
	(cd /usr/spool/mqueue; rm \-f [lnx]f*)
E 45
I 45
	(cd /var/spool/mqueue; rm \-f [lnx]f*)
E 45
D 47
	/usr/lib/sendmail \-bd \-q30m &
E 47
I 47
	/usr/\*(SD/sendmail \-bd \-q30m &
E 47
E 25
	echo \-n ' sendmail' >/dev/console
fi
.)b
The
.q cd
and
.q rm
commands insure that all lock files have been removed;
extraneous lock files may be left around
if the system goes down in the middle of processing a message.
The line that actually invokes
.i sendmail
has two flags:
.q \-bd
causes it to listen on the SMTP port,
and
D 25
.q \-q10m
causes it to run the queue every ten minutes.
E 25
I 25
.q \-q30m
causes it to run the queue every half hour.
E 25
D 6
.sh 3 "Installing syslog"
E 6
.pp
I 101
Some people use a more complex startup script,
removing zero length qf files and df files for which there is no qf file.
D 155
For example:
.(b
E 155
I 155
For example, see Figure 1
for an example of a complex startup script.
.(z
.hl
E 155
# remove zero length qf files
for qffile in qf*
do
	if [ \-r $qffile ]
	then
		if [ ! \-s $qffile ]
		then
			echo \-n " <zero: $qffile>" > /dev/console
			rm \-f $qffile
		fi
	fi
done
# rename tf files to be qf if the qf does not exist
for tffile in tf*
do
	qffile=`echo $tffile | sed 's/t/q/'`
	if [ \-r $tffile \-a ! \-f $qffile ]
	then
		echo \-n " <recovering: $tffile>" > /dev/console
		mv $tffile $qffile
	else
		echo \-n " <extra: $tffile>" > /dev/console
		rm \-f $tffile
	fi
done
D 118
# remove bogus qf files
E 118
I 118
# remove df files with no corresponding qf files
E 118
for dffile in df*
do
	qffile=`echo $dffile | sed 's/d/q/'`
	if [ \-r $dffile \-a ! \-f $qffile ]
	then
		echo \-n " <incomplete: $dffile>" > /dev/console
D 118
		rm \-f $dffile
E 118
I 118
		mv $dffile `echo $dffile | sed 's/d/D/'`
E 118
	fi
done
D 118
fi
E 118
I 118
# announce files that have been saved during disaster recovery
for xffile in [A-Z]f*
do
	echo \-n " <panic: $xffile>" > /dev/console
done
E 118
D 155
.)b
E 155
I 155
.sp
.ce
Figure 1 \(em A complex startup script
.hl
.)z
E 155
.pp
E 101
I 6
If you are not running a version of UNIX
that supports Berkeley TCP/IP,
do not include the
.b \-bd
flag.
.sh 3 "/usr/lib/sendmail.hf"
.pp
This is the help file used by the SMTP
.b HELP
command.
It should be copied from
.q lib/sendmail.hf :
.(b
cp lib/sendmail.hf /usr/lib
.)b
I 47
The actual path of this file
is defined in the
.b H
option of the
.i sendmail.cf
file.
E 47
D 45
.sh 3 "/usr/lib/sendmail.st"
E 45
I 45
.sh 3 "/etc/sendmail.st"
E 45
.pp
If you wish to collect statistics
about your mail traffic,
you should create the file
D 8
.q /usr/lib/sendmail.st.
E 8
I 8
D 45
.q /usr/lib/sendmail.st :
E 45
I 45
.q /etc/sendmail.st :
E 45
.(b
D 45
cp /dev/null /usr/lib/sendmail.st
chmod 666 /usr/lib/sendmail.st
E 45
I 45
cp /dev/null /etc/sendmail.st
chmod 666 /etc/sendmail.st
E 45
.)b
E 8
This file does not grow.
It is printed with the program
D 47
.q aux/mailstats.
E 47
I 47
.q mailstats/mailstats.c.
The actual path of this file
is defined in the
.b S
option of the
.i sendmail.cf
file.
E 47
D 30
.sh 3 "/etc/syslog"
.pp
E 6
You may want to run the
.i syslog
program
(to collect log information about sendmail).
This program normally resides in
.i /etc/syslog,
with support files
.i /etc/syslog.conf
and
.i /etc/syslog.pid .
The program is located in the
.i aux
subdirectory of the
.i sendmail
distribution.
The file
.i /etc/syslog.conf
describes the file(s) that sendmail will log in.
For a complete description of syslog,
see the manual page for
D 19
.i syslog (8)
E 19
I 19
.i syslog \|(8)
E 19
(located in
.i sendmail/doc
on the distribution).
E 30
I 10
D 115
.sh 3 "/usr/ucb/newaliases"
E 115
I 115
D 155
.sh 3 "/usr/\*(SB/newaliases"
E 115
.pp
If
.i sendmail
is invoked as
.q newaliases,
it will simulate the
.b \-bi
flag
(i.e., will rebuild the alias database;
see below).
D 47
This should be a link to /usr/lib/sendmail.
E 47
I 47
This should be a link to /usr/\*(SD/sendmail.
E 155
E 47
D 115
.sh 3 "/usr/ucb/mailq"
E 115
I 115
.sh 3 "/usr/\*(SB/mailq"
E 115
.pp
If
.i sendmail
is invoked as
.q mailq,
it will simulate the
.b \-bp
flag
(i.e.,
.i sendmail
will print the contents of the mail queue;
see below).
D 47
This should be a link to /usr/lib/sendmail.
E 47
I 47
This should be a link to /usr/\*(SD/sendmail.
E 47
E 10
.sh 1 "NORMAL OPERATIONS"
I 4
D 65
.sh 2 "Quick Configuration Startup"
E 65
I 65
D 121
.sh 2 "``Quick'' Configuration Startup"
E 65
.pp
D 65
A fast version of the configuration file
may be set up by using the
E 65
I 65
D 75
A precompiled (``frozen'') version of the configuration file
E 75
I 75
if the
.sm FROZENCONFIG
option is included during compilation,
a precompiled (``frozen'') version of the configuration file
E 75
can be created using the
E 65
D 5
.b \-Z
E 5
I 5
.b \-bz
E 5
D 65
flag:
E 65
I 65
flag.
This is really only worthwhile doing
if you are on a slow processor with a relatively fast I/O system
(a VAX 11/750 is a good example).
Since it creates other problems,
I recommend against using the frozen configuration
on most current architectures.
.pp
To create the freeze file, use
E 65
.(b
D 5
/usr/lib/sendmail \-Z
E 5
I 5
D 47
/usr/lib/sendmail \-bz
E 47
I 47
/usr/\*(SD/sendmail \-bz
E 47
E 5
.)b
D 65
This creates the file
D 5
.i /usr/lib/sendmail.fc .
E 5
I 5
D 45
.i /usr/lib/sendmail.fc
E 45
I 45
.i /etc/sendmail.fc
E 45
(\c
D 6
.q "frozen configuration."
E 6
I 6
.q "frozen configuration" ).
E 65
I 65
This creates the frozen configuration file
.i /etc/sendmail.fc .
E 65
E 6
E 5
This file is an image of
.i sendmail 's
data space after reading in the configuration file.
If this file exists,
it is used instead of
D 45
.i /usr/lib/sendmail.cf
E 45
I 45
.i /etc/sendmail.cf
E 45
D 6
and must be rebuilt every time
E 6
I 6
.i sendmail.fc
must be rebuilt manually every time
E 6
.i sendmail.cf
is changed.
.pp
D 6
This file will be ignored
E 6
I 6
The frozen configuration file will be ignored
E 6
if a
.b \-C
flag is specified
D 117
or if sendmail detects that it is out of date.
E 117
I 117
or if
.i sendmail
detects that it is out of date.
E 117
However, the heuristics are not strong
so this should not be trusted.
E 121
E 4
.sh 2 "The System Log"
.pp
The system log is supported by the
D 19
.i syslog (8)
E 19
I 19
D 30
.i syslog \|(8)
E 30
I 30
.i syslogd \|(8)
E 30
E 19
program.
I 140
All messages from
.i sendmail
are logged under the
.sm LOG_MAIL
D 155
facility.
E 155
I 155
facility\**.
.(f
\**Except on Ultrix,
which does not support facilities in the syslog.
.)f
E 155
E 140
.sh 3 "Format"
.pp
Each line in the system log
consists of a timestamp,
the name of the machine that generated it
(for logging from several machines
D 38
over the ethernet),
E 38
I 38
over the local area network),
E 38
the word
.q sendmail: ,
D 155
and a message.
E 155
I 155
and a message\**.
.(f
\**This format may vary slightly if your vendor has changed
the syntax.
.)f
Most messages are a sequence of
.i name \c
=\c
.i value
pairs.
.pp
The two most common lines are logged when a message is processed.
The first logs the receipt of a message;
there will be exactly one of these per message.
Some fields may be omitted if they do not contain interesting information.
Fields are:
.ip from
The envelope sender address.
.ip size
The size of the message in bytes.
.ip class
The class (i.e., numeric precedence) of the message.
.ip pri
The initial message priority (used for queue sorting).
.ip nrcpts
The number of envelope recipients for this message
(after aliasing and forwarding).
.ip msgid
The message id of the message (from the header).
.ip proto
The protocol used to receive this message (e.g., ESMTP or UUCP)
.ip relay
The machine from which it was received.
.lp
There is also one line logged per delivery attempt
(so there can be several per message if delivery is deferred
or there are multiple recipients).
Fields are:
.ip to
A comma-separated list of the recipients to this mailer.
.ip ctladdr
The ``controlling user'', that is, the name of the user
whose credentials we use for delivery.
.ip delay
The total delay between the time this message was received
and the time it was delivered.
.ip xdelay
The amount of time needed in this delivery attempt
(normally indicative of the speed of the connection).
.ip mailer
The name of the mailer used to deliver to this recipient.
.ip relay
The name of the host that actually accepted (or rejected) this recipient.
.ip stat
The delivery status.
.lp
Not all fields are present in all messages;
for example, the relay is not listed for local deliveries.
E 155
.sh 3 "Levels"
.pp
D 6
The level of logging can be set for sendmail.
The default using a standard configuration table is level 9.
The levels are as follows:
.ip 0
No logging.
.ip 1
Major problems only.
.ip 2
Message collections and failed deliveries.
.ip 3
Successful deliveries.
.ip 4
Messages being defered
(due to a host being down, etc.).
.ip 5
Normal message queueups.
.ip 6
Unusual but benign incidents,
e.g.,
trying to process a locked queue file.
.ip 12
Several messages that are basically only of interest
when debugging.
.ip 16
Verbose information regarding the queue.
E 6
I 6
If you have
D 19
.i syslog (8)
E 19
I 19
D 30
.i syslog \|(8)
E 30
I 30
.i syslogd \|(8)
E 30
E 19
or an equivalent installed,
you will be able to do logging.
There is a large amount of information that can be logged.
The log is arranged as a succession of levels.
At the lowest level
only extremely strange situations are logged.
At the highest level,
even the most mundane and uninteresting events
are recorded for posterity.
As a convention,
log levels under ten
D 64
are considered
E 64
I 64
are considered generally
E 64
.q useful;
D 64
log levels above ten
are usually for debugging purposes.
E 64
I 64
log levels above 64
are reserved for debugging purposes.
Levels from 11\-64 are reserved for verbose information
that some sites might want.
E 64
.pp
A complete description of the log levels
D 30
is given in section 4.3.
E 30
I 30
D 155
is given in section 4.6.
E 155
I 155
is given in section
.\" XREF
4.6.
I 157
.sh 2 "Dumping State"
.pp
You can ask
.i sendmail
to log a dump of the open files
and the connection cache
by sending it a
.sm SIGUSR1
signal.
The results are logged at
.sm LOG_DEBUG
priority.
E 157
E 155
E 30
E 6
.sh 2 "The Mail Queue"
.pp
D 157
The mail queue should be processed transparently.
E 157
I 157
Sometimes a host cannot handle a message immediately.
For example, it may be down or overloaded, causing it to refuse connections.
The sending host is then expected to save this message in
its mail queue
and attempt to deliver it later.
.pp
Under normal conditions the mail queue will be processed transparently.
E 157
However, you may find that manual intervention is sometimes necessary.
For example,
if a major host is down for a period of time
the queue may become clogged.
D 117
Although sendmail ought to recover gracefully when the host comes up,
E 117
I 117
Although
.i sendmail
ought to recover gracefully when the host comes up,
E 117
you may find performance unacceptably bad in the meantime.
I 10
.sh 3 "Printing the queue"
.pp
The contents of the queue can be printed
using the
I 19
.i mailq
command
(or by specifying the
E 19
.b \-bp
D 19
flag:
E 19
I 19
D 117
flag to sendmail):
E 117
I 117
flag to
.i sendmail ):
E 117
E 19
.(b
D 19
/usr/lib/sendmail -bp
E 19
I 19
mailq
E 19
.)b
This will produce a listing of the queue id's,
the size of the message,
the date the message entered the queue,
and the sender and recipients.
E 10
D 50
.sh 3 "Format of queue files"
.pp
All queue files have the form
D 19
\fIx\fP\fBf\fP\fIA99999\fP
E 19
I 19
\fIx\fP\|\fBf\fP\fIAA99999\fP
E 19
where
D 19
.i A99999
E 19
I 19
.i AA99999
E 19
is the
.i id
for this file
and the
.i x
is a type.
The types are:
I 48
.nr ii 0.5i
E 48
D 4
.ip q
The queue control file.
This file contains the information necessary to process the job.
E 4
.ip d
The data file.
The message body (excluding the header) is kept in this file.
.ip l
The lock file.
If this file exists,
the job is currently being processed,
and a queue run will not process the file.
For that reason,
an extraneous
.b lf
file can cause a job to apparently disappear
(it will not even time out!).
I 47
[Actually, this file is obsolete on most systems that support the
.b flock
or
.b lockf
system calls.]
E 47
I 4
.ip n
This file is created when an id is being created.
It is a separate file to insure that no mail can ever be destroyed
due to a race condition.
It should exist for no more than a few milliseconds
at any given time.
I 47
[This is only used on old versions of
sendmail;
it is not used 
on newer versions.]
E 47
.ip q
The queue control file.
This file contains the information necessary to process the job.
E 4
.ip t
A temporary file.
These are an image of the
.b qf
file when it is being rebuilt.
It should be renamed to a
.b qf
file very quickly.
.ip x
D 4
This file is created when an id is being created.
It is a separate file to insure that no mail can ever be destroyed
due to a race condition.
It should exist for no more than a few milliseconds
at any given time.
E 4
I 4
A transcript file,
existing during the life of a session
showing everything that happens
during that session.
E 4
.pp
The
.b qf
file is structured as a series of lines
each beginning with a code letter.
The lines are as follows:
.ip D
The name of the data file.
There may only be one of these lines.
.ip H
A header definition.
There may be any number of these lines.
The order is important:
they represent the order in the final message.
These use the same syntax
as header definitions in the configuration file.
I 47
.ip C
The controlling address.
Recipient addresses following this line
will be flagged as having resulted from an alias of this name.
This affect the actual UNIX user id used for delivery.
E 47
.ip R
A recipient address.
This will normally be completely aliased,
but is actually realiased when the job is processed.
There will be one line
for each recipient.
.ip S
The sender address.
There may only be one of these lines.
I 31
.ip E
An error address.
If any such lines exist,
they represent the addresses that should receive error messages.
E 31
.ip T
The job creation time.
This is used to compute when to time out the job.
D 8
.ip C
The message class.
Unlike the priority,
this is not dependent
on the size of the message
or the time in the queue.
This is filled in directly
from the
.i Precedence:
header field in the message.
E 8
.ip P
The current message priority.
This is used to order the queue.
Higher numbers mean lower priorities.
D 25
The priority drops
E 25
I 25
D 30
The priority increases
E 30
I 30
The priority changes
E 30
E 25
as the message sits in the queue.
The initial priority depends on the message class
and the size of the message.
.ip M
D 13
Macro definition.
In certain cases,
it is necessary to pass a macro definition
through from the queue creation
to the queue run.
E 13
I 13
A message.
This line is printed by the
.i mailq
command,
and is generally used to store status information.
It can contain any text.
I 47
.ip $
A macro definition.
The values of certain macros
(as of this writing, only
.b $r
and
.b $s )
are passed through to the queue run phase.
E 47
E 13
.pp
As an example,
the following is a queue file sent to
D 2
.q calder:mckusick
E 2
I 2
D 48
.q mckusick@calder
E 48
I 48
.q eric@mammoth.Berkeley.EDU
E 48
E 2
and
D 47
.q wnj :
E 47
I 47
D 48
.q wnj \**:
E 48
I 48
.q bostic@okeeffe.CS.Berkeley.EDU \**:
E 48
.(f
\**This example is contrived and probably inaccurate for your environment.
Glance over it to get an idea;
nothing can replace looking at what your own system generates.
.)f
E 47
.(b
D 47
DdfA13557
Seric
E 47
I 47
P835771
E 47
T404261372
D 47
P132
D 8
C0
E 8
Rmckusick@calder
Rwnj
H?D?date: 23-Oct-82 15:49:32-PDT (Sat)
H?F?from: eric (Eric Allman)
E 47
I 47
DdfAA13557
Seric
Cdaemon
D 48
Esendmail-request@vangogh.CS.Berkeley.EDU
Csendmail-request@vangogh.CS.Berkeley.EDU
E 48
I 48
Eowner-sendmail@vangogh.CS.Berkeley.EDU
Ceric
E 48
Reric@mammoth.Berkeley.EDU
Rbostic@okeeffe.CS.Berkeley.EDU
D 48
H?P?return-path: <sendmail-request>
E 48
I 48
H?P?return-path: <owner-sendmail@vangogh.CS.Berkeley.EDU>
E 48
Hreceived: by vangogh.CS.Berkeley.EDU (5.108/2.7) id AA06703;
	Fri, 17 Jul 92 00:28:55 -0700
Hreceived: from mail.CS.Berkeley.EDU by vangogh.CS.Berkeley.EDU (5.108/2.7)
	id AA06698; Fri, 17 Jul 92 00:28:54 -0700
Hreceived: from [128.32.31.21] by mail.CS.Berkeley.EDU (5.96/2.5)
	id AA22777; Fri, 17 Jul 92 03:29:14 -0400
Hreceived: by foo.bar.baz.de (5.57/Ultrix3.0-C)
	id AA22757; Fri, 17 Jul 92 09:31:25 GMT
H?F?from: eric@foo.bar.baz.de (Eric Allman)
E 47
H?x?full-name: Eric Allman
I 47
Hmessage-id: <9207170931.AA22757@foo.bar.baz.de>
HTo: sendmail@vangogh.CS.Berkeley.EDU
E 47
Hsubject: this is an example message
D 38
Hmessage-id: <8209232249.13557@UCBARPA.BERKELEY.ARPA>
Hreceived: by UCBARPA.BERKELEY.ARPA (3.227 [10/22/82])
E 38
I 38
D 47
Hmessage-id: <8209232249.13557@UCBARPA.BERKELEY.EDU>
Hreceived: by UCBARPA.BERKELEY.EDU (3.227 [10/22/82])
E 38
	id A13557; 23-Oct-82 15:49:32-PDT (Sat)
D 30
Hphone: (415) 548-3211
E 30
D 19
HTo: calder:mckusick, wnj
E 19
I 19
HTo: mckusick@calder, wnj
E 47
E 19
.)b
This shows the name of the data file,
the person who sent the message,
the submission time
(in seconds since January 1, 1970),
the message priority,
the message class,
D 2
The recipients,
E 2
I 2
the recipients,
E 2
and the headers for the message.
E 50
.sh 3 "Forcing the queue"
.pp
.i Sendmail
should run the queue automatically
at intervals.
The algorithm is to read and sort the queue,
and then to attempt to process all jobs in order.
When it attempts to run the job,
.i sendmail
first checks to see if the job is locked.
If so, it ignores the job.
.pp
There is no attempt to insure that only one queue processor
exists at any time,
since there is no guarantee that a job cannot take forever
D 50
to process.
E 50
I 50
to process
(however,
.i sendmail
does include heuristics to try to abort jobs
that are taking absurd amounts of time;
technically, this violates RFC 821, but is blessed by RFC 1123).
E 50
Due to the locking algorithm,
D 50
it is impossible for one job to freeze the queue.
E 50
I 50
it is impossible for one job to freeze the entire queue.
E 50
However,
an uncooperative recipient host
or a program recipient
that never returns
can accumulate many processes in your system.
Unfortunately,
D 50
there is no way to resolve this
without violating the protocol.
E 50
I 50
there is no completely general way to solve this.
E 50
.pp
In some cases,
you may find that a major host going down
for a couple of days
may create a prohibitively large queue.
This will result in
.i sendmail
spending an inordinate amount of time
sorting the queue.
This situation can be fixed by moving the queue to a temporary place
and creating a new queue.
The old queue can be run later when the offending host returns to service.
.pp
To do this,
it is acceptable to move the entire queue directory:
.(b
D 45
cd /usr/spool
E 45
I 45
cd /var/spool
E 45
D 38
mv mqueue omqueue; mkdir mqueue; chmod 777 mqueue
E 38
I 38
D 48
mv mqueue omqueue; mkdir mqueue; chmod 755 mqueue
E 48
I 48
mv mqueue omqueue; mkdir mqueue; chmod 700 mqueue
E 48
E 38
.)b
You should then kill the existing daemon
(since it will still be processing in the old queue directory)
and create a new daemon.
.pp
To run the old mail queue,
run the following command:
.(b
D 8
/usr/lib/sendmail \-Q/usr/spool/omqueue \-q
E 8
I 8
D 45
/usr/lib/sendmail \-oQ/usr/spool/omqueue \-q
E 45
I 45
D 47
/usr/lib/sendmail \-oQ/var/spool/omqueue \-q
E 47
I 47
/usr/\*(SD/sendmail \-oQ/var/spool/omqueue \-q
E 47
E 45
E 8
.)b
The
D 8
.b \-Q
E 8
I 8
.b \-oQ
E 8
flag specifies an alternate queue directory
and the
.b \-q
flag says to just run every job in the queue.
If you have a tendency toward voyeurism,
you can use the
.b \-v
flag to watch what is going on.
.pp
When the queue is finally emptied,
you can remove the directory:
.(b
D 45
rmdir /usr/spool/omqueue
E 45
I 45
rmdir /var/spool/omqueue
E 45
.)b
I 157
.sh 2 "The Service Switch"
.pp
The implementation of certain system services
such as host and user name lookup
is controlled by the service switch.
If the host operating system supports such a switch
.i sendmail
will use the native version.
Ultrix, Solaris, and DEC OSF/1 are examples of such systems.
.pp
If the underlying operating system does not support a service switch
(e.g., SunOS, HP-UX, BSD)
then
.i sendmail
will provide a stub implementation.
The
.b ServiceSwitchFile
option points to the name of a file that has the service definitions
Each line has the name of a service
and the possible implementations of that service.
For example, the file:
.(b
hosts	dns files nis
aliases	files nis
.)b
will ask
.i sendmail
to look for hosts in the Domain Name System first.
If the requested host name is not found,
it tries local files,
and if that fails it tries NIS.
Similarly,
when looking for aliases
it will try the local files first
followed by NIS.
.pp
Service switches are not completely integrated.
For example, despite the fact that the host entry listed in the above example
specifies to look in NIS,
on SunOS this won't happen because the system implementation of
.i gethostbyname \|(3)
doesn't understand this.
If there is enough demand
.i sendmail
may reimplement
.i gethostbyname \|(3),
.i gethostbyaddr \|(3),
.i getpwent \|(3),
and the other system routines that would be necessary
to make this work seamlessly.
E 157
.sh 2 "The Alias Database"
.pp
The alias database exists in two forms.
One is a text form,
maintained in the file
D 45
.i /usr/lib/aliases.
E 45
I 45
.i /etc/aliases.
E 45
The aliases are of the form
.(b
name: name1, name2, ...
.)b
Only local names may be aliased;
e.g.,
.(b
D 30
eric@mit-xx: eric@berkeley
E 30
I 30
D 45
eric@mit-xx: eric@berkeley.EDU
E 45
I 45
eric@prep.ai.MIT.EDU: eric@CS.Berkeley.EDU
E 45
E 30
.)b
D 155
will not have the desired effect.
E 155
I 155
D 157
will not have the desired effect\**.
E 157
I 157
will not have the desired effect
(except on prep.ai.MIT.EDU,
and they probably don't want me)\**.
E 157
.(f
\**Actually, any mailer that has the `A' mailer flag set
will permit aliasing;
this is normally limited to the local mailer.
.)f
E 155
Aliases may be continued by starting any continuation lines
with a space or a tab.
Blank lines and lines beginning with a sharp sign
(\c
.q # )
are comments.
.pp
The second form is processed by the
D 19
.i dbm (3)
E 19
I 19
D 157
.i dbm \|(3)
I 50
(or
.i db \|(3))
E 157
I 157
.i ndbm \|(3)\**
.(f
\**The
.i gdbm
package probably works as well.
.)f
or
.i db \|(3)
E 157
E 50
E 19
library.
This form is in the files
D 45
.i /usr/lib/aliases.dir
E 45
I 45
.i /etc/aliases.dir
E 45
and
D 45
.i /usr/lib/aliases.pag.
E 45
I 45
.i /etc/aliases.pag.
E 45
This is the form that
.i sendmail
actually uses to resolve aliases.
This technique is used to improve performance.
I 97
.pp
I 157
The control of search order is actually set by the service switch.
Essentially, the entry
.(b
OAswitch:aliases
.)b
is always added as the first alias entry;
also, the first alias file name without a class
(e.g., without
.q nis:
on the front)
will be used as the name of the file for a ``files'' entry
in the aliases switch.
For example, if the configuration file contains
.(b
OA/etc/aliases
.)b
and the service switch contains
.(b
aliases	nis files nisplus
.)b
then aliases will first be searched in the NIS database,
then in /etc/aliases,
then in the NIS+ database.
.pp
E 157
You can also use
.sm NIS -based
alias files.
For example, the specification:
.(b
OA/etc/aliases
OAnis:mail.aliases@my.nis.domain
.)b
will first search the /etc/aliases file
and then the map named
.q mail.aliases
in
.q my.nis.domain .
I 144
Warning: if you build your own
.sm NIS -based
alias files,
be sure to provide the
.b \-l
flag to
.i makedbm (8)
to map upper case letters in the keys to lower case;
otherwise, aliases with upper case letters in their names
won't match incoming addresses.
E 144
I 111
.pp
Additional flags can be added after the colon
exactly like a
.b K
line \(em for example:
.(b
D 157
OAnis:-N mail.aliases@my.nis.domain
E 157
I 157
OAnis:\-N mail.aliases@my.nis.domain
E 157
.)b
will search the appropriate NIS map and always include null bytes in the key.
I 155
D 157
.pp
As of 8.7,
the control of search order is actually set by the service switch.
Essentially, the entry
.(b
OAswitch:aliases
.)b
is always added as the first alias entry;
also, the first alias file name without a class
(e.g., without
.q nis:
on the front)
will be used as the name of the file for a ``files'' entry
in the aliases switch.
For example, if the configuration file contains
.(b
OA/etc/aliases
.)b
and the service switch contains
.(b
aliases	nis files nisplus
.)b
then aliases will first be searched in the NIS database,
then in /etc/aliases,
then in the NIS+ database.
E 157
E 155
E 111
E 97
.sh 3 "Rebuilding the alias database"
.pp
D 97
The DBM version of the database
E 97
I 97
The DB or DBM version of the database
E 97
may be rebuilt explicitly by executing the command
.(b
I 19
newaliases
.)b
This is equivalent to giving
.i sendmail
the
.b \-bi
flag:
.(b
E 19
D 5
/usr/lib/sendmail \-I
E 5
I 5
D 47
/usr/lib/sendmail \-bi
E 47
I 47
/usr/\*(SD/sendmail \-bi
E 47
E 5
.)b
.pp
D 6
The alias database will be rebuilt automatically by
E 6
I 6
If the
D 157
.q D
E 157
I 157
.b RebuildAliases
(old
.b D )
E 157
option is specified in the configuration,
E 6
.i sendmail
D 6
if possible.
E 6
I 6
will rebuild the alias database automatically
if possible
when it is out of date.
E 6
D 48
The conditions under which it will do this are:
.np
The DBM version of the database is mode 666.   -or-
.np
.i Sendmail
is running setuid to root.
I 5
.lp
E 48
D 6
In either case
the
.b D
option must be specified.
This option can be dangerous
on extremely heavily loaded machines
E 6
I 6
Auto-rebuild can be dangerous
on heavily loaded machines
E 6
with large alias files;
D 157
if it might take more than five minutes
E 157
I 157
if it might take more than the rebuild timeout
(option
.b AliasWait ,
old
.b a ,
which is normally five minutes)
E 157
to rebuild the database,
there is a chance that several processes will start the rebuild process
simultaneously.
I 97
.pp
If you have multiple aliases databases specified,
the
.b \-bi
flag rebuilds all the database types it understands
D 157
(for example, it can rebuild dbm databases but not nis databases).
E 157
I 157
(for example, it can rebuild NDBM databases but not NIS databases).
E 157
E 97
E 5
D 6
.sh 3 "Potential problems with the alias database"
E 6
I 6
.sh 3 "Potential problems"
E 6
.pp
There are a number of problems that can occur
with the alias database.
They all result from a
.i sendmail
process accessing the DBM version
while it is only partially built.
This can happen under two circumstances:
One process accesses the database
while another process is rebuilding it,
or the process rebuilding the database dies
(due to being killed or a system crash)
before completing the rebuild.
.pp
D 157
Sendmail has two techniques to try to relieve these problems.
E 157
I 157
Sendmail has three techniques to try to relieve these problems.
E 157
First, it ignores interrupts while rebuilding the database;
this avoids the problem of someone aborting the process
leaving a partially rebuilt database.
Second,
I 157
it locks the database source file during the rebuild \(em
but that may not work over NFS or if the file is unwritable.
Third,
E 157
at the end of the rebuild
it adds an alias of the form
.(b
@: @
.)b
(which is not normally legal).
D 117
Before sendmail will access the database,
E 117
I 117
Before
.i sendmail
will access the database,
E 117
D 6
it checks to insure that this entry exists.
E 6
I 6
it checks to insure that this entry exists\**.
.(f
\**The
D 157
.q a
E 157
I 157
.b AliasWait
E 157
option is required in the configuration
for this action to occur.
D 139
This should normally be specified
unless you are running
.i delivermail
in parallel with
.i sendmail.
E 139
I 139
This should normally be specified.
E 139
.)f
E 6
D 27
It will wait up to five minutes
for this entry to appear,
E 27
I 27
D 48
.i Sendmail
will wait for this entry to appear,
E 27
D 2
at which point it will force a rebuild itself.
E 2
I 2
at which point it will force a rebuild itself\**.
.(f
\**Note:
the
D 6
.q a
D 5
option must be specified in the configuration file
E 5
I 5
and
E 6
.q D
D 6
options must be specified in the configuration file
E 6
I 6
option must be specified in the configuration file
E 6
E 5
for this operation to occur.
I 27
If the
.q D
option is not specified,
a warning message is generated and
.i sendmail
continues.
E 27
.)f
E 48
.sh 3 "List owners"
.pp
If an error occurs on sending to a certain address,
say
.q \fIx\fP ,
.i sendmail
will look for an alias
of the form
.q owner-\fIx\fP
to receive the errors.
This is typically useful
for a mailing list
where the submitter of the list
D 34
has no control over the maintanence of the list itself;
E 34
I 34
has no control over the maintenance of the list itself;
E 34
in this case the list maintainer would be the owner of the list.
For example:
.(b
D 6
unix-wizards: eric@ucbarpa, wnj@monet, sam@matisse, nosuchuser
E 6
I 6
unix-wizards: eric@ucbarpa, wnj@monet, nosuchuser,
	sam@matisse
E 6
D 157
owner-unix-wizards: eric@ucbarpa
E 157
I 157
owner-unix-wizards: unix-wizards-request
unix-wizards-request: eric@ucbarpa
E 157
.)b
would cause
.q eric@ucbarpa
to get the error that will occur
when someone sends to
unix-wizards
due to the inclusion of
.q nosuchuser
on the list.
I 70
.pp
List owners also cause the envelope sender address to be modified.
The contents of the owner alias are used if they point to a single user,
otherwise the name of the alias itself is used.
For this reason, and to obey Internet conventions,
D 157
a typical scheme would be:
.(b
list:	some, set, of, addresses
D 111
list-request:	list, administrators
E 111
I 111
list-request:	list-admin-1, list-admin-2, ...
E 111
owner-list:	list-request
.)b
E 157
I 157
the
.q owner-
address normally points at the
.q -request
address; this causes messages to go out with the typical Internet convention
of using ``\c
.i list -request''
as the return address.
E 157
E 70
I 45
.sh 2 "User Information Database"
.pp
If you have a version of
.i sendmail
with the user information database
compiled in,
and you have specified one or more databases using the
.b U
option,
the databases will be searched for a
.i user :maildrop
entry.
If found, the mail will be sent to the specified address.
D 157
.pp
If the first token passed to user part of the
.q local
mailer is an at sign,
the at sign will be stripped off
and this step will be skipped.
E 157
E 45
I 8
.sh 2 "Per-User Forwarding (.forward Files)"
.pp
As an alternative to the alias database,
any user may put a file with the name
.q .forward
in his or her home directory.
If this file exists,
.i sendmail
redirects mail for that user
to the list of addresses listed in the .forward file.
For example, if the home directory for user
.q mckusick
has a .forward file with contents:
.(b
mckusick@ernie
kirk@calder
.)b
then any mail arriving for
.q mckusick
will be redirected to the specified accounts.
I 50
.pp
Actually, the configuration file defines a sequence of filenames to check.
By default, this is the user's .forward file,
but can be defined to be more generally using the
.b J
option.
If you change this,
you will have to inform your user base of the change;
\&.forward is pretty well incorporated into the collective subconscious.
E 50
.sh 2 "Special Header Lines"
.pp
Several header lines have special interpretations
defined by the configuration file.
Others have interpretations built into
.i sendmail
that cannot be changed without changing the code.
These builtins are described here.
D 25
.sh 3 "Return-receipt-to"
E 25
I 25
D 129
.sh 3 "Return-Receipt-To:"
E 25
.pp
I 155
.b N.B.
.i
This header line has been preempted by the RET= parameter
on the ESMTP transaction
as documented by RFC XXX
[in preparation].
This header field is deprecated.
.pp
E 155
If this header is sent,
a message will be sent to any specified addresses
D 36
when the final delivery is complete.
D 25
This is determined by the
E 25
I 25
if the mailer has the
E 36
I 36
when the final delivery is complete,
that is,
when successfully delivered to a mailer with the
E 36
E 25
.b l
D 25
flag in the mailer descriptor.
.sh 3 "Errors-to"
E 25
I 25
D 137
flag (local delivery) set in the mailer descriptor.
E 137
I 137
flag (local delivery) set in the mailer descriptor\**.
.(f
\**Some sites disable this header,
and other (non-\c
.i sendmail )
systems do not implement it.
Do not assume that a failure to get a return receipt
means that the mail did not arrive.
Also, do not assume that getting a return receipt
means that the mail has been read;
it just means that the message has been delivered
to the recipient's mailbox.
I 157
In fact,
this header is pretty useless
unless you are certain that the recipient mailer implements it.
E 157
.)f
I 148
This header can be disabled with the
.q noreceipts
privacy flag.
I 157
See the
.b PrivacyFlags
option.
E 157
E 148
E 137
E 129
.sh 3 "Errors-To:"
E 25
.pp
If errors occur anywhere during processing,
this header will cause error messages to go to
D 95
the listed addresses
rather than to the sender.
E 95
I 95
the listed addresses.
E 95
This is intended for mailing lists.
I 69
.pp
The Errors-To: header was created in the bad old days
when UUCP didn't understand the distinction between an envelope and a header;
this was a hack to provide what should now be passed
as the envelope sender address.
It should go away.
I 104
It is only used if the
D 157
.b l
E 157
I 157
.b UseErrorsTo
E 157
option is set.
I 157
.pp
The Errors-To: header is official deprecated
and will go away in a future release.
E 157
E 104
E 69
D 25
.sh 3 "Apparently-To:
E 25
I 25
.sh 3 "Apparently-To:"
E 25
.pp
I 166
RFC 822 requires at least one recipient field
(To:, Cc:, or Bcc: line)
in every message.
E 166
If a message comes in with no recipients listed in the message
D 166
(in a To:, Cc:, or Bcc: line)
E 166
then
.i sendmail
D 166
will add an
E 166
I 166
will adjust the header based on the
.q NoRecipientAction
option.
One of the possible actions is to add an
E 166
.q "Apparently-To:"
header line for any recipients it is aware of.
This is not put in as a standard recipient line
to warn any recipients that the list is not complete.
.pp
D 166
At least one recipient line is required under RFC 822.
E 166
I 166
The Apparently-To: header is non-standard
and is deprecated.
E 166
I 157
.sh 3 "Precedence"
.pp
The Precedence: header can be used as a crude control of message priority.
It tweaks the sort order in the queue
and can be configured to change the message timeout values.
E 157
I 89
.sh 2 "IDENT Protocol Support"
.pp
.i Sendmail
supports the IDENT protocol as defined in RFC 1413.
D 90
Although this enhances authentication of email messages,
E 90
I 90
Although this enhances identification
of the author of an email message
by doing a ``call back'' to the originating system to include
the owner of a particular TCP connection
in the audit trail
E 90
it is in no sense perfect;
a determined forger can easily spoof the IDENT protocol.
The following description is excerpted from RFC 1413:
.ba +5
I 125
.lp
E 125
6.  Security Considerations
.lp
The information returned by this protocol is at most as trustworthy
as the host providing it OR the organization operating the host.  For
example, a PC in an open lab has few if any controls on it to prevent
a user from having this protocol return any identifier the user
wants.  Likewise, if the host has been compromised the information
returned may be completely erroneous and misleading.
.lp
The Identification Protocol is not intended as an authorization or
access control protocol.  At best, it provides some additional
auditing information with respect to TCP connections.  At worst, it
can provide misleading, incorrect, or maliciously incorrect
information.
.lp
The use of the information returned by this protocol for other than
auditing is strongly discouraged.  Specifically, using Identification
Protocol information to make access control decisions - either as the
primary method (i.e., no other checks) or as an adjunct to other
methods may result in a weakening of normal host security.
.lp
An Identification server may reveal information about users,
entities, objects or processes which might normally be considered
private.  An Identification server provides service which is a rough
analog of the CallerID services provided by some phone companies and
many of the same privacy considerations and arguments that apply to
the CallerID service apply to Identification.  If you wouldn't run a
"finger" server due to privacy considerations you may not want to run
this protocol.
.ba
I 155
D 157
.pp
E 157
I 157
.lp
E 157
In some cases your system may not work properly with IDENT support
due to a bug in the TCP/IP implementation.
The symptoms will be that for some hosts
the SMTP connection will be closed
almost immediately.
D 157
If this is true,
E 157
I 157
If this is true or if you do not want to use IDENT,
E 157
you should set the IDENT timeout to zero;
this will disable the IDENT protocol.
E 155
E 89
.sh 1 "ARGUMENTS"
.pp
The complete list of arguments to
.i sendmail
is described in detail in Appendix A.
Some important arguments are described here.
.sh 2 "Queue Interval"
.pp
The amount of time between forking a process
to run through the queue
is defined by the
.b \-q
flag.
D 155
If you run in mode
.b f
E 155
I 155
If you run with delivery mode set to
.b i
E 155
or
D 155
.b a
E 155
I 155
.b b
E 155
this can be relatively large,
since it will only be relevant
when a host that was down comes back up.
If you run in
.b q
mode
it should be relatively short,
since it defines the maximum amount of time that a message
may sit in the queue.
I 155
(See also the MinQueueAge option.)
E 155
I 68
.pp
D 69
RFC 1123 section 5.3.1.1 says that this value should be at least 30 minutes.
E 69
I 69
RFC 1123 section 5.3.1.1 says that this value should be at least 30 minutes
(although that probably doesn't make sense if you use ``queue-only'' mode).
E 69
E 68
.sh 2 "Daemon Mode"
.pp
If you allow incoming mail over an IPC connection,
you should have a daemon running.
This should be set by your
.i /etc/rc
file using the
.b \-bd
flag.
The
.b \-bd
flag and the
.b \-q
flag may be combined in one call:
.(b
D 25
/usr/lib/sendmail \-bd \-q10m
E 25
I 25
D 47
/usr/lib/sendmail \-bd \-q30m
E 47
I 47
/usr/\*(SD/sendmail \-bd \-q30m
E 47
E 25
.)b
I 155
.pp
An alternative approach is to invoke sendmail from
.i inetd (8)
(use the
.b \-bs
flag to ask sendmail to speak SMTP on its standard input and output).
This works and allows you to wrap
.i sendmail
in a TCP wrapper program,
but may be a bit slower since the configuration file
has to be re-read on every message that comes in.
If you do this, you still need to have a
.i sendmail
running to flush the queue:
.(b
/usr/\*(SD/sendmail \-q30m
.)b
E 155
.sh 2 "Forcing the Queue"
.pp
In some cases you may find that the queue has gotten clogged for some reason.
You can force a queue run
using the
.b \-q
flag (with no value).
D 25
It is frequently entertaining to use the
E 25
I 25
It is entertaining to use the
E 25
.b \-v
flag (verbose)
when this is done to watch what happens:
.(b
D 47
/usr/lib/sendmail \-q \-v
E 47
I 47
/usr/\*(SD/sendmail \-q \-v
E 47
.)b
I 73
.pp
You can also limit the jobs to those with a particular queue identifier,
sender, or recipient
using one of the queue modifiers.
For example,
.q \-qRberkeley
restricts the queue run to jobs that have the string
.q berkeley
somewhere in one of the recipient addresses.
Similarly,
.q \-qSstring
limits the run to particular senders and
.q \-qIstring
D 157
limits it to particular identifiers.
E 157
I 157
limits it to particular queue identifiers.
E 157
E 73
.sh 2 "Debugging"
.pp
There are a fairly large number of debug flags
built into
.i sendmail .
Each debug flag has a number and a level,
where higher levels means to print out more information.
The convention is that levels greater than nine are
.q absurd,
i.e.,
they print out so much information that you wouldn't normally
want to see them except for debugging that particular piece of code.
Debug flags are set using the
.b \-d
option;
the syntax is:
.(b
.ta \w'debug-option  'u
debug-flag:	\fB\-d\fP debug-list
D 157
debug-list:	debug-option [ , debug-option ]
E 157
I 157
debug-list:	debug-option [ , debug-option ]*
E 157
debug-option:	debug-range [ . debug-level ]
debug-range:	integer | integer \- integer
debug-level:	integer
.)b
where spaces are for reading ease only.
For example,
.(b
\-d12	Set flag 12 to level 1
\-d12.3	Set flag 12 to level 3
D 157
\-d3-17	Set flags 3 through 17 to level 1
\-d3-17.4	Set flags 3 through 17 to level 4
E 157
I 157
\-d3\-17	Set flags 3 through 17 to level 1
\-d3\-17.4	Set flags 3 through 17 to level 4
E 157
.)b
For a complete list of the available debug flags
you will have to look at the code
(they are too dynamic to keep this documentation up to date).
D 157
.sh 2 "Trying a Different Configuration File"
.pp
An alternative configuration file
can be specified using the
.b \-C
flag; for example,
.(b
D 47
/usr/lib/sendmail \-Ctest.cf
E 47
I 47
/usr/\*(SD/sendmail \-Ctest.cf
E 47
.)b
uses the configuration file
.i test.cf
instead of the default
D 45
.i /usr/lib/sendmail.cf.
E 45
I 45
.i /etc/sendmail.cf.
E 45
If the
.b \-C
flag has no value
it defaults to
.i sendmail.cf
in the current directory.
I 155
.pp
.i Sendmail
gives up its setuid root permissions
when you use this flag, so it is common to use a publically writable directory
(such as /tmp)
as the spool directory (QueueDirectory or Q option) while testing.
E 157
E 155
.sh 2 "Changing the Values of Options"
.pp
Options can be overridden using the
.b \-o
D 155
flag.
E 155
I 155
or
.b \-O
command line flags.
E 155
For example,
.(b
D 47
/usr/lib/sendmail \-oT2m
E 47
I 47
/usr/\*(SD/sendmail \-oT2m
E 47
.)b
sets the
.b T
(timeout) option to two minutes
D 155
for this run only.
E 155
I 155
for this run only;
the equivalent line using the long option name is
.(b
/usr/\*(SD/sendmail -OQueueTimeout=2m
.)b
E 155
I 47
.pp
Some options have security implications.
Sendmail allows you to set these,
D 58
but refuses to root as root thereafter.
E 58
I 58
D 155
but refuses to run as root thereafter.
E 155
I 155
but relinquishes its setuid root permissions thereafter\**.
.(f
\**That is, it sets its effective uid to the real uid;
thus, if you are executing as root,
as from root's crontab file or during system startup
the root permissions will still be honored.
.)f
I 157
.sh 2 "Trying a Different Configuration File"
.pp
An alternative configuration file
can be specified using the
.b \-C
flag; for example,
.(b
/usr/\*(SD/sendmail \-Ctest.cf \-oQ/tmp/mqueue
.)b
uses the configuration file
.i test.cf
instead of the default
.i /etc/sendmail.cf.
If the
.b \-C
flag has no value
it defaults to
.i sendmail.cf
in the current directory.
.pp
.i Sendmail
gives up its setuid root permissions
D 158
when you use this flag, so it is common to use a publically writable directory
E 158
I 158
when you use this flag, so it is common to use a publicly writable directory
E 158
(such as /tmp)
as the spool directory (QueueDirectory or Q option) while testing.
E 157
E 155
I 113
.sh 2 "Logging Traffic"
.pp
Many SMTP implementations do not fully implement the protocol.
For example, some personal computer based SMTPs
do not understand continuation lines in reply codes.
These can be very hard to trace.
If you suspect such a problem, you can set traffic logging using the
.b \-X
flag.
For example,
.(b
D 157
/usr/\*(SD/sendmail \-X /tmp/traffic -bd
E 157
I 157
/usr/\*(SD/sendmail \-X /tmp/traffic \-bd
E 157
.)b
will log all traffic in the file
.i /tmp/traffic .
.pp
D 157
This logs a lot of data very quickly and should never be used
E 157
I 157
This logs a lot of data very quickly and should
.b NEVER
be used
E 157
during normal operations.
After starting up such a daemon,
force the errant implementation to send a message to your host.
All message traffic in and out of
.i sendmail ,
including the incoming SMTP traffic,
will be logged in this file.
I 140
D 157
.sh 2 "Dumping State"
E 157
I 157
.sh 2 "Testing Configuration Files"
E 157
.pp
D 157
You can ask
E 157
I 157
When you build a configuration table,
you can do a certain amount of testing
using the
.q "test mode"
of
.i sendmail .
For example,
you could invoke
E 157
.i sendmail
D 157
to log a dump of the open files
and the connection cache
by sending it a
.sm SIGUSR1
signal.
The results are logged at
.sm LOG_DEBUG
priority.
E 157
I 157
as:
.(b
sendmail \-bt \-Ctest.cf
.)b
which would read the configuration file
.q test.cf
and enter test mode.
In this mode,
you enter lines of the form:
.(b
rwset address
.)b
where
.i rwset
is the rewriting set you want to use
and
.i address
is an address to apply the set to.
Test mode shows you the steps it takes
as it proceeds,
finally showing you the address it ends up with.
You may use a comma separated list of rwsets
for sequential application of rules to an input.
For example:
.(b
3,1,21,4 monet:bollard
.)b
first applies ruleset three to the input
.q monet:bollard.
Ruleset one is then applied to the output of ruleset three,
followed similarly by rulesets twenty-one and four.
.pp
If you need more detail,
you can also use the
.q \-d21
flag to turn on more debugging.
For example,
.(b
sendmail \-bt \-d21.99
.)b
turns on an incredible amount of information;
a single word address
is probably going to print out several pages worth of information.
.pp
You should be warned that internally,
.i sendmail
applies ruleset 3 to all addresses.
In test mode
you will have to do that manually.
For example, older versions allowed you to use
.(b
0 bruce@broadcast.sony.com
.)b
This version requires that you use:
.(b
3,0 bruce@broadcast.sony.com
.)b
.pp
As of version 8.7,
some other syntaxes are available in test mode:
.bu
\&.D\|x\|value
defines macro
.i x
to have the indicated
.i value .
This is useful when debugging rules that use the
.b $& \c
.i x
syntax.
.bu
\&.C\|c\|value
adds the indicated
.i value
to class
.i c .
.bu
\&.S\|ruleset
dumps the contents of the indicated ruleset.
.bu
\-d\|debug-spec
is equivalent to the command-line flag.
E 157
E 140
E 113
E 58
E 47
.sh 1 "TUNING"
.pp
There are a number of configuration parameters
you may want to change,
depending on the requirements of your site.
Most of these are set
using an option in the configuration file.
For example,
the line
D 68
.q OT3d
E 68
I 68
D 155
.q OT5d
E 155
I 155
.q "O Timeout.queuereturn=5d"
E 155
E 68
sets option
D 155
.q T
E 155
I 155
.q Timeout.queuereturn
E 155
to the value
D 68
.q 3d
(three days).
E 68
I 68
.q 5d
D 69
(five days,
as recommended by RFC 1123 section 5.3.1.1).
E 69
I 69
(five days).
E 69
E 68
I 29
.pp
D 48
Most of these options default appropriately for most sites.
E 48
I 48
Most of these options have appropriate defaults for most sites.
E 48
However,
sites having very high mail loads may find they need to tune them
as appropriate for their mail load.
In particular,
sites experiencing a large number of small messages,
many of which are delivered to many recipients,
may find that they need to adjust the parameters
dealing with queue priorities.
I 157
.pp
All versions of
.i sendmail
prior to 8.7
had single character option names.
As of 8.7,
options have long (multi-character names).
Although old short names are still accepted,
most new options do not have short equivalents.
.pp
This section only describes the options you are most likely
to want to tweak;
read section
.\"XREF
5
for more details.
E 157
E 29
.sh 2 "Timeouts"
.pp
All time intervals are set
using a scaled syntax.
For example,
.q 10m
represents ten minutes, whereas
.q 2h30m
represents two and a half hours.
The full set of scales is:
.(b
.ta 4n
s	seconds
m	minutes
h	hours
d	days
w	weeks
.)b
.sh 3 "Queue interval"
.pp
The argument to the
.b \-q
flag
D 47
specifies how often a subdaemon will run the queue.
E 47
I 47
specifies how often a sub-daemon will run the queue.
E 47
D 29
This is typically set to between five minutes
and one half hour.
E 29
I 29
This is typically set to between fifteen minutes
and one hour.
I 68
RFC 1123 section 5.3.1.1 recommends that this be at least 30 minutes.
E 68
E 29
.sh 3 "Read timeouts"
.pp
D 155
It is possible to time out when reading the standard input
or when reading from a remote SMTP server.
D 68
Technically,
this is not acceptable within the published protocols.
However,
it might be appropriate to set it to something large
in certain environments
(such as an hour).
This will reduce the chance of large numbers of idle daemons
piling up on your system.
This timeout is set using the
E 68
I 68
These timeouts are set using the
E 68
.b r
option in the configuration file.
I 68
The argument is a list of
.i keyword=value
pairs.
The recognized keywords, their default values, and the minimum values
E 155
I 155
Timeouts all have option names
D 158
.q Timeout.\fIsupoption\fP .
E 158
I 158
.q Timeout.\fIsuboption\fP .
E 158
The recognized
.i suboption s,
their default values, and the minimum values
E 155
allowed by RFC 1123 section 5.3.2 are:
.nr ii 1i
.ip initial
The wait for the initial 220 greeting message
[5m, 5m].
.ip helo
D 74
The wait for a reply from a HELO command
E 74
I 74
The wait for a reply from a HELO or EHLO command
E 74
[5m, unspecified].
This may require a host name lookup, so
five minutes is probably a reasonable minimum.
.ip mail\(dg
The wait for a reply from a MAIL command
[10m, 5m].
.ip rcpt\(dg
The wait for a reply from a RCPT command
[1h, 5m].
This should be long
because it could be pointing at a list
D 157
that takes a long time to expand.
E 157
I 157
that takes a long time to expand
(see below).
E 157
.ip datainit\(dg
The wait for a reply from a DATA command
[5m, 2m].
.ip datablock\(dg
The wait for reading a data block
(that is, the body of the message).
[1h, 3m].
This should be long because it also applies to programs
piping input to
.i sendmail
which have no guarantee of promptness.
.ip datafinal\(dg
The wait for a reply from the dot terminating a message.
[1h, 10m].
I 72
If this is shorter than the time actually needed
for the receiver to deliver the message,
duplicates will be generated.
This is discussed in RFC 1047.
E 72
.ip rset
The wait for a reply from a RSET command
[5m, unspecified].
.ip quit
The wait for a reply from a QUIT command
[2m, unspecified].
.ip misc
The wait for a reply from miscellaneous (but short) commands
such as NOOP (no-operation) and VERB (go into verbose mode).
[2m, unspecified].
.ip command\(dg
In server SMTP,
the time to wait for another command.
[1h, 5m].
I 120
.ip ident
The timeout waiting for a reply to an IDENT query
D 157
[30s, unspecified].
E 157
I 157
[30s\**, unspecified].
.(f
\**On some systems the default is zero to turn the protocol off entirely.
.)f
E 157
E 120
.lp
For compatibility with old configuration files,
D 155
if no ``keyword='' is specified,
E 155
I 155
if no
.i suboption
is specified,
E 155
all the timeouts marked with \(dg are set to the indicated value.
E 68
I 47
.pp
D 68
RFC1123
recommends that this option be set to five minutes.
E 68
I 68
Many of the RFC 1123 minimum values
may well be too short.
E 68
.i Sendmail
D 68
was designed to the RFC822 protocols,
E 68
I 68
was designed to the RFC 822 protocols,
E 68
which did not specify read timeouts;
D 157
hence,
E 157
I 157
hence, versions of
E 157
.i sendmail
D 157
does not guarantee to reply to messages promptly.
E 157
I 157
prior to version 8.1 did not guarantee to reply to messages promptly.
E 157
In particular, a
.q RCPT
command specifying a mailing list
will expand and verify the entire list;
a large list on a slow system
D 157
may take more than five minutes\**.
E 157
I 157
may easily take more than five minutes\**.
E 157
.(f
\**This verification includes looking up every address
with the name server;
this involves network delays,
and can in some cases can be considerable.
.)f
D 68
I recommend a two hour timeout \*-
E 68
I 68
I recommend a one hour timeout \*-
E 68
D 157
since this failure is rare,
E 157
I 157
since a communications failure during the RCPT phase is rare,
E 157
a long timeout is not onerous
D 157
and may ultimately help reduce network load.
E 157
I 157
and may ultimately help reduce network load
and duplicated messages.
E 157
.pp
D 68
The timeout for a user SMTP process
waiting for the initial
.q HELO
message
is hard-wired to five minutes.
E 68
I 68
D 155
For example, the line:
E 155
I 155
For example, the lines:
E 155
.(b
D 155
Orcommand=25m,datablock=3h
E 155
I 155
O Timeout.command=25m
O Timeout.datablock=3h
E 155
.)b
sets the server SMTP command timeout to 25 minutes
and the input data block timeout to three hours.
E 68
E 47
.sh 3 "Message timeouts"
.pp
After sitting in the queue for a few days,
a message will time out.
This is to insure that at least the sender is aware
of the inability to send a message.
D 155
The timeout is typically set to three days.
This timeout is set using the
E 155
I 155
The timeout is typically set to five days.
It is sometimes considered convenient to also send a warning message
if the message is in the queue longer than a few hours
(assuming you normally have good connectivity;
if your messages normally took several hours to send
you wouldn't want to do this because it wouldn't be an unusual event).
These timeouts are set using the
.b Timeout.queuereturn
and
.b Timeout.queuewarn
options in the configuration file
(previously both were set using the
E 155
.b T
D 155
option in the configuration file.
E 155
I 155
option).
E 155
.pp
D 157
The time of submission is set in the queue,
rather than the amount of time left until timeout.
As a result, you can flush messages that have been hanging
for a short period
by running the queue
with a short message timeout.
For example,
.(b
I 155
/usr/\*(SD/sendmail \-OTimeout.queuereturn=1d \-q
	-or-
E 155
D 19
/usr/lib/sendmail -oT1d -q
E 19
I 19
D 47
/usr/lib/sendmail \-oT1d \-q
E 47
I 47
/usr/\*(SD/sendmail \-oT1d \-q
E 47
E 19
.)b
will run the queue
and flush anything that is one day old.
I 47
.pp
Since this option is global,
and since you can not
E 157
I 157
Since these options are global,
and since you can not know
E 157
.i "a priori"
D 157
know how long another host outside your domain will be down,
E 157
I 157
how long another host outside your domain will be down,
E 157
D 68
a three day timeout is recommended.
E 68
I 68
a five day timeout is recommended.
E 68
This allows a recipient to fix the problem even if it occurs
D 68
at the beginning of a weekend.
E 68
I 68
at the beginning of a long weekend.
RFC 1123 section 5.3.1.1 says that this parameter
should be ``at least 4\-5 days''.
I 79
.pp
The
I 155
.b Timeout.queuewarn
value can be piggybacked on the
E 155
.b T
D 155
option can also take a second timeout indicating a time after which
E 155
I 155
option by indicating a time after which
E 155
a warning message should be sent;
the two timeouts are separated by a slash.
D 155
For example, the value
E 155
I 155
For example, the line
E 155
.(b
D 155
5d/4h
E 155
I 155
OT5d/4h
E 155
.)b
causes email to fail after five days,
but a warning message will be sent after four hours.
This should be large enough that the message will have been tried
several times.
E 79
E 68
E 47
I 29
.sh 2 "Forking During Queue Runs"
.pp
By setting the
D 155
.b Y
E 155
I 155
D 157
.b ForkQueueRuns
E 157
I 157
.b ForkEachJob
E 157
(\c
.b Y )
E 155
option,
.i sendmail
will fork before each individual message
while running the queue.
This will prevent
.i sendmail
from consuming large amounts of memory,
so it may be useful in memory-poor environments.
However, if the
D 155
.b Y
E 155
I 155
D 157
.b ForkQueueRuns
E 157
I 157
.b ForkEachJob
E 157
E 155
option is not set,
.i sendmail
will keep track of hosts that are down during a queue run,
which can improve performance dramatically.
I 47
.pp
If the
D 155
.b Y
E 155
I 155
D 157
.b ForkQueueRuns
E 157
I 157
.b ForkEachJob
E 157
E 155
option is set,
.i sendmail
can not use connection caching.
E 47
.sh 2 "Queue Priorities"
.pp
Every message is assigned a priority when it is first instantiated,
consisting of the message size (in bytes)
D 157
offset by the message class times the
E 157
I 157
offset by the message class
(which is determined from the Precedence: header)
times the
E 157
.q "work class factor"
and the number of recipients times the
.q "work recipient factor."
D 56
The priority plus the creation time of the message
(in seconds since January 1, 1970)
are used to order the queue.
E 56
I 56
The priority is used to order the queue.
E 56
Higher numbers for the priority mean that the message will be processed later
when running the queue.
.pp
The message size is included so that large messages are penalized
relative to small messages.
The message class allows users to send
.q "high priority"
messages by including a
.q Precedence:
field in their message;
the value of this field is looked up in the
.b P
lines of the configuration file.
Since the number of recipients affects the amount of load a message presents
to the system,
this is also included into the priority.
.pp
The recipient and class factors
can be set in the configuration file using the
D 155
.b y
E 155
I 155
.b RecipientFactor
(\c
.b y )
E 155
and
D 155
.b z
E 155
I 155
.b ClassFactor
(\c
.b z )
E 155
options respectively.
D 56
They default to 1000 (for the recipient factor)
E 56
I 56
They default to 30000 (for the recipient factor)
E 56
and 1800
(for the class factor).
I 30
The initial priority is:
D 48
.(b
D 36
pri = size - (class * z) + (nrcpt * y)
E 36
I 36
pri = size \- (class * z) + (nrcpt * y)
E 36
.)b
E 48
I 48
.EQ
D 56
pri = size - (class times z) + (nrcpt times y)
E 56
I 56
D 132
pri = size - (class times bold z) + (nrcpt times bold y)
E 132
I 132
D 155
pri = msgsize - (class times bold z) + (nrcpt times bold y)
E 155
I 155
pri = msgsize - (class times bold ClassFactor) + (nrcpt times bold RecipientFactor)
E 155
E 132
E 56
.EN
E 48
(Remember, higher values for this parameter actually mean
that the job will be treated with lower priority.)
E 30
.pp
The priority of a job can also be adjusted each time it is processed
(that is, each time an attempt is made to deliver it)
using the
.q "work time factor,"
set by the
D 155
.b Z
E 155
I 155
D 157
.b TimeFactor
E 157
I 157
.b RetryFactor
E 157
(\c
.b Z )
E 155
option.
This is added to the priority,
so it normally decreases the precedence of the job,
on the grounds that jobs that have failed many times
will tend to fail again in the future.
I 56
The
D 155
.b Z
E 155
I 155
D 157
.b TimeFactor
E 157
I 157
.b RetryFactor
E 157
E 155
option defaults to 90000.
E 56
.sh 2 "Load Limiting"
.pp
.i Sendmail
can be asked to queue (but not deliver)
mail if the system load average gets too high
using the
D 155
.b x
E 155
I 155
.b QueueLA
(\c
.b x )
E 155
option.
When the load average exceeds the value of the
D 155
.b x
E 155
I 155
.b QueueLA
E 155
option,
the delivery mode is set to
.b q
(queue only)
if the
D 155
.i "Queue Factor"
E 155
I 155
.b QueueFactor
E 155
(\c
D 155
.b q
option)
divided by the difference in the current load average and the
.b x
E 155
I 155
.b q )
option divided by the difference in the current load average and the
.b QueueLA
E 155
option
plus one
exceeds the priority of the message \(em
that is, the message is queued iff:
.EQ
D 56
pri > QF over { LA - x + 1 }
E 56
I 56
D 69
pri > bold q over { LA - bold x + 1 }
E 69
I 69
D 72
pri > { bold q } over { LA - bold x + 1 }
E 72
I 72
D 155
pri > { bold q } over { LA - { bold x } + 1 }
E 155
I 155
pri > { bold QueueFactor } over { LA - { bold QueueLA } + 1 }
E 155
E 72
E 69
E 56
.EN
The
D 155
.b q
E 155
I 155
.b QueueFactor
E 155
D 56
option defaults to 10000,
so each point of load average is worth 10000
E 56
I 56
D 132
option defaults to 200000,
so each point of load average is worth 200000
E 132
I 132
option defaults to 600000,
so each point of load average is worth 600000
E 132
E 56
priority points
D 56
(as described above, that is, bytes + seconds + offsets).
E 56
I 56
(as described above).
E 56
.pp
For drastic cases,
the
D 155
.b X
E 155
I 155
.b RefuseLA
(\c
.b X )
E 155
D 117
option defines a load average at which sendmail will refuse
E 117
I 117
option defines a load average at which
.i sendmail
will refuse
E 117
to accept network connections.
Locally generated mail
(including incoming UUCP mail)
is still accepted.
E 29
.sh 2 "Delivery Mode"
.pp
There are a number of delivery modes that
.i sendmail
can operate in,
set by the
D 155
.q d
E 155
I 155
.b DeliveryMode
(\c
.b d )
E 155
configuration option.
These modes
specify how quickly mail will be delivered.
Legal modes are:
.(b
.ta 4n
i	deliver interactively (synchronously)
b	deliver in background (asynchronously)
q	queue only (don't deliver)
.)b
There are tradeoffs.
Mode
.q i
D 157
passes the maximum amount of information to the sender,
but is hardly ever necessary.
E 157
I 157
gives the sender the quickest feedback,
but may slow down some mailers and
is hardly ever necessary.
E 157
Mode
.q q
puts the minimum load on your machine,
but means that delivery may be delayed for up to the queue interval.
Mode
.q b
D 157
is probably a good compromise.
I 19
However, this mode can cause large numbers of processes
E 157
I 157
delivers promptly but
can cause large numbers of processes
E 157
if you have a mailer that takes a long time to deliver a message.
I 157
Mode
.q b
is the usual default.
E 157
I 69
.pp
If you run in mode
.q q
(queue only)
I 136
or
.q b
(deliver in background)
E 136
.i sendmail
will not expand aliases and follow .forward files
upon initial receipt of the mail.
This speeds up the response to RCPT commands.
I 157
Mode
.q i
cannot be used by the SMTP server.
E 157
E 69
E 19
.sh 2 "Log Level"
.pp
D 117
The level of logging can be set for sendmail.
E 117
I 117
The level of logging can be set for
.i sendmail .
E 117
The default using a standard configuration table is level 9.
The levels are as follows:
I 48
.nr ii 0.5i
E 48
.ip 0
No logging.
.ip 1
D 64
Major problems only.
E 64
I 64
Serious system failures and potential security problems.
E 64
.ip 2
D 64
Message collections and failed deliveries.
E 64
I 64
Lost communications (network problems) and protocol failures.
E 64
.ip 3
D 64
Successful deliveries.
E 64
I 64
Other serious failures.
E 64
.ip 4
D 34
Messages being defered
E 34
I 34
D 64
Messages being deferred
E 34
(due to a host being down, etc.).
E 64
I 64
Minor failures.
E 64
.ip 5
D 64
Normal message queueups.
E 64
I 64
Message collection statistics.
E 64
.ip 6
D 64
Unusual but benign incidents,
e.g.,
trying to process a locked queue file.
E 64
I 64
Creation of error messages,
VRFY and EXPN commands.
.ip 7
Delivery failures (host or user unknown, etc.).
.ip 8
D 150
Successful deliveries.
E 150
I 150
Successful deliveries and alias database rebuilds.
E 150
E 64
I 22
.ip 9
D 64
Log internal queue id to external message id mappings.
This can be useful for tracing a message
as it travels between several hosts.
I 48
Also logs any VRFY or EXPN requests.
.ip 11
E 64
I 64
Messages being deferred
(due to a host being down, etc.).
.ip 10
Database expansion (alias, forward, and userdb lookups).
D 150
.ip 15
Automatic alias database rebuilds.
E 150
.ip 20
E 64
Logs attempts to run locked queue files.
These are not errors,
but can be useful to note if your queue appears to be clogged.
E 48
E 22
D 64
.ip 12
Several messages that are basically only of interest
when debugging.
.ip 16
Verbose information regarding the queue.
E 64
I 64
.ip 30
Lost locks (only if using lockf instead of flock).
.lp
Additionally,
D 160
values above 64 are reserved for extremely verbose debuggging output.
E 160
I 160
values above 64 are reserved for extremely verbose debugging output.
E 160
No normal site would ever set these.
E 64
I 42
D 63
.sh 2 "Wildcard MX Records"
.pp
Normally, when
.i sendmail
is looking up host names from the name server,
it uses the querytype of
I 43
.q CNAME .
The
.b w
option will ask the name server to use a querytype of
E 43
.q ANY .
This finds CNAME, A, and MX records,
and causes the local name server to cache all records it finds,
thus improving performance.
.pp
However, if your site has wildcard MX records, this can cause problems.
For example, suppose your site has a record directing
.q "*.HiTech.COM"
to
.q "gateway.HiTech.COM" .
When the resolver looks for (e.g.)
.q "mammoth.Berkeley.EDU" ,
it starts by appending the local domain name (in this case,
.q "HiTech.COM" ),
thus looking for
.q "mammoth.Berkeley.EDU.HiTech.COM"
\*- which of course matches
.q "*.HiTech.COM" .
D 43
To prevent this,
set the
E 43
I 43
.pp
If you do not have wildcard MX records in your domain,
you can set the
E 43
.b w
D 43
option, which asserts that you have wildcard records,
and sendmail must use a less efficient lookup.
E 43
I 43
option to get better performance.
E 63
E 43
E 42
I 27
D 29
.sh 2 "Load Limiting"
.pp
.i Sendmail
can be asked to queue (but not deliver)
mail if the system load average gets too high
using the
.b x
option.
When the load average exceeds the value of the
.b x
option,
the delivery mode is set to
.b q
(queue only)
until the load drops.
.pp
For drastic cases,
the
.b X
option defines a load average at which sendmail will refuse
to connect network connections.
Locally generated mail
(including incoming UUCP mail)
is still accepted.
E 29
E 27
.sh 2 "File Modes"
.pp
D 157
There are a number of files
that may have a number of modes.
The modes depend on what functionality you want
E 157
I 157
The modes used for files depend on what functionality you want
E 157
and the level of security you require.
.sh 3 "To suid or not to suid?"
.pp
.i Sendmail
can safely be made
setuid to root.
At the point where it is about to
D 19
.i exec (2)
E 19
I 19
.i exec \|(2)
E 19
a mailer,
it checks to see if the userid is zero;
if so,
it resets the userid and groupid to a default
(set by the
.b u
and
.b g
options).
(This can be overridden
by setting the
.b S
flag to the mailer
for mailers that are trusted
and must be called as root.)
However,
this will cause mail processing
to be accounted
(using
D 19
.i sa (8))
E 19
I 19
.i sa \|(8))
E 19
to root
rather than to the user sending the mail.
I 157
.pp
If you don't make
.i sendmail
setuid to root, it will still run but you lose a lot of functionality
and a lot of privacy, since you'll have to make the queue directory
world readable.
You could also make
.i sendmail
setuid to some pseudo-user
(e.g., create a user called
.q sendmail
and make
.i sendmail
setuid to that)
which will fix the privacy problems
but not the functionality issues.
Also, this isn't a guarantee of security:
for example,
D 158
root occassionally sends mail,
E 158
I 158
root occasionally sends mail,
E 158
and the daemon often runs as root.
E 157
D 38
.sh 3 "Temporary file modes"
.pp
The mode of all temporary files that
.i sendmail
creates is determined by the
.q F
option.
Reasonable values for this option are
0600
and
0644.
If the more permissive mode is selected,
it will not be necessary to run
.i sendmail
as root at all
(even when running the queue).
E 38
.sh 3 "Should my alias database be writable?"
.pp
At Berkeley
we have the alias database
D 45
(/usr/lib/aliases*)
E 45
I 45
(/etc/aliases*)
E 45
D 38
mode 666.
There are some dangers inherent in this approach:
any user can add him-/her-self
to any list,
or can
.q steal
any other user's mail.
However,
we have found users to be basically trustworthy,
and the cost of having a read-only database
greater than the expense of finding and eradicating
the rare nasty person.
E 38
I 38
mode 644.
While this is not as flexible as if the database
were more 666, it avoids potential security problems
with a globally writable database.
E 38
.pp
The database that
.i sendmail
actually used
is represented by the two files
.i aliases.dir
and
.i aliases.pag
D 45
(both in /usr/lib).
E 45
I 45
D 53
(both in /etc).
E 53
I 53
(both in /etc)
(or
.i aliases.db
if you are running with the new Berkeley database primitives).
E 53
E 45
The mode on these files should match the mode
D 45
on /usr/lib/aliases.
E 45
I 45
on /etc/aliases.
E 45
If
.i aliases
is writable
and the
DBM
files
(\c
.i aliases.dir
and
.i aliases.pag )
are not,
users will be unable to reflect their desired changes
through to the actual database.
However,
if
.i aliases
is read-only
and the DBM files are writable,
a slightly sophisticated user
can arrange to steal mail anyway.
.pp
If your DBM files are not writable by the world
or you do not have auto-rebuild enabled
(with the
D 157
.q D
E 157
I 157
.b AutoRebuildAliases
E 157
option),
then you must be careful to reconstruct the alias database
each time you change the text version:
.(b
D 19
/usr/lib/sendmail \-bi
E 19
I 19
newaliases
E 19
.)b
If this step is ignored or forgotten
any intended changes will also be ignored or forgotten.
I 47
.sh 2 "Connection Caching"
.pp
When processing the queue,
D 117
.b sendmail
E 117
I 117
.i sendmail
E 117
will try to keep the last few open connections open
to avoid startup and shutdown costs.
This only applies to IPC connections.
.pp
When trying to open a connection
the cache is first searched.
If an open connection is found, it is probed to see if it is still active
by sending a
.sm NOOP
command.
It is not an error if this fails;
instead, the connection is closed and reopened.
.pp
Two parameters control the connection cache.
The
D 155
.b k
E 155
I 155
.b ConnectionCacheSize
(\c
.b k )
E 155
option defines the number of simultaneous open connections
that will be permitted.
If it is set to zero,
connections will be closed as quickly as possible.
The default is one.
This should be set as appropriate for your system size;
it will limit the amount of system resources that
D 117
.b sendmail
E 117
I 117
.i sendmail
E 117
will use during queue runs.
I 157
Never set this higher than 4.
E 157
.pp
The
D 155
.b K
E 155
I 155
.b ConnectionCacheTimeout
(\c
.b K )
E 155
option specifies the maximum time that any cached connection
will be permitted to idle.
When the idle time exceeds this value
the connection is closed.
This number should be small
(under ten minutes)
to prevent you from grabbing too many resources
from other hosts.
The default is five minutes.
.sh 2 "Name Server Access"
.pp
D 155
If your system supports the name server,
then the probability is that
E 155
I 155
Control of host address lookups is set by the
.b hosts
service entry in your service switch file.
If you are on a system that has built-in service switch support
(e.g., Ultrix, Solaris, or DEC OSF/1)
then your system is probably configured properly already.
Otherwise,
E 155
.i sendmail
D 117
will be using it regardless of how you configure sendmail.
D 48
However, if you set the
.b I
option,
.i sendmail
will understand that the name server versions of
E 48
I 48
However, if you have nameserver support
which you are not using,
sendmail will get a
E 117
I 117
D 155
will be using it regardless of how you configure
.i sendmail .
E 155
I 155
will consult the file
.b /etc/service.switch ,
which should be created.
.i Sendmail
only uses two entries:
.b hosts
and
.b aliases .
.pp
However, some systems (such as SunOS)
will do DNS lookups
regardless of the setting of the service switch entry.
E 155
In particular, the system routine
.i gethostbyname (3)
is used to look up host names,
D 155
and most vendor versions try some combination of DNS, NIS,
and file lookup in /etc/hosts.
.pp
However, if you do not have a nameserver configured at all,
E 155
I 155
and many vendor versions try some combination of DNS, NIS,
and file lookup in /etc/hosts
without consulting a service switch.
.i Sendmail
makes no attempt to work around this problem,
and the DNS lookup will be done anyway.
If you do not have a nameserver configured at all,
E 155
such as at a UUCP-only site,
.i sendmail
will get a
E 117
.q "connection refused"
D 155
message when it tries to connect to the name server
D 117
(either by calling
E 117
I 117
(either indirectly by calling
E 117
E 48
.i gethostbyname
D 48
can return errors that indicate temporary failures
that would otherwise be interpreted as permanent failures.
In general, you should define
E 48
I 48
D 117
or by trying to look up the MX records).
E 117
I 117
or directly by looking up MX records).
E 155
I 155
message when it tries to connect to the name server.
E 155
E 117
If the
E 48
D 155
.b I
D 48
if you are uncertain as to it's proper setting;
leaving it turned off is really a performance optimization.
E 48
I 48
option is set,
E 155
I 155
.b hosts
switch entry has the service
.q dns
listed somewhere in the list,
E 155
.i sendmail
D 117
will interpret this to mean a temporary failure;
E 117
I 117
will interpret this to mean a temporary failure
and will queue the mail for later processing;
E 117
otherwise, it ignores the name server data.
D 155
If your name server is running properly,
the setting of this option is not relevant;
however, it is important that it be set properly
to make error handling work properly.
E 155
E 48
.pp
D 51
The option should be inverted;
D 48
the current semantics are more semantic than practical.
E 48
I 48
the current semantics are more historical than practical.
E 51
I 51
D 155
This option also allows you to tweak name server options.
E 155
I 155
The same technique is used to decide whether to do MX lookups.
If you want MX support, you
.i must
have
.q dns
listed as a service in the
.b hosts
switch entry.
.pp
The
D 157
.b NameServerOptions
E 157
I 157
.b ResolverOptions
E 157
(\c
.b I )
option allows you to tweak name server options.
E 155
The command line takes a series of flags as documented in
.i resolver (3)
(with the leading
.q RES_
deleted).
Each can be preceded by an optional `+' or `\(mi'.
For example, the line
.(b
D 155
OITrue +AAONLY \(miDNSRCH
E 155
I 155
D 157
O NameServerOptions=+AAONLY \(miDNSRCH
E 157
I 157
O ResolverOptions=+AAONLY \(miDNSRCH
E 157
E 155
.)b
turns on the AAONLY (accept authoritative answers only)
and turns off the DNSRCH (search the domain path) options.
Most resolver libraries default DNSRCH, DEFNAMES, and RECURSE
flags on and all others off.
I 162
You can also include
.q HasWildcardMX
to specify that there is a wildcard MX record matching your domain;
this turns off MX matching when canonifying names,
which can lead to inappropriate canonifications.
E 162
D 155
Note the use of the initial ``True'' \*-
D 117
this is for compatibility with previous versions of sendmail,
E 117
I 117
this is for compatibility with previous versions of
.i sendmail ,
E 117
but is not otherwise necessary.
E 155
.pp
D 69
Version 1 configurations
E 69
I 69
Version level 1 configurations
E 69
turn DNSRCH and DEFNAMES off when doing delivery lookups,
but leave them on everywhere else.
D 71
Release 6 of
E 71
I 71
D 108
Version 6 of
E 108
I 108
Version 8 of
E 108
E 71
.i sendmail
ignores them when doing canonification lookups
(that is, when using $[ ... $]),
and always does the search.
If you don't want to do automatic name extension,
don't call $[ ... $].
.pp
The search rules for $[ ... $] are somewhat different than usual.
D 157
If the name (that is, the ``...'')
E 157
I 157
If the name being looked up
E 157
has at least one dot, it always tries the unmodified name first.
If that fails, it tries the reduced search path,
and lastly tries the unmodified name
(but only for names without a dot,
since names with a dot have already been tried).
This allows names such as
``utc.CS''
to match the site in Czechoslovakia
rather than the site in your local Computer Science department.
I 65
It also prefers A and CNAME records over MX records \*-
that is, if it finds an MX record it makes note of it,
but keeps looking.
This way, if you have a wildcard MX record matching your domain,
it will not assume that all names match.
I 155
.pp
To completely turn off all name server access
on systems without service switch support
(such as SunOS)
you will have to recompile with
\-DNAMED_BIND=0
D 157
(and probably remove \-lresolv from the list of libraries to be searched
when linking).
E 157
I 157
and remove \-lresolv from the list of libraries to be searched
when linking.
E 157
E 155
E 65
E 51
I 50
.sh 2 "Moving the Per-User Forward Files"
.pp
Some sites mount each user's home directory
from a local disk on their workstation,
so that local access is fast.
However, the result is that .forward file lookups are slow.
In some cases,
mail can even be delivered on machines inappropriately
because of a file server being down.
The performance can be especially bad if you run the automounter.
.pp
The
D 155
.b J
E 155
I 155
.b ForwardPath
(\c
.b J )
E 155
option allows you to set a path of forward files.
For example, the config file line
.(b
D 155
OJ/var/forward/$u:$z/.forward
E 155
I 155
D 157
O ForwardPath=/var/forward/$u:$z/.forward
E 157
I 157
O ForwardPath=/var/forward/$u:$z/.forward.$w
E 157
E 155
.)b
would first look for a file with the same name as the user's login
in /var/forward;
if that is not found (or is inaccessible)
the file
D 157
.q \&.forward
E 157
I 157
``.forward.\c
.i machinename ''
E 157
in the user's home directory is searched.
A truly perverse site could also search by sender
by using $r, $s, or $f.
.pp
If you create a directory such as /var/forward,
it should be mode 1777
(that is, the sticky bit should be set).
Users should create the files mode 644.
I 67
.sh 2 "Free Space"
.pp
D 69
On systems that have hte
E 69
I 69
D 157
On systems that have the
E 157
I 157
On systems that have one of the system calls in the
E 157
E 69
.i statfs (2)
D 157
system call,
E 157
I 157
family
(including
.i statvfs
and
.i ustat ),
E 157
you can specify a minimum number of free blocks on the queue filesystem
using the
D 155
.b b
E 155
I 155
.b MinFreeBlocks
(\c
.b b )
E 155
option.
If there are fewer than the indicated number of blocks free
on the filesystem on which the queue is mounted
the SMTP server will reject mail
with the
452 error code.
This invites the SMTP client to try again later.
.pp
Beware of setting this option too high;
it can cause rejection of email
when that mail would be processed without difficulty.
I 157
.sh 2 "Maximum Message Size"
E 157
I 95
.pp
D 157
This option can also specify an advertised
.q "maximum message size"
for hosts that speak ESMTP.
E 157
I 157
To avoid overflowing your system with a large message,
the
.b MaxMessageSize
option can be set to set an absolute limit
on the size of any one message.
This will be advertised in the ESMTP dialogue
and checked during message collection.
E 157
E 95
.sh 2 "Privacy Flags"
.pp
The
D 155
.b p
E 155
I 155
.b PrivacyOptions
(\c
.b p )
E 155
option allows you to set certain
``privacy''
flags.
Actually, many of them don't give you any extra privacy,
rather just insisting that client SMTP servers
use the HELO command
D 157
before using certain commands.
E 157
I 157
before using certain commands
or adding extra headers to indicate possible spoof attempts.
E 157
.pp
The option takes a series of flag names;
the final privacy is the inclusive or of those flags.
For example:
.(b
D 102
Ob needmailhelo, noexpn
E 102
I 102
D 155
Op needmailhelo, noexpn
E 155
I 155
O PrivacyOptions=needmailhelo, noexpn
E 155
E 102
.)b
D 74
insists that the HELO command be used before a MAIL command is accepted
E 74
I 74
insists that the HELO or EHLO command be used before a MAIL command is accepted
E 74
and disables the EXPN command.
I 72
.pp
D 157
The
.q restrictmailq
option restricts printing the queue to the group that owns the queue directory.
It is absurd to set this if you don't also protect the logs.
I 122
.pp
The
.q restrictqrun
option restricts people running the queue
(that is, using the
.b \-q
command line flag)
to root and the owner of the queue directory.
E 157
I 157
The flags are detailed in section
.\"XREF
5.1.6.
E 157
E 122
I 97
.sh 2 "Send to Me Too"
.pp
Normally,
.i sendmail
deletes the (envelope) sender from any list expansions.
For example, if
.q matt
sends to a list that contains
.q matt
as one of the members he won't get a copy of the message.
If the
.b \-m
(me too)
command line flag, or if the
D 155
.b m
E 155
I 155
.b MeToo
(\c
.b m )
E 155
option is set in the configuration file,
D 158
this behaviour is supressed.
E 158
I 158
this behaviour is suppressed.
E 158
Some sites like to run the
.sm SMTP
daemon with
.b \-m .
E 97
E 72
E 67
E 50
E 48
E 47
E 8
E 2
.sh 1 "THE WHOLE SCOOP ON THE CONFIGURATION FILE"
.pp
This section describes the configuration file
D 157
in detail,
including hints on how to write one of your own
if you have to.
E 157
I 157
in detail.
E 157
.pp
There is one point that should be made clear immediately:
the syntax of the configuration file
is designed to be reasonably easy to parse,
since this is done every time
.i sendmail
starts up,
rather than easy for a human to read or write.
On the
.q "future project"
list is a
configuration-file compiler.
.pp
D 157
An overview of the configuration file
is given first,
followed by details of the semantics.
D 53
.sh 2 "The Syntax"
E 53
I 53
.sh 2 "Configuration File Lines"
E 53
.pp
E 157
The configuration file is organized as a series of lines,
each of which begins with a single character
defining the semantics for the rest of the line.
Lines beginning with a space or a tab
are continuation lines
(although the semantics are not well defined in many places).
Blank lines and lines beginning with a sharp symbol
(`#')
are comments.
D 157
.sh 3 "R and S \*- rewriting rules"
E 157
I 157
.sh 2 "R and S \*- Rewriting Rules"
E 157
.pp
The core of address parsing
are the rewriting rules.
These are an ordered production system.
.i Sendmail
scans through the set of rewriting rules
looking for a match on the left hand side
(LHS)
of the rule.
When a rule matches,
the address is replaced by the right hand side
(RHS)
of the rule.
.pp
There are several sets of rewriting rules.
Some of the rewriting sets are used internally
and must have specific semantics.
Other rewriting sets
do not have specifically assigned semantics,
and may be referenced by the mailer definitions
or by other rewriting sets.
.pp
The syntax of these two commands are:
.(b F
.b S \c
.i n
.)b
Sets the current ruleset being collected to
.i n .
If you begin a ruleset more than once
it deletes the old definition.
.(b F
.b R \c
.i lhs
.i rhs
.i comments
.)b
The
fields must be separated
by at least one tab character;
there may be embedded spaces
in the fields.
The
.i lhs
is a pattern that is applied to the input.
If it matches,
the input is rewritten to the
.i rhs .
The
.i comments
are ignored.
I 88
.pp
Macro expansions of the form
.b $ \c
.i x
are performed when the configuration file is read.
Expansions of the form
.b $& \c
.i x
are performed at run time using a somewhat less general algorithm.
This for is intended only for referencing internally defined macros
such as
.b $h
that are changed at runtime.
E 88
D 53
.sh 3 "D \*- define macro"
E 53
I 53
D 157
.sh 4 "The left hand side"
E 157
I 157
.sh 3 "The left hand side"
E 157
E 53
.pp
D 53
Macros are named with a single character.
These may be selected from the entire ASCII set,
but user-defined macros
should be selected from the set of upper case letters only.
Lower case letters
and special symbols
are used internally.
.pp
The syntax for macro definitions is:
.(b F
.b D \c
.i x\|val
E 53
I 53
The left hand side of rewriting rules contains a pattern.
Normal words are simply matched directly.
Metasyntax is introduced using a dollar sign.
The metasymbols are:
.(b
.ta \w'\fB$=\fP\fIx\fP  'u
\fB$*\fP	Match zero or more tokens
\fB$+\fP	Match one or more tokens
\fB$\-\fP	Match exactly one token
D 83
\fB$=\fP\fIx\fP	Match any token in class \fIx\fP
\fB$~\fP\fIx\fP	Match any token not in class \fIx\fP
E 83
I 83
\fB$=\fP\fIx\fP	Match any phrase in class \fIx\fP
D 85
\fB$~\fP\fIx\fP	Match any phrase not in class \fIx\fP
E 85
I 85
\fB$~\fP\fIx\fP	Match any word not in class \fIx\fP
E 85
E 83
E 53
.)b
D 53
where
.i x
is the name of the macro
and
.i val
is the value it should have.
Macros can be interpolated in most places using the escape sequence
E 53
I 53
If any of these match,
they are assigned to the symbol
E 53
.b $ \c
D 53
.i x .
.sh 3 "C and F \*- define classes"
.pp
Classes of words may be defined
D 38
to match on the left hand side of rewriting rules.
E 38
I 38
to match on the left hand side of rewriting rules,
where a
.q word
is a sequence of characters that do not contain characters
in the $o macro.
E 38
For example
a class of all local names for this site
might be created
so that attempts to send to oneself
can be eliminated.
These can either be defined directly in the configuration file
or read in from another file.
Classes may be given names
from the set of upper case letters.
I 20
Lower case letters and special characters
are reserved for system use.
E 20
.pp
The syntax is:
.(b F
.b C \c
.i c\|word1
.i word2...
.br
.b F \c
.i c\|file
E 53
I 53
.i n
for replacement on the right hand side,
where
.i n
is the index in the LHS.
For example,
if the LHS:
.(b
$\-:$+
E 53
D 36
[
.i format
]
E 36
.)b
D 53
The first form defines the class
.i c
to match any of the named words.
It is permissible to split them among multiple lines;
for example, the two forms:
E 53
I 53
is applied to the input:
E 53
.(b
D 53
CHmonet ucbmonet
E 53
I 53
UCBARPA:eric
E 53
.)b
D 53
and
E 53
I 53
the rule will match, and the values passed to the RHS will be:
E 53
.(b
D 53
CHmonet
CHucbmonet
E 53
I 53
.ta 4n
$1	UCBARPA
$2	eric
E 53
.)b
I 71
.pp
Additionally, the LHS can include
.b $@
to match zero tokens.
This is
.i not
bound to a
.b $ \c
D 157
.i N
E 157
I 157
.i n
E 157
on the RHS, and is normally only used when it stands alone
in order to match the null input.
E 71
D 53
are equivalent.
The second form
reads the elements of the class
.i c
from the named
D 36
.i file ;
the
.i format
D 19
is a scanf(3) pattern
E 19
I 19
is a
.i scanf \|(3)
pattern
E 19
that should produce a single string.
E 36
I 36
.i file .
E 36
.sh 3 "M \*- define mailer"
E 53
I 53
D 157
.sh 4 "The right hand side"
E 157
I 157
.sh 3 "The right hand side"
E 157
E 53
.pp
D 53
Programs and interfaces to mailers
are defined in this line.
The format is:
.(b F
.b M \c
D 16
.i name
.i pathname
.i flags
.i sender-rws
D 6
.i recipient-rws
E 6
I 6
.i rcpt-rws
E 6
.i argv
E 16
I 16
.i name ,
I 19
{\c
E 19
.i field =\c
D 19
.i value
E 19
I 19
.i value \|}*
E 19
E 16
.)b
where
.i name
is the name of the mailer
D 16
(used internally only),
.i pathname
is where to find it,
.i flags
are a set of flags describing the various properties
of the mailer,
.i sender-rws
is the rewriting set
to apply to sender addresses,
D 6
.i recipient-rws
E 6
I 6
.i rcpt-rws
E 6
is the rewriting set
to apply to recipient addresses,
and
.i argv
is the list of arguments the mailer takes.
E 16
I 16
(used internally only)
and the
.q field=name
pairs define attributes of the mailer.
Fields are:
E 53
I 53
When the left hand side of a rewriting rule matches,
the input is deleted and replaced by the right hand side.
Tokens are copied directly from the RHS
unless they begin with a dollar sign.
Metasymbols are:
E 53
.(b
D 53
.ta 1i
Path	The pathname of the mailer
Flags	Special flags for this mailer
Sender	A rewriting set for sender addresses
Recipient	A rewriting set for recipient addresses
Argv	An argument vector to pass to this mailer
Eol	The end-of-line string for this mailer
I 20
Maxsize	The maximum message length to this mailer
I 47
Linelimit	The maximum line length in the message body
E 53
I 53
.ta \w'$#mailer\0\0\0'u
\fB$\fP\fIn\fP	Substitute indefinite token \fIn\fP from LHS
\fB$[\fP\fIname\fP\fB$]\fP	Canonicalize \fIname\fP
\fB$(\fP\fImap key\fP \fB$@\fP\fIarguments\fP \fB$:\fP\fIdefault\fP \fB$)\fP
	Generalized keyed mapping function
\fB$>\fP\fIn\fP	\*(lqCall\*(rq ruleset \fIn\fP
\fB$#\fP\fImailer\fP	Resolve to \fImailer\fP
\fB$@\fP\fIhost\fP	Specify \fIhost\fP
\fB$:\fP\fIuser\fP	Specify \fIuser\fP
E 53
E 47
E 20
.)b
D 53
Only the first character of the field name is checked.
E 16
.sh 3 "H \*- define header"
E 53
.pp
D 53
The format of the header lines that sendmail inserts into the message
are defined by the
.b H
line.
The syntax of this line is:
.(b F
.b H [\c
.b ? \c
.i mflags \c
.b ? ]\c
.i hname \c
.b :
.i htemplate
.)b
Continuation lines in this spec
are reflected directly into the outgoing message.
E 53
The
D 53
.i htemplate
is macro expanded before insertion into the message.
If the
.i mflags
I 6
(surrounded by question marks)
E 6
are specified,
at least one of the specified flags
must be stated in the mailer definition
for this header to be automatically output.
If one of these headers is in the input
it is reflected to the output
regardless of these flags.
.pp
Some headers have special semantics
that will be described below.
.sh 3 "O \*- set option"
.pp
There are a number of
.q random
options that
can be set from a configuration file.
Options are represented by single characters.
The syntax of this line is:
.(b F
.b O \c
.i o\|value
.)b
This sets option
.i o
to be
.i value .
Depending on the option,
.i value
may be a string, an integer,
a boolean
(with legal values
.q t ,
.q T ,
.q f ,
E 53
I 53
.b $ \c
.i n
syntax substitutes the corresponding value from a
.b $+ ,
.b $\- ,
.b $* ,
.b $= ,
E 53
or
D 53
.q F ;
the default is TRUE),
or
a time interval.
.sh 3 "T \*- define trusted users"
E 53
I 53
.b $~
match on the LHS.
It may be used anywhere.
E 53
.pp
D 53
Trusted users
are those users who are permitted
to override the sender address
using the
.b \-f
flag.
These typically are
.q root,
.q uucp,
E 53
I 53
A host name enclosed between
.b $[
E 53
and
D 53
.q network,
but on some users it may be convenient
to extend this list to include other users,
perhaps to support
a separate
UUCP
login for each host.
The syntax of this line is:
.(b F
.b T \c
.i user1
.i user2 ...
.)b
D 6
There may be any number of these lines.
E 6
I 6
There may be more than one of these lines.
E 6
.sh 3 "P \*- precedence definitions"
.pp
Values for the
.q "Precedence:"
field may be defined using the
.b P
control line.
The syntax of this field is:
.(b
\fBP\fP\fIname\fP\fB=\fP\fInum\fP
.)b
When the
.i name
is found in a
.q Precedence:
field,
the message class is set to
.i num .
Higher numbers mean higher precedence.
Numbers less than zero
have the special property
D 6
that error messages will not be returned;
E 6
I 6
that error messages will not be returned.
E 6
The default precedence is zero.
E 53
I 53
.b $]
D 157
is looked up using the
.i gethostent \|(3)
D 67
routines and replaced by the canonical name.
E 67
I 67
routines and replaced by the canonical name\**.
E 157
I 157
is looked up in the host database(s)
and replaced by the canonical name\**.
E 157
.(f
\**This is actually
completely equivalent
to $(host \fIhostname\fP$).
In particular, a
.b $:
default can be used.
.)f
E 67
E 53
For example,
D 53
our list of precedences is:
.(b
Pfirst-class=0
Pspecial-delivery=100
D 19
Pjunk=-100
E 19
I 19
Pjunk=\-100
E 19
.)b
I 47
.sh 3 "V \*- configuration version level"
E 53
I 53
D 157
.q $[csam$]
E 157
I 157
.q $[ftp$]
E 157
might become
D 157
.q lbl-csam.arpa
E 157
I 157
.q ftp.CS.Berkeley.EDU
E 157
and
.q $[[128.32.130.2]$]
would become
.q vangogh.CS.Berkeley.EDU.
I 69
.i Sendmail
recognizes it's numeric IP address
without calling the name server
and replaces it with it's canonical name.
E 69
E 53
.pp
D 53
To provide compatibility with old configuration files,
the
.b V
line has been added to define some very basic semantics
of the configuration file.
These are not intended to be long term supports;
rather, they describe compatibility features
which will probably be removed in future releases.
E 53
I 53
The
.b $(
\&...
.b $)
syntax is a more general form of lookup;
it uses a named map instead of an implicit map.
D 139
If no lookup is found, the indicted
E 139
I 139
If no lookup is found, the indicated
E 139
.i default
is inserted;
if no default is specified and no lookup matches,
the value is left unchanged.
I 157
The
.i arguments
are passed to the map for possible use.
E 157
E 53
.pp
D 53
.q Old
configuration files are defined as level one.
Level two files make the following changes:
.np
Host name canonification ($[ ... $])
appends a dot if the name is recognized;
this gives the config file a way of finding out if anything matched.
I 50
(Actually, this just initializes the
.q host
map with the
.q \-a.
flag \*- you can reset it to anything you prefer
by declaring the map explicitly.)
E 50
.np
Default host name extension is consistent throughout processing;
level one configurations turned off domain extension
(that is, adding the local domain name)
during certain points in processing.
Level two configurations are expected to include a trailing dot
to indicate that the name is already canonical.
.np
Local names that are not aliases
are passed through a new distinguished ruleset five;
this can be used to append a local relay.
This behaviour can be prevented by resolving the local name
with an initial `@'.
That is, something that resolves to a local mailer and a user name of
.q vikki
will be passed through ruleset five,
but a user name of
.q @vikki
will have the `@' stripped,
will not be passed through ruleset five,
but will otherwise be treated the same as the prior example.
The expectation is that this might be used to implement a policy
where mail sent to
.q vikki
was handled by a central hub,
but mail sent to
.q vikki@localhost
was delivered directly.
E 53
I 53
The
.b $> \c
.i n
syntax
causes the remainder of the line to be substituted as usual
and then passed as the argument to ruleset
.i n .
The final value of ruleset
.i n
then becomes
the substitution for this rule.
I 155
The
.b $>
syntax can only be used at the beginning of the right hand side;
it can be only be preceded by
.b $@
or
.b $: .
E 155
E 53
.pp
D 53
Level three files
allow # initiated comments on all lines.
Exceptions are backslash escaped # marks
and the $# syntax.
.sh 3 "K \*- key file declaration"
.pp
Special maps can be defined using the line:
.(b
Kmapname mapclass arguments
.)b
E 53
The
D 53
.i mapname
is the handle by which this map is referenced in the rewriting rules.
The
.i mapclass
is the name of a type of map;
these are compiled in to sendmail.
The
.i arguments
are interpreted depending on the class;
typically,
there would be a single argument naming the file containing the map.
.pp
Maps are referenced using the syntax:
E 53
I 53
.b $#
syntax should
.i only
D 116
be used in ruleset zero.
E 116
I 116
be used in ruleset zero
or a subroutine of ruleset zero.
E 116
It causes evaluation of the ruleset to terminate immediately,
D 117
and signals to sendmail that the address has completely resolved.
E 117
I 117
and signals to
.i sendmail
that the address has completely resolved.
E 117
The complete syntax is:
E 53
.(b
D 53
$( \fImap\fP \fIkey\fP $@ \fIarguments\fP $: \fIdefault\fP $)
E 53
I 53
D 69
\fB$#\fP\fImailer\fP\fB$@\fP\fIhost\fP\fB$:\fP\fIuser\fP
E 69
I 69
\fB$#\fP\fImailer\fP \fB$@\fP\fIhost\fP \fB$:\fP\fIuser\fP
E 69
E 53
.)b
D 53
where either or both of the
.i arguments
or
.i default
portion may be omitted.
E 53
I 53
This specifies the
{mailer, host, user}
3-tuple necessary to direct the mailer.
If the mailer is local
D 76
the host part may be omitted.
E 76
I 76
the host part may be omitted\**.
.(f
\**You may want to use it for special
.q "per user"
extensions.
D 157
For example, at CMU you can send email to
.q jgm+foo ;
the part after the plus sign
is not part of the user name,
E 157
I 157
For example, in the address
.q jgm+foo@CMU.EDU ;
the
.q +foo
part is not part of the user name,
E 157
and is passed to the local mailer for local use.
.)f
E 76
E 53
I 49
The
D 53
.i arguments
may appear more than once.
E 49
The indicated
.i key
E 53
I 53
.i mailer
E 53
D 92
and
D 53
.i arguments
are passed to the appropriate mapping function.
If it returns a value, it replaces the input.
If it does not return a value and the
.i default
is specified, the
.i default
replaces the input.
Otherwise, the input is unchanged.
E 53
I 53
.i host
E 92
must be a single word,
but the
I 92
.i host
and
E 92
.i user
may be multi-part.
I 92
If the
.i mailer
is the builtin IPC mailer,
the
.i host
may be a colon-separated list of hosts
that are searched in order for the first working address
(exactly like MX records).
I 139
The
.i user
is later rewritten by the mailer-specific envelope rewriting set
and assigned to the
.b $u
macro.
I 145
As a special case, if the value to
.b $#
is
.q local
and the first character of the
.b $:
value is
.q @ ,
the
.q @
is stripped off, and a flag is set in the address descriptor
that causes sendmail to not do ruleset 5 processing.
E 145
E 139
E 92
E 53
.pp
I 139
D 145
Normally, a ruleset that matches is retried,
E 145
I 145
Normally, a rule that matches is retried,
E 145
that is,
D 145
the ruleset loops until it fails.
E 145
I 145
the rule loops until it fails.
E 145
E 139
I 49
D 53
During replacement of either a map value or default
the string
.q %\fIn\fP
(where
.i n
is a digit)
is replaced by the corresponding
.i argument .
Argument zero
is always the original pattern.
For example, the rule
.(b
R$- ! $+	$: $(uucp $1 $@ $2 $: %1 @ %0 . UUCP $)
.)b
Looks up the UUCP name in a (user defined) UUCP map;
if not found it turns it into
.q ``\&.UUCP'' form.  The database might contain records like:
.(b
decvax	%1@%0.DEC.COM
research	%1@%0.ATT.COM
.)b
E 53
I 53
A RHS may also be preceded by a
.b $@
or a
.b $:
D 139
to control evaluation.
E 139
I 139
to change this behavior.
E 139
A
.b $@
prefix causes the ruleset to return with the remainder of the RHS
as the value.
A
.b $:
prefix causes the rule to terminate immediately,
but the ruleset to continue;
this can be used to avoid continued application of a rule.
The prefix is stripped before continuing.
E 53
.pp
E 49
D 53
The built in map with both name and class
.q host
is the host name canonicalization lookup.
Thus,
the syntax:
E 53
I 53
The
.b $@
and
.b $:
prefixes may precede a
.b $>
spec;
for example:
E 53
.(b
D 53
$(host \fIhostname\fP$)
E 53
I 53
.ta 8n
D 69
R$+	$:$>7$1
E 69
I 69
R$+	$: $>7 $1
E 69
E 53
.)b
D 53
is equivalent to:
.(b
$[\fIhostname\fP$]
.)b
E 53
I 53
matches anything,
passes that to ruleset seven,
and continues;
the
.b $:
is necessary to avoid an infinite loop.
E 53
I 49
.pp
D 52
There are three predefined database lookup classes:
E 52
I 52
D 53
There are four predefined database lookup classes:
E 52
.q dbm ,
.q btree ,
I 52
.q hash ,
E 53
I 53
Substitution occurs in the order described,
that is,
parameters from the LHS are substituted,
hostnames are canonicalized,
.q subroutines
are called,
and finally
.b $# ,
.b $@ ,
E 53
E 52
and
D 52
.q hash .
E 52
I 52
D 53
.q nis .
E 52
The first requires that sendmail be compiled with the
.b ndbm
library;
the second two require the
.b db
D 52
library.
All three accept as arguments the some optional flags
and a filename.
E 52
I 52
library,
and the third requires that sendmail be compiled with NIS support.
All four accept as arguments the some optional flags
and a filename (or a mapname for NIS).
E 52
Known flags are:
.ip "\-o"
Indicates that this map is optional \*- that is,
if it cannot be opened,
no error is produced,
and sendmail will behave as if the map existed but was empty.
.ip "\-N"
Normally sendmail does not include the trailing null byte
on a string as part of the key.
If this flag is indicated,
it will be included.
This is for compatibility with some methods of building the maps.
.ip "\-a\fIx\fP"
Append the character
.i x
on successful matches.
D 50
For example, the
E 50
I 50
For example, the default
E 50
.i host
map appends a dot on successful matches.
I 52
.ip "\-d\fIdomain\fP"
Use the indicated
.i domain
instead of the default domain.
Used only for NIS maps.
E 52
I 50
.ip "\-f"
Fold upper to lower case before looking up the key.
I 52
.ip "\-m"
Match only (without replacing the value).
If you only care about the existence of a key and not the value
(as you might when searching the NIS map
.q hosts.byname
for example),
this flag prevents the map from substituting the value.
However,
The \-a argument is still appended on a match,
and the default is still taken if the match fails.
E 53
I 53
.b $:
are processed.
D 74
..sh 3 "D \*- define macro"
E 74
I 74
D 157
.sh 4 "Semantics of rewriting rule sets"
E 157
I 157
.sh 3 "Semantics of rewriting rule sets"
E 157
E 74
E 53
E 52
E 50
.pp
I 74
There are five rewriting sets
that have specific semantics.
D 149
These are related as depicted by figure 2.
E 149
I 149
D 157
These are related as depicted by figure 1.
E 157
I 157
Four of these are related as depicted by figure 1.
E 157
E 149
.(z
.hl
.ie n \{\
.(c
                    +---+
                 -->| 0 |-->resolved address
                /   +---+
               /            +---+   +---+
              /        ---->| 1 |-->| S |--
       +---+ / +---+  /     +---+   +---+  \e    +---+
addr-->| 3 |-->| D |--                      --->| 4 |-->msg
       +---+   +---+  \e     +---+   +---+  /    +---+
                        --->| 2 |-->| R |--
                            +---+   +---+
.)c

.\}
.el .ie !"\*(.T"" \
\{\
.PS
boxwid = 0.3i
boxht = 0.3i
movewid = 0.3i
moveht = 0.3i
linewid = 0.3i
lineht = 0.3i

	box invis "addr"; arrow
Box3:	box "3"
A1:	arrow
BoxD:	box "D"; line; L1: Here
C:	[
	C1:	arrow; box "1"; arrow; box "S"; line; E1: Here
		move to C1 down 0.5; right
	C2:	arrow; box "2"; arrow; box "R"; line; E2: Here
	] with .w at L1 + (0.5, 0)
	move to C.e right 0.5
L4:	arrow; box "4"; arrow; box invis "msg"
	line from L1 to C.C1
	line from L1 to C.C2
	line from C.E1 to L4
	line from C.E2 to L4
	move to BoxD.n up 0.6; right
Box0:	arrow; box "0"
	arrow; box invis "resolved address" width 1.3
	line from 1/3 of the way between A1 and BoxD.w to Box0
.PE
.\}
.el .sp 2i
.ce
D 149
Figure 2 \*- Rewriting set semantics
E 149
I 149
Figure 1 \*- Rewriting set semantics
E 149
.(c
D \*- sender domain addition
S \*- mailer-specific sender rewriting
R \*- mailer-specific recipient rewriting
.)c
.hl
.)z
.pp
Ruleset three
should turn the address into
.q "canonical form."
This form should have the basic syntax:
.(b
local-part@host-domain-spec
.)b
I 157
Ruleset three
is applied by
.i sendmail
before doing anything with any address.
.pp
E 157
If no
.q @
sign is specified,
then the
host-domain-spec
.i may
D 157
be appended from the
E 157
I 157
be appended (box
.q D
in Figure 1)
from the
E 157
sender address
(if the
.b C
flag is set in the mailer definition
corresponding to the
.i sending
mailer).
D 157
Ruleset three
D 117
is applied by sendmail
E 117
I 117
is applied by
.i sendmail
E 117
before doing anything with any address.
E 157
.pp
Ruleset zero
is applied after ruleset three
to addresses that are going to actually specify recipients.
It must resolve to a
.i "{mailer, host, user}"
triple.
The
.i mailer
must be defined in the mailer definitions
from the configuration file.
The
.i host
is defined into the
.b $h
macro
for use in the argv expansion of the specified mailer.
.pp
Rulesets one and two
are applied to all sender and recipient addresses respectively.
They are applied before any specification
in the mailer definition.
They must never resolve.
.pp
Ruleset four is applied to all addresses
in the message.
It is typically used
to translate internal to external form.
D 157
.sh 4 "IPC mailers"
E 157
I 157
.sh 3 "IPC mailers"
E 157
.pp
Some special processing occurs
D 92
if the ruleset zero resolves to an IPC mailer.
E 92
I 92
if the ruleset zero resolves to an IPC mailer
(that is, a mailer that has
.q [IPC]
listed as the Path in the
.b M
configuration line.
E 92
The host name passed after
.q $@
has MX expansion performed;
this looks the name up in DNS to find alternate delivery sites.
.pp
The host name can also be provided as a dotted quad in square brackets;
for example:
.(b
[128.32.149.78]
.)b
This causes direct conversion of the numeric value
to a TCP/IP host address.
.pp
I 92
The host name passed in after the
.q $@
may also be a colon-separated list of hosts.
Each is separately MX expanded and the results are concatenated
to make (essentially) one long MX list.
The intent here is to create
.q fake
MX records that are not published in DNS
for private internal networks.
.pp
E 92
As a final special case, the host name can be passed in
as a text string
in square brackets:
.(b
[ucbvax.berkeley.edu]
.)b
This form avoids the MX mapping.
.b N.B.:
I 157
.i
E 157
D 150
This is intended only for situations where you have a network firewall,
E 150
I 150
This is intended only for situations where you have a network firewall
or other host that will do special processing for all your mail,
E 150
so that your MX record points to a gateway machine;
this machine could then do direct delivery to machines
within your local domain.
Use of this feature directly violates RFC 1123 section 5.3.5:
it should not be used lightly.
D 157
.sh 3 "D \*- define macro"
E 157
I 157
.r
.sh 2 "D \*- Define Macro"
E 157
.pp
E 74
D 53
The
.i dbm
map appends the strings
.q \&.pag
E 53
I 53
D 155
Macros are named with a single character.
These may be selected from the entire ASCII set,
E 155
I 155
Macros are named with a single character
or with a word in {braces}.
Single character names may be selected from the entire ASCII set,
E 155
but user-defined macros
should be selected from the set of upper case letters only.
Lower case letters
and special symbols
are used internally.
I 165
Long names beginning with a lower case letter or a punctuation character
are reserved for use by sendmail,
so user-defined long macro names should begin with an upper case letter.
E 165
.pp
The syntax for macro definitions is:
.(b F
.b D \c
.i x\|val
.)b
where
.i x
is the name of the macro
I 155
(which may be a single character
or a word in braces)
E 155
E 53
and
D 53
.q \&.dir
to the given filename;
D 52
the other two maps do not.
E 52
I 52
the two
.i db -based
maps do not.
E 53
I 53
.i val
is the value it should have.
I 157
There should be no spaces given
that do not actually belong in the macro value.
E 157
E 53
E 52
.pp
D 53
The program
.i makemap (8)
D 52
can be used to build any of these three maps.
E 52
I 52
can be used to build any of the three database-oriented maps.
E 52
I 50
It takes the following flags:
.ip \-f
Fold upper to lower case in the map.
.ip \-N
Include null bytes in keys.
.ip \-o
Append to an existing (old) file.
.ip \-r
Allow replacement of existing keys;
normally, re-inserting an existing key is an error.
.ip \-v
Print what is happening.
E 50
E 49
.pp
New classes can be added in the routine
.b setupmaps
in file
.b conf.c .
D 50
As of this writing the set of classes is weak;
but addition of DBM/DB maps is expected.
E 50
E 47
.sh 2 "The Semantics"
.pp
This section describes the semantics of the configuration file.
.sh 3 "Special macros, conditionals"
.pp
E 53
Macros are interpolated
using the construct
.b $ \c
.i x ,
where
.i x
is the name of the macro to be interpolated.
D 88
In particular,
lower case letters are reserved to have
special semantics,
used to pass information in or out of sendmail,
and some special characters are reserved to
provide conditionals, etc.
E 88
I 88
This interpolation is done when the configuration file is read,
except in
.b M
lines.
The special construct
.b $& \c
.i x
can be used in
.b R
lines to get deferred interpolation.
E 88
.pp
I 30
Conditionals can be specified using the syntax:
.(b
$?x text1 $| text2 $.
.)b
This interpolates
.i text1
if the macro
.b $x
is set,
and
.i text2
otherwise.
The
.q else
(\c
.b $| )
clause may be omitted.
.pp
I 88
Lower case macro names are reserved to have
special semantics,
D 117
used to pass information in or out of sendmail,
E 117
I 117
used to pass information in or out of
.i sendmail ,
E 117
and special characters are reserved to
provide conditionals, etc.
Upper case names
(that is,
.b $A
through
.b $Z )
are specifically reserved for configuration file authors.
.pp
E 88
E 30
D 119
The following macros
.i must
be defined to transmit information into
D 117
.i sendmail:
E 117
I 117
.i sendmail :
E 117
.(b
.ta 4n
I 21
e	The SMTP entry message
E 21
j	The \*(lqofficial\*(rq domain name for this site
l	The format of the UNIX from line
n	The name of the daemon (for error messages)
o	The set of "operators" in addresses
q	default format of sender address
.)b
The
I 21
.b $e
macro is printed out when SMTP starts up.
E 119
I 119
The following macros are defined and/or used internally by
.i sendmail
for interpolation into argv's for mailers
or for other contexts.
The ones marked \(dg are information passed into sendmail\**,
.(f
\**As of version 8.6,
all of these macros have reasonable defaults.
Previous versions required that they be defined.
.)f
the ones marked \(dd are information passed both in and out of sendmail,
and the unmarked macros are passed out of sendmail
but are not otherwise used internally.
These macros are:
.nr ii 5n
.ip $a
D 157
.b "The origination date in RFC 822 format."
E 157
I 157
The origination date in RFC 822 format.
This is extracted from the Date: line.
E 157
.ip $b
D 157
.b "The current date in RFC 822 format."
E 157
I 157
The current date in RFC 822 format.
E 157
.ip $c
D 157
.b "The hop count."
E 157
I 157
The hop count.
This is a count of the number of Received: lines
plus the value of the
.b \-h
command line flag.
E 157
.ip $d
D 157
.b "The current date in UNIX (ctime) format."
E 157
I 157
The current date in UNIX (ctime) format.
E 157
.ip $e\(dg
D 157
.b "The SMTP entry message."
E 157
I 157
The SMTP entry message.
E 157
This is printed out when SMTP starts up.
E 119
The first word must be the
E 21
.b $j
I 21
D 119
macro.
The
E 119
I 119
macro as specified by RFC821.
Defaults to
.q "$j Sendmail $v ready at $b" .
Commonly redefined to include the configuration version number, e.g.,
.q "$j Sendmail $v/$Z ready at $b"
.ip $f
D 157
.b "The sender (from) address."
E 157
I 157
The envelope sender (from) address.
E 157
.ip $g
D 157
.b "The sender address relative to the recipient."
E 157
I 157
The sender address relative to the recipient.
For example, if
.b $f
is
.q foo ,
.b $g
will be
.q host!foo ,
.q foo@host.domain ,
or whatever is appropriate for the receiving mailer.
E 157
.ip $h
D 157
.b "The recipient host."
E 157
I 157
The recipient host.
This is set in ruleset 0 from the $# field of a parsed address.
E 157
.ip $i
D 157
.b "The queue id."
E 157
I 157
The queue id,
e.g.,
.q HAA12345 .
E 157
.ip $j\(dd
D 157
.b "The \*(lqofficial\*(rq domain name for this site."
E 157
I 157
The \*(lqofficial\*(rq domain name for this site.
E 157
This is fully qualified if the full qualification can be found.
It
.i must
be redefined to be the fully qualified domain name
if your system is not configured so that information can find
it automatically.
.ip $k
D 157
.b "The UUCP node name (from the uname system call)."
E 157
I 157
The UUCP node name (from the uname system call).
E 157
.ip $l\(dg
D 157
.b "The format of the UNIX from line."
E 157
I 157
The format of the UNIX from line.
E 157
Unless you have changed the UNIX mailbox format,
you should not change the default,
which is
.q "From $g  $d" .
.ip $m
D 157
.b "The domain part of the \fIgethostname\fP return value."
E 157
I 157
The domain part of the \fIgethostname\fP return value.
E 157
Under normal circumstances,
E 119
.b $j
E 21
D 119
macro
should be in RFC821 format.
The
.b $l
and
.b $n
macros can be considered constants
except under terribly unusual circumstances.
The
.b $o
macro consists of a list of characters
E 119
I 119
is equivalent to
.b $w.$m .
.ip $n\(dg
D 157
.b "The name of the daemon (for error messages)."
E 157
I 157
The name of the daemon (for error messages).
E 157
Defaults to
.q MAILER-DAEMON .
.ip $o\(dg
D 143
.b "The set of "operators" in addresses."
E 143
I 143
D 157
.b "The set of \*(lqoperators\*(rq in addresses."
E 157
I 157
The set of \*(lqoperators\*(rq in addresses.
E 157
E 143
A list of characters
E 119
which will be considered tokens
and which will separate tokens
when doing parsing.
For example, if
D 30
.q r
E 30
I 30
.q @
E 30
were in the
.b $o
macro, then the input
D 30
.q address
E 30
I 30
.q a@b
E 30
would be scanned as three tokens:
D 30
.q add,
.q r,
E 30
I 30
.q a,
.q @,
E 30
and
D 30
.q ess.
E 30
I 30
.q b.
E 30
D 119
Finally, the
E 119
I 119
Defaults to
.q ".:@[]" ,
which is the minimum set necessary to do RFC 822 parsing;
a richer set of operators is
.q ".:%@!/[]" ,
which adds support for UUCP, the %-hack, and X.400 addresses.
.ip $p
D 157
.b "Sendmail's process id."
E 157
I 157
Sendmail's process id.
E 157
.ip $q\(dg
D 157
.b "Default format of sender address."
E 157
I 157
Default format of sender address.
E 157
The
E 119
.b $q
macro specifies how an address should appear in a message
when it is defaulted.
D 119
For example, on our system these definitions are:
E 119
I 119
Defaults to
.q "<$g>" .
It is commonly redefined to be
.q "$?x$x <$g>$|$g$."
or
.q "$g$?x ($x)$." ,
corresponding to the following two formats:
E 119
.(b
I 21
D 69
De$j Sendmail $v ready at $b
E 69
I 69
D 119
De$j Sendmail $v/$Z ready at $b
E 69
E 21
DnMAILER-DAEMON
D 48
DlFrom $g  $d
Do.:%@!^=/
E 48
I 48
D 69
DlFrom $<  $d
Do.:%@!^/
E 48
Dq$g$?x ($x)$.
Dj$H.$D
E 69
I 69
D 77
DlFrom $?<$<$|$g$.  $d
E 77
I 77
DlFrom $g  $d
E 77
Do.:%@!^/[]
Dq$?x$x <$g>$|$g$.
Dj$w
E 69
.)b
An acceptable alternative for the
.b $q
macro is
D 69
.q "$?x$x $.<$g>" .
E 69
I 69
.q "$g$?x ($x)$." .
E 69
These correspond to the following two formats:
.(b
E 119
D 48
eric@Berkeley (Eric Allman)
Eric Allman <eric@Berkeley>
E 48
I 48
D 69
eric@CS.Berkeley.EDU (Eric Allman)
E 69
Eric Allman <eric@CS.Berkeley.EDU>
I 69
eric@CS.Berkeley.EDU (Eric Allman)
E 69
E 48
.)b
I 69
.i Sendmail
properly quotes names that have special characters
if the first form is used.
I 119
.ip $r
D 157
.b "Protocol used to receive the message."
E 157
I 157
Protocol used to receive the message.
Set from the
.b \-p
command line flag or by the SMTP server code.
E 157
.ip $s
D 157
.b "Sender's host name."
E 157
I 157
Sender's host name.
Set from the
.b \-p
command line flag or by the SMTP server code.
E 157
.ip $t
D 157
.b "A numeric representation of the current time."
E 157
I 157
A numeric representation of the current time.
E 157
.ip $u
D 157
.b "The recipient user."
E 157
I 157
The recipient user.
E 157
.ip $v
D 157
.b "The version number of \fIsendmail\fP."
E 157
I 157
The version number of the
.i sendmail
binary.
E 157
.ip $w\(dd
D 157
.b "The hostname of this site."
E 119
E 69
.pp
D 119
Some macros are defined by
.i sendmail
for interpolation into argv's for mailers
or for other contexts.
These macros are:
.(b
D 38
a	The origination date in Arpanet format
b	The current date in Arpanet format
E 38
I 38
a	The origination date in RFC 822 format
b	The current date in RFC 822 format
E 38
c	The hop count
d	The date in UNIX (ctime) format
f	The sender (from) address
g	The sender address relative to the recipient
h	The recipient host
i	The queue id
I 60
k	The UUCP node name (from the uname system call)
E 60
I 47
m	The domain part of the \fIgethostname\fP return value
E 47
p	Sendmail's pid
D 50
r	Protocol used
E 50
I 50
r	Protocol used to receive the message
E 50
s	Sender's host name
t	A numeric representation of the current time
u	The recipient user
D 117
v	The version number of sendmail
E 117
I 117
v	The version number of \fIsendmail\fP
E 117
I 18
w	The hostname of this site
E 18
x	The full name of the sender
D 27
y	The id of the sender's tty
E 27
z	The home directory of the recipient
I 46
D 87
<	The return-path (sender in envelope) relative to recipient
E 87
I 87
_	The validated sender address
E 87
E 46
.)b
E 119
I 119
The
.b $w
macro is set to the root name of this host (but see below for caveats).
E 157
I 157
The hostname of this site.
This is the root name of this host (but see below for caveats).
E 157
.ip $x
D 157
.b "The full name of the sender."
E 157
I 157
The full name of the sender.
E 157
.ip $z
D 157
.b "The home directory of the recipient."
E 157
I 157
The home directory of the recipient.
E 157
.ip $_
D 157
.b "The validated sender address."
E 157
I 157
The validated sender address.
E 157
E 119
.pp
There are three types of dates that can be used.
The
.b $a
and
.b $b
D 38
macros are in Arpanet format;
E 38
I 38
macros are in RFC 822 format;
E 38
.b $a
is the time as extracted from the
.q Date:
line of the message
(if there was one),
and
.b $b
is the current date and time
(used for postmarks).
If no
.q Date:
line is found in the incoming message,
.b $a
is set to the current time also.
The
.b $d
macro is equivalent to the
D 69
.b $a
E 69
I 69
.b $b
E 69
macro in UNIX
(ctime)
format.
.pp
I 119
The macros
.b $w ,
.b $j ,
and
.b $m
are set to the identity of this host.
.i Sendmail
tries to find the fully qualified name of the host
if at all possible;
it does this by calling
.i gethostname (2)
to get the current hostname
and then passing that to
.i gethostbyname (3)
which is supposed to return the canonical version of that host name.\**
.(f
\**For example, on some systems
.i gethostname
might return
.q foo
which would be mapped to
.q foo.bar.com
by
.i gethostbyname .
.)f
Assuming this is successful,
.b $j
is set to the fully qualified name
and
.b $m
is set to the domain part of the name
(everything after the first dot).
E 119
The
I 119
.b $w
macro is set to the first word
(everything before the first dot)
if you have a level 5 or higher configuration file;
otherwise, it is set to the same value as
.b $j .
If the canonification is not successful,
it is imperative that the config file set
.b $j
to the fully qualified domain name\**.
.(f
\**Older versions of sendmail didn't pre-define
.b $j
at all, so up until 8.6,
config files
.i always
had to define
.b $j .
.)f
.pp
The
E 119
.b $f
macro is the id of the sender
as originally determined;
when mailing to a specific host
the
.b $g
macro is set to the address of the sender
.ul
relative to the recipient.
For example,
if I send to
D 58
.q bollard@matisse
E 58
I 58
.q bollard@matisse.CS.Berkeley.EDU
E 58
from the machine
D 58
.q ucbarpa
E 58
I 58
.q vangogh.CS.Berkeley.EDU
E 58
the
.b $f
macro will be
.q eric
and the
.b $g
macro will be
D 58
.q eric@ucbarpa.
E 58
I 58
.q eric@vangogh.CS.Berkeley.EDU.
E 58
.pp
The
I 48
D 77
.b $<
macro is identical to the
.b $g
macro except that it uses the envelope sender
instead of the From: address in the body of the message.
.pp
The
E 77
E 48
.b $x
macro is set to the full name of the sender.
This can be determined in several ways.
It can be passed as flag to
D 117
.i sendmail.
E 117
I 117
.i sendmail .
E 117
D 157
The second choice is the value of the
.q Full-name:
E 157
I 157
It can be defined in the
.sm NAME
environment variable.
The third choice is the value of the
.q Full-Name:
E 157
line in the header if it exists,
D 157
and the third choice is the comment field
E 157
I 157
and the fourth choice is the comment field
E 157
of a
.q From:
line.
If all of these fail,
and if the message is being originated locally,
the full name is looked up in the
.i /etc/passwd
file.
.pp
When sending,
the
.b $h ,
.b $u ,
and
.b $z
macros get set to the host, user, and home directory
(if local)
of the recipient.
The first two are set from the
.b $@
and
.b $:
part of the rewriting rules, respectively.
.pp
The
.b $p
and
.b $t
macros are used to create unique strings
(e.g., for the
.q Message-Id:
field).
The
.b $i
macro is set to the queue id on this host;
if put into the timestamp line
it can be extremely useful for tracking messages.
The
D 27
.b $y
macro is set to the id of the terminal of the sender
(if known);
some systems like to put this
in the Unix
.q From
line.
The
E 27
.b $v
macro is set to be the version number of
.i sendmail ;
this is normally put in timestamps
and has been proven extremely useful for debugging.
I 119
.pp
E 119
I 18
The
D 119
.b $w
macro is set to the name of this host
if it can be determined.
E 18
The
E 119
.b $c
field is set to the
D 162
.q "hop count,"
i.e., the number of times this message has been processed.
This can be determined
by the
.b \-h
E 162
I 162
.q "hop count,"
i.e., the number of times this message has been processed.
This can be determined
by the
.b \-h
E 162
flag on the command line
or by counting the timestamps in the message.
.pp
The
.b $r
and
.b $s
D 117
fields are set to the protocol used to communicate with sendmail
E 117
I 117
fields are set to the protocol used to communicate with
.i sendmail
E 117
D 50
and the sending hostname;
these are not supported in the current version.
E 50
I 50
and the sending hostname.
I 157
They can be set together using the
.b \-p
command line flag or separately using the
.b \-M
or
.b \-oM
flags.
E 157
I 119
.pp
E 119
I 87
The
.b $_
is set to a validated sender host name.
D 157
If the sender is running an RFC 1413 compliant IDENT server,
E 157
I 157
If the sender is running an RFC 1413 compliant IDENT server
and the receiver has the IDENT protocol turned on,
E 157
it will include the user name on that host.
E 87
E 50
D 30
.pp
Conditionals can be specified using the syntax:
.(b
$?x text1 $| text2 $.
.)b
This interpolates
.i text1
if the macro
.b $x
is set,
and
.i text2
otherwise.
The
.q else
(\c
.b $| )
clause may be omitted.
E 30
I 20
D 53
.sh 3 "Special classes"
E 53
I 53
D 74
.sh 4 "Semantics of rewriting rule sets"
E 53
.pp
D 53
The class
.b $=w
is set to be the set of all names
this host is known by.
D 38
This can be used to delete local hostnames.
E 38
I 38
This can be used to match local hostnames.
E 38
E 20
.sh 3 "The left hand side"
.pp
The left hand side of rewriting rules contains a pattern.
Normal words are simply matched directly.
Metasyntax is introduced using a dollar sign.
The metasymbols are:
.(b
I 19
.ta \w'\fB$=\fP\fIx\fP  'u
E 19
\fB$*\fP	Match zero or more tokens
\fB$+\fP	Match one or more tokens
D 19
\fB$-\fP	Match exactly one token
E 19
I 19
\fB$\-\fP	Match exactly one token
E 19
\fB$=\fP\fIx\fP	Match any token in class \fIx\fP
I 9
\fB$~\fP\fIx\fP	Match any token not in class \fIx\fP
E 9
.)b
If any of these match,
they are assigned to the symbol
.b $ \c
.i n
for replacement on the right hand side,
where
.i n
is the index in the LHS.
For example,
if the LHS:
.(b
D 19
$-:$+
E 19
I 19
$\-:$+
E 19
.)b
is applied to the input:
.(b
UCBARPA:eric
.)b
the rule will match, and the values passed to the RHS will be:
.(b
.ta 4n
$1	UCBARPA
$2	eric
.)b
.sh 3 "The right hand side"
.pp
D 27
When the right hand side of a rewriting rule matches,
E 27
I 27
When the left hand side of a rewriting rule matches,
E 27
the input is deleted and replaced by the right hand side.
Tokens are copied directly from the RHS
D 30
unless they are begin with a dollar sign.
E 30
I 30
unless they begin with a dollar sign.
E 30
Metasymbols are:
.(b
D 47
.ta \w'$#mailer  'u
E 47
I 47
.ta \w'$#mailer\0\0\0'u
E 47
\fB$\fP\fIn\fP	Substitute indefinite token \fIn\fP from LHS
I 27
\fB$[\fP\fIname\fP\fB$]\fP	Canonicalize \fIname\fP
I 47
D 48
\fB$[\fP\fImap key\fP \fB$@\fP\fIarguments\fP \fB$:\fP\fIdefault\fP \fB$)
E 48
I 48
D 50
\fB$[\fP\fImap key\fP \fB$@\fP\fIarguments\fP \fB$:\fP\fIdefault\fP \fB$)\fP
E 50
I 50
\fB$(\fP\fImap key\fP \fB$@\fP\fIarguments\fP \fB$:\fP\fIdefault\fP \fB$)\fP
E 50
E 48
	Generalized keyed mapping function
E 47
E 27
\fB$>\fP\fIn\fP	\*(lqCall\*(rq ruleset \fIn\fP
\fB$#\fP\fImailer\fP	Resolve to \fImailer\fP
\fB$@\fP\fIhost\fP	Specify \fIhost\fP
\fB$:\fP\fIuser\fP	Specify \fIuser\fP
.)b
.pp
The
.b $ \c
.i n
syntax substitutes the corresponding value from a
.b $+ ,
D 19
.b $- ,
E 19
I 19
.b $\- ,
E 19
.b $* ,
I 9
.b $= ,
E 9
or
D 9
.b $=
E 9
I 9
.b $~
E 9
match on the LHS.
It may be used anywhere.
.pp
I 27
A host name enclosed between
.b $[
and
.b $]
D 34
is looked up in the
.i /etc/hosts
file and replaced by the canonical name.
E 34
I 34
is looked up using the
.i gethostent \|(3)
routines and replaced by the canonical name.
E 34
For example,
.q $[csam$]
D 38
would become
E 38
I 38
might become
E 38
D 30
.q lbl-csam.arpa.
E 30
I 30
.q lbl-csam.arpa
and
.q $[[128.32.130.2]$]
would become
.q vangogh.berkeley.edu.
E 30
.pp
E 27
The
I 48
.b $(
\&...
.b $)
syntax is a more general form of lookup;
it uses a named map instead of an implicit map.
If no lookup is found, the indicted
.i default
is inserted;
if no default is specified and no lookup matches,
the value is left unchanged.
.pp
The
E 48
.b $> \c
.i n
syntax
causes the remainder of the line to be substituted as usual
and then passed as the argument to ruleset
.i n .
The final value of ruleset
.i n
then becomes
the substitution for this rule.
.pp
The
.b $#
syntax should
.i only
be used in ruleset zero.
It causes evaluation of the ruleset to terminate immediately,
and signals to sendmail that the address has completely resolved.
The complete syntax is:
.(b
D 8
\fB$#\fP\fImailer\fP\fB$@\fI\fPhost\fP\fB$:\fP\fIuser\fP
E 8
I 8
\fB$#\fP\fImailer\fP\fB$@\fP\fIhost\fP\fB$:\fP\fIuser\fP
E 8
.)b
This specifies the
{mailer, host, user}
3-tuple necessary to direct the mailer.
If the mailer is local
the host part may be omitted.
The
.i mailer
and
.i host
must be a single word,
but the
.i user
may be multi-part.
.pp
D 6
A RHS may also be proceeded by a
E 6
I 6
D 34
A RHS may also be preceeded by a
E 34
I 34
A RHS may also be preceded by a
E 34
E 6
.b $@
or a
.b $:
to control evaluation.
A
.b $@
prefix causes the ruleset to return with the remainder of the RHS
as the value.
A
.b $:
prefix causes the rule to terminate immediately,
but the ruleset to continue;
this can be used to avoid continued application of a rule.
The prefix is stripped before continuing.
.pp
The
.b $@
and
.b $:
D 6
prefixes may proceed a
E 6
I 6
D 34
prefixes may preceed a
E 34
I 34
prefixes may precede a
E 34
E 6
.b $>
spec;
for example:
.(b
.ta 8n
R$+	$:$>7$1
.)b
matches anything,
passes that to ruleset seven,
and continues;
the
.b $:
is necessary to avoid an infinite loop.
I 27
.pp
Substitution occurs in the order described,
that is,
parameters from the LHS are substituted,
hostnames are canonicalized,
.q subroutines
are called,
and finally
.b $# ,
.b $@ ,
and
.b $:
are processed.
E 27
.sh 3 "Semantics of rewriting rule sets"
.pp
E 53
D 2
There are four rewriting sets
E 2
I 2
There are five rewriting sets
E 2
that have specific semantics.
I 2
These are related as depicted by figure 2.
.(z
.hl
D 32
.ie t .sp 2i
D 11
.el \{.(c
E 11
I 11
.el \{\
E 32
I 32
.ie n \{\
E 32
.(c
E 11
                    +---+
                 -->| 0 |-->resolved address
                /   +---+
               /            +---+   +---+
              /        ---->| 1 |-->| S |--
       +---+ / +---+  /     +---+   +---+  \e    +---+
addr-->| 3 |-->| D |--                      --->| 4 |-->msg
       +---+   +---+  \e     +---+   +---+  /    +---+
                        --->| 2 |-->| R |--
                            +---+   +---+
.)c

I 32
.\}
.el .ie !"\*(.T"" \
\{\
.PS
boxwid = 0.3i
boxht = 0.3i
movewid = 0.3i
moveht = 0.3i
linewid = 0.3i
lineht = 0.3i

	box invis "addr"; arrow
Box3:	box "3"
A1:	arrow
BoxD:	box "D"; line; L1: Here
C:	[
	C1:	arrow; box "1"; arrow; box "S"; line; E1: Here
		move to C1 down 0.5; right
	C2:	arrow; box "2"; arrow; box "R"; line; E2: Here
	] with .w at L1 + (0.5, 0)
	move to C.e right 0.5
L4:	arrow; box "4"; arrow; box invis "msg"
	line from L1 to C.C1
	line from L1 to C.C2
	line from C.E1 to L4
	line from C.E2 to L4
	move to BoxD.n up 0.6; right
Box0:	arrow; box "0"
	arrow; box invis "resolved address" width 1.3
	line from 1/3 of the way between A1 and BoxD.w to Box0
.PE
.\}
.el .sp 2i
E 32
.ce
Figure 2 \*- Rewriting set semantics
.(c
D \*- sender domain addition
S \*- mailer-specific sender rewriting
R \*- mailer-specific recipient rewriting
.)c
D 32
.\}
E 32
.hl
.)z
E 2
.pp
Ruleset three
should turn the address into
.q "canonical form."
This form should have the basic syntax:
.(b
local-part@host-domain-spec
.)b
If no
.q @
sign is specified,
then the
host-domain-spec
.i may
be appended from the
sender address
(if the
.b C
flag is set in the mailer definition
corresponding to the
.i sending
mailer).
Ruleset three
is applied by sendmail
before doing anything with any address.
.pp
Ruleset zero
is applied after ruleset three
to addresses that are going to actually specify recipients.
It must resolve to a
.i "{mailer, host, user}"
triple.
The
.i mailer
must be defined in the mailer definitions
from the configuration file.
The
.i host
is defined into the
.b $h
macro
for use in the argv expansion of the specified mailer.
.pp
Rulesets one and two
are applied to all sender and recipient addresses respectively.
They are applied before any specification
in the mailer definition.
They must never resolve.
I 2
.pp
Ruleset four is applied to all addresses
in the message.
It is typically used
to translate internal to external form.
E 74
E 2
D 53
.sh 3 "Mailer flags etc."
E 53
I 53
D 157
.sh 3 "C and F \*- define classes"
E 157
I 157
.sh 2 "C and F \*- Define Classes"
E 157
E 53
.pp
D 20
There are a number of flags that may be associated with each mailer.
E 20
I 20
D 53
There are a number of flags that may be associated with each mailer,
each identified by a letter of the alphabet.
Many of them are assigned semantics internally.
E 20
D 2
These are:
.ip f
The mailer wants a
.b \-f
.i from
flag,
but only if this is a network forward operation
(i.e.,
the mailer will give an error
if the executing user
does not have special permissions).
.ip r
Same as
.b f ,
but sends a
.b \-r
flag.
.ip q
Don't print errors \*- the mailer will do it for us.
.ip S
Don't reset the userid
before calling the mailer.
This would be used in a secure environment
where
.i sendmail
ran as root.
This could be used to avoid forged addresses.
This flag is suppressed if given from an
.q unsafe
environment
(e.g, a user's mail.cf file).
.ip n
Do not insert a UNIX-style
.q From
line on the front of the message.
.ip l
This mailer is local
(i.e.,
final delivery will be performed).
.ip s
Strip quote characters off of the address
before calling the mailer.
.ip m
This mailer can send to multiple users
on the same host
in one transaction.
When a
.b $u
macro occurs in the
.i argv
part of the mailer definition,
that field will be repeated as necessary
for all qualifying users.
.ip F
This mailer wants a
.q From:
header line.
.ip D
This mailer wants a
.q Date:
header line.
.ip M
This mailer wants a
.q Message-Id:
header line.
.ip x
This mailer wants a
.q Full-Name:
header line.
.ip u
Upper case should be preserved in user names
for this mailer.
.ip h
Upper case should be preserved in host names
for this mailer.
.ip A
This is an Arpanet-compatible mailer,
and all appropriate modes should be set.
.ip U
This mailer wants Unix-style
.q From
lines with the ugly UUCP-style
.q "remote from <host>"
on the end.
.ip e
This mailer is expensive to connect to,
so try to avoid connecting normally;
any necessary connection will occur during a queue run.
.ip X
This mailer wants to run the full SMTP protocol,
including limiting line lengths,
putting <CRLF> on the end of lines,
etc.
.ip C
If mail is
.i received
from a mailer with this flag set,
any addresses in the header that do not have an at sign
(\c
.q @ )
after being rewritten by ruleset three
will have the
.q @domain
clause from the sender
tacked on.
This allows mail with headers of the form:
.(b
From: usera@hosta
To: userb@hostb, userc
.)b
to be rewritten as:
.(b
From: usera@hosta
To: userb@hostb, userc@hosta
.)b
automatically.
E 2
I 2
These are detailed in Appendix C.
E 53
I 53
D 83
Classes of words may be defined
E 83
I 83
Classes of phrases may be defined
E 83
to match on the left hand side of rewriting rules,
where a
D 83
.q word
is a sequence of characters that do not contain characters
in the $o macro.
E 83
I 83
.q phrase
is a sequence of characters that do not contain space characters.
E 83
For example
a class of all local names for this site
might be created
so that attempts to send to oneself
can be eliminated.
These can either be defined directly in the configuration file
or read in from another file.
D 165
Classes may be given names
from the set of upper case letters.
Lower case letters and special characters
are reserved for system use.
E 165
I 165
Classes are named as a single letter or a word in {braces}.
Class names beginning with lower case letters
and special characters are reserved for system use.
Classes defined in config files may be given names
from the set of upper case letters for short names
or beginning with an upper case letter for long names.
E 165
.pp
The syntax is:
.(b F
.b C \c
D 83
.i c\|word1
.i word2...
E 83
I 83
.i c\|phrase1
.i phrase2...
E 83
.br
.b F \c
.i c\|file
.)b
The first form defines the class
.i c
to match any of the named words.
It is permissible to split them among multiple lines;
for example, the two forms:
.(b
CHmonet ucbmonet
.)b
and
.(b
CHmonet
CHucbmonet
.)b
are equivalent.
D 157
The second form
E 157
I 157
The ``F'' form
E 157
reads the elements of the class
.i c
from the named
.i file .
.pp
I 157
Elements of classes can be accessed in rules using
.b $=
or
.b $~ .
E 157
I 85
The
.b $~
(match entries not in class)
only matches a single word;
multi-word entries in the class are ignored in this context.
D 160
.pp
E 85
The class
.b $=w
E 160
I 160
.pp
The class
.b $=w
E 160
is set to be the set of all names
this host is known by.
This can be used to match local hostnames.
I 59
.pp
The class
.b $=k
is set to be the same as
.b $k ,
that is, the UUCP node name.
I 139
.pp
I 141
The class
.b $=m
is set to the set of domains by which this host is known,
initially just
.b $m .
.pp
I 157
The class
.b $=t
is set to the set of trusted users by the
.b T
configuration line.
If you want to read trusted users from a file use
.b Ft \c
.i /file/name .
.pp
The class
.b $=n
can be set to the set of MIME body types
that can never be eight to seven bit encoded.
It defaults to
.q message/rfc822 ,
.q message/partial ,
.q message/external-body ,
and
.q multipart/signed .
.pp
E 157
E 141
.i Sendmail
can be compiled to allow a
.i scanf (3)
string on the
.b F
line.
This lets you do simplistic parsing of text files.
For example, to read all the user names in your system
.i /etc/passwd
file into a class, use
.(b
FL/etc/passwd %[^:]
.)b
which reads every line up to the first colon.
E 139
E 59
D 157
.sh 3 "M \*- define mailer"
E 157
I 157
.sh 2 "M \*- Define Mailer"
E 157
.pp
Programs and interfaces to mailers
are defined in this line.
The format is:
.(b F
.b M \c
.i name ,
{\c
.i field =\c
.i value \|}*
.)b
where
.i name
is the name of the mailer
(used internally only)
and the
.q field=name
pairs define attributes of the mailer.
Fields are:
.(b
.ta 1i
Path	The pathname of the mailer
Flags	Special flags for this mailer
D 157
Sender	A rewriting set for sender addresses
Recipient	A rewriting set for recipient addresses
E 157
I 157
Sender	Rewriting set(s) for sender addresses
Recipient	Rewriting set(s) for recipient addresses
E 157
Argv	An argument vector to pass to this mailer
Eol	The end-of-line string for this mailer
Maxsize	The maximum message length to this mailer
Linelimit	The maximum line length in the message body
I 87
Directory	The working directory for the mailer
I 153
Userid	The default user and group id to run as
I 161
Nice	The nice(2) increment for the mailer
E 161
I 155
Charset	The default character set for 8-bit characters
D 159
Type	The MTS type (used for error messages)
E 159
I 159
Type	The MTS type information (used for error messages)
E 159
E 155
E 153
E 87
.)b
Only the first character of the field name is checked.
.pp
The following flags may be set in the mailer description.
E 53
I 20
Any other flags may be used freely
to conditionally assign headers to messages
destined for particular mailers.
E 20
I 14
D 53
.sh 3 "The \*(lqerror\*(rq mailer"
E 53
I 53
D 157
.nr ii 4n
I 95
.ip a
Run Extended SMTP (ESMTP) protocol (defined in RFCs 1425, 1426, and 1427).
I 151
.ip A
Look up the user part of the address in the alias database.
Normally this is only set for local mailers.
E 151
I 96
.ip b
Force a blank line on the end of a message.
This is intended to work around some stupid versions of
/bin/mail
that require a blank line, but do not provide it themselves.
It would not normally be used on network mail.
E 96
E 95
I 65
.ip c
Do not include comments in addresses.
This should only be used if you have to work around
a remote mailer that gets confused by comments.
E 65
.ip C
If mail is
.i received
from a mailer with this flag set,
any addresses in the header that do not have an at sign
(\c
.q @ )
after being rewritten by ruleset three
will have the
.q @domain
clause from the sender
tacked on.
This allows mail with headers of the form:
.(b
From: usera@hosta
To: userb@hostb, userc
.)b
to be rewritten as:
.(b
From: usera@hosta
To: userb@hostb, userc@hosta
.)b
automatically.
.ip D
This mailer wants a
.q Date:
header line.
.ip e
This mailer is expensive to connect to,
so try to avoid connecting normally;
any necessary connection will occur during a queue run.
.ip E
Escape lines beginning with
.q From
in the message with a `>' sign.
.ip f
The mailer wants a
.b \-f
.i from
flag,
but only if this is a network forward operation
(i.e.,
the mailer will give an error
if the executing user
does not have special permissions).
.ip F
This mailer wants a
.q From:
header line.
I 96
.ip g
Normally,
E 157
I 157
Flags marked with \(dg
are not interpreted by the
E 157
.i sendmail
D 157
sends internally generated email (e.g., error messages)
using the null return address\**
.(f
\**Actually, this only applies to SMTP,
which uses the ``MAIL FROM:<>'' command.
.)f
as required by RFC 1123.
However, some mailers don't accept a null return address.
If necessary,
you can set the
.b g
flag to prevent
.i sendmail
from obeying the standards;
error messages will be sent as from the MAILER-DAEMON
(actually, the value of the
.b $n
macro).
E 96
.ip h
Upper case should be preserved in host names
for this mailer.
.ip I
This mailer will be speaking SMTP
to another
.i sendmail
\*-
as such it can use special protocol features.
This option is not required
(i.e.,
if this option is omitted the transmission will still operate successfully,
although perhaps not as efficiently as possible).
I 151
.ip k
Normally when
.i sendmail
connects to a host via SMTP,
it checks to make sure that this isn't accidently the same host name
as might happen if
.i sendmail
is misconfigured or if a long-haul network interface is set in loopback mode.
This flag disables the loopback check.
It should only be used under very unusual circumstances.
E 151
.ip l
This mailer is local
(i.e.,
final delivery will be performed).
.ip L
Limit the line lengths as specified in RFC821.
This deprecated option should be replaced by the
.b L=
mail declaration.
For historic reasons, the
.b L
flag also sets the
.b 7
flag.
.ip m
This mailer can send to multiple users
on the same host
in one transaction.
When a
.b $u
macro occurs in the
.i argv
part of the mailer definition,
that field will be repeated as necessary
for all qualifying users.
.ip M
This mailer wants a
.q Message-Id:
header line.
.ip n
Do not insert a UNIX-style
.q From
line on the front of the message.
I 151
.ip o
Always run as the owner of the recipient mailbox.
Normally
.i sendmail
runs as the recipient for locally generated mail
or as
.q daemon
(actually, the user specified in the
D 155
.b u
option)
when delivering network mail.
The normal behaviour is required by most local mailers,
which will not allow the envelope sender address
to be set unless the mailer is running as daemon.
I 153
This flag is overridden by the `S' flag.
E 153
E 151
.ip p
D 68
Use the return-path in the SMTP
E 68
I 68
Use the route-addr style reverse-path in the SMTP
E 68
.q "MAIL FROM:"
command
rather than just the return address;
D 68
although this is required in RFC821,
many hosts do not process return paths properly.
E 68
I 68
although this is required in RFC821 section 3.1,
many hosts do not process reverse-paths properly.
Reverse-paths are officially discouraged by RFC 1123.
E 68
.ip P
This mailer wants a
.q Return-Path:
line.
.ip r
Same as
.b f ,
but sends a
.b \-r
flag.
.ip s
Strip quote characters off of the address
before calling the mailer.
.ip S
Don't reset the userid
before calling the mailer.
This would be used in a secure environment
where
.i sendmail
ran as root.
This could be used to avoid forged addresses.
D 153
This flag is suppressed if given from an
.q unsafe
environment
(e.g, a user's mail.cf file).
E 153
I 153
If the
.b U=
field is also specified,
this flag causes the user id to always be set to that user and group
(instead of leaving it as root).
E 153
.ip u
Upper case should be preserved in user names
for this mailer.
.ip U
This mailer wants Unix-style
.q From
lines with the ugly UUCP-style
.q "remote from <host>"
on the end.
I 151
.ip w
The user must have a valid account on this machine.
If not,
the mail is bounced.
This is required to get
.q \&.forward
capability.
E 151
.ip x
This mailer wants a
.q Full-Name:
header line.
.ip X
This mailer want to use the hidden dot algorithm
as specified in RFC821;
basically,
any line beginning with a dot
will have an extra dot prepended
(to be stripped at the other end).
This insures that lines in the message containing a dot
will not terminate the message prematurely.
I 151
.ip 5
If no aliases are found for this address,
pass the address through ruleset 5 for possible alternate resolution.
This is intended to forward the mail to an alternate delivery spot.
E 151
.ip 7
Strip all output to seven bits.
This is the default if the
.b L
flag is set.
D 146
Note that setting this is not
E 146
I 146
Note that clearing this option is not
E 146
sufficient to get full eight bit data passed through
D 101
.i sendmail ;
the
.b 8
option must also be set.
E 101
I 101
.i sendmail .
If the
.b 7
option is set, this is essentially always set,
since the eighth bit was stripped on input.
I 151
.ip :
Check addresses to see if they begin
.q :include: ;
if they do, convert them to the
.q *include*
mailer.
.ip |
Check addresses to see if they begin with a `|';
if they do, convert them to the
.q prog
mailer.
.ip /
Check addresses to see if they begin with a `/';
if they do, convert them to the
.q *file*
mailer.
.ip @
Look up addresses in the user database.
E 151
E 101
E 53
.pp
I 151
Configuration files prior to level 6
assume the `A', `w', `5', `:', `|', `/', and `@' options
on the mailer named
.q local .
.pp
E 151
The mailer with the special name
.q error
can be used to generate a user error.
D 53
The (optional) host field is a numeric exit status to be returned,
E 53
I 53
The (optional) host field is an exit status to be returned,
E 53
and the user field is a message to be printed.
I 53
The exit status may be numeric or one of the values
USAGE, NOUSER, NOHOST, UNAVAILABLE, SOFTWARE, TEMPFAIL, PROTOCOL, or CONFIG
to return the corresponding EX_ exit code.
E 53
For example, the entry:
.(b
D 53
$#error$:Host unknown in this domain
E 53
I 53
$#error $@ NOHOST $: Host unknown in this domain
E 53
.)b
on the RHS of a rule
will cause the specified error to be generated
I 53
and the
.q "Host unknown"
exit status to be returned
E 53
if the LHS matches.
This mailer is only functional in ruleset zero.
I 55
.pp
The mailer named
.q local
.i must
be defined in every configuration file.
This is used to deliver local mail,
and is treated specially in several ways.
Additionally, three other mailers named
.q prog ,
.q *file* ,
and
.q *include*
may be defined to tune the delivery of messages to programs,
files,
and :include: lists respectively.
They default to:
.(b
Mprog, P=/bin/sh, F=lsD, A=sh \-c $u
D 99
M*file*, F=lsDEu, A=NULL
M*include*, F=su, A=NULL
E 99
I 99
M*file*, P=/dev/null, F=lsDFMPEu, A=FILE
M*include*, P=/dev/null, F=su, A=INCLUDE
E 99
.)b
I 64
.pp
The Sender and Recipient rewriting sets
may either be a simple integer
or may be two integers separated by a slash;
if so, the first rewriting set is applied to envelope
addresses
and the second is applied to headers.
I 87
.pp
The Directory
is actually a colon-separated path of directories to try.
For example, the definition
.q D=$z:/
first tries to execute in the recipient's home directory;
if that is not available,
it tries to execute in the root of the filesystem.
This is intended to be used only on the
.q prog
mailer,
since some shells (such as
.i csh )
refuse to execute if they cannot read the home directory.
Since the queue directory is not normally readable by normal users
.i csh
scripts as recipients can fail.
I 153
.pp
The Userid
specifies the default user and group id to run as,
overriding the
.b u
and
.b g
options (q.v.).
If the
.b S
mailer flag is also specified,
this is the user and group to run as in all circumstances.
This may be given as
.i user.group
to set both the user and group id;
either may be an integer or a symbolic name to be looked up
in the
.i passwd
and
.i group
files respectively.
If only a symbolic user name is specified,
the group id in the
.i passwd
file for that user is used as the group id.
E 153
E 87
E 64
E 55
I 50
D 53
.sh 2 "Options"
E 53
I 53
.sh 3 "H \*- define header"
E 53
.pp
D 53
The following options may be set using the
.b \-o
flag on the command line
or the
.b O
line in the configuration file.
If specified on the command line,
most will cause
.i sendmail
to relinquish its setuid permissions.
The options that will not cause this are
d, e, E, i, L, m, o, r, s, v, C, and 8.
Also, M (define macro) when defining the r or s macros
is also considered
.q safe .
E 53
I 53
D 117
The format of the header lines that sendmail inserts into the message
E 117
I 117
The format of the header lines that
.i sendmail
inserts into the message
E 117
are defined by the
.b H
line.
The syntax of this line is:
.(b F
.b H [\c
.b ? \c
.i mflags \c
.b ? ]\c
.i hname \c
E 155
I 155
.b u
option)
when delivering network mail.
The normal behaviour is required by most local mailers,
which will not allow the envelope sender address
to be set unless the mailer is running as daemon.
This flag is overridden by the `S' flag.
.ip p
Use the route-addr style reverse-path in the SMTP
.q "MAIL FROM:"
command
rather than just the return address;
although this is required in RFC821 section 3.1,
many hosts do not process reverse-paths properly.
Reverse-paths are officially discouraged by RFC 1123.
.ip P
This mailer wants a
.q Return-Path:
E 157
I 157
binary;
these are the conventionally used to correlate to the flags portion
of the
.b H
E 157
line.
D 157
.ip r
Same as
.b f ,
but sends a
.b \-r
flag.
.ip s
Strip quote characters off of the address
before calling the mailer.
.ip S
Don't reset the userid
before calling the mailer.
This would be used in a secure environment
where
.i sendmail
ran as root.
This could be used to avoid forged addresses.
If the
.b U=
field is also specified,
this flag causes the user id to always be set to that user and group
(instead of leaving it as root).
.ip u
Upper case should be preserved in user names
for this mailer.
.ip U
This mailer wants Unix-style
.q From
lines with the ugly UUCP-style
.q "remote from <host>"
on the end.
.ip w
The user must have a valid account on this machine.
If not,
the mail is bounced.
This is required to get
.q \&.forward
capability.
.ip x
This mailer wants a
.q Full-Name:
header line.
.ip X
This mailer want to use the hidden dot algorithm
as specified in RFC821;
basically,
any line beginning with a dot
will have an extra dot prepended
(to be stripped at the other end).
This insures that lines in the message containing a dot
will not terminate the message prematurely.
.ip 5
If no aliases are found for this address,
pass the address through ruleset 5 for possible alternate resolution.
This is intended to forward the mail to an alternate delivery spot.
.ip 7
Strip all output to seven bits.
This is the default if the
.b L
flag is set.
Note that clearing this option is not
sufficient to get full eight bit data passed through
.i sendmail .
If the
.b 7
option is set, this is essentially always set,
since the eighth bit was stripped on input.
.ip :
Check addresses to see if they begin
.q :include: ;
if they do, convert them to the
.q *include*
mailer.
.ip |
Check addresses to see if they begin with a `|';
if they do, convert them to the
.q prog
mailer.
.ip /
Check addresses to see if they begin with a `/';
if they do, convert them to the
.q *file*
mailer.
.ip @
Look up addresses in the user database.
.pp
Configuration files prior to level 6
assume the `A', `w', `5', `:', `|', `/', and `@' options
on the mailer named
.q local .
.pp
The mailer with the special name
.q error
can be used to generate a user error.
The (optional) host field is an exit status to be returned,
and the user field is a message to be printed.
The exit status may be numeric or one of the values
USAGE, NOUSER, NOHOST, UNAVAILABLE, SOFTWARE, TEMPFAIL, PROTOCOL, or CONFIG
to return the corresponding EX_ exit code.
For example, the entry:
.(b
$#error $@ NOHOST $: Host unknown in this domain
.)b
on the RHS of a rule
will cause the specified error to be generated
and the
.q "Host unknown"
exit status to be returned
if the LHS matches.
This mailer is only functional in ruleset zero.
.pp
The mailer named
.q local
.i must
E 157
I 157
Flags marked with \(dd
apply to the mailers for the sender address
rather than the usual recipient mailers.
.nr ii 4n
.ip a
D 160
Run Extended SMTP (ESMTP) protocol (defined in RFCs 1425, 1426, and 1427).
E 160
I 160
Run Extended SMTP (ESMTP) protocol (defined in RFCs 1651, 1652, and 1653).
E 160
This flag defaults on if the SMTP greeting message includes the word
.q ESMTP .
.ip A
Look up the user part of the address in the alias database.
Normally this is only set for local mailers.
.ip b
Force a blank line on the end of a message.
This is intended to work around some stupid versions of
/bin/mail
that require a blank line, but do not provide it themselves.
I 167
It would not normally be used on network mail.
E 167
D 167
It would not normally be used on network mail.
E 167
.ip c
Do not include comments in addresses.
This should only be used if you have to work around
a remote mailer that gets confused by comments.
This strips addresses of the form
.q "Phrase <address>"
or
.q "address (Comment)"
down to just
.q address .
.ip C\(dd
If mail is
.i received
from a mailer with this flag set,
any addresses in the header that do not have an at sign
(\c
.q @ )
after being rewritten by ruleset three
will have the
.q @domain
clause from the sender envelope address
tacked on.
This allows mail with headers of the form:
.(b
From: usera@hosta
To: userb@hostb, userc
.)b
to be rewritten as:
.(b
From: usera@hosta
To: userb@hostb, userc@hosta
.)b
automatically.
However, it doesn't really work reliably.
.ip D\(dg
This mailer wants a
.q Date:
header line.
.ip e
This mailer is expensive to connect to,
so try to avoid connecting normally;
any necessary connection will occur during a queue run.
.ip E
Escape lines beginning with
.q From
in the message with a `>' sign.
.ip f
The mailer wants a
.b \-f
.i from
flag,
but only if this is a network forward operation
(i.e.,
the mailer will give an error
if the executing user
does not have special permissions).
.ip F\(dg
This mailer wants a
.q From:
header line.
.ip g
Normally,
.i sendmail
sends internally generated email (e.g., error messages)
using the null return address
as required by RFC 1123.
However, some mailers don't accept a null return address.
If necessary,
you can set the
.b g
flag to prevent
.i sendmail
from obeying the standards;
error messages will be sent as from the MAILER-DAEMON
(actually, the value of the
.b $n
macro).
.ip h
Upper case should be preserved in host names
for this mailer.
.ip I
This mailer will be speaking SMTP
to another
.i sendmail
\*-
as such it can use special protocol features.
This option is not required
(i.e.,
if this option is omitted the transmission will still operate successfully,
although perhaps not as efficiently as possible).
.ip k
Normally when
.i sendmail
connects to a host via SMTP,
it checks to make sure that this isn't accidently the same host name
as might happen if
.i sendmail
is misconfigured or if a long-haul network interface is set in loopback mode.
This flag disables the loopback check.
It should only be used under very unusual circumstances.
.ip K
Currently unimplemented.
Reserved for chunking.
.ip l
This mailer is local
(i.e.,
final delivery will be performed).
I 159
.ip L
Limit the line lengths as specified in RFC821.
This deprecated option should be replaced by the
.b L=
mail declaration.
For historic reasons, the
E 159
D 159
.ip L
Limit the line lengths as specified in RFC821.
This deprecated option should be replaced by the
.b L=
mail declaration.
For historic reasons, the
E 159
.b L
flag also sets the
.b 7
flag.
.ip m
This mailer can send to multiple users
on the same host
in one transaction.
When a
.b $u
macro occurs in the
.i argv
part of the mailer definition,
that field will be repeated as necessary
for all qualifying users.
.ip M\(dg
This mailer wants a
.q Message-Id:
header line.
.ip n
Do not insert a UNIX-style
.q From
line on the front of the message.
.ip o
Always run as the owner of the recipient mailbox.
Normally
.i sendmail
runs as the sender for locally generated mail
or as
.q daemon
(actually, the user specified in the
.b u
option)
when delivering network mail.
The normal behaviour is required by most local mailers,
which will not allow the envelope sender address
to be set unless the mailer is running as daemon.
This flag is ignored if the
.b S
flag is set.
.ip p
Use the route-addr style reverse-path in the SMTP
.q "MAIL FROM:"
command
rather than just the return address;
although this is required in RFC821 section 3.1,
many hosts do not process reverse-paths properly.
Reverse-paths are officially discouraged by RFC 1123.
.ip P\(dg
This mailer wants a
.q Return-Path:
line.
.ip r
Same as
.b f ,
but sends a
.b \-r
flag.
.ip s
Strip quote characters (" and \e) off of the address
before calling the mailer.
.ip S
Don't reset the userid
before calling the mailer.
This would be used in a secure environment
where
.i sendmail
ran as root.
This could be used to avoid forged addresses.
If the
.b U=
field is also specified,
this flag causes the user id to always be set to that user and group
(instead of leaving it as root).
.ip u
Upper case should be preserved in user names
for this mailer.
.ip U
This mailer wants UUCP-style
.q From
lines with the ugly
.q "remote from <host>"
on the end.
.ip w
The user must have a valid account on this machine,
i.e.,
getpwnam
must succeed.
If not,
the mail is bounced.
This is required to get
.q \&.forward
capability.
.ip x\(dg
This mailer wants a
.q Full-Name:
header line.
.ip X
This mailer want to use the hidden dot algorithm
as specified in RFC821;
basically,
any line beginning with a dot
will have an extra dot prepended
(to be stripped at the other end).
This insures that lines in the message containing a dot
will not terminate the message prematurely.
.ip 5
If no aliases are found for this address,
pass the address through ruleset 5 for possible alternate resolution.
This is intended to forward the mail to an alternate delivery spot.
.ip 7
Strip all output to seven bits.
This is the default if the
.b L
flag is set.
Note that clearing this option is not
sufficient to get full eight bit data passed through
.i sendmail .
If the
.b 7
option is set, this is essentially always set,
since the eighth bit was stripped on input.
I 163
Note that this option will only impact messages
that didn't have 8\(->7 bit MIME conversions performed.
E 163
.ip 8
If set,
it is acceptable to send eight bit data to this mailer;
the usual attempt to do 8\(->7 bit MIME conversions will be bypassed.
.ip :
Check addresses to see if they begin
.q :include: ;
if they do, convert them to the
.q *include*
mailer.
.ip |
Check addresses to see if they begin with a `|';
if they do, convert them to the
.q prog
mailer.
.ip /
Check addresses to see if they begin with a `/';
if they do, convert them to the
.q *file*
mailer.
.ip @
Look up addresses in the user database.
.pp
Configuration files prior to level 6
assume the `A', `w', `5', `:', `|', `/', and `@' options
on the mailer named
.q local .
.pp
The mailer with the special name
.q error
can be used to generate a user error.
The (optional) host field is an exit status to be returned,
and the user field is a message to be printed.
The exit status may be numeric or one of the values
USAGE, NOUSER, NOHOST, UNAVAILABLE, SOFTWARE, TEMPFAIL, PROTOCOL, or CONFIG
to return the corresponding EX_ exit code.
For example, the entry:
.(b
$#error $@ NOHOST $: Host unknown in this domain
.)b
on the RHS of a rule
will cause the specified error to be generated
and the
.q "Host unknown"
exit status to be returned
if the LHS matches.
This mailer is only functional in rulesets zero or five.
.pp
The mailer named
.q local
.i must
E 157
be defined in every configuration file.
This is used to deliver local mail,
and is treated specially in several ways.
Additionally, three other mailers named
.q prog ,
.q *file* ,
and
.q *include*
may be defined to tune the delivery of messages to programs,
files,
and :include: lists respectively.
They default to:
.(b
Mprog, P=/bin/sh, F=lsD, A=sh \-c $u
M*file*, P=/dev/null, F=lsDFMPEu, A=FILE
M*include*, P=/dev/null, F=su, A=INCLUDE
.)b
.pp
The Sender and Recipient rewriting sets
D 157
may either be a simple integer
or may be two integers separated by a slash;
E 157
I 157
may either be a simple ruleset id
or may be two ids separated by a slash;
E 157
if so, the first rewriting set is applied to envelope
addresses
and the second is applied to headers.
.pp
The Directory
is actually a colon-separated path of directories to try.
For example, the definition
.q D=$z:/
first tries to execute in the recipient's home directory;
if that is not available,
it tries to execute in the root of the filesystem.
This is intended to be used only on the
.q prog
mailer,
since some shells (such as
.i csh )
refuse to execute if they cannot read the home directory.
D 157
Since the queue directory is not normally readable by normal users
E 157
I 157
Since the queue directory is not normally readable by unprivileged users
E 157
.i csh
scripts as recipients can fail.
.pp
The Userid
specifies the default user and group id to run as,
overriding the
.b DefaultUser
option (q.v.).
If the
.b S
mailer flag is also specified,
this is the user and group to run as in all circumstances.
This may be given as
.i user:group
to set both the user and group id;
either may be an integer or a symbolic name to be looked up
in the
.i passwd
and
.i group
files respectively.
If only a symbolic user name is specified,
the group id in the
.i passwd
file for that user is used as the group id.
.pp
The Charset field
is used when converting a message to MIME;
this is the character set used in the
Content-Type: header.
If this is not set, the
.b DefaultCharset
option is used,
and if that is not set, the value
.q unknown-8bit
is used.
.b WARNING:
this field applies to the sender's mailer,
not the recipient's mailer.
For example, if the envelope sender address
lists an address on the local network
and the recipient is on an external network,
the character set will be set from the Charset= field
for the local network mailer,
not that of the external network mailer.
.pp
The Type= field
D 159
sets the MTS-Type:
E 159
I 159
sets the type information
E 159
used in MIME error messages
as defined by
RFC XXX
(not yet published).
D 159
It must be a registered value
E 159
I 159
It is actually three values separated by slashes:
the MTA-type (that is, the description of how hosts are named),
the address type (the description of e-mail addresses),
and the diagnostic type (the description of error diagnostic codes).
Each of these must be a registered value
E 159
or begin with
.q X\- .
I 159
The default is
.q dns/rfc822/smtp .
E 159
D 157
.sh 3 "H \*- define header"
E 157
I 157
.sh 2 "H \*- Define Header"
E 157
.pp
The format of the header lines that
.i sendmail
inserts into the message
are defined by the
.b H
line.
The syntax of this line is:
.(b F
.b H [\c
.b ? \c
.i mflags \c
.b ? ]\c
.i hname \c
E 155
.b :
.i htemplate
.)b
Continuation lines in this spec
are reflected directly into the outgoing message.
The
.i htemplate
is macro expanded before insertion into the message.
If the
.i mflags
(surrounded by question marks)
are specified,
at least one of the specified flags
must be stated in the mailer definition
for this header to be automatically output.
If one of these headers is in the input
it is reflected to the output
regardless of these flags.
.pp
Some headers have special semantics
D 157
that will be described below.
.sh 3 "O \*- set option"
E 157
I 157
that will be described later.
.sh 2 "O \*- Set Option"
E 157
D 151
.pp
There are a number of
.q random
options that
can be set from a configuration file.
Options are represented by single characters.
The syntax of this line is:
.(b F
.b O \c
.i o\|value
.)b
This sets option
.i o
to be
.i value .
Depending on the option,
.i value
may be a string, an integer,
a boolean
(with legal values
.q t ,
.q T ,
.q f ,
or
.q F ;
the default is TRUE),
or
a time interval.
.pp
The options supported are:
E 53
.nr ii 1i
.ip a\fIN\fP
If set,
wait up to
.i N
minutes for an
.q @:@
entry to exist in the alias database
before starting up.
If it does not appear in
.i N
minutes,
rebuild the database
(if the
.b D
option is also set)
or issue a warning.
D 97
.ip A\fIfile\fP
Use the named
.i file
as the alias file.
If no file is specified,
use
.i aliases
in the current directory.
E 97
I 97
D 103
.ip A\fIspec, spec, ...\fP
E 103
I 103
.ip "A\fIspec, spec, ...\fP"
E 103
Specify possible alias file(s).
Each
.i spec
should be in the format
``\c
.i class \c
.b :
.i file ''
where
.i class \c
.b :
is optional and defaults to ``implicit''.
Depending on how
E 151
I 151
.pp
There are a number of
D 157
.q random
E 157
I 157
global
E 157
options that
can be set from a configuration file.
D 155
Options are represented by single characters.
E 155
I 155
Options are represented by full words;
some are also representable as single characters
for back compatibility.
E 155
The syntax of this line is:
.(b F
D 154
.b O \c
.i o\|value
E 154
I 154
.b O \0
.i option \c
.b = \c
.i value
E 154
.)b
This sets option
D 154
.i o
E 154
I 154
.i option
E 154
to be
.i value .
I 154
Note that there
.i must
be a space between the letter `O' and the name of the option.
An older version is:
.(b F
.b O \c
.i o\|value
.)b
where the option
.i o
is a single character.
E 154
Depending on the option,
.i value
may be a string, an integer,
a boolean
(with legal values
.q t ,
.q T ,
.q f ,
or
.q F ;
the default is TRUE),
or
a time interval.
.pp
D 154
The options supported are:
E 154
I 154
The options supported (with the old, one character names in brackets) are:
E 154
.nr ii 1i
D 154
.ip a\fIN\fP
E 154
I 154
D 155
.ip AliasWait=\fIN\fP
[a]
E 154
If set,
wait up to
.i N
minutes for an
.q @:@
entry to exist in the alias database
before starting up.
If it does not appear in
.i N
minutes,
rebuild the database
(if the
.b D
option is also set)
or issue a warning.
E 155
D 154
.ip "A\fIspec, spec, ...\fP"
E 154
I 154
.ip "AliasFile=\fIspec, spec, ...\fP"
[A]
E 154
Specify possible alias file(s).
Each
.i spec
should be in the format
``\c
.i class \c
.b :
.i file ''
where
.i class \c
.b :
is optional and defaults to ``implicit''.
Depending on how
E 151
D 117
.b sendmail
E 117
I 117
.i sendmail
E 117
is compiled, valid classes are
.q implicit
(search through a compiled-in list of alias file types,
for back compatibility),
.q hash
(if
.sm NEWDB
is specified),
.q dbm
(if
.sm NDBM
is specified),
.q stab
(internal symbol table \*- not normally used
unless you have no other database lookup),
or
.q nis
(if
.sm NIS
is specified).
If a list of
.i spec s
are provided,
.i sendmail
searches them in order.
E 97
I 67
D 95
.ip b\fIN\fP
E 95
I 95
D 154
.ip b\fIN\fP/\fIM\fP
E 154
I 154
D 155
.ip MinFreeBlocks=\fIN\fP/\fIM\fP
[b]
E 154
E 95
Insist on at least
E 155
I 155
D 157
.ip AliasWait=\fIN\fP
E 157
I 157
.ip AliasWait=\fItimeout\fP
E 157
[a]
If set,
wait up to
E 155
D 157
.i N
D 155
blocks free on the filesystem that holds the queue files
before accepting email via SMTP.
If there is insufficient space
E 155
I 155
minutes for an
E 157
I 157
.i timeout
(units default to minutes)
for an
E 157
.q @:@
entry to exist in the alias database
before starting up.
D 157
If it does not appear in
.i N
minutes,
E 157
I 157
If it does not appear in the
.i timeout
interval
E 157
rebuild the database
(if the
D 157
.b D
E 157
I 157
.b AutoRebuildAliases
E 157
option is also set)
or issue a warning.
.ip AutoRebuildAliases
[D]
If set,
rebuild the alias database if necessary and possible.
If this option is not set,
E 155
.i sendmail
D 155
gives a 452 response
to the MAIL command.
I 69
This invites the sender to try again later.
I 95
The optional
.i M
is a maximum message size advertised in the ESMTP EHLO response.
It is currently otherwise unused.
E 155
I 155
will never rebuild the alias database
unless explicitly requested
using
.b \-bi .
I 157
Not recommended \(em can cause thrashing.
E 157
E 155
E 95
E 69
E 67
D 154
.ip B\fIc\fP
E 154
I 154
.ip BlankSub=\fIc\fP
[B]
E 154
Set the blank substitution character to
.i c .
Unquoted spaces in addresses are replaced by this character.
I 56
Defaults to space (i.e., no change is made).
E 56
D 154
.ip c
E 154
I 154
D 155
.ip HoldExpensive
[c]
E 154
If an outgoing mailer is marked as being expensive,
don't connect immediately.
This requires that queueing be compiled in,
since it will depend on a queue run process to
actually send the mail.
E 155
I 155
D 166
.ip BrokenSmtpPeers
[no short name]
If set, don't use a two-line SMTP greeting message;
this breaks some SMTP clients who might try to send mail to you.
If you set this, it is recommended that you include the word
``ESMTP''
somewhere in the
.b $e
macro so that other sendmails will use ESMTP instead of SMTP.
E 166
.ip CheckAliases
[n]
Validate the RHS of aliases when rebuilding the alias database.
E 155
D 154
.ip C\fIN\fP
E 154
I 154
.ip CheckpointInterval=\fIN\fP
[C]
E 154
Checkpoints the queue every
.i N
(default 10)
addresses sent.
If your system crashes during delivery to a large list,
this prevents retransmission to any but the last
.I N
recipients.
I 155
.ip ClassFactor=\fIfact\fP
[z]
The indicated
.i fact or
is multiplied by the message class
(determined by the Precedence: field in the user header
and the
.b P
lines in the configuration file)
and subtracted from the priority.
Thus, messages with a higher Priority: will be favored.
Defaults to 1800.
I 162
.ip ColonOkInAddr
[no short name]
If set, colons are acceptable in e-mail addresses
(e.g.,
.q host:user ).
If not set, colons indicate the beginning of a RFC 822 group construct
(\c
.q "groupname: member1, member2, ... memberN;" ).
Doubled colons are always acceptable
(\c
.q nodename::user )
and proper route-addr nesting is understood
(\c
.q <@relay:user@host> ).
Furthermore, this option defaults on if the configuration version level
is less than 6 (for back compatibility).
However, it must be off for full compatibility with RFC 822.
E 162
.ip ConnectionCacheSize=\fIN\fP
[k]
The maximum number of open connections that will be cached at a time.
The default is one.
This delays closing the current connection until
either this invocation of
.i sendmail
needs to connect to another host
or it terminates.
Setting it to zero defaults to the old behavior,
that is, connections are closed immediately.
I 157
Since this consumes file descriptors,
the connection cache should be kept small:
4 is probably a practical maximum.
E 157
.ip ConnectionCacheTimeout=\fItimeout\fP
[K]
The maximum amount of time a cached connection will be permitted to idle
without activity.
If this time is exceeded,
the connection is immediately closed.
This value should be small (on the order of ten minutes).
Before
.i sendmail
uses a cached connection,
D 157
it always sends a NOOP (no operation) command
E 157
I 157
it always sends a RSET command
E 157
to check the connection;
if this fails, it reopens the connection.
This keeps your end from failing if the other end times out.
The point of this option is to be a good network neighbor
and avoid using up excessive resources
on the other end.
The default is five minutes.
.ip DaemonPortOptions=\fIoptions\fP
[O]
Set server SMTP options.
The options are
.i key=value
pairs.
Known keys are:
.(b
.ta 1i
Port	Name/number of listening port (defaults to "smtp")
Addr	Address mask (defaults INADDR_ANY)
Family	Address family (defaults to INET)
Listen	Size of listen queue (defaults to 10)
I 157
SndBufSize	Size of TCP send buffer
RcvBufSize	Size of TCP receive buffer
E 157
.)b
The
.i Addr ess
mask may be a numeric address in dot notation
or a network name.
D 157
.ip DefaultCharSet
E 157
I 157
.ip DefaultCharSet=\fIcharset\fP
E 157
[no short name]
When a message that has 8-bit characters but is not in MIME format
is converted to MIME
(see the EightBitMode option)
a character set must be included in the Content-Type: header.
This character set is normally set from the Charset= field
of the mailer descriptor.
If that is not set, the value of this option is used.
If this option is not set, the value
.q unknown-8bit
is used.
.ip DefaultUser=\fIuser:group\fP
[u]
Set the default userid for mailers to
.i user:group .
If
.i group
is omitted and 
.i user
is a user name
(as opposed to a numeric user id)
the default group listed in the /etc/passwd file for that user is used
as the default group.
Both
.i user
and
.i group
may be numeric.
Mailers without the
.i S
flag in the mailer definition
will run as this user.
D 157
Defaults to 1.
The value can also be given as a symbolic user name.
E 157
I 157
Defaults to 1:1.
The value can also be given as a symbolic user name.\**
.(f
\**The old
.b g
option has been combined into the
.b DefaultUser
option.
.)f
E 157
E 155
D 154
.ip d\fIx\fP
E 154
I 154
.ip DeliveryMode=\fIx\fP
[d]
E 154
Deliver in mode
.i x .
Legal modes are:
.(b
.ta 4n
i	Deliver interactively (synchronously)
b	Deliver in background (asynchronously)
q	Just queue the message (deliver during queue run)
.)b
I 56
D 75
Defaults to ``b''.
E 75
I 75
Defaults to ``b'' if no option is specified,
``i'' if it is specified but given no argument
(i.e., ``Od'' is equivalent to ``Odi'').
E 75
E 56
D 154
.ip D
E 154
I 154
D 155
.ip AutoRebuildAliases
[D]
E 154
If set,
rebuild the alias database if necessary and possible.
If this option is not set,
E 155
I 155
D 157
.ip DialDelay
E 157
I 157
The
.b \-v
command line flag sets this to
.b i .
.ip DialDelay=\fIsleeptime\fP
E 157
[no short name]
Dial-on-demand network connections can see timeouts
if a connection is opened before the call is set up.
If this is set to an interval and a connection times out
on the first connection being attempted
E 155
.i sendmail
D 155
will never rebuild the alias database
unless explicitly requested
using
.b \-bi .
D 154
.ip e\fIx\fP
E 154
I 154
.ip ErrorMode=\fIx\fP
[e]
E 154
Dispose of errors using mode
.i x .
The values for
.i x
are:
E 155
I 155
will sleep for this amount of time and try again.
This should give your system time to establish the connection
to your service provider.
Units default to seconds, so
.q DialDelay=5
uses a five second delay.
I 157
Defaults to zero
(no retry).
I 169
.ip DontExpandCnames
[no short name]
The standards say that all host addresses used in a mail message
must be fully canonical.
For example, if your host is named
.q Cruft.Foo.ORG
and also has an alias of
.q FTP.Foo.ORG ,
the former name must be used at all times.
This is enforced during host name canonification
($[ ... $] lookups).
If this option is set, the protocols are ignored and the
.q wrong
thing is done.
However, the IETF is moving toward changing this standard,
so the behaviour may become acceptable.
Please note that hosts downstream may still rewrite the address
to be the true canonical name however.
E 169
E 157
.ip DontPruneRoutes
[R]
Normally,
.i sendmail
tries to eliminate any unnecessary explicit routes
when sending an error message
(as discussed in RFC 1123 \(sc 5.2.6).
For example,
when sending an error message to
E 155
.(b
D 155
p	Print error messages (default)
q	No messages, just give exit status
m	Mail back errors
w	Write back errors (mail if user not logged in)
e	Mail back errors and give zero exit stat always
E 155
I 155
<@known1,@known2,@known3:user@unknown>
E 155
.)b
I 155
.i sendmail
will strip off the
.q @known1,@known2
in order to make the route as direct as possible.
However, if the
.b R
option is set, this will be disabled,
and the mail will be sent to the first address in the route,
even if later addresses are known.
This may be useful if you are caught behind a firewall.
D 157
.ip EightBitMode
E 157
I 157
.ip EightBitMode=\fIaction\fP
E 157
[8]
Set handling of eight-bit data.
There are two kinds of eight-bit data:
that declared as such using the
.b BODY=8BITMIME
ESMTP declaration or the
.b \-B8BITMIME
command line flag,
and undeclared 8-bit data, that is,
input that just happens to be eight bits.
There are three basic operations that can happen:
undeclared 8-bit data can be automatically converted to 8BITMIME,
undeclared 8-bit data can be passed as-is without conversion to MIME
(``just send 8''),
and declared 8-bit data can be converted to 7-bits
for transmission to a non-8BITMIME mailer.
D 157
The possible actions are:
E 157
I 157
The possible
.i action s
are:
E 157
.(b
D 157
r	Reject undeclared 8-bit data; don't convert 8BITMIME\(->7BIT (``reject'')
s	Reject undeclared 8-bit data; do convert 8BITMIME\(->7BIT (``strict'')
c	Convert undeclared 8-bit data to MIME; don't convert 8BITMIME\(->7BIT (``convert'')
m	Convert undeclared 8-bit data to MIME; do convert 8BITMIME\(->7BIT (``mime'')
j	Pass 8-bit data; don't convert 8BITMIME\(->7BIT (``just send 8'')
p	Pass 8-bit data; do convert 8BITMIME\(->7BIT (``pass'')
a	Adaptive algorithm: see below
E 157
I 157
D 164
  r	Reject undeclared 8-bit data;
	don't convert 8BITMIME\(->7BIT (``reject'')
  s	Reject undeclared 8-bit data;
	do convert 8BITMIME\(->7BIT (``strict'')
  c	Convert undeclared 8-bit data to MIME;
	don't convert 8BITMIME\(->7BIT (``convert'')
  m	Convert undeclared 8-bit data to MIME;
	do convert 8BITMIME\(->7BIT (``mime'')
  j	Pass undeclared 8-bit data;
	don't convert 8BITMIME\(->7BIT (``just send 8'')
  p	Pass undeclared 8-bit data;
	do convert 8BITMIME\(->7BIT (``pass'')
  a	Adaptive algorithm: see below
E 164
I 164
.\"  r	Reject undeclared 8-bit data;
.\"	don't convert 8BITMIME\(->7BIT (``reject'')
  s	Reject undeclared 8-bit data (``strict'')
.\"	do convert 8BITMIME\(->7BIT (``strict'')
.\"  c	Convert undeclared 8-bit data to MIME;
.\"	don't convert 8BITMIME\(->7BIT (``convert'')
  m	Convert undeclared 8-bit data to MIME (``mime'')
.\"	do convert 8BITMIME\(->7BIT (``mime'')
.\"  j	Pass undeclared 8-bit data;
.\"	don't convert 8BITMIME\(->7BIT (``just send 8'')
  p	Pass undeclared 8-bit data (``pass'')
.\"	do convert 8BITMIME\(->7BIT (``pass'')
.\"  a	Adaptive algorithm: see below
E 164
E 157
.)b
D 164
The adaptive algorithm is to accept 8-bit data,
converting it to 8BITMIME only if the receiver understands that,
otherwise just passing it as undeclared 8-bit data;
8BITMIME\(->7BIT conversions are done.
E 164
I 164
.\"The adaptive algorithm is to accept 8-bit data,
.\"converting it to 8BITMIME only if the receiver understands that,
.\"otherwise just passing it as undeclared 8-bit data;
.\"8BITMIME\(->7BIT conversions are done.
In all cases properly declared 8BITMIME data will be converted to 7BIT
as needed.
E 164
E 155
D 154
.ip E\fIfile/message\fP
E 154
I 154
D 157
.ip ErrorHeader=\fIfile/message\fP
E 157
I 157
.ip ErrorHeader=\fIfile-or-message\fP
E 157
[E]
E 154
Prepend error messages with the indicated message.
If it begins with a slash,
it is assumed to be the pathname of a file
containing a message (this is the recommended setting).
Otherwise, it is a literal message.
The error file might contain the name, email address, and/or phone number
of a local postmaster who could provide assistance
in to end users.
If the option is missing or null,
or if it names a file which does not exist or which is not readable,
no message is printed.
D 154
.ip f
E 154
I 154
D 155
.ip SaveFromLine
[f]
E 154
Save
Unix-style
.q From
lines at the front of headers.
Normally they are assumed redundant
and discarded.
D 118
.ip F\fImode\fP
The file mode for queue files.
.ip g\fIn\fP
Set the default group id
E 118
I 118
D 154
.ip F\fImode\fP
E 154
I 154
.ip TempFileMode=\fImode\fP
[F]
E 154
The file mode for queue files.
D 154
.ip g\fIn\fP
E 154
I 154
.ip DefaultGroup=\fIn\fP
[g]
E 154
Set the default group id
E 118
for mailers to run in
to
.i n .
I 56
Defaults to 1.
I 118
The value can also be given as a symbolic group name.
E 118
E 56
I 53
D 154
.ip G
E 154
I 154
.ip MatchGECOS
[G]
E 154
Allow fuzzy matching on the GECOS field.
If this flag is set,
and the usual user name lookups fail
D 115
(that is, there is no alias with this name and a
.i getpwnam
E 115
I 115
(that is, there is no alias with this name and a
.i getpwnam
E 115
fails),
sequentially search the password file
for a matching entry in the GECOS field.
This also requires that MATCHGECOS
be turned on during compilation.
This option is not recommended.
E 53
D 154
.ip h\fIN\fP
E 154
I 154
.ip MaxHopCount=\fIN\fP
[h]
E 154
The maximum hop count.
Messages that have been processed more than
.i N
times are assumed to be in a loop and are rejected.
I 56
Defaults to 25.
E 56
D 154
.ip H\fIfile\fP
E 154
I 154
.ip HelpFile=\fIfile\fP
[H]
E 154
D 111
Specify the help file
for SMTP.
E 111
I 111
Specify the help file
D 114
for SMTP.
E 114
I 114
for SMTP.
E 114
E 111
D 154
.ip i
E 154
I 154
.ip IgnoreDots
[i]
E 154
Ignore dots in incoming messages.
I 69
This is always disabled (that is, dots are always accepted)
when reading SMTP mail.
E 69
D 154
.ip I
E 154
I 154
.ip NameServerOptions
[I]
E 154
Insist that the BIND name server be running
to resolve host names.
If this is not set and the name server is not running,
the
.i /etc/hosts
file will be considered complete.
In general, you do want to set this option
if your
.i /etc/hosts
file does not include all hosts known to you
or if you are using the MX (mail forwarding) feature of the BIND name server.
The name server will still be consulted
D 113
even if this option is not set, but
.i sendmail
will feel free to resort to reading
.i /etc/hosts
if the name server is not available.
Thus, you should
.i never
set this option if you do not run the name server.
I 97
.ip j
If set, send error messages in MIME format
(see RFC1341 and RFC1344 for details).
E 97
.ip J\fIpath\fP
Set the path for searching for users' .forward files.
The default is
.q $z/.forward .
Some sites that use the automounter may prefer to change this to
.q /var/forward/$u
to search a file with the same name as the user in a system directory.
It can also be set to a sequence of paths separated by colons;
.i sendmail
stops at the first file it can successfully and safely open.
For example,
.q /var/forward/$u:$z/.forward
will search first in /var/forward/\c
E 113
I 113
even if this option is not set, but
.i sendmail
D 134
will feel free to resort to reading
.i /etc/hosts
E 134
I 134
will feel free to resort to reading
.i /etc/hosts
E 134
if the name server is not available.
Thus, you should
.i never
set this option if you do not run the name server.
D 154
.ip j
E 154
I 154
.ip SendMIMEErrors
[j]
E 154
If set, send error messages in MIME format
(see RFC1341 and RFC1344 for details).
E 155
I 155
.ip ErrorMode=\fIx\fP
[e]
Dispose of errors using mode
.i x .
The values for
.i x
are:
.(b
p	Print error messages (default)
q	No messages, just give exit status
m	Mail back errors
w	Write back errors (mail if user not logged in)
e	Mail back errors and give zero exit stat always
.)b
.ip FallbackMXhost=\fIfallbackhost\fP
[V]
If specified, the
.i fallbackhost
acts like a very low priority MX
on every host.
This is intended to be used by sites with poor network connectivity.
D 157
.ip ForkQueueRuns
E 157
I 157
.ip ForkEachJob
E 157
[Y]
If set,
deliver each job that is run from the queue in a separate process.
Use this option if you are short of memory,
since the default tends to consume considerable amounts of memory
while the queue is being processed.
E 155
D 154
.ip J\fIpath\fP
E 154
I 154
.ip ForwardPath=\fIpath\fP
[J]
E 154
Set the path for searching for users' .forward files.
The default is
.q $z/.forward .
Some sites that use the automounter may prefer to change this to
.q /var/forward/$u
to search a file with the same name as the user in a system directory.
It can also be set to a sequence of paths separated by colons;
.i sendmail
stops at the first file it can successfully and safely open.
For example,
.q /var/forward/$u:$z/.forward
will search first in /var/forward/\c
E 113
.i username
and then in
D 104
.i ~username /.forward
(but only if the first file does not exist).
.ip k\fIN\fP
E 104
I 104
.i ~username /.forward
(but only if the first file does not exist).
D 154
.ip k\fIN\fP
E 154
I 154
D 155
.ip ConnectionCacheSize=\fIN\fP
[k]
E 154
E 104
D 101
The maximum number of open connections that will be cached at a time.
The default is one.
This delays closing the the current connection until
either this invocation of sendmail needs to connect to another host
or it terminates.
Setting it to zero defaults to the old behavior,
that is, connections are closed immediately.
.ip K\fItimeout\fP
The maximum amount of time a cached connection will be permitted to idle
without activity.
If this time is exceeded,
the connection is immediately closed.
This value should be small (on the order of ten minutes).
Before
.b sendmail
uses a cached connection,
it always sends a NOOP (no operation) command
to check the connection;
if this fails, it reopens the connection.
This keeps your end from failing if the other end times out.
The point of this option is to be a good network neighbor
and avoid using up excessive resources
on the other end.
The default is five minutes.
.ip L\fIn\fP
Set the default log level to
.i n .
I 56
Defaults to 9.
E 56
.ip m
Send to me too,
even if I am in an alias expansion.
.ip M\fIx\|value\fP
Set the macro
.i x
to
.i value .
This is intended only for use from the command line.
I 75
.ip n
Validate the RHS of aliases when rebuilding the alias database.
E 75
.ip o
Assume that the headers may be in old format,
i.e.,
spaces delimit names.
This actually turns on
an adaptive algorithm:
if any recipient address contains a comma, parenthesis,
or angle bracket,
it will be assumed that commas already exist.
If this flag is not on,
only commas delimit names.
Headers are always output with commas between the names.
E 101
I 101
The maximum number of open connections that will be cached at a time.
The default is one.
D 139
This delays closing the the current connection until
E 139
I 139
This delays closing the current connection until
E 139
D 117
either this invocation of sendmail needs to connect to another host
E 117
I 117
either this invocation of
.i sendmail
needs to connect to another host
E 117
or it terminates.
Setting it to zero defaults to the old behavior,
that is, connections are closed immediately.
D 154
.ip K\fItimeout\fP
E 154
I 154
.ip ConnectionCacheTimeout=\fItimeout\fP
[K]
E 154
The maximum amount of time a cached connection will be permitted to idle
without activity.
D 117
If this time is exceeded,
the connection is immediately closed.
This value should be small (on the order of ten minutes).
Before
.b sendmail
uses a cached connection,
it always sends a NOOP (no operation) command
to check the connection;
if this fails, it reopens the connection.
This keeps your end from failing if the other end times out.
The point of this option is to be a good network neighbor
and avoid using up excessive resources
on the other end.
The default is five minutes.
I 104
.ip l
If there is an
.q Errors-To:
header, send error messages to the addresses listed there.
They normally go to the envelope sender.
Use of this option causes sendmail to violate RFC 1123.
E 104
.ip L\fIn\fP
Set the default log level to
.i n .
Defaults to 9.
.ip m
Send to me too,
even if I am in an alias expansion.
.ip M\fIx\|value\fP
Set the macro
.i x
to
.i value .
This is intended only for use from the command line.
.ip n
Validate the RHS of aliases when rebuilding the alias database.
.ip o
Assume that the headers may be in old format,
i.e.,
spaces delimit names.
This actually turns on
an adaptive algorithm:
if any recipient address contains a comma, parenthesis,
or angle bracket,
E 117
I 117
If this time is exceeded,
the connection is immediately closed.
This value should be small (on the order of ten minutes).
Before
.i sendmail
uses a cached connection,
it always sends a NOOP (no operation) command
to check the connection;
if this fails, it reopens the connection.
This keeps your end from failing if the other end times out.
The point of this option is to be a good network neighbor
and avoid using up excessive resources
on the other end.
The default is five minutes.
D 154
.ip l
E 154
I 154
.ip UseErrorsTo
[l]
E 154
If there is an
.q Errors-To:
header, send error messages to the addresses listed there.
They normally go to the envelope sender.
Use of this option causes
.i sendmail
to violate RFC 1123.
E 155
I 155
.ip HelpFile=\fIfile\fP
[H]
Specify the help file
for SMTP.
.ip HoldExpensive
[c]
If an outgoing mailer is marked as being expensive,
don't connect immediately.
This requires that queueing be compiled in,
since it will depend on a queue run process to
actually send the mail.
.ip IgnoreDots
[i]
Ignore dots in incoming messages.
This is always disabled (that is, dots are always accepted)
when reading SMTP mail.
E 155
D 154
.ip L\fIn\fP
E 154
I 154
D 157
.ip LogLevel\fIn\fP
E 157
I 157
.ip LogLevel=\fIn\fP
E 157
[L]
E 154
Set the default log level to
.i n .
Defaults to 9.
D 154
.ip m
E 154
I 154
D 155
.ip MeToo
[m]
E 154
Send to me too,
even if I am in an alias expansion.
E 155
.ip M\fIx\|value\fP
I 154
[no long version]
E 154
Set the macro
.i x
to
.i value .
This is intended only for use from the command line.
D 154
.ip n
E 154
I 154
D 155
.ip CheckAliases
[n]
E 154
Validate the RHS of aliases when rebuilding the alias database.
E 155
I 155
D 157
XXX
E 157
I 157
The
.b \-M
flag is preferred.
E 157
.ip MatchGECOS
[G]
Allow fuzzy matching on the GECOS field.
If this flag is set,
and the usual user name lookups fail
(that is, there is no alias with this name and a
.i getpwnam
fails),
sequentially search the password file
for a matching entry in the GECOS field.
This also requires that MATCHGECOS
be turned on during compilation.
This option is not recommended.
.ip MaxHopCount=\fIN\fP
[h]
The maximum hop count.
Messages that have been processed more than
.i N
times are assumed to be in a loop and are rejected.
Defaults to 25.
D 157
.ip MaxHostStatAge
E 157
I 157
.ip MaxHostStatAge=\fIage\fP
E 157
[no short name]
Not yet implemented.
This option specifies how long host status information will be retained.
For example, if a host is found to be down,
connections to that host will not be retried for this interval.
The units default to minutes.
I 168
.ip MaxQueueRunSize=\fIN\fP
[no short name]
The maximum number of jobs that will be processed
in a single queue run.
If not set, there is no limit on the size.
If you have very large queues or a very short queue run interval
this could be unstable.
However, since the first
.i N
jobs in queue directory order are run (rather than the
.i N
highest priority jobs)
this should be set as high as possible to avoid
.q losing
jobs that happen to fall late in the queue directory.
E 168
.ip MeToo
[m]
Send to me too,
even if I am in an alias expansion.
D 157
.ip MinFreeBlocks=\fIN\fP/\fIM\fP
E 157
I 157
.ip MaxMessageSize=\fIN\fP
I 160
[no short name]
E 160
Specify the maximum message size
to be advertised in the ESMTP EHLO response.
Messages larger than this will be rejected.
.ip MinFreeBlocks=\fIN\fP
E 157
[b]
Insist on at least
.i N
blocks free on the filesystem that holds the queue files
before accepting email via SMTP.
If there is insufficient space
.i sendmail
gives a 452 response
to the MAIL command.
This invites the sender to try again later.
D 157
The optional
.i M
is a maximum message size advertised in the ESMTP EHLO response.
It is currently otherwise unused.
.ip MinQueueAge
E 157
I 157
.ip MinQueueAge=\fPage\fP
E 157
[no short name]
Don't process any queued jobs
that have been in the queue less than the indicated time interval.
This is intended to allow you to get responsiveness
by processing the queue fairly frequently
without thrashing your system by trying jobs too often.
The default units are minutes.
D 157
.ip NameServerOptions
E 157
I 157
.ip ResolverOptions=\fIoptions\fP
E 157
[I]
D 157
Set name server (actually, resolver) options.
XXX
E 157
I 157
Set resolver options.
Values can be set using
.b + \c
.i flag
and cleared using
.b \- \c
.i flag ;
the
.i flag s
can be
.q debug ,
.q aaonly ,
.q usevc ,
.q primary ,
.q igntc ,
.q recurse ,
.q defnames ,
.q stayopen ,
or
.q dnsrch .
I 162
The string
.q HasWildcardMX
(without a
.b +
or
.b \- )
can be specified to turn off matching against MX records
when doing name canonifications.
E 162
E 157
.b N.B.
Prior to 8.7,
this option indicated that the name server be responding
in order to accept addresses.
This has been replaced by checking to see
if the
.q dns
method is listed in the service switch entry for the
.q hosts
service.
I 156
.ip NoRecipientAction
[no short name]
The action to take when you receive a message that has no valid
recipient headers (To:, Cc:, Bcc:).
It can be
.b None
to pass the message on unmodified,
which violates the protocol,
.b Add-To
to add a To: header with any recipients it can find in the envelope
(which might expose Bcc: recipients),
.b Add-Apparently-To
to add an Apparently-To: header
(this is only for back-compatibility
and is officially deprecated),
.b Add-To-Undisclosed
to add a header
.q "To: undisclosed-recipients:;"
to make the header legal without disclosing anything,
or
.b Add-Bcc
to add an empty Bcc: header.
E 156
E 155
D 154
.ip o
E 154
I 154
.ip OldStyleHeaders
[o]
E 154
Assume that the headers may be in old format,
i.e.,
spaces delimit names.
This actually turns on
an adaptive algorithm:
if any recipient address contains a comma, parenthesis,
or angle bracket,
E 117
it will be assumed that commas already exist.
If this flag is not on,
only commas delimit names.
Headers are always output with commas between the names.
I 157
Defaults to off.
E 157
E 101
I 86
D 97
.ip O\fIoptions\fP
Set server SMTP options.
The options are
.i key=value
pairs.
Known keys are:
.(b
.ta 1i
Port	Name/number of listening port (defaults to "smtp")
Addr	Address mask (defaults INADDR_ANY)
Family	Address family (defaults to INET)
.)b
The
.i Addr ess
mask may be a numeric address in dot notation
or a network name.
E 86
I 67
.ip p\fI\|opt,opt,...\fP
Set the privacy
.i opt ions.
``Privacy'' is really a misnomer;
D 69
many of these are just a way of insisting on stricter adherance
E 69
I 69
many of these are just a way of insisting on stricter adherence
E 69
to the SMTP protocol.
The
.i opt ions
can be selected from:
.(b
I 69
.ta \w'needvrfyhelo'u+3n
E 69
public	Allow open access
D 74
needmailhelo	Insist on HELO command before MAIL
needexpnhelo	Insist on HELO command before EXPN
E 74
I 74
needmailhelo	Insist on HELO or EHLO command before MAIL
needexpnhelo	Insist on HELO or EHLO command before EXPN
E 74
noexpn	Disallow EXPN entirely
D 74
needvrfyhelo	Insist on HELO command before VRFY
E 74
I 74
needvrfyhelo	Insist on HELO or EHLO command before VRFY
E 74
novrfy	Disallow VRFY entirely
D 72
goaway	Disallow essentially all status queries
E 72
I 72
restrictmailq	Restrict mailq command
goaway	Disallow essentially all SMTP status queries
E 72
.)b
I 72
The
.q goaway
pseudo-flag sets all flags except
.q restrictmailq .
If mailq is restricted,
only people in the same group as the queue directory
can print the queue.
E 72
E 67
.ip P\fIpostmaster\fP
If set,
copies of error messages will be sent to the named
.i postmaster .
I 74
Only the header of the failed message is sent.
E 74
Since most errors are user problems,
this is probably not a good idea on large sites,
and arguably contains all sorts of privacy violations,
but it seems to be popular with certain operating systems vendors.
.ip q\fIfactor\fP
Use
.i factor
as the multiplier in the map function
to decide when to just queue up jobs rather than run them.
This value is divided by the difference between the current load average
and the load average limit
(\c
.b x
flag)
to determine the maximum message priority
that will be sent.
D 56
Defaults to 10000.
E 56
I 56
Defaults to 600000.
E 56
.ip Q\fIdir\fP
Use the named
.i dir
as the queue directory.
D 68
.ip r\fItime\fP
E 68
I 68
D 69
.ip r\fItimeouts\fP
E 69
I 69
.ip r\|\fItimeouts\fP
E 69
E 68
Timeout reads after
.i time
interval.
I 56
D 68
Defaults to two hours.
E 68
I 68
The
.i timeouts
E 97
I 97
D 125
.ip O\fIoptions\fP
E 125
I 125
D 154
.ip O\fIoptions\fP
E 154
I 154
D 155
.ip DaemonPortOptions=\fIoptions\fP
[O]
E 154
E 125
Set server SMTP options.
The options are
.i key=value
pairs.
Known keys are:
.(b
.ta 1i
Port	Name/number of listening port (defaults to "smtp")
Addr	Address mask (defaults INADDR_ANY)
Family	Address family (defaults to INET)
I 98
Listen	Size of listen queue (defaults to 10)
E 98
.)b
The
.i Addr ess
mask may be a numeric address in dot notation
or a network name.
E 155
I 155
.ip PostmasterCopy=\fIpostmaster\fP
[P]
If set,
copies of error messages will be sent to the named
.i postmaster .
Only the header of the failed message is sent.
Since most errors are user problems,
this is probably not a good idea on large sites,
and arguably contains all sorts of privacy violations,
but it seems to be popular with certain operating systems vendors.
I 157
Defaults to no postmaster copies.
E 157
E 155
D 154
.ip p\fI\|opt,opt,...\fP
E 154
I 154
.ip PrivacyOptions=\fI\|opt,opt,...\fP
[p]
E 154
Set the privacy
.i opt ions.
``Privacy'' is really a misnomer;
many of these are just a way of insisting on stricter adherence
to the SMTP protocol.
The
.i opt ions
can be selected from:
.(b
.ta \w'needvrfyhelo'u+3n
public	Allow open access
needmailhelo	Insist on HELO or EHLO command before MAIL
needexpnhelo	Insist on HELO or EHLO command before EXPN
noexpn	Disallow EXPN entirely
needvrfyhelo	Insist on HELO or EHLO command before VRFY
novrfy	Disallow VRFY entirely
restrictmailq	Restrict mailq command
I 122
restrictqrun	Restrict \-q command line flag
I 148
noreceipts	Ignore Return-Receipt-To: header
E 148
E 122
goaway	Disallow essentially all SMTP status queries
I 139
authwarnings	Put X-Authentication-Warning: headers in messages
E 139
.)b
The
.q goaway
pseudo-flag sets all flags except
D 122
.q restrictmailq .
E 122
I 122
.q restrictmailq
and
.q restrictqrun .
E 122
If mailq is restricted,
only people in the same group as the queue directory
can print the queue.
I 122
If queue runs are restricted,
only root and the owner of the queue directory
can run the queue.
I 139
Authentication Warnings add warnings about various conditions
that may indicate attempts to spoof the mail system,
such as using an non-standard queue directory.
E 139
E 122
D 154
.ip P\fIpostmaster\fP
E 154
I 154
D 155
.ip PostmasterCopy=\fIpostmaster\fP
[P]
E 154
If set,
copies of error messages will be sent to the named
.i postmaster .
Only the header of the failed message is sent.
Since most errors are user problems,
this is probably not a good idea on large sites,
and arguably contains all sorts of privacy violations,
but it seems to be popular with certain operating systems vendors.
E 155
I 155
.ip QueueDirectory=\fIdir\fP
[Q]
Use the named
.i dir
as the queue directory.
E 155
D 154
.ip q\fIfactor\fP
E 154
I 154
.ip QueueFactor=\fIfactor\fP
[q]
E 154
Use
.i factor
as the multiplier in the map function
to decide when to just queue up jobs rather than run them.
This value is divided by the difference between the current load average
and the load average limit
(\c
D 157
.b x
flag)
E 157
I 157
.b QueueLA
option)
E 157
to determine the maximum message priority
that will be sent.
Defaults to 600000.
D 154
.ip Q\fIdir\fP
E 154
I 154
D 155
.ip QueueDirectory=\fIdir\fP
[Q]
E 154
Use the named
.i dir
as the queue directory.
D 154
.ip r\|\fItimeouts\fP
E 154
I 154
.ip ReadTimeout=\|\fItimeouts\fP
[r]
E 154
Timeout reads after
.i time
interval.
The
.i timeouts
E 97
D 96
argument is a list of
.i keyword=value
pairs.
The recognized timeouts and their default values, and their
minimum values specified in RFC 1123 section 5.3.2 are:
.(b
I 69
.ta \w'datafinal'u+3n
E 69
initial	wait for initial greeting message [5m, 5m]
D 74
helo	reply to HELO command [5m, none]
E 74
I 74
helo	reply to HELO or EHLO command [5m, none]
E 74
mail	reply to MAIL command [10m, 5m]
rcpt	reply to RCPT command [1h, 5m]
datainit	reply to DATA command [5m, 2m]
datablock	data block read [1h, 3m]
datafinal	reply to final ``.'' in data [1h, 10m]
rset	reply to RSET command [5m, none]
quit	reply to QUIT command [2m, none]
D 69
misc	reply to random short commands (NOOP, VERB, etc.) [2m, none]
E 69
I 69
misc	reply to NOOP and VERB commands [2m, none]
E 69
command	command read [1h, 5m]
.)b
All but
.q command
apply to client SMTP.
For back compatibility,
a timeout with no ``keyword='' part
will set all of the longer values.
E 68
E 56
.ip s
Be super-safe when running things,
E 96
I 96
argument is a list of
.i keyword=value
pairs.
E 155
I 155
.ip QueueLA=\fILA\fP
[x]
When the system load average exceeds
.i LA ,
just queue messages
(i.e., don't try to send them).
Defaults to 8.
D 157
.ip QueueSortOrder
E 157
I 157
.ip QueueSortOrder=\fIalgorithm\fP
E 157
[no short name]
D 157
Sets the algorithm used for sorting the queue.
E 157
I 157
Sets the
.i algorithm
used for sorting the queue.
E 157
Only the first character of the value is used.
Legal values are
.q host
(to order by the name of the first host name of the first recipient)
and
.q priority
(to order strictly by message priority).
Host ordering makes better use of the connection cache,
but may tend to process low priority messages
that go to a single host
over high priority messages that go to several hosts;
it probably shouldn't be used on slow network links.
Priority ordering is the default.
D 157
.ip QueueTimeout=\fIrtime/wtime\fP
[T]
Set the queue timeout to
.i rtime .
After this interval,
messages that have not been successfully sent
will be returned to the sender.
Defaults to five days.
The optional
.i wtime
is the time after which a warning message is sent.
If it is missing or zero
then no warning messages are sent.
E 157
.ip Timeout.\fItype\fP=\|\fItimeout\fP
[r; subsumes old T option as well]
Set timeout values.
The actual timeout is indicated by the
.i type .
E 155
The recognized timeouts and their default values, and their
minimum values specified in RFC 1123 section 5.3.2 are:
.(b
.ta \w'datafinal'u+3n
initial	wait for initial greeting message [5m, 5m]
helo	reply to HELO or EHLO command [5m, none]
mail	reply to MAIL command [10m, 5m]
rcpt	reply to RCPT command [1h, 5m]
datainit	reply to DATA command [5m, 2m]
datablock	data block read [1h, 3m]
datafinal	reply to final ``.'' in data [1h, 10m]
rset	reply to RSET command [5m, none]
quit	reply to QUIT command [2m, none]
misc	reply to NOOP and VERB commands [2m, none]
D 155
command	command read [1h, 5m]
E 155
I 120
ident	IDENT protocol timeout [30s, none]
I 155
fileopen\(dg	timeout on opening .forward and :include: files [60s, none]
command\(dg	command read [1h, 5m]
queuereturn\(dg	how long until a message is returned [5d, 5d]
queuewarn\(dg	how long until a warning is sent [none, none]
E 155
E 120
.)b
D 155
All but
.q command
E 155
I 155
All but those marked with a dagger (\(dg)
E 155
apply to client SMTP.
I 157
If the message is submitted using the
.sm NOTIFY
.sm SMTP
extension,
warning messages will only be sent if
.sm NOTIFY=DELAY
is specified.
E 157
D 155
For back compatibility,
a timeout with no ``keyword='' part
will set all of the longer values.
I 111
D 154
.ip R
E 154
I 154
.ip DontPruneRoutes
[R]
E 154
Normally,
E 155
I 155
The queuereturn and queuewarn timeouts
can be further qualified with a tag based on the Precedence: field
in the message;
they must be one of
.q urgent
(indicating a positive non-zero precedence)
.q normal
(indicating a zero precedence), or
.q non-urgent
(indicating negative precedences).
For example, setting
.q Timeout.queuewarn.urgent=1h
sets the warning timeout for urgent messages only
to one hour.
The default if no precedence is indicated
is to set the timeout for all precedences.
.ip RecipientFactor=\fIfact\fP
[y]
The indicated
.i fact or
is added to the priority (thus
.i lowering
the priority of the job)
for each recipient,
i.e., this value penalizes jobs with large numbers of recipients.
Defaults to 30000.
.ip RefuseLA=\fILA\fP
[X]
When the system load average exceeds
.i LA ,
I 166
refuse incoming SMTP connections.
Defaults to 12.
.ip RetryFactor=\fIfact\fP
E 166
D 166
refuse incoming SMTP connections.
Defaults to 12.
I 157
.ip RetryFactor=\fIfact\fP
E 166
[Z]
The
.i fact or
is added to the priority
every time a job is processed.
Thus,
each time a job is processed,
its priority will be decreased by the indicated value.
In most environments this should be positive,
since hosts that are down are all too often down for a long time.
Defaults to 90000.
E 157
.ip SaveFromLine
[f]
Save
Unix-style
.q From
lines at the front of headers.
Normally they are assumed redundant
and discarded.
.ip SendMIMEErrors
[j]
If set, send error messages in MIME format
D 160
(see RFC1341 and RFC1344 for details).
E 160
I 160
(see RFC1521 and RFC1344 for details).
E 160
D 157
.ip ServiceSwitchFile
E 157
I 157
.ip ServiceSwitchFile=\fIfilename\fP
E 157
[no short name]
If your host operating system has a service switch abstraction
(e.g., /etc/nsswitch.conf on Solaris
or /etc/svc.conf on Ultrix and DEC OSF/1)
that service will be consulted and this option is ignored.
Otherwise, this is the name of a file
that provides the list of methods used to implement particular services.
The syntax is a series of lines,
each of which is a sequence of words.
The first word is the service name,
and following words are service types.
The services that
E 155
.i sendmail
D 155
tries to eliminate any unnecessary explicit routes
when sending an error message
(as discussed in RFC 1123 \(sc 5.2.6).
For example,
when sending an error message to
E 155
I 155
consults directly are
.q aliases
and
.q hosts.
Service types can be
.q dns ,
.q nis ,
.q nisplus ,
or
.q files
(with the caveat that the appropriate support
must be compiled in
before the service can be referenced).
If ServiceSwitchFile is not specified, it defaults to /etc/service.switch.
If that file does not exist, the default switch is:
E 155
.(b
D 155
<@known1,@known2,@unknown:user@known3>
E 155
I 155
aliases	files
hosts	dns nis files
E 155
.)b
I 157
The default file is
.q /etc/service.switch .
E 157
D 155
.i sendmail
will strip off the
.q @known1
in order to make the route as direct as possible.
However, if the
.b R
option is set, this will be disabled,
and the mail will be sent to the first address in the route,
even if later addresses are known.
This may be useful if you are caught behind a firewall.
E 155
I 155
.ip SevenBitInput
[7]
Strip input to seven bits for compatibility with old systems.
This shouldn't be necessary.
.ip StatusFile=\fIfile\fP
[S]
D 157
Log statistics in the named
E 157
I 157
Log summary statistics in the named
E 157
.i file .
I 157
If not set,
no summary statistics are saved.
This file does not grow in size.
It can be printed using the
.i mailstats (8)
program.
E 157
E 155
E 111
D 154
.ip s
E 154
I 154
.ip SuperSafe
[s]
E 154
Be super-safe when running things,
E 96
D 95
i.e.,
always instantiate the queue file,
even if you are going to attempt immediate delivery.
.i Sendmail
always instantiates the queue file
before returning control the the client
under any circumstances.
.ip S\fIfile\fP
Log statistics in the named
E 95
I 95
i.e.,
always instantiate the queue file,
even if you are going to attempt immediate delivery.
.i Sendmail
always instantiates the queue file
D 139
before returning control the the client
E 139
I 139
before returning control the client
E 139
under any circumstances.
I 157
This should really
.i always
be set.
E 157
D 154
.ip S\fIfile\fP
E 154
I 154
D 155
.ip StatusFile=\fIfile\fP
[S]
E 154
Log statistics in the named
E 95
D 92
.i file .
.ip t\fIS,D\fP
Set the local time zone name to
.i S
for standard time and
.i D
for daylight time;
this is only used under version six.
D 79
.ip T\fItime\fP
E 79
I 79
.ip T\fIrtime/wtime\fP
E 79
Set the queue timeout to
D 79
.i time .
E 79
I 79
.i rtime .
E 79
After this interval,
messages that have not been successfully sent
will be returned to the sender.
I 56
D 79
Defaults to three days.
E 79
I 79
Defaults to five days.
The optional
.i wtime
is the time after which a warning message is sent.
If it is missing or zero
then no warning messages are sent.
E 79
E 56
.ip u\fIn\fP
Set the default userid for mailers to
.i n .
E 92
I 92
.i file .
E 155
I 155
.ip TempFileMode=\fImode\fP
[F]
The file mode for queue files.
D 157
.ip TimeFactor=\fIfact\fP
[Z]
The
.i fact or
is added to the priority
every time a job is processed.
Thus,
each time a job is processed,
its priority will be decreased by the indicated value.
In most environments this should be positive,
since hosts that are down are all too often down for a long time.
Defaults to 90000.
E 157
I 157
It is interpreted in octal by default.
Defaults to 0600.
E 157
E 155
D 118
.ip t\fIS,D\fP
Set the local time zone name to
.i S
for standard time and
.i D
for daylight time;
this is only used under version six.
E 118
I 118
D 154
.ip t\fItzinfo\fP
E 154
I 154
.ip TimeZoneSpec=\fItzinfo\fP
[t]
E 154
Set the local time zone info to
.i tzinfo
\*- for example,
.q PST8PDT .
Actually, if this is not set,
the TZ environment variable is cleared (so the system default is used);
if set but null, the user's TZ variable is used,
and if set and non-null the TZ variable is set to this value.
E 118
D 154
.ip T\fIrtime/wtime\fP
E 154
I 154
D 155
.ip QueueTimeout=\fIrtime/wtime\fP
[T]
E 154
Set the queue timeout to
.i rtime .
After this interval,
messages that have not been successfully sent
will be returned to the sender.
Defaults to five days.
The optional
.i wtime
is the time after which a warning message is sent.
If it is missing or zero
then no warning messages are sent.
D 154
.ip u\fIn\fP
E 154
I 154
.ip DefaultUser=\fIn\fP
[u]
E 154
Set the default userid for mailers to
.i n .
E 92
Mailers without the
.i S
flag in the mailer definition
will run as this user.
I 56
Defaults to 1.
I 118
The value can also be given as a symbolic user name.
E 118
E 56
D 154
.ip U\fIudbspec\fP
E 154
I 154
.ip UserDatabaseSpec=\fIudbspec\fP
[U]
E 154
The user database specification.
D 154
.ip v
E 154
I 154
.ip Verbose
[v]
E 154
Run in verbose mode.
I 75
If this is set,
.i sendmail
adjusts options
.b c
(don't connect to expensive mailers)
and
.b d
(delivery mode)
so that all mail is delivered completely
in a single job
so that you can see the entire delivery process.
Option
.b v
should
.i never
be set in the configuration file;
it is intended for command line use only.
I 86
D 154
.ip V\fIfallbackhost\fP
E 154
I 154
.ip FallbackMXhost=\fIfallbackhost\fP
[V]
E 154
If specified, the
.i fallbackhost
acts like a very low priority MX
on every host.
This is intended to be used by sites with poor network connectivity.
E 155
I 114
D 154
.ip w
E 154
I 154
.ip TryNullMXList
[w]
E 154
D 157
If you are the
E 157
I 157
If this system is the
E 157
.q best
(that is, lowest preference)
MX for a given host,
D 157
you should normally detect this situation
and treat that condition specially,
E 157
I 157
its configuration rules should normally detect this situation
and treat that condition specially
E 157
by forwarding the mail to a UUCP feed,
treating it as local,
or whatever.
However, in some cases (such as Internet firewalls)
you may want to try to connect directly to that host
as though it had no MX records at all.
Setting this option causes
.i sendmail
to try this.
The downside is that errors in your configuration
are likely to be diagnosed as
.q "host unknown"
or
.q "message timed out"
instead of something more meaningful.
This option is disrecommended.
E 114
E 86
E 75
D 63
.ip w
Asserts that this domain does not have wildcard MX records
in the name server database.
These wildcards can
.q capture
names that are directed outward
and forward them back to your own site.
If there are no wildcards matching your domain,
this option will reduce name server load
and improve performance.
E 63
D 154
.ip x\fILA\fP
E 154
I 154
D 155
.ip QueueLA=\fILA\fP
[x]
E 154
When the system load average exceeds
.i LA ,
just queue messages
(i.e., don't try to send them).
I 56
Defaults to 8.
E 56
D 154
.ip X\fILA\fP
E 154
I 154
.ip RefuseLA=\fILA\fP
[X]
E 154
When the system load average exceeds
.i LA ,
refuse incoming SMTP connections.
I 56
Defaults to 12.
E 56
D 88
.ip y\fIfact\fP
The indicated
.i fact or
is added to the priority (thus
.i lowering
the priority of the job)
for each recipient,
i.e., this value penalizes jobs with large numbers of recipients.
I 56
Defaults to 30000.
E 56
.ip Y
If set,
deliver each job that is run from the queue in a separate process.
Use this option if you are short of memory,
since the default tends to consume considerable amounts of memory
while the queue is being processed.
.ip z\fIfact\fP
The indicated
.i fact or
is multiplied by the message class
(determined by the Precedence: field in the user header
and the
.b P
lines in the configuration file)
and subtracted from the priority.
Thus, messages with a higher Priority: will be favored.
I 56
Defaults to 1800.
E 56
.ip Z\fIfact\fP
The
.i fact or
E 88
I 88
D 154
.ip y\fIfact\fP
E 154
I 154
.ip RecipientFactor=\fIfact\fP
[y]
E 154
The indicated
.i fact or
is added to the priority (thus
.i lowering
the priority of the job)
for each recipient,
i.e., this value penalizes jobs with large numbers of recipients.
Defaults to 30000.
D 154
.ip Y
E 154
I 154
.ip ForkQueueRuns
[Y]
E 154
If set,
deliver each job that is run from the queue in a separate process.
Use this option if you are short of memory,
since the default tends to consume considerable amounts of memory
while the queue is being processed.
D 154
.ip z\fIfact\fP
E 154
I 154
.ip ClassFactor=\fIfact\fP
[z]
E 154
The indicated
.i fact or
is multiplied by the message class
(determined by the Precedence: field in the user header
and the
.b P
lines in the configuration file)
and subtracted from the priority.
Thus, messages with a higher Priority: will be favored.
I 121
Defaults to 1800.
D 154
.ip Z\fIfact\fP
E 154
I 154
.ip TimeFactor=\fIfact\fP
[Z]
E 154
The
.i fact or
is added to the priority
every time a job is processed.
Thus,
each time a job is processed,
its priority will be decreased by the indicated value.
In most environments this should be positive,
since hosts that are down are all too often down for a long time.
Defaults to 90000.
D 154
.ip 7
E 154
I 154
.ip SevenBitInput
[7]
E 154
Strip input to seven bits for compatibility with old systems.
This shouldn't be necessary.
I 152
D 154
.ip 8
E 154
I 154
.ip EightBitMode
[8]
E 154
Set handling of eight-bit data.
There are two kinds of eight-bit data:
that declared as such using the
.b BODY=8BITMIME
ESMTP declaration or the
.b \-B8BITMIME
command line flag,
and undeclared 8-bit data, that is,
input that just happens to be eight bits.
There are three basic operations that can happen:
undeclared 8-bit data can be automatically converted to 8BITMIME,
undeclared 8-bit data can be passed as-is without conversion to MIME
(``just send 8''),
and declared 8-bit data can be converted to 7-bits
for transmission to a non-8BITMIME mailer.
The possible actions are:
.(b
r	Reject undeclared 8-bit data; don't convert 8BITMIME\(->7BIT (``reject'')
s	Reject undeclared 8-bit data; do convert 8BITMIME\(->7BIT (``strict'')
c	Convert undeclared 8-bit data to MIME; don't convert 8BITMIME\(->7BIT (``convert'')
m	Convert undeclared 8-bit data to MIME; do convert 8BITMIME\(->7BIT (``mime'')
j	Pass 8-bit data; don't convert 8BITMIME\(->7BIT (``just send 8'')
p	Pass 8-bit data; do convert 8BITMIME\(->7BIT (``pass'')
a	Adaptive algorithm: see below
.)b
The adaptive algorithm is to accept 8-bit data,
converting it to 8BITMIME only if the receiver understands that,
otherwise just passing it as undeclared 8-bit data;
8BITMIME\(->7BIT conversions are done.
E 155
I 155
.ip UseErrorsTo
[l]
If there is an
.q Errors-To:
header, send error messages to the addresses listed there.
They normally go to the envelope sender.
Use of this option causes
.i sendmail
to violate RFC 1123.
I 157
This option is disrecommended and deprecated.
E 157
.ip UserDatabaseSpec=\fIudbspec\fP
[U]
The user database specification.
.ip Verbose
[v]
Run in verbose mode.
If this is set,
.i sendmail
adjusts options
D 157
.b c
(don't connect to expensive mailers)
E 157
I 157
.b HoldExpensive
(old
.b c )
E 157
and
D 157
.b d
(delivery mode)
E 157
I 157
.b DeliveryMode
(old
.b d )
E 157
so that all mail is delivered completely
in a single job
so that you can see the entire delivery process.
Option
D 157
.b v
E 157
I 157
.b Verbose
E 157
should
.i never
be set in the configuration file;
it is intended for command line use only.
E 155
E 152
.lp
All options can be specified on the command line using the
D 155
\-o flag,
E 155
I 155
\-O or \-o flag,
E 155
but most will cause
.i sendmail
to relinquish its setuid permissions.
The options that will not cause this are
D 147
b, d, e, E, i, L, m, o, p, r, s, v, C, and 7.
E 147
I 147
D 155
b, d, e, i, L, m, o, p, r, s, v, C, and 7.
E 155
I 155
MinFreeBlocks [b],
DeliveryMode [d],
ErrorMode [e],
IgnoreDots [i],
LogLevel [L],
MeToo [m],
OldStyleHeaders [o],
PrivacyOptions [p],
Timeouts [r],
SuperSafe [s],
Verbose [v],
CheckpointInterval [C],
and
SevenBitInput [7].
E 155
E 147
Also, M (define macro) when defining the r or s macros
is also considered
.q safe .
D 157
.sh 3 "P \*- precedence definitions"
E 157
I 157
.sh 2 "P \*- Precedence Definitions"
E 157
.pp
Values for the
.q "Precedence:"
field may be defined using the
.b P
control line.
The syntax of this field is:
.(b
\fBP\fP\fIname\fP\fB=\fP\fInum\fP
.)b
When the
.i name
is found in a
D 139
.q Precedence:
field,
the message class is set to
.i num .
Higher numbers mean higher precedence.
Numbers less than zero
have the special property
that if an error occurs during processing
the body of the message will not be returned;
this is expected to be used for
.q "bulk"
mail such as through mailing lists.
The default precedence is zero.
For example,
our list of precedences is:
.(b
Pfirst-class=0
Pspecial-delivery=100
Plist=\-30
Pbulk=\-60
Pjunk=\-100
.)b
E 139
I 139
.q Precedence:
field,
the message class is set to
.i num .
Higher numbers mean higher precedence.
Numbers less than zero
have the special property
that if an error occurs during processing
the body of the message will not be returned;
this is expected to be used for
.q "bulk"
mail such as through mailing lists.
The default precedence is zero.
For example,
our list of precedences is:
.(b
Pfirst-class=0
Pspecial-delivery=100
Plist=\-30
Pbulk=\-60
Pjunk=\-100
.)b
E 139
People writing mailing list exploders
are encouraged to use
.q "Precedence: list" .
Older versions of
E 121
D 121
Defaults to 1800.
.ip Z\fIfact\fP
The
.i fact or
E 88
D 87
is added to the priority
every time a job is processed.
Thus,
each time a job is processed,
its priority will be decreased by the indicated value.
In most environments this should be positive,
since hosts that are down are all too often down for a long time.
I 56
Defaults to 90000.
E 56
.ip 8
Preserve eight bits of data in the body on input.
Normally the input is stripped to seven bits as per RFC822.
See also the
.b L
mailer flag.
D 53
.sh 2 "Mailer Flags"
The following flags may be set in the mailer description.
.nr ii 4n
.ip A
This is an Arpanet-compatible mailer,
and all appropriate modes should be set.
.ip C
If mail is
.i received
from a mailer with this flag set,
any addresses in the header that do not have an at sign
(\c
.q @ )
after being rewritten by ruleset three
will have the
.q @domain
clause from the sender
tacked on.
This allows mail with headers of the form:
E 53
I 53
.lp
All options can be specified on the command line using the
\-o flag,
but most will cause
.i sendmail
to relinquish its setuid permissions.
The options that will not cause this are
D 69
d, e, E, i, L, m, o, r, s, v, C, and 8.
E 69
I 69
b, d, e, E, i, L, m, o, p, r, s, v, C, and 8.
E 69
Also, M (define macro) when defining the r or s macros
E 87
I 87
is added to the priority
every time a job is processed.
Thus,
each time a job is processed,
its priority will be decreased by the indicated value.
In most environments this should be positive,
since hosts that are down are all too often down for a long time.
Defaults to 90000.
D 101
.ip 8
Preserve eight bits of data in the body on input.
Normally the input is stripped to seven bits as per RFC822.
See also the
.b L
mailer flag.
E 101
I 101
.ip 7
Strip input to seven bits for compatibility with old systems.
This shouldn't be necessary.
E 101
.lp
All options can be specified on the command line using the
\-o flag,
but most will cause
E 121
.i sendmail
D 121
to relinquish its setuid permissions.
The options that will not cause this are
D 101
b, d, e, E, i, L, m, o, p, r, s, v, C, and 8.
E 101
I 101
b, d, e, E, i, L, m, o, p, r, s, v, C, and 7.
E 101
Also, M (define macro) when defining the r or s macros
E 87
D 86
is also considered
.q safe .
D 70
.sh 3 "T \*- define trusted users"
.pp
Trusted users
are those users who are permitted
to override the sender address
using the
.b \-f
flag.
These typically are
.q root,
.q uucp,
and
.q network,
but on some users it may be convenient
to extend this list to include other users,
perhaps to support
a separate
UUCP
login for each host.
The syntax of this line is:
.(b F
.b T \c
.i user1
.i user2 ...
.)b
There may be more than one of these lines.
E 70
.sh 3 "P \*- precedence definitions"
.pp
Values for the
.q "Precedence:"
field may be defined using the
.b P
control line.
The syntax of this field is:
E 53
.(b
D 53
From: usera@hosta
To: userb@hostb, userc
E 53
I 53
\fBP\fP\fIname\fP\fB=\fP\fInum\fP
E 53
.)b
D 53
to be rewritten as:
E 53
I 53
When the
.i name
is found in a
.q Precedence:
field,
the message class is set to
.i num .
Higher numbers mean higher precedence.
Numbers less than zero
E 86
I 86
is also considered
.q safe .
.sh 3 "P \*- precedence definitions"
.pp
Values for the
.q "Precedence:"
field may be defined using the
.b P
control line.
The syntax of this field is:
.(b
\fBP\fP\fIname\fP\fB=\fP\fInum\fP
.)b
When the
.i name
is found in a
.q Precedence:
field,
the message class is set to
.i num .
Higher numbers mean higher precedence.
Numbers less than zero
E 86
D 85
have the special property
D 56
that error messages will not be returned.
E 56
I 56
that if an error occurs during processing
the body of the message will not be returned;
this is expected to be used for
.q "bulk"
I 83
mail such as through mailing lists.
E 85
I 85
have the special property
that if an error occurs during processing
the body of the message will not be returned;
this is expected to be used for
.q "bulk"
mail such as through mailing lists.
E 85
E 83
D 83
mail such as through mailing lists.
E 83
E 56
The default precedence is zero.
For example,
our list of precedences is:
E 53
.(b
D 53
From: usera@hosta
To: userb@hostb, userc@hosta
E 53
I 53
Pfirst-class=0
Pspecial-delivery=100
I 69
Plist=\-30
E 69
I 56
Pbulk=\-60
E 56
Pjunk=\-100
E 53
.)b
I 69
People writing mailing list exploders
I 77
are encouraged to use
.q "Precedence: list" .
Older versions of
.i sendmail
E 121
(which discarded all error returns for negative precedences)
didn't recognize this name, giving it a default precedence of zero.
This allows list maintainers to see error returns
E 77
D 76
are encouraged to use
.q "Precedence: list" .
Older versions of
.i sendmail
(which discarded all error returns for negative precedences)
didn't recognize this name, giving it a default precedence of zero.
This allows list maintainers to see error returns
on both old and new versions of
.i sendmail .
E 69
D 53
automatically.
.ip D
This mailer wants a
.q Date:
header line.
.ip e
This mailer is expensive to connect to,
so try to avoid connecting normally;
any necessary connection will occur during a queue run.
.ip E
Escape lines beginning with
.q From
in the message with a `>' sign.
.ip f
The mailer wants a
.b \-f
.i from
flag,
but only if this is a network forward operation
(i.e.,
the mailer will give an error
if the executing user
does not have special permissions).
.ip F
This mailer wants a
.q From:
header line.
.ip h
Upper case should be preserved in host names
for this mailer.
.ip I
This mailer will be speaking SMTP
to another
.i sendmail
\*-
as such it can use special protocol features.
This option is not required
(i.e.,
if this option is omitted the transmission will still operate successfully,
although perhaps not as efficiently as possible).
.ip l
This mailer is local
(i.e.,
final delivery will be performed).
.ip L
Limit the line lengths as specified in RFC821.
This deprecated option should be replaced by the
.b L=
mail declaration.
For historic reasons, the
.b L
flag also sets the
.b 7
flag.
.ip m
This mailer can send to multiple users
on the same host
in one transaction.
When a
.b $u
macro occurs in the
.i argv
part of the mailer definition,
that field will be repeated as necessary
for all qualifying users.
.ip M
This mailer wants a
.q Message-Id:
header line.
.ip n
Do not insert a UNIX-style
.q From
line on the front of the message.
.ip p
Use the return-path in the SMTP
.q "MAIL FROM:"
command
rather than just the return address;
although this is required in RFC821,
many hosts do not process return paths properly.
.ip P
This mailer wants a
.q Return-Path:
line.
.ip r
Same as
.b f ,
but sends a
.b \-r
flag.
.ip s
Strip quote characters off of the address
before calling the mailer.
.ip S
Don't reset the userid
before calling the mailer.
This would be used in a secure environment
where
.i sendmail
ran as root.
This could be used to avoid forged addresses.
This flag is suppressed if given from an
.q unsafe
environment
(e.g, a user's mail.cf file).
.ip u
Upper case should be preserved in user names
for this mailer.
.ip U
This mailer wants Unix-style
.q From
lines with the ugly UUCP-style
.q "remote from <host>"
on the end.
.ip x
This mailer wants a
.q Full-Name:
header line.
.ip X
This mailer want to use the hidden dot algorithm
as specified in RFC821;
basically,
any line beginning with a dot
will have an extra dot prepended
(to be stripped at the other end).
This insures that lines in the message containing a dot
will not terminate the message prematurely.
.ip 7
Strip all output to seven bits.
This is the default if the
.b L
flag is set.
Note that setting this is not
sufficient to get full eight bit data passed through
.i sendmail ;
E 53
I 53
.sh 3 "V \*- configuration version level"
E 76
I 76
D 77
are encouraged to use
.q "Precedence: list" .
Older versions of
.i sendmail
(which discarded all error returns for negative precedences)
didn't recognize this name, giving it a default precedence of zero.
This allows list maintainers to see error returns
E 77
on both old and new versions of
.i sendmail .
D 157
.sh 3 "V \*- configuration version level"
E 157
I 157
.sh 2 "V \*- Configuration Version Level"
E 157
E 76
.pp
To provide compatibility with old configuration files,
E 53
the
D 53
.b 8
option must also be set.
E 53
I 53
.b V
line has been added to define some very basic semantics
of the configuration file.
These are not intended to be long term supports;
rather, they describe compatibility features
which will probably be removed in future releases.
.pp
I 119
.b N.B.:
these version
.i levels
have nothing
to do with the version
.i number
on the files.
For example,
as of this writing
version 8 config files
D 157
(specifically, 8.6)
used version level 5 configurations.
E 157
I 157
(specifically, 8.7)
used version level 6 configurations.
E 157
.pp
E 119
.q Old
D 68
configuration files are defined as level one.
Level two files make the following changes:
E 68
I 68
configuration files are defined as version level one.
Version level two files make the following changes:
E 68
.np
Host name canonification ($[ ... $])
appends a dot if the name is recognized;
this gives the config file a way of finding out if anything matched.
(Actually, this just initializes the
.q host
map with the
.q \-a.
flag \*- you can reset it to anything you prefer
by declaring the map explicitly.)
.np
D 74
Default host name extension is consistent throughout processing;
D 68
level one configurations turned off domain extension
E 68
I 68
version level one configurations turned off domain extension
E 68
(that is, adding the local domain name)
during certain points in processing.
D 68
Level two configurations are expected to include a trailing dot
E 68
I 68
Version level two configurations are expected to include a trailing dot
E 68
to indicate that the name is already canonical.
.np
Local names that are not aliases
are passed through a new distinguished ruleset five;
this can be used to append a local relay.
This behaviour can be prevented by resolving the local name
with an initial `@'.
That is, something that resolves to a local mailer and a user name of
.q vikki
will be passed through ruleset five,
but a user name of
.q @vikki
will have the `@' stripped,
will not be passed through ruleset five,
but will otherwise be treated the same as the prior example.
The expectation is that this might be used to implement a policy
where mail sent to
.q vikki
was handled by a central hub,
but mail sent to
.q vikki@localhost
was delivered directly.
.pp
D 68
Level three files
E 68
I 68
Version level three files
E 68
allow # initiated comments on all lines.
Exceptions are backslash escaped # marks
and the $# syntax.
I 68
.pp
Version level four configuration files
send error messages with a return path of
E 74
I 74
Default host name extension is consistent throughout processing;
version level one configurations turned off domain extension
(that is, adding the local domain name)
during certain points in processing.
Version level two configurations are expected to include a trailing dot
to indicate that the name is already canonical.
.np
Local names that are not aliases
are passed through a new distinguished ruleset five;
this can be used to append a local relay.
This behaviour can be prevented by resolving the local name
with an initial `@'.
That is, something that resolves to a local mailer and a user name of
.q vikki
will be passed through ruleset five,
but a user name of
.q @vikki
will have the `@' stripped,
will not be passed through ruleset five,
but will otherwise be treated the same as the prior example.
The expectation is that this might be used to implement a policy
where mail sent to
.q vikki
was handled by a central hub,
but mail sent to
.q vikki@localhost
was delivered directly.
.pp
Version level three files
allow # initiated comments on all lines.
Exceptions are backslash escaped # marks
and the $# syntax.
I 119
.pp
Version level four configurations
are completely equivalent to level three
for historical reasons.
.pp
Version level five configuration files
change the default definition of
.b $w
to be just the first component of the hostname.
I 139
.pp
I 151
Version level six configuration files
change many of the local processing options
(such as aliasing and matching the beginning of the address for
`|' characters)
to be mailer flags;
this allows fine-grained control over the special local processing.
I 154
Level six configuration files may also use long option names.
I 162
The
.b ColonOkInAddr
option (to allow colons in the local-part of addresses)
defaults
.b on
for lower numbered configuration files;
the configuration file requires some additional intelligence
to properly handle the RFC 822 group construct.
E 162
E 154
.pp
E 151
The
.b V
line may have an optional
.b / \c
.i vendor
to indicate that this configuration file uses modifications
specific to a particular vendor\**.
.(f
\**And of course, vendors are encouraged to add themselves
to the list of recognized vendors by editing the routine
.i setvendor
in
.i conf.c .
I 157
Please send e-mail to sendmail@CS.Berkeley.EDU
to register your vendor dialect.
E 157
.)f
E 139
E 119
D 95
.pp
Version level four configuration files
send error messages with a return path of
E 74
.q <>
as permitted by RFC 821 section 3.6
and required by RFC 1123 section 5.3.3.
This is not the default
because this breaks older configuration files.
Note that the macro
.b $n
is still used to specify the envelope From: header value.
E 95
E 68
D 157
.sh 3 "K \*- key file declaration"
E 157
I 157
You may use
.q /Berkeley
to emphasize that this configuration file
uses the Berkeley dialect of
.i sendmail .
.sh 2 "K \*- Key File Declaration"
E 157
.pp
Special maps can be defined using the line:
.(b
Kmapname mapclass arguments
.)b
The
.i mapname
is the handle by which this map is referenced in the rewriting rules.
The
.i mapclass
is the name of a type of map;
D 117
these are compiled in to sendmail.
E 117
I 117
these are compiled in to
.i sendmail .
E 117
The
.i arguments
are interpreted depending on the class;
typically,
there would be a single argument naming the file containing the map.
.pp
I 70
Maps are referenced using the syntax:
.(b
$( \fImap\fP \fIkey\fP $@ \fIarguments\fP $: \fIdefault\fP $)
.)b
where either or both of the
.i arguments
or
.i default
portion may be omitted.
The
D 157
.i arguments
E 157
I 157
.i "$@ arguments"
E 157
may appear more than once.
The indicated
.i key
and
E 70
D 70
Maps are referenced using the syntax:
.(b
$( \fImap\fP \fIkey\fP $@ \fIarguments\fP $: \fIdefault\fP $)
.)b
where either or both of the
E 70
.i arguments
D 70
or
.i default
portion may be omitted.
The
.i arguments
may appear more than once.
The indicated
.i key
and
.i arguments
E 70
are passed to the appropriate mapping function.
If it returns a value, it replaces the input.
If it does not return a value and the
.i default
is specified, the
.i default
replaces the input.
Otherwise, the input is unchanged.
.pp
During replacement of either a map value or default
the string
.q %\fIn\fP
(where
.i n
is a digit)
is replaced by the corresponding
.i argument .
Argument zero
D 58
is always the original pattern.
E 58
I 58
D 68
is always the database key.
E 58
For example, the rule
.(b
.ta 1.5i
R$- ! $+	$: $(uucp $1 $@ $2 $: %1 @ %0 . UUCP $)
.)b
Looks up the UUCP name in a (user defined) UUCP map;
if not found it turns it into
.q \&.UUCP
form.
The database might contain records like:
.(b
decvax	%1@%0.DEC.COM
research	%1@%0.ATT.COM
.)b
.pp
The built in map with both name and class
.q host
is the host name canonicalization lookup.
Thus,
the syntax:
.(b
$(host \fIhostname\fP$)
.)b
is equivalent to:
.(b
$[\fIhostname\fP$]
.)b
.pp
There are four predefined database lookup classes:
.q dbm ,
.q btree ,
.q hash ,
and
.q nis .
The first requires that sendmail be compiled with the
.b ndbm
library;
the second two require the
.b db
library,
and the third requires that sendmail be compiled with NIS support.
All four accept as arguments the some optional flags
and a filename (or a mapname for NIS).
Known flags are:
.ip "\-o"
Indicates that this map is optional \*- that is,
if it cannot be opened,
no error is produced,
and sendmail will behave as if the map existed but was empty.
.ip "\-N"
Normally sendmail does not include the trailing null byte
on a string as part of the key.
If this flag is indicated,
it will be included.
This is for compatibility with some methods of building the maps.
.ip "\-a\fIx\fP"
Append the character
.i x
on successful matches.
For example, the default
.i host
map appends a dot on successful matches.
.ip "\-d\fIdomain\fP"
Use the indicated
.i domain
instead of the default domain.
Used only for NIS maps.
.ip "\-f"
Fold upper to lower case before looking up the key.
.ip "\-m"
Match only (without replacing the value).
If you only care about the existence of a key and not the value
(as you might when searching the NIS map
.q hosts.byname
for example),
this flag prevents the map from substituting the value.
However,
The \-a argument is still appended on a match,
and the default is still taken if the match fails.
.pp
The
.i dbm
map appends the strings
.q \&.pag
and
.q \&.dir
to the given filename;
the two
.i db -based
maps do not.
E 68
I 68
is always the database key.
For example, the rule
.(b
.ta 1.5i
D 157
R$- ! $+	$: $(uucp $1 $@ $2 $: %1 @ %0 . UUCP $)
E 157
I 157
R$\- ! $+	$: $(uucp $1 $@ $2 $: %1 @ %0 . UUCP $)
E 157
.)b
Looks up the UUCP name in a (user defined) UUCP map;
if not found it turns it into
.q \&.UUCP
form.
The database might contain records like:
.(b
decvax	%1@%0.DEC.COM
research	%1@%0.ATT.COM
.)b
E 68
D 67
.pp
The program
.i makemap (8)
can be used to build any of the three database-oriented maps.
It takes the following flags:
.ip \-f
Fold upper to lower case in the map.
.ip \-N
Include null bytes in keys.
.ip \-o
Append to an existing (old) file.
.ip \-r
Allow replacement of existing keys;
normally, re-inserting an existing key is an error.
.ip \-v
Print what is happening.
.pp
New classes can be added in the routine
.b setupmaps
in file
.b conf.c .
E 53
E 50
E 14
E 2
D 8
.sh 3 "Special header lines"
.pp
Several header lines have special interpretations
defined by the configuration file.
Others have interpretations built into
.i sendmail
that cannot be changed without changing the code.
These builtins are described here.
.sh 4 "return-receipt-to"
.pp
If this header is sent,
a message will be sent to any specified addresses
when the final delivery is complete.
This is determined by the
.b l
flag in the mailer descriptor.
.sh 4 "errors-to"
.pp
If errors occur anywhere during processing,
this header will cause error messages to go to
the listed addresses
rather than to the sender.
This is intended for mailing lists.
.sh 4 "%%%"
E 8
.sh 2 "Building a Configuration File From Scratch"
.pp
Building a configuration table from scratch is an extremely difficult job.
Fortunately,
it is almost never necessary to do so;
nearly every situation that may come up
may be resolved by changing an existing table.
In any case,
it is critical that you understand what it is that you are trying to do
and come up with a philosophy for the configuration table.
This section is intended to explain what the real purpose
of a configuration table is
and to give you some ideas
for what your philosophy might be.
.sh 3 "What you are trying to do"
.pp
The configuration table has three major purposes.
The first and simplest
is to set up the environment for
.i sendmail .
This involves setting the options,
defining a few critical macros,
etc.
Since these are described in other places,
we will not go into more detail here.
.pp
The second purpose is to rewrite addresses in the message.
This should typically be done in two phases.
The first phase maps addresses in any format
into a canonical form.
This should be done in ruleset three.
The second phase maps this canonical form
into the syntax appropriate for the receiving mailer.
.i Sendmail
D 2
does this in two subphases.
E 2
I 2
does this in three subphases.
E 2
Rulesets one and two
D 59
are applied to all sender and recipient addresses respectively.
After this,
you may specify per-mailer rulesets
for both sender and recipient addresses;
this allows mailer-specific customization.
I 2
Finally,
E 59
I 59
are applied to all sender and recipient addresses respectively.
After this,
you may specify per-mailer rulesets
for both sender and recipient addresses;
this allows mailer-specific customization.
Finally,
E 59
ruleset four is applied to do any default conversion
D 56
to external form.
E 2
.pp
The third purpose
is to map addresses into the actual set of instructions
necessary to get the message delivered.
Ruleset zero must resolve to the internal form,
which is in turn used as a pointer to a mailer descriptor.
The mailer descriptor describes the interface requirements
of the mailer.
.sh 3 "Philosophy"
.pp
The particular philosophy you choose will depend heavily
on the size and structure of your organization.
I will present a few possible philosophies here.
.pp
One general point applies to all of these philosophies:
it is almost always a mistake
to try to do full name resolution.
For example,
E 56
I 56
to external form.
.pp
The third purpose
is to map addresses into the actual set of instructions
necessary to get the message delivered.
Ruleset zero must resolve to the internal form,
which is in turn used as a pointer to a mailer descriptor.
The mailer descriptor describes the interface requirements
of the mailer.
.sh 3 "Philosophy"
E 67
.pp
I 68
The built in map with both name and class
.q host
is the host name canonicalization lookup.
Thus,
the syntax:
.(b
$(host \fIhostname\fP$)
.)b
is equivalent to:
.(b
$[\fIhostname\fP$]
.)b
.pp
D 155
There are four predefined database lookup classes:
.q dbm ,
.q btree ,
.q hash ,
E 155
I 155
D 157
There are several defined classes.
E 157
I 157
There are many defined classes.
E 157
.ip dbm
Database lookups using the ndbm(3) library.
.i Sendmail
must be compiled with
.b DBM
defined.
.ip btree
Database lookups using the btree interface to the Berkeley db(3) library.
.i Sendmail
must be compiled with
.b NEWDB
defined.
.ip hash
Database lookups using the hash interface to the Berkeley db(3) library.
.i Sendmail
must be compiled with
.b NEWDB
defined.
.ip nis
NIS lookups.
.i Sendmail
must be compiled with
.b NIS
defined.
.ip nisplus
NIS+ lookups.
.i Sendmail
must be compiled with
D 157
.b NIS
E 157
I 157
.b NISPLUS
E 157
defined.
I 157
The argument is the name of the table to use for lookups,
and the
.b \-k
and
.b \-v
flags may be used to set the key and value columns respectively.
E 157
.ip hesiod
Hesiod lookups.
.i Sendmail
must be compiled with
D 157
.b NIS
E 157
I 157
.b HESIOD
E 157
defined.
.ip netinfo
NeXT NetInfo lookups.
.i Sendmail
must be compiled with
.b NETINFO
defined.
.ip text
Text file lookups.
The format of the text file is defined by the
.b \-k
(key field number),
.b \-v
(value field number),
E 155
D 140
and
.q nis .
D 117
The first requires that sendmail be compiled with the
E 117
I 117
The first requires that
.i sendmail
be compiled with the
E 117
.b ndbm
library;
the second two require the
.b db
library,
D 117
and the third requires that sendmail be compiled with NIS support.
E 117
I 117
and the third requires that
.i sendmail
be compiled with NIS support.
E 117
D 139
All four accept as arguments the some optional flags
E 139
I 139
All four accept as arguments the same optional flags
E 139
D 127
and a filename (or a mapname for NIS).
E 127
I 127
and a filename
(or a mapname for NIS;
the filename is the root of the database path,
E 140
I 140
and
D 155
.q nis .
The first requires that
.i sendmail
be compiled with the
.b ndbm
library;
the second two require the
.b db
library,
and the third requires that
.i sendmail
be compiled with NIS support.
All four accept as arguments the same optional flags
E 155
I 155
.b \-z
(field delimiter)
flags.
.ip stab
Internal symbol table lookups.
Used internally for aliasing.
.ip implicit
Really should be called
.q alias
\(em this is used to get the default lookups
for alias files,
and is the default if no class is specified for alias files.
.ip user
Looks up users using
.i getpwnam (3).
The
.b \-v
D 157
flag can be used to specify the name of the field to use
E 157
I 157
flag can be used to specify the name of the field to return
E 157
D 158
(although this is normally used only to check the existance
E 158
I 158
(although this is normally used only to check the existence
E 158
of a user).
.ip host
Canonifies host domain names.
Given a host name it calls the name server
to find the canonical name for that host.
.ip sequence
The arguments on the `K' line are a list of maps;
the resulting map searches the argument maps in order
until it finds a match for the indicated key.
For example, if the key definition is:
.(b
Kmap1 ...
Kmap2 ...
Kseqmap sequence map1 map2
.)b
then a lookup against
.q seqmap
first does a lookup in map1.
If that is found, it returns immediately.
Otherwise, the same key is used for map2.
.ip switch
Much like the
.q sequence
map except that the order of maps is determined by the service switch.
The argument is the name of the service to be looked up;
the values from the service switch are appended to the service name
to create new map names.
For example, consider the key definition:
.(b
Kali switch aliases
.)b
together with the service switch entry:
.(b
aliases	nis files
.)b
This causes a query against the map
.q ali
to search maps named
.q aliases.nis
and
.q aliases.files
in that order.
.ip dequote
Strip double quotes (") from a name.
It does not strip backslashes,
and will not strip quotes if the resulting string
would contain unscannable syntax
(that is, basic errors like unbalanced angle brackets;
more sophisticated errors such as unknown hosts are not checked).
The intent is for use when trying to accept mail from systems such as
DECnet
that routinely quote odd syntax such as
.(b
"49ers::ubell"
.)b
A typical usage is probably something like:
.(b
Kdequote dequote

\&...

R$\-	$: $(dequote $1 $)
R$\- $+	$: $>3 $1 $2
.)b
Care must be taken to prevent unexpected results;
for example,
.(b
"|someprogram < input > output"
.)b
will have quotes stripped,
but the result is probably not what you had in mind.
Fortunately these cases are rare.
.pp
Most of these accept as arguments the same optional flags
E 155
and a filename
(or a mapname for NIS;
the filename is the root of the database path,
E 140
so that
.q .db
or some other extension appropriate for the database type
will be added to get the actual database name).
E 127
Known flags are:
.ip "\-o"
Indicates that this map is optional \*- that is,
if it cannot be opened,
no error is produced,
D 117
and sendmail will behave as if the map existed but was empty.
E 117
I 117
and
.i sendmail
will behave as if the map existed but was empty.
E 117
D 157
.ip "\-N"
D 113
Normally sendmail does not include the trailing null byte
on a string as part of the key.
If this flag is indicated,
it will be included.
This is for compatibility with some methods of building the maps.
E 113
I 113
Normally when maps are written,
the trailing null byte is not included as part of the key.
If this flag is indicated it will be included.
During lookups, only the null-byte-included form will be searched.
See also
.b \-O.
.ip "\-O"
E 157
I 157
.ip "\-N, \-O"
E 157
If neither
.b \-N
or
.b \-O
are specified,
.i sendmail
uses an adaptive algorithm to decide whether or not to look for null bytes
on the end of keys.
It starts by trying both;
if it finds any key with a null byte it never tries again without a null byte
and vice versa.
D 157
If this flag is specified,
it never tries with a null byte;
this can speed matches but is never necessary.
E 157
I 157
If
.b \-N
is specified it never tries without a null byte and
if
.b \-O
is specified it never tries with a null byte.
Setting one of
these can speed matches but are never necessary.
E 157
If both
.b \-N
and
.b \-O
are specified,
.i sendmail
will never try any matches at all \(em
that is, everything will appear to fail.
E 113
.ip "\-a\fIx\fP"
D 118
Append the character
E 118
I 118
Append the string
E 118
.i x
on successful matches.
For example, the default
.i host
map appends a dot on successful matches.
D 100
.ip "\-d\fIdomain\fP"
Use the indicated
.i domain
instead of the default domain.
Used only for NIS maps.
E 100
.ip "\-f"
D 133
Fold upper to lower case before looking up the key.
E 133
I 133
Do not fold upper to lower case before looking up the key.
E 133
.ip "\-m"
Match only (without replacing the value).
If you only care about the existence of a key and not the value
(as you might when searching the NIS map
.q hosts.byname
for example),
this flag prevents the map from substituting the value.
However,
The \-a argument is still appended on a match,
and the default is still taken if the match fails.
I 155
.ip "\-k\fIkeycol\fP"
The key column name (for NIS+) or number
(for text lookups).
.ip "\-v\fIvalcol\fP"
The value column name (for NIS+) or number
(for text lookups).
.ip "\-z\fIdelim\fP"
The column delimiter (for text lookups).
It can be a single character or one of the special strings
D 157
.q \en
E 157
I 157
.q \|\en
E 157
or
D 157
.q \et
E 157
I 157
.q \|\et
E 157
to indicate newline or tab respectively.
If omitted entirely,
the column separator is any sequence of whitespace.
.ip "\-s\fIspacesub\fP
For the dequote map only,
the character to use to replace space characters
after a successful dequote.
E 155
.pp
The
.i dbm
map appends the strings
.q \&.pag
and
.q \&.dir
to the given filename;
the two
.i db -based
D 100
maps do not.
E 100
I 100
maps append
.q \&.db .
I 127
For example, the map specification
.(b
Kuucp dbm \-o \-N /usr/lib/uucpmap
.)b
specifies an optional map named
.q uucp
of class
.q dbm ;
it always has null bytes at the end of every string,
and the data is located in
/usr/lib/uucpmap.{dir,pag}.
E 127
E 100
.pp
E 68
I 67
The program
.i makemap (8)
can be used to build any of the three database-oriented maps.
It takes the following flags:
.ip \-f
D 91
Fold upper to lower case in the map.
E 91
I 91
D 133
Do not fold upper to lower case in the map.
E 133
I 133
D 157
Fold upper to lower case in the map.
E 157
I 157
Do not fold upper to lower case in the map.
E 157
E 133
E 91
.ip \-N
Include null bytes in keys.
.ip \-o
Append to an existing (old) file.
.ip \-r
Allow replacement of existing keys;
normally, re-inserting an existing key is an error.
.ip \-v
Print what is happening.
I 125
.lp
The
.i sendmail
daemon does not have to be restarted to read the new maps
as long as you change them in place;
file locking is used so that the maps won't be read
while they are being updated.\**
.(f
\**That is, don't create new maps and then use
.i mv (1)
to move them into place.
D 157
I consider this a shortfall (a.k.a. bug) in
.i sendmail
which should be fixed in a future release.
E 157
I 157
Since the maps are already open
the new maps will never be seen.
E 157
.)f
E 125
.pp
I 82
D 155
There are also two builtin maps that are,
strictly speaking,
not database lookups.
.pp
The
.q host
map does host domain canonification;
given a host name it calls the name server
to find the canonical name for that host.
.pp
The
.q dequote
map strips double quotes (") from a name.
It does not strip backslashes.
It will not strip quotes if the resulting string
would contain unscannable syntax
(that is, basic errors like unbalanced angle brackets;
more sophisticated errors such as unknown hosts are not checked).
The intent is for use when trying to accept mail from systems such as
DECnet
that routinely quote odd syntax such as
.(b
"49ers::ubell"
.)b
A typical usage is probably something like:
.(b
Kdequote dequote

\&...

R$\-	$: $(dequote $1 $)
R$\- $+	$: $>3 $1 $2
.)b
Care must be taken to prevent unexpected results;
for example,
.(b
"|someprogram < input > output"
.)b
will have quotes stripped,
but the result is probably not what you had in mind.
Fortunately these cases are rare.
.pp
E 155
E 82
D 144
New classes can be added in the routine
.b setupmaps
D 69
in file
.b conf.c .
.sh 2 "Building a Configuration File From Scratch"
.pp
Building a configuration table from scratch is an extremely difficult job.
Fortunately,
it is almost never necessary to do so;
nearly every situation that may come up
may be resolved by changing an existing table.
In any case,
it is critical that you understand what it is that you are trying to do
and come up with a philosophy for the configuration table.
This section is intended to explain what the real purpose
of a configuration table is
and to give you some ideas
for what your philosophy might be.
.sh 3 "What you are trying to do"
.pp
The configuration table has three major purposes.
The first and simplest
is to set up the environment for
.i sendmail .
This involves setting the options,
defining a few critical macros,
etc.
Since these are described in other places,
we will not go into more detail here.
.pp
The second purpose is to rewrite addresses in the message.
This should typically be done in two phases.
The first phase maps addresses in any format
into a canonical form.
This should be done in ruleset three.
The second phase maps this canonical form
E 69
I 69
in file
.b conf.c .
.sh 2 "Building a Configuration File From Scratch"
.pp
Building a configuration table from scratch is an extremely difficult job.
Fortunately,
it is almost never necessary to do so;
nearly every situation that may come up
E 144
I 144
New classes can be added in the routine
.b setupmaps
in file
.b conf.c .
D 157
.sh 2 "Building a Configuration File From Scratch"
.pp
Building a configuration table from scratch is an extremely difficult job.
Fortunately,
it is almost never necessary to do so;
nearly every situation that may come up
E 144
may be resolved by changing an existing table.
In any case,
it is critical that you understand what it is that you are trying to do
and come up with a philosophy for the configuration table.
This section is intended to explain what the real purpose
of a configuration table is
and to give you some ideas
for what your philosophy might be.
.pp
.b "Do not even consider"
writing your own configuration file
without carefully studying
RFC 821, 822, and 1123.
You should also read RFC 976
if you are doing UUCP exchange.
.sh 3 "What you are trying to do"
.pp
The configuration table has three major purposes.
The first and simplest
is to set up the environment for
.i sendmail .
This involves setting the options,
defining a few critical macros,
etc.
Since these are described in other places,
we will not go into more detail here.
.pp
The second purpose is to rewrite addresses in the message.
This should typically be done in two phases.
The first phase maps addresses in any format
into a canonical form.
This should be done in ruleset three.
The second phase maps this canonical form
E 69
into the syntax appropriate for the receiving mailer.
.i Sendmail
does this in three subphases.
Rulesets one and two
are applied to all sender and recipient addresses respectively.
After this,
you may specify per-mailer rulesets
for both sender and recipient addresses;
this allows mailer-specific customization.
Finally,
ruleset four is applied to do any default conversion
to external form.
.pp
The third purpose
is to map addresses into the actual set of instructions
necessary to get the message delivered.
Ruleset zero must resolve to the internal form,
which is in turn used as a pointer to a mailer descriptor.
The mailer descriptor describes the interface requirements
of the mailer.
.sh 3 "Philosophy"
.pp
E 67
The particular philosophy you choose will depend heavily
on the size and structure of your organization.
I will present a few possible philosophies here.
I 63
There are as many philosophies as there are config designers;
feel free to develop your own.
E 63
.pp
One general point applies to all of these philosophies:
it is almost always a mistake
D 72
to try to do full name resolution.
E 72
I 72
to try to do full host route resolution.
E 72
For example,
E 56
D 65
if you are trying to get names of the form
E 65
I 65
if you are on a UUCP-only site
and you are trying to get names of the form
E 65
.q user@host
D 65
to the Arpanet,
E 65
I 65
to the Internet,
E 65
it does not pay to route them to
D 64
.q xyzvax!decvax!ucbvax!c70:user@host
since you then depend on several links not under your control.
The best approach to this problem
is to simply forward to
.q xyzvax!user@host
and let xyzvax
worry about it from there.
In summary,
just get the message closer to the destination,
rather than determining the full path.
.sh 4 "Large site, many hosts \*- minimum information"
.pp
Berkeley is an example of a large site,
D 34
i.e., more than two or three hosts.
E 34
I 34
i.e., more than two or three hosts
E 64
I 64
D 65
.q xyzvax!decvax!ucbvax!c70:user@host
E 65
I 65
.q xyzvax!decvax!ucbvax!c70!user@host
E 65
D 70
since you then depend on several links not under your control.
E 70
I 70
since you then depend on several links not under your control,
some of which are likely to misparse it anyway.
E 70
The best approach to this problem
D 65
is to simply forward to
.q xyzvax!user@host
E 65
I 65
is to simply forward the message for
.q user@host
to
.q xyzvax
E 65
and let xyzvax
worry about it from there.
In summary,
just get the message closer to the destination,
rather than determining the full path.
.sh 4 "Large site, many hosts \*- minimum information"
.pp
Berkeley is an example of a large site,
i.e., more than two or three hosts
E 64
and multiple mail connections.
E 34
We have decided that the only reasonable philosophy
in our environment
D 53
is to designate one host as the guru for our site.
It must be able to resolve any piece of mail it receives.
The other sites should have the minimum amount of information
they can get away with.
In addition,
any information they do have
should be hints rather than solid information.
.pp
For example,
a typical site on our local ether network is
E 53
I 53
is to designate one host as the guru for our site.
It must be able to resolve any piece of mail it receives.
The other sites should have the minimum amount of information
they can get away with.
In addition,
any information they do have
should be hints rather than solid information.
.pp
For example,
a typical site on our local ether network is
E 53
D 58
.q monet.
E 58
I 58
.q monet
(actually
.q monet.CS.Berkeley.EDU ).
E 58
D 34
Monet has a list of known ethernet hosts;
if it receives mail for any of them,
it can do direct delivery.
E 34
I 34
When monet receives mail for delivery,
D 36
it checks whether the destination host is directly reachable;
E 36
I 36
it checks whether it knows
that the destination host is directly reachable;
E 36
if so, mail is sent to that host.
E 34
If it receives mail for any unknown host,
it just passes it directly to
D 58
.q ucbvax,
E 58
I 58
.q ucbvax.CS.Berkeley.EDU ,
E 58
our master host.
Ucbvax may determine that the host name is illegal
and reject the message,
or may be able to do delivery.
D 34
However, it is important to note that when a new ethernet host is added,
E 34
I 34
However, it is important to note that when a new mail connection is added,
E 34
the only host that
.i must
have its tables updated
is ucbvax;
the others
.i may
D 34
be updated as convenient,
E 34
I 34
be updated if convenient,
E 34
but this is not critical.
.pp
This picture is slightly muddied
due to network connections that are not actually located
on ucbvax.
For example,
D 34
our TCP connection is currently on
E 34
I 34
D 58
some UUCP connections are currently on
E 34
.q ucbarpa.
However,
E 58
I 58
some UUCP connections are currently on
.q ucbarpa.
However,
E 58
monet
.i "does not"
know about this;
the information is hidden totally between ucbvax and ucbarpa.
D 34
Mail going from monet to a TCP host
is transfered via the ethernet
E 34
I 34
Mail going from monet to a UUCP host
is transferred via the ethernet
E 34
from monet to ucbvax,
then via the ethernet from ucbvax to ucbarpa,
D 34
and then is submitted to the Arpanet.
E 34
I 34
and then is submitted to UUCP.
E 34
Although this involves some extra hops,
we feel this is an acceptable tradeoff.
.pp
An interesting point is that it would be possible
to update monet
D 34
to send TCP mail directly to ucbarpa
E 34
I 34
to send appropriate UUCP mail directly to ucbarpa
E 34
if the load got too high;
D 34
if monet failed to note a host as a TCP host
E 34
I 34
if monet failed to note a host as connected to ucbarpa
E 34
it would go via ucbvax as before,
and if monet incorrectly sent a message to ucbarpa
it would still be sent by ucbarpa
to ucbvax as before.
The only problem that can occur is loops,
D 34
as if ucbarpa thought that ucbvax had the TCP connection
E 34
I 34
D 36
as if ucbarpa thought that ucbvax had the UUCP connection
E 36
I 36
for example,
if ucbarpa thought that ucbvax had the UUCP connection
E 36
E 34
and vice versa.
For this reason,
updates should
.i always
happen to the master host first.
D 50
.pp
This philosophy results as much from the need
to have a single source for the configuration files
(typically built using
D 19
.i m4 (1)
E 19
I 19
.i m4 \|(1)
E 19
or some similar tool)
as any logical need.
Maintaining more than three separate tables by hand
is essentially an impossible job.
.sh 4 "Small site \*- complete information"
.pp
A small site
D 34
(two or three hosts)
E 34
I 34
(two or three hosts and few external connections)
E 34
may find it more reasonable to have complete information
at each host.
This would require that each host
know exactly where each network connection is,
possibly including the names of each host on that network.
As long as the site remains small
and the the configuration remains relatively static,
the update problem will probably not be too great.
.sh 4 "Single host"
.pp
This is in some sense the trivial case.
The only major issue is trying to insure that you don't
have to know too much about your environment.
For example,
if you have a UUCP connection
you might find it useful to know about the names of hosts
connected directly to you,
but this is really not necessary
since this may be determined from the syntax.
.sh 3 "Relevant issues"
.pp
The canonical form you use
should almost certainly be as specified in
the Arpanet protocols
RFC819 and RFC822.
Copies of these RFC's are included on the
.i sendmail
tape
as
.i doc/rfc819.lpr
and
.i doc/rfc822.lpr .
.pp
RFC822
describes the format of the mail message itself.
.i Sendmail
follows this RFC closely,
to the extent that many of the standards described in this document
can not be changed without changing the code.
In particular,
the following characters have special interpretations:
.(b
< > ( ) " \e
.)b
Any attempt to use these characters for other than their RFC822
purpose in addresses is probably doomed to disaster.
.pp
RFC819
describes the specifics of the domain-based addressing.
This is touched on in RFC822 as well.
Essentially each host is given a name
which is a right-to-left dot qualified pseudo-path
from a distinguished root.
The elements of the path need not be physical hosts;
the domain is logical rather than physical.
For example,
at Berkeley
D 34
one legal host is
E 34
I 34
one legal host might be
E 34
D 30
.q a.cc.berkeley.arpa ;
E 30
I 30
.q a.CC.Berkeley.EDU ;
E 30
reading from right to left,
D 30
.q arpa
E 30
I 30
.q EDU
E 30
is a top level domain
D 30
(related to, but not limited to, the physical Arpanet),
.q berkeley
is both an Arpanet host and a logical domain
which is actually interpreted by
a host called ucbvax
(which is actually just the
.q "major"
host for this domain),
.q cc
E 30
I 30
comprising educational institutions,
.q Berkeley
is a logical domain name,
.q CC
E 30
represents the Computer Center,
(in this case a strictly logical entity),
and
.q a
D 30
is a host in the Computer Center;
this particular host happens to be connected
via berknet,
but other hosts might be connected via one of two ethernets
or some other network.
E 30
I 30
is a host in the Computer Center.
E 30
.pp
Beware when reading RFC819
that there are a number of errors in it.
.sh 3 "How to proceed"
.pp
Once you have decided on a philosophy,
it is worth examining the available configuration tables
to decide if any of them are close enough
to steal major parts of.
Even under the worst of conditions,
there is a fair amount of boiler plate that can be collected safely.
.pp
The next step is to build ruleset three.
This will be the hardest part of the job.
Beware of doing too much to the address in this ruleset,
since anything you do will reflect through
to the message.
In particular,
stripping of local domains is best deferred,
since this can leave you with addresses with no domain spec at all.
Since
.i sendmail
likes to append the sending domain to addresses with no domain,
this can change the semantics of addresses.
Also try to avoid
fully qualifying domains in this ruleset.
Although technically legal,
this can lead to unpleasantly and unnecessarily long addresses
reflected into messages.
The Berkeley configuration files
D 2
define ruleset four
E 2
I 2
define ruleset nine
E 2
to qualify domain names and strip local domains.
This is called from ruleset zero
to get all addresses into a cleaner form.
.pp
Once you have ruleset three finished,
the other rulesets should be relatively trivial.
If you need hints,
examine the supplied configuration tables.
D 2
.sh 3 "Testing the configuration \*- the \-bt flag"
E 2
I 2
.sh 3 "Testing the rewriting rules \*- the \-bt flag"
E 2
.pp
When you build a configuration table,
you can do a certain amount of testing
using the
.q "test mode"
of
.i sendmail .
For example,
you could invoke
.i sendmail
as:
.(b
sendmail \-bt \-Ctest.cf
.)b
which would read the configuration file
.q test.cf
and enter test mode.
In this mode,
you enter lines of the form:
.(b
rwset address
.)b
where
.i rwset
is the rewriting set you want to use
and
.i address
is an address to apply the set to.
Test mode shows you the steps it takes
as it proceeds,
finally showing you the address it ends up with.
I 2
You may use a comma separated list of rwsets
for sequential application of rules to an input;
ruleset three is always applied first.
For example:
.(b
1,21,4 monet:bollard
.)b
first applies ruleset three to the input
.q monet:bollard.
Ruleset one is then applied to the output of ruleset three,
followed similarly by rulesets twenty-one and four.
E 2
.pp
If you need more detail,
you can also use the
.q \-d21
flag to turn on more debugging.
For example,
.(b
sendmail \-bt \-d21.99
.)b
turns on an incredible amount of information;
a single word address
is probably going to print out several pages worth of information.
I 2
.sh 3 "Building mailer descriptions"
.pp
To add an outgoing mailer to your mail system,
you will have to define the characteristics of the mailer.
.pp
D 16
First,
each mailer must have an internal name.
This can be arbitrary.
E 16
I 16
Each mailer must have an internal name.
This can be arbitrary,
except that the names
.q local
and
.q prog
must be defined.
E 16
.pp
D 16
Second, the pathname of the mailer must be given.
E 16
I 16
The pathname of the mailer must be given in the P field.
E 16
If this mailer should be accessed via an IPC connection,
use the string
.q [IPC]
instead.
.pp
D 16
The third field defines the mailer flags.
E 16
I 16
The F field defines the mailer flags.
E 16
You should specify an
.q f
or
.q r
flag to pass the name of the sender as a
.b \-f
or
.b \-r
flag respectively.
These flags are only passed if they were passed to
.i sendmail,
so that mailers that give errors under some circumstances
can be placated.
I 6
If the mailer is not picky
you can just specify
.q "\-f $g"
in the argv template.
E 6
If the mailer must be called as
.b root
the
.q S
flag should be given;
this will not reset the userid
before calling the mailer\**.
.(f
\**\c
.i Sendmail
must be running setuid to root
for this to work.
.)f
If this mailer is local
(i.e., will perform final delivery
rather than another network hop)
the
.q l
flag should be given.
Quote characters
(backslashes and " marks)
can be stripped from addresses if the
.q s
flag is specified;
if this is not given
they are passed through.
If the mailer is capable of sending to more than one user
on the same host
in a single transaction
the
.q m
flag should be stated.
If this flag is on,
then the argv template containing
.b $u
will be repeated for each unique user
on a given host.
The
.q e
flag will mark the mailer as being
.q expensive,
which will cause
.i sendmail
to defer connection
D 19
until a queue run\**
E 19
I 19
until a queue run\**.
E 19
.(f
\**The
.q c
configuration option must be given
for this to be effective.
.)f
.pp
An unusual case is the
.q C
flag.
This flag applies to the mailer that the message is received from,
rather than the mailer being sent to;
if set,
the domain spec of the sender
(i.e., the
.q @host.domain
part)
is saved
and is appended to any addresses in the message
that do not already contain a domain spec.
For example,
a message of the form:
.(b
From: eric@ucbarpa
To: wnj@monet, mckusick
.)b
will be modified to:
.(b
From: eric@ucbarpa
To: wnj@monet, mckusick@ucbarpa
.)b
.i "if and only if"
the
.q C
flag is defined in the mailer corresponding to
.q eric@ucbarpa.
.pp
Other flags are described
in Appendix C.
.pp
D 16
The next two fields in the mailer description
E 16
I 16
The S and R fields in the mailer description
E 16
are per-mailer rewriting sets
to be applied to sender and recipient addresses
respectively.
These are applied after the sending domain is appended
and the general rewriting sets
(numbers one and two)
are applied,
but before the output rewrite
(ruleset four)
is applied.
A typical use is to append the current domain
to addresses that do not already have a domain.
For example,
a header of the form:
.(b
From: eric
.)b
might be changed to be:
.(b
From: eric@ucbarpa
.)b
or
.(b
From: ucbvax!eric
.)b
depending on the domain it is being shipped into.
These sets can also be used
to do special purpose output rewriting
in cooperation with ruleset four.
.pp
I 16
The E field defines the string to use
as an end-of-line indication.
A string containing only newline is the default.
The usual backslash escapes
(\er, \en, \ef, \eb)
may be used.
.pp
E 16
Finally,
D 16
an argv template is given as the final argument.
E 16
I 16
an argv template is given as the E field.
E 16
It may have embedded spaces.
If there is no argv with a
.b $u
macro in it,
.i sendmail
will speak SMTP
to the mailer.
If the pathname for this mailer is
.q [IPC],
the argv should be
.(b
D 8
IPC $h \fIport\fP
E 8
I 8
IPC $h [ \fIport\fP ]
E 8
.)b
where
.i port
is the optional port number
to connect to.
.pp
For example,
the specifications:
.(b
D 20
.ta \w'Mlocal 'u +\w'/bin/mail 'u +\w'rlsAmn 'u +\w'10 'u +\w'20 'u
D 5
Mlocal	/bin/mail	rlsm	10	20	mail -d $u
E 5
I 5
Mlocal	/bin/mail	rlsm	10	20	mail \-d $u
E 5
Mether	[IPC]	meC	11	21	IPC $h
E 20
I 20
.ta \w'Mlocal, 'u +\w'P=/bin/mail, 'u +\w'F=rlsm, 'u +\w'S=10, 'u +\w'R=20, 'u
Mlocal,	P=/bin/mail,	F=rlsm	S=10,	R=20,	A=mail \-d $u
Mether,	P=[IPC],	F=meC,	S=11,	R=21,	A=IPC $h, M=100000
E 20
.)b
D 6
specifies two mailers.
E 6
I 6
specifies a mailer to do local delivery
and a mailer for ethernet delivery.
E 6
The first is called
.q local,
is located in the file
.q /bin/mail,
takes a picky
.b \-r
flag,
does local delivery,
quotes should be stripped from addresses,
and multiple users can be delivered at once;
ruleset ten
should be applied to sender addresses in the message
and ruleset twenty
should be applied to recipient addresses;
the argv to send to a message will be the word
.q mail,
the word
.q \-d,
D 6
and words containing the name of the receiving user;
if a
E 6
I 6
and words containing the name of the receiving user.
If a
E 6
.b \-r
flag is inserted
it will be between the words
.q mail
and
.q \-d.
The second mailer is called
.q ether,
it should be connected to via an IPC connection,
it can handle multiple users at once,
connections should be deferred,
D 6
and any domain from the sender
E 6
I 6
and any domain from the sender address
E 6
should be appended to any receiver name
without a domain;
sender addresses should be processed by ruleset eleven
and recipient addresses by ruleset twenty-one.
I 20
There is a 100,000 byte limit on messages passed through this mailer.
I 46
.sh 2 "The User Database"
.pp
If you have a version of sendmail with the user database package
compiled in,
the handling of sender and recipient addresses
is modified.
I 47
.pp
The location of this database is controlled with the
.b U
option.
E 50
I 50
.pp
This philosophy results as much from the need
to have a single source for the configuration files
(typically built using
.i m4 \|(1)
or some similar tool)
as any logical need.
Maintaining more than three separate tables by hand
is essentially an impossible job.
.sh 4 "Small site \*- complete information"
.pp
A small site
(two or three hosts and few external connections)
may find it more reasonable to have complete information
at each host.
This would require that each host
know exactly where each network connection is,
possibly including the names of each host on that network.
As long as the site remains small
D 139
and the the configuration remains relatively static,
E 139
I 139
and the configuration remains relatively static,
E 139
the update problem will probably not be too great.
.sh 4 "Single host"
.pp
D 148
This is in some sense the trivial case.
The only major issue is trying to insure that you don't
have to know too much about your environment.
For example,
E 148
I 148
This is in some sense the trivial case.
The only major issue is trying to insure that you don't
have to know too much about your environment.
For example,
E 148
if you have a UUCP connection
you might find it useful to know about the names of hosts
connected directly to you,
but this is really not necessary
since this may be determined from the syntax.
I 63
.sh 4 "A completely different philosophy"
.pp
This is adapted from Bruce Lilly.
Any errors in interpretation are mine.
.pp
Do minimal changes in ruleset 3:
fix some common but unambiguous errors (e.g. trailing dot on domains) and
hide bang paths foo!bar into bar@foo.UUCP.
The resulting "canonical" form is any valid RFC822/RFC1123/RFC976 address.
.pp
Ruleset 0 does the bulk of the work.
It removes the trailing "@.UUCP" that hides bang paths,
strips anything not needed to resolve,
e.g. the phrase from phrase <route-addr> and from named groups,
rejects unparseable addresses using $#error,
and finally
resolves to a mailer/host/user triple.
Ruleset 0 is rather lengthy
as it has to handle 3 basic address forms:
RFC976 bang paths,
RFC1123 %-hacks
(including vanilla RFC822 local-part@domain),
and RFC822 source routes.
It's also complicated by having to handle named lists.
.pp
The header rewriting rulesets 1 and 2
remove the trailing "@.UUCP" that hides bang paths.
Ruleset 2 also strips the $# mailer $@ host (for test mode).
.pp
Ruleset 4 does absolutely nothing.
.pp
The per-mailer rewriting rulesets conform the envelope and
header addresses to the requirements of the specific
mailer.
.pp
Lots of rulesets-as-subroutines are used.
.pp
As a result, header addresses are subject to minimal munging
(per RFC1123), and the general plan is per RFC822 sect. 3.4.10.
E 63
.sh 3 "Relevant issues"
.pp
The canonical form you use
should almost certainly be as specified in
D 65
the Arpanet protocols
E 65
I 65
the Internet protocols
E 65
RFC819 and RFC822.
Copies of these RFC's are included on the
.i sendmail
tape
as
.i doc/rfc819.lpr
and
.i doc/rfc822.lpr .
.pp
RFC822
describes the format of the mail message itself.
D 137
.i Sendmail
follows this RFC closely,
to the extent that many of the standards described in this document
can not be changed without changing the code.
In particular,
the following characters have special interpretations:
.(b
I 129
< > ( ) " \e
.)b
Any attempt to use these characters for other than their RFC822
purpose in addresses is probably doomed to disaster.
.pp
RFC819
describes the specifics of the domain-based addressing.
This is touched on in RFC822 as well.
Essentially each host is given a name
E 129
D 129
< > ( ) " \e
.)b
Any attempt to use these characters for other than their RFC822
purpose in addresses is probably doomed to disaster.
.pp
E 137
I 137
.i Sendmail
follows this RFC closely,
to the extent that many of the standards described in this document
can not be changed without changing the code.
In particular,
the following characters have special interpretations:
.(b
< > ( ) " \e
.)b
Any attempt to use these characters for other than their RFC822
purpose in addresses is probably doomed to disaster.
.pp
E 137
RFC819
describes the specifics of the domain-based addressing.
This is touched on in RFC822 as well.
Essentially each host is given a name
E 129
which is a right-to-left dot qualified pseudo-path
from a distinguished root.
The elements of the path need not be physical hosts;
the domain is logical rather than physical.
For example,
at Berkeley
one legal host might be
.q a.CC.Berkeley.EDU ;
reading from right to left,
.q EDU
is a top level domain
comprising educational institutions,
.q Berkeley
is a logical domain name,
.q CC
represents the Computer Center,
(in this case a strictly logical entity),
and
.q a
is a host in the Computer Center.
.pp
Beware when reading RFC819
that there are a number of errors in it.
.sh 3 "How to proceed"
.pp
Once you have decided on a philosophy,
it is worth examining the available configuration tables
to decide if any of them are close enough
to steal major parts of.
Even under the worst of conditions,
there is a fair amount of boiler plate that can be collected safely.
.pp
The next step is to build ruleset three.
This will be the hardest part of the job.
Beware of doing too much to the address in this ruleset,
since anything you do will reflect through
to the message.
In particular,
stripping of local domains is best deferred,
since this can leave you with addresses with no domain spec at all.
Since
.i sendmail
likes to append the sending domain to addresses with no domain,
this can change the semantics of addresses.
Also try to avoid
fully qualifying domains in this ruleset.
Although technically legal,
this can lead to unpleasantly and unnecessarily long addresses
reflected into messages.
The Berkeley configuration files
define ruleset nine
to qualify domain names and strip local domains.
This is called from ruleset zero
to get all addresses into a cleaner form.
.pp
Once you have ruleset three finished,
the other rulesets should be relatively trivial.
If you need hints,
examine the supplied configuration tables.
.sh 3 "Testing the rewriting rules \*- the \-bt flag"
.pp
When you build a configuration table,
you can do a certain amount of testing
using the
.q "test mode"
of
.i sendmail .
For example,
you could invoke
.i sendmail
as:
.(b
sendmail \-bt \-Ctest.cf
.)b
which would read the configuration file
.q test.cf
and enter test mode.
In this mode,
you enter lines of the form:
.(b
rwset address
.)b
where
.i rwset
is the rewriting set you want to use
and
.i address
is an address to apply the set to.
Test mode shows you the steps it takes
as it proceeds,
finally showing you the address it ends up with.
You may use a comma separated list of rwsets
D 63
for sequential application of rules to an input;
ruleset three is always applied first.
E 63
I 63
for sequential application of rules to an input.
E 63
For example:
.(b
D 63
1,21,4 monet:bollard
E 63
I 63
3,1,21,4 monet:bollard
E 63
.)b
first applies ruleset three to the input
.q monet:bollard.
Ruleset one is then applied to the output of ruleset three,
followed similarly by rulesets twenty-one and four.
.pp
If you need more detail,
you can also use the
.q \-d21
flag to turn on more debugging.
For example,
.(b
sendmail \-bt \-d21.99
.)b
turns on an incredible amount of information;
a single word address
is probably going to print out several pages worth of information.
I 63
.pp
You should be warned that internally,
D 117
.b sendmail
E 117
I 117
.i sendmail
E 117
applies ruleset 3 to all addresses.
D 117
In this version of sendmail, you will have to do that manually.
E 117
I 117
In this version of
.i sendmail ,
you will have to do that manually.
E 117
For example, older versions allowed you to use
.(b
0 bruce@broadcast.sony.com
.)b
This version requires that you use:
.(b
3,0 bruce@broadcast.sony.com
.)b
I 155
.pp
As of version 8.7,
some other syntaxes are available in test mode:
.bu
\&.D\|h\|value
defines macro
.i h
to have the indicated
.i value .
This is useful when debugging rules that use the
.b $& \c
.i x
syntax.
.bu
\&.C\|c\|value
adds the indicated
.i value
to class
.i c .
.bu
\&.S\|ruleset
dumps the contents of the indicated ruleset.
.bu
\-d\|debug-spec
is equivalent to the command-line flag.
E 155
E 63
.sh 3 "Building mailer descriptions"
.pp
To add an outgoing mailer to your mail system,
you will have to define the characteristics of the mailer.
.pp
Each mailer must have an internal name.
This can be arbitrary,
except that the names
.q local
and
.q prog
must be defined.
.pp
The pathname of the mailer must be given in the P field.
If this mailer should be accessed via an IPC connection,
use the string
.q [IPC]
instead.
.pp
The F field defines the mailer flags.
You should specify an
.q f
or
.q r
flag to pass the name of the sender as a
.b \-f
or
.b \-r
flag respectively.
These flags are only passed if they were passed to
D 117
.i sendmail,
E 117
I 117
.i sendmail ,
E 117
so that mailers that give errors under some circumstances
can be placated.
If the mailer is not picky
you can just specify
.q "\-f $g"
in the argv template.
If the mailer must be called as
D 63
.b root
the
.q S
flag should be given;
this will not reset the userid
before calling the mailer\**.
E 63
I 63
.b root
the
.q S
flag should be given;
this will not reset the userid
before calling the mailer\**.
E 63
.(f
\**\c
.i Sendmail
must be running setuid to root
for this to work.
.)f
If this mailer is local
(i.e., will perform final delivery
rather than another network hop)
the
.q l
flag should be given.
Quote characters
(backslashes and " marks)
can be stripped from addresses if the
.q s
flag is specified;
if this is not given
they are passed through.
If the mailer is capable of sending to more than one user
on the same host
in a single transaction
the
.q m
flag should be stated.
D 75
If this flag is on,
then the argv template containing
.b $u
will be repeated for each unique user
on a given host.
The
.q e
flag will mark the mailer as being
.q expensive,
which will cause
.i sendmail
to defer connection
until a queue run\**.
.(f
\**The
.q c
configuration option must be given
for this to be effective.
.)f
.pp
An unusual case is the
.q C
flag.
This flag applies to the mailer that the message is received from,
E 75
I 75
If this flag is on,
then the argv template containing
.b $u
will be repeated for each unique user
on a given host.
The
.q e
flag will mark the mailer as being
.q expensive,
which will cause
.i sendmail
to defer connection
until a queue run\**.
.(f
\**The
.q c
configuration option must be given
for this to be effective.
.)f
.pp
An unusual case is the
.q C
flag.
This flag applies to the mailer that the message is received from,
E 75
rather than the mailer being sent to;
if set,
the domain spec of the sender
(i.e., the
.q @host.domain
part)
is saved
and is appended to any addresses in the message
that do not already contain a domain spec.
For example,
a message of the form:
.(b
D 58
From: eric@ucbarpa
To: wnj@monet, mckusick
E 58
I 58
From: eric@vangogh.CS.Berkeley.EDU
To: wnj@monet.CS.Berkeley.EDU, mckusick
E 58
.)b
will be modified to:
.(b
D 58
From: eric@ucbarpa
To: wnj@monet, mckusick@ucbarpa
E 58
I 58
From: eric@vangogh.CS.Berkeley.EDU
To: wnj@monet.CS.Berkeley.EDU, mckusick@vangogh.CS.Berkeley.EDU
E 58
.)b
.i "if and only if"
the
.q C
D 139
flag is defined in the mailer corresponding to
D 58
.q eric@ucbarpa.
E 58
I 58
.q eric@vangogh.CS.Berkeley.EDU.
E 139
I 139
flag is defined in the mailer resolved to
by running
.q eric@vangogh.CS.Berkeley.EDU
through rulesets 3 and 0.
E 139
E 58
.pp
Other flags are described
in Appendix C.
.pp
The S and R fields in the mailer description
are per-mailer rewriting sets
to be applied to sender and recipient addresses
respectively.
These are applied after the sending domain is appended
and the general rewriting sets
(numbers one and two)
are applied,
but before the output rewrite
(ruleset four)
is applied.
A typical use is to append the current domain
to addresses that do not already have a domain.
For example,
a header of the form:
.(b
From: eric
.)b
might be changed to be:
.(b
D 58
From: eric@ucbarpa
E 58
I 58
From: eric@vangogh.CS.Berkeley.EDU
E 58
.)b
or
.(b
From: ucbvax!eric
.)b
depending on the domain it is being shipped into.
These sets can also be used
to do special purpose output rewriting
in cooperation with ruleset four.
.pp
I 124
The S and R fields
can be specified as two numbers separated by a slash
(e.g.,
.q "S=10/11" ),
meaning that all envelope addresses will be processed through ruleset 10
and all header addresses will be processed through ruleset 11.
With only one number specified,
both envelope and header rewriting sets are set to the indicated ruleset.
.pp
E 124
The E field defines the string to use
as an end-of-line indication.
A string containing only newline is the default.
The usual backslash escapes
(\er, \en, \ef, \eb)
may be used.
.pp
Finally,
D 143
an argv template is given as the E field.
E 143
I 143
an argv template is given as the A field.
E 143
It may have embedded spaces.
If there is no argv with a
.b $u
macro in it,
.i sendmail
will speak SMTP
to the mailer.
If the pathname for this mailer is
.q [IPC],
the argv should be
.(b
IPC $h [ \fIport\fP ]
.)b
where
.i port
is the optional port number
to connect to.
.pp
For example,
the specifications:
.(b
.ta \w'Mlocal, 'u +\w'P=/bin/mail, 'u +\w'F=rlsm, 'u +\w'S=10, 'u +\w'R=20, 'u
Mlocal,	P=/bin/mail,	F=rlsm	S=10,	R=20,	A=mail \-d $u
Mether,	P=[IPC],	F=meC,	S=11,	R=21,	A=IPC $h, M=100000
.)b
specifies a mailer to do local delivery
and a mailer for ethernet delivery.
The first is called
.q local,
is located in the file
.q /bin/mail,
takes a picky
.b \-r
flag,
does local delivery,
quotes should be stripped from addresses,
and multiple users can be delivered at once;
ruleset ten
should be applied to sender addresses in the message
and ruleset twenty
should be applied to recipient addresses;
the argv to send to a message will be the word
.q mail,
the word
.q \-d,
and words containing the name of the receiving user.
If a
.b \-r
flag is inserted
it will be between the words
.q mail
and
.q \-d.
The second mailer is called
.q ether,
it should be connected to via an IPC connection,
it can handle multiple users at once,
connections should be deferred,
and any domain from the sender address
should be appended to any receiver name
without a domain;
sender addresses should be processed by ruleset eleven
and recipient addresses by ruleset twenty-one.
There is a 100,000 byte limit on messages passed through this mailer.
E 157
.sh 2 "The User Database"
.pp
D 117
If you have a version of sendmail with the user database package
E 117
I 117
If you have a version of
.i sendmail
with the user database package
E 117
compiled in,
the handling of sender and recipient addresses
is modified.
.pp
The location of this database is controlled with the
D 157
.b U
E 157
I 157
.b UserDatabaseSpec
E 157
option.
E 50
E 47
.sh 3 "Structure of the user database"
.pp
The database is a sorted (BTree-based) structure.
User records are stored with the key:
.(b
\fIuser-name\fP\fB:\fP\fIfield-name\fP
.)b
The sorted database format ensures that user records are clustered together.
Meta-information is always stored with a leading colon.
.pp
Field names define both the syntax and semantics of the value.
Defined fields include:
I 47
D 48
.nr ii 1.5i
E 48
I 48
.nr ii 1i
E 48
E 47
.ip maildrop
The delivery address for this user.
There may be multiple values of this record.
In particular,
mailing lists will have one
.i maildrop
record for each user on the list.
.ip "mailname"
The outgoing mailname for this user.
For each outgoing name,
there should be an appropriate
.i maildrop
record for that name to allow return mail.
See also
.i :default:mailname .
I 97
.ip mailsender
Changes any mail sent to this address to have the indicated envelope sender.
This is intended for mailing lists,
and will normally be the name of an appropriate -request address.
It is very similar to the owner-\c
.i list
syntax in the alias file.
E 97
D 120
.ip fullname
The full name of the user.
.ip office-address
The office address for this user.
E 120
I 120
.ip fullname
The full name of the user.
.ip office-address
The office address for this user.
E 120
.ip office-phone
The office phone number for this user.
.ip office-fax
The office FAX number for this user.
.ip home-address
The home address for this user.
.ip home-phone
The home phone number for this user.
.ip home-fax
The home FAX number for this user.
I 50
.ip project
A (short) description of the project this person is affiliated with.
In the University this is often just the name of their graduate advisor.
E 50
.ip plan
A pointer to a file from which plan information can be gathered.
.pp
As of this writing,
D 117
only a few of these fields are actually being used by sendmail:
E 117
I 117
only a few of these fields are actually being used by
.i sendmail :
E 117
.i maildrop
and
.i mailname .
A
.i finger
program that uses the other fields is planned.
.sh 3 "User database semantics"
.pp
When the rewriting rules submit an address to the local mailer,
the user name is passed through the alias file.
If no alias is found (or if the alias points back to the same address),
the name (with
.q :maildrop
D 89
appended)
is then used as a key in the user database.
If no match occurs (or if the maildrop points at the same address),
forwarding is tried.
.pp
If the first token of the user name returned by ruleset 0
is an
.q @
sign, the user database lookup is skipped.
The intent is that the user database will act as a set of defaults
for a cluster (in our case, the Computer Science Division);
mail sent to a specific machine should ignore these defaults.
.pp
When mail is sent,
the name of the sending user is looked up in the database.
If that user has a
.q mailname
record,
the value of that record is used as their outgoing name.
For example, I might have a record:
.(b
eric:mailname	Eric.Allman@CS.Berkeley.EDU
.)b
This would cause my outgoing mail to be sent as Eric.Allman.
.pp
If a
.q maildrop
is found for the user,
but no corresponding
.q maildrop
record exists,
the record
.q :default:mailname
is consulted.
If present, this is the name of a host to override the local host.
For example, in our case we would set it to
.q CS.Berkeley.EDU .
D 47
The effect is that anyone known in the database
gets their outgoing mail stamped as
.q user@CS.Berkeley.EDU ,
but people not listed in the database use the local hostname.
E 46
E 20
E 2
D 8
.sh 1 "TUNING"
.pp
There are a number of configuration parameters
you may want to change,
depending on the requirements of your site.
.sh 2 "Timeouts"
.pp
All time intervals are set
using a scaled syntax.
For example,
.q 10m
represents ten minutes, whereas
.q 2h30m
represents two and a half hours.
The full set of scales is:
.(b
.ta 4n
s	seconds
m	minutes
h	hours
d	days
w	weeks
.)b
.sh 3 "Queue interval"
.pp
The argument to the
.b \-q
flag
specifies how often a subdaemon will run the queue.
This is typically set to between five minutes
and one half hour.
.sh 3 "Read timeouts"
.pp
It is possible to time out when reading the standard input
or when reading from a remote SMTP server.
Technically,
this is not acceptable within the published protocols.
However,
it might be appropriate to set it to something large
in certain environments
(such as an hour).
This will reduce the chance of large numbers of idle daemons
piling up on your system.
This timeout is set using the
.b r
option in the configuration file.
.sh 3 "Message timeouts"
.pp
After sitting in the queue for a few days,
a message will time out.
This is to insure that at least the sender is aware
of the inability to send a message.
The timeout is typically set to three days.
This timeout is set using the
.b T
option in the configuration file.
.pp
The time of submission is set in the queue,
rather than the amount of time left until timeout.
As a result, you can flush messages that have been hanging
for a short period
by running the queue
with a short message timeout.
I 6
For example,
.(b
/usr/lib/sendmail -oT1d -q
.)b
will run the queue
and flush anything that is one day old.
E 6
D 7
.sh 2 "Default Operation Mode"
E 7
I 7
.sh 2 "Delivery Mode"
E 7
.pp
D 7
There are a number of default modes that
E 7
I 7
There are a number of delivery modes that
E 7
.i sendmail
D 7
can operate in.
Some of these
(e.g., daemon mode,
test mode,
and verify mode)
are not acceptable as defaults,
since they do not actually cause mail
to be delivered.
However,
there are other modes
that specify how quickly mail will be delivered.
These modes are:
E 7
I 7
can operate in,
set by the
.q d
configuration option.
These modes
specify how quickly mail will be delivered.
Legal modes are:
E 7
.(b
.ta 4n
D 7
a	read, verify, and deliver
f	read and verify, but deliver in a subprocess
q	read, verify, and queue (don't deliver)
E 7
I 7
i	deliver interactively (synchronously)
b	deliver in background (asynchronously)
q	queue only (don't deliver)
E 7
.)b
There are tradeoffs.
Mode
D 6
.b a
E 6
I 6
D 7
.q a
E 7
I 7
.q i
E 7
E 6
passes the maximum amount of information to the sender,
but is hardly ever necessary.
Mode
D 6
.b q
E 6
I 6
.q q
E 6
puts the minimum load on your machine,
but means that delivery may be delayed for up to the queue interval.
D 2
The
E 2
I 2
Mode
E 2
D 6
.b f
E 6
I 6
D 7
.q f
E 7
I 7
.q b
E 7
E 6
D 2
mode is probably a good compromise.
E 2
I 2
is probably a good compromise.
E 2
.sh 2 "Log Level"
.pp
D 6
If you have
.i syslog (8)
or an equivalent installed,
you will be able to do logging.
There is a large amount of information that can be logged.
The log is arranged as a succession of levels.
At the lowest level
only extremely strange situations are logged.
At the highest level,
even the most mundane and uninteresting events
are recorded for posterity.
As a convention,
log levels under ten
are considered
.q useful;
log levels above ten
are usually for debugging purposes.
E 6
I 6
The level of logging can be set for sendmail.
The default using a standard configuration table is level 9.
The levels are as follows:
.ip 0
No logging.
.ip 1
Major problems only.
.ip 2
Message collections and failed deliveries.
.ip 3
Successful deliveries.
.ip 4
Messages being defered
(due to a host being down, etc.).
.ip 5
Normal message queueups.
.ip 6
Unusual but benign incidents,
e.g.,
trying to process a locked queue file.
.ip 12
Several messages that are basically only of interest
when debugging.
.ip 16
Verbose information regarding the queue.
E 6
.sh 2 "File Modes"
.pp
There are a number of files
that may have a number of modes.
The modes depend on what functionality you want
and the level of security you require.
.sh 3 "To suid or not to suid?"
.pp
.i Sendmail
can safely be made
setuid to root.
At the point where it is about to
.i exec (2)
a mailer,
it checks to see if the userid is zero;
if so,
it resets the userid and groupid to a default
(set by the
.b u
and
.b g
options).
(This can be overridden
by setting the
D 6
.b r
E 6
I 6
.b S
E 6
flag to the mailer
for mailers that are trusted
and must be called as root.)
However,
this will cause mail processing
to be accounted
(using
.i sa (8))
to root
rather than to the user sending the mail.
.sh 3 "Should my alias database be writable?"
.pp
At Berkeley
we have the alias database
(/usr/lib/aliases*)
mode 666.
There are some dangers inherent in this approach:
any user can add him-/her-self
to any list,
or can
.q steal
any other user's mail.
However,
we have found users to be basically trustworthy,
and the cost of having a read-only database
greater than the expense of finding and eradicating
the rare nasty person.
.pp
The database that
.i sendmail
actually used
is represented by the two files
.i aliases.dir
and
.i aliases.pag
(both in /usr/lib).
The mode on these files should match the mode
on /usr/lib/aliases.
If
.i aliases
is writable
and the
DBM
files
(\c
.i aliases.dir
and
.i aliases.pag )
are not,
users will be unable to reflect their desired changes
through to the actual database.
However,
if
.i aliases
is read-only
and the DBM files are writable,
a slightly sophisticated user
can arrange to steal mail anyway.
.pp
D 5
If your DBM files are not writable by the world,
E 5
I 5
If your DBM files are not writable by the world
or you do not have auto-rebuild enabled
(with the
.q D
option),
E 5
then you must be careful to reconstruct the alias database
each time you change the text version:
.(b
D 5
/usr/lib/sendmail -I
E 5
I 5
/usr/lib/sendmail \-bi
E 5
.)b
If this step is ignored or forgotten
any intended changes will also be ignored or forgotten.
.sh 1 "ARGUMENTS"
.pp
D 2
Sendmail has gobs of arguments.
The arguments are
described in detail in Appendix A.
E 2
I 2
The complete list of arguments to
.i sendmail
is described in detail in Appendix A.
E 2
Some important arguments are described here.
.sh 2 "Queue Interval"
.pp
The amount of time between forking a process
to run through the queue
is defined by the
.b \-q
flag.
If you run in mode
.b f
or
.b a
this can be relatively large,
since it will only be relevant
when a host that was down comes back up.
If you run in
.b q
mode
it should be relatively short,
since it defines the maximum amount of time that a message
may sit in the queue.
.sh 2 "Daemon Mode"
.pp
If you allow incoming mail over an IPC connection,
you should have a daemon running.
This should be set by your
.i /etc/rc
file using the
.b \-bd
flag.
The
.b \-bd
flag and the
.b \-q
flag may be combined in one call:
.(b
/usr/lib/sendmail \-bd \-q10m
.)b
.sh 2 "Forcing the Queue"
.pp
In some cases you may find that the queue has gotten clogged for some reason.
You can force a queue run
using the
.b \-q
flag (with no value).
It is frequently entertaining to use the
.b \-v
flag (verbose)
when this is done to watch what happens:
.(b
D 5
/usr/lib/sendmail -q -v
E 5
I 5
/usr/lib/sendmail \-q \-v
E 5
.)b
.sh 2 "Debugging"
.pp
There are a fairly large number of debug flags
built into
.i sendmail .
Each debug flag has a number and a level,
where higher levels means to print out more information.
The convention is that levels greater than nine are
.q absurd,
i.e.,
they print out so much information that you wouldn't normally
want to see them except for debugging that particular piece of code.
Debug flags are set using the
.b \-d
option;
the syntax is:
.(b
.ta \w'debug-option  'u
debug-flag:	\fB\-d\fP debug-list
debug-list:	debug-option [ , debug-option ]
debug-option:	debug-range [ . debug-level ]
debug-range:	integer | integer \- integer
debug-level:	integer
.)b
where spaces are for reading ease only.
For example,
.(b
\-d12	Set flag 12 to level 1
\-d12.3	Set flag 12 to level 3
\-d3-17	Set flags 3 through 17 to level 1
\-d3-17.4	Set flags 3 through 17 to level 4
.)b
For a complete list of the available debug flags
you will have to look at the code
(they are too dynamic to keep this documentation up to date).
D 2
.sh 3 "Trying a different configuration file"
E 2
I 2
.sh 2 "Trying a Different Configuration File"
E 2
.pp
An alternative configuration file
can be specified using the
.b \-C
flag; for example,
.(b
D 5
/usr/lib/sendmail -Ctest.cf
E 5
I 5
/usr/lib/sendmail \-Ctest.cf
E 5
.)b
uses the configuration file
.i test.cf
instead of the default
.i /usr/lib/sendmail.cf.
If the
.b \-C
flag has no value
it defaults to
.i sendmail.cf
in the current directory.
D 2
.sh 3 "Changing the values of options"
E 2
I 2
.sh 2 "Changing the Values of Options"
E 2
.pp
Options can be overridden using the
.b \-o
flag.
For example,
.(b
/usr/lib/sendmail \-oT2m
.)b
sets the
.b T
(timeout) option to two minutes
for this run only.
E 8
.++ A
D 2
.+c "COMMAND LINE OPTIONS"
E 2
I 2
.+c "COMMAND LINE FLAGS"
E 2
.ba 0
I 6
.nr ii 1i
E 6
.pp
Arguments must be presented with flags before addresses.
The flags are:
D 6
.nr ii 4n
E 6
.ip "\-f\ \fIaddr\fP"
The sender's machine address is
.i addr .
This flag is ignored unless the real user
is listed as a
.q "trusted user"
or if
.i addr
contains an exclamation point
(because of certain restrictions in UUCP).
.ip "\-r\ \fIaddr\fP"
An obsolete form of
.b \-f .
.ip "\-h\ \fIcnt\fP"
Sets the
.q "hop count"
to
.i cnt .
This represents the number of times this message has been processed
by
.i sendmail
(to the extent that it is supported by the underlying networks).
.i Cnt
is incremented during processing,
and if it reaches
MAXHOP
(currently 30)
.i sendmail
throws away the message with an error.
.ip \-F\fIname\fP
Sets the full name of this user to
.i name .
.ip \-n
Don't do aliasing or forwarding.
.ip \-t
Read the header for
.q To: ,
.q Cc: ,
and
.q Bcc:
lines, and send to everyone listed in those lists.
The
.q Bcc:
line will be deleted before sending.
Any addresses in the argument vector will be deleted
from the send list.
D 7
.ip \-a
Do special processing for the
ARPANET.
This includes reading the
E 7
I 7
.ip \-b\fIx\fP
Set operation mode to
.i x .
Operation modes are:
.(b
.ta 4n
m	Deliver mail (default)
a	Run in arpanet mode (see below)
s	Speak SMTP on input side
d	Run as a daemon
t	Run in test mode
v	Just verify addresses, don't collect or deliver
i	Initialize the alias database
p	Print the mail queue
z	Freeze the configuration file
.)b
The special processing for the
ARPANET
includes reading the
E 7
.q "From:"
line from the header to find the sender,
printing
ARPANET
style messages
(preceded by three digit reply codes for compatibility with
the FTP protocol
[Neigus73, Postel74, Postel77]),
and ending lines of error messages with <CRLF>.
D 7
.ip \-a\&s
Take input over an SMTP connection on standard input and output.
This does everything the \-a flag does also.
E 7
.ip \-q\fItime\fP
D 6
Try to execute the queued up mail.
E 6
I 6
Try to process the queued up mail.
E 6
If the time is given,
a sendmail will run through the queue at the specified interval
to deliver queued mail;
otherwise, it only runs once.
.ip \-C\fIfile\fP
Use a different configuration file.
I 27
.i Sendmail
runs as the invoking user (rather than root)
when this flag is specified.
E 27
D 5
.ip \-I
Initialize the DBM version
of the alias file.
If
.b \-I
is given,
no delivery is attempted.
The DBM version will be rebuilt automatically if the DBM files
are mode 666,
or if they are owned by the effective userid.
E 5
.ip \-d\fIlevel\fP
Set debugging level.
.ip \-o\fIx\|value\fP
Set option
.i x
to the specified
.i value .
These options are described in Appendix B.
I 4
D 5
.ip \-Z
Initialize the file
.i /usr/lib/sendmail.fc.
E 5
E 4
.pp
There are a number of options that may be specified as
D 7
primitive flags.
These are provided for compatibility.
These are the b, c, e, i, m, T, and v options.
E 7
I 7
primitive flags
(provided for compatibility with
.i delivermail ).
These are the e, i, m, and v options.
E 7
Also,
the f option
may be specified as the
.b \-s
flag.
D 2
.+c "OPTIONS"
E 2
I 2
.+c "CONFIGURATION OPTIONS"
E 2
.pp
The following options may be set using the
.b \-o
flag on the command line
or the
.b O
D 27
line in the configuration file:
E 27
I 27
line in the configuration file.
Many of them cannot be specified unless the invoking user is trusted.
E 27
D 19
.nr ii 4n
E 19
I 19
.nr ii 1i
E 19
.ip A\fIfile\fP
Use the named
.i file
as the alias file.
If no file is specified,
use
.i aliases
in the current directory.
I 2
D 27
.ip a
E 27
I 27
.ip a\fIN\fP
E 27
If set,
D 27
wait for an
E 27
I 27
wait up to
.i N
minutes for an
E 27
.q @:@
entry to exist in the alias database
before starting up.
D 27
If it does not appear in five minutes,
rebuild the database.
E 27
I 27
If it does not appear in
.i N
minutes,
rebuild the database
(if the
.b D
option is also set)
or issue a warning.
.ip B\fIc\fP
Set the blank substitution character to
.i c .
Unquoted spaces in addresses are replaced by this character.
E 27
E 2
D 7
.ip b\fIx\fP
Run in mode
.i x .
Legal modes are:
.(b
.ta 4n
a	Do all delivery synchronously
d	Run as a daemon
f	Fork before doing delivery
q	Just queue up the message
t	Run in test mode
v	Just verify addresses, don't collect or deliver
I 5
i	Initialize the alias database
p	Print the mail queue
z	Freeze the configuration file
E 5
.)b
E 7
.ip c
D 6
If this mailer is marked as being expensive,
E 6
I 6
If an outgoing mailer is marked as being expensive,
E 6
don't connect immediately.
This requires that queueing be compiled in,
D 6
since it will depend on a sender process to
E 6
I 6
since it will depend on a queue run process to
E 6
actually send the mail.
I 44
.ip C\fIN\fP
Checkpoints the queue every
.i N
(default 10)
addresses sent.
If your system crashes during delivery to a large list,
this prevents retransmission to any but the last
.I N
recipients.
E 44
I 7
.ip d\fIx\fP
Deliver in mode
.i x .
Legal modes are:
.(b
.ta 4n
i	Deliver interactively (synchronously)
b	Deliver in background (asynchronously)
q	Just queue the message (deliver during queue run)
.)b
E 7
I 5
.ip D
If set,
rebuild the alias database if necessary and possible.
If this option is not set,
.i sendmail
will never rebuild the alias database
unless explicitly requested
using
.b \-bi .
E 5
.ip e\fIx\fP
Dispose of errors using mode
.i x .
The values for
.i x
are:
.(b
p	Print error messages (default)
q	No messages, just give exit status
m	Mail back errors
w	Write back errors (mail if user not logged in)
e	Mail back errors and give zero exit stat always
.)b
I 2
D 38
.ip F\fIn\fP
The temporary file mode,
in octal.
644 and 600 are good choices.
E 38
E 2
.ip f
Save
Unix-style
.q From
lines at the front of headers.
Normally they are assumed redundant
and discarded.
.ip g\fIn\fP
Set the default group id
for mailers to run in
to
.i n .
I 44
.ip h\fIN\fP
The maximum hop count.
Messages that have been processed more than
.i N
times are assumed to be in a loop and are rejected.
E 44
.ip H\fIfile\fP
Specify the help file
for SMTP.
I 37
.ip I
Insist that the BIND name server be running
to resolve host names.
If this is not set and the name server is not running,
the
.i /etc/hosts
file will be considered complete.
In general, you do want to set this option
if your
.i /etc/hosts
file does not include all hosts known to you
or if you are using the MX (mail forwarding) feature of the BIND name server.
The name server will still be consulted
even if this option is not set, but
.i sendmail
will feel free to resort to reading
.i /etc/hosts
if the name server is not available.
Thus, you should
.i never
set this option if you do not run the name server.
E 37
.ip i
Ignore dots in incoming messages.
I 42
D 44
.ip k\fIN\fP
Checkpoints the queue every
.i N
(default 10)
addresses sent.
If your system crashes during delivery to a large list,
this prevents retransmission to any but the last
.I N
recipients.
E 44
E 42
.ip L\fIn\fP
Set the default log level to
.i n .
.ip M\fIx\|value\fP
Set the macro
.i x
to
.i value .
I 6
This is intended only for use from the command line.
E 6
.ip m
Send to me too,
even if I am in an alias expansion.
I 26
.ip N\fInetname\fP
The name of the home network;
.q ARPA
by default.
The the argument of an SMTP
.q HELO
command is checked against
.q hostname.netname
where
.i hostname
is requested from the kernel for the current connection.
If they do not match,
.q Received:
lines are augmented by the name that is determined in this manner
so that messages can be traced accurately.
E 26
I 17
D 23
.ip N
Set the maximum number of connnections that
.i sendmail
will accept simultaneously over an IPC connection
(default four).
This can be used to try to limit the mail load on your system.
Note that this only applies to mail coming in
over an IPC connection,
so that mail submissions occuring from calling
.i sendmail
directly are never restricted.
E 23
E 17
.ip o
D 6
Assume that the headers are already in new format,
E 6
I 6
Assume that the headers may be in old format,
E 6
i.e.,
D 6
there are commas between names and spaces are to be preserved.
If this flag is not given,
an adaptive algorithm is used:
E 6
I 6
spaces delimit names.
This actually turns on
an adaptive algorithm:
E 6
if any recipient address contains a comma, parenthesis,
or angle bracket,
it will be assumed that commas already exist.
D 6
This flag is required in certain rare cases.
E 6
I 6
If this flag is not on,
only commas delimit names.
E 6
Headers are always output with commas between the names.
.ip Q\fIdir\fP
Use the named
.i dir
as the queue directory.
I 28
.ip q\fIfactor\fP
Use
.i factor
as the multiplier in the map function
to decide when to just queue up jobs rather than run them.
This value is divided by the difference between the current load average
and the load average limit
(\c
.b x
flag)
to determine the maximum message priority
that will be sent.
Defaults to 10000.
E 28
.ip r\fItime\fP
Timeout reads after
.i time
interval.
.ip S\fIfile\fP
Log statistics in the named
.i file .
.ip s
Be super-safe when running things,
i.e.,
always instantiate the queue file,
even if you are going to attempt immediate delivery.
.i Sendmail
always instantiates the queue file
before returning control the the client
under any circumstances.
.ip T\fItime\fP
Set the queue timeout to
.i time .
After this interval,
messages that have not been successfully sent
will be returned to the sender.
.ip t\fIS,D\fP
D 34
Set the local timezone name to
E 34
I 34
Set the local time zone name to
E 34
.i S
for standard time and
.i D
for daylight time;
this is only used under version six.
.ip u\fIn\fP
Set the default userid for mailers to
.i n .
Mailers without the
D 16
.i R
E 16
I 16
.i S
E 16
flag in the mailer definition
will run as this user.
.ip v
Run in verbose mode.
I 42
.ip w
D 43
Asserts that this domain (might) have wildcard MX records
E 43
I 43
Asserts that this domain does not have wildcard MX records
E 43
in the name server database.
These wildcards can
.q capture
names that are directed outward
and forward them back to your own site.
I 43
If there are no wildcards matching your domain,
this option will reduce name server load
and improve performance.
E 43
E 42
I 27
.ip x\fILA\fP
When the system load average exceeds
.i LA ,
just queue messages
(i.e., don't try to send them).
.ip X\fILA\fP
When the system load average exceeds
.i LA ,
refuse incoming SMTP connections.
I 28
D 29
.ip z
E 29
I 29
.ip y\fIfact\fP
The indicated
.i fact or
is added to the priority (thus
.i lowering
the priority of the job)
for each recipient,
i.e., this value penalizes jobs with large numbers of recipients.
.ip Y
E 29
If set,
deliver each job that is run from the queue in a separate process.
Use this option if you are short of memory,
since the default tends to consume considerable amounts of memory
while the queue is being processed.
I 29
.ip z\fIfact\fP
The indicated
.i fact or
is multiplied by the message class
(determined by the Precedence: field in the user header
and the
.b P
lines in the configuration file)
and subtracted from the priority.
Thus, messages with a higher Priority: will be favored.
.ip Z\fIfact\fP
The
.i fact or
is added to the priority
every time a job is processed.
Thus,
each time a job is processed,
its priority will be decreased by the indicated value.
In most environments this should be positive,
since hosts that are down are all too often down for a long time.
E 29
E 28
E 27
I 2
.+c "MAILER FLAGS"
The following flags may be set in the mailer description.
I 19
.nr ii 4n
E 19
.ip f
The mailer wants a
.b \-f
.i from
flag,
but only if this is a network forward operation
(i.e.,
the mailer will give an error
if the executing user
does not have special permissions).
.ip r
Same as
.b f ,
but sends a
.b \-r
flag.
D 8
.ip q
Don't print errors \*- the mailer will do it for us.
E 8
.ip S
Don't reset the userid
before calling the mailer.
This would be used in a secure environment
where
.i sendmail
ran as root.
This could be used to avoid forged addresses.
This flag is suppressed if given from an
.q unsafe
environment
(e.g, a user's mail.cf file).
.ip n
Do not insert a UNIX-style
.q From
line on the front of the message.
.ip l
This mailer is local
(i.e.,
final delivery will be performed).
.ip s
Strip quote characters off of the address
before calling the mailer.
.ip m
This mailer can send to multiple users
on the same host
in one transaction.
When a
.b $u
macro occurs in the
.i argv
part of the mailer definition,
that field will be repeated as necessary
for all qualifying users.
.ip F
This mailer wants a
.q From:
header line.
.ip D
This mailer wants a
.q Date:
header line.
.ip M
This mailer wants a
.q Message-Id:
header line.
.ip x
This mailer wants a
.q Full-Name:
header line.
I 8
.ip P
This mailer wants a
.q Return-Path:
line.
E 8
.ip u
Upper case should be preserved in user names
for this mailer.
.ip h
Upper case should be preserved in host names
for this mailer.
.ip A
This is an Arpanet-compatible mailer,
and all appropriate modes should be set.
.ip U
This mailer wants Unix-style
.q From
lines with the ugly UUCP-style
.q "remote from <host>"
on the end.
.ip e
This mailer is expensive to connect to,
so try to avoid connecting normally;
any necessary connection will occur during a queue run.
.ip X
D 13
This mailer wants to run the full SMTP protocol,
including limiting line lengths,
putting <CRLF> on the end of lines,
etc.
E 13
I 13
This mailer want to use the hidden dot algorithm
as specified in RFC821;
basically,
E 47
D 47
any line beginning with a dot
will have an extra dot prepended
(to be stripped at the other end).
This insures that lines in the message containing a dot
will not terminate the message prematurely.
.ip L
Limit the line lengths as specified in RFC821.
D 16
.ip R
Terminate lines with CRLF
(Carriage Return/Line Feed)
rather than newline.
E 16
.ip P
Use the return-path in the SMTP
.q "MAIL FROM:"
command
rather than just the return address;
although this is required in RFC821,
many hosts do not process return paths properly.
E 47
I 47
The effect is that anyone known in the database
gets their outgoing mail stamped as
E 89
I 89
D 90
appended)
is then used as a key in the user database.
If no match occurs (or if the maildrop points at the same address),
forwarding is tried.
E 90
I 90
appended)
is then used as a key in the user database.
If no match occurs (or if the maildrop points at the same address),
forwarding is tried.
E 90
.pp
If the first token of the user name returned by ruleset 0
is an
.q @
sign, the user database lookup is skipped.
The intent is that the user database will act as a set of defaults
for a cluster (in our case, the Computer Science Division);
mail sent to a specific machine should ignore these defaults.
.pp
When mail is sent,
the name of the sending user is looked up in the database.
If that user has a
.q mailname
record,
the value of that record is used as their outgoing name.
For example, I might have a record:
.(b
eric:mailname	Eric.Allman@CS.Berkeley.EDU
.)b
This would cause my outgoing mail to be sent as Eric.Allman.
.pp
If a
.q maildrop
is found for the user,
but no corresponding
D 143
.q maildrop
E 143
I 143
.q mailname
E 143
record exists,
the record
.q :default:mailname
is consulted.
If present, this is the name of a host to override the local host.
For example, in our case we would set it to
.q CS.Berkeley.EDU .
The effect is that anyone known in the database
gets their outgoing mail stamped as
E 89
.q user@CS.Berkeley.EDU ,
but people not listed in the database use the local hostname.
I 130
.sh 3 "Creating the database\**"
.(f
\**These instructions are known to be incomplete.
A future version of the user database is planned
including things such as finger service \*- and good documentation.
.)f
.pp
The user database is built from a text file
using the
.i makemap
utility
(in the distribution in the makemap subdirectory).
The text file is a series of lines corresponding to userdb records;
each line has a key and a value separated by white space.
The key is always in the format described above \*-
for example:
.(b
eric:maildrop
.)b
This file is normally installed in a system directory;
for example, it might be called
.i /etc/userdb .
To make the database version of the map, run the program:
.(b
makemap btree /etc/userdb.db < /etc/userdb
.)b
Then create a config file that uses this.
For example, using the V8 M4 configuration, include the
following line in your .mc file:
.(b
define(\`confUSERDB_SPEC\', /etc/userdb.db)
.)b
E 130
D 50
.sh 1 "CHANGES IN RELEASE 6"
E 50
I 50
.sh 1 "OTHER CONFIGURATION"
E 50
.pp
D 50
The following summarizes changes
since the last commonly available version of
.b sendmail
(5.67):
.sh 2 "Connection Caching"
.pp
Instead of closing SMTP connections immediately,
those connections are cached for possible future use.
The advent of MX records made this effective for mailing lists;
in addition,
substantial performance improvements can be expected for queue processing.
.sh 2 "Eight-Bit Clean"
.pp
Previous versions of
.b sendmail
used the 0200 bit for quoting.
This version avoids that use.
However, for compatibility with RFC 822,
the default is still to strip the eighth bit;
set option `8' to get full 8-bit clean processing.
.sh 2 "User Database"
.pp
The user database is an as-yet experimental attempt
to provide unified large-site name support.
We are installing it at Berkeley;
future versions may show significant modifications.
.sh 2 "Improved BIND Support"
.pp
The BIND support,
particularly for MX records,
had a number of annoying
.q features
which have been removed in this release.
In particular,
these more tightly bind (pun intended) the name server to sendmail,
so that the name server resolution rules are incorporated directly into
.b sendmail .
.sh 2 "Keyed Files"
.pp
Generalized keyed files is an idea taken directly from
.sm IDA
.b sendmail
(albeit with a completely different implementation).
They can be useful on large sites.
.sh 2 "Parsing Bug Fixes"
.pp
A number of small bugs having to do with things like
backslash-escaped quotes inside of comments
have been fixed.
.sh 2 "Separate From/Return-Path Processing"
.pp
Since the From: line is passed in separately from the envelope sender,
these have both been made visible;
the
.b $<
macro gives access to the envelope sender information.
.++ A
.+c "COMMAND LINE FLAGS"
.ba 0
.nr ii 1i
.pp
Arguments must be presented with flags before addresses.
The flags are:
.ip "\-f\ \fIaddr\fP"
The sender's machine address is
.i addr .
This flag is ignored unless the real user
is listed as a
.q "trusted user"
or if
.i addr
contains an exclamation point
(because of certain restrictions in UUCP).
.ip "\-r\ \fIaddr\fP"
An obsolete form of
.b \-f .
.ip "\-h\ \fIcnt\fP"
Sets the
.q "hop count"
to
.i cnt .
This represents the number of times this message has been processed
by
.i sendmail
(to the extent that it is supported by the underlying networks).
.i Cnt
is incremented during processing,
and if it reaches
MAXHOP
(currently 30)
.i sendmail
throws away the message with an error.
D 48
.ip \-F\fIname\fP
Sets the full name of this user to
.i name .
.ip \-n
Don't do aliasing or forwarding.
.ip \-t
Read the header for
.q To: ,
.q Cc: ,
and
.q Bcc:
lines, and send to everyone listed in those lists.
The
.q Bcc:
line will be deleted before sending.
Any addresses in the argument vector will be deleted
from the send list.
.ip \-b\fIx\fP
Set operation mode to
.i x .
Operation modes are:
.(b
.ta 4n
m	Deliver mail (default)
s	Speak SMTP on input side
d	Run as a daemon
t	Run in test mode
v	Just verify addresses, don't collect or deliver
i	Initialize the alias database
p	Print the mail queue
z	Freeze the configuration file
.)b
.ip \-q\fItime\fP
Try to process the queued up mail.
If the time is given,
a sendmail will run through the queue at the specified interval
to deliver queued mail;
otherwise, it only runs once.
.ip \-C\fIfile\fP
Use a different configuration file.
.i Sendmail
runs as the invoking user (rather than root)
when this flag is specified.
.ip \-d\fIlevel\fP
Set debugging level.
.ip \-o\fIx\|value\fP
Set option
.i x
to the specified
.i value .
These options are described in Appendix B.
.pp
There are a number of options that may be specified as
primitive flags
(provided for compatibility with
.i delivermail ).
These are the e, i, m, and v options.
Also,
the f option
may be specified as the
.b \-s
flag.
E 48
I 48
.ip \-F\fIname\fP
Sets the full name of this user to
.i name .
.ip \-n
Don't do aliasing or forwarding.
.ip \-t
Read the header for
.q To: ,
.q Cc: ,
and
.q Bcc:
lines, and send to everyone listed in those lists.
The
.q Bcc:
line will be deleted before sending.
Any addresses in the argument vector will be deleted
from the send list.
.ip \-b\fIx\fP
Set operation mode to
.i x .
Operation modes are:
.(b
.ta 4n
m	Deliver mail (default)
s	Speak SMTP on input side
d	Run as a daemon
t	Run in test mode
v	Just verify addresses, don't collect or deliver
i	Initialize the alias database
p	Print the mail queue
z	Freeze the configuration file
.)b
.ip \-q\fItime\fP
Try to process the queued up mail.
If the time is given,
a sendmail will run through the queue at the specified interval
to deliver queued mail;
otherwise, it only runs once.
.ip \-C\fIfile\fP
Use a different configuration file.
.i Sendmail
runs as the invoking user (rather than root)
when this flag is specified.
.ip \-d\fIlevel\fP
Set debugging level.
.ip \-o\fIx\|value\fP
Set option
.i x
to the specified
.i value .
These options are described in Appendix B.
.pp
There are a number of options that may be specified as
primitive flags
(provided for compatibility with
.i delivermail ).
These are the e, i, m, and v options.
Also,
the f option
may be specified as the
.b \-s
flag.
E 48
.+c "CONFIGURATION OPTIONS"
.pp
The following options may be set using the
.b \-o
flag on the command line
or the
.b O
line in the configuration file.
Many of them cannot be specified unless the invoking user is trusted.
.nr ii 1i
.ip a\fIN\fP
If set,
wait up to
.i N
minutes for an
.q @:@
entry to exist in the alias database
before starting up.
If it does not appear in
.i N
minutes,
rebuild the database
(if the
.b D
option is also set)
or issue a warning.
.ip A\fIfile\fP
Use the named
.i file
as the alias file.
If no file is specified,
use
.i aliases
in the current directory.
.ip B\fIc\fP
Set the blank substitution character to
.i c .
Unquoted spaces in addresses are replaced by this character.
.ip c
If an outgoing mailer is marked as being expensive,
don't connect immediately.
This requires that queueing be compiled in,
since it will depend on a queue run process to
actually send the mail.
.ip C\fIN\fP
Checkpoints the queue every
.i N
(default 10)
addresses sent.
If your system crashes during delivery to a large list,
this prevents retransmission to any but the last
.I N
recipients.
.ip d\fIx\fP
Deliver in mode
.i x .
Legal modes are:
.(b
.ta 4n
i	Deliver interactively (synchronously)
b	Deliver in background (asynchronously)
q	Just queue the message (deliver during queue run)
.)b
.ip D
If set,
rebuild the alias database if necessary and possible.
If this option is not set,
.i sendmail
will never rebuild the alias database
unless explicitly requested
using
.b \-bi .
.ip e\fIx\fP
Dispose of errors using mode
.i x .
The values for
.i x
are:
.(b
p	Print error messages (default)
q	No messages, just give exit status
m	Mail back errors
w	Write back errors (mail if user not logged in)
e	Mail back errors and give zero exit stat always
.)b
.ip E\fIfile/message\fP
Prepend error messages with the indicated message.
If it begins with a slash,
it is assumed to be the pathname of a file
containing a message (this is the recommended setting).
Otherwise, it is a literal message.
The error file might contain the name, email address, and/or phone number
of a local postmaster who could provide assistance
in to end users.
If the option is missing or null,
or if it names a file which does not exist or which is not readable,
no message is printed.
.ip f
Save
Unix-style
.q From
lines at the front of headers.
Normally they are assumed redundant
and discarded.
.ip F\fImode\fP
The file mode for queue files.
.ip g\fIn\fP
Set the default group id
for mailers to run in
to
.i n .
.ip h\fIN\fP
The maximum hop count.
Messages that have been processed more than
.i N
times are assumed to be in a loop and are rejected.
.ip H\fIfile\fP
Specify the help file
for SMTP.
.ip i
Ignore dots in incoming messages.
E 47
E 13
I 8
.ip I
D 47
This mailer will be speaking SMTP
to another
E 47
I 47
Insist that the BIND name server be running
to resolve host names.
If this is not set and the name server is not running,
the
.i /etc/hosts
file will be considered complete.
In general, you do want to set this option
if your
.i /etc/hosts
file does not include all hosts known to you
or if you are using the MX (mail forwarding) feature of the BIND name server.
The name server will still be consulted
even if this option is not set, but
E 47
.i sendmail
D 47
\*-
as such it can use special protocol features.
This option is not required
(i.e.,
if this option is omitted the transmission will still operate successfully,
although perhaps not as efficiently as possible).
E 47
I 47
will feel free to resort to reading
.i /etc/hosts
if the name server is not available.
Thus, you should
.i never
set this option if you do not run the name server.
.ip k\fIN\fP
The maximum number of open connections that will be cached at a time.
The default is one.
This delays closing the the current connection until
either this invocation of sendmail needs to connect to another host
or it terminates.
Setting it to zero defaults to the old behavior,
that is, connections are closed immediately.
.ip K\fItimeout\fP
The maximum amount of time a cached connection will be permitted to idle
without activity.
If this time is exceeded,
the connection is immediately closed.
This value should be small (on the order of ten minutes).
Before
.b sendmail
uses a cached connection,
it always sends a NOOP (no operation) command
to check the connection;
if this fails, it reopens the connection.
This keeps your end from failing if the other end times out.
The point of this option is to be a good network neighbor
and avoid using up excessive resources
on the other end.
The default is five minutes.
.ip L\fIn\fP
Set the default log level to
.i n .
.ip m
Send to me too,
even if I am in an alias expansion.
.ip M\fIx\|value\fP
Set the macro
.i x
to
.i value .
This is intended only for use from the command line.
.ip o
Assume that the headers may be in old format,
i.e.,
spaces delimit names.
This actually turns on
an adaptive algorithm:
if any recipient address contains a comma, parenthesis,
or angle bracket,
it will be assumed that commas already exist.
If this flag is not on,
only commas delimit names.
Headers are always output with commas between the names.
.ip P\fIpostmaster\fP
If set,
copies of error messages will be sent to the named
.i postmaster .
Since most errors are user problems,
this is probably not a good idea on large sites,
and arguably contains all sorts of privacy violations,
but it seems to be popular with certain operating systems vendors.
.ip q\fIfactor\fP
Use
.i factor
as the multiplier in the map function
to decide when to just queue up jobs rather than run them.
This value is divided by the difference between the current load average
and the load average limit
(\c
.b x
flag)
to determine the maximum message priority
that will be sent.
Defaults to 10000.
.ip Q\fIdir\fP
Use the named
.i dir
as the queue directory.
.ip r\fItime\fP
Timeout reads after
.i time
interval.
.ip s
Be super-safe when running things,
i.e.,
always instantiate the queue file,
even if you are going to attempt immediate delivery.
.i Sendmail
always instantiates the queue file
before returning control the the client
under any circumstances.
.ip S\fIfile\fP
Log statistics in the named
.i file .
.ip t\fIS,D\fP
Set the local time zone name to
.i S
for standard time and
.i D
for daylight time;
this is only used under version six.
.ip T\fItime\fP
Set the queue timeout to
.i time .
After this interval,
messages that have not been successfully sent
will be returned to the sender.
.ip u\fIn\fP
Set the default userid for mailers to
.i n .
Mailers without the
.i S
flag in the mailer definition
will run as this user.
.ip U\fIudbspec\fP
The user database specification.
.ip v
Run in verbose mode.
.ip w
Asserts that this domain does not have wildcard MX records
in the name server database.
These wildcards can
.q capture
names that are directed outward
and forward them back to your own site.
If there are no wildcards matching your domain,
this option will reduce name server load
and improve performance.
.ip x\fILA\fP
When the system load average exceeds
.i LA ,
just queue messages
(i.e., don't try to send them).
.ip X\fILA\fP
When the system load average exceeds
.i LA ,
refuse incoming SMTP connections.
.ip y\fIfact\fP
The indicated
.i fact or
is added to the priority (thus
.i lowering
the priority of the job)
for each recipient,
i.e., this value penalizes jobs with large numbers of recipients.
.ip Y
If set,
deliver each job that is run from the queue in a separate process.
Use this option if you are short of memory,
since the default tends to consume considerable amounts of memory
while the queue is being processed.
.ip z\fIfact\fP
The indicated
.i fact or
is multiplied by the message class
(determined by the Precedence: field in the user header
and the
.b P
lines in the configuration file)
and subtracted from the priority.
Thus, messages with a higher Priority: will be favored.
.ip Z\fIfact\fP
The
.i fact or
is added to the priority
every time a job is processed.
Thus,
each time a job is processed,
its priority will be decreased by the indicated value.
In most environments this should be positive,
since hosts that are down are all too often down for a long time.
.ip 8
Preserve eight bits of data in the body on input.
Normally the input is stripped to seven bits as per RFC822.
See also the
.b L
mailer flag.
.+c "MAILER FLAGS"
The following flags may be set in the mailer description.
.nr ii 4n
.ip A
This is an Arpanet-compatible mailer,
and all appropriate modes should be set.
E 47
E 8
.ip C
If mail is
.i received
from a mailer with this flag set,
any addresses in the header that do not have an at sign
(\c
.q @ )
after being rewritten by ruleset three
will have the
.q @domain
clause from the sender
tacked on.
This allows mail with headers of the form:
.(b
From: usera@hosta
To: userb@hostb, userc
.)b
to be rewritten as:
.(b
From: usera@hosta
To: userb@hostb, userc@hosta
.)b
automatically.
I 47
.ip D
This mailer wants a
.q Date:
header line.
.ip e
This mailer is expensive to connect to,
so try to avoid connecting normally;
any necessary connection will occur during a queue run.
E 47
I 27
.ip E
Escape lines beginning with
.q From
in the message with a `>' sign.
I 47
.ip f
The mailer wants a
.b \-f
.i from
flag,
but only if this is a network forward operation
(i.e.,
the mailer will give an error
if the executing user
does not have special permissions).
.ip F
This mailer wants a
.q From:
header line.
.ip h
Upper case should be preserved in host names
for this mailer.
.ip I
This mailer will be speaking SMTP
to another
.i sendmail
\*-
as such it can use special protocol features.
This option is not required
(i.e.,
if this option is omitted the transmission will still operate successfully,
although perhaps not as efficiently as possible).
.ip l
This mailer is local
(i.e.,
final delivery will be performed).
.ip L
Limit the line lengths as specified in RFC821.
This deprecated option should be replaced by the
.b L=
mail declaration.
For historic reasons, the
.b L
flag also sets the
.b 7
flag.
.ip m
This mailer can send to multiple users
on the same host
in one transaction.
When a
.b $u
macro occurs in the
.i argv
part of the mailer definition,
that field will be repeated as necessary
for all qualifying users.
.ip M
This mailer wants a
.q Message-Id:
header line.
.ip n
Do not insert a UNIX-style
.q From
line on the front of the message.
.ip p
Use the return-path in the SMTP
.q "MAIL FROM:"
command
rather than just the return address;
although this is required in RFC821,
many hosts do not process return paths properly.
.ip P
This mailer wants a
.q Return-Path:
line.
.ip r
Same as
.b f ,
but sends a
.b \-r
flag.
.ip s
Strip quote characters off of the address
before calling the mailer.
.ip S
Don't reset the userid
before calling the mailer.
This would be used in a secure environment
where
.i sendmail
ran as root.
This could be used to avoid forged addresses.
This flag is suppressed if given from an
.q unsafe
environment
(e.g, a user's mail.cf file).
.ip u
Upper case should be preserved in user names
for this mailer.
.ip U
This mailer wants Unix-style
.q From
lines with the ugly UUCP-style
.q "remote from <host>"
on the end.
.ip x
This mailer wants a
.q Full-Name:
header line.
.ip X
This mailer want to use the hidden dot algorithm
as specified in RFC821;
basically,
any line beginning with a dot
will have an extra dot prepended
(to be stripped at the other end).
This insures that lines in the message containing a dot
will not terminate the message prematurely.
.ip 7
Strip all output to seven bits.
This is the default if the
.b L
flag is set.
Note that setting this is not
sufficient to get full eight bit data passed through
.i sendmail ;
the
.b 8
option must also be set.
E 47
E 27
E 2
.+c "OTHER CONFIGURATION"
I 6
.rm $0
E 6
I 5
D 47
.nr ii 1i
E 47
I 47
.nr ii 1.2i
E 47
E 5
.pp
E 50
There are some configuration changes that can be made by
recompiling
.i sendmail .
D 5
Some of these are changes to compilation flags:
.nr ii 1i
E 5
I 5
D 38
These are located in three places:
D 25
.ip Makefile
Changes in the makefile are operating-system dependent.
These include information about what version of UNIX
you are running, etc.
.ip conf.h
E 25
I 25
.ip md/config.m4
These contain operating-system dependent descriptions.
They are interpolated into the Makefiles in the
.i src
and
.i aux
directories.
This includes information about what version of UNIX
you are running,
what libraries you have to include, etc.
E 38
I 38
D 47
These are located in two places:
E 47
I 47
D 50
These are located in three places:
.ip src/Makefile
Parameters that help define the compilation environment.
E 47
E 38
.ip src/conf.h
E 25
Configuration parameters that may be tweaked by the installer
are included in conf.h.
D 25
.ip conf.c
E 25
I 25
.ip src/conf.c
E 25
Some special routines and a few variables
may be defined in conf.c.
For the most part these are selected from the settings
in conf.h.
I 47
.uh "Parameters in src/Makefile"
E 50
I 50
This section describes what changes can be made
and what has to be modified to make them.
I 157
In most cases this should be unnecessary
unless you are porting
.i sendmail
to a new environment.
E 157
.sh 2 "Parameters in src/Makefile"
E 50
.pp
D 61
These parameters are not intended to describe site policy;
these should be defined in src/conf.h.
.ip DBM
If set,
the
.q DBM
package in UNIX is used
(see
.i dbm(3X)
in the UNIX Programmer's Manual).
If not set,
a much less efficient algorithm for processing aliases is used.
E 61
I 61
These parameters are intended to describe the compilation environment,
not site policy,
and should normally be defined in src/Makefile.
E 61
.ip NDBM
If set,
the new version of the DBM library
that allows multiple databases will be used.
D 61
.q DBM
must also be set.
E 61
I 61
If neither NDBM nor NEWDB are set,
a much less efficient method of alias lookup is used.
E 61
.ip NEWDB
If set, use the new database package from Berkeley (from 4.4BSD).
D 65
This package is substantially faster than DBM or NDBM.
D 61
If NEWDB and DBM are both set,
sendmail will read old DBM files,
E 61
I 61
If NEWDB and NDBM are both set,
sendmail will read DBM files,
E 61
but will create and use NEWDB files.
I 61
.ip YPCOMPAT
If set together with
.i both
NEWDB and NDBM,
.i sendmail
will create both DBM and NEWDB files if and only if
the file /var/yp/Makefile
exists and is readable.
This is intended for compatibility with Sun Microsystems'
.i mkalias
program used on YP masters.
E 61
.ip LOCKF
Use System V
.b lockf
E 65
I 65
This package is substantially faster than DBM or NDBM.
If NEWDB and NDBM are both set,
D 117
sendmail will read DBM files,
E 117
I 117
.i sendmail
will read DBM files,
E 117
but will create and use NEWDB files.
D 125
.ip YPCOMPAT
E 125
I 125
.ip NIS
Include support for NIS.
E 125
If set together with
.i both
NEWDB and NDBM,
.i sendmail
will create both DBM and NEWDB files if and only if
D 167
the file /var/yp/Makefile
exists and is readable.
E 167
I 167
an alias file includes the substring
.q /yp/
in the name.
E 167
This is intended for compatibility with Sun Microsystems'
.i mkalias
program used on YP masters.
I 100
D 125
.ip _AIX3
Compile for IBM AIX 3.x.
This has only been tested on 3.2.3.
E 125
E 100
I 66
D 157
.ip SYSTEM5
Set all of the compilation parameters appropriate for System V.
E 66
.ip LOCKF
Use System V
.b lockf
E 65
instead of Berkeley
.b flock .
D 62
Due to brain damage in
E 62
I 62
Due to the highly unusual semantics of locks
across forks in
E 62
.b lockf ,
I 150
this should never be used unless absolutely necessary.
E 150
D 150
this should never be used unless absolutely necessary.
E 150
I 66
Set by default if
SYSTEM5 is set.
E 66
.ip SYS5TZ
Use System V
time zone semantics.
D 66
.ip SYSTEM5
Set all of the compilation parameters appropriate for System V.
E 66
I 66
.ip HASINITGROUPS
Set this if your system has the
.i initgroups()
call
(if you have multiple group support).
This is the default if SYSTEM5 is
.i not
defined or if you are on HPUX.
.ip HASUNAME
Set this if you have the
D 67
.i uname()
E 67
I 67
.i uname (2)
E 67
system call (or corresponding library routine).
Set by default if
SYSTEM5
is set.
I 67
.ip HASSTATFS
Set this if you have the
.i statfs (2)
system call.
This will allow you to give a temporary failure
message to incoming SMTP email
when you are low on disk space.
D 111
It is set by default on 4.4 BSD and OSF/1 systems.
E 111
I 111
It is set by default on 4.4BSD and OSF/1 systems.
E 111
I 70
.ip HASUSTAT
Set if you have the
.i ustat (2)
D 136
system call.
This is an alternative implementation of disk space control.
You should only set one of HASSTATFS or HASUSTAT;
E 136
I 136
system call.
This is an alternative implementation of disk space control.
You should only set one of HASSTATFS or HASUSTAT;
E 136
the first is preferred.
E 157
I 157
.ip NISPLUS
Compile in support for NIS+.
.ip NETINFO
Compile in support for NetInfo (NeXT stations).
.ip HESIOD
Compile in support for Hesiod.
E 157
.ip _PATH_SENDMAILCF
The pathname of the sendmail.cf file.
D 121
.ip _PATH_SENDMAILFC
The pathname of the sendmail.fc file.
E 121
.ip _PATH_SENDMAILPID
The pathname of the sendmail.pid file.
E 70
E 67
E 66
D 157
.ip LA_TYPE
The load average type.
Details are described below.
I 53
.lp
D 139
The are four built-in ways of computing the load average.
E 139
I 139
The are several built-in ways of computing the load average.
E 139
.i Sendmail
tries to auto-configure them based on imperfect guesses;
you can select one using the
.i cc
option
.b \-DLA_TYPE= \c
.i type ,
where
.i type
is:
.ip LA_INT
The kernel stores the load average in the kernel as an array of long integers.
The actual values are scaled by a factor FSCALE
(default 256).
I 128
.ip LA_SHORT
The kernel stores the load average in the kernel as an array of short integers.
The actual values are scaled by a factor FSCALE
(default 256).
E 128
.ip LA_FLOAT
The kernel stores the load average in the kernel as an array of
double precision floats.
I 139
.ip LA_MACH
Use MACH-style load averages.
E 139
.ip LA_SUBR
Call the
.i getloadavg
routine to get the load average as an array of doubles.
.ip LA_ZERO
Always return zero as the load average.
This is the fallback case.
.lp
If type
D 128
.sm LA_INT
E 128
I 128
.sm LA_INT ,
.sm LA_SHORT ,
E 128
or
.sm LA_FLOAT
is specified,
you may also need to specify
.sm _PATH_UNIX
(the path to your system binary)
and
.sm LA_AVENRUN
(the name of the variable containing the load average in the kernel;
usually
.q _avenrun
or
.q avenrun ).
E 157
I 125
.pp
There are also several compilation flags to indicate the environment
such as
.q _AIX3
and
.q _SCO_unix_ .
See the READ_ME
file for the latest scoop on these flags.
E 125
E 53
E 47
D 25
.uh "Changes to the Makefile"
E 25
I 25
D 38
.uh "Parameters in md/config.m4"
E 25
.pp
D 25
The following compilation flags may be defined in the makefile
E 25
I 25
The following compilation flags may be defined in the
.i m4CONFIG
macro in
.i md/config.m4
E 25
to define the environment in which you are operating.
E 5
.ip V6
If set,
this will compile a version 6 system,
with 8-bit user id's,
single character tty id's,
etc.
D 5
If not set,
E 5
I 5
.ip VMUNIX
If set,
you will be assumed to have a Berkeley 4BSD or 4.1BSD,
including the
D 19
.i vfork (2)
E 19
I 19
.i vfork \|(2)
E 19
system call,
special types defined in <sys/types.h>
(e.g, u_char),
etc.
D 19
.ip NVMUNIX
This flag indicates a new (4.2BSD) version of VMUNIX.
Included are the new communication primitives,
file locking,
etc.
If this is set,
VMUNIX must also be set.
E 19
.lp
If none of these flags are set,
E 5
a version 7 system is assumed.
I 5
D 25
.uh "Parameters in conf.h"
E 25
.pp
I 25
You will also have to specify what libraries to link with
.i sendmail
in the
.i m4LIBS
macro.
Most notably, you will have to include
.B \-ljobs
if you are running a 4.1BSD system.
E 38
D 50
.uh "Parameters in src/conf.h"
E 50
I 50
.sh 2 "Parameters in src/conf.h"
E 50
.pp
E 25
Parameters and compilation options
are defined in conf.h.
Most of these need not normally be tweaked;
common parameters are all in sendmail.cf.
However, the sizes of certain primitive vectors, etc.,
are included in this file.
The numbers following the parameters
are their default value.
I 38
.nr ii 1.2i
.ip "MAXLINE [1024]"
The maximum line length of any input line.
If message lines exceed this length
they will still be processed correctly;
however, header lines,
configuration file lines,
alias lines,
etc.,
must fit within this limit.
.ip "MAXNAME [256]"
The maximum length of any name,
such as a host or a user name.
D 45
.ip "MAXFIELD [2500]"
E 45
I 45
D 50
.ip "MAXFIELD [4096]"
E 45
The maximum total length of any header field,
including continuation lines.
E 50
.ip "MAXPV [40]"
The maximum number of parameters to any mailer.
This limits the number of recipients that may be passed in one transaction.
D 50
.ip "MAXHOP [17]"
When a message has been processed more than this number of times,
sendmail rejects the message
on the assumption that there has been an aliasing loop.
This can be determined from the
.b \-h
flag
or by counting the number of trace fields
(i.e,
.q Received:
lines)
in the message header.
I 45
This can be reset with the
.b h
option.
E 50
I 50
It can be set to any arbitrary number above about 10,
since
.i sendmail
will break up a delivery into smaller batches as needed.
A higher number may reduce load on your system, however.
E 50
E 45
.ip "MAXATOM [100]"
The maximum number of atoms
(tokens)
in a single address.
For example,
the address
D 47
.q "eric@Berkeley"
is three atoms.
E 47
I 47
.q "eric@CS.Berkeley.EDU"
is seven atoms.
E 47
.ip "MAXMAILERS [25]"
The maximum number of mailers that may be defined
in the configuration file.
D 50
.ip "MAXRWSETS [30]"
E 50
I 50
D 170
.ip "MAXRWSETS [100]"
E 170
I 170
.ip "MAXRWSETS [200]"
E 170
E 50
The maximum number of rewriting sets
that may be defined.
I 170
The first half of these are reserved for numeric specification
(e.g., ``S92''),
while the upper half are reserved for auto-numbering
(e.g., ``Sfoo'').
Thus, with a value of 200 an attempt to use ``S99'' will succeed,
but ``S100'' will fail.
E 170
.ip "MAXPRIORITIES [25]"
The maximum number of values for the
.q Precedence:
field that may be defined
(using the
.b P
line in sendmail.cf).
D 70
.ip "MAXTRUST [30]"
The maximum number of trusted users that may be defined
(using the
.b T
line in sendmail.cf).
E 70
.ip "MAXUSERENVIRON [40]"
The maximum number of items in the user environment
that will be passed to subordinate mailers.
D 50
.ip "QUEUESIZE [600]"
E 50
I 50
D 168
.ip "QUEUESIZE [1000]"
E 50
The maximum number of entries that will be processed
in a single queue run.
E 168
I 45
D 50
.ip "MAXMXHOSTS [10]"
E 50
I 50
.ip "MAXMXHOSTS [20]"
E 50
The maximum number of MX records we will accept for any single host.
I 68
D 123
.ip "MAXIPADDR [16]"
The maximum number of numeric IP addresses we will accept
for this host.
This does not limit the number the number of addresses for other hosts.
E 123
E 68
E 45
.lp
A number of other compilation options exist.
These specify whether or not specific code should be compiled in.
I 157
Ones marked with \(dg
are 0/1 valued.
E 157
D 47
.nr ii 1i
.ip DBM
If set,
the
.q DBM
package in UNIX is used
(see
.i dbm(3X)
in [UNIX80]).
If not set,
a much less efficient algorithm for processing aliases is used.
.ip NDBM
If set,
the new version of the DBM library
that allows multiple databases will be used.
.q DBM
must also be set.
I 45
.ip NEWDB
If set, use the new database package from Berkeley (from 4.4BSD).
This package is substantially faster than DBM or NDBM.
If NEWDB and DBM are both set,
sendmail will read old DBM files,
but will create and use NEWDB files.
E 47
I 47
.nr ii 1.2i
E 47
E 45
.ip DEBUG
If set, debugging information is compiled in.
To actually get the debugging output,
the
I 41
.b \-d
flag must be used.
I 50
.b "WE STRONGLY RECOMMEND THAT THIS BE LEFT ON."
Some people, believing that it was a security hole
(it was, once)
have turned it off and thus crippled debuggers.
D 81
.ip DAEMON
E 81
I 81
.ip NETINET
E 81
If set,
D 81
code to run a daemon is compiled in.
This code is for 4.2 or 4.3BSD.
E 81
I 81
support for Internet protocol networking is compiled in.
Previous versions of
D 117
.b sendmail
E 117
I 117
.i sendmail
E 117
referred to this as
.sm DAEMON ;
this old usage is now incorrect.
.ip NETISO
If set,
D 92
support for ISO protocol networking is compiled in.
E 92
I 92
support for ISO protocol networking is compiled in
(it may be appropriate to #define this in the Makefile instead of conf.h).
E 92
E 81
E 50
.ip LOG
If set,
the
.i syslog
routine in use at some sites is used.
This makes an informational log record
for each message processed,
and makes a higher priority log record
for internal system errors.
I 157
.b "STRONGLY RECOMMENDED"
\(em if you want no logging, turn it off in the configuration file.
E 157
I 50
.ip MATCHGECOS
Compile in the code to do ``fuzzy matching'' on the GECOS field
in /etc/passwd.
D 157
This also requires that option G be turned on.
.ip NAMED_BIND
E 157
I 157
This also requires that the
.b MatchGECOS
option be turned on.
.ip NAMED_BIND\(dg
E 157
Compile in code to use the
Berkeley Internet Name Domain (BIND) server
to resolve TCP/IP host names.
.ip NOTUNIX
If you are using a non-UNIX mail format,
you can set this flag to turn off special processing
of UNIX-style
.q "From "
lines.
E 50
E 41
D 41
.b \-d
D 39
flag must be used.
.ip LOG
If set,
the
.i syslog
routine in use at some sites is used.
This makes an informational log record
for each message processed,
and makes a higher priority log record
for internal system errors.
E 39
I 39
flag must be used.
.ip LOG
If set,
the
.i syslog
routine in use at some sites is used.
This makes an informational log record
for each message processed,
and makes a higher priority log record
for internal system errors.
E 41
E 39
.ip QUEUE
This flag should be set to compile in the queueing code.
If this is not set,
mailers must accept the mail immediately
or it will be returned to the sender.
I 50
.ip SETPROCTITLE
If defined,
.i sendmail
will change its
.i argv
array to indicate its current status.
This can be used in conjunction with the
.i ps
command to find out just what it's up to.
E 50
.ip SMTP
If set,
the code to handle user and server SMTP will be compiled in.
D 73
This is only necessary if your machine has some mailer
D 50
that speaks SMTP.
.ip DAEMON
If set,
code to run a daemon is compiled in.
This code is for 4.2 or 4.3BSD.
E 50
I 50
that speaks SMTP
(this means most machines everywhere).
E 50
.ip UGLYUUCP
If you have a UUCP host adjacent to you which is not running
a reasonable version of
.i rmail ,
you will have to set this flag to include the
.q "remote from sysname"
info on the from line.
Otherwise, UUCP gets confused about where the mail came from.
D 50
.ip NOTUNIX
If you are using a non-UNIX mail format,
you can set this flag to turn off special processing
of UNIX-style
.q "From "
lines.
.ip NAMED_BIND
D 47
Compile in code to use the Berkeley Internet Name Domain (BIND) server
E 47
I 47
Compile in code to use the
Berkeley Internet Name Domain (BIND) server
E 47
to resolve TCP/IP host names.
.ip SETPROCTITLE
If defined,
.i sendmail
will change its
.i argv
array to indicate its current status.
This can be used in conjunction with the
.i ps
D 40
command to find out just what it's up to.
E 40
I 40
command to find out just what it's up to.
E 50
I 45
D 47
.ip LOCKF
Use System V
.b lockf
instead of Berkeley
.b flock .
Due to brain damage in
.b lockf ,
this should never be used unless absolutely necessary.
E 47
.ip USERDB
D 47
Include the Berkeley user information database package.
E 47
I 47
Include the
.b experimental
E 73
I 73
This is only necessary if your machine has some mailer
that speaks SMTP
(this means most machines everywhere).
.ip UGLYUUCP
If you have a UUCP host adjacent to you which is not running
a reasonable version of
.i rmail ,
you will have to set this flag to include the
.q "remote from sysname"
info on the from line.
Otherwise, UUCP gets confused about where the mail came from.
.ip USERDB
Include the
.b experimental
E 73
Berkeley user information database package.
E 47
This adds a new level of local name expansion
between aliasing and forwarding.
It also uses the NEWDB package.
I 47
This may change in future releases.
I 92
D 157
.ip IDENTPROTO
E 157
I 157
.lp
The following options are normally turned on
in per-operating-system clauses in conf.h.
.ip IDENTPROTO\(dg
E 157
Compile in the IDENT protocol as defined in RFC 1413.
This defaults on for all systems except Ultrix,
which apparently has the interesting
.q feature
that when it receives a
.q "host unreachable"
message it closes all open connections to that host.
Since some firewall gateways send this error code
when you access an unauthorized port (such as 113, used by IDENT),
Ultrix cannot receive email from such hosts.
I 157
.ip SYSTEM5
Set all of the compilation parameters appropriate for System V.
.ip LOCKF
Use System V
.b lockf
instead of Berkeley
.b flock .
Due to the highly unusual semantics of locks
across forks in
.b lockf ,
this should never be used unless absolutely necessary.
Set by default if
SYSTEM5 is set.
.ip SYS5TZ
Use System V
time zone semantics.
.ip HASINITGROUPS
Set this if your system has the
.i initgroups()
call
(if you have multiple group support).
This is the default if SYSTEM5 is
.i not
defined or if you are on HPUX.
.ip HASUNAME
Set this if you have the
.i uname (2)
system call (or corresponding library routine).
Set by default if
SYSTEM5
is set.
.ip HASSTATFS
Set this if you have the
.i statfs (2)
system call.
This will allow you to give a temporary failure
message to incoming SMTP email
when you are low on disk space.
It is set by default on 4.4BSD and OSF/1 systems.
.ip HASUSTAT
Set if you have the
.i ustat (2)
system call.
This is an alternative implementation of disk space control.
You should only set one of HASSTATFS or HASUSTAT;
the first is preferred.
.ip LA_TYPE
The load average type.
Details are described below.
.lp
The are several built-in ways of computing the load average.
.i Sendmail
tries to auto-configure them based on imperfect guesses;
you can select one using the
.i cc
option
.b \-DLA_TYPE= \c
.i type ,
where
.i type
is:
.ip LA_INT
The kernel stores the load average in the kernel as an array of long integers.
The actual values are scaled by a factor FSCALE
(default 256).
.ip LA_SHORT
The kernel stores the load average in the kernel as an array of short integers.
The actual values are scaled by a factor FSCALE
(default 256).
.ip LA_FLOAT
The kernel stores the load average in the kernel as an array of
double precision floats.
.ip LA_MACH
Use MACH-style load averages.
.ip LA_SUBR
Call the
.i getloadavg
routine to get the load average as an array of doubles.
.ip LA_ZERO
Always return zero as the load average.
This is the fallback case.
.lp
If type
.sm LA_INT ,
.sm LA_SHORT ,
or
.sm LA_FLOAT
is specified,
you may also need to specify
.sm _PATH_UNIX
(the path to your system binary)
and
.sm LA_AVENRUN
(the name of the variable containing the load average in the kernel;
usually
.q _avenrun
or
.q avenrun ).
E 157
E 92
E 47
E 45
E 40
D 43
.ip NO_WILDCARD_MX
Should be set if there are no wildcard MX nameserver records
in the local domain.
E 38
I 19
D 38
.nr ii 1.2i
E 19
D 30
.ip "MAXLINE [256]"
E 30
I 30
.ip "MAXLINE [1024]"
E 30
The maximum line length of any input line.
If message lines exceed this length
they will still be processed correctly;
however, header lines,
configuration file lines,
alias lines,
etc.,
must fit within this limit.
D 30
.ip "MAXNAME [128]"
E 30
I 30
.ip "MAXNAME [256]"
E 30
The maximum length of any name,
such as a host or a user name.
.ip "MAXFIELD [2500]"
The maximum total length of any header field,
including continuation lines.
.ip "MAXPV [40]"
The maximum number of parameters to any mailer.
This limits the number of recipients that may be passed in one transaction.
D 30
.ip "MAXHOP [30]"
E 30
I 30
.ip "MAXHOP [17]"
E 30
When a message has been processed more than this number of times,
sendmail rejects the message
on the assumption that there has been an aliasing loop.
This can be determined from the
.b \-h
flag
D 6
or by counting the number of trace lines
E 6
I 6
or by counting the number of trace fields
E 6
(i.e,
.q Received:
lines)
in the message header.
.ip "MAXATOM [100]"
The maximum number of atoms
(tokens)
in a single address.
For example,
the address
.q "eric@Berkeley"
is three atoms.
D 34
.ip "MAXMAILERS [25]"
The maximum number of mailers that may be defined
in the configuration file.
.ip "MAXRWSETS [30]"
The maximum number of rewriting sets
that may be defined.
.ip "MAXPRIORITIES [25]"
The maximum number of values for the
.q Precedence:
field that may be defined
(using the
.b P
line in sendmail.cf).
.ip "MAXTRUST [30]"
The maximum number of trusted users that may be defined
(using the
.b T
line in sendmail.cf).
I 30
.ip "MAXUSERENVIRON [40]"
The maximum number of items in the user environment
that will be passed to subordinate mailers.
I 31
.ip "QUEUESIZE [600]"
The maximum number of entries that will be processed
in a single queue run.
E 31
E 30
.lp
A number of other compilation options exist.
These specify whether or not specific code should be compiled in.
I 19
.nr ii 1i
E 19
E 5
.ip DBM
If set,
the
E 34
I 34
.ip "MAXMAILERS [25]"
The maximum number of mailers that may be defined
in the configuration file.
.ip "MAXRWSETS [30]"
The maximum number of rewriting sets
that may be defined.
.ip "MAXPRIORITIES [25]"
The maximum number of values for the
.q Precedence:
field that may be defined
(using the
.b P
line in sendmail.cf).
.ip "MAXTRUST [30]"
The maximum number of trusted users that may be defined
(using the
.b T
line in sendmail.cf).
.ip "MAXUSERENVIRON [40]"
The maximum number of items in the user environment
that will be passed to subordinate mailers.
.ip "QUEUESIZE [600]"
The maximum number of entries that will be processed
in a single queue run.
.lp
A number of other compilation options exist.
These specify whether or not specific code should be compiled in.
.nr ii 1i
.ip DBM
If set,
the
E 34
.q DBM
package in UNIX is used
D 31
(see DBM(3X) in [UNIX80]).
E 31
I 31
(see
.i dbm(3X)
in [UNIX80]).
E 31
If not set,
a much less efficient algorithm for processing aliases is used.
I 31
.ip NDBM
If set,
the new version of the DBM library
that allows multiple databases will be used.
.q DBM
must also be set.
E 31
D 5
.ip VFORK
Set if your system has the experimental
.i vfork
system call.
See vfork(2) in [UNIX80].
If not set,
the regular
.i fork
system call is used.
This option improves performance.
E 5
.ip DEBUG
If set, debugging information is compiled in.
To actually get the debugging output,
the
.b \-d
flag must be used.
.ip LOG
If set,
the
.i syslog
I 30
routine in use at some sites is used.
This makes an informational log record
for each message processed,
and makes a higher priority log record
for internal system errors.
.ip QUEUE
This flag should be set to compile in the queueing code.
If this is not set,
mailers must accept the mail immediately
or it will be returned to the sender.
.ip SMTP
If set,
the code to handle user and server SMTP will be compiled in.
This is only necessary if your machine has some mailer
that speaks SMTP.
.ip DAEMON
If set,
code to run a daemon is compiled in.
D 31
This code is for 4.2BSD
if the
NVMUNIX
flag is specified;
otherwise,
E 30
D 30
routine in use at some sites is used.
This makes an informational log record
for each message processed,
and makes a higher priority log record
for internal system errors.
.ip QUEUE
This flag should be set to compile in the queueing code.
If this is not set,
mailers must accept the mail immediately
or it will be returned to the sender.
.ip SMTP
If set,
the code to handle user and server SMTP will be compiled in.
This is only necessary if your machine has some mailer
that speaks SMTP.
I 5
.ip DAEMON
If set,
code to run a daemon is compiled in.
This code is for 4.2BSD
if the
NVMUNIX
flag is specified;
otherwise,
E 30
4.1a BSD code is used.
Beware however
that there are bugs in the 4.1a code
that make it impossible for
.b sendmail
to work correctly
under heavy load.
E 31
I 31
This code is for 4.2 or 4.3BSD.
E 31
E 5
.ip UGLYUUCP
If you have a UUCP host adjacent to you which is not running
D 36
a reasonable version of
.i rmail ,
E 36
I 36
a reasonable version of
.i rmail ,
E 36
you will have to set this flag to include the
.q "remote from sysname"
info on the from line.
Otherwise, UUCP gets confused about where the mail came from.
D 8
.ip PARANOID
There are places where
.i sendmail
may opt for a more secure,
but probably less convenient environment.
For example,
if this flag is set
it is not possible to specify a program as an address directly;
this can only be done with an alias.
E 8
.ip NOTUNIX
If you are using a non-UNIX mail format,
you can set this flag to turn off special processing
of UNIX-style
.q "From "
lines.
I 37
.ip NAMED_BIND
Compile in code to use the Berkeley Internet Name Domain (BIND) server
to resolve TCP/IP host names.
E 38
I 38
If set, this will enable the use of ANY query types, resulting
in better performance.
Unfortunately, wildcard MX records in the local domain will mess
this up, hence the need for this compilation option.
E 43
E 38
E 37
D 5
.nr ii 5n
E 5
I 5
D 25
.uh "Configuration in conf.c"
E 25
I 25
D 50
.uh "Configuration in src/conf.c"
E 50
I 50
.sh 2 "Configuration in src/conf.c"
E 50
E 25
E 5
.pp
I 53
The following changes can be made in conf.c.
.sh 3 "Built-in Header Semantics"
.pp
E 53
Not all header semantics are defined in the configuration file.
Header lines that should only be included by certain mailers
(as well as other more obscure semantics)
must be specified in the
.i HdrInfo
table in
.i conf.c .
This table contains the header name
D 5
(which should be in all lower case),
a set of header control flags (described below),
and a set of mailer flags,
used by some of the header flags.
The header flags are:
.nr ii \w'H_ACHECK  'u
.ip H_CHECK
Check the flags for the receiving mailer
against the third field in the
.i HdrInfo
entry.
If the mailer has any of those bits set,
send this field;
otherwise, do not send this field to that mailer.
If the field was in the message originally, however,
it will always be sent
(i.e., this only applies to headers being added by
.i sendmail ).
E 5
I 5
(which should be in all lower case)
and a set of header control flags (described below),
The flags are:
E 5
.ip H_ACHECK
D 5
Same as H_CHECK,
E 5
I 5
Normally when the check is made to see if a header line is compatible
with a mailer,
.i sendmail
will not delete an existing line.
If this flag is set,
.i sendmail
will delete
even existing header lines.
E 5
D 6
except that it even applies to headers that were in the
original message.
E 6
That is,
if this bit is set and the mailer does not have flag bits set
D 5
that intersect with the third field in this
.i HdrInfo
entry,
E 5
I 5
that intersect with the required mailer flags
in the header definition in
sendmail.cf,
E 5
the header line is
.i always
deleted.
D 35
.ip H_EOH
If this header field is set,
treat it like a blank line,
i.e.,
it will signal the end of the header
and the beginning of the message text.
.ip H_FORCE
Add this header entry
even if one existed in the message before.
If a header entry does not have this bit set,
.i sendmail
will not add another header line if a header line
of this name already existed.
This would normally be used to stamp the message
by everyone who handled it.
.ip H_TRACE
If set,
this is a timestamp
(trace)
field.
If the number of trace fields in a message
exceeds a preset amount
the message is returned
on the assumption that it has an aliasing loop.
.ip H_RCPT
If set,
this field contains recipient addresses.
This is used by the
.b \-t
flag to determine who to send to
when it is collecting recipients from the message.
.ip H_FROM
This flag indicates that this field
specifies a sender.
The order of these fields in the
.i HdrInfo
table specifies
.i sendmail's
preference
for which field to return error messages to.
.nr ii 5n
.lp
Let's look at a sample
.i HdrInfo
specification:
.(b
D 19
.sz -2
E 19
D 3
.ta 4n +\w'"return-receipt-to",  'u +\w'H_FROM|H_ACHECK,  'u
E 3
I 3
.ta 4n +\w'"return-receipt-to",  'u
E 3
struct hdrinfo	HdrInfo[] =
D 30
{
E 30
I 30
\&{
E 30
D 3
		/* date information */
	"date",	H_CHECK,	M_NEEDDATE,
	"received-date",	H_CHECK,	M_LOCAL,
E 3
D 6
		/* originator fields, most to least significant  */
E 6
I 6
	     /* originator fields, most to least significant  */
E 6
D 3
	"resent-sender",	H_FROM,	0,
	"resent-from",	H_FROM,	0,
	"sender",	H_FROM,	0,
	"from",	H_FROM|H_CHECK,	M_NEEDFROM,
	"full-name",	H_ACHECK,	M_FULLNAME,
	"received-from",	H_CHECK,	M_LOCAL,
E 3
I 3
	"resent-sender",	H_FROM,
	"resent-from",	H_FROM,
	"sender",	H_FROM,
	"from",	H_FROM,
	"full-name",	H_ACHECK,
E 3
D 6
		/* destination fields */
E 6
I 6
	     /* destination fields */
E 6
D 3
	"to",	H_RCPT,	0,
	"resent-to",	H_RCPT,	0,
	"cc",	H_RCPT,	0,
E 3
I 3
	"to",	H_RCPT,
	"resent-to",	H_RCPT,
	"cc",	H_RCPT,
E 35
I 35
.ip H_EOH
If this header field is set,
treat it like a blank line,
i.e.,
it will signal the end of the header
and the beginning of the message text.
.ip H_FORCE
Add this header entry
even if one existed in the message before.
If a header entry does not have this bit set,
.i sendmail
will not add another header line if a header line
of this name already existed.
This would normally be used to stamp the message
by everyone who handled it.
.ip H_TRACE
If set,
this is a timestamp
(trace)
field.
If the number of trace fields in a message
exceeds a preset amount
the message is returned
on the assumption that it has an aliasing loop.
.ip H_RCPT
If set,
this field contains recipient addresses.
This is used by the
.b \-t
flag to determine who to send to
when it is collecting recipients from the message.
.ip H_FROM
This flag indicates that this field
specifies a sender.
The order of these fields in the
.i HdrInfo
table specifies
D 117
.i sendmail's
E 117
I 117
.i sendmail 's
E 117
preference
D 45
for which field to return error messages to.
.nr ii 5n
.lp
Let's look at a sample
.i HdrInfo
specification:
.(b
.ta 4n +\w'"return-receipt-to",  'u
struct hdrinfo	HdrInfo[] =
\&{
	     /* originator fields, most to least significant  */
	"resent-sender",	H_FROM,
	"resent-from",	H_FROM,
	"sender",	H_FROM,
	"from",	H_FROM,
	"full-name",	H_ACHECK,
	     /* destination fields */
	"to",	H_RCPT,
	"resent-to",	H_RCPT,
	"cc",	H_RCPT,
E 35
E 3
D 6
		/* message identification and control */
E 6
I 6
	     /* message identification and control */
E 6
D 3
	"message-id",	0,	0,
	"message",	H_EOH,	0,
	"text",	H_EOH,	0,
E 3
I 3
	"message",	H_EOH,
	"text",	H_EOH,
E 3
D 6
		/* trace fields */
E 6
I 6
	     /* trace fields */
E 6
D 3
	"received",	H_TRACE|H_FORCE,	0,
E 3
I 3
	"received",	H_TRACE|H_FORCE,
E 3

D 3
	NULL,	0,	0,
E 3
I 3
	NULL,	0,
E 3
};
D 19
.sz
E 19
.)b
D 3
This specification says that the
.q Date: ,
.q From: ,
.q Message-Id: ,
.q Received-Date: ,
.q Full-Name: ,
and
.q Received-From:
must be requested by the mailer to be inserted.
However,
if they were in the message as received by
.i sendmail
they will be propagated
with the exception of the
.q Full-Name:
field.
E 3
I 3
This structure indicates that the
E 3
.q To: ,
.q Resent-To: ,
and
.q Cc:
I 3
fields
E 3
all specify recipient addresses.
I 3
Any
.q Full-Name:
field will be deleted unless the required mailer flag
(indicated in the configuration file)
is specified.
E 3
The
.q Message:
E 45
I 45
for which field to return error messages to.
I 157
.ip H_RECEIPTTO
This header has return-receipt information.
.ip H_ERRORSTO
Addresses in this header should receive error messages.
.ip H_CTE
This header is a Content-Transfer-Encoding header.
.ip H_CTYPE
This header is a Content-Type header.
.ip H_STRIPVAL
Strip the value from the header (for Bcc:).
E 157
.nr ii 5n
.lp
Let's look at a sample
.i HdrInfo
specification:
.(b
.ta 4n +\w'"return-receipt-to",  'u
struct hdrinfo	HdrInfo[] =
\&{
	     /* originator fields, most to least significant  */
	"resent-sender",	H_FROM,
	"resent-from",	H_FROM,
	"sender",	H_FROM,
	"from",	H_FROM,
	"full-name",	H_ACHECK,
I 157
	"return-receipt-to",	H_FROM\^|\^H_RECEIPTTO,
	"errors-to",	H_FROM\^|\^H_ERRORSTO,
E 157
	     /* destination fields */
	"to",	H_RCPT,
	"resent-to",	H_RCPT,
	"cc",	H_RCPT,
I 157
	"bcc",	H_RCPT\^|\^H_STRIPVAL,
E 157
	     /* message identification and control */
	"message",	H_EOH,
	"text",	H_EOH,
	     /* trace fields */
D 157
	"received",	H_TRACE|H_FORCE,
E 157
I 157
	"received",	H_TRACE\^|\^H_FORCE,
	     /* miscellaneous fields */
	"content-transfer-encoding",	H_CTE,
	"content-type",	H_CTYPE,
E 157

	NULL,	0,
};
.)b
This structure indicates that the
.q To: ,
.q Resent-To: ,
E 45
and
I 45
.q Cc:
fields
all specify recipient addresses.
Any
.q Full-Name:
field will be deleted unless the required mailer flag
(indicated in the configuration file)
is specified.
The
.q Message:
and
E 45
.q Text:
fields will terminate the header;
D 47
these are specified in new protocols
[NBS80]
or used by random dissenters around the network world.
E 47
I 47
these are used by random dissenters around the network world.
E 47
The
.q Received:
field will always be added,
and can be used to trace messages.
D 3
The
other fields
field are used internally,
although no cliched special processing occurs.
E 3
.pp
There are a number of important points here.
First,
header fields are not added automatically just because they are in the
.i HdrInfo
structure;
they must be specified in the configuration file
in order to be added to the message.
Any header fields mentioned in the configuration file but not
mentioned in the
.i HdrInfo
structure have default processing performed;
that is,
they are added unless they were in the message already.
Second,
the
.i HdrInfo
structure only specifies cliched processing;
certain headers are processed specially by ad hoc code
regardless of the status specified in
.i HdrInfo .
For example,
the
.q Sender:
and
.q From:
fields are always scanned on ARPANET mail
D 65
to determine the sender;
E 65
I 65
to determine the sender\**;
.(f
\**Actually, this is no longer true in SMTP;
this information is contained in the envelope.
The older ARPANET protocols did not completely distinguish
envelope from header.
.)f
E 65
this is used to perform the
.q "return to sender"
function.
The
.q "From:"
D 72
and
.q "Full-Name:"
fields are used to determine the full name of the sender
if possible;
this is stored in the macro
.b $x
and used in a number of ways.
I 53
D 70
.sh 3 "SMTP Reply Codes"
E 53
.pp
The file
.i conf.c
D 65
also contains the specification of ARPANET reply codes.
E 65
I 65
also contains the specification of Internet reply codes\**.
.(f
\**Called Arpanet in the source code
for historic reasons.
.)f
E 65
D 6
There are six classifications these fall into:
E 6
I 6
There are four classifications these fall into:
E 6
.(b
D 19
.sz -2
E 19
I 19
.sz -1
E 19
.ta \w'char  'u +\w'Arpa_TUsrerr[] =  'u +\w'"888";  'u
char	Arpa_Info[] =	"050";	/* arbitrary info */
char	Arpa_TSyserr[] =	"455";	/* some (transient) system error */
D 30
char	Arpa_PSyserr[] =	"554";	/* some (transient) system error */
E 30
I 30
char	Arpa_PSyserr[] =	"554";	/* some (permanent) system error */
E 30
char	Arpa_Usrerr[] =	"554";	/* some (fatal) user error */
.sz
.)b
The class
.i Arpa_Info
I 25
is for any information that is not required by the protocol,
such as forwarding information.
.i Arpa_TSyserr
and
.i Arpa_PSyserr
is printed by the
.i syserr
routine.
TSyserr
is printed out for transient errors,
E 25
D 25
is for any information that is not required by the protocol,
such as forwarding information.
.i Arpa_TSyserr
and
.i Arpa_PSyserr
is printed by the
.i syserr
routine.
TSyserr
is printed out for transient errors,
E 25
D 30
whereas PSyserr
is printed for permanent errors;
the distinction is made based on the value of
E 30
I 30
that is,
errors that are likely to go away without explicit action
on the part of a systems administrator.
PSyserr
is printed for permanent errors.
The distinction is made based on the value of
E 30
.i errno .
Finally,
D 19
.i Arpa_Usrerr
is the result of a user error
and is generated by the
.i usrerr
routine;
these are generated when the user has specified something wrong,
and hence the error is permanent,
i.e.,
it will not work simply by resubmitting the request.
.pp
D 6
If it is necessary to restrict mail through a gateway,
E 6
I 6
If it is necessary to restrict mail through a relay,
E 6
the
.i checkcompat
routine can be modified.
This routine is called for every recipient address.
It can return
.b TRUE
to indicate that the address is acceptable
and mail processing will continue,
or it can return
.b FALSE
to reject the recipient.
If it returns false,
it is up to
.i checkcompat
to print an error message
(using
.i usrerr )
saying why the message is rejected.
For example,
.i checkcompat
E 19
I 19
.i Arpa_Usrerr
is the result of a user error
and is generated by the
.i usrerr
routine;
these are generated when the user has specified something wrong,
and hence the error is permanent,
i.e.,
it will not work simply by resubmitting the request.
E 70
I 53
.sh 3 "Restricting Use of Email"
E 53
.pp
If it is necessary to restrict mail through a relay,
the
.i checkcompat
routine can be modified.
This routine is called for every recipient address.
D 57
It can return
.b TRUE
to indicate that the address is acceptable
and mail processing will continue,
or it can return
.b FALSE
to reject the recipient.
If it returns false,
it is up to
E 57
I 57
It returns an exit status
indicating the status of the message.
The status
E 72
I 72
and
.q "Full-Name:"
fields are used to determine the full name of the sender
if possible;
this is stored in the macro
.b $x
and used in a number of ways.
.sh 3 "Restricting Use of Email"
.pp
If it is necessary to restrict mail through a relay,
the
.i checkcompat
D 79
routine can be modified.
This routine is called for every recipient address.
It returns an exit status
indicating the status of the message.
The status
E 72
.sm EX_OK
accepts the address,
.sm EX_TEMPFAIL
queues the message for a later try,
and other values
(commonly
.sm EX_UNAVAILABLE )
reject the message.
It is up to
E 57
.i checkcompat
to print an error message
(using
.i usrerr )
D 57
saying why the message is rejected.
E 57
I 57
if the message is rejected.
E 79
I 79
routine can be modified.
This routine is called for every recipient address.
It returns an exit status
indicating the status of the message.
The status
.sm EX_OK
accepts the address,
.sm EX_TEMPFAIL
queues the message for a later try,
and other values
(commonly
.sm EX_UNAVAILABLE )
reject the message.
It is up to
.i checkcompat
to print an error message
(using
.i usrerr )
if the message is rejected.
E 79
E 57
For example,
.i checkcompat
E 19
could read:
.(b
.re
D 19
.sz -2
E 19
I 19
.sz -1
E 19
I 6
.ta 4n +4n +4n +4n +4n +4n +4n
E 6
D 57
bool
checkcompat(to)
E 57
I 57
D 122
int
checkcompat(to, e)
E 57
	register ADDRESS *to;
I 57
	register ENVELOPE *e;
E 57
D 30
{
E 30
I 30
\&{
E 30
D 6
	if (MsgSize > 50000 && to->q_mailer != MN_LOCAL)
E 6
I 6
D 57
	if (MsgSize > 50000 && to->q_mailer != LocalMailer)
E 57
I 57
	register STAB *s;

	s = stab("private", ST_MAILER, ST_FIND);
	if (s != NULL && e\->e_from.q_mailer != LocalMailer &&
	    to->q_mailer == s->s_mailer)
E 57
E 6
	{
I 57
		usrerr("No private net mail allowed through this machine");
		return (EX_UNAVAILABLE);
	}
E 122
I 122
int
checkcompat(to, e)
	register ADDRESS *to;
	register ENVELOPE *e;
\&{
	register STAB *s;

	s = stab("private", ST_MAILER, ST_FIND);
	if (s != NULL && e\->e_from.q_mailer != LocalMailer &&
	    to->q_mailer == s->s_mailer)
	{
		usrerr("No private net mail allowed through this machine");
		return (EX_UNAVAILABLE);
	}
E 122
D 151
	if (MsgSize > 50000 && to\->q_mailer != LocalMailer)
E 151
I 151
	if (MsgSize > 50000 && bitnset(M_LOCALMAILER, to\->q_mailer))
E 151
	{
E 57
		usrerr("Message too large for non-local delivery");
I 20
D 151
		NoReturn = TRUE;
E 151
I 151
		e\->e_flags |= EF_NORETURN;
E 151
E 20
D 57
		return (FALSE);
E 57
I 57
		return (EX_UNAVAILABLE);
E 57
	}
D 57
	return (TRUE);
E 57
I 57
	return (EX_OK);
E 57
}
.sz
.)b
This would reject messages greater than 50000 bytes
unless they were local.
I 20
The
D 151
.i NoReturn
D 34
flag can be sent to supress the return of the actual body
E 34
I 34
flag can be sent to suppress the return of the actual body
E 151
I 151
.i EF_NORETURN
flag can be set in
.i e\(->e_flags
to suppress the return of the actual body
E 151
E 34
of the message in the error return.
E 20
The actual use of this routine is highly dependent on the
implementation,
and use should be limited.
I 53
.sh 3 "Load Average Computation"
E 53
I 45
.pp
The routine
.i getla
should return an approximation of the current system load average
as an integer.
D 53
There are four versions included on compilation flags.
You can force one version in the Makefile using the
.i cc
option
.b \-DLA_TYPE= \c
.i type ,
where
.i type
is:
.ip LA_INT
The kernel stores the load average in the kernel as an array of long integers.
The actual values are scaled by a factor FSCALE
(default 256).
.ip LA_FLOAT
The kernel stores the load average in the kernel as an array of
double precision floats.
.ip LA_SUBR
Call the
.i getloadavg
routine to get the load average as an array of doubles.
.ip LA_ZERO
Always return zero as the load average.
This is the fallback case.
.lp
If type
.sm LA_INT
or
.sm LA_FLOAT
is specified,
you may also need to specify
.sm _PATH_UNIX
(the path to your system binary)
and
.sm LA_AVENRUN
(the name of the variable containing the load average in the kernel;
usually
.q _avenrun
or
.q avenrun ).
E 53
I 53
D 157
There are four versions included on compilation flags
E 157
I 157
There are several versions included on compilation flags
E 157
as described above.
.sh 3 "New Database Map Classes"
E 53
E 45
I 30
D 50
.uh "Configuration in src/daemon.c"
E 50
.pp
I 50
New key maps can be added by creating a class initialization function
and a lookup function.
These are then added to the routine
.i setupmaps.
.pp
The initialization function is called as
.(b
\fIxxx\fP_map_init(MAP *map, char *mapname, char *args)
.)b
The
.i map
is an internal data structure.
The
.i mapname
is the name of the map (used for error messages).
The
.i args
is a pointer to the rest of the configuration file line;
flags and filenames can be extracted from this line.
The initialization function must return
.sm TRUE
if it successfully opened the map,
.sm FALSE
otherwise.
.pp
The lookup function is called as
.(b
D 93
\fIxxx\fP_map_lookup(MAP *map, char buf[], int bufsize, char **av)
E 93
I 93
\fIxxx\fP_map_lookup(MAP *map, char buf[], int bufsize, char **av, int *statp)
E 93
.)b
The
.i map
defines the map internally.
The parameters
.i buf
and
.i bufsize
have the input key.
This may be (and often is) used destructively.
The
.i av
is a list of arguments passed in from the rewrite line.
The lookup function should return a pointer to the new value.
I 93
IF the map lookup fails,
.i *statp
should be set to an exit status code;
in particular, it should be set to
.sm EX_TEMPFAIL
if recovery is to be attempted by the higher level code.
E 93
I 56
.sh 3 "Queueing Function"
.pp
The routine
.i shouldqueue
is called to decide if a message should be queued
or processed immediately.
Typically this compares the message priority to the current load average.
The default definition is:
.(b
bool
shouldqueue(pri, ctime)
	long pri;
	time_t ctime;
{
	if (CurrentLA < QueueLA)
		return (FALSE);
I 69
	if (CurrentLA >= RefuseLA)
		return (TRUE);
E 69
	return (pri > (QueueFactor / (CurrentLA \- QueueLA + 1)));
}
.)b
If the current load average
(global variable
.i CurrentLA ,
which is set before this function is called)
D 69
is less than the threshold load average
E 69
I 69
is less than the low threshold load average
E 69
(option
.b x ,
variable
.i QueueLA ),
.i shouldqueue
returns
.sm FALSE
immediately
(that is, it should
.i not
queue).
I 69
If the current load average exceeds the high threshold load average
(option
.b X ,
variable
.i RefuseLA ),
.i shouldqueue
returns
.sm TRUE
immediately.
E 69
Otherwise, it computes the function based on the message priority,
the queue factor
(option
.b q ,
global variable
.i QueueFactor ),
and the current and threshold load averages.
.pp
An implementation wishing to take the actual age of the message into account
can also use the
.i ctime
parameter,
which is the time that the message was first submitted to
.i sendmail .
Note that the
.i pri
parameter is already weighted
by the number of times the message has been tried
(although this tends to lower the priority of the message with time);
the expectation is that the
.i ctime
would be used as an
.q "escape clause"
to ensure that messages are eventually processed.
.sh 3 "Refusing Incoming SMTP Connections"
.pp
The function
.i refuseconnections
D 145
returns
.sm TRUE
if incoming SMTP connections should be refused.
The current implementation is based exclusively on the current load average
and the refuse load average option
(option
.b X ,
global variable
.i RefuseLA ):
.(b
bool
refuseconnections()
E 145
I 145
returns
.sm TRUE
if incoming SMTP connections should be refused.
The current implementation is based exclusively on the current load average
and the refuse load average option
(option
.b X ,
global variable
.i RefuseLA ):
.(b
bool
refuseconnections()
E 145
{
D 69
	return (CurrentLA > RefuseLA);
E 69
I 69
	return (CurrentLA >= RefuseLA);
E 69
}
.)b
A more clever implementation
could look at more system resources.
.sh 3 "Load Average Computation"
.pp
The routine
.i getla
returns the current load average (as a rounded integer).
The distribution includes several possible implementations.
I 157
If you are porting to a new environment
you may need to add some new tweaks.\**
.(f
\**If you do, please send updates to
sendmail@CS.Berkeley.EDU.
.)f
E 157
E 56
.sh 2 "Configuration in src/daemon.c"
.pp
E 50
The file
.i src/daemon.c
contains a number of routines that are dependent
on the local networking environment.
D 111
The version supplied is specific to 4.3 BSD.
E 111
I 111
The version supplied assumes you have BSD style sockets.
E 111
.pp
D 50
The routine
E 50
I 50
In previous releases,
we recommended that you modify the routine
E 50
.i maphostname
D 50
is called to convert strings within
E 50
I 50
if you wanted to generalize
E 50
.b $[
\&...\&
.b $]
D 50
symbols.
It can be modified if you wish to provide a more sophisticated service,
e.g.,
mapping UUCP host names to full paths.
E 50
I 50
lookups.
We now recommend that you create a new keyed map instead.
D 70
.sh 1 "CHANGES IN RELEASE 6"
E 70
I 70
D 108
.sh 1 "CHANGES IN VERSION 6"
E 108
I 108
.sh 1 "CHANGES IN VERSION 8"
E 108
E 70
.pp
The following summarizes changes
since the last commonly available version of
D 117
.b sendmail
E 117
I 117
.i sendmail
E 117
D 155
(5.67):
E 155
I 155
(5.67).
For a detailed list,
consult the file
RELEASE_NOTES
in the root directory of the
.i sendmail
distribution.
E 155
.sh 2 "Connection Caching"
.pp
Instead of closing SMTP connections immediately,
those connections are cached for possible future use.
The advent of MX records made this effective for mailing lists;
in addition,
substantial performance improvements can be expected for queue processing.
I 57
.sh 2 "MX Piggybacking"
.pp
If two hosts with different names in a single message
happen to have the same set of MX hosts,
they can be sent in the same transaction.
D 71
Release 6 notices this and tries to batch the messages.
E 71
I 71
D 108
Version 6 notices this and tries to batch the messages.
E 108
I 108
Version 8 notices this and tries to batch the messages.
I 111
.sh 2 "RFC 1123 Compliance"
.pp
A number of changes have been made to make
.i sendmail
.q "conditionally compliant"
(that is,
.i sendmail
satisfies all of the
.q MUST
clauses and most but not all of the
.q SHOULD
clauses in RFC 1123).
.pp
The major areas of change are (numbers are RFC 1123 section numbers):
.nr ii \w'5.3.1.1\0\0'u
.ip 5.2.7
Response to RCPT command is fast.
.ip 5.2.8
Numeric IP addresses are logged in Received: lines.
.ip 5.2.17
Self domain literal is properly handled.
.ip 5.3.2
Better control over individual timeouts.
.ip 5.3.3
Error messages are sent as
.q From:<> .
.ip 5.3.3
Error messages are never sent to
.q <> .
.ip 5.3.3
Route-addrs are pruned.
.lp
The areas in which
.i sendmail
is not
.q "unconditionally compliant"
are:
.ip 5.2.6
.i Sendmail
does do header munging.
.ip 5.2.10
.i Sendmail
doesn't always use the exact SMTP message text
as listed in RFC 821.
.ip 5.3.1.1
.i Sendmail
doesn't guarantee only one connect for each host in queue runs.
.ip 5.3.1.1
.i Sendmail
doesn't always provide adequate concurrency limits.
.sh 2 "Extended SMTP Support"
.pp
Version 8 includes both sending and receiving support for Extended
D 160
SMTP support as defined by RFC 1425 (basic) and RFC 1427 (SIZE);
and limited support for RFC 1426 (BODY).
E 160
I 160
SMTP support as defined by RFC 1651 (basic) and RFC 1653 (SIZE);
and limited support for RFC 1652 (BODY).
E 160
E 111
E 108
E 71
E 57
.sh 2 "Eight-Bit Clean"
.pp
Previous versions of
D 117
.b sendmail
E 117
I 117
.i sendmail
E 117
used the 0200 bit for quoting.
This version avoids that use.
However, for compatibility with RFC 822,
D 101
the default is still to strip the eighth bit;
set option `8' to get full 8-bit clean processing.
E 101
I 101
you can set option `7' to get seven bit stripping.
E 101
.pp
D 139
Individual mailers can still produce seven bit out put using the
E 139
I 139
Individual mailers can still produce seven bit output using the
E 139
`7' mailer flag.
.sh 2 "User Database"
.pp
The user database is an as-yet experimental attempt
to provide unified large-site name support.
We are installing it at Berkeley;
future versions may show significant modifications.
.sh 2 "Improved BIND Support"
.pp
The BIND support,
particularly for MX records,
had a number of annoying
.q features
which have been removed in this release.
In particular,
D 117
these more tightly bind (pun intended) the name server to sendmail,
E 117
I 117
D 165
these more tightly bind (pun intended) the name server to
.i sendmail ,
E 117
so that the name server resolution rules are incorporated directly into
.b sendmail .
.sh 2 "Keyed Files"
E 165
I 165
these more tightly bind (pun intended) the name server to
.i sendmail ,
so that the name server resolution rules are incorporated directly into
.b sendmail .
.sh 2 "Keyed Files"
E 165
.pp
Generalized keyed files is an idea taken directly from
.sm IDA
D 117
.b sendmail
E 117
I 117
.i sendmail
E 117
(albeit with a completely different implementation).
They can be useful on large sites.
I 53
.pp
D 109
R6 also understands YP.
E 109
I 109
Version 8 also understands YP.
E 109
I 84
.sh 2 "Multi-Word Classes"
.pp
Classes can now be multiple words.
For example,
.(b
CShofmann.CS.Berkeley.EDU
.)b
allows you to match the entire string
.q hofmann.CS.Berkeley.EDU
using the single construct
.q $=S .
I 89
.sh 2 "Deferred Macro Expansion"
.pp
The
.b $& \c
.i x
construct has been adopted from
.sm IDA .
.sh 2 "IDENT Protocol Support"
.pp
The IDENT protocol as defined in RFC 1413 is supported.
E 89
E 84
E 53
.sh 2 "Parsing Bug Fixes"
.pp
A number of small bugs having to do with things like
backslash-escaped quotes inside of comments
have been fixed.
D 70
.sh 2 "Separate From/Return-Path Processing"
E 70
I 70
.sh 2 "Separate Envelope/Header Processing"
E 70
.pp
Since the From: line is passed in separately from the envelope sender,
these have both been made visible;
the
D 77
.b $<
macro gives access to the envelope sender information.
E 77
I 77
.b $g
macro is set to the envelope sender during processing
of mailer argument vectors
and the header sender during processing of headers.
E 77
I 64
D 70
.sh 2 "Separate Envelope/Header Processing"
E 70
.pp
I 70
It is also possible to specify separate per-mailer
envelope and header processing.
E 70
The
.b S enderRWSet
and
.b R ecipientRWset
arguments for mailers
can be specified as
.i envelope/header
to give different rewritings for envelope versus header addresses.
I 70
.sh 2 "Owner-List Propagates to Envelope"
.pp
When an alias has an associated owner\-list name,
that alias is used to change the envelope sender address.
This will cause downstream errors to be returned to that owner.
E 70
E 64
.sh 2 "Dynamic Header Allocation"
.pp
The fixed size limit on header lines has been eliminated.
D 111
.sh 2 "New Command Line Flag"
E 111
I 111
.sh 2 "New Command Line Flags"
E 111
.pp
D 111
The \-p flag has been added
E 111
I 111
The
.b \-B
flag has been added to pass in body type information.
.pp
The
.b \-p
flag has been added
E 111
to pass in protocol information.
I 113
.pp
The
.b \-X
flag has been added
to allow logging of all protocol in and out of
.i sendmail
for debugging.
I 155
.pp
The
.b \-O
flag simplies setting long-form options.
E 155
E 113
I 111
.sh 2 "Enhanced Command Line Flags"
.pp
The
.b \-q
flag can limit limit a queue run to specific recipients, senders, or queue ids
using
.b \-qR\c
.i substring ,
.b \-qS\c
.i substring ,
or
.b \-qI\c
.i substring
respectively.
E 111
I 70
.sh 2 "New and Old Configuration Line Types"
.pp
D 116
The
E 116
I 116
The
E 116
D 157
.b T
(Trusted users) configuration line has been deleted.
It will still be accepted but will be ignored.
.pp
The
E 157
.b K
line has been added to declare database maps.
.pp
The
.b V
line has been added to declare the configuration version level.
I 111
.pp
The
.b M
line has a
.q D=
field that lets you change into a temporary directory while that mailer
is running.
I 153
It also has a
.q U=
field to allow you to set the user and group id to be used
when running the mailer.
E 153
E 111
E 70
.sh 2 "New Options"
.pp
Several new options have been added,
many to support new features,
others to allow tuning that was previously available
only by recompiling.
D 53
They are described in detail in Appendix B.
E 53
I 53
They are described in detail in Section 5.1.5.
E 53
Briefly,
I 111
.nr ii 0.5i
E 111
I 69
.ip b
Insist on a minimum number of disk blocks.
E 69
.ip C
Set checkpoint interval.
.ip E
Default error message.
I 53
.ip G
Enable GECOS matching.
E 53
.ip h
Maximum hop count.
I 97
.ip j
Send errors in MIME-encapsulated format.
E 97
.ip J
Forward file path.
.ip k
Connection cache size
.ip K
Connection cache lifetime.
I 104
.ip l
Enable Errors-To: header.
These headers violate RFC 1123;
this option is included to provide back compatibility
D 117
with old versions of sendmail.
E 117
I 117
with old versions of
.i sendmail .
E 117
I 111
.ip O
Set incoming SMTP daemon options, such as an alternate SMTP port.
E 111
E 104
I 69
.ip p
Privacy options.
I 111
.ip R
Don't prune route-addrs.
E 111
E 69
.ip U
User database spec.
I 111
.ip V
Fallback
.q MX
host.
I 125
.ip w
.q "Best MX"
handling technique.
E 125
E 111
D 63
.ip w
Domain has no wildcard MX.
E 63
D 97
.ip 8
Run eight bit clean.
E 97
I 97
.ip 7
Do not run eight bit clean.
I 154
.ip 8
Eight bit data handling mode.
E 154
E 97
I 69
.sh 2 "Extended Options"
.pp
The
.b r
D 79
(read timeout)
and
E 79
I 79
(read timeout),
E 79
.b I
D 79
(use BIND)
E 79
I 79
(use BIND),
and
.b T
(queue timeout)
E 79
options have been extended to pass in more information.
D 111
.sh 2 "New Mailer Flag"
E 111
I 111
.sh 2 "New Mailer Flags"
E 111
.pp
D 111
The
.b c
mailer flag will strip all comments
from addresses;
E 111
I 111
Several new mailer flags have been added.
.ip a
Try to use ESMTP when creating a connection.
If this is not set,
.i sendmail
will still try if the other end hints that it knows about ESMTP
in its greeting message;
this flag says to try even if it doesn't hint.
If the EHLO (extended hello)
command fails,
.i sendmail
falls back to old SMTP.
I 153
.ip A
Try the user part of addresses for this mailer as aliases.
E 153
.ip b
Ensure that there is a blank line at the end of all messages.
.ip c
Strip all comments from addresses;
E 111
this should only be used as a last resort
when dealing with cranky mailers.
I 111
.ip g
Never use the null sender as the envelope sender,
even when running SMTP.
Although this violates RFC 1123,
it may be necessary when you must deal with some obnoxious old hosts.
I 153
.ip k
Turn off the loopback check in the HELO protocol;
doing this may cause mailer loops.
.ip o
Always run the mailer as the recipient of the message.
.ip w
This user should have a passwd file entry.
.ip 5
Try ruleset 5 if no local aliases.
E 153
.ip 7
Strip all output to 7 bits.
I 153
.ip :
Check for :include: files.
.ip |
Check for |program addresses.
.ip /
Check for /file addresses.
.ip @
Check this user against the user database.
I 154
.sh 2 "Long Option Names"
.pp
All options can be specified using long names,
and some new options can only be specified with long names.
E 154
E 153
.sh 2 "New Pre-Defined Macros"
.pp
The following macros are pre-defined:
.ip $k
The UUCP node name,
nominally from
.i uname (2)
call.
.ip $m
The domain part of our full hostname.
.ip $_
The RFC 1413-provided sender address.
E 111
I 71
.sh 2 "New LHS Token"
.pp
D 108
Version 6 allows
E 108
I 108
Version 8 allows
E 108
.b $@
on the Left Hand Side of an
.q R
line to match zero tokens.
This is intended to be used to match the null input.
E 71
E 69
.sh 2 "Bigger Defaults"
.pp
D 71
Release 6 allows up to 100 rulesets instead of 30.
E 71
I 71
D 108
Version 6 allows up to 100 rulesets instead of 30.
E 108
I 108
Version 8 allows up to 100 rulesets instead of 30.
E 108
E 71
It is recommended that rulesets 0\-9 be reserved for
.i sendmail 's
dedicated use in future releases.
.pp
The total number of MX records that can be used has been raised to 20.
.pp
The number of queued messages that can be handled at one time
has been raised from 600 to 1000.
I 57
.sh 2 "Different Default Tuning Parameters"
D 155
.pp
D 71
Release 6 has changed the default parameters
E 71
I 71
D 108
Version 6 has changed the default parameters
E 108
I 108
Version 8 has changed the default parameters
E 108
E 71
for tuning queue costs
to make the number of recipients more important
than the size of the message (for small messages).
This is reasonable if you are connected with reasonably fast links.
E 57
I 53
.sh 2 "Auto-Quoting in Addresses"
.pp
Previously, the
.q "Full Name <email address>"
syntax would generate incorrect protocol output
if
.q "Full Name"
had special characters such as dot.
This version puts quotes around such names.
.sh 2 "Symbolic Names On Error Mailer"
.pp
Several names have been built in to the $@ portion of the $#error
mailer.
I 67
.sh 2 "SMTP VRFY Doesn't Expand"
.pp
Previous versions of
.i sendmail
treated VRFY and EXPN the same.
In this version,
VRFY doesn't expand aliases or follow .forward files.
I 125
EXPN still does.
E 125
.pp
As an optimization, if you run with your default delivery mode being
D 136
queue-only,
E 136
I 136
queue-only or deliver-in-background,
E 136
the RCPT command will also not chase aliases and .forward files.
It will chase them when it processes the queue.
I 92
.sh 2 "[IPC] Mailers Allow Multiple Hosts"
.pp
When an address resolves to a mailer that has
.q [IPC]
as its
.q Path ,
the $@ part (host name)
can be a colon-separated list of hosts instead of a single hostname.
D 117
This asks sendmail to search the list for the first entry that is available
E 117
I 117
This asks
.i sendmail
to search the list for the first entry that is available
E 117
exactly as though it were an MX record.
The intent is to route internal traffic through internal networks
without publishing an MX record to the net.
MX expansion is still done on the individual items.
I 101
.sh 2 "Aliases Extended"
.pp
The implementation has been merged with maps.
Among other things,
D 119
this supports NIS-based aliases.
E 101
E 92
E 67
.sh 2 "Portability and Security Enhancements"
.pp
A number of internal changes have been made to enhance portability.
.pp
Several fixes have been made to increase the paranoia factor.
I 111
.sh 2 "Miscellaneous Changes"
.pp
.i Sendmail
writes a
.i /etc/sendmail.pid
file with the current process id of the SMTP daemon.
.pp
Two people using the same program in their .forward file
are considered different
so that duplicate elimination doesn't delete one of them.
.pp
The
.i mailstats
program prints mailer names
and gets the location of the
.i sendmail.st
file from
.i /etc/sendmail.cf .
.pp
Many minor bugs have been fixed, such as handling of backslashes
inside of quotes.
.pp
A hook (ruleset 5) has been added
to allow rewriting of local addresses after aliasing.
E 111
I 65
.sh 1 "ACKNOWLEDGEMENTS"
.pp
I've worked on
.i sendmail
for many years,
and many employers have been remarkably patient
about letting me work on a large project
that was not part of my official job.
This includes time on the INGRES Project at Berkeley,
at Britton Lee,
and again on the Mammoth Project at Berkeley.
.pp
Much of the second wave of improvements
should be credited to Bryan Costales of ICSI.
As he passed me drafts of his book on
.i sendmail
I was inspired to start working on things again.
Bryan was also available to bounce ideas off of.
.pp
Many, many people contributed chunks of code and ideas to
.i sendmail .
It has proven to be a group network effort.
I 95
D 108
Version 6 in particular was a group project.
E 108
I 108
Version 8 in particular was a group project.
E 108
The following people made notable contributions:
.(l
Keith Bostic, CSRG, University of California, Berkeley
Michael J. Corrigan, University of California, San Diego
Bryan Costales, International Computer Science Institute
D 114
P{r (Pell) Emanuelsson
E 114
I 114
Pa\*:r (Pell) Emanuelsson
E 114
Craig Everhart, Transarc Corporation
Tom Ivar Helbekkmo, Norwegian School of Economics
Allan E. Johannesen, WPI
Takahiro Kanbe, FujiXerox
Brian Kantor, University of California, San Diego
Bruce Lilly, Sony U.S.
Nakamura Motonori, Kyoto University
John Gardiner Myers, Carnegie Mellon University
Neil Rickert, Northern Illinois University
Eric Wassenaar, National Institute for Nuclear and High Energy Physics, Amsterdam
D 100
Christophe Wolfhugel, INSA (???)
E 100
I 100
Christophe Wolfhugel, Herve Schauer Consultants (Paris)
E 100
.)l
I apologize for anyone I have omitted, misspelled, misattributed, or
otherwise missed.
Many other people have contributed ideas, comments, and encouragement.
I appreciate their contribution as well.
E 95
E 65
E 53
.++ A
.+c "COMMAND LINE FLAGS"
.ba 0
.nr ii 1i
.pp
Arguments must be presented with flags before addresses.
The flags are:
.ip \-b\fIx\fP
Set operation mode to
.i x .
Operation modes are:
.(b
.ta 4n
m	Deliver mail (default)
D 71
s	Speak SMTP on input side
d	Run as a daemon
t	Run in test mode
v	Just verify addresses, don't collect or deliver
i	Initialize the alias database
p	Print the mail queue
z	Freeze the configuration file
.)b
.ip \-C\fIfile\fP
Use a different configuration file.
.i Sendmail
runs as the invoking user (rather than root)
when this flag is specified.
.ip \-d\fIlevel\fP
Set debugging level.
.ip "\-f\ \fIaddr\fP"
The sender's machine address is
.i addr .
D 70
This flag is ignored unless the real user
is listed as a
.q "trusted user"
or if
.i addr
contains an exclamation point
(because of certain restrictions in UUCP).
E 70
.ip \-F\fIname\fP
E 71
I 71
s	Speak SMTP on input side
d	Run as a daemon
t	Run in test mode
v	Just verify addresses, don't collect or deliver
i	Initialize the alias database
p	Print the mail queue
z	Freeze the configuration file
.)b
I 111
.ip \-B\fItype\fP
Indicate body type.
E 111
.ip \-C\fIfile\fP
Use a different configuration file.
.i Sendmail
runs as the invoking user (rather than root)
when this flag is specified.
.ip \-d\fIlevel\fP
Set debugging level.
.ip "\-f\ \fIaddr\fP"
The sender's machine address is
E 119
I 119
this supports NIS-based aliases.
.sh 2 "Portability and Security Enhancements"
.pp
A number of internal changes have been made to enhance portability.
.pp
Several fixes have been made to increase the paranoia factor.
.sh 2 "Miscellaneous Changes"
.pp
.i Sendmail
writes a
.i /etc/sendmail.pid
file with the current process id of the SMTP daemon.
.pp
Two people using the same program in their .forward file
are considered different
so that duplicate elimination doesn't delete one of them.
.pp
The
.i mailstats
program prints mailer names
and gets the location of the
.i sendmail.st
file from
.i /etc/sendmail.cf .
.pp
Many minor bugs have been fixed, such as handling of backslashes
inside of quotes.
.pp
A hook (ruleset 5) has been added
to allow rewriting of local addresses after aliasing.
.sh 1 "ACKNOWLEDGEMENTS"
.pp
I've worked on
.i sendmail
for many years,
and many employers have been remarkably patient
about letting me work on a large project
that was not part of my official job.
This includes time on the INGRES Project at Berkeley,
at Britton Lee,
and again on the Mammoth Project at Berkeley.
.pp
Much of the second wave of improvements
should be credited to Bryan Costales of ICSI.
As he passed me drafts of his book on
.i sendmail
I was inspired to start working on things again.
Bryan was also available to bounce ideas off of.
.pp
Many, many people contributed chunks of code and ideas to
.i sendmail .
It has proven to be a group network effort.
Version 8 in particular was a group project.
The following people made notable contributions:
.(l
Keith Bostic, CSRG, University of California, Berkeley
Michael J. Corrigan, University of California, San Diego
Bryan Costales, International Computer Science Institute
Pa\*:r (Pell) Emanuelsson
Craig Everhart, Transarc Corporation
Tom Ivar Helbekkmo, Norwegian School of Economics
Allan E. Johannesen, WPI
I 126
Jonathan Kamens, OpenVision Technologies, Inc.
E 126
D 127
Takahiro Kanbe, FujiXerox
E 127
I 127
Takahiro Kanbe, Fuji Xerox Information Systems Co., Ltd.
E 127
Brian Kantor, University of California, San Diego
I 126
Murray S. Kucherawy, HookUp Communication Corp.
E 126
Bruce Lilly, Sony U.S.
I 126
Karl London
E 126
Nakamura Motonori, Kyoto University
John Gardiner Myers, Carnegie Mellon University
Neil Rickert, Northern Illinois University
I 126
Eric Schnoebelen, Convex Computer Corp.
E 126
Eric Wassenaar, National Institute for Nuclear and High Energy Physics, Amsterdam
Christophe Wolfhugel, Herve Schauer Consultants (Paris)
.)l
I apologize for anyone I have omitted, misspelled, misattributed, or
otherwise missed.
Many other people have contributed ideas, comments, and encouragement.
I appreciate their contribution as well.
.++ A
.+c "COMMAND LINE FLAGS"
.ba 0
.nr ii 1i
.pp
Arguments must be presented with flags before addresses.
The flags are:
.ip \-b\fIx\fP
Set operation mode to
.i x .
Operation modes are:
.(b
.ta 4n
m	Deliver mail (default)
s	Speak SMTP on input side
d	Run as a daemon
t	Run in test mode
v	Just verify addresses, don't collect or deliver
i	Initialize the alias database
p	Print the mail queue
D 121
z	Freeze the configuration file
E 121
.)b
.ip \-B\fItype\fP
Indicate body type.
.ip \-C\fIfile\fP
Use a different configuration file.
.i Sendmail
runs as the invoking user (rather than root)
when this flag is specified.
.ip \-d\fIlevel\fP
Set debugging level.
.ip "\-f\ \fIaddr\fP"
The sender's machine address is
E 119
.i addr .
.ip \-F\fIname\fP
E 71
Sets the full name of this user to
.i name .
.ip "\-h\ \fIcnt\fP"
Sets the
.q "hop count"
to
.i cnt .
This represents the number of times this message has been processed
by
.i sendmail
(to the extent that it is supported by the underlying networks).
.i Cnt
is incremented during processing,
and if it reaches
MAXHOP
(currently 30)
.i sendmail
throws away the message with an error.
.ip \-n
Don't do aliasing or forwarding.
.ip "\-r\ \fIaddr\fP"
An obsolete form of
.b \-f .
.ip \-o\fIx\|value\fP
Set option
.i x
to the specified
.i value .
These options are described in Appendix B.
.ip \-p\fIprotocol\fP
Set the sending protocol.
Programs are encouraged to set this.
The protocol field can be in the form
.i protocol \c
.b : \c
.i host
to set both the sending protocol and sending host.
D 153
For example,
.q \-pUUCP:uunet
sets the sending protocol to UUCP
and the sending host to uunet.
(Some existing programs use \-oM to set the r and s macros;
this is equivalent to using \-p.)
.ip \-q\fItime\fP
Try to process the queued up mail.
If the time is given,
D 117
a sendmail will run through the queue at the specified interval
E 117
I 117
a
.i sendmail
will run through the queue at the specified interval
E 117
to deliver queued mail;
otherwise, it only runs once.
I 73
.ip \-q\fIXstring\fP
Run the queue once,
limiting the jobs to those matching
.i Xstring .
The key letter
.i X
can be
.b I
to limit based on queue identifier,
.b R
to limit based on recipient,
or
.b S
to limit based on sender.
A particular queued job is accepted if one of the corresponding addresses
contains the indicated
.i string .
E 73
.ip \-t
Read the header for
.q To: ,
.q Cc: ,
and
.q Bcc:
lines, and send to everyone listed in those lists.
The
.q Bcc:
line will be deleted before sending.
Any addresses in the argument vector will be deleted
from the send list.
I 113
.ip "\-X \fIlogfile\fP"
D 117
Log all traffic in and out of sendmail in the indicated
E 117
I 117
Log all traffic in and out of
.i sendmail
in the indicated
E 117
.i logfile
for debugging mailer problems.
This produces a lot of data very quickly and should be used sparingly.
E 113
.pp
E 153
I 153
For example,
.q \-pUUCP:uunet
sets the sending protocol to UUCP
and the sending host to uunet.
(Some existing programs use \-oM to set the r and s macros;
this is equivalent to using \-p.)
.ip \-q\fItime\fP
Try to process the queued up mail.
If the time is given,
a
.i sendmail
will run through the queue at the specified interval
to deliver queued mail;
otherwise, it only runs once.
.ip \-q\fIXstring\fP
Run the queue once,
limiting the jobs to those matching
.i Xstring .
The key letter
.i X
can be
.b I
to limit based on queue identifier,
.b R
to limit based on recipient,
or
.b S
to limit based on sender.
A particular queued job is accepted if one of the corresponding addresses
contains the indicated
.i string .
.ip \-t
Read the header for
.q To: ,
.q Cc: ,
and
.q Bcc:
lines, and send to everyone listed in those lists.
The
.q Bcc:
line will be deleted before sending.
Any addresses in the argument vector will be deleted
from the send list.
.ip "\-X \fIlogfile\fP"
Log all traffic in and out of
.i sendmail
in the indicated
.i logfile
for debugging mailer problems.
This produces a lot of data very quickly and should be used sparingly.
.pp
E 153
There are a number of options that may be specified as
D 139
primitive flags
(provided for compatibility with
.i delivermail ).
E 139
I 139
primitive flags.
E 139
These are the e, i, m, and v options.
Also,
the f option
may be specified as the
.b \-s
flag.
.+c "QUEUE FILE FORMATS"
.pp
This appendix describes the format of the queue files.
These files live in the directory defined by the
.b Q
option in the
.i sendmail.cf
file, usually
.i /var/spool/mqueue
or
.i /usr/spool/mqueue .
.pp
All queue files have the name
D 78
\fIx\fP\|\fBf\fP\fIAA99999\fP
E 78
I 78
\fIx\fP\|\fBf\fP\fIAAA99999\fP
E 78
where
D 78
.i AA99999
E 78
I 78
.i AAA99999
E 78
is the
.i id
for this message
and the
.i x
is a type.
I 78
The first letter of the id encodes the hour of the day
that the message was received by the system
(with A being the hour between midnight and 1:00AM).
E 78
All files with the same id collectively define one message.
.pp
The types are:
.nr ii 0.5i
.ip d
The data file.
The message body (excluding the header) is kept in this file.
.ip l
The lock file.
If this file exists,
the job is currently being processed,
and a queue run will not process the file.
For that reason,
an extraneous
.b lf
file can cause a job to apparently disappear
(it will not even time out!).
D 141
[Actually, this file is obsolete on most systems that support the
.b flock
or
.b lockf
system calls.]
.ip n
E 141
I 141
[Actually, this file is obsolete on most systems that support the
.b flock
or
.b lockf
system calls.]
.ip n
E 141
This file is created when an id is being created.
It is a separate file to insure that no mail can ever be destroyed
due to a race condition.
It should exist for no more than a few milliseconds
at any given time.
[This is only used on old versions of
D 117
sendmail;
E 117
I 117
.i sendmail ;
E 117
it is not used 
on newer versions.]
.ip q
The queue control file.
This file contains the information necessary to process the job.
.ip t
A temporary file.
These are an image of the
.b qf
file when it is being rebuilt.
It should be renamed to a
.b qf
file very quickly.
.ip x
A transcript file,
existing during the life of a session
showing everything that happens
during that session.
.pp
The
.b qf
file is structured as a series of lines
each beginning with a code letter.
The lines are as follows:
.ip D
The name of the data file.
There may only be one of these lines.
.ip H
A header definition.
There may be any number of these lines.
The order is important:
they represent the order in the final message.
These use the same syntax
as header definitions in the configuration file.
.ip C
The controlling address.
I 97
The syntax is
.q localuser:aliasname .
E 97
Recipient addresses following this line
D 97
will be flagged as having resulted from an alias of this name.
This affect the actual UNIX user id used for delivery.
E 97
I 97
will be flagged so that deliveries will be run as the
.i localuser
(a user name from the /etc/passwd file);
.i aliasname
is the name of the alias that expanded to this address
(used for printing messages).
E 97
.ip R
A recipient address.
This will normally be completely aliased,
but is actually realiased when the job is processed.
There will be one line
for each recipient.
.ip S
The sender address.
There may only be one of these lines.
.ip E
An error address.
If any such lines exist,
they represent the addresses that should receive error messages.
.ip T
The job creation time.
This is used to compute when to time out the job.
.ip P
The current message priority.
This is used to order the queue.
Higher numbers mean lower priorities.
The priority changes
as the message sits in the queue.
The initial priority depends on the message class
and the size of the message.
.ip M
A message.
This line is printed by the
.i mailq
command,
and is generally used to store status information.
It can contain any text.
I 80
.ip F
Flag bits, represented as one letter per flag.
Defined flag bits are
.b r
indicating that this is a response message
and
.b w
indicating that a warning message has been sent
announcing that the mail has been delayed.
I 154
.ip N
The total number of delivery attempts.
.ip K
The time (as seconds since January 1, 1970)
of the last delivery attempt.
.ip I
The i-number of the data file;
this can be used to recover your mail queue
after a disasterous disk crash.
E 154
E 80
.ip $
A macro definition.
The values of certain macros
(as of this writing, only
.b $r
and
.b $s )
are passed through to the queue run phase.
I 94
.ip B
The body type.
The remainder of the line is a text string defining the body type.
If this field is missing,
the body type is assumed to be
.q "undefined"
and no special processing is attempted.
Legal values are
.q 7BIT
and
.q 8BITMIME .
E 94
.pp
As an example,
the following is a queue file sent to
.q eric@mammoth.Berkeley.EDU
and
.q bostic@okeeffe.CS.Berkeley.EDU \**:
.(f
\**This example is contrived and probably inaccurate for your environment.
Glance over it to get an idea;
nothing can replace looking at what your own system generates.
.)f
.(b
P835771
T404261372
D 78
DdfAA13557
E 78
I 78
DdfAAA13557
E 78
Seric
D 97
Cdaemon
E 97
Eowner-sendmail@vangogh.CS.Berkeley.EDU
D 97
Ceric
E 97
I 97
Ceric:sendmail@vangogh.CS.Berkeley.EDU
E 97
Reric@mammoth.Berkeley.EDU
Rbostic@okeeffe.CS.Berkeley.EDU
H?P?return-path: <owner-sendmail@vangogh.CS.Berkeley.EDU>
D 78
Hreceived: by vangogh.CS.Berkeley.EDU (5.108/2.7) id AA06703;
E 78
I 78
Hreceived: by vangogh.CS.Berkeley.EDU (5.108/2.7) id AAA06703;
E 78
	Fri, 17 Jul 92 00:28:55 -0700
Hreceived: from mail.CS.Berkeley.EDU by vangogh.CS.Berkeley.EDU (5.108/2.7)
D 78
	id AA06698; Fri, 17 Jul 92 00:28:54 -0700
E 78
I 78
	id AAA06698; Fri, 17 Jul 92 00:28:54 -0700
E 78
Hreceived: from [128.32.31.21] by mail.CS.Berkeley.EDU (5.96/2.5)
	id AA22777; Fri, 17 Jul 92 03:29:14 -0400
Hreceived: by foo.bar.baz.de (5.57/Ultrix3.0-C)
	id AA22757; Fri, 17 Jul 92 09:31:25 GMT
H?F?from: eric@foo.bar.baz.de (Eric Allman)
H?x?full-name: Eric Allman
Hmessage-id: <9207170931.AA22757@foo.bar.baz.de>
HTo: sendmail@vangogh.CS.Berkeley.EDU
Hsubject: this is an example message
.)b
This shows the name of the data file,
the person who sent the message,
the submission time
(in seconds since January 1, 1970),
the message priority,
the message class,
the recipients,
and the headers for the message.
E 50
E 30
I 6
.+c "SUMMARY OF SUPPORT FILES"
.pp
This is a summary of the support files
that
.i sendmail
creates or generates.
I 50
Many of these can be changed by editing the sendmail.cf file;
check there to find the actual pathnames.
E 50
.nr ii 1i
D 47
.ip "/usr/lib/sendmail"
E 47
I 47
.ip "/usr/\*(SD/sendmail"
E 47
The binary of
.i sendmail .
D 115
.ip /usr/bin/newaliases
E 115
I 115
.ip /usr/\*(SB/newaliases
E 115
D 47
A link to /usr/lib/sendmail;
E 47
I 47
A link to /usr/\*(SD/sendmail;
E 47
causes the alias database to be rebuilt.
I 19
Running this program is completely equivalent to giving
.i sendmail
the
.b \-bi
flag.
E 19
D 115
.ip /usr/bin/mailq
E 115
I 115
.ip /usr/\*(SB/mailq
E 115
Prints a listing of the mail queue.
I 19
This program is equivalent to using the
.b \-bp
flag to
.i sendmail .
E 19
D 45
.ip /usr/lib/sendmail.cf
E 45
I 45
.ip /etc/sendmail.cf
E 45
The configuration file,
in textual form.
D 45
.ip /usr/lib/sendmail.fc
E 45
I 45
D 121
.ip /etc/sendmail.fc
E 45
The configuration file
represented as a memory image.
E 121
.ip /usr/lib/sendmail.hf
E 155
I 155
.pp
Version 8 has changed the default parameters
for tuning queue costs
to make the number of recipients more important
than the size of the message (for small messages).
This is reasonable if you are connected with reasonably fast links.
.sh 2 "Auto-Quoting in Addresses"
.pp
Previously, the
.q "Full Name <email address>"
syntax would generate incorrect protocol output
if
.q "Full Name"
had special characters such as dot.
This version puts quotes around such names.
.sh 2 "Symbolic Names On Error Mailer"
.pp
Several names have been built in to the $@ portion of the $#error
mailer.
.sh 2 "SMTP VRFY Doesn't Expand"
.pp
Previous versions of
.i sendmail
treated VRFY and EXPN the same.
In this version,
VRFY doesn't expand aliases or follow .forward files.
EXPN still does.
.pp
As an optimization, if you run with your default delivery mode being
queue-only or deliver-in-background,
the RCPT command will also not chase aliases and .forward files.
It will chase them when it processes the queue.
.sh 2 "[IPC] Mailers Allow Multiple Hosts"
.pp
When an address resolves to a mailer that has
.q [IPC]
as its
.q Path ,
the $@ part (host name)
can be a colon-separated list of hosts instead of a single hostname.
This asks
.i sendmail
to search the list for the first entry that is available
exactly as though it were an MX record.
The intent is to route internal traffic through internal networks
without publishing an MX record to the net.
MX expansion is still done on the individual items.
.sh 2 "Aliases Extended"
.pp
The implementation has been merged with maps.
Among other things,
this supports NIS-based aliases.
.sh 2 "Portability and Security Enhancements"
.pp
A number of internal changes have been made to enhance portability.
.pp
Several fixes have been made to increase the paranoia factor.
.sh 2 "Miscellaneous Changes"
.pp
.i Sendmail
writes a
.i /etc/sendmail.pid
file with the current process id of the SMTP daemon.
.pp
Two people using the same program in their .forward file
are considered different
so that duplicate elimination doesn't delete one of them.
.pp
The
.i mailstats
program prints mailer names
and gets the location of the
.i sendmail.st
file from
.i /etc/sendmail.cf .
.pp
Many minor bugs have been fixed, such as handling of backslashes
inside of quotes.
.pp
A hook (ruleset 5) has been added
to allow rewriting of local addresses after aliasing.
.sh 1 "ACKNOWLEDGEMENTS"
.pp
I've worked on
.i sendmail
for many years,
and many employers have been remarkably patient
about letting me work on a large project
that was not part of my official job.
This includes time on the INGRES Project at Berkeley,
at Britton Lee,
and again on the Mammoth Project at Berkeley.
.pp
Much of the second wave of improvements
should be credited to Bryan Costales of ICSI.
As he passed me drafts of his book on
.i sendmail
I was inspired to start working on things again.
Bryan was also available to bounce ideas off of.
.pp
Many, many people contributed chunks of code and ideas to
.i sendmail .
It has proven to be a group network effort.
Version 8 in particular was a group project.
The following people made notable contributions:
.(l
John Beck, Hewlett-Packard
Keith Bostic, CSRG, University of California, Berkeley
Andrew Cheng, Sun Microsystems
Michael J. Corrigan, University of California, San Diego
Bryan Costales, International Computer Science Institute
I 157
Pa\*:r (Pell) Emanuelsson
Craig Everhart, Transarc Corporation
Tom Ivar Helbekkmo, Norwegian School of Economics
Allan E. Johannesen, WPI
Jonathan Kamens, OpenVision Technologies, Inc.
Takahiro Kanbe, Fuji Xerox Information Systems Co., Ltd.
Brian Kantor, University of California, San Diego
Murray S. Kucherawy, HookUp Communication Corp.
Bruce Lilly, Sony U.S.
Karl London
Motonori Nakamura, Ritsumeikan University & Kyoto University
John Gardiner Myers, Carnegie Mellon University
Neil Rickert, Northern Illinois University
Eric Schnoebelen, Convex Computer Corp.
Eric Wassenaar, National Institute for Nuclear and High Energy Physics, Amsterdam
Christophe Wolfhugel, Pasteur Institute & Herve Schauer Consultants (Paris)
.)l
I apologize for anyone I have omitted, misspelled, misattributed, or
otherwise missed.
D 162
At this point, I suspect that at least a hundred people
have contributed code,
and many more have contributed ideas, comments, and encouragement.
I've tried to list them in the RELEASE_NOTES in the distribution directory.
I appreciate their contribution as well.
.pp
Special thanks are reserved for Michael Corrigan and Christophe Wolfhugel,
who besides being wonderful guinea pigs and contributors
have also consented to be added to the ``sendmail@CS.Berkeley.EDU'' list
and, by answering the bulk of the questions sent to that list,
have freed me up to do other work.
.++ A
.+c "COMMAND LINE FLAGS"
.ba 0
.nr ii 1i
.pp
Arguments must be presented with flags before addresses.
The flags are:
.ip \-b\fIx\fP
Set operation mode to
.i x .
Operation modes are:
.(b
.ta 4n
m	Deliver mail (default)
s	Speak SMTP on input side
a\(dg	``Arpanet'' mode (get envelope sender information from header)
d	Run as a daemon
t	Run in test mode
v	Just verify addresses, don't collect or deliver
i	Initialize the alias database
p	Print the mail queue
.)b
.(f
\(dgDeprecated.
.)f
.ip \-B\fItype\fP
Indicate body type.
E 162
I 162
At this point, I suspect that at least a hundred people
have contributed code,
and many more have contributed ideas, comments, and encouragement.
I've tried to list them in the RELEASE_NOTES in the distribution directory.
I appreciate their contribution as well.
.pp
Special thanks are reserved for Michael Corrigan and Christophe Wolfhugel,
who besides being wonderful guinea pigs and contributors
have also consented to be added to the ``sendmail@CS.Berkeley.EDU'' list
and, by answering the bulk of the questions sent to that list,
have freed me up to do other work.
.++ A
.+c "COMMAND LINE FLAGS"
.ba 0
.nr ii 1i
.pp
Arguments must be presented with flags before addresses.
The flags are:
.ip \-b\fIx\fP
Set operation mode to
.i x .
Operation modes are:
.(b
.ta 4n
m	Deliver mail (default)
s	Speak SMTP on input side
a\(dg	``Arpanet'' mode (get envelope sender information from header)
d	Run as a daemon
t	Run in test mode
v	Just verify addresses, don't collect or deliver
i	Initialize the alias database
p	Print the mail queue
.)b
.(f
\(dgDeprecated.
.)f
.ip \-B\fItype\fP
Indicate body type.
E 162
.ip \-C\fIfile\fP
Use a different configuration file.
.i Sendmail
runs as the invoking user (rather than root)
when this flag is specified.
.ip \-d\fIlevel\fP
Set debugging level.
.ip "\-f\ \fIaddr\fP"
The sender's machine address is
.i addr .
.ip \-F\fIname\fP
Sets the full name of this user to
.i name .
.ip "\-h\ \fIcnt\fP"
Sets the
.q "hop count"
to
.i cnt .
This represents the number of times this message has been processed
by
.i sendmail
(to the extent that it is supported by the underlying networks).
.i Cnt
is incremented during processing,
and if it reaches
MAXHOP
(currently 30)
.i sendmail
throws away the message with an error.
.ip \-n
Don't do aliasing or forwarding.
.ip "\-r\ \fIaddr\fP"
An obsolete form of
.b \-f .
.ip \-o\fIx\|value\fP
Set option
.i x
to the specified
.i value .
These options are described in Appendix B.
.ip \-O\fIoption\fP\fB=\fP\fIvalue\fP
Set
.i option
to the specified
.i value
(for long form option names).
.ip \-M\fIx\|value
Set macro
.i x
to the specified
.i value .
.ip \-p\fIprotocol\fP
Set the sending protocol.
Programs are encouraged to set this.
The protocol field can be in the form
.i protocol \c
.b : \c
.i host
to set both the sending protocol and sending host.
For example,
.q \-pUUCP:uunet
sets the sending protocol to UUCP
and the sending host to uunet.
(Some existing programs use \-oM to set the r and s macros;
this is equivalent to using \-p.)
.ip \-q\fItime\fP
Try to process the queued up mail.
If the time is given,
a
.i sendmail
will run through the queue at the specified interval
to deliver queued mail;
otherwise, it only runs once.
.ip \-q\fIXstring\fP
Run the queue once,
limiting the jobs to those matching
.i Xstring .
The key letter
.i X
can be
.b I
to limit based on queue identifier,
D 160
.b R
to limit based on recipient,
or
.b S
E 160
I 160
.b R
to limit based on recipient,
or
.b S
E 160
to limit based on sender.
A particular queued job is accepted if one of the corresponding addresses
contains the indicated
.i string .
.ip \-t
Read the header for
.q To: ,
.q Cc: ,
and
.q Bcc:
lines, and send to everyone listed in those lists.
The
.q Bcc:
line will be deleted before sending.
Any addresses in the argument vector will be deleted
from the send list.
.ip "\-X \fIlogfile\fP"
Log all traffic in and out of
.i sendmail
in the indicated
.i logfile
for debugging mailer problems.
This produces a lot of data very quickly and should be used sparingly.
.pp
There are a number of options that may be specified as
primitive flags.
These are the e, i, m, and v options.
Also,
the f option
may be specified as the
.b \-s
flag.
.+c "QUEUE FILE FORMATS"
.pp
This appendix describes the format of the queue files.
These files live in the directory defined by the
.b Q
option in the
.i sendmail.cf
file, usually
.i /var/spool/mqueue
or
.i /usr/spool/mqueue .
.pp
All queue files have the name
\fIx\fP\|\fBf\fP\fIAAA99999\fP
where
.i AAA99999
is the
.i id
for this message
and the
.i x
is a type.
The first letter of the id encodes the hour of the day
that the message was received by the system
(with A being the hour between midnight and 1:00AM).
All files with the same id collectively define one message.
.pp
The types are:
.nr ii 0.5i
.ip d
The data file.
The message body (excluding the header) is kept in this file.
.ip q
The queue control file.
This file contains the information necessary to process the job.
.ip t
A temporary file.
These are an image of the
.b qf
file when it is being rebuilt.
It should be renamed to a
.b qf
file very quickly.
.ip x
A transcript file,
existing during the life of a session
showing everything that happens
during that session.
D 161
.pp
E 161
I 161
.pp
E 161
The
.b qf
file is structured as a series of lines
each beginning with a code letter.
The lines are as follows:
.ip V
The version number of the queue file format,
used to allow new
.i sendmail
binaries to read queue files created by older versions.
Defaults to version zero.
Must be the first line of the file if present.
.ip H
A header definition.
There may be any number of these lines.
The order is important:
they represent the order in the final message.
These use the same syntax
as header definitions in the configuration file.
.ip C
The controlling address.
The syntax is
.q localuser:aliasname .
Recipient addresses following this line
E 157
D 157
Pa\*:r (Pell) Emanuelsson
Craig Everhart, Transarc Corporation
Tom Ivar Helbekkmo, Norwegian School of Economics
Allan E. Johannesen, WPI
Jonathan Kamens, OpenVision Technologies, Inc.
Takahiro Kanbe, Fuji Xerox Information Systems Co., Ltd.
Brian Kantor, University of California, San Diego
Murray S. Kucherawy, HookUp Communication Corp.
Bruce Lilly, Sony U.S.
Karl London
Motonori Nakamura, Ritsumeikan University & Kyoto University
John Gardiner Myers, Carnegie Mellon University
Neil Rickert, Northern Illinois University
Eric Schnoebelen, Convex Computer Corp.
Eric Wassenaar, National Institute for Nuclear and High Energy Physics, Amsterdam
Christophe Wolfhugel, Pasteur Institute & Herve Schauer Consultants (Paris)
.)l
I apologize for anyone I have omitted, misspelled, misattributed, or
otherwise missed.
At this point, I suspect that at least a hundred people
have contributed code,
and many more have contributed ideas, comments, and encouragement.
I've tried to list them in the RELEASE_NOTES in the distribution directory.
I appreciate their contribution as well.
.pp
Special thanks are reserved for Michael Corrigan and Christophe Wolfhugel,
who besides being wonderful guinea pigs and contributors
have also consented to be added to the ``sendmail@CS.Berkeley.EDU'' list
and, by answering the bulk of the questions sent to that list,
have freed me up to do other work.
.++ A
.+c "COMMAND LINE FLAGS"
.ba 0
.nr ii 1i
.pp
Arguments must be presented with flags before addresses.
The flags are:
.ip \-b\fIx\fP
Set operation mode to
.i x .
Operation modes are:
.(b
.ta 4n
m	Deliver mail (default)
s	Speak SMTP on input side
a\(dg	``Arpanet'' mode (get envelope sender information from header)
d	Run as a daemon
t	Run in test mode
v	Just verify addresses, don't collect or deliver
i	Initialize the alias database
p	Print the mail queue
.)b
.(f
\(dgDeprecated.
.)f
.ip \-B\fItype\fP
Indicate body type.
.ip \-C\fIfile\fP
Use a different configuration file.
.i Sendmail
runs as the invoking user (rather than root)
when this flag is specified.
.ip \-d\fIlevel\fP
Set debugging level.
.ip "\-f\ \fIaddr\fP"
The sender's machine address is
.i addr .
.ip \-F\fIname\fP
Sets the full name of this user to
.i name .
.ip "\-h\ \fIcnt\fP"
Sets the
.q "hop count"
to
.i cnt .
This represents the number of times this message has been processed
by
.i sendmail
(to the extent that it is supported by the underlying networks).
.i Cnt
is incremented during processing,
and if it reaches
MAXHOP
(currently 30)
.i sendmail
throws away the message with an error.
.ip \-n
Don't do aliasing or forwarding.
.ip "\-r\ \fIaddr\fP"
An obsolete form of
.b \-f .
.ip \-o\fIx\|value\fP
Set option
.i x
to the specified
.i value .
These options are described in Appendix B.
.ip \-O\fIoption\fP\fB=\fP\fIvalue\fP
Set
.i option
to the specified
.i value
(for long form option names).
.ip \-p\fIprotocol\fP
Set the sending protocol.
Programs are encouraged to set this.
The protocol field can be in the form
.i protocol \c
.b : \c
.i host
to set both the sending protocol and sending host.
For example,
.q \-pUUCP:uunet
sets the sending protocol to UUCP
and the sending host to uunet.
(Some existing programs use \-oM to set the r and s macros;
this is equivalent to using \-p.)
.ip \-q\fItime\fP
Try to process the queued up mail.
If the time is given,
a
.i sendmail
will run through the queue at the specified interval
to deliver queued mail;
otherwise, it only runs once.
.ip \-q\fIXstring\fP
Run the queue once,
limiting the jobs to those matching
.i Xstring .
The key letter
.i X
can be
.b I
to limit based on queue identifier,
.b R
to limit based on recipient,
or
.b S
to limit based on sender.
A particular queued job is accepted if one of the corresponding addresses
contains the indicated
.i string .
.ip \-t
Read the header for
.q To: ,
.q Cc: ,
and
.q Bcc:
lines, and send to everyone listed in those lists.
The
.q Bcc:
line will be deleted before sending.
Any addresses in the argument vector will be deleted
from the send list.
.ip "\-X \fIlogfile\fP"
Log all traffic in and out of
.i sendmail
in the indicated
.i logfile
for debugging mailer problems.
This produces a lot of data very quickly and should be used sparingly.
.pp
There are a number of options that may be specified as
primitive flags.
These are the e, i, m, and v options.
Also,
the f option
may be specified as the
.b \-s
flag.
.+c "QUEUE FILE FORMATS"
.pp
This appendix describes the format of the queue files.
These files live in the directory defined by the
.b Q
option in the
.i sendmail.cf
file, usually
.i /var/spool/mqueue
or
.i /usr/spool/mqueue .
.pp
All queue files have the name
\fIx\fP\|\fBf\fP\fIAAA99999\fP
where
.i AAA99999
is the
.i id
for this message
and the
.i x
is a type.
The first letter of the id encodes the hour of the day
that the message was received by the system
(with A being the hour between midnight and 1:00AM).
All files with the same id collectively define one message.
.pp
The types are:
.nr ii 0.5i
.ip d
The data file.
The message body (excluding the header) is kept in this file.
.ip l
The lock file.
If this file exists,
the job is currently being processed,
and a queue run will not process the file.
For that reason,
an extraneous
.b lf
file can cause a job to apparently disappear
(it will not even time out!).
[Actually, this file is obsolete on most systems that support the
.b flock
or
.b lockf
system calls.]
.ip n
This file is created when an id is being created.
It is a separate file to insure that no mail can ever be destroyed
due to a race condition.
It should exist for no more than a few milliseconds
at any given time.
[This is only used on old versions of
.i sendmail ;
it is not used 
on newer versions.]
.ip q
The queue control file.
This file contains the information necessary to process the job.
.ip t
A temporary file.
These are an image of the
.b qf
file when it is being rebuilt.
It should be renamed to a
.b qf
file very quickly.
.ip x
A transcript file,
existing during the life of a session
showing everything that happens
during that session.
.pp
The
.b qf
file is structured as a series of lines
each beginning with a code letter.
The lines are as follows:
.ip V
The version number of the queue file format,
used to allow new
.i sendmail
binaries to read queue files created by older versions.
Defaults to version zero.
.ip D
The name of the data file.
There may only be one of these lines.
.ip H
A header definition.
There may be any number of these lines.
The order is important:
they represent the order in the final message.
These use the same syntax
as header definitions in the configuration file.
.ip C
The controlling address.
The syntax is
.q localuser:aliasname .
Recipient addresses following this line
E 157
will be flagged so that deliveries will be run as the
.i localuser
(a user name from the /etc/passwd file);
.i aliasname
is the name of the alias that expanded to this address
(used for printing messages).
.ip Q
The ``original recipient'',
specified by the ORCPT= field in an ESMTP transaction.
Used exclusively for Delivery Status Notifications.
It applies only to the immediately following `R' line.
.ip R
A recipient address.
This will normally be completely aliased,
but is actually realiased when the job is processed.
There will be one line
for each recipient.
Version 1 qf files
also include a leading colon-terminated list of flags,
which can be
`S' to return a message on successful final delivery,
`F' to return a message on failure,
`D' to return a message if the message is delayed,
`B' to indicate that the body should be returned,
`N' to suppress returning the body,
and
`P' to declare this as a ``primary'' (command line or SMTP-session) address.
.ip S
The sender address.
There may only be one of these lines.
D 157
.ip E
An error address.
If any such lines exist,
they represent the addresses that should receive error messages.
E 157
.ip T
The job creation time.
This is used to compute when to time out the job.
.ip P
The current message priority.
This is used to order the queue.
Higher numbers mean lower priorities.
The priority changes
as the message sits in the queue.
The initial priority depends on the message class
and the size of the message.
.ip M
A message.
This line is printed by the
.i mailq
command,
and is generally used to store status information.
It can contain any text.
.ip F
Flag bits, represented as one letter per flag.
Defined flag bits are
.b r
indicating that this is a response message
and
.b w
indicating that a warning message has been sent
announcing that the mail has been delayed.
.ip N
The total number of delivery attempts.
.ip K
The time (as seconds since January 1, 1970)
of the last delivery attempt.
.ip I
The i-number of the data file;
this can be used to recover your mail queue
D 158
after a disasterous disk crash.
E 158
I 158
after a disastrous disk crash.
E 158
.ip $
A macro definition.
The values of certain macros
(as of this writing, only
.b $r
and
.b $s )
are passed through to the queue run phase.
.ip B
The body type.
The remainder of the line is a text string defining the body type.
If this field is missing,
the body type is assumed to be
.q "undefined"
and no special processing is attempted.
Legal values are
.q 7BIT
and
.q 8BITMIME .
.ip O
The original MTS value (from the ESMTP transaction).
For Deliver Status Notifications only.
.ip Z
The original envelope id (from the ESMTP transaction).
For Deliver Status Notifications only.
.pp
As an example,
the following is a queue file sent to
.q eric@mammoth.Berkeley.EDU
and
.q bostic@okeeffe.CS.Berkeley.EDU \**:
.(f
\**This example is contrived and probably inaccurate for your environment.
Glance over it to get an idea;
nothing can replace looking at what your own system generates.
.)f
.(b
P835771
T404261372
D 157
DdfAAA13557
E 157
Seric
D 157
Eowner-sendmail@vangogh.CS.Berkeley.EDU
E 157
Ceric:sendmail@vangogh.CS.Berkeley.EDU
Reric@mammoth.Berkeley.EDU
Rbostic@okeeffe.CS.Berkeley.EDU
H?P?return-path: <owner-sendmail@vangogh.CS.Berkeley.EDU>
Hreceived: by vangogh.CS.Berkeley.EDU (5.108/2.7) id AAA06703;
	Fri, 17 Jul 92 00:28:55 -0700
Hreceived: from mail.CS.Berkeley.EDU by vangogh.CS.Berkeley.EDU (5.108/2.7)
	id AAA06698; Fri, 17 Jul 92 00:28:54 -0700
Hreceived: from [128.32.31.21] by mail.CS.Berkeley.EDU (5.96/2.5)
	id AA22777; Fri, 17 Jul 92 03:29:14 -0400
Hreceived: by foo.bar.baz.de (5.57/Ultrix3.0-C)
	id AA22757; Fri, 17 Jul 92 09:31:25 GMT
H?F?from: eric@foo.bar.baz.de (Eric Allman)
H?x?full-name: Eric Allman
Hmessage-id: <9207170931.AA22757@foo.bar.baz.de>
HTo: sendmail@vangogh.CS.Berkeley.EDU
Hsubject: this is an example message
.)b
D 157
This shows the name of the data file,
E 157
I 157
This shows
E 157
the person who sent the message,
the submission time
(in seconds since January 1, 1970),
the message priority,
the message class,
the recipients,
and the headers for the message.
.+c "SUMMARY OF SUPPORT FILES"
.pp
This is a summary of the support files
that
.i sendmail
creates or generates.
Many of these can be changed by editing the sendmail.cf file;
check there to find the actual pathnames.
.nr ii 1i
.ip "/usr/\*(SD/sendmail"
The binary of
.i sendmail .
.ip /usr/\*(SB/newaliases
A link to /usr/\*(SD/sendmail;
causes the alias database to be rebuilt.
Running this program is completely equivalent to giving
.i sendmail
the
.b \-bi
flag.
.ip /usr/\*(SB/mailq
Prints a listing of the mail queue.
This program is equivalent to using the
.b \-bp
flag to
.i sendmail .
.ip /etc/sendmail.cf
The configuration file,
in textual form.
.ip /usr/lib/sendmail.hf
E 155
The SMTP help file.
D 45
.ip /usr/lib/sendmail.st
E 45
I 45
.ip /etc/sendmail.st
E 45
A statistics file; need not be present.
I 69
.ip /etc/sendmail.pid
Created in daemon mode;
it contains the process id of the current SMTP daemon.
If you use this in scripts;
use ``head \-1'' to get just the first line;
later versions of
.i sendmail
may add information to subsequent lines.
E 69
D 45
.ip /usr/lib/aliases
E 45
I 45
.ip /etc/aliases
E 45
The textual version of the alias file.
D 45
.ip /usr/lib/aliases.{pag,dir}
E 45
I 45
.ip /etc/aliases.{pag,dir}
E 45
The alias file in
D 19
.i dbm (3)
E 19
I 19
.i dbm \|(3)
E 19
format.
D 30
.ip /etc/syslog
The program to do logging.
.ip /etc/syslog.conf
The configuration file for syslog.
.ip /etc/syslog.pid
Contains the process id of the currently running syslog.
E 30
D 45
.ip /usr/spool/mqueue
E 45
I 45
.ip /var/spool/mqueue
E 45
The directory in which the mail queue
and temporary files reside.
D 45
.ip /usr/spool/mqueue/qf*
E 45
I 45
.ip /var/spool/mqueue/qf*
E 45
Control (queue) files for messages.
D 45
.ip /usr/spool/mqueue/df*
E 45
I 45
.ip /var/spool/mqueue/df*
E 45
Data files.
D 45
.ip /usr/spool/mqueue/lf*
Lock files
.ip /usr/spool/mqueue/tf*
E 45
I 45
.ip /var/spool/mqueue/tf*
E 45
Temporary versions of the qf files,
used during queue file rebuild.
D 45
.ip /usr/spool/mqueue/nf*
A file used when creating a unique id.
.ip /usr/spool/mqueue/xf*
E 45
I 45
.ip /var/spool/mqueue/xf*
E 45
A transcript of the current session.
E 6
D 2
.sh 1 "OTHER STUFF"
.sh 2 "owner-*"
E 2
D 34
.ro
I 2
.ls 1
.tp
E 2
D 6
.bp 1
E 6
I 2
.sp 2i
I 8
.in 0
E 8
.ce 100
D 19
.sz 16
SENDMAIL
.sz 12
E 19
I 19
.sz 24
.b SENDMAIL
.sz 14
E 19
.sp
INSTALLATION AND OPERATION GUIDE
.sp
D 19
.sz
E 19
I 19
.sz 10
E 19
Eric Allman
Britton-Lee, Inc.
I 6
.sp
Version %I%
I 19
D 25
.sp 2
.sz 14
DRAFT
E 25
E 19
E 6
.ce 0
D 6
.bp
E 6
I 6
.bp 1
E 34
I 34
.\".ro
D 154
.\".ls 1
.\".tp
.\".sp 2i
.\".in 0
.\".ce 100
.\".sz 24
.\".b SENDMAIL
.\".sz 14
.\".sp
.\"INSTALLATION AND OPERATION GUIDE
.\".sp
.\".sz 10
.\"Eric Allman
.\"Britton-Lee, Inc.
.\".sp
.\"Version %I%
.\".ce 0
D 114
.pn 2
.bp
E 114
I 114
.bp 2
I 138
.rs
.sp |4i
.ce 2
This page intentionally left blank;
replace it with a blank sheet for double-sided output.
.bp 3
E 138
E 114
E 34
E 6
E 2
.ce
I 19
.sz 12
E 19
TABLE OF CONTENTS
I 19
.sz 10
E 19
I 8
D 34
.sp 2
E 34
I 34
.sp
E 34
I 11
.\" remove some things to avoid "out of temp file space" problem
.rm sh
.rm (x
.rm )x
.rm ip
.rm pp
.rm lp
.rm he
.rm fo
.rm eh
.rm oh
.rm ef
.rm of
E 11
E 8
D 2
.ls 1
E 2
.xp
E 154
E 1
I 154
.\".ls 1
.\".tp
.\".sp 2i
.\".in 0
.\".ce 100
.\".sz 24
.\".b SENDMAIL
.\".sz 14
.\".sp
.\"INSTALLATION AND OPERATION GUIDE
.\".sp
.\".sz 10
.\"Eric Allman
.\"Britton-Lee, Inc.
.\".sp
.\"Version %I%
.\".ce 0
.bp 2
D 163
.rs
.sp |4i
E 163
I 163
.rs
.sp |4i
E 163
.ce 2
This page intentionally left blank;
replace it with a blank sheet for double-sided output.
.bp 3
.ce
.sz 12
TABLE OF CONTENTS
.sz 10
.sp
.\" remove some things to avoid "out of temp file space" problem
.rm sh
.rm (x
.rm )x
.rm ip
.rm pp
.rm lp
.rm he
.rm fo
.rm eh
.rm oh
.rm ef
.rm of
.xp
E 154
