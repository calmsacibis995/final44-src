h00564
s 00002/00000/00232
d D 8.26 95/06/20 06:31:58 eric 26 25
c do a "make depend" when you create a new obj directory
e
s 00001/00000/00231
d D 8.25 95/06/11 10:59:00 eric 25 24
c hack for BSD-OS 1.0
e
s 00037/00001/00194
d D 8.24 95/06/11 09:08:14 eric 24 23
c add -m flag to skip make (just print what it will do)
e
s 00001/00000/00194
d D 8.23 95/05/19 16:00:09 eric 23 22
c fix compile problems on various platforms
e
s 00003/00003/00191
d D 8.22 95/05/14 20:19:29 eric 22 21
c more cleanup from Motonori Nakamura
e
s 00035/00001/00159
d D 8.21 95/05/14 09:24:36 eric 21 20
c more ugly hacks for systems without uname
e
s 00004/00007/00156
d D 8.20 95/04/26 11:35:45 eric 20 19
c better implementation -- fixes $rel for HP-UX as well
e
s 00007/00001/00156
d D 8.19 95/04/26 11:24:21 eric 19 18
c fix rbase for HP-UX; announce the various configuration variables
e
s 00001/00001/00156
d D 8.18 95/04/10 11:39:18 eric 18 17
c patch for NeXT
e
s 00004/00024/00153
d D 8.17 95/04/09 11:58:35 eric 17 16
c improvements on suffix algorithm
e
s 00055/00003/00122
d D 8.16 95/04/08 14:04:13 eric 16 15
c allow arbitrary user suffix (e.g., for different compile flags)
e
s 00017/00017/00108
d D 8.15 95/03/23 14:46:47 eric 15 14
c change order in Makefile filenames: $os.$arch.$rel => $os.$rel.$arch
e
s 00015/00006/00110
d D 8.14 95/01/08 12:46:47 eric 14 13
c NeXT portability
e
s 00006/00001/00110
d D 8.13 95/01/07 10:35:22 eric 13 12
c work around HP-UX shell bug
e
s 00001/00001/00110
d D 8.12 94/12/28 07:31:53 eric 12 11
c portability fixes for Amdahl UTS System V 2.1.5
e
s 00001/00001/00110
d D 8.11 94/12/14 14:24:29 eric 11 10
c typo
e
s 00001/00000/00110
d D 8.10 94/12/11 15:18:39 eric 10 9
c cleanup for Paragon
e
s 00009/00000/00101
d D 8.9 94/12/05 14:06:29 eric 9 8
c patches for Altos System V
e
s 00015/00001/00086
d D 8.8 94/12/04 16:51:10 eric 8 7
c updates for Ultrix, Solaris, and DYNIX/ptx
e
s 00001/00001/00086
d D 8.7 94/11/27 11:19:30 eric 7 6
c use ${MAKE} if it is set
e
s 00011/00011/00076
d D 8.6 94/10/25 17:04:18 eric 6 5
c makefiles are now in a subdirectory
e
s 00001/00001/00086
d D 8.5 94/02/27 11:51:25 eric 5 4
c fix typo
e
s 00037/00007/00050
d D 8.4 94/01/24 07:56:39 eric 4 3
c try to make it adapt better for Makefile names in particular
e
s 00001/00001/00056
d D 8.3 93/09/26 11:38:48 eric 3 2
c link documentation and .hf so install works
e
s 00001/00001/00056
d D 8.2 93/08/15 13:25:18 eric 2 1
c fix auto-create directory
e
s 00057/00000/00000
d D 8.1 93/08/15 13:15:34 eric 1 0
c date and time created 93/08/15 13:15:34 by eric
e
u
U
t
T
I 1
#!/bin/sh

# Copyright (c) 1993 Eric P. Allman
# Copyright (c) 1993 The Regents of the University of California.
# All rights reserved.
#
# %sccs.include.redist.sh%
#
#       %W% (Berkeley) %G%
#

#
#  A quick-and-dirty script to compile sendmail in the presence of
#  multiple architectures and Makefiles.
#

I 24
if [ "x${1-""}" = "x-m" ]
then
	# show Makefile name only
	mflag=1
else
	mflag=""
fi

E 24
I 21
#
#  Do heuristic guesses for machines that do not have uname
#
E 21
D 14
# determine machine architecture
D 12
arch=`uname -m`
E 12
I 12
arch=`uname -m | sed -e 's/ //g'`
E 14
I 14
if [ -d /LocalApps -a ! -f /bin/uname -a ! -f /usr/bin/uname ]
then
	# probably a NeXT box
	arch=NeXT
	os=Mach
D 18
	rel=`strings /mach | grep Mach | sed -e 's/.* Mach //' -e 's/:.*//'`
E 18
I 18
	rel=`strings /mach | grep 'Mach.*:' | sed -e 's/.* Mach //' -e 's/:.*//'`
E 18
D 21
else
E 21
I 21
elif [ -f /usr/sony/bin/machine -a -f /etc/osversion ]
then
	# probably a Sony NEWS 4.x
	os=NEWS-OS
	rel=`awk '{ print $3}' /etc/osversion`
	arch=`/usr/sony/bin/machine`
elif [ -d /usr/omron -a -f /bin/luna ]
then
	# probably a Omron LUNA
	os=LUNA
D 22
	if [ -f /bin/luna1 -a /bin/luna1 ]
E 22
I 22
	if [ -f /bin/luna1 ] && /bin/luna1
E 22
	then
		rel=unios-b
		arch=luna1
D 22
	elif [ -f /bin/luna2 -a /bin/luna2 ]
E 22
I 22
	elif [ -f /bin/luna2 ] && /bin/luna2
E 22
	then
		rel=Mach
		arch=luna2
D 22
	elif [ -f /bin/luna88k -a /bin/luna88k ]
E 22
I 22
	elif [ -f /bin/luna88k ] && /bin/luna88k
E 22
	then
		rel=Mach
		arch=luna88k
	fi
fi

if [ ! "$arch" -a ! "$os" -a ! "$rel" ]
then
E 21
	arch=`uname -m | sed -e 's/ //g'`
D 17
	os=`uname -s`
E 17
I 17
	os=`uname -s | sed 's/\//-/g'`
E 17
	rel=`uname -r`
fi

# tweak machine architecture
E 14
E 12
case $arch
in
  sun4*)	arch=sun4;;
I 4

  9000/*)	arch=`echo $arch | sed -e 's/9000.//' -e 's/..$/xx/'`;;
E 4
esac

D 14
# determine operating system type
os=`uname -s`
E 14
I 14
D 20
# tweak operating system type
E 20
I 20
# tweak operating system type and release
E 20
E 14
I 8
case $os
in
D 17
  DYNIX/ptx)	os=PTX;;
E 17
I 17
  DYNIX-ptx)	os=PTX;;
E 17
I 10
  Paragon*)	os=Paragon;;
I 20
  HP-UX)	rel=`echo $rel | sed -e 's/^[^.]*\.0*//'`;;
I 23
  AIX)		rel=`uname -v`;;
I 25
  BSD-386)	os=BSD-OS;;
E 25
E 23
E 20
E 10
esac
E 8

D 14
# determine operating system release
rel=`uname -r`
E 14
I 14
D 20
# tweak operating system release
E 14
I 4
D 19
rbase=`echo $rel | sed 's/\..*//''`
E 19
I 19
case $os
in
  HP-UX)	rbase=`echo $rel | sed -e 's/^[^.]*\.0*//' -e 's/\..*//'`;;
  *)		rbase=`echo $rel | sed -e 's/\..*//'`
esac
E 20
I 20
# get "base part" of operating system release
rbase=`echo $rel | sed -e 's/\..*//'`
E 20
E 19
E 4

I 8
# heuristic tweaks to clean up names
I 9
if [ "$os" = "unix" ]
then
	# might be Altos System V
	case $rel
	in
	  5.3*)		os=Altos;;
	esac
D 11
esac
E 11
I 11
fi
E 11

E 9
if [ -r /unix -a -r /usr/lib/libseq.a -a -r /lib/cpp ]
then
	# might be a DYNIX/ptx 2.x system, which has a broken uname
	if strings /lib/cpp | grep _SEQUENT_ > /dev/null
	then
		os=PTX
	fi
I 21
fi

if [ -d /usr/nec -a "$os" = "UNIX_System_V" ]
then
	os=EWS-UX_V
E 21
fi

I 16
# see if there is a "user suffix" specified
D 17
if [ "${SUFFIX-}x" = "x" ]
E 17
I 17
if [ "${SENDMAIL_SUFFIX-}x" = "x" ]
E 17
then
	sfx=""
else
D 17
	sfx=".${SUFFIX}"
E 17
I 17
	sfx=".${SENDMAIL_SUFFIX}"
E 17
fi
I 19

D 24
echo "Making sendmail with os=$os, rel=$rel, rbase=$rbase, arch=$arch, sfx=$sfx"
E 24
I 24
echo "Configuration: os=$os, rel=$rel, rbase=$rbase, arch=$arch, sfx=$sfx"
E 24
E 19

E 16
E 8
# now try to find a reasonable object directory
D 15
if [ -r obj.$os.$arch.$rel ]; then
	obj=obj.$os.$arch.$rel
I 4
elif [ -r obj.$os.$arch.$rbase.x ]; then
	obj=obj.$os.$arch.$rbase.x
E 15
I 15
D 16
if [ -r obj.$os.$rel.$arch ]; then
E 16
I 16
if [ -r obj.$os.$rel.$arch$sfx ]; then
	obj=obj.$os.$rel.$arch$sfx
D 17
elif [ -r obj.$os.$rel.$arch ]; then
E 16
	obj=obj.$os.$rel.$arch
E 17
I 16
elif [ -r obj.$os.$rbase.x.$arch$sfx ]; then
	obj=obj.$os.$rbase.x.$arch$sfx
E 16
D 17
elif [ -r obj.$os.$rbase.x.$arch ]; then
	obj=obj.$os.$rbase.x.$arch
E 17
I 16
elif [ -r obj.$os.$rel$sfx ]; then
	obj=obj.$os.$rel$sfx
E 16
E 15
E 4
D 17
elif [ -r obj.$os.$rel ]; then
	obj=obj.$os.$rel
E 17
I 16
elif [ -r obj.$os.$rbase.x$sfx ]; then
	obj=obj.$os.$rbase.x$sfx
E 16
I 4
D 17
elif [ -r obj.$os.$rbase.x ]; then
	obj=obj.$os.$rbase.x
E 17
I 16
elif [ -r obj.$os.$arch$sfx ]; then
	obj=obj.$os.$arch$sfx
E 16
E 4
D 17
elif [ -r obj.$os.$arch ]; then
	obj=obj.$os.$arch
E 17
I 16
elif [ -r obj.$rel.$arch$sfx ]; then
	obj=obj.$rel.$arch$sfx
E 16
D 15
elif [ -r obj.$arch.$rel ]; then
	obj=obj.$arch.$rel
I 4
elif [ -r obj.$arch.$rbase.x ]; then
	obj=obj.$arch.$rbase.x
E 15
I 15
D 17
elif [ -r obj.$rel.$arch ]; then
	obj=obj.$rel.$arch
E 17
I 16
elif [ -r obj.$rbase.x.$arch$sfx ]; then
	obj=obj.$rbase.x.$arch$sfx
E 16
D 17
elif [ -r obj.$rbase.x.$arch ]; then
	obj=obj.$rbase.x.$arch
E 17
I 16
elif [ -r obj.$os$sfx ]; then
	obj=obj.$os$sfx
E 16
E 15
E 4
D 17
elif [ -r obj.$os ]; then
	obj=obj.$os
E 17
I 16
elif [ -r obj.$arch$sfx ]; then
	obj=obj.$arch$sfx
E 16
D 17
elif [ -r obj.$arch ]; then
	obj=obj.$arch
E 17
I 16
elif [ -r obj.$rel$sfx ]; then
	obj=obj.$rel$sfx
E 16
D 17
elif [ -r obj.$rel ]; then
	obj=obj.$rel
E 17
I 16
elif [ -r obj$sfx ]; then
	obj=obj$sfx
E 16
D 4
elif [ -r Makefile.$os ]; then
E 4
I 4
else
	# no existing obj directory -- try to create one if Makefile found
E 4
D 2
	obj=obj.$arch.$os.$rel
E 2
I 2
D 15
	obj=obj.$os.$arch.$rel
E 2
D 4
	echo "Creating $obj using Makefile.$os"
E 4
I 4
D 6
	if [ -r Makefile.$os.$arch.$rel ]; then
E 6
I 6
	if [ -r Makefiles/Makefile.$os.$arch.$rel ]; then
E 6
		makefile=Makefile.$os.$arch.$rel
D 6
	elif [ -r Makefile.$os.$arch.$rbase.x ]; then
E 6
I 6
	elif [ -r Makefiles/Makefile.$os.$arch.$rbase.x ]; then
E 6
		makefile=Makefile.$os.$arch.$rbase.x
E 15
I 15
D 16
	obj=obj.$os.$rel.$arch
	if [ -r Makefiles/Makefile.$os.$rel.$arch ]; then
E 16
I 16
	obj=obj.$os.$rel.$arch$sfx
	if [ -r Makefiles/Makefile.$os.$rel.$arch$sfx ]; then
		makefile=Makefile.$os.$rel.$arch$sfx
	elif [ -r Makefiles/Makefile.$os.$rel.$arch ]; then
E 16
		makefile=Makefile.$os.$rel.$arch
I 16
	elif [ -r Makefiles/Makefile.$os.$rbase.x.$arch$sfx ]; then
		makefile=Makefile.$os.$rbase.x.$arch$sfx
E 16
	elif [ -r Makefiles/Makefile.$os.$rbase.x.$arch ]; then
		makefile=Makefile.$os.$rbase.x.$arch
I 16
	elif [ -r Makefiles/Makefile.$os.$rel$sfx ]; then
		makefile=Makefile.$os.$rel$sfx
E 16
E 15
D 6
	elif [ -r Makefile.$os.$rel ]; then
E 6
I 6
	elif [ -r Makefiles/Makefile.$os.$rel ]; then
E 6
		makefile=Makefile.$os.$rel
I 16
	elif [ -r Makefiles/Makefile.$os.$rbase.x$sfx ]; then
		makefile=Makefile.$os.$rbase.x$sfx
E 16
D 6
	elif [ -r Makefile.$os.$rbase.x ]; then
E 6
I 6
	elif [ -r Makefiles/Makefile.$os.$rbase.x ]; then
E 6
D 5
		makefile=Makefile.$os.$base.x
E 5
I 5
		makefile=Makefile.$os.$rbase.x
I 16
	elif [ -r Makefiles/Makefile.$os.$arch$sfx ]; then
		makefile=Makefile.$os.$arch$sfx
E 16
E 5
D 6
	elif [ -r Makefile.$os.$arch ]; then
E 6
I 6
	elif [ -r Makefiles/Makefile.$os.$arch ]; then
E 6
		makefile=Makefile.$os.$arch
I 16
	elif [ -r Makefiles/Makefile.$rel.$arch$sfx ]; then
		makefile=Makefile.$rel.$arch$sfx
E 16
D 6
	elif [ -r Makefile.$arch.$rel ]; then
E 6
I 6
D 15
	elif [ -r Makefiles/Makefile.$arch.$rel ]; then
E 6
		makefile=Makefile.$arch.$rel
D 6
	elif [ -r Makefile.$arch.$rbase.x ]; then
E 6
I 6
	elif [ -r Makefiles/Makefile.$arch.$rbase.x ]; then
E 6
		makefile=Makefile.$arch.$rbase.x
E 15
I 15
	elif [ -r Makefiles/Makefile.$rel.$arch ]; then
		makefile=Makefile.$rel.$arch
I 16
	elif [ -r Makefiles/Makefile.$rbase.x.$arch$sfx ]; then
		makefile=Makefile.$rbase.x.$arch$sfx
E 16
	elif [ -r Makefiles/Makefile.$rbase.x.$arch ]; then
		makefile=Makefile.$rbase.x.$arch
I 16
	elif [ -r Makefiles/Makefile.$os$sfx ]; then
		makefile=Makefile.$os$sfx
E 16
E 15
D 6
	elif [ -r Makefile.$os ]; then
E 6
I 6
	elif [ -r Makefiles/Makefile.$os ]; then
E 6
		makefile=Makefile.$os
I 16
	elif [ -r Makefiles/Makefile.$arch$sfx ]; then
		makefile=Makefile.$arch$sfx
E 16
D 6
	elif [ -r Makefile.$arch ]; then
E 6
I 6
	elif [ -r Makefiles/Makefile.$arch ]; then
E 6
		makefile=Makefile.$arch
I 16
	elif [ -r Makefiles/Makefile.$rel$sfx ]; then
		makefile=Makefile.$rel$sfx
E 16
D 6
	elif [ -r Makefile.$rel ]; then
E 6
I 6
	elif [ -r Makefiles/Makefile.$rel ]; then
E 6
		makefile=Makefile.$rel
I 16
	elif [ -r Makefiles/Makefile.$rel$sfx ]; then
		makefile=Makefile.$rel$sfx
E 16
	else
		echo "Cannot determine how to support $arch.$os.$rel"
		exit 1
	fi
I 24
	if [ "$mflag" ]
	then
		echo "Will run in virgin $obj using $makefile"
		exit 0
	fi
E 24
	echo "Creating $obj using $makefile"
E 4
	mkdir $obj
D 3
	(cd $obj; ln -s ../*.[ch] .; ln -s ../Makefile.$os Makefile)
E 3
I 3
D 4
	(cd $obj; ln -s ../*.[ch158] ../sendmail.hf .; ln -s ../Makefile.$os Makefile)
E 3
else
	echo "Warning: no recognized support for $arch.$os.$rel"
	echo "	... winging it ..."
	obj=.
E 4
I 4
D 6
	(cd $obj; ln -s ../*.[ch158] ../sendmail.hf .; ln -s ../$makefile Makefile)
E 6
I 6
	(cd $obj; ln -s ../*.[ch158] ../sendmail.hf .; ln -s ../Makefiles/$makefile Makefile)
I 26
	echo "Making dependencies in $obj"
	(cd $obj; ${MAKE-make} depend)
E 26
E 6
E 4
fi
I 24

if [ "$mflag" ]
then
	makefile=`ls -l $obj/Makefile | sed 's/.* //'`
	if [ -z "$makefile" ]
	then
		echo "ERROR: $obj exists but has no Makefile"
		exit 1
	fi
	case $makefile
	in
	  ../Makefiles/*)
		makefile=`echo $makefile | sed 's/...Makefiles.//'`
		echo "Will run in existing $obj using $makefile"
		;;

	  *)
		echo "Will run in existing $obj using custom $makefile"
		;;
	esac
	exit 0
fi

E 24
echo "Making in $obj"
cd $obj
D 7
exec make -f Makefile $*
E 7
I 7
D 8
exec ${MAKE:-make} $*
E 8
I 8
D 13
exec ${MAKE-make} "$@"
E 13
I 13
if [ $# = 0 ]
then
	exec ${MAKE-make}
else
	exec ${MAKE-make} "$@"
fi
E 13
E 8
E 7
E 1
